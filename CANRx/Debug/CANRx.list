
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009bc  08011d3c  08011d3c  00021d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126f8  080126f8  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  080126f8  080126f8  000226f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012700  08012700  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012700  08012700  00022700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012704  08012704  00022704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08012708  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000077a4  20000168  08012870  00030168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000790c  08012870  0003790c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022ec5  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051ab  00000000  00000000  0005309e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  00058250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001567  00000000  00000000  00059e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e885  00000000  00000000  0005b3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026510  00000000  00000000  00089c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101f25  00000000  00000000  000b015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e54  00000000  00000000  001b2084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001b9ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	08011d24 	.word	0x08011d24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	08011d24 	.word	0x08011d24

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b0ce      	sub	sp, #312	; 0x138
 80005e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fa8e 	bl	8001b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 facd 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fc25 	bl	8000e38 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fbfd 	bl	8000dec <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 fb2f 	bl	8000c54 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fba3 	bl	8000d40 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fbc7 	bl	8000d8c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f00a f883 	bl	800a708 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00f fbdf 	bl	800fdc4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000606:	f000 fb5b 	bl	8000cc0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DS1307_Init(&hi2c1);
 800060a:	48bc      	ldr	r0, [pc, #752]	; (80008fc <main+0x320>)
 800060c:	f001 f98a 	bl	8001924 <DS1307_Init>
		RESET_BUFFER,
		RESET_STATE,
		POWER_OFF
	} state_t;
	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint32_t byteswritten; /* File write/read counts */
	uint32_t buffer_emptyings = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	uint32_t total_size = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8000622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000626:	2b0c      	cmp	r3, #12
 8000628:	f200 8275 	bhi.w	8000b16 <main+0x53a>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <main+0x58>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000669 	.word	0x08000669
 8000638:	080006a1 	.word	0x080006a1
 800063c:	08000795 	.word	0x08000795
 8000640:	080008d1 	.word	0x080008d1
 8000644:	08000b2b 	.word	0x08000b2b
 8000648:	08000b2b 	.word	0x08000b2b
 800064c:	08000981 	.word	0x08000981
 8000650:	08000b2b 	.word	0x08000b2b
 8000654:	080009cb 	.word	0x080009cb
 8000658:	08000b2b 	.word	0x08000b2b
 800065c:	080009f9 	.word	0x080009f9
 8000660:	08000a87 	.word	0x08000a87
 8000664:	08000ae3 	.word	0x08000ae3
		case TURN_ON:
			MX_DMA_Init();
 8000668:	f000 fbc0 	bl	8000dec <MX_DMA_Init>
			MX_SDMMC1_SD_Init();
 800066c:	f000 fb68 	bl	8000d40 <MX_SDMMC1_SD_Init>
			MX_FATFS_Init();
 8000670:	f00a f84a 	bl	800a708 <MX_FATFS_Init>
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000678:	48a1      	ldr	r0, [pc, #644]	; (8000900 <main+0x324>)
 800067a:	f002 ff2b 	bl	80034d4 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4ba0      	ldr	r3, [pc, #640]	; (8000904 <main+0x328>)
 8000684:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 8000686:	4b9f      	ldr	r3, [pc, #636]	; (8000904 <main+0x328>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <main+0xb6>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <main+0xb8>
 8000692:	230c      	movs	r3, #12
 8000694:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			NEW_LOG_FLAG = 0;
 8000698:	4b9b      	ldr	r3, [pc, #620]	; (8000908 <main+0x32c>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e249      	b.n	8000b34 <main+0x558>

		case PERIPHERAL_INIT:
			uint8_t date = DS1307_GetDate();
 80006a0:	f001 f9b2 	bl	8001a08 <DS1307_GetDate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			uint8_t month = DS1307_GetMonth();
 80006aa:	f001 f9b9 	bl	8001a20 <DS1307_GetMonth>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
			uint8_t year = DS1307_GetYear();
 80006b4:	f001 f9c0 	bl	8001a38 <DS1307_GetYear>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
			uint8_t hour = DS1307_GetHour();
 80006be:	f001 f9dd 	bl	8001a7c <DS1307_GetHour>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
			uint8_t minute = DS1307_GetMinute();
 80006c8:	f001 f9e7 	bl	8001a9a <DS1307_GetMinute>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			uint8_t second = DS1307_GetSecond();
 80006d2:	f001 f9ee 	bl	8001ab2 <DS1307_GetSecond>
 80006d6:	4603      	mov	r3, r0
 80006d8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			printf("%02d/%02d/20%02d %02d:%02d:%02d\n\r",month, date, year, hour, minute, second);
 80006dc:	f897 0112 	ldrb.w	r0, [r7, #274]	; 0x112
 80006e0:	f897 4113 	ldrb.w	r4, [r7, #275]	; 0x113
 80006e4:	f897 5111 	ldrb.w	r5, [r7, #273]	; 0x111
 80006e8:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80006ec:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80006f0:	f897 110e 	ldrb.w	r1, [r7, #270]	; 0x10e
 80006f4:	9102      	str	r1, [sp, #8]
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	462b      	mov	r3, r5
 80006fc:	4622      	mov	r2, r4
 80006fe:	4601      	mov	r1, r0
 8000700:	4882      	ldr	r0, [pc, #520]	; (800090c <main+0x330>)
 8000702:	f010 fb23 	bl	8010d4c <iprintf>

			data_buffer[0][0] = '\00';
 8000706:	4b82      	ldr	r3, [pc, #520]	; (8000910 <main+0x334>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
			data_buffer[1][0] = '\00';
 800070c:	4b80      	ldr	r3, [pc, #512]	; (8000910 <main+0x334>)
 800070e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
			buffer_fill_level[0] = 0;
 8000718:	4b7e      	ldr	r3, [pc, #504]	; (8000914 <main+0x338>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[1] = 0;
 800071e:	4b7d      	ldr	r3, [pc, #500]	; (8000914 <main+0x338>)
 8000720:	2200      	movs	r2, #0
 8000722:	705a      	strb	r2, [r3, #1]
			current_buffer = 0;
 8000724:	4b7c      	ldr	r3, [pc, #496]	; (8000918 <main+0x33c>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]

			printf("Initializing Peripherals...\r\n");
 800072a:	487c      	ldr	r0, [pc, #496]	; (800091c <main+0x340>)
 800072c:	f010 fb74 	bl	8010e18 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000736:	487a      	ldr	r0, [pc, #488]	; (8000920 <main+0x344>)
 8000738:	f002 fee4 	bl	8003504 <HAL_GPIO_WritePin>

			//Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800073c:	4879      	ldr	r0, [pc, #484]	; (8000924 <main+0x348>)
 800073e:	f001 fc49 	bl	8001fd4 <HAL_CAN_Start>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <main+0x176>
				printf("CAN could not start.\r\n");
 8000748:	4877      	ldr	r0, [pc, #476]	; (8000928 <main+0x34c>)
 800074a:	f010 fb65 	bl	8010e18 <puts>
				Error_Handler();
 800074e:	f000 fd3d 	bl	80011cc <Error_Handler>
			}
			if (CAN_Filter_Config() != HAL_OK) {
 8000752:	f000 fceb 	bl	800112c <CAN_Filter_Config>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d004      	beq.n	8000766 <main+0x18a>
				printf("CAN filter failed to set.\r\n");
 800075c:	4873      	ldr	r0, [pc, #460]	; (800092c <main+0x350>)
 800075e:	f010 fb5b 	bl	8010e18 <puts>
				Error_Handler();
 8000762:	f000 fd33 	bl	80011cc <Error_Handler>
			}
			printf("CAN initialization succeeded...\r\n");
 8000766:	4872      	ldr	r0, [pc, #456]	; (8000930 <main+0x354>)
 8000768:	f010 fb56 	bl	8010e18 <puts>

			//Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 800076c:	2200      	movs	r2, #0
 800076e:	4971      	ldr	r1, [pc, #452]	; (8000934 <main+0x358>)
 8000770:	4871      	ldr	r0, [pc, #452]	; (8000938 <main+0x35c>)
 8000772:	f00e fd0d 	bl	800f190 <f_mount>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d004      	beq.n	8000786 <main+0x1aa>
				printf("Mounting failed!\r\n");
 800077c:	486f      	ldr	r0, [pc, #444]	; (800093c <main+0x360>)
 800077e:	f010 fb4b 	bl	8010e18 <puts>
				Error_Handler();
 8000782:	f000 fd23 	bl	80011cc <Error_Handler>
			}

			printf("SD initialization succeeded...\r\n");
 8000786:	486e      	ldr	r0, [pc, #440]	; (8000940 <main+0x364>)
 8000788:	f010 fb46 	bl	8010e18 <puts>

			state = CREATE_LOG_FILE;
 800078c:	2302      	movs	r3, #2
 800078e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			break;
 8000792:	e1cf      	b.n	8000b34 <main+0x558>

		case CREATE_LOG_FILE:
			printf("Creating new log file...\r\n");
 8000794:	486b      	ldr	r0, [pc, #428]	; (8000944 <main+0x368>)
 8000796:	f010 fb3f 	bl	8010e18 <puts>

			//Opening CAN_DATA directory
			if (f_opendir(&dir, "/CAN_DATA") != FR_OK) {
 800079a:	496b      	ldr	r1, [pc, #428]	; (8000948 <main+0x36c>)
 800079c:	486b      	ldr	r0, [pc, #428]	; (800094c <main+0x370>)
 800079e:	f00f f918 	bl	800f9d2 <f_opendir>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <main+0x1d6>
				printf("Failed to open /CAN_DATA directory!\r\n");
 80007a8:	4869      	ldr	r0, [pc, #420]	; (8000950 <main+0x374>)
 80007aa:	f010 fb35 	bl	8010e18 <puts>
				Error_Handler();
 80007ae:	f000 fd0d 	bl	80011cc <Error_Handler>
			}

			// Finding next filename
			char last_file_number[5];
			uint16_t max_file_number = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
			do {
				if (f_readdir(&dir, &fno) != FR_OK){
 80007b8:	4966      	ldr	r1, [pc, #408]	; (8000954 <main+0x378>)
 80007ba:	4864      	ldr	r0, [pc, #400]	; (800094c <main+0x370>)
 80007bc:	f00f f9a2 	bl	800fb04 <f_readdir>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x1f4>
					printf("Failed to read /CAN_DATA directory!\r\n");
 80007c6:	4864      	ldr	r0, [pc, #400]	; (8000958 <main+0x37c>)
 80007c8:	f010 fb26 	bl	8010e18 <puts>
					Error_Handler();
 80007cc:	f000 fcfe 	bl	80011cc <Error_Handler>
				}
				if (fno.fname[0] != 0){
 80007d0:	4b60      	ldr	r3, [pc, #384]	; (8000954 <main+0x378>)
 80007d2:	7d9b      	ldrb	r3, [r3, #22]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d030      	beq.n	800083a <main+0x25e>
					for(int i=4; i<9; i++)
 80007d8:	2304      	movs	r3, #4
 80007da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007de:	e012      	b.n	8000806 <main+0x22a>
						last_file_number[i-4] = fno.fname[i];
 80007e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007e4:	3b04      	subs	r3, #4
 80007e6:	495b      	ldr	r1, [pc, #364]	; (8000954 <main+0x378>)
 80007e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80007ec:	440a      	add	r2, r1
 80007ee:	3216      	adds	r2, #22
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80007f6:	443b      	add	r3, r7
 80007f8:	f803 2c28 	strb.w	r2, [r3, #-40]
					for(int i=4; i<9; i++)
 80007fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000800:	3301      	adds	r3, #1
 8000802:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800080a:	2b08      	cmp	r3, #8
 800080c:	dde8      	ble.n	80007e0 <main+0x204>

					if (max_file_number < strtol(last_file_number, NULL, 10))
 800080e:	f8b7 411a 	ldrh.w	r4, [r7, #282]	; 0x11a
 8000812:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000816:	220a      	movs	r2, #10
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f010 fa6e 	bl	8010cfc <strtol>
 8000820:	4603      	mov	r3, r0
 8000822:	429c      	cmp	r4, r3
 8000824:	da09      	bge.n	800083a <main+0x25e>
						max_file_number = strtol(last_file_number, NULL, 10);
 8000826:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800082a:	220a      	movs	r2, #10
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f010 fa64 	bl	8010cfc <strtol>
 8000834:	4603      	mov	r3, r0
 8000836:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

					//printf("File found: %s\n\r", fno.fname); // Print File Name
				}
			} while (fno.fname[0] != 0);
 800083a:	4b46      	ldr	r3, [pc, #280]	; (8000954 <main+0x378>)
 800083c:	7d9b      	ldrb	r3, [r3, #22]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1ba      	bne.n	80007b8 <main+0x1dc>

			//Closing CAN_DATA directory
			if (f_closedir(&dir) != FR_OK) {
 8000842:	4842      	ldr	r0, [pc, #264]	; (800094c <main+0x370>)
 8000844:	f00f f938 	bl	800fab8 <f_closedir>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d004      	beq.n	8000858 <main+0x27c>
				printf("Failed to close /CAN_DATA directory!\r\n");
 800084e:	4843      	ldr	r0, [pc, #268]	; (800095c <main+0x380>)
 8000850:	f010 fae2 	bl	8010e18 <puts>
				Error_Handler();
 8000854:	f000 fcba 	bl	80011cc <Error_Handler>
			}

			//Creating new filename
			TCHAR filename[FILENAME_MAX_BYTES];
			snprintf(filename, FILENAME_MAX_BYTES, "/CAN_DATA/CAN_%05d.log", max_file_number + 1);
 8000858:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 800085c:	3301      	adds	r3, #1
 800085e:	4638      	mov	r0, r7
 8000860:	4a3f      	ldr	r2, [pc, #252]	; (8000960 <main+0x384>)
 8000862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000866:	f010 f8e3 	bl	8010a30 <sniprintf>
			printf("New log name: %s \n\r", filename);
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	483d      	ldr	r0, [pc, #244]	; (8000964 <main+0x388>)
 8000870:	f010 fa6c 	bl	8010d4c <iprintf>

			//Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 8000874:	463b      	mov	r3, r7
 8000876:	220a      	movs	r2, #10
 8000878:	4619      	mov	r1, r3
 800087a:	483b      	ldr	r0, [pc, #236]	; (8000968 <main+0x38c>)
 800087c:	f00e fcce 	bl	800f21c <f_open>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d006      	beq.n	8000894 <main+0x2b8>
					!= FR_OK) {
				printf("Failed to create new log file: %s ...!\r\n", filename);
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4838      	ldr	r0, [pc, #224]	; (800096c <main+0x390>)
 800088c:	f010 fa5e 	bl	8010d4c <iprintf>
				Error_Handler();
 8000890:	f000 fc9c 	bl	80011cc <Error_Handler>
			}
			printf("Successfully created new log file: %s ...\r\n", filename);
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4835      	ldr	r0, [pc, #212]	; (8000970 <main+0x394>)
 800089a:	f010 fa57 	bl	8010d4c <iprintf>

			//Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 800089e:	2102      	movs	r1, #2
 80008a0:	4820      	ldr	r0, [pc, #128]	; (8000924 <main+0x348>)
 80008a2:	f001 fd36 	bl	8002312 <HAL_CAN_ActivateNotification>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d004      	beq.n	80008b6 <main+0x2da>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
				printf("Failed to activate CAN\n\r");
 80008ac:	4831      	ldr	r0, [pc, #196]	; (8000974 <main+0x398>)
 80008ae:	f010 fa4d 	bl	8010d4c <iprintf>
				Error_Handler();
 80008b2:	f000 fc8b 	bl	80011cc <Error_Handler>
			}

			printf("Ready to receive messages!\r\n");
 80008b6:	4830      	ldr	r0, [pc, #192]	; (8000978 <main+0x39c>)
 80008b8:	f010 faae 	bl	8010e18 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET); // Successful LED
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c2:	4817      	ldr	r0, [pc, #92]	; (8000920 <main+0x344>)
 80008c4:	f002 fe1e 	bl	8003504 <HAL_GPIO_WritePin>

			state = STANDBY;
 80008c8:	2303      	movs	r3, #3
 80008ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			break;
 80008ce:	e131      	b.n	8000b34 <main+0x558>

		case STANDBY:
			if (!POWER_STATE || NEW_LOG_FLAG) //Power switch is off or new log file
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <main+0x328>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <main+0x304>
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <main+0x32c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d003      	beq.n	80008e8 <main+0x30c>
				state = RESET_STATE;
 80008e0:	230b      	movs	r3, #11
 80008e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			else if (is_buffer_filled) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 80008e6:	e122      	b.n	8000b2e <main+0x552>
			else if (is_buffer_filled) //Buffer is filled
 80008e8:	4b24      	ldr	r3, [pc, #144]	; (800097c <main+0x3a0>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	f000 811e 	beq.w	8000b2e <main+0x552>
				state = SD_CARD_WRITE;
 80008f2:	2306      	movs	r3, #6
 80008f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			break;
 80008f8:	e119      	b.n	8000b2e <main+0x552>
 80008fa:	bf00      	nop
 80008fc:	200001ac 	.word	0x200001ac
 8000900:	40021000 	.word	0x40021000
 8000904:	20000518 	.word	0x20000518
 8000908:	20000519 	.word	0x20000519
 800090c:	08011d3c 	.word	0x08011d3c
 8000910:	2000051c 	.word	0x2000051c
 8000914:	20005720 	.word	0x20005720
 8000918:	20005722 	.word	0x20005722
 800091c:	08011d60 	.word	0x08011d60
 8000920:	40021400 	.word	0x40021400
 8000924:	20000184 	.word	0x20000184
 8000928:	08011d80 	.word	0x08011d80
 800092c:	08011d98 	.word	0x08011d98
 8000930:	08011db4 	.word	0x08011db4
 8000934:	20005734 	.word	0x20005734
 8000938:	20005738 	.word	0x20005738
 800093c:	08011dd8 	.word	0x08011dd8
 8000940:	08011dec 	.word	0x08011dec
 8000944:	08011e0c 	.word	0x08011e0c
 8000948:	08011e28 	.word	0x08011e28
 800094c:	200003cc 	.word	0x200003cc
 8000950:	08011e34 	.word	0x08011e34
 8000954:	20000400 	.word	0x20000400
 8000958:	08011e5c 	.word	0x08011e5c
 800095c:	08011e84 	.word	0x08011e84
 8000960:	08011eac 	.word	0x08011eac
 8000964:	08011ec4 	.word	0x08011ec4
 8000968:	2000596c 	.word	0x2000596c
 800096c:	08011ed8 	.word	0x08011ed8
 8000970:	08011f04 	.word	0x08011f04
 8000974:	08011f30 	.word	0x08011f30
 8000978:	08011f4c 	.word	0x08011f4c
 800097c:	20005723 	.word	0x20005723

		case SWITCH_BUFFER:
			break;

		case SD_CARD_WRITE:
			if (f_write(&SDFile, data_buffer[!current_buffer], BUFFER_TOTAL_SIZE, (void*) &byteswritten) != FR_OK || byteswritten == 0) {
 8000980:	4b6d      	ldr	r3, [pc, #436]	; (8000b38 <main+0x55c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf0c      	ite	eq
 8000988:	2301      	moveq	r3, #1
 800098a:	2300      	movne	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	f642 1301 	movw	r3, #10497	; 0x2901
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	4a68      	ldr	r2, [pc, #416]	; (8000b3c <main+0x560>)
 800099a:	1899      	adds	r1, r3, r2
 800099c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80009a0:	f44f 5224 	mov.w	r2, #10496	; 0x2900
 80009a4:	4866      	ldr	r0, [pc, #408]	; (8000b40 <main+0x564>)
 80009a6:	f00e fdf7 	bl	800f598 <f_write>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d103      	bne.n	80009b8 <main+0x3dc>
 80009b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d104      	bne.n	80009c2 <main+0x3e6>
				printf("Writing Failed!\r\n");
 80009b8:	4862      	ldr	r0, [pc, #392]	; (8000b44 <main+0x568>)
 80009ba:	f010 fa2d 	bl	8010e18 <puts>
				Error_Handler();
 80009be:	f000 fc05 	bl	80011cc <Error_Handler>
			}

			state = USB_TRANSMIT;
 80009c2:	2308      	movs	r3, #8
 80009c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			break;
 80009c8:	e0b4      	b.n	8000b34 <main+0x558>

		case SD_CARD_WRITE_ERROR:
			break;

		case USB_TRANSMIT:
			CDC_Transmit_FS(data_buffer[!current_buffer], BUFFER_TOTAL_SIZE);
 80009ca:	4b5b      	ldr	r3, [pc, #364]	; (8000b38 <main+0x55c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf0c      	ite	eq
 80009d2:	2301      	moveq	r3, #1
 80009d4:	2300      	movne	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	f642 1301 	movw	r3, #10497	; 0x2901
 80009de:	fb02 f303 	mul.w	r3, r2, r3
 80009e2:	4a56      	ldr	r2, [pc, #344]	; (8000b3c <main+0x560>)
 80009e4:	4413      	add	r3, r2
 80009e6:	f44f 5124 	mov.w	r1, #10496	; 0x2900
 80009ea:	4618      	mov	r0, r3
 80009ec:	f00f faa8 	bl	800ff40 <CDC_Transmit_FS>
			state = RESET_BUFFER;
 80009f0:	230a      	movs	r3, #10
 80009f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			break;
 80009f6:	e09d      	b.n	8000b34 <main+0x558>

		case USB_TRANSMIT_ERROR:
			break;

		case RESET_BUFFER:
			buffer_emptyings++;
 80009f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009fc:	3301      	adds	r3, #1
 80009fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			total_size += byteswritten;
 8000a02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000a06:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000a0a:	4413      	add	r3, r2
 8000a0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			printf("emptied buffer %d\n\r", !current_buffer);
 8000a10:	4b49      	ldr	r3, [pc, #292]	; (8000b38 <main+0x55c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bf0c      	ite	eq
 8000a18:	2301      	moveq	r3, #1
 8000a1a:	2300      	movne	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4849      	ldr	r0, [pc, #292]	; (8000b48 <main+0x56c>)
 8000a22:	f010 f993 	bl	8010d4c <iprintf>
			printf("buffers emptied: %ld\n\r", buffer_emptyings);
 8000a26:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000a2a:	4848      	ldr	r0, [pc, #288]	; (8000b4c <main+0x570>)
 8000a2c:	f010 f98e 	bl	8010d4c <iprintf>
			printf("Wrote buffer sizeof: %ld\n\r", byteswritten);
 8000a30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000a34:	4619      	mov	r1, r3
 8000a36:	4846      	ldr	r0, [pc, #280]	; (8000b50 <main+0x574>)
 8000a38:	f010 f988 	bl	8010d4c <iprintf>

			data_buffer[!current_buffer][0] = '\00';
 8000a3c:	4b3e      	ldr	r3, [pc, #248]	; (8000b38 <main+0x55c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	bf0c      	ite	eq
 8000a44:	2301      	moveq	r3, #1
 8000a46:	2300      	movne	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4a3b      	ldr	r2, [pc, #236]	; (8000b3c <main+0x560>)
 8000a4e:	f642 1301 	movw	r3, #10497	; 0x2901
 8000a52:	fb01 f303 	mul.w	r3, r1, r3
 8000a56:	4413      	add	r3, r2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[!current_buffer] = 0;
 8000a5c:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <main+0x55c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bf0c      	ite	eq
 8000a64:	2301      	moveq	r3, #1
 8000a66:	2300      	movne	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <main+0x578>)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	5499      	strb	r1, [r3, r2]
			is_buffer_filled = 0;
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <main+0x57c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

			byteswritten = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			state = STANDBY;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			break;
 8000a84:	e056      	b.n	8000b34 <main+0x558>

		case RESET_STATE:
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a86:	2102      	movs	r1, #2
 8000a88:	4834      	ldr	r0, [pc, #208]	; (8000b5c <main+0x580>)
 8000a8a:	f001 fc68 	bl	800235e <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 8000a8e:	4833      	ldr	r0, [pc, #204]	; (8000b5c <main+0x580>)
 8000a90:	f001 fae4 	bl	800205c <HAL_CAN_Stop>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4831      	ldr	r0, [pc, #196]	; (8000b60 <main+0x584>)
 8000a9c:	f002 fd32 	bl	8003504 <HAL_GPIO_WritePin>

			printf("total sizeof: %ld\n\r", total_size);
 8000aa0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8000aa4:	482f      	ldr	r0, [pc, #188]	; (8000b64 <main+0x588>)
 8000aa6:	f010 f951 	bl	8010d4c <iprintf>
			total_size = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			buffer_emptyings = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			printf("Unmounting SD Card!\r\n");
 8000ab6:	482c      	ldr	r0, [pc, #176]	; (8000b68 <main+0x58c>)
 8000ab8:	f010 f9ae 	bl	8010e18 <puts>
			f_close(&SDFile);
 8000abc:	4820      	ldr	r0, [pc, #128]	; (8000b40 <main+0x564>)
 8000abe:	f00e ff5e 	bl	800f97e <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f00e fb62 	bl	800f190 <f_mount>

			if (!POWER_STATE)
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <main+0x590>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <main+0x4fe>
				printf("Turning off!\r\n");
 8000ad4:	4826      	ldr	r0, [pc, #152]	; (8000b70 <main+0x594>)
 8000ad6:	f010 f99f 	bl	8010e18 <puts>
			state = POWER_OFF;
 8000ada:	230c      	movs	r3, #12
 8000adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			break;
 8000ae0:	e028      	b.n	8000b34 <main+0x558>

		case POWER_OFF:
			HAL_Delay(1000);
 8000ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae6:	f001 f869 	bl	8001bbc <HAL_Delay>

			if (POWER_STATE) {
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <main+0x590>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d01f      	beq.n	8000b32 <main+0x556>
				if (NEW_LOG_FLAG) {
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <main+0x598>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <main+0x52c>
					NEW_LOG_FLAG = 0;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <main+0x598>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
					printf("\n\rResetting and starting new log file! \n\r");
 8000b00:	481d      	ldr	r0, [pc, #116]	; (8000b78 <main+0x59c>)
 8000b02:	f010 f923 	bl	8010d4c <iprintf>
 8000b06:	e002      	b.n	8000b0e <main+0x532>
				}
				else {
					printf("\n\rTurning back on!\n\r");
 8000b08:	481c      	ldr	r0, [pc, #112]	; (8000b7c <main+0x5a0>)
 8000b0a:	f010 f91f 	bl	8010d4c <iprintf>
				}
				state = TURN_ON;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			}
			break;
 8000b14:	e00d      	b.n	8000b32 <main+0x556>

		default:
			printf("CAN logger in unknown state!\n\r");
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <main+0x5a4>)
 8000b18:	f010 f918 	bl	8010d4c <iprintf>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <main+0x584>)
 8000b24:	f002 fcee 	bl	8003504 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); // Red LED
			break;
 8000b28:	e004      	b.n	8000b34 <main+0x558>
			break;
 8000b2a:	bf00      	nop
 8000b2c:	e579      	b.n	8000622 <main+0x46>
			break;
 8000b2e:	bf00      	nop
 8000b30:	e577      	b.n	8000622 <main+0x46>
			break;
 8000b32:	bf00      	nop
		switch (state) {
 8000b34:	e575      	b.n	8000622 <main+0x46>
 8000b36:	bf00      	nop
 8000b38:	20005722 	.word	0x20005722
 8000b3c:	2000051c 	.word	0x2000051c
 8000b40:	2000596c 	.word	0x2000596c
 8000b44:	08011f68 	.word	0x08011f68
 8000b48:	08011f7c 	.word	0x08011f7c
 8000b4c:	08011f90 	.word	0x08011f90
 8000b50:	08011fa8 	.word	0x08011fa8
 8000b54:	20005720 	.word	0x20005720
 8000b58:	20005723 	.word	0x20005723
 8000b5c:	20000184 	.word	0x20000184
 8000b60:	40021400 	.word	0x40021400
 8000b64:	08011fc4 	.word	0x08011fc4
 8000b68:	08011fd8 	.word	0x08011fd8
 8000b6c:	20000518 	.word	0x20000518
 8000b70:	08011ff0 	.word	0x08011ff0
 8000b74:	20000519 	.word	0x20000519
 8000b78:	08012000 	.word	0x08012000
 8000b7c:	0801202c 	.word	0x0801202c
 8000b80:	08012044 	.word	0x08012044

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	; 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	2234      	movs	r2, #52	; 0x34
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f010 f957 	bl	8010e46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <SystemClock_Config+0xc8>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <SystemClock_Config+0xc8>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <SystemClock_Config+0xc8>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <SystemClock_Config+0xcc>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc8:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <SystemClock_Config+0xcc>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <SystemClock_Config+0xcc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bf4:	2360      	movs	r3, #96	; 0x60
 8000bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f004 fcef 	bl	80055ec <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c14:	f000 fada 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	2101      	movs	r1, #1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 ff87 	bl	8005b48 <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c40:	f000 fac4 	bl	80011cc <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3750      	adds	r7, #80	; 0x50
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c5a:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <MX_CAN1_Init+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c60:	2203      	movs	r2, #3
 8000c62:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c72:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000c76:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c7e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_CAN1_Init+0x64>)
 8000ca6:	f000 ffad 	bl	8001c04 <HAL_CAN_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cb0:	f000 fa8c 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000184 	.word	0x20000184
 8000cbc:	40006400 	.word	0x40006400

08000cc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_I2C1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <MX_I2C1_Init+0x7c>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfa:	480e      	ldr	r0, [pc, #56]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cfc:	f002 fc40 	bl	8003580 <HAL_I2C_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d06:	f000 fa61 	bl	80011cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000d0e:	f003 f91d 	bl	8003f4c <HAL_I2CEx_ConfigAnalogFilter>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d18:	f000 fa58 	bl	80011cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000d20:	f003 f95f 	bl	8003fe2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 fa4f 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200001ac 	.word	0x200001ac
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	00506682 	.word	0x00506682

08000d40 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_SDMMC1_SD_Init+0x44>)
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <MX_SDMMC1_SD_Init+0x48>)
 8000d48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_SDMMC1_SD_Init+0x44>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SDMMC1_SD_Init+0x44>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_SDMMC1_SD_Init+0x44>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SDMMC1_SD_Init+0x44>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_SDMMC1_SD_Init+0x44>)
 8000d64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d68:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_SDMMC1_SD_Init+0x44>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_SDMMC1_SD_Init+0x44>)
 8000d72:	f005 fd37 	bl	80067e4 <HAL_SD_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000d7c:	f000 fa26 	bl	80011cc <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000200 	.word	0x20000200
 8000d88:	40012c00 	.word	0x40012c00

08000d8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_USART3_UART_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dd0:	f006 fe30 	bl	8007a34 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dda:	f000 f9f7 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000344 	.word	0x20000344
 8000de8:	40004800 	.word	0x40004800

08000dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_DMA_Init+0x48>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <MX_DMA_Init+0x48>)
 8000df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_DMA_Init+0x48>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	203b      	movs	r0, #59	; 0x3b
 8000e10:	f001 fdd7 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e14:	203b      	movs	r0, #59	; 0x3b
 8000e16:	f001 fdf0 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2045      	movs	r0, #69	; 0x45
 8000e20:	f001 fdcf 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e24:	2045      	movs	r0, #69	; 0x45
 8000e26:	f001 fde8 	bl	80029fa <HAL_NVIC_EnableIRQ>

}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	; 0x38
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b73      	ldr	r3, [pc, #460]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a72      	ldr	r2, [pc, #456]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b70      	ldr	r3, [pc, #448]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e66:	4b6d      	ldr	r3, [pc, #436]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a6c      	ldr	r2, [pc, #432]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b6a      	ldr	r3, [pc, #424]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b67      	ldr	r3, [pc, #412]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a66      	ldr	r2, [pc, #408]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b64      	ldr	r3, [pc, #400]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e96:	4b61      	ldr	r3, [pc, #388]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a60      	ldr	r2, [pc, #384]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e9c:	f043 0310 	orr.w	r3, r3, #16
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b5e      	ldr	r3, [pc, #376]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b5b      	ldr	r3, [pc, #364]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a5a      	ldr	r2, [pc, #360]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b58      	ldr	r3, [pc, #352]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec6:	4b55      	ldr	r3, [pc, #340]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a54      	ldr	r2, [pc, #336]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b52      	ldr	r3, [pc, #328]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b4f      	ldr	r3, [pc, #316]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a4e      	ldr	r2, [pc, #312]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b4c      	ldr	r3, [pc, #304]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b49      	ldr	r3, [pc, #292]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a48      	ldr	r2, [pc, #288]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b46      	ldr	r3, [pc, #280]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f14:	4842      	ldr	r0, [pc, #264]	; (8001020 <MX_GPIO_Init+0x1e8>)
 8000f16:	f002 faf5 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2140      	movs	r1, #64	; 0x40
 8000f1e:	4841      	ldr	r0, [pc, #260]	; (8001024 <MX_GPIO_Init+0x1ec>)
 8000f20:	f002 faf0 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	483f      	ldr	r0, [pc, #252]	; (8001028 <MX_GPIO_Init+0x1f0>)
 8000f2a:	f002 faeb 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4836      	ldr	r0, [pc, #216]	; (8001020 <MX_GPIO_Init+0x1e8>)
 8000f48:	f002 f918 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : NewLogBtn_Pin */
  GPIO_InitStruct.Pin = NewLogBtn_Pin;
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NewLogBtn_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4832      	ldr	r0, [pc, #200]	; (800102c <MX_GPIO_Init+0x1f4>)
 8000f62:	f002 f90b 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f78:	2306      	movs	r3, #6
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	482a      	ldr	r0, [pc, #168]	; (800102c <MX_GPIO_Init+0x1f4>)
 8000f84:	f002 f8fa 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f8e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4823      	ldr	r0, [pc, #140]	; (800102c <MX_GPIO_Init+0x1f4>)
 8000fa0:	f002 f8ec 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000fa4:	2384      	movs	r3, #132	; 0x84
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481b      	ldr	r0, [pc, #108]	; (8001024 <MX_GPIO_Init+0x1ec>)
 8000fb8:	f002 f8e0 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fbc:	2340      	movs	r3, #64	; 0x40
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4814      	ldr	r0, [pc, #80]	; (8001024 <MX_GPIO_Init+0x1ec>)
 8000fd4:	f002 f8d2 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	480e      	ldr	r0, [pc, #56]	; (8001028 <MX_GPIO_Init+0x1f0>)
 8000ff0:	f002 f8c4 	bl	800317c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2017      	movs	r0, #23
 8000ffa:	f001 fce2 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ffe:	2017      	movs	r0, #23
 8001000:	f001 fcfb 	bl	80029fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2028      	movs	r0, #40	; 0x28
 800100a:	f001 fcda 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100e:	2028      	movs	r0, #40	; 0x28
 8001010:	f001 fcf3 	bl	80029fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001014:	bf00      	nop
 8001016:	3738      	adds	r7, #56	; 0x38
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40021400 	.word	0x40021400
 8001024:	40021800 	.word	0x40021800
 8001028:	40020400 	.word	0x40020400
 800102c:	40021000 	.word	0x40021000

08001030 <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	b09d      	sub	sp, #116	; 0x74
 8001034:	af06      	add	r7, sp, #24
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800103e:	2100      	movs	r1, #0
 8001040:	4833      	ldr	r0, [pc, #204]	; (8001110 <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8001042:	f001 f854 	bl	80020ee <HAL_CAN_GetRxMessage>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
		printf("Failed to get CAN message\n\r");
 800104c:	4831      	ldr	r0, [pc, #196]	; (8001114 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 800104e:	f00f fe7d 	bl	8010d4c <iprintf>
		Error_Handler();
 8001052:	f000 f8bb 	bl	80011cc <Error_Handler>
	}

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8001056:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800105a:	b29b      	uxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b29a      	uxth	r2, r3
 8001060:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001064:	b29b      	uxth	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 800106c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001070:	b29b      	uxth	r3, r3
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b29a      	uxth	r2, r3
 8001076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800107a:	b29b      	uxth	r3, r3
 800107c:	4413      	add	r3, r2
 800107e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8001082:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001086:	b29b      	uxth	r3, r3
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b29a      	uxth	r2, r3
 800108c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001090:	b29b      	uxth	r3, r3
 8001092:	4413      	add	r3, r2
 8001094:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8001098:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800109c:	b29b      	uxth	r3, r3
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	char encodedData[ENCODED_CAN_SIZE_BYTES];

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 80010ae:	f000 fd79 	bl	8001ba4 <HAL_GetTick>
 80010b2:	4606      	mov	r6, r0
 80010b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80010ba:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 80010be:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 80010c2:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 80010c6:	463d      	mov	r5, r7
 80010c8:	9404      	str	r4, [sp, #16]
 80010ca:	9003      	str	r0, [sp, #12]
 80010cc:	9102      	str	r1, [sp, #8]
 80010ce:	9201      	str	r2, [sp, #4]
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4633      	mov	r3, r6
 80010d4:	4a10      	ldr	r2, [pc, #64]	; (8001118 <Get_and_Append_CAN_Message_to_Buffer+0xe8>)
 80010d6:	212a      	movs	r1, #42	; 0x2a
 80010d8:	4628      	mov	r0, r5
 80010da:	f00f fca9 	bl	8010a30 <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(current_buffer ? data_buffer[1] : data_buffer[0], encodedData);
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <Get_and_Append_CAN_Message_to_Buffer+0xba>
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 80010e8:	e000      	b.n	80010ec <Get_and_Append_CAN_Message_to_Buffer+0xbc>
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 80010ec:	463a      	mov	r2, r7
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00f fe99 	bl	8010e28 <strcat>
	buffer_fill_level[current_buffer]++;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 80010fc:	5cd2      	ldrb	r2, [r2, r3]
 80010fe:	3201      	adds	r2, #1
 8001100:	b2d1      	uxtb	r1, r2
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8001104:	54d1      	strb	r1, [r2, r3]
}
 8001106:	bf00      	nop
 8001108:	375c      	adds	r7, #92	; 0x5c
 800110a:	46bd      	mov	sp, r7
 800110c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800110e:	bf00      	nop
 8001110:	20000184 	.word	0x20000184
 8001114:	08012064 	.word	0x08012064
 8001118:	08012080 	.word	0x08012080
 800111c:	20005722 	.word	0x20005722
 8001120:	20002e1d 	.word	0x20002e1d
 8001124:	2000051c 	.word	0x2000051c
 8001128:	20005720 	.word	0x20005720

0800112c <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8001136:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8001142:	b29b      	uxth	r3, r3
 8001144:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8001146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001148:	0a1a      	lsrs	r2, r3, #8
 800114a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800114e:	4013      	ands	r3, r2
 8001150:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8001158:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 800115a:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	0a1a      	lsrs	r2, r3, #8
 8001160:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001174:	2301      	movs	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8001178:	2301      	movs	r3, #1
 800117a:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <CAN_Filter_Config+0x64>)
 8001182:	f000 fe3b 	bl	8001dfc <HAL_CAN_ConfigFilter>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3730      	adds	r7, #48	; 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000184 	.word	0x20000184

08001194 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	{
		printf("Buffers are full\n\r");
		Error_Handler();
	}

	Get_and_Append_CAN_Message_to_Buffer();
 800119c:	f7ff ff48 	bl	8001030 <Get_and_Append_CAN_Message_to_Buffer>

	if (buffer_fill_level[current_buffer] == CAN_MESSAGES_TO_BUFFER) {
		is_buffer_filled = 1;
		current_buffer = !current_buffer;
	}
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80011b0:	1d39      	adds	r1, r7, #4
 80011b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b6:	2201      	movs	r2, #1
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <__io_putchar+0x20>)
 80011ba:	f006 fc89 	bl	8007ad0 <HAL_UART_Transmit>

	return ch;
 80011be:	687b      	ldr	r3, [r7, #4]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000344 	.word	0x20000344

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <Error_Handler+0x1c>)
 80011d6:	f00f fe1f 	bl	8010e18 <puts>
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <Error_Handler+0x20>)
 80011e2:	f002 f98f 	bl	8003504 <HAL_GPIO_WritePin>

	while (1) {
 80011e6:	e7fe      	b.n	80011e6 <Error_Handler+0x1a>
 80011e8:	080120a4 	.word	0x080120a4
 80011ec:	40021400 	.word	0x40021400

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x44>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x44>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x44>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x44>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x44>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x44>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <HAL_CAN_MspInit+0x8c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12f      	bne.n	80012ba <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_CAN_MspInit+0x90>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <HAL_CAN_MspInit+0x90>)
 8001260:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_CAN_MspInit+0x90>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_CAN_MspInit+0x90>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_CAN_MspInit+0x90>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_CAN_MspInit+0x90>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800128a:	2303      	movs	r3, #3
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800129a:	2309      	movs	r3, #9
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <HAL_CAN_MspInit+0x94>)
 80012a6:	f001 ff69 	bl	800317c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2014      	movs	r0, #20
 80012b0:	f001 fb87 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012b4:	2014      	movs	r0, #20
 80012b6:	f001 fba0 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40006400 	.word	0x40006400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020c00 	.word	0x40020c00

080012d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0ae      	sub	sp, #184	; 0xb8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2290      	movs	r2, #144	; 0x90
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00f fda8 	bl	8010e46 <memset>
  if(hi2c->Instance==I2C1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <HAL_I2C_MspInit+0xb4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d13c      	bne.n	800137a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001300:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001304:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001306:	2300      	movs	r3, #0
 8001308:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4618      	mov	r0, r3
 8001310:	f004 fe40 	bl	8005f94 <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800131a:	f7ff ff57 	bl	80011cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001336:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133e:	2312      	movs	r3, #18
 8001340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001350:	2304      	movs	r3, #4
 8001352:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800135a:	4619      	mov	r1, r3
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <HAL_I2C_MspInit+0xbc>)
 800135e:	f001 ff0d 	bl	800317c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_I2C_MspInit+0xb8>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	37b8      	adds	r7, #184	; 0xb8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40005400 	.word	0x40005400
 8001388:	40023800 	.word	0x40023800
 800138c:	40020400 	.word	0x40020400

08001390 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0ae      	sub	sp, #184	; 0xb8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2290      	movs	r2, #144	; 0x90
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00f fd48 	bl	8010e46 <memset>
  if(hsd->Instance==SDMMC1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a73      	ldr	r2, [pc, #460]	; (8001588 <HAL_SD_MspInit+0x1f8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	f040 80de 	bne.w	800157e <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80013c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80013c6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80013c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 fddd 	bl	8005f94 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80013e0:	f7ff fef4 	bl	80011cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013e4:	4b69      	ldr	r3, [pc, #420]	; (800158c <HAL_SD_MspInit+0x1fc>)
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	4a68      	ldr	r2, [pc, #416]	; (800158c <HAL_SD_MspInit+0x1fc>)
 80013ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ee:	6453      	str	r3, [r2, #68]	; 0x44
 80013f0:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_SD_MspInit+0x1fc>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fc:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_SD_MspInit+0x1fc>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	4a62      	ldr	r2, [pc, #392]	; (800158c <HAL_SD_MspInit+0x1fc>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6313      	str	r3, [r2, #48]	; 0x30
 8001408:	4b60      	ldr	r3, [pc, #384]	; (800158c <HAL_SD_MspInit+0x1fc>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001414:	4b5d      	ldr	r3, [pc, #372]	; (800158c <HAL_SD_MspInit+0x1fc>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a5c      	ldr	r2, [pc, #368]	; (800158c <HAL_SD_MspInit+0x1fc>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b5a      	ldr	r3, [pc, #360]	; (800158c <HAL_SD_MspInit+0x1fc>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800142c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001446:	230c      	movs	r3, #12
 8001448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001450:	4619      	mov	r1, r3
 8001452:	484f      	ldr	r0, [pc, #316]	; (8001590 <HAL_SD_MspInit+0x200>)
 8001454:	f001 fe92 	bl	800317c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001458:	2304      	movs	r3, #4
 800145a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001470:	230c      	movs	r3, #12
 8001472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001476:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800147a:	4619      	mov	r1, r3
 800147c:	4845      	ldr	r0, [pc, #276]	; (8001594 <HAL_SD_MspInit+0x204>)
 800147e:	f001 fe7d 	bl	800317c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001482:	4b45      	ldr	r3, [pc, #276]	; (8001598 <HAL_SD_MspInit+0x208>)
 8001484:	4a45      	ldr	r2, [pc, #276]	; (800159c <HAL_SD_MspInit+0x20c>)
 8001486:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001488:	4b43      	ldr	r3, [pc, #268]	; (8001598 <HAL_SD_MspInit+0x208>)
 800148a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001490:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_SD_MspInit+0x208>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001496:	4b40      	ldr	r3, [pc, #256]	; (8001598 <HAL_SD_MspInit+0x208>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800149c:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_SD_MspInit+0x208>)
 800149e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014a4:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014aa:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80014b4:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014b6:	2220      	movs	r2, #32
 80014b8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ba:	4b37      	ldr	r3, [pc, #220]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014c0:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014c8:	2203      	movs	r2, #3
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014da:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014dc:	482e      	ldr	r0, [pc, #184]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014de:	f001 faa7 	bl	8002a30 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80014e8:	f7ff fe70 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a2a      	ldr	r2, [pc, #168]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014f0:	641a      	str	r2, [r3, #64]	; 0x40
 80014f2:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_SD_MspInit+0x208>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_SD_MspInit+0x210>)
 80014fa:	4a2a      	ldr	r2, [pc, #168]	; (80015a4 <HAL_SD_MspInit+0x214>)
 80014fc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_SD_MspInit+0x210>)
 8001500:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001504:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_SD_MspInit+0x210>)
 8001508:	2240      	movs	r2, #64	; 0x40
 800150a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_SD_MspInit+0x210>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_SD_MspInit+0x210>)
 8001514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001518:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_SD_MspInit+0x210>)
 800151c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001520:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <HAL_SD_MspInit+0x210>)
 8001524:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001528:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_SD_MspInit+0x210>)
 800152c:	2220      	movs	r2, #32
 800152e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_SD_MspInit+0x210>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_SD_MspInit+0x210>)
 8001538:	2204      	movs	r2, #4
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_SD_MspInit+0x210>)
 800153e:	2203      	movs	r2, #3
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_SD_MspInit+0x210>)
 8001544:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_SD_MspInit+0x210>)
 800154c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001552:	4813      	ldr	r0, [pc, #76]	; (80015a0 <HAL_SD_MspInit+0x210>)
 8001554:	f001 fa6c 	bl	8002a30 <HAL_DMA_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800155e:	f7ff fe35 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_SD_MspInit+0x210>)
 8001566:	63da      	str	r2, [r3, #60]	; 0x3c
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_SD_MspInit+0x210>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2031      	movs	r0, #49	; 0x31
 8001574:	f001 fa25 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001578:	2031      	movs	r0, #49	; 0x31
 800157a:	f001 fa3e 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	37b8      	adds	r7, #184	; 0xb8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40012c00 	.word	0x40012c00
 800158c:	40023800 	.word	0x40023800
 8001590:	40020800 	.word	0x40020800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	20000284 	.word	0x20000284
 800159c:	40026458 	.word	0x40026458
 80015a0:	200002e4 	.word	0x200002e4
 80015a4:	400264a0 	.word	0x400264a0

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0ae      	sub	sp, #184	; 0xb8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2290      	movs	r2, #144	; 0x90
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00f fc3c 	bl	8010e46 <memset>
  if(huart->Instance==USART3)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_UART_MspInit+0xb4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d13c      	bne.n	8001652 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015de:	2300      	movs	r3, #0
 80015e0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fcd4 	bl	8005f94 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015f2:	f7ff fdeb 	bl	80011cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_UART_MspInit+0xb8>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_UART_MspInit+0xb8>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_UART_MspInit+0xb8>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_UART_MspInit+0xb8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_UART_MspInit+0xb8>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_MspInit+0xb8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800162a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001640:	2307      	movs	r3, #7
 8001642:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001646:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_UART_MspInit+0xbc>)
 800164e:	f001 fd95 	bl	800317c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	37b8      	adds	r7, #184	; 0xb8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40004800 	.word	0x40004800
 8001660:	40023800 	.word	0x40023800
 8001664:	40020c00 	.word	0x40020c00

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 fa62 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <CAN1_RX0_IRQHandler+0x10>)
 80016c2:	f000 fe73 	bl	80023ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000184 	.word	0x20000184

080016d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	NEW_LOG_FLAG = 1;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <EXTI9_5_IRQHandler+0x14>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NewLogBtn_Pin);
 80016da:	2080      	movs	r0, #128	; 0x80
 80016dc:	f001 ff2c 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000519 	.word	0x20000519

080016e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 80016ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <EXTI15_10_IRQHandler+0x24>)
 80016f2:	f001 feef 	bl	80034d4 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <EXTI15_10_IRQHandler+0x28>)
 80016fc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 80016fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001702:	f001 ff19 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	20000518 	.word	0x20000518

08001714 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <SDMMC1_IRQHandler+0x10>)
 800171a:	f005 fae3 	bl	8006ce4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000200 	.word	0x20000200

08001728 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <DMA2_Stream3_IRQHandler+0x10>)
 800172e:	f001 faaf 	bl	8002c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000284 	.word	0x20000284

0800173c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <OTG_FS_IRQHandler+0x10>)
 8001742:	f002 fde0 	bl	8004306 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200072b8 	.word	0x200072b8

08001750 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA2_Stream6_IRQHandler+0x10>)
 8001756:	f001 fa9b 	bl	8002c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200002e4 	.word	0x200002e4

08001764 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00a      	b.n	800178c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001776:	f3af 8000 	nop.w
 800177a:	4601      	mov	r1, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf0      	blt.n	8001776 <_read+0x12>
  }

  return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e009      	b.n	80017c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fcf5 	bl	80011a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf1      	blt.n	80017b0 <_write+0x12>
  }
  return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_close>:

int _close(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_isatty>:

int _isatty(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f00f fb02 	bl	8010e78 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20080000 	.word	0x20080000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20005724 	.word	0x20005724
 80018a8:	20007910 	.word	0x20007910

080018ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018fa:	f7ff ffd7 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f00f fac1 	bl	8010e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7fe fe6b 	bl	80005dc <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001908:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001914:	08012708 	.word	0x08012708
  ldr r2, =_sbss
 8001918:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800191c:	2000790c 	.word	0x2000790c

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <DS1307_Init+0x1c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f806 	bl	8001944 <DS1307_SetClockHalt>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20005728 	.word	0x20005728

08001944 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <DS1307_SetClockHalt+0x14>
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	e000      	b.n	800195a <DS1307_SetClockHalt+0x16>
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 800195c:	2000      	movs	r0, #0
 800195e:	f000 f831 	bl	80019c4 <DS1307_GetRegByte>
 8001962:	4603      	mov	r3, r0
 8001964:	b25b      	sxtb	r3, r3
 8001966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800196a:	b25a      	sxtb	r2, r3
 800196c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001970:	4313      	orrs	r3, r2
 8001972:	b25b      	sxtb	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	4619      	mov	r1, r3
 8001978:	2000      	movs	r0, #0
 800197a:	f000 f805 	bl	8001988 <DS1307_SetRegByte>
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	4603      	mov	r3, r0
 8001990:	460a      	mov	r2, r1
 8001992:	71fb      	strb	r3, [r7, #7]
 8001994:	4613      	mov	r3, r2
 8001996:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	733b      	strb	r3, [r7, #12]
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <DS1307_SetRegByte+0x38>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	f107 020c 	add.w	r2, r7, #12
 80019a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2302      	movs	r3, #2
 80019b0:	21d0      	movs	r1, #208	; 0xd0
 80019b2:	f001 fe75 	bl	80036a0 <HAL_I2C_Master_Transmit>
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20005728 	.word	0x20005728

080019c4 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <DS1307_GetRegByte+0x40>)
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	1dfa      	adds	r2, r7, #7
 80019d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	21d0      	movs	r1, #208	; 0xd0
 80019de:	f001 fe5f 	bl	80036a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <DS1307_GetRegByte+0x40>)
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f107 020f 	add.w	r2, r7, #15
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	21d0      	movs	r1, #208	; 0xd0
 80019f4:	f001 ff48 	bl	8003888 <HAL_I2C_Master_Receive>
	return val;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20005728 	.word	0x20005728

08001a08 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001a0c:	2004      	movs	r0, #4
 8001a0e:	f7ff ffd9 	bl	80019c4 <DS1307_GetRegByte>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f85b 	bl	8001ad0 <DS1307_DecodeBCD>
 8001a1a:	4603      	mov	r3, r0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001a24:	2005      	movs	r0, #5
 8001a26:	f7ff ffcd 	bl	80019c4 <DS1307_GetRegByte>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 f84f 	bl	8001ad0 <DS1307_DecodeBCD>
 8001a32:	4603      	mov	r3, r0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001a3e:	2010      	movs	r0, #16
 8001a40:	f7ff ffc0 	bl	80019c4 <DS1307_GetRegByte>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	461a      	mov	r2, r3
 8001a50:	0091      	lsls	r1, r2, #2
 8001a52:	461a      	mov	r2, r3
 8001a54:	460b      	mov	r3, r1
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001a5c:	2006      	movs	r0, #6
 8001a5e:	f7ff ffb1 	bl	80019c4 <DS1307_GetRegByte>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 f833 	bl	8001ad0 <DS1307_DecodeBCD>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4413      	add	r3, r2
 8001a72:	b29b      	uxth	r3, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7ff ff9f 	bl	80019c4 <DS1307_GetRegByte>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f81e 	bl	8001ad0 <DS1307_DecodeBCD>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7ff ff90 	bl	80019c4 <DS1307_GetRegByte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f812 	bl	8001ad0 <DS1307_DecodeBCD>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff ff84 	bl	80019c4 <DS1307_GetRegByte>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f803 	bl	8001ad0 <DS1307_DecodeBCD>
 8001aca:	4603      	mov	r3, r0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b06:	2003      	movs	r0, #3
 8001b08:	f000 ff50 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f000 f805 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b12:	f7ff fb6d 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 ff6b 	bl	8002a16 <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b58:	f000 ff33 	bl	80029c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000008 	.word	0x20000008
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	2000572c 	.word	0x2000572c

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000572c 	.word	0x2000572c

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000008 	.word	0x20000008

08001c04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0ed      	b.n	8001df2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fb08 	bl	8001238 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c38:	f7ff ffb4 	bl	8001ba4 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c3e:	e012      	b.n	8001c66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c40:	f7ff ffb0 	bl	8001ba4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b0a      	cmp	r3, #10
 8001c4c:	d90b      	bls.n	8001c66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2205      	movs	r2, #5
 8001c5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0c5      	b.n	8001df2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0e5      	beq.n	8001c40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0202 	bic.w	r2, r2, #2
 8001c82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c84:	f7ff ff8e 	bl	8001ba4 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c8a:	e012      	b.n	8001cb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c8c:	f7ff ff8a 	bl	8001ba4 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b0a      	cmp	r3, #10
 8001c98:	d90b      	bls.n	8001cb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2205      	movs	r2, #5
 8001caa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e09f      	b.n	8001df2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e5      	bne.n	8001c8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e1b      	ldrb	r3, [r3, #24]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d108      	bne.n	8001cda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e007      	b.n	8001cea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7e5b      	ldrb	r3, [r3, #25]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d108      	bne.n	8001d04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e007      	b.n	8001d14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e9b      	ldrb	r3, [r3, #26]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d108      	bne.n	8001d2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0220 	orr.w	r2, r2, #32
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e007      	b.n	8001d3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0220 	bic.w	r2, r2, #32
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7edb      	ldrb	r3, [r3, #27]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0210 	bic.w	r2, r2, #16
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e007      	b.n	8001d68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0210 	orr.w	r2, r2, #16
 8001d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7f1b      	ldrb	r3, [r3, #28]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d108      	bne.n	8001d82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0208 	orr.w	r2, r2, #8
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e007      	b.n	8001d92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0208 	bic.w	r2, r2, #8
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7f5b      	ldrb	r3, [r3, #29]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d108      	bne.n	8001dac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0204 	orr.w	r2, r2, #4
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e007      	b.n	8001dbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0204 	bic.w	r2, r2, #4
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	ea42 0103 	orr.w	r1, r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	1e5a      	subs	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d003      	beq.n	8001e22 <HAL_CAN_ConfigFilter+0x26>
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	f040 80c7 	bne.w	8001fb0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <HAL_CAN_ConfigFilter+0x1d0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d001      	beq.n	8001e30 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e2e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	4a63      	ldr	r2, [pc, #396]	; (8001fd0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e4e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	431a      	orrs	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	2201      	movs	r2, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d123      	bne.n	8001ede <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001eb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3248      	adds	r2, #72	; 0x48
 8001ebe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ed2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ed4:	6979      	ldr	r1, [r7, #20]
 8001ed6:	3348      	adds	r3, #72	; 0x48
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d122      	bne.n	8001f2c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3248      	adds	r2, #72	; 0x48
 8001f0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f22:	6979      	ldr	r1, [r7, #20]
 8001f24:	3348      	adds	r3, #72	; 0x48
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f46:	e007      	b.n	8001f58 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f72:	e007      	b.n	8001f84 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d107      	bne.n	8001f9c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fa2:	f023 0201 	bic.w	r2, r3, #1
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e006      	b.n	8001fbe <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40003400 	.word	0x40003400
 8001fd0:	40006400 	.word	0x40006400

08001fd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d12e      	bne.n	8002046 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002000:	f7ff fdd0 	bl	8001ba4 <HAL_GetTick>
 8002004:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002006:	e012      	b.n	800202e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002008:	f7ff fdcc 	bl	8001ba4 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b0a      	cmp	r3, #10
 8002014:	d90b      	bls.n	800202e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2205      	movs	r2, #5
 8002026:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e012      	b.n	8002054 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e5      	bne.n	8002008 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e006      	b.n	8002054 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d133      	bne.n	80020d8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002080:	f7ff fd90 	bl	8001ba4 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002086:	e012      	b.n	80020ae <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002088:	f7ff fd8c 	bl	8001ba4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d90b      	bls.n	80020ae <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2205      	movs	r2, #5
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e01b      	b.n	80020e6 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0e5      	beq.n	8002088 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0202 	bic.w	r2, r2, #2
 80020ca:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e006      	b.n	80020e6 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002102:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d003      	beq.n	8002112 <HAL_CAN_GetRxMessage+0x24>
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	2b02      	cmp	r3, #2
 800210e:	f040 80f3 	bne.w	80022f8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10e      	bne.n	8002136 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0e7      	b.n	8002306 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0d8      	b.n	8002306 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	331b      	adds	r3, #27
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4413      	add	r3, r2
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0204 	and.w	r2, r3, #4
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	331b      	adds	r3, #27
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0d5b      	lsrs	r3, r3, #21
 8002182:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	331b      	adds	r3, #27
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	331b      	adds	r3, #27
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4413      	add	r3, r2
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0202 	and.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	331b      	adds	r3, #27
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	331b      	adds	r3, #27
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	4413      	add	r3, r2
 80021de:	3304      	adds	r3, #4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	331b      	adds	r3, #27
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	4413      	add	r3, r2
 80021f6:	3304      	adds	r3, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4413      	add	r3, r2
 8002222:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0a1a      	lsrs	r2, r3, #8
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	4413      	add	r3, r2
 800223c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0c1a      	lsrs	r2, r3, #16
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	3302      	adds	r3, #2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4413      	add	r3, r2
 8002256:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0e1a      	lsrs	r2, r3, #24
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	3303      	adds	r3, #3
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4413      	add	r3, r2
 8002270:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	3304      	adds	r3, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4413      	add	r3, r2
 8002288:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0a1a      	lsrs	r2, r3, #8
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	3305      	adds	r3, #5
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0c1a      	lsrs	r2, r3, #16
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	3306      	adds	r3, #6
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0e1a      	lsrs	r2, r3, #24
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3307      	adds	r3, #7
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d108      	bne.n	80022e4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0220 	orr.w	r2, r2, #32
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	e007      	b.n	80022f4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0220 	orr.w	r2, r2, #32
 80022f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e006      	b.n	8002306 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002322:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d002      	beq.n	8002330 <HAL_CAN_ActivateNotification+0x1e>
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d109      	bne.n	8002344 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6959      	ldr	r1, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e006      	b.n	8002352 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800235e:	b480      	push	{r7}
 8002360:	b085      	sub	sp, #20
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d002      	beq.n	800237c <HAL_CAN_DeactivateNotification+0x1e>
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d10a      	bne.n	8002392 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6959      	ldr	r1, [r3, #20]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	43da      	mvns	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	400a      	ands	r2, r1
 800238c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e006      	b.n	80023a0 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d07c      	beq.n	80024ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d023      	beq.n	8002444 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f983 	bl	800271a <HAL_CAN_TxMailbox0CompleteCallback>
 8002414:	e016      	b.n	8002444 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
 8002428:	e00c      	b.n	8002444 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
 800243c:	e002      	b.n	8002444 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f989 	bl	8002756 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d024      	beq.n	8002498 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002456:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f963 	bl	800272e <HAL_CAN_TxMailbox1CompleteCallback>
 8002468:	e016      	b.n	8002498 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
 800247c:	e00c      	b.n	8002498 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
 8002490:	e002      	b.n	8002498 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f969 	bl	800276a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d024      	beq.n	80024ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f943 	bl	8002742 <HAL_CAN_TxMailbox2CompleteCallback>
 80024bc:	e016      	b.n	80024ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
 80024d0:	e00c      	b.n	80024ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
 80024e4:	e002      	b.n	80024ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f949 	bl	800277e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002506:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2210      	movs	r2, #16
 800250e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2208      	movs	r2, #8
 800252a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f930 	bl	8002792 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe fe22 	bl	8001194 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00c      	beq.n	8002574 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800256a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2210      	movs	r2, #16
 8002572:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2208      	movs	r2, #8
 800258e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f912 	bl	80027ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f8f9 	bl	80027a6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2210      	movs	r2, #16
 80025ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f8fc 	bl	80027ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2208      	movs	r2, #8
 80025f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f8f5 	bl	80027e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d07b      	beq.n	80026fa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d072      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002666:	2b00      	cmp	r3, #0
 8002668:	d043      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002670:	2b00      	cmp	r3, #0
 8002672:	d03e      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800267a:	2b60      	cmp	r3, #96	; 0x60
 800267c:	d02b      	beq.n	80026d6 <HAL_CAN_IRQHandler+0x32a>
 800267e:	2b60      	cmp	r3, #96	; 0x60
 8002680:	d82e      	bhi.n	80026e0 <HAL_CAN_IRQHandler+0x334>
 8002682:	2b50      	cmp	r3, #80	; 0x50
 8002684:	d022      	beq.n	80026cc <HAL_CAN_IRQHandler+0x320>
 8002686:	2b50      	cmp	r3, #80	; 0x50
 8002688:	d82a      	bhi.n	80026e0 <HAL_CAN_IRQHandler+0x334>
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d019      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x316>
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d826      	bhi.n	80026e0 <HAL_CAN_IRQHandler+0x334>
 8002692:	2b30      	cmp	r3, #48	; 0x30
 8002694:	d010      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x30c>
 8002696:	2b30      	cmp	r3, #48	; 0x30
 8002698:	d822      	bhi.n	80026e0 <HAL_CAN_IRQHandler+0x334>
 800269a:	2b10      	cmp	r3, #16
 800269c:	d002      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x2f8>
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d005      	beq.n	80026ae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026a2:	e01d      	b.n	80026e0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	f043 0308 	orr.w	r3, r3, #8
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026ac:	e019      	b.n	80026e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026b6:	e014      	b.n	80026e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	f043 0320 	orr.w	r3, r3, #32
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026c0:	e00f      	b.n	80026e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026ca:	e00a      	b.n	80026e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026d4:	e005      	b.n	80026e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026de:	e000      	b.n	80026e2 <HAL_CAN_IRQHandler+0x336>
            break;
 80026e0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2204      	movs	r2, #4
 80026f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f872 	bl	80027f6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002712:	bf00      	nop
 8002714:	3728      	adds	r7, #40	; 0x28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <__NVIC_SetPriorityGrouping+0x40>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002836:	4313      	orrs	r3, r2
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	; (800284c <__NVIC_SetPriorityGrouping+0x40>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00
 8002850:	05fa0000 	.word	0x05fa0000

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800298c:	f7ff ff8e 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff29 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff3e 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff8e 	bl	8002900 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff31 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffa2 	bl	8002968 <SysTick_Config>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a3c:	f7ff f8b2 	bl	8001ba4 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e099      	b.n	8002b80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6c:	e00f      	b.n	8002a8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a6e:	f7ff f899 	bl	8001ba4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d908      	bls.n	8002a8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2203      	movs	r2, #3
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e078      	b.n	8002b80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e8      	bne.n	8002a6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_DMA_Init+0x158>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d107      	bne.n	8002af8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4313      	orrs	r3, r2
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0307 	bic.w	r3, r3, #7
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d117      	bne.n	8002b52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00e      	beq.n	8002b52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 faa5 	bl	8003084 <DMA_CheckFifoParam>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e016      	b.n	8002b80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa5c 	bl	8003018 <DMA_CalcBaseAndBitshift>
 8002b60:	4603      	mov	r3, r0
 8002b62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	223f      	movs	r2, #63	; 0x3f
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	e010803f 	.word	0xe010803f

08002b8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_DMA_Start_IT+0x26>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e048      	b.n	8002c44 <HAL_DMA_Start_IT+0xb8>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d137      	bne.n	8002c36 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f9ee 	bl	8002fbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	223f      	movs	r2, #63	; 0x3f
 8002be6:	409a      	lsls	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0216 	orr.w	r2, r2, #22
 8002bfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c0a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0208 	orr.w	r2, r2, #8
 8002c22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e005      	b.n	8002c42 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d004      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00c      	b.n	8002c84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c9c:	4b8e      	ldr	r3, [pc, #568]	; (8002ed8 <HAL_DMA_IRQHandler+0x248>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a8e      	ldr	r2, [pc, #568]	; (8002edc <HAL_DMA_IRQHandler+0x24c>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0a9b      	lsrs	r3, r3, #10
 8002ca8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	2208      	movs	r2, #8
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01a      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0204 	bic.w	r2, r2, #4
 8002ce2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	2208      	movs	r2, #8
 8002cea:	409a      	lsls	r2, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	2201      	movs	r2, #1
 8002d02:	409a      	lsls	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d012      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	2201      	movs	r2, #1
 8002d20:	409a      	lsls	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	f043 0202 	orr.w	r2, r3, #2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d36:	2204      	movs	r2, #4
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d012      	beq.n	8002d68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	2204      	movs	r2, #4
 8002d56:	409a      	lsls	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d043      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d03c      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d018      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d024      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
 8002dbe:	e01f      	b.n	8002e00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01b      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
 8002dd0:	e016      	b.n	8002e00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0208 	bic.w	r2, r2, #8
 8002dee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	2220      	movs	r2, #32
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 808f 	beq.w	8002f30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8087 	beq.w	8002f30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	2220      	movs	r2, #32
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d136      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0216 	bic.w	r2, r2, #22
 8002e48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <HAL_DMA_IRQHandler+0x1da>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0208 	bic.w	r2, r2, #8
 8002e78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	223f      	movs	r2, #63	; 0x3f
 8002e80:	409a      	lsls	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d07e      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
        }
        return;
 8002ea6:	e079      	b.n	8002f9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d031      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
 8002ed4:	e02c      	b.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d023      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
 8002ef0:	e01e      	b.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10f      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0210 	bic.w	r2, r2, #16
 8002f0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d032      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d022      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2205      	movs	r2, #5
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d307      	bcc.n	8002f78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f2      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x2cc>
 8002f76:	e000      	b.n	8002f7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
 8002f9a:	e000      	b.n	8002f9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f9c:	bf00      	nop
    }
  }
}
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d108      	bne.n	8002ffc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ffa:	e007      	b.n	800300c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	60da      	str	r2, [r3, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	3b10      	subs	r3, #16
 8003028:	4a13      	ldr	r2, [pc, #76]	; (8003078 <DMA_CalcBaseAndBitshift+0x60>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003032:	4a12      	ldr	r2, [pc, #72]	; (800307c <DMA_CalcBaseAndBitshift+0x64>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d908      	bls.n	8003058 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <DMA_CalcBaseAndBitshift+0x68>)
 800304e:	4013      	ands	r3, r2
 8003050:	1d1a      	adds	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	659a      	str	r2, [r3, #88]	; 0x58
 8003056:	e006      	b.n	8003066 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <DMA_CalcBaseAndBitshift+0x68>)
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	aaaaaaab 	.word	0xaaaaaaab
 800307c:	08012168 	.word	0x08012168
 8003080:	fffffc00 	.word	0xfffffc00

08003084 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11f      	bne.n	80030de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d856      	bhi.n	8003152 <DMA_CheckFifoParam+0xce>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <DMA_CheckFifoParam+0x28>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030cf 	.word	0x080030cf
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	08003153 	.word	0x08003153
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d046      	beq.n	8003156 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030cc:	e043      	b.n	8003156 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030d6:	d140      	bne.n	800315a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030dc:	e03d      	b.n	800315a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e6:	d121      	bne.n	800312c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d837      	bhi.n	800315e <DMA_CheckFifoParam+0xda>
 80030ee:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <DMA_CheckFifoParam+0x70>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003105 	.word	0x08003105
 80030f8:	0800310b 	.word	0x0800310b
 80030fc:	08003105 	.word	0x08003105
 8003100:	0800311d 	.word	0x0800311d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      break;
 8003108:	e030      	b.n	800316c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d025      	beq.n	8003162 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800311a:	e022      	b.n	8003162 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003124:	d11f      	bne.n	8003166 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800312a:	e01c      	b.n	8003166 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d903      	bls.n	800313a <DMA_CheckFifoParam+0xb6>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d003      	beq.n	8003140 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003138:	e018      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
      break;
 800313e:	e015      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00e      	beq.n	800316a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
      break;
 8003150:	e00b      	b.n	800316a <DMA_CheckFifoParam+0xe6>
      break;
 8003152:	bf00      	nop
 8003154:	e00a      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 8003156:	bf00      	nop
 8003158:	e008      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 800315a:	bf00      	nop
 800315c:	e006      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 800315e:	bf00      	nop
 8003160:	e004      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;   
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <DMA_CheckFifoParam+0xe8>
      break;
 800316a:	bf00      	nop
    }
  } 
  
  return status; 
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop

0800317c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e175      	b.n	8003488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800319c:	2201      	movs	r2, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	f040 8164 	bne.w	8003482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d005      	beq.n	80031d2 <HAL_GPIO_Init+0x56>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d130      	bne.n	8003234 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003208:	2201      	movs	r2, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 0201 	and.w	r2, r3, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d017      	beq.n	8003270 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d123      	bne.n	80032c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	08da      	lsrs	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3208      	adds	r2, #8
 8003284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3208      	adds	r2, #8
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80be 	beq.w	8003482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003306:	4b66      	ldr	r3, [pc, #408]	; (80034a0 <HAL_GPIO_Init+0x324>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <HAL_GPIO_Init+0x324>)
 800330c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003310:	6453      	str	r3, [r2, #68]	; 0x44
 8003312:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <HAL_GPIO_Init+0x324>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800331e:	4a61      	ldr	r2, [pc, #388]	; (80034a4 <HAL_GPIO_Init+0x328>)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	220f      	movs	r2, #15
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a58      	ldr	r2, [pc, #352]	; (80034a8 <HAL_GPIO_Init+0x32c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d037      	beq.n	80033ba <HAL_GPIO_Init+0x23e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a57      	ldr	r2, [pc, #348]	; (80034ac <HAL_GPIO_Init+0x330>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d031      	beq.n	80033b6 <HAL_GPIO_Init+0x23a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a56      	ldr	r2, [pc, #344]	; (80034b0 <HAL_GPIO_Init+0x334>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d02b      	beq.n	80033b2 <HAL_GPIO_Init+0x236>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a55      	ldr	r2, [pc, #340]	; (80034b4 <HAL_GPIO_Init+0x338>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d025      	beq.n	80033ae <HAL_GPIO_Init+0x232>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a54      	ldr	r2, [pc, #336]	; (80034b8 <HAL_GPIO_Init+0x33c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01f      	beq.n	80033aa <HAL_GPIO_Init+0x22e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a53      	ldr	r2, [pc, #332]	; (80034bc <HAL_GPIO_Init+0x340>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d019      	beq.n	80033a6 <HAL_GPIO_Init+0x22a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a52      	ldr	r2, [pc, #328]	; (80034c0 <HAL_GPIO_Init+0x344>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_GPIO_Init+0x226>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <HAL_GPIO_Init+0x348>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00d      	beq.n	800339e <HAL_GPIO_Init+0x222>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a50      	ldr	r2, [pc, #320]	; (80034c8 <HAL_GPIO_Init+0x34c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <HAL_GPIO_Init+0x21e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4f      	ldr	r2, [pc, #316]	; (80034cc <HAL_GPIO_Init+0x350>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_GPIO_Init+0x21a>
 8003392:	2309      	movs	r3, #9
 8003394:	e012      	b.n	80033bc <HAL_GPIO_Init+0x240>
 8003396:	230a      	movs	r3, #10
 8003398:	e010      	b.n	80033bc <HAL_GPIO_Init+0x240>
 800339a:	2308      	movs	r3, #8
 800339c:	e00e      	b.n	80033bc <HAL_GPIO_Init+0x240>
 800339e:	2307      	movs	r3, #7
 80033a0:	e00c      	b.n	80033bc <HAL_GPIO_Init+0x240>
 80033a2:	2306      	movs	r3, #6
 80033a4:	e00a      	b.n	80033bc <HAL_GPIO_Init+0x240>
 80033a6:	2305      	movs	r3, #5
 80033a8:	e008      	b.n	80033bc <HAL_GPIO_Init+0x240>
 80033aa:	2304      	movs	r3, #4
 80033ac:	e006      	b.n	80033bc <HAL_GPIO_Init+0x240>
 80033ae:	2303      	movs	r3, #3
 80033b0:	e004      	b.n	80033bc <HAL_GPIO_Init+0x240>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e002      	b.n	80033bc <HAL_GPIO_Init+0x240>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_GPIO_Init+0x240>
 80033ba:	2300      	movs	r3, #0
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	f002 0203 	and.w	r2, r2, #3
 80033c2:	0092      	lsls	r2, r2, #2
 80033c4:	4093      	lsls	r3, r2
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033cc:	4935      	ldr	r1, [pc, #212]	; (80034a4 <HAL_GPIO_Init+0x328>)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	089b      	lsrs	r3, r3, #2
 80033d2:	3302      	adds	r3, #2
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_GPIO_Init+0x354>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033fe:	4a34      	ldr	r2, [pc, #208]	; (80034d0 <HAL_GPIO_Init+0x354>)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003404:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <HAL_GPIO_Init+0x354>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003428:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <HAL_GPIO_Init+0x354>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_GPIO_Init+0x354>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003452:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <HAL_GPIO_Init+0x354>)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_GPIO_Init+0x354>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800347c:	4a14      	ldr	r2, [pc, #80]	; (80034d0 <HAL_GPIO_Init+0x354>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3301      	adds	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b0f      	cmp	r3, #15
 800348c:	f67f ae86 	bls.w	800319c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40013800 	.word	0x40013800
 80034a8:	40020000 	.word	0x40020000
 80034ac:	40020400 	.word	0x40020400
 80034b0:	40020800 	.word	0x40020800
 80034b4:	40020c00 	.word	0x40020c00
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40021400 	.word	0x40021400
 80034c0:	40021800 	.word	0x40021800
 80034c4:	40021c00 	.word	0x40021c00
 80034c8:	40022000 	.word	0x40022000
 80034cc:	40022400 	.word	0x40022400
 80034d0:	40013c00 	.word	0x40013c00

080034d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e001      	b.n	80034f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003520:	e003      	b.n	800352a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	041a      	lsls	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800354e:	4a05      	ldr	r2, [pc, #20]	; (8003564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f806 	bl	8003568 <HAL_GPIO_EXTI_Callback>
  }
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40013c00 	.word	0x40013c00

08003568 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fe92 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	e006      	b.n	8003608 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003606:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d104      	bne.n	800361a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003618:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_I2C_Init+0x11c>)
 8003626:	430b      	orrs	r3, r1
 8003628:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003638:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69d9      	ldr	r1, [r3, #28]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	02008000 	.word	0x02008000

080036a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	461a      	mov	r2, r3
 80036ac:	460b      	mov	r3, r1
 80036ae:	817b      	strh	r3, [r7, #10]
 80036b0:	4613      	mov	r3, r2
 80036b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b20      	cmp	r3, #32
 80036be:	f040 80da 	bne.w	8003876 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_I2C_Master_Transmit+0x30>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0d3      	b.n	8003878 <HAL_I2C_Master_Transmit+0x1d8>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036d8:	f7fe fa64 	bl	8001ba4 <HAL_GetTick>
 80036dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2319      	movs	r3, #25
 80036e4:	2201      	movs	r2, #1
 80036e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f9e6 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0be      	b.n	8003878 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2221      	movs	r2, #33	; 0x21
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2210      	movs	r2, #16
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	893a      	ldrh	r2, [r7, #8]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	2bff      	cmp	r3, #255	; 0xff
 800372a:	d90e      	bls.n	800374a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	22ff      	movs	r2, #255	; 0xff
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	b2da      	uxtb	r2, r3
 8003738:	8979      	ldrh	r1, [r7, #10]
 800373a:	4b51      	ldr	r3, [pc, #324]	; (8003880 <HAL_I2C_Master_Transmit+0x1e0>)
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fbd0 	bl	8003ee8 <I2C_TransferConfig>
 8003748:	e06c      	b.n	8003824 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	b2da      	uxtb	r2, r3
 800375a:	8979      	ldrh	r1, [r7, #10]
 800375c:	4b48      	ldr	r3, [pc, #288]	; (8003880 <HAL_I2C_Master_Transmit+0x1e0>)
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fbbf 	bl	8003ee8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800376a:	e05b      	b.n	8003824 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	6a39      	ldr	r1, [r7, #32]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f9e3 	bl	8003b3c <I2C_WaitOnTXISFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e07b      	b.n	8003878 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	781a      	ldrb	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d034      	beq.n	8003824 <HAL_I2C_Master_Transmit+0x184>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d130      	bne.n	8003824 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2180      	movs	r1, #128	; 0x80
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f975 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e04d      	b.n	8003878 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2bff      	cmp	r3, #255	; 0xff
 80037e4:	d90e      	bls.n	8003804 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	22ff      	movs	r2, #255	; 0xff
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	8979      	ldrh	r1, [r7, #10]
 80037f4:	2300      	movs	r3, #0
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fb73 	bl	8003ee8 <I2C_TransferConfig>
 8003802:	e00f      	b.n	8003824 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	b2da      	uxtb	r2, r3
 8003814:	8979      	ldrh	r1, [r7, #10]
 8003816:	2300      	movs	r3, #0
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fb62 	bl	8003ee8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d19e      	bne.n	800376c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	6a39      	ldr	r1, [r7, #32]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f9c2 	bl	8003bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e01a      	b.n	8003878 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2220      	movs	r2, #32
 8003848:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_I2C_Master_Transmit+0x1e4>)
 8003856:	400b      	ands	r3, r1
 8003858:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003876:	2302      	movs	r3, #2
  }
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	80002000 	.word	0x80002000
 8003884:	fe00e800 	.word	0xfe00e800

08003888 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	461a      	mov	r2, r3
 8003894:	460b      	mov	r3, r1
 8003896:	817b      	strh	r3, [r7, #10]
 8003898:	4613      	mov	r3, r2
 800389a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	f040 80db 	bne.w	8003a60 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_I2C_Master_Receive+0x30>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e0d4      	b.n	8003a62 <HAL_I2C_Master_Receive+0x1da>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038c0:	f7fe f970 	bl	8001ba4 <HAL_GetTick>
 80038c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	2319      	movs	r3, #25
 80038cc:	2201      	movs	r2, #1
 80038ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f8f2 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0bf      	b.n	8003a62 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2222      	movs	r2, #34	; 0x22
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2210      	movs	r2, #16
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	893a      	ldrh	r2, [r7, #8]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	2bff      	cmp	r3, #255	; 0xff
 8003912:	d90e      	bls.n	8003932 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	22ff      	movs	r2, #255	; 0xff
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391e:	b2da      	uxtb	r2, r3
 8003920:	8979      	ldrh	r1, [r7, #10]
 8003922:	4b52      	ldr	r3, [pc, #328]	; (8003a6c <HAL_I2C_Master_Receive+0x1e4>)
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fadc 	bl	8003ee8 <I2C_TransferConfig>
 8003930:	e06d      	b.n	8003a0e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	b2da      	uxtb	r2, r3
 8003942:	8979      	ldrh	r1, [r7, #10]
 8003944:	4b49      	ldr	r3, [pc, #292]	; (8003a6c <HAL_I2C_Master_Receive+0x1e4>)
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 facb 	bl	8003ee8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003952:	e05c      	b.n	8003a0e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	6a39      	ldr	r1, [r7, #32]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f96b 	bl	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e07c      	b.n	8003a62 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d034      	beq.n	8003a0e <HAL_I2C_Master_Receive+0x186>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d130      	bne.n	8003a0e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	2200      	movs	r2, #0
 80039b4:	2180      	movs	r1, #128	; 0x80
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f880 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e04d      	b.n	8003a62 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2bff      	cmp	r3, #255	; 0xff
 80039ce:	d90e      	bls.n	80039ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	22ff      	movs	r2, #255	; 0xff
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	8979      	ldrh	r1, [r7, #10]
 80039de:	2300      	movs	r3, #0
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fa7e 	bl	8003ee8 <I2C_TransferConfig>
 80039ec:	e00f      	b.n	8003a0e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	8979      	ldrh	r1, [r7, #10]
 8003a00:	2300      	movs	r3, #0
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fa6d 	bl	8003ee8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d19d      	bne.n	8003954 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	6a39      	ldr	r1, [r7, #32]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f8cd 	bl	8003bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e01a      	b.n	8003a62 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2220      	movs	r2, #32
 8003a32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <HAL_I2C_Master_Receive+0x1e8>)
 8003a40:	400b      	ands	r3, r1
 8003a42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	80002400 	.word	0x80002400
 8003a70:	fe00e800 	.word	0xfe00e800

08003a74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d103      	bne.n	8003a92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d007      	beq.n	8003ab0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	619a      	str	r2, [r3, #24]
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003acc:	e022      	b.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad4:	d01e      	beq.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fe f865 	bl	8001ba4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d113      	bne.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e00f      	b.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d0cd      	beq.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b48:	e02c      	b.n	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f8ea 	bl	8003d28 <I2C_IsErrorOccurred>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e02a      	b.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b64:	d01e      	beq.n	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fe f81d 	bl	8001ba4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d113      	bne.n	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e007      	b.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d1cb      	bne.n	8003b4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc8:	e028      	b.n	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f8aa 	bl	8003d28 <I2C_IsErrorOccurred>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e026      	b.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fd ffe1 	bl	8001ba4 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d113      	bne.n	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e007      	b.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d1cf      	bne.n	8003bca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c40:	e064      	b.n	8003d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f86e 	bl	8003d28 <I2C_IsErrorOccurred>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e062      	b.n	8003d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d138      	bne.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d105      	bne.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e04e      	b.n	8003d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d107      	bne.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2210      	movs	r2, #16
 8003c92:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2204      	movs	r2, #4
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
 8003c9a:	e002      	b.n	8003ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e022      	b.n	8003d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd6:	f7fd ff65 	bl	8001ba4 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10f      	bne.n	8003d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e007      	b.n	8003d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d193      	bne.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	fe00e800 	.word	0xfe00e800

08003d28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d068      	beq.n	8003e26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d5c:	e049      	b.n	8003df2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d64:	d045      	beq.n	8003df2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fd ff1d 	bl	8001ba4 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <I2C_IsErrorOccurred+0x54>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d13a      	bne.n	8003df2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9e:	d121      	bne.n	8003de4 <I2C_IsErrorOccurred+0xbc>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da6:	d01d      	beq.n	8003de4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d01a      	beq.n	8003de4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dbc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dbe:	f7fd fef1 	bl	8001ba4 <HAL_GetTick>
 8003dc2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc4:	e00e      	b.n	8003de4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dc6:	f7fd feed 	bl	8001ba4 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b19      	cmp	r3, #25
 8003dd2:	d907      	bls.n	8003de4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f043 0320 	orr.w	r3, r3, #32
 8003dda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003de2:	e006      	b.n	8003df2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d1e9      	bne.n	8003dc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d003      	beq.n	8003e08 <I2C_IsErrorOccurred+0xe0>
 8003e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0aa      	beq.n	8003d5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2220      	movs	r2, #32
 8003e16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f043 0308 	orr.w	r3, r3, #8
 8003e60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00b      	beq.n	8003e94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01c      	beq.n	8003ed6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff fde9 	bl	8003a74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <I2C_IsErrorOccurred+0x1bc>)
 8003eae:	400b      	ands	r3, r1
 8003eb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3728      	adds	r7, #40	; 0x28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	fe00e800 	.word	0xfe00e800

08003ee8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003efa:	897b      	ldrh	r3, [r7, #10]
 8003efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f00:	7a7b      	ldrb	r3, [r7, #9]
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	0d5b      	lsrs	r3, r3, #21
 8003f22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <I2C_TransferConfig+0x60>)
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	ea02 0103 	and.w	r1, r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f3a:	bf00      	nop
 8003f3c:	371c      	adds	r7, #28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	03ff63ff 	.word	0x03ff63ff

08003f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d138      	bne.n	8003fd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e032      	b.n	8003fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	; 0x24
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d139      	bne.n	800406c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004002:	2302      	movs	r3, #2
 8004004:	e033      	b.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2224      	movs	r2, #36	; 0x24
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004034:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800407a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800407c:	b08f      	sub	sp, #60	; 0x3c
 800407e:	af0a      	add	r7, sp, #40	; 0x28
 8004080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e116      	b.n	80042ba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f00c f8a4 	bl	80101f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2203      	movs	r2, #3
 80040b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f004 ffdb 	bl	8009086 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	687e      	ldr	r6, [r7, #4]
 80040d8:	466d      	mov	r5, sp
 80040da:	f106 0410 	add.w	r4, r6, #16
 80040de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80040ee:	1d33      	adds	r3, r6, #4
 80040f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040f2:	6838      	ldr	r0, [r7, #0]
 80040f4:	f004 febc 	bl	8008e70 <USB_CoreInit>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0d7      	b.n	80042ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2100      	movs	r1, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f004 ffc9 	bl	80090a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004116:	2300      	movs	r3, #0
 8004118:	73fb      	strb	r3, [r7, #15]
 800411a:	e04a      	b.n	80041b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	333d      	adds	r3, #61	; 0x3d
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004130:	7bfa      	ldrb	r2, [r7, #15]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	333c      	adds	r3, #60	; 0x3c
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004144:	7bfa      	ldrb	r2, [r7, #15]
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	b298      	uxth	r0, r3
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	3344      	adds	r3, #68	; 0x44
 8004158:	4602      	mov	r2, r0
 800415a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800415c:	7bfa      	ldrb	r2, [r7, #15]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	3340      	adds	r3, #64	; 0x40
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004170:	7bfa      	ldrb	r2, [r7, #15]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	3348      	adds	r3, #72	; 0x48
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004184:	7bfa      	ldrb	r2, [r7, #15]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	334c      	adds	r3, #76	; 0x4c
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	3354      	adds	r3, #84	; 0x54
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	3301      	adds	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d3af      	bcc.n	800411c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]
 80041c0:	e044      	b.n	800424c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041d8:	7bfa      	ldrb	r2, [r7, #15]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004204:	7bfa      	ldrb	r2, [r7, #15]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004230:	7bfa      	ldrb	r2, [r7, #15]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	3301      	adds	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d3b5      	bcc.n	80041c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	687e      	ldr	r6, [r7, #4]
 800425e:	466d      	mov	r5, sp
 8004260:	f106 0410 	add.w	r4, r6, #16
 8004264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800426a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800426c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004270:	e885 0003 	stmia.w	r5, {r0, r1}
 8004274:	1d33      	adds	r3, r6, #4
 8004276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004278:	6838      	ldr	r0, [r7, #0]
 800427a:	f004 ff61 	bl	8009140 <USB_DevInit>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e014      	b.n	80042ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d102      	bne.n	80042ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f001 f97b 	bl	80055a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f006 f8af 	bl	800a416 <USB_DevDisconnect>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_PCD_Start+0x16>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e012      	b.n	80042fe <HAL_PCD_Start+0x3c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f004 febd 	bl	8009064 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f006 f870 	bl	800a3d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004306:	b590      	push	{r4, r7, lr}
 8004308:	b08d      	sub	sp, #52	; 0x34
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f006 f92e 	bl	800a57e <USB_GetMode>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 84b7 	bne.w	8004c98 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f006 f892 	bl	800a458 <USB_ReadInterrupts>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 84ad 	beq.w	8004c96 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f006 f87f 	bl	800a458 <USB_ReadInterrupts>
 800435a:	4603      	mov	r3, r0
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d107      	bne.n	8004374 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f002 0202 	and.w	r2, r2, #2
 8004372:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f006 f86d 	bl	800a458 <USB_ReadInterrupts>
 800437e:	4603      	mov	r3, r0
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b10      	cmp	r3, #16
 8004386:	d161      	bne.n	800444c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0210 	bic.w	r2, r2, #16
 8004396:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f003 020f 	and.w	r2, r3, #15
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4413      	add	r3, r2
 80043b4:	3304      	adds	r3, #4
 80043b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	0c5b      	lsrs	r3, r3, #17
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d124      	bne.n	800440e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d035      	beq.n	800443c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043de:	b29b      	uxth	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	6a38      	ldr	r0, [r7, #32]
 80043e4:	f005 fea4 	bl	800a130 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043f4:	441a      	add	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	6a1a      	ldr	r2, [r3, #32]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004406:	441a      	add	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	621a      	str	r2, [r3, #32]
 800440c:	e016      	b.n	800443c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	0c5b      	lsrs	r3, r3, #17
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	2b06      	cmp	r3, #6
 8004418:	d110      	bne.n	800443c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004420:	2208      	movs	r2, #8
 8004422:	4619      	mov	r1, r3
 8004424:	6a38      	ldr	r0, [r7, #32]
 8004426:	f005 fe83 	bl	800a130 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6a1a      	ldr	r2, [r3, #32]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004436:	441a      	add	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0210 	orr.w	r2, r2, #16
 800444a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f006 f801 	bl	800a458 <USB_ReadInterrupts>
 8004456:	4603      	mov	r3, r0
 8004458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800445c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004460:	f040 80a7 	bne.w	80045b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f006 f806 	bl	800a47e <USB_ReadDevAllOutEpInterrupt>
 8004472:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004474:	e099      	b.n	80045aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 808e 	beq.w	800459e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f006 f82a 	bl	800a4e6 <USB_ReadDevOutEPInterrupt>
 8004492:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	461a      	mov	r2, r3
 80044ac:	2301      	movs	r3, #1
 80044ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80044b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fef0 	bl	8005298 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	461a      	mov	r2, r3
 80044d0:	2308      	movs	r3, #8
 80044d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 ffc6 	bl	8005468 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	2310      	movs	r3, #16
 80044f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d030      	beq.n	8004564 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b80      	cmp	r3, #128	; 0x80
 800450c:	d109      	bne.n	8004522 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004520:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	3304      	adds	r3, #4
 8004536:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	78db      	ldrb	r3, [r3, #3]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d108      	bne.n	8004552 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2200      	movs	r2, #0
 8004544:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	b2db      	uxtb	r3, r3
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f00b ff75 	bl	801043c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	461a      	mov	r2, r3
 8004560:	2302      	movs	r3, #2
 8004562:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d008      	beq.n	8004580 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	2320      	movs	r3, #32
 800457e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	461a      	mov	r2, r3
 8004598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800459c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	3301      	adds	r3, #1
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f47f af62 	bne.w	8004476 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f005 ff4e 	bl	800a458 <USB_ReadInterrupts>
 80045bc:	4603      	mov	r3, r0
 80045be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045c6:	f040 80db 	bne.w	8004780 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f005 ff6f 	bl	800a4b2 <USB_ReadDevAllInEpInterrupt>
 80045d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045da:	e0cd      	b.n	8004778 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80c2 	beq.w	800476c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f005 ff95 	bl	800a522 <USB_ReadDevInEPInterrupt>
 80045f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d057      	beq.n	80046b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	2201      	movs	r2, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	43db      	mvns	r3, r3
 800461e:	69f9      	ldr	r1, [r7, #28]
 8004620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004624:	4013      	ands	r3, r2
 8004626:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004634:	461a      	mov	r2, r3
 8004636:	2301      	movs	r3, #1
 8004638:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d132      	bne.n	80046a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004646:	4613      	mov	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	334c      	adds	r3, #76	; 0x4c
 8004652:	6819      	ldr	r1, [r3, #0]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4403      	add	r3, r0
 8004662:	3348      	adds	r3, #72	; 0x48
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4419      	add	r1, r3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4403      	add	r3, r0
 8004676:	334c      	adds	r3, #76	; 0x4c
 8004678:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d113      	bne.n	80046a8 <HAL_PCD_IRQHandler+0x3a2>
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	3354      	adds	r3, #84	; 0x54
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d108      	bne.n	80046a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046a0:	461a      	mov	r2, r3
 80046a2:	2101      	movs	r1, #1
 80046a4:	f005 ff9e 	bl	800a5e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f00b fe3f 	bl	8010332 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	461a      	mov	r2, r3
 80046cc:	2308      	movs	r3, #8
 80046ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	461a      	mov	r2, r3
 80046e8:	2310      	movs	r3, #16
 80046ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004702:	461a      	mov	r2, r3
 8004704:	2340      	movs	r3, #64	; 0x40
 8004706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d023      	beq.n	800475a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004714:	6a38      	ldr	r0, [r7, #32]
 8004716:	f004 fe71 	bl	80093fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3338      	adds	r3, #56	; 0x38
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	3304      	adds	r3, #4
 800472c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	78db      	ldrb	r3, [r3, #3]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d108      	bne.n	8004748 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f00b fe8c 	bl	8010460 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004754:	461a      	mov	r2, r3
 8004756:	2302      	movs	r3, #2
 8004758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fd08 	bl	800517c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	3301      	adds	r3, #1
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	f47f af2e 	bne.w	80045dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f005 fe67 	bl	800a458 <USB_ReadInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004794:	d122      	bne.n	80047dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d108      	bne.n	80047c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047bc:	2100      	movs	r1, #0
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f00c f806 	bl	80107d0 <HAL_PCDEx_LPM_Callback>
 80047c4:	e002      	b.n	80047cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f00b fe2a 	bl	8010420 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f005 fe39 	bl	800a458 <USB_ReadInterrupts>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f0:	d112      	bne.n	8004818 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f00b fde6 	bl	80103d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004816:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f005 fe1b 	bl	800a458 <USB_ReadInterrupts>
 8004822:	4603      	mov	r3, r0
 8004824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800482c:	d121      	bne.n	8004872 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800483c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d111      	bne.n	800486c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004862:	2101      	movs	r1, #1
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f00b ffb3 	bl	80107d0 <HAL_PCDEx_LPM_Callback>
 800486a:	e002      	b.n	8004872 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f00b fdb1 	bl	80103d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f005 fdee 	bl	800a458 <USB_ReadInterrupts>
 800487c:	4603      	mov	r3, r0
 800487e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004886:	f040 80b7 	bne.w	80049f8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2110      	movs	r1, #16
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 fda9 	bl	80093fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ae:	e046      	b.n	800493e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	461a      	mov	r2, r3
 80048be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f0:	461a      	mov	r2, r3
 80048f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004916:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004932:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004936:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	3301      	adds	r3, #1
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004944:	429a      	cmp	r2, r3
 8004946:	d3b3      	bcc.n	80048b0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004956:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800495a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	2b00      	cmp	r3, #0
 8004962:	d016      	beq.n	8004992 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004974:	f043 030b 	orr.w	r3, r3, #11
 8004978:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800498a:	f043 030b 	orr.w	r3, r3, #11
 800498e:	6453      	str	r3, [r2, #68]	; 0x44
 8004990:	e015      	b.n	80049be <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004998:	695a      	ldr	r2, [r3, #20]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	4619      	mov	r1, r3
 80049a2:	f242 032b 	movw	r3, #8235	; 0x202b
 80049a6:	4313      	orrs	r3, r2
 80049a8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049b8:	f043 030b 	orr.w	r3, r3, #11
 80049bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049e2:	461a      	mov	r2, r3
 80049e4:	f005 fdfe 	bl	800a5e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80049f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f005 fd2b 	bl	800a458 <USB_ReadInterrupts>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0c:	d124      	bne.n	8004a58 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f005 fdc2 	bl	800a59c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f004 fd6a 	bl	80094f6 <USB_GetDevSpeed>
 8004a22:	4603      	mov	r3, r0
 8004a24:	461a      	mov	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681c      	ldr	r4, [r3, #0]
 8004a2e:	f001 fa7d 	bl	8005f2c <HAL_RCC_GetHCLKFreq>
 8004a32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f004 fa6f 	bl	8008f20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f00b fc9d 	bl	8010382 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f005 fcfb 	bl	800a458 <USB_ReadInterrupts>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d10a      	bne.n	8004a82 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f00b fc7a 	bl	8010366 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695a      	ldr	r2, [r3, #20]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f002 0208 	and.w	r2, r2, #8
 8004a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f005 fce6 	bl	800a458 <USB_ReadInterrupts>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d122      	bne.n	8004adc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa6:	e014      	b.n	8004ad2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d105      	bne.n	8004acc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fb27 	bl	800511a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	3301      	adds	r3, #1
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d3e5      	bcc.n	8004aa8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f005 fcb9 	bl	800a458 <USB_ReadInterrupts>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af0:	d13b      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004af2:	2301      	movs	r3, #1
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	e02b      	b.n	8004b50 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	3340      	adds	r3, #64	; 0x40
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d115      	bne.n	8004b4a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	da12      	bge.n	8004b4a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	333f      	adds	r3, #63	; 0x3f
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fae8 	bl	800511a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d3ce      	bcc.n	8004af8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695a      	ldr	r2, [r3, #20]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f005 fc72 	bl	800a458 <USB_ReadInterrupts>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b7e:	d155      	bne.n	8004c2c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b80:	2301      	movs	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
 8004b84:	e045      	b.n	8004c12 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d12e      	bne.n	8004c0c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	da2b      	bge.n	8004c0c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004bc0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d121      	bne.n	8004c0c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c08:	6053      	str	r3, [r2, #4]
            break;
 8004c0a:	e007      	b.n	8004c1c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	3301      	adds	r3, #1
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d3b4      	bcc.n	8004b86 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f005 fc11 	bl	800a458 <USB_ReadInterrupts>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c40:	d10a      	bne.n	8004c58 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f00b fc1e 	bl	8010484 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f005 fbfb 	bl	800a458 <USB_ReadInterrupts>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d115      	bne.n	8004c98 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f00b fc0e 	bl	80104a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
 8004c94:	e000      	b.n	8004c98 <HAL_PCD_IRQHandler+0x992>
      return;
 8004c96:	bf00      	nop
    }
  }
}
 8004c98:	3734      	adds	r7, #52	; 0x34
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}

08004c9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_PCD_SetAddress+0x1a>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e013      	b.n	8004ce0 <HAL_PCD_SetAddress+0x42>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f005 fb59 	bl	800a388 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	70fb      	strb	r3, [r7, #3]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	803b      	strh	r3, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da0f      	bge.n	8004d2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 020f 	and.w	r2, r3, #15
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	3338      	adds	r3, #56	; 0x38
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	3304      	adds	r3, #4
 8004d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	705a      	strb	r2, [r3, #1]
 8004d2c:	e00f      	b.n	8004d4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	f003 020f 	and.w	r2, r3, #15
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	3304      	adds	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d5a:	883a      	ldrh	r2, [r7, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	78ba      	ldrb	r2, [r7, #2]
 8004d64:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d004      	beq.n	8004d78 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d78:	78bb      	ldrb	r3, [r7, #2]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d102      	bne.n	8004d84 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_PCD_EP_Open+0xaa>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e00e      	b.n	8004db0 <HAL_PCD_EP_Open+0xc8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f004 fbcd 	bl	8009540 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004dae:	7afb      	ldrb	r3, [r7, #11]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	da0f      	bge.n	8004dec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	f003 020f 	and.w	r2, r3, #15
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	3338      	adds	r3, #56	; 0x38
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	3304      	adds	r3, #4
 8004de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	705a      	strb	r2, [r3, #1]
 8004dea:	e00f      	b.n	8004e0c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	f003 020f 	and.w	r2, r3, #15
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	3304      	adds	r3, #4
 8004e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_PCD_EP_Close+0x6e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e00e      	b.n	8004e44 <HAL_PCD_EP_Close+0x8c>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f004 fc0b 	bl	8009650 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e5c:	7afb      	ldrb	r3, [r7, #11]
 8004e5e:	f003 020f 	and.w	r2, r3, #15
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	3304      	adds	r3, #4
 8004e74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2200      	movs	r2, #0
 8004e86:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e8e:	7afb      	ldrb	r3, [r7, #11]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ea8:	7afb      	ldrb	r3, [r7, #11]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6979      	ldr	r1, [r7, #20]
 8004ec0:	f004 fef2 	bl	8009ca8 <USB_EP0StartXfer>
 8004ec4:	e008      	b.n	8004ed8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6979      	ldr	r1, [r7, #20]
 8004ed4:	f004 fc98 	bl	8009808 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004f04:	681b      	ldr	r3, [r3, #0]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f22:	7afb      	ldrb	r3, [r7, #11]
 8004f24:	f003 020f 	and.w	r2, r3, #15
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	3338      	adds	r3, #56	; 0x38
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	3304      	adds	r3, #4
 8004f38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f52:	7afb      	ldrb	r3, [r7, #11]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d102      	bne.n	8004f6c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f6c:	7afb      	ldrb	r3, [r7, #11]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	6979      	ldr	r1, [r7, #20]
 8004f84:	f004 fe90 	bl	8009ca8 <USB_EP0StartXfer>
 8004f88:	e008      	b.n	8004f9c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	f004 fc36 	bl	8009808 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	f003 020f 	and.w	r2, r3, #15
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d901      	bls.n	8004fc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e050      	b.n	8005066 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	da0f      	bge.n	8004fec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	3338      	adds	r3, #56	; 0x38
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	4413      	add	r3, r2
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	705a      	strb	r2, [r3, #1]
 8004fea:	e00d      	b.n	8005008 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3304      	adds	r3, #4
 8005000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	b2da      	uxtb	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_PCD_EP_SetStall+0x82>
 8005024:	2302      	movs	r3, #2
 8005026:	e01e      	b.n	8005066 <HAL_PCD_EP_SetStall+0xc0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	4618      	mov	r0, r3
 8005038:	f005 f8d2 	bl	800a1e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	b2d9      	uxtb	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005056:	461a      	mov	r2, r3
 8005058:	f005 fac4 	bl	800a5e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	460b      	mov	r3, r1
 8005078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	f003 020f 	and.w	r2, r3, #15
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d901      	bls.n	800508c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e042      	b.n	8005112 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800508c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005090:	2b00      	cmp	r3, #0
 8005092:	da0f      	bge.n	80050b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	f003 020f 	and.w	r2, r3, #15
 800509a:	4613      	mov	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	3338      	adds	r3, #56	; 0x38
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	3304      	adds	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	705a      	strb	r2, [r3, #1]
 80050b2:	e00f      	b.n	80050d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	f003 020f 	and.w	r2, r3, #15
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	3304      	adds	r3, #4
 80050cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_PCD_EP_ClrStall+0x86>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e00e      	b.n	8005112 <HAL_PCD_EP_ClrStall+0xa4>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	4618      	mov	r0, r3
 8005104:	f005 f8da 	bl	800a2bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800512a:	2b00      	cmp	r3, #0
 800512c:	da0c      	bge.n	8005148 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	f003 020f 	and.w	r2, r3, #15
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	3338      	adds	r3, #56	; 0x38
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	3304      	adds	r3, #4
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e00c      	b.n	8005162 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	f003 020f 	and.w	r2, r3, #15
 800514e:	4613      	mov	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	4413      	add	r3, r2
 800515e:	3304      	adds	r3, #4
 8005160:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	4618      	mov	r0, r3
 800516a:	f004 fef9 	bl	8009f60 <USB_EPStopXfer>
 800516e:	4603      	mov	r3, r0
 8005170:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005172:	7afb      	ldrb	r3, [r7, #11]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	; 0x28
 8005180:	af02      	add	r7, sp, #8
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	3338      	adds	r3, #56	; 0x38
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	4413      	add	r3, r2
 80051a0:	3304      	adds	r3, #4
 80051a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d901      	bls.n	80051b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e06c      	b.n	800528e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d902      	bls.n	80051d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3303      	adds	r3, #3
 80051d4:	089b      	lsrs	r3, r3, #2
 80051d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051d8:	e02b      	b.n	8005232 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d902      	bls.n	80051f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	3303      	adds	r3, #3
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6919      	ldr	r1, [r3, #16]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	b2da      	uxtb	r2, r3
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800520e:	b2db      	uxtb	r3, r3
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4603      	mov	r3, r0
 8005214:	6978      	ldr	r0, [r7, #20]
 8005216:	f004 ff4d 	bl	800a0b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	441a      	add	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1a      	ldr	r2, [r3, #32]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	441a      	add	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	429a      	cmp	r2, r3
 8005246:	d809      	bhi.n	800525c <PCD_WriteEmptyTxFifo+0xe0>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a1a      	ldr	r2, [r3, #32]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005250:	429a      	cmp	r2, r3
 8005252:	d203      	bcs.n	800525c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1be      	bne.n	80051da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	429a      	cmp	r2, r3
 8005266:	d811      	bhi.n	800528c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	2201      	movs	r2, #1
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	43db      	mvns	r3, r3
 8005282:	6939      	ldr	r1, [r7, #16]
 8005284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005288:	4013      	ands	r3, r2
 800528a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	333c      	adds	r3, #60	; 0x3c
 80052b0:	3304      	adds	r3, #4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d17b      	bne.n	80053c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d015      	beq.n	8005304 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	4a61      	ldr	r2, [pc, #388]	; (8005460 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	f240 80b9 	bls.w	8005454 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80b3 	beq.w	8005454 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	461a      	mov	r2, r3
 80052fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005300:	6093      	str	r3, [r2, #8]
 8005302:	e0a7      	b.n	8005454 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	461a      	mov	r2, r3
 800531c:	2320      	movs	r3, #32
 800531e:	6093      	str	r3, [r2, #8]
 8005320:	e098      	b.n	8005454 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	f040 8093 	bne.w	8005454 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	4a4b      	ldr	r2, [pc, #300]	; (8005460 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d90f      	bls.n	8005356 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	461a      	mov	r2, r3
 800534e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005352:	6093      	str	r3, [r2, #8]
 8005354:	e07e      	b.n	8005454 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	4413      	add	r3, r2
 8005368:	3304      	adds	r3, #4
 800536a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	0159      	lsls	r1, r3, #5
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	440b      	add	r3, r1
 8005378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005382:	1ad2      	subs	r2, r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d114      	bne.n	80053b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053a0:	461a      	mov	r2, r3
 80053a2:	2101      	movs	r1, #1
 80053a4:	f005 f91e 	bl	800a5e4 <USB_EP0_OutStart>
 80053a8:	e006      	b.n	80053b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	441a      	add	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f00a ff9c 	bl	80102fc <HAL_PCD_DataOutStageCallback>
 80053c4:	e046      	b.n	8005454 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	4a26      	ldr	r2, [pc, #152]	; (8005464 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d124      	bne.n	8005418 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	461a      	mov	r2, r3
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	6093      	str	r3, [r2, #8]
 80053ec:	e032      	b.n	8005454 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	461a      	mov	r2, r3
 8005406:	2320      	movs	r3, #32
 8005408:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f00a ff73 	bl	80102fc <HAL_PCD_DataOutStageCallback>
 8005416:	e01d      	b.n	8005454 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d114      	bne.n	8005448 <PCD_EP_OutXfrComplete_int+0x1b0>
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d108      	bne.n	8005448 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005440:	461a      	mov	r2, r3
 8005442:	2100      	movs	r1, #0
 8005444:	f005 f8ce 	bl	800a5e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f00a ff54 	bl	80102fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	4f54300a 	.word	0x4f54300a
 8005464:	4f54310a 	.word	0x4f54310a

08005468 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	333c      	adds	r3, #60	; 0x3c
 8005480:	3304      	adds	r3, #4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d90e      	bls.n	80054bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	461a      	mov	r2, r3
 80054b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f00a ff0b 	bl	80102d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d90c      	bls.n	80054e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d108      	bne.n	80054e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054dc:	461a      	mov	r2, r3
 80054de:	2101      	movs	r1, #1
 80054e0:	f005 f880 	bl	800a5e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	4f54300a 	.word	0x4f54300a

080054f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
 8005500:	4613      	mov	r3, r2
 8005502:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005512:	883b      	ldrh	r3, [r7, #0]
 8005514:	0419      	lsls	r1, r3, #16
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	430a      	orrs	r2, r1
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
 8005520:	e028      	b.n	8005574 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4413      	add	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005530:	2300      	movs	r3, #0
 8005532:	73fb      	strb	r3, [r7, #15]
 8005534:	e00d      	b.n	8005552 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	3340      	adds	r3, #64	; 0x40
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	0c1b      	lsrs	r3, r3, #16
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	4413      	add	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	3301      	adds	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
 8005552:	7bfa      	ldrb	r2, [r7, #15]
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	3b01      	subs	r3, #1
 8005558:	429a      	cmp	r2, r3
 800555a:	d3ec      	bcc.n	8005536 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800555c:	883b      	ldrh	r3, [r7, #0]
 800555e:	0418      	lsls	r0, r3, #16
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	3b01      	subs	r3, #1
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	4302      	orrs	r2, r0
 800556c:	3340      	adds	r3, #64	; 0x40
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	887a      	ldrh	r2, [r7, #2]
 8005594:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	10000003 	.word	0x10000003

080055ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80055f4:	2300      	movs	r3, #0
 80055f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e29b      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8087 	beq.w	800571e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005610:	4b96      	ldr	r3, [pc, #600]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b04      	cmp	r3, #4
 800561a:	d00c      	beq.n	8005636 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800561c:	4b93      	ldr	r3, [pc, #588]	; (800586c <HAL_RCC_OscConfig+0x280>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 030c 	and.w	r3, r3, #12
 8005624:	2b08      	cmp	r3, #8
 8005626:	d112      	bne.n	800564e <HAL_RCC_OscConfig+0x62>
 8005628:	4b90      	ldr	r3, [pc, #576]	; (800586c <HAL_RCC_OscConfig+0x280>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005634:	d10b      	bne.n	800564e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005636:	4b8d      	ldr	r3, [pc, #564]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d06c      	beq.n	800571c <HAL_RCC_OscConfig+0x130>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d168      	bne.n	800571c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e275      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x7a>
 8005658:	4b84      	ldr	r3, [pc, #528]	; (800586c <HAL_RCC_OscConfig+0x280>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a83      	ldr	r2, [pc, #524]	; (800586c <HAL_RCC_OscConfig+0x280>)
 800565e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	e02e      	b.n	80056c4 <HAL_RCC_OscConfig+0xd8>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x9c>
 800566e:	4b7f      	ldr	r3, [pc, #508]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a7e      	ldr	r2, [pc, #504]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b7c      	ldr	r3, [pc, #496]	; (800586c <HAL_RCC_OscConfig+0x280>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a7b      	ldr	r2, [pc, #492]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e01d      	b.n	80056c4 <HAL_RCC_OscConfig+0xd8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005690:	d10c      	bne.n	80056ac <HAL_RCC_OscConfig+0xc0>
 8005692:	4b76      	ldr	r3, [pc, #472]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a75      	ldr	r2, [pc, #468]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4b73      	ldr	r3, [pc, #460]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a72      	ldr	r2, [pc, #456]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80056a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	e00b      	b.n	80056c4 <HAL_RCC_OscConfig+0xd8>
 80056ac:	4b6f      	ldr	r3, [pc, #444]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a6e      	ldr	r2, [pc, #440]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80056b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	4b6c      	ldr	r3, [pc, #432]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a6b      	ldr	r2, [pc, #428]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80056be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d013      	beq.n	80056f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fc fa6a 	bl	8001ba4 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d4:	f7fc fa66 	bl	8001ba4 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	; 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e229      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e6:	4b61      	ldr	r3, [pc, #388]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0xe8>
 80056f2:	e014      	b.n	800571e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fc fa56 	bl	8001ba4 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056fc:	f7fc fa52 	bl	8001ba4 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e215      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800570e:	4b57      	ldr	r3, [pc, #348]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x110>
 800571a:	e000      	b.n	800571e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d069      	beq.n	80057fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800572a:	4b50      	ldr	r3, [pc, #320]	; (800586c <HAL_RCC_OscConfig+0x280>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005736:	4b4d      	ldr	r3, [pc, #308]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b08      	cmp	r3, #8
 8005740:	d11c      	bne.n	800577c <HAL_RCC_OscConfig+0x190>
 8005742:	4b4a      	ldr	r3, [pc, #296]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d116      	bne.n	800577c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574e:	4b47      	ldr	r3, [pc, #284]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_RCC_OscConfig+0x17a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d001      	beq.n	8005766 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e1e9      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005766:	4b41      	ldr	r3, [pc, #260]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	493d      	ldr	r1, [pc, #244]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577a:	e040      	b.n	80057fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d023      	beq.n	80057cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005784:	4b39      	ldr	r3, [pc, #228]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a38      	ldr	r2, [pc, #224]	; (800586c <HAL_RCC_OscConfig+0x280>)
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fc fa08 	bl	8001ba4 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005798:	f7fc fa04 	bl	8001ba4 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e1c7      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057aa:	4b30      	ldr	r3, [pc, #192]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b6:	4b2d      	ldr	r3, [pc, #180]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4929      	ldr	r1, [pc, #164]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]
 80057ca:	e018      	b.n	80057fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057cc:	4b27      	ldr	r3, [pc, #156]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a26      	ldr	r2, [pc, #152]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fc f9e4 	bl	8001ba4 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e0:	f7fc f9e0 	bl	8001ba4 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e1a3      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057f2:	4b1e      	ldr	r3, [pc, #120]	; (800586c <HAL_RCC_OscConfig+0x280>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d038      	beq.n	800587c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d019      	beq.n	8005846 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005812:	4b16      	ldr	r3, [pc, #88]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005816:	4a15      	ldr	r2, [pc, #84]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581e:	f7fc f9c1 	bl	8001ba4 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005826:	f7fc f9bd 	bl	8001ba4 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e180      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <HAL_RCC_OscConfig+0x280>)
 800583a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_OscConfig+0x23a>
 8005844:	e01a      	b.n	800587c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005846:	4b09      	ldr	r3, [pc, #36]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584a:	4a08      	ldr	r2, [pc, #32]	; (800586c <HAL_RCC_OscConfig+0x280>)
 800584c:	f023 0301 	bic.w	r3, r3, #1
 8005850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fc f9a7 	bl	8001ba4 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005858:	e00a      	b.n	8005870 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800585a:	f7fc f9a3 	bl	8001ba4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d903      	bls.n	8005870 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e166      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
 800586c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005870:	4b92      	ldr	r3, [pc, #584]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1ee      	bne.n	800585a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80a4 	beq.w	80059d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588a:	4b8c      	ldr	r3, [pc, #560]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10d      	bne.n	80058b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005896:	4b89      	ldr	r3, [pc, #548]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a88      	ldr	r2, [pc, #544]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40
 80058a2:	4b86      	ldr	r3, [pc, #536]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058aa:	60bb      	str	r3, [r7, #8]
 80058ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058b2:	4b83      	ldr	r3, [pc, #524]	; (8005ac0 <HAL_RCC_OscConfig+0x4d4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d118      	bne.n	80058f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80058be:	4b80      	ldr	r3, [pc, #512]	; (8005ac0 <HAL_RCC_OscConfig+0x4d4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7f      	ldr	r2, [pc, #508]	; (8005ac0 <HAL_RCC_OscConfig+0x4d4>)
 80058c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ca:	f7fc f96b 	bl	8001ba4 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d2:	f7fc f967 	bl	8001ba4 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b64      	cmp	r3, #100	; 0x64
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e12a      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058e4:	4b76      	ldr	r3, [pc, #472]	; (8005ac0 <HAL_RCC_OscConfig+0x4d4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d106      	bne.n	8005906 <HAL_RCC_OscConfig+0x31a>
 80058f8:	4b70      	ldr	r3, [pc, #448]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fc:	4a6f      	ldr	r2, [pc, #444]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	6713      	str	r3, [r2, #112]	; 0x70
 8005904:	e02d      	b.n	8005962 <HAL_RCC_OscConfig+0x376>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10c      	bne.n	8005928 <HAL_RCC_OscConfig+0x33c>
 800590e:	4b6b      	ldr	r3, [pc, #428]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	4a6a      	ldr	r2, [pc, #424]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005914:	f023 0301 	bic.w	r3, r3, #1
 8005918:	6713      	str	r3, [r2, #112]	; 0x70
 800591a:	4b68      	ldr	r3, [pc, #416]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	4a67      	ldr	r2, [pc, #412]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005920:	f023 0304 	bic.w	r3, r3, #4
 8005924:	6713      	str	r3, [r2, #112]	; 0x70
 8005926:	e01c      	b.n	8005962 <HAL_RCC_OscConfig+0x376>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b05      	cmp	r3, #5
 800592e:	d10c      	bne.n	800594a <HAL_RCC_OscConfig+0x35e>
 8005930:	4b62      	ldr	r3, [pc, #392]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	4a61      	ldr	r2, [pc, #388]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005936:	f043 0304 	orr.w	r3, r3, #4
 800593a:	6713      	str	r3, [r2, #112]	; 0x70
 800593c:	4b5f      	ldr	r3, [pc, #380]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	4a5e      	ldr	r2, [pc, #376]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	; 0x70
 8005948:	e00b      	b.n	8005962 <HAL_RCC_OscConfig+0x376>
 800594a:	4b5c      	ldr	r3, [pc, #368]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	4a5b      	ldr	r2, [pc, #364]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	6713      	str	r3, [r2, #112]	; 0x70
 8005956:	4b59      	ldr	r3, [pc, #356]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	4a58      	ldr	r2, [pc, #352]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 800595c:	f023 0304 	bic.w	r3, r3, #4
 8005960:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d015      	beq.n	8005996 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596a:	f7fc f91b 	bl	8001ba4 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005970:	e00a      	b.n	8005988 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005972:	f7fc f917 	bl	8001ba4 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e0d8      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005988:	4b4c      	ldr	r3, [pc, #304]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 800598a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0ee      	beq.n	8005972 <HAL_RCC_OscConfig+0x386>
 8005994:	e014      	b.n	80059c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005996:	f7fc f905 	bl	8001ba4 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599c:	e00a      	b.n	80059b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599e:	f7fc f901 	bl	8001ba4 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e0c2      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b4:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1ee      	bne.n	800599e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d105      	bne.n	80059d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c6:	4b3d      	ldr	r3, [pc, #244]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	4a3c      	ldr	r2, [pc, #240]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 80059cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80ae 	beq.w	8005b38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059dc:	4b37      	ldr	r3, [pc, #220]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 030c 	and.w	r3, r3, #12
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d06d      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d14b      	bne.n	8005a88 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f0:	4b32      	ldr	r3, [pc, #200]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a31      	ldr	r2, [pc, #196]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 80059f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fc f8d2 	bl	8001ba4 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a04:	f7fc f8ce 	bl	8001ba4 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e091      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a16:	4b29      	ldr	r3, [pc, #164]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f0      	bne.n	8005a04 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69da      	ldr	r2, [r3, #28]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	019b      	lsls	r3, r3, #6
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	041b      	lsls	r3, r3, #16
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	061b      	lsls	r3, r3, #24
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	071b      	lsls	r3, r3, #28
 8005a4e:	491b      	ldr	r1, [pc, #108]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a54:	4b19      	ldr	r3, [pc, #100]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a18      	ldr	r2, [pc, #96]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fc f8a0 	bl	8001ba4 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a68:	f7fc f89c 	bl	8001ba4 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e05f      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <HAL_RCC_OscConfig+0x47c>
 8005a86:	e057      	b.n	8005b38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a94:	f7fc f886 	bl	8001ba4 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9c:	f7fc f882 	bl	8001ba4 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e045      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aae:	4b03      	ldr	r3, [pc, #12]	; (8005abc <HAL_RCC_OscConfig+0x4d0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0x4b0>
 8005aba:	e03d      	b.n	8005b38 <HAL_RCC_OscConfig+0x54c>
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ac4:	4b1f      	ldr	r3, [pc, #124]	; (8005b44 <HAL_RCC_OscConfig+0x558>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d030      	beq.n	8005b34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d129      	bne.n	8005b34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d122      	bne.n	8005b34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005af4:	4013      	ands	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005afa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d119      	bne.n	8005b34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d10f      	bne.n	8005b34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d001      	beq.n	8005b38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800

08005b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0d0      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b60:	4b6a      	ldr	r3, [pc, #424]	; (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d910      	bls.n	8005b90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6e:	4b67      	ldr	r3, [pc, #412]	; (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 020f 	bic.w	r2, r3, #15
 8005b76:	4965      	ldr	r1, [pc, #404]	; (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b63      	ldr	r3, [pc, #396]	; (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0b8      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ba8:	4b59      	ldr	r3, [pc, #356]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4a58      	ldr	r2, [pc, #352]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bc0:	4b53      	ldr	r3, [pc, #332]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	4a52      	ldr	r2, [pc, #328]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bcc:	4b50      	ldr	r3, [pc, #320]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	494d      	ldr	r1, [pc, #308]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d040      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d107      	bne.n	8005c02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf2:	4b47      	ldr	r3, [pc, #284]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d115      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e07f      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d107      	bne.n	8005c1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c0a:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e073      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e06b      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c2a:	4b39      	ldr	r3, [pc, #228]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f023 0203 	bic.w	r2, r3, #3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4936      	ldr	r1, [pc, #216]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c3c:	f7fb ffb2 	bl	8001ba4 <HAL_GetTick>
 8005c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c42:	e00a      	b.n	8005c5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c44:	f7fb ffae 	bl	8001ba4 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e053      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c5a:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 020c 	and.w	r2, r3, #12
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d1eb      	bne.n	8005c44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c6c:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d210      	bcs.n	8005c9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7a:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f023 020f 	bic.w	r2, r3, #15
 8005c82:	4922      	ldr	r1, [pc, #136]	; (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8a:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e032      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4916      	ldr	r1, [pc, #88]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d009      	beq.n	8005cda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	490e      	ldr	r1, [pc, #56]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cda:	f000 f821 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	091b      	lsrs	r3, r3, #4
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	490a      	ldr	r1, [pc, #40]	; (8005d14 <HAL_RCC_ClockConfig+0x1cc>)
 8005cec:	5ccb      	ldrb	r3, [r1, r3]
 8005cee:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf2:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <HAL_RCC_ClockConfig+0x1d0>)
 8005cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cf6:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <HAL_RCC_ClockConfig+0x1d4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fb ff0e 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40023c00 	.word	0x40023c00
 8005d10:	40023800 	.word	0x40023800
 8005d14:	08012150 	.word	0x08012150
 8005d18:	20000000 	.word	0x20000000
 8005d1c:	20000004 	.word	0x20000004

08005d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d24:	b094      	sub	sp, #80	; 0x50
 8005d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d30:	2300      	movs	r3, #0
 8005d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d38:	4b79      	ldr	r3, [pc, #484]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 030c 	and.w	r3, r3, #12
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d00d      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0x40>
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	f200 80e1 	bhi.w	8005f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x34>
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d003      	beq.n	8005d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d52:	e0db      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d54:	4b73      	ldr	r3, [pc, #460]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d58:	e0db      	b.n	8005f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d5a:	4b73      	ldr	r3, [pc, #460]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d5e:	e0d8      	b.n	8005f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d60:	4b6f      	ldr	r3, [pc, #444]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d6a:	4b6d      	ldr	r3, [pc, #436]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d063      	beq.n	8005e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d76:	4b6a      	ldr	r3, [pc, #424]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	099b      	lsrs	r3, r3, #6
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d88:	633b      	str	r3, [r7, #48]	; 0x30
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d92:	4622      	mov	r2, r4
 8005d94:	462b      	mov	r3, r5
 8005d96:	f04f 0000 	mov.w	r0, #0
 8005d9a:	f04f 0100 	mov.w	r1, #0
 8005d9e:	0159      	lsls	r1, r3, #5
 8005da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da4:	0150      	lsls	r0, r2, #5
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4621      	mov	r1, r4
 8005dac:	1a51      	subs	r1, r2, r1
 8005dae:	6139      	str	r1, [r7, #16]
 8005db0:	4629      	mov	r1, r5
 8005db2:	eb63 0301 	sbc.w	r3, r3, r1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	018b      	lsls	r3, r1, #6
 8005dc8:	4651      	mov	r1, sl
 8005dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dce:	4651      	mov	r1, sl
 8005dd0:	018a      	lsls	r2, r1, #6
 8005dd2:	4651      	mov	r1, sl
 8005dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8005dd8:	4659      	mov	r1, fp
 8005dda:	eb63 0901 	sbc.w	r9, r3, r1
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005df2:	4690      	mov	r8, r2
 8005df4:	4699      	mov	r9, r3
 8005df6:	4623      	mov	r3, r4
 8005df8:	eb18 0303 	adds.w	r3, r8, r3
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	462b      	mov	r3, r5
 8005e00:	eb49 0303 	adc.w	r3, r9, r3
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e12:	4629      	mov	r1, r5
 8005e14:	024b      	lsls	r3, r1, #9
 8005e16:	4621      	mov	r1, r4
 8005e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	024a      	lsls	r2, r1, #9
 8005e20:	4610      	mov	r0, r2
 8005e22:	4619      	mov	r1, r3
 8005e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e26:	2200      	movs	r2, #0
 8005e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e30:	f7fa fa56 	bl	80002e0 <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4613      	mov	r3, r2
 8005e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e3c:	e058      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e3e:	4b38      	ldr	r3, [pc, #224]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	099b      	lsrs	r3, r3, #6
 8005e44:	2200      	movs	r2, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	4611      	mov	r1, r2
 8005e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e4e:	623b      	str	r3, [r7, #32]
 8005e50:	2300      	movs	r3, #0
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
 8005e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e58:	4642      	mov	r2, r8
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	f04f 0000 	mov.w	r0, #0
 8005e60:	f04f 0100 	mov.w	r1, #0
 8005e64:	0159      	lsls	r1, r3, #5
 8005e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e6a:	0150      	lsls	r0, r2, #5
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4641      	mov	r1, r8
 8005e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e76:	4649      	mov	r1, r9
 8005e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e90:	ebb2 040a 	subs.w	r4, r2, sl
 8005e94:	eb63 050b 	sbc.w	r5, r3, fp
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	00eb      	lsls	r3, r5, #3
 8005ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ea6:	00e2      	lsls	r2, r4, #3
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	461d      	mov	r5, r3
 8005eac:	4643      	mov	r3, r8
 8005eae:	18e3      	adds	r3, r4, r3
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	eb45 0303 	adc.w	r3, r5, r3
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	028b      	lsls	r3, r1, #10
 8005eca:	4621      	mov	r1, r4
 8005ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	028a      	lsls	r2, r1, #10
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eda:	2200      	movs	r2, #0
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	61fa      	str	r2, [r7, #28]
 8005ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee4:	f7fa f9fc 	bl	80002e0 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4613      	mov	r3, r2
 8005eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	3301      	adds	r3, #1
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f0a:	e002      	b.n	8005f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f0c:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3750      	adds	r7, #80	; 0x50
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f1e:	bf00      	nop
 8005f20:	40023800 	.word	0x40023800
 8005f24:	00f42400 	.word	0x00f42400
 8005f28:	007a1200 	.word	0x007a1200

08005f2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f30:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f32:	681b      	ldr	r3, [r3, #0]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000000 	.word	0x20000000

08005f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f48:	f7ff fff0 	bl	8005f2c <HAL_RCC_GetHCLKFreq>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	0a9b      	lsrs	r3, r3, #10
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4903      	ldr	r1, [pc, #12]	; (8005f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f5a:	5ccb      	ldrb	r3, [r1, r3]
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40023800 	.word	0x40023800
 8005f68:	08012160 	.word	0x08012160

08005f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f70:	f7ff ffdc 	bl	8005f2c <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0b5b      	lsrs	r3, r3, #13
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4903      	ldr	r1, [pc, #12]	; (8005f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	08012160 	.word	0x08012160

08005f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d012      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fbc:	4b69      	ldr	r3, [pc, #420]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4a68      	ldr	r2, [pc, #416]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005fc6:	6093      	str	r3, [r2, #8]
 8005fc8:	4b66      	ldr	r3, [pc, #408]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd0:	4964      	ldr	r1, [pc, #400]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d017      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fee:	4b5d      	ldr	r3, [pc, #372]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffc:	4959      	ldr	r1, [pc, #356]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600c:	d101      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800600e:	2301      	movs	r3, #1
 8006010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800601a:	2301      	movs	r3, #1
 800601c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d017      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800602a:	4b4e      	ldr	r3, [pc, #312]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	494a      	ldr	r1, [pc, #296]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006048:	d101      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800604a:	2301      	movs	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006056:	2301      	movs	r3, #1
 8006058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006066:	2301      	movs	r3, #1
 8006068:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 808b 	beq.w	800618e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006078:	4b3a      	ldr	r3, [pc, #232]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	4a39      	ldr	r2, [pc, #228]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800607e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006082:	6413      	str	r3, [r2, #64]	; 0x40
 8006084:	4b37      	ldr	r3, [pc, #220]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608c:	60bb      	str	r3, [r7, #8]
 800608e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006090:	4b35      	ldr	r3, [pc, #212]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a34      	ldr	r2, [pc, #208]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609c:	f7fb fd82 	bl	8001ba4 <HAL_GetTick>
 80060a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060a4:	f7fb fd7e 	bl	8001ba4 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d901      	bls.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e38f      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80060b6:	4b2c      	ldr	r3, [pc, #176]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060c2:	4b28      	ldr	r3, [pc, #160]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d035      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d02e      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060e0:	4b20      	ldr	r3, [pc, #128]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060ea:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006100:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006102:	4a18      	ldr	r2, [pc, #96]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006108:	4b16      	ldr	r3, [pc, #88]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b01      	cmp	r3, #1
 8006112:	d114      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006114:	f7fb fd46 	bl	8001ba4 <HAL_GetTick>
 8006118:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611a:	e00a      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fb fd42 	bl	8001ba4 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	; 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e351      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006132:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0ee      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614a:	d111      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006158:	4b04      	ldr	r3, [pc, #16]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800615a:	400b      	ands	r3, r1
 800615c:	4901      	ldr	r1, [pc, #4]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
 8006162:	e00b      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006164:	40023800 	.word	0x40023800
 8006168:	40007000 	.word	0x40007000
 800616c:	0ffffcff 	.word	0x0ffffcff
 8006170:	4bac      	ldr	r3, [pc, #688]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	4aab      	ldr	r2, [pc, #684]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006176:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800617a:	6093      	str	r3, [r2, #8]
 800617c:	4ba9      	ldr	r3, [pc, #676]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800617e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006188:	49a6      	ldr	r1, [pc, #664]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800618a:	4313      	orrs	r3, r2
 800618c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b00      	cmp	r3, #0
 8006198:	d010      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800619a:	4ba2      	ldr	r3, [pc, #648]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800619c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a0:	4aa0      	ldr	r2, [pc, #640]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80061aa:	4b9e      	ldr	r3, [pc, #632]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	499b      	ldr	r1, [pc, #620]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061c8:	4b96      	ldr	r3, [pc, #600]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d6:	4993      	ldr	r1, [pc, #588]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061ea:	4b8e      	ldr	r3, [pc, #568]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f8:	498a      	ldr	r1, [pc, #552]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800620c:	4b85      	ldr	r3, [pc, #532]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800621a:	4982      	ldr	r1, [pc, #520]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800622e:	4b7d      	ldr	r3, [pc, #500]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006234:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623c:	4979      	ldr	r1, [pc, #484]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800623e:	4313      	orrs	r3, r2
 8006240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006250:	4b74      	ldr	r3, [pc, #464]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006256:	f023 0203 	bic.w	r2, r3, #3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	4971      	ldr	r1, [pc, #452]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006260:	4313      	orrs	r3, r2
 8006262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006272:	4b6c      	ldr	r3, [pc, #432]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006278:	f023 020c 	bic.w	r2, r3, #12
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006280:	4968      	ldr	r1, [pc, #416]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006294:	4b63      	ldr	r3, [pc, #396]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a2:	4960      	ldr	r1, [pc, #384]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062b6:	4b5b      	ldr	r3, [pc, #364]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c4:	4957      	ldr	r1, [pc, #348]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062d8:	4b52      	ldr	r3, [pc, #328]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e6:	494f      	ldr	r1, [pc, #316]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80062fa:	4b4a      	ldr	r3, [pc, #296]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006300:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006308:	4946      	ldr	r1, [pc, #280]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800631c:	4b41      	ldr	r3, [pc, #260]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006322:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632a:	493e      	ldr	r1, [pc, #248]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800633e:	4b39      	ldr	r3, [pc, #228]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006344:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	4935      	ldr	r1, [pc, #212]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006360:	4b30      	ldr	r3, [pc, #192]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800636e:	492d      	ldr	r1, [pc, #180]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d011      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006382:	4b28      	ldr	r3, [pc, #160]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006388:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006390:	4924      	ldr	r1, [pc, #144]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800639c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a0:	d101      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80063a2:	2301      	movs	r3, #1
 80063a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80063b2:	2301      	movs	r3, #1
 80063b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063c2:	4b18      	ldr	r3, [pc, #96]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d0:	4914      	ldr	r1, [pc, #80]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f4:	490b      	ldr	r1, [pc, #44]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00f      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006408:	4b06      	ldr	r3, [pc, #24]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006418:	4902      	ldr	r1, [pc, #8]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006420:	e002      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006422:	bf00      	nop
 8006424:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006434:	4b8a      	ldr	r3, [pc, #552]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800643a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006444:	4986      	ldr	r1, [pc, #536]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006458:	4b81      	ldr	r3, [pc, #516]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800645a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800645e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006468:	497d      	ldr	r1, [pc, #500]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d006      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 80d6 	beq.w	8006630 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006484:	4b76      	ldr	r3, [pc, #472]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a75      	ldr	r2, [pc, #468]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800648a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800648e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006490:	f7fb fb88 	bl	8001ba4 <HAL_GetTick>
 8006494:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006498:	f7fb fb84 	bl	8001ba4 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b64      	cmp	r3, #100	; 0x64
 80064a4:	d901      	bls.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e195      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064aa:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d021      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d11d      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064ca:	4b65      	ldr	r3, [pc, #404]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d0:	0c1b      	lsrs	r3, r3, #16
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064d8:	4b61      	ldr	r3, [pc, #388]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064de:	0e1b      	lsrs	r3, r3, #24
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	019a      	lsls	r2, r3, #6
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	431a      	orrs	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	061b      	lsls	r3, r3, #24
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	071b      	lsls	r3, r3, #28
 80064fe:	4958      	ldr	r1, [pc, #352]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800651a:	d00a      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006524:	2b00      	cmp	r3, #0
 8006526:	d02e      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006530:	d129      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006532:	4b4b      	ldr	r3, [pc, #300]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006538:	0c1b      	lsrs	r3, r3, #16
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006540:	4b47      	ldr	r3, [pc, #284]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006546:	0f1b      	lsrs	r3, r3, #28
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	019a      	lsls	r2, r3, #6
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	041b      	lsls	r3, r3, #16
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	061b      	lsls	r3, r3, #24
 8006560:	431a      	orrs	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	071b      	lsls	r3, r3, #28
 8006566:	493e      	ldr	r1, [pc, #248]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800656e:	4b3c      	ldr	r3, [pc, #240]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006574:	f023 021f 	bic.w	r2, r3, #31
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	3b01      	subs	r3, #1
 800657e:	4938      	ldr	r1, [pc, #224]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01d      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006592:	4b33      	ldr	r3, [pc, #204]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006598:	0e1b      	lsrs	r3, r3, #24
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065a0:	4b2f      	ldr	r3, [pc, #188]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a6:	0f1b      	lsrs	r3, r3, #28
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	019a      	lsls	r2, r3, #6
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	431a      	orrs	r2, r3
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	061b      	lsls	r3, r3, #24
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	071b      	lsls	r3, r3, #28
 80065c6:	4926      	ldr	r1, [pc, #152]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d011      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	019a      	lsls	r2, r3, #6
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	071b      	lsls	r3, r3, #28
 80065f6:	491a      	ldr	r1, [pc, #104]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065fe:	4b18      	ldr	r3, [pc, #96]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a17      	ldr	r2, [pc, #92]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006604:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800660a:	f7fb facb 	bl	8001ba4 <HAL_GetTick>
 800660e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006610:	e008      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006612:	f7fb fac7 	bl	8001ba4 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b64      	cmp	r3, #100	; 0x64
 800661e:	d901      	bls.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e0d8      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0f0      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2b01      	cmp	r3, #1
 8006634:	f040 80ce 	bne.w	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006638:	4b09      	ldr	r3, [pc, #36]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a08      	ldr	r2, [pc, #32]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800663e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006644:	f7fb faae 	bl	8001ba4 <HAL_GetTick>
 8006648:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800664a:	e00b      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800664c:	f7fb faaa 	bl	8001ba4 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b64      	cmp	r3, #100	; 0x64
 8006658:	d904      	bls.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e0bb      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800665e:	bf00      	nop
 8006660:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006664:	4b5e      	ldr	r3, [pc, #376]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800666c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006670:	d0ec      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800668e:	2b00      	cmp	r3, #0
 8006690:	d02e      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d12a      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800669a:	4b51      	ldr	r3, [pc, #324]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800669c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a0:	0c1b      	lsrs	r3, r3, #16
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066a8:	4b4d      	ldr	r3, [pc, #308]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ae:	0f1b      	lsrs	r3, r3, #28
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	019a      	lsls	r2, r3, #6
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	061b      	lsls	r3, r3, #24
 80066c8:	431a      	orrs	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	071b      	lsls	r3, r3, #28
 80066ce:	4944      	ldr	r1, [pc, #272]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066d6:	4b42      	ldr	r3, [pc, #264]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e4:	3b01      	subs	r3, #1
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	493d      	ldr	r1, [pc, #244]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d022      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006704:	d11d      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006706:	4b36      	ldr	r3, [pc, #216]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670c:	0e1b      	lsrs	r3, r3, #24
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006714:	4b32      	ldr	r3, [pc, #200]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671a:	0f1b      	lsrs	r3, r3, #28
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	019a      	lsls	r2, r3, #6
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	431a      	orrs	r2, r3
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	061b      	lsls	r3, r3, #24
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	071b      	lsls	r3, r3, #28
 800673a:	4929      	ldr	r1, [pc, #164]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d028      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800674e:	4b24      	ldr	r3, [pc, #144]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006754:	0e1b      	lsrs	r3, r3, #24
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800675c:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	0c1b      	lsrs	r3, r3, #16
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	019a      	lsls	r2, r3, #6
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	041b      	lsls	r3, r3, #16
 8006774:	431a      	orrs	r2, r3
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	061b      	lsls	r3, r3, #24
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	071b      	lsls	r3, r3, #28
 8006782:	4917      	ldr	r1, [pc, #92]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800678a:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800678c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	4911      	ldr	r1, [pc, #68]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a0e      	ldr	r2, [pc, #56]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ac:	f7fb f9fa 	bl	8001ba4 <HAL_GetTick>
 80067b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067b4:	f7fb f9f6 	bl	8001ba4 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b64      	cmp	r3, #100	; 0x64
 80067c0:	d901      	bls.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e007      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d2:	d1ef      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40023800 	.word	0x40023800

080067e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e022      	b.n	800683c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d105      	bne.n	800680e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fa fdc1 	bl	8001390 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2203      	movs	r2, #3
 8006812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f814 	bl	8006844 <HAL_SD_InitCard>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e00a      	b.n	800683c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006844:	b5b0      	push	{r4, r5, r7, lr}
 8006846:	b08e      	sub	sp, #56	; 0x38
 8006848:	af04      	add	r7, sp, #16
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800684c:	2300      	movs	r3, #0
 800684e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006860:	2376      	movs	r3, #118	; 0x76
 8006862:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681d      	ldr	r5, [r3, #0]
 8006868:	466c      	mov	r4, sp
 800686a:	f107 0314 	add.w	r3, r7, #20
 800686e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006876:	f107 0308 	add.w	r3, r7, #8
 800687a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800687c:	4628      	mov	r0, r5
 800687e:	f001 fdc5 	bl	800840c <SDMMC_Init>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e059      	b.n	8006948 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 fdf9 	bl	80084a0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068bc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80068be:	2002      	movs	r0, #2
 80068c0:	f7fb f97c 	bl	8001bbc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 ff59 	bl	800777c <SD_PowerON>
 80068ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	431a      	orrs	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e02e      	b.n	8006948 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fe78 	bl	80075e0 <SD_InitCard>
 80068f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00b      	beq.n	8006910 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e01b      	b.n	8006948 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006918:	4618      	mov	r0, r3
 800691a:	f001 fe53 	bl	80085c4 <SDMMC_CmdBlockLength>
 800691e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00f      	beq.n	8006946 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a09      	ldr	r2, [pc, #36]	; (8006950 <HAL_SD_InitCard+0x10c>)
 800692c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3728      	adds	r7, #40	; 0x28
 800694c:	46bd      	mov	sp, r7
 800694e:	bdb0      	pop	{r4, r5, r7, pc}
 8006950:	004005ff 	.word	0x004005ff

08006954 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08c      	sub	sp, #48	; 0x30
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d107      	bne.n	800697c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0c3      	b.n	8006b04 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	f040 80bc 	bne.w	8006b02 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699a:	429a      	cmp	r2, r3
 800699c:	d907      	bls.n	80069ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e0aa      	b.n	8006b04 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2203      	movs	r2, #3
 80069b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80069cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	4a4e      	ldr	r2, [pc, #312]	; (8006b0c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80069d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	4a4d      	ldr	r2, [pc, #308]	; (8006b10 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80069dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	2200      	movs	r2, #0
 80069e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	2200      	movs	r2, #0
 80069ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3380      	adds	r3, #128	; 0x80
 8006a14:	4619      	mov	r1, r3
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	025b      	lsls	r3, r3, #9
 8006a1c:	089b      	lsrs	r3, r3, #2
 8006a1e:	f7fc f8b5 	bl	8002b8c <HAL_DMA_Start_IT>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d017      	beq.n	8006a58 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006a36:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a35      	ldr	r2, [pc, #212]	; (8006b14 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006a3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e055      	b.n	8006b04 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0208 	orr.w	r2, r2, #8
 8006a66:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d002      	beq.n	8006a76 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	025b      	lsls	r3, r3, #9
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a7a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	025b      	lsls	r3, r3, #9
 8006a80:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006a82:	2390      	movs	r3, #144	; 0x90
 8006a84:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a86:	2302      	movs	r3, #2
 8006a88:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f107 0210 	add.w	r2, r7, #16
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fd65 	bl	800856c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d90a      	bls.n	8006abe <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2282      	movs	r2, #130	; 0x82
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 fdc9 	bl	800864c <SDMMC_CmdReadMultiBlock>
 8006aba:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006abc:	e009      	b.n	8006ad2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2281      	movs	r2, #129	; 0x81
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 fd9c 	bl	8008608 <SDMMC_CmdReadSingleBlock>
 8006ad0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d012      	beq.n	8006afe <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a0d      	ldr	r2, [pc, #52]	; (8006b14 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e002      	b.n	8006b04 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e000      	b.n	8006b04 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006b02:	2302      	movs	r3, #2
  }
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3730      	adds	r7, #48	; 0x30
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	080073ef 	.word	0x080073ef
 8006b10:	08007461 	.word	0x08007461
 8006b14:	004005ff 	.word	0x004005ff

08006b18 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08c      	sub	sp, #48	; 0x30
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d107      	bne.n	8006b40 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0c6      	b.n	8006cce <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	f040 80bf 	bne.w	8006ccc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	441a      	add	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d907      	bls.n	8006b72 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e0ad      	b.n	8006cce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2203      	movs	r2, #3
 8006b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 021a 	orr.w	r2, r2, #26
 8006b90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	4a50      	ldr	r2, [pc, #320]	; (8006cd8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	4a4f      	ldr	r2, [pc, #316]	; (8006cdc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006ba0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d002      	beq.n	8006bb8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	025b      	lsls	r3, r3, #9
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d90a      	bls.n	8006bd4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	22a0      	movs	r2, #160	; 0xa0
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f001 fd82 	bl	80086d4 <SDMMC_CmdWriteMultiBlock>
 8006bd0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006bd2:	e009      	b.n	8006be8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2290      	movs	r2, #144	; 0x90
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 fd55 	bl	8008690 <SDMMC_CmdWriteSingleBlock>
 8006be6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d012      	beq.n	8006c14 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3b      	ldr	r2, [pc, #236]	; (8006ce0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e05c      	b.n	8006cce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0208 	orr.w	r2, r2, #8
 8006c22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c28:	2240      	movs	r2, #64	; 0x40
 8006c2a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c4c:	68b9      	ldr	r1, [r7, #8]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3380      	adds	r3, #128	; 0x80
 8006c54:	461a      	mov	r2, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	025b      	lsls	r3, r3, #9
 8006c5a:	089b      	lsrs	r3, r3, #2
 8006c5c:	f7fb ff96 	bl	8002b8c <HAL_DMA_Start_IT>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01a      	beq.n	8006c9c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 021a 	bic.w	r2, r2, #26
 8006c74:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a19      	ldr	r2, [pc, #100]	; (8006ce0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e018      	b.n	8006cce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ca0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	025b      	lsls	r3, r3, #9
 8006ca6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006ca8:	2390      	movs	r3, #144	; 0x90
 8006caa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f107 0210 	add.w	r2, r7, #16
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fc52 	bl	800856c <SDMMC_ConfigData>

      return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e000      	b.n	8006cce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
  }
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3730      	adds	r7, #48	; 0x30
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	080073c5 	.word	0x080073c5
 8006cdc:	08007461 	.word	0x08007461
 8006ce0:	004005ff 	.word	0x004005ff

08006ce4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_SD_IRQHandler+0x2e>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f003 0308 	and.w	r3, r3, #8
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fdec 	bl	80078e8 <SD_Read_IT>
 8006d10:	e15a      	b.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 808d 	beq.w	8006e3c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b9a      	ldr	r3, [pc, #616]	; (8006fa0 <HAL_SD_IRQHandler+0x2bc>)
 8006d38:	400b      	ands	r3, r1
 8006d3a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0201 	bic.w	r2, r2, #1
 8006d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d039      	beq.n	8006dca <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d104      	bne.n	8006d6a <HAL_SD_IRQHandler+0x86>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d011      	beq.n	8006d8e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 fcd2 	bl	8008718 <SDMMC_CmdStopTransfer>
 8006d74:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d008      	beq.n	8006d8e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f921 	bl	8006fd0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d96:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <HAL_SD_IRQHandler+0xd6>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f003 fd3c 	bl	800a838 <HAL_SD_RxCpltCallback>
 8006dc0:	e102      	b.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f003 fd2e 	bl	800a824 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006dc8:	e0fe      	b.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 80f9 	beq.w	8006fc8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d011      	beq.n	8006e04 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 fc97 	bl	8008718 <SDMMC_CmdStopTransfer>
 8006dea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f8e6 	bl	8006fd0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 80dc 	bne.w	8006fc8 <HAL_SD_IRQHandler+0x2e4>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80d6 	bne.w	8006fc8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0208 	bic.w	r2, r2, #8
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f003 fcf5 	bl	800a824 <HAL_SD_TxCpltCallback>
}
 8006e3a:	e0c5      	b.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_SD_IRQHandler+0x178>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fd98 	bl	800798a <SD_Write_IT>
 8006e5a:	e0b5      	b.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e62:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 80ae 	beq.w	8006fc8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	f043 0202 	orr.w	r2, r3, #2
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	f043 0208 	orr.w	r2, r3, #8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	f043 0220 	orr.w	r2, r3, #32
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	f043 0210 	orr.w	r2, r3, #16
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f240 523a 	movw	r2, #1338	; 0x53a
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006eec:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 fc10 	bl	8008718 <SDMMC_CmdStopTransfer>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f857 	bl	8006fd0 <HAL_SD_ErrorCallback>
}
 8006f22:	e051      	b.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d04c      	beq.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d104      	bne.n	8006f42 <HAL_SD_IRQHandler+0x25e>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d011      	beq.n	8006f66 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	4a17      	ldr	r2, [pc, #92]	; (8006fa4 <HAL_SD_IRQHandler+0x2c0>)
 8006f48:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fb fe7c 	bl	8002c4c <HAL_DMA_Abort_IT>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d036      	beq.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fad0 	bl	8007504 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f64:	e030      	b.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <HAL_SD_IRQHandler+0x296>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d018      	beq.n	8006fac <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <HAL_SD_IRQHandler+0x2c4>)
 8006f80:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fb fe60 	bl	8002c4c <HAL_DMA_Abort_IT>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01a      	beq.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 faeb 	bl	8007572 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f9c:	e014      	b.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
 8006f9e:	bf00      	nop
 8006fa0:	ffff3ec5 	.word	0xffff3ec5
 8006fa4:	08007505 	.word	0x08007505
 8006fa8:	08007573 	.word	0x08007573
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f003 fc25 	bl	800a810 <HAL_SD_AbortCallback>
}
 8006fc6:	e7ff      	b.n	8006fc8 <HAL_SD_IRQHandler+0x2e4>
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff2:	0f9b      	lsrs	r3, r3, #30
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ffe:	0e9b      	lsrs	r3, r3, #26
 8007000:	b2db      	uxtb	r3, r3
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	b2da      	uxtb	r2, r3
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007010:	0e1b      	lsrs	r3, r3, #24
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	b2da      	uxtb	r2, r3
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	b2da      	uxtb	r2, r3
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	b2da      	uxtb	r2, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800703a:	b2da      	uxtb	r2, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007044:	0d1b      	lsrs	r3, r3, #20
 8007046:	b29a      	uxth	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	b2da      	uxtb	r2, r3
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007062:	0bdb      	lsrs	r3, r3, #15
 8007064:	b2db      	uxtb	r3, r3
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	b2da      	uxtb	r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007074:	0b9b      	lsrs	r3, r3, #14
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007086:	0b5b      	lsrs	r3, r3, #13
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007098:	0b1b      	lsrs	r3, r3, #12
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2200      	movs	r2, #0
 80070aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d163      	bne.n	800717c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b8:	009a      	lsls	r2, r3, #2
 80070ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070be:	4013      	ands	r3, r2
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80070c4:	0f92      	lsrs	r2, r2, #30
 80070c6:	431a      	orrs	r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d0:	0edb      	lsrs	r3, r3, #27
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e2:	0e1b      	lsrs	r3, r3, #24
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f4:	0d5b      	lsrs	r3, r3, #21
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007106:	0c9b      	lsrs	r3, r3, #18
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	b2da      	uxtb	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007118:	0bdb      	lsrs	r3, r3, #15
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	b2da      	uxtb	r2, r3
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	7e1b      	ldrb	r3, [r3, #24]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	3302      	adds	r3, #2
 800713c:	2201      	movs	r2, #1
 800713e:	fa02 f303 	lsl.w	r3, r2, r3
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007146:	fb03 f202 	mul.w	r2, r3, r2
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	7a1b      	ldrb	r3, [r3, #8]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	2201      	movs	r2, #1
 800715a:	409a      	lsls	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007168:	0a52      	lsrs	r2, r2, #9
 800716a:	fb03 f202 	mul.w	r2, r3, r2
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007178:	661a      	str	r2, [r3, #96]	; 0x60
 800717a:	e031      	b.n	80071e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007180:	2b01      	cmp	r3, #1
 8007182:	d11d      	bne.n	80071c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007192:	0c1b      	lsrs	r3, r3, #16
 8007194:	431a      	orrs	r2, r3
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	3301      	adds	r3, #1
 80071a0:	029a      	lsls	r2, r3, #10
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	661a      	str	r2, [r3, #96]	; 0x60
 80071be:	e00f      	b.n	80071e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a58      	ldr	r2, [pc, #352]	; (8007328 <HAL_SD_GetCardCSD+0x344>)
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e09d      	b.n	800731c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e4:	0b9b      	lsrs	r3, r3, #14
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f6:	09db      	lsrs	r3, r3, #7
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720e:	b2da      	uxtb	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007218:	0fdb      	lsrs	r3, r3, #31
 800721a:	b2da      	uxtb	r2, r3
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	0f5b      	lsrs	r3, r3, #29
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	b2da      	uxtb	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	0e9b      	lsrs	r3, r3, #26
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	b2da      	uxtb	r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	0d9b      	lsrs	r3, r3, #22
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	b2da      	uxtb	r2, r3
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	0d5b      	lsrs	r3, r3, #21
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	b2da      	uxtb	r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	b2da      	uxtb	r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728a:	0bdb      	lsrs	r3, r3, #15
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	0b9b      	lsrs	r3, r3, #14
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	0b5b      	lsrs	r3, r3, #13
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	0b1b      	lsrs	r3, r3, #12
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	0a9b      	lsrs	r3, r3, #10
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	0a1b      	lsrs	r3, r3, #8
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730a:	b2da      	uxtb	r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	004005ff 	.word	0x004005ff

0800732c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007390:	f107 030c 	add.w	r3, r7, #12
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa7e 	bl	8007898 <SD_SendStatus>
 800739c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	0a5b      	lsrs	r3, r3, #9
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80073ba:	693b      	ldr	r3, [r7, #16]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80073e2:	bf00      	nop
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007400:	2b82      	cmp	r3, #130	; 0x82
 8007402:	d111      	bne.n	8007428 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f001 f985 	bl	8008718 <SDMMC_CmdStopTransfer>
 800740e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d008      	beq.n	8007428 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	431a      	orrs	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff fdd4 	bl	8006fd0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0208 	bic.w	r2, r2, #8
 8007436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007440:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f003 f9f1 	bl	800a838 <HAL_SD_RxCpltCallback>
#endif
}
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fb fd98 	bl	8002fa4 <HAL_DMA_GetError>
 8007474:	4603      	mov	r3, r0
 8007476:	2b02      	cmp	r3, #2
 8007478:	d03e      	beq.n	80074f8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007480:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007488:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d002      	beq.n	8007496 <SD_DMAError+0x36>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d12d      	bne.n	80074f2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a19      	ldr	r2, [pc, #100]	; (8007500 <SD_DMAError+0xa0>)
 800749c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80074ac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80074ba:	6978      	ldr	r0, [r7, #20]
 80074bc:	f7ff ff62 	bl	8007384 <HAL_SD_GetCardState>
 80074c0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d002      	beq.n	80074ce <SD_DMAError+0x6e>
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b05      	cmp	r3, #5
 80074cc:	d10a      	bne.n	80074e4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f001 f920 	bl	8008718 <SDMMC_CmdStopTransfer>
 80074d8:	4602      	mov	r2, r0
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	431a      	orrs	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2200      	movs	r2, #0
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80074f2:	6978      	ldr	r0, [r7, #20]
 80074f4:	f7ff fd6c 	bl	8006fd0 <HAL_SD_ErrorCallback>
#endif
  }
}
 80074f8:	bf00      	nop
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	004005ff 	.word	0x004005ff

08007504 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f240 523a 	movw	r2, #1338	; 0x53a
 800751a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7ff ff31 	bl	8007384 <HAL_SD_GetCardState>
 8007522:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b06      	cmp	r3, #6
 8007536:	d002      	beq.n	800753e <SD_DMATxAbort+0x3a>
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b05      	cmp	r3, #5
 800753c:	d10a      	bne.n	8007554 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f001 f8e8 	bl	8008718 <SDMMC_CmdStopTransfer>
 8007548:	4602      	mov	r2, r0
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	431a      	orrs	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	2b00      	cmp	r3, #0
 800755a:	d103      	bne.n	8007564 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f003 f957 	bl	800a810 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007562:	e002      	b.n	800756a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7ff fd33 	bl	8006fd0 <HAL_SD_ErrorCallback>
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f240 523a 	movw	r2, #1338	; 0x53a
 8007588:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f7ff fefa 	bl	8007384 <HAL_SD_GetCardState>
 8007590:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b06      	cmp	r3, #6
 80075a4:	d002      	beq.n	80075ac <SD_DMARxAbort+0x3a>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b05      	cmp	r3, #5
 80075aa:	d10a      	bne.n	80075c2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 f8b1 	bl	8008718 <SDMMC_CmdStopTransfer>
 80075b6:	4602      	mov	r2, r0
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	431a      	orrs	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d103      	bne.n	80075d2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f003 f920 	bl	800a810 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80075d0:	e002      	b.n	80075d8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7ff fcfc 	bl	8006fd0 <HAL_SD_ErrorCallback>
}
 80075d8:	bf00      	nop
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075e0:	b5b0      	push	{r4, r5, r7, lr}
 80075e2:	b094      	sub	sp, #80	; 0x50
 80075e4:	af04      	add	r7, sp, #16
 80075e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80075e8:	2301      	movs	r3, #1
 80075ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 ff63 	bl	80084bc <SDMMC_GetPowerState>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007600:	e0b8      	b.n	8007774 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	2b03      	cmp	r3, #3
 8007608:	d02f      	beq.n	800766a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4618      	mov	r0, r3
 8007610:	f001 f94a 	bl	80088a8 <SDMMC_CmdSendCID>
 8007614:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <SD_InitCard+0x40>
    {
      return errorstate;
 800761c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761e:	e0a9      	b.n	8007774 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f000 ff8d 	bl	8008546 <SDMMC_GetResponse>
 800762c:	4602      	mov	r2, r0
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2104      	movs	r1, #4
 8007638:	4618      	mov	r0, r3
 800763a:	f000 ff84 	bl	8008546 <SDMMC_GetResponse>
 800763e:	4602      	mov	r2, r0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2108      	movs	r1, #8
 800764a:	4618      	mov	r0, r3
 800764c:	f000 ff7b 	bl	8008546 <SDMMC_GetResponse>
 8007650:	4602      	mov	r2, r0
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	210c      	movs	r1, #12
 800765c:	4618      	mov	r0, r3
 800765e:	f000 ff72 	bl	8008546 <SDMMC_GetResponse>
 8007662:	4602      	mov	r2, r0
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	2b03      	cmp	r3, #3
 8007670:	d00d      	beq.n	800768e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f107 020e 	add.w	r2, r7, #14
 800767a:	4611      	mov	r1, r2
 800767c:	4618      	mov	r0, r3
 800767e:	f001 f950 	bl	8008922 <SDMMC_CmdSetRelAdd>
 8007682:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <SD_InitCard+0xae>
    {
      return errorstate;
 800768a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768c:	e072      	b.n	8007774 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	2b03      	cmp	r3, #3
 8007694:	d036      	beq.n	8007704 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007696:	89fb      	ldrh	r3, [r7, #14]
 8007698:	461a      	mov	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a6:	041b      	lsls	r3, r3, #16
 80076a8:	4619      	mov	r1, r3
 80076aa:	4610      	mov	r0, r2
 80076ac:	f001 f91a 	bl	80088e4 <SDMMC_CmdSendCSD>
 80076b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <SD_InitCard+0xdc>
    {
      return errorstate;
 80076b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ba:	e05b      	b.n	8007774 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2100      	movs	r1, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 ff3f 	bl	8008546 <SDMMC_GetResponse>
 80076c8:	4602      	mov	r2, r0
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2104      	movs	r1, #4
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 ff36 	bl	8008546 <SDMMC_GetResponse>
 80076da:	4602      	mov	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2108      	movs	r1, #8
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 ff2d 	bl	8008546 <SDMMC_GetResponse>
 80076ec:	4602      	mov	r2, r0
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	210c      	movs	r1, #12
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 ff24 	bl	8008546 <SDMMC_GetResponse>
 80076fe:	4602      	mov	r2, r0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2104      	movs	r1, #4
 800770a:	4618      	mov	r0, r3
 800770c:	f000 ff1b 	bl	8008546 <SDMMC_GetResponse>
 8007710:	4603      	mov	r3, r0
 8007712:	0d1a      	lsrs	r2, r3, #20
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007718:	f107 0310 	add.w	r3, r7, #16
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fc60 	bl	8006fe4 <HAL_SD_GetCardCSD>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800772a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800772e:	e021      	b.n	8007774 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007738:	041b      	lsls	r3, r3, #16
 800773a:	2200      	movs	r2, #0
 800773c:	461c      	mov	r4, r3
 800773e:	4615      	mov	r5, r2
 8007740:	4622      	mov	r2, r4
 8007742:	462b      	mov	r3, r5
 8007744:	4608      	mov	r0, r1
 8007746:	f001 f809 	bl	800875c <SDMMC_CmdSelDesel>
 800774a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800774c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <SD_InitCard+0x176>
  {
    return errorstate;
 8007752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007754:	e00e      	b.n	8007774 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681d      	ldr	r5, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	466c      	mov	r4, sp
 800775e:	f103 0210 	add.w	r2, r3, #16
 8007762:	ca07      	ldmia	r2, {r0, r1, r2}
 8007764:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007768:	3304      	adds	r3, #4
 800776a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800776c:	4628      	mov	r0, r5
 800776e:	f000 fe4d 	bl	800840c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3740      	adds	r7, #64	; 0x40
 8007778:	46bd      	mov	sp, r7
 800777a:	bdb0      	pop	{r4, r5, r7, pc}

0800777c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f001 f804 	bl	80087a2 <SDMMC_CmdGoIdleState>
 800779a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	e072      	b.n	800788c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 f817 	bl	80087de <SDMMC_CmdOperCond>
 80077b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00d      	beq.n	80077d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 ffed 	bl	80087a2 <SDMMC_CmdGoIdleState>
 80077c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <SD_PowerON+0x5e>
    {
      return errorstate;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	e05b      	b.n	800788c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d137      	bne.n	8007852 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2100      	movs	r1, #0
 80077e8:	4618      	mov	r0, r3
 80077ea:	f001 f817 	bl	800881c <SDMMC_CmdAppCommand>
 80077ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d02d      	beq.n	8007852 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077fa:	e047      	b.n	800788c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2100      	movs	r1, #0
 8007802:	4618      	mov	r0, r3
 8007804:	f001 f80a 	bl	800881c <SDMMC_CmdAppCommand>
 8007808:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <SD_PowerON+0x98>
    {
      return errorstate;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e03b      	b.n	800788c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	491e      	ldr	r1, [pc, #120]	; (8007894 <SD_PowerON+0x118>)
 800781a:	4618      	mov	r0, r3
 800781c:	f001 f820 	bl	8008860 <SDMMC_CmdAppOperCommand>
 8007820:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007828:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800782c:	e02e      	b.n	800788c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fe86 	bl	8008546 <SDMMC_GetResponse>
 800783a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	0fdb      	lsrs	r3, r3, #31
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <SD_PowerON+0xcc>
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <SD_PowerON+0xce>
 8007848:	2300      	movs	r3, #0
 800784a:	613b      	str	r3, [r7, #16]

    count++;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	3301      	adds	r3, #1
 8007850:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007858:	4293      	cmp	r3, r2
 800785a:	d802      	bhi.n	8007862 <SD_PowerON+0xe6>
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0cc      	beq.n	80077fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007868:	4293      	cmp	r3, r2
 800786a:	d902      	bls.n	8007872 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800786c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007870:	e00c      	b.n	800788c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	645a      	str	r2, [r3, #68]	; 0x44
 8007882:	e002      	b.n	800788a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	c1100000 	.word	0xc1100000

08007898 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d102      	bne.n	80078ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80078a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078ac:	e018      	b.n	80078e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b6:	041b      	lsls	r3, r3, #16
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f001 f852 	bl	8008964 <SDMMC_CmdSendStatus>
 80078c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <SD_SendStatus+0x34>
  {
    return errorstate;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	e009      	b.n	80078e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2100      	movs	r1, #0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fe37 	bl	8008546 <SDMMC_GetResponse>
 80078d8:	4602      	mov	r2, r0
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d03f      	beq.n	8007982 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e033      	b.n	8007970 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f000 fda9 	bl	8008464 <SDMMC_ReadFIFO>
 8007912:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	b2da      	uxtb	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3b01      	subs	r3, #1
 8007926:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	0a1b      	lsrs	r3, r3, #8
 800792c:	b2da      	uxtb	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3301      	adds	r3, #1
 8007936:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3b01      	subs	r3, #1
 800793c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	0c1b      	lsrs	r3, r3, #16
 8007942:	b2da      	uxtb	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3301      	adds	r3, #1
 800794c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	3b01      	subs	r3, #1
 8007952:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	0e1b      	lsrs	r3, r3, #24
 8007958:	b2da      	uxtb	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	3b01      	subs	r3, #1
 8007968:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	3301      	adds	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b07      	cmp	r3, #7
 8007974:	d9c8      	bls.n	8007908 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007982:	bf00      	nop
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b086      	sub	sp, #24
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d043      	beq.n	8007a2c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	e037      	b.n	8007a1a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3301      	adds	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	021a      	lsls	r2, r3, #8
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3301      	adds	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	041a      	lsls	r2, r3, #16
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	061a      	lsls	r2, r3, #24
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3301      	adds	r3, #1
 80079fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f107 0208 	add.w	r2, r7, #8
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fd35 	bl	800847e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	3301      	adds	r3, #1
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b07      	cmp	r3, #7
 8007a1e:	d9c4      	bls.n	80079aa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e040      	b.n	8007ac8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d106      	bne.n	8007a5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7f9 fda6 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2224      	movs	r2, #36	; 0x24
 8007a60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0201 	bic.w	r2, r2, #1
 8007a70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f8b0 	bl	8007bd8 <UART_SetConfig>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d101      	bne.n	8007a82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e022      	b.n	8007ac8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fb08 	bl	80080a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0201 	orr.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fb8f 	bl	80081e4 <UART_CheckIdleState>
 8007ac6:	4603      	mov	r3, r0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08a      	sub	sp, #40	; 0x28
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	4613      	mov	r3, r2
 8007ade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d171      	bne.n	8007bcc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_UART_Transmit+0x24>
 8007aee:	88fb      	ldrh	r3, [r7, #6]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e06a      	b.n	8007bce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2221      	movs	r2, #33	; 0x21
 8007b04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b06:	f7fa f84d 	bl	8001ba4 <HAL_GetTick>
 8007b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	88fa      	ldrh	r2, [r7, #6]
 8007b10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	88fa      	ldrh	r2, [r7, #6]
 8007b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b24:	d108      	bne.n	8007b38 <HAL_UART_Transmit+0x68>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	e003      	b.n	8007b40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b40:	e02c      	b.n	8007b9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2180      	movs	r1, #128	; 0x80
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fb96 	bl	800827e <UART_WaitOnFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e038      	b.n	8007bce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	3302      	adds	r3, #2
 8007b76:	61bb      	str	r3, [r7, #24]
 8007b78:	e007      	b.n	8007b8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	781a      	ldrb	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	3301      	adds	r3, #1
 8007b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1cc      	bne.n	8007b42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2140      	movs	r1, #64	; 0x40
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fb63 	bl	800827e <UART_WaitOnFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e005      	b.n	8007bce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e000      	b.n	8007bce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007bcc:	2302      	movs	r3, #2
  }
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	431a      	orrs	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4ba6      	ldr	r3, [pc, #664]	; (8007e9c <UART_SetConfig+0x2c4>)
 8007c04:	4013      	ands	r3, r2
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	6979      	ldr	r1, [r7, #20]
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a94      	ldr	r2, [pc, #592]	; (8007ea0 <UART_SetConfig+0x2c8>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d120      	bne.n	8007c96 <UART_SetConfig+0xbe>
 8007c54:	4b93      	ldr	r3, [pc, #588]	; (8007ea4 <UART_SetConfig+0x2cc>)
 8007c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d816      	bhi.n	8007c90 <UART_SetConfig+0xb8>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <UART_SetConfig+0x90>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c85 	.word	0x08007c85
 8007c70:	08007c7f 	.word	0x08007c7f
 8007c74:	08007c8b 	.word	0x08007c8b
 8007c78:	2301      	movs	r3, #1
 8007c7a:	77fb      	strb	r3, [r7, #31]
 8007c7c:	e150      	b.n	8007f20 <UART_SetConfig+0x348>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	77fb      	strb	r3, [r7, #31]
 8007c82:	e14d      	b.n	8007f20 <UART_SetConfig+0x348>
 8007c84:	2304      	movs	r3, #4
 8007c86:	77fb      	strb	r3, [r7, #31]
 8007c88:	e14a      	b.n	8007f20 <UART_SetConfig+0x348>
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	77fb      	strb	r3, [r7, #31]
 8007c8e:	e147      	b.n	8007f20 <UART_SetConfig+0x348>
 8007c90:	2310      	movs	r3, #16
 8007c92:	77fb      	strb	r3, [r7, #31]
 8007c94:	e144      	b.n	8007f20 <UART_SetConfig+0x348>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a83      	ldr	r2, [pc, #524]	; (8007ea8 <UART_SetConfig+0x2d0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d132      	bne.n	8007d06 <UART_SetConfig+0x12e>
 8007ca0:	4b80      	ldr	r3, [pc, #512]	; (8007ea4 <UART_SetConfig+0x2cc>)
 8007ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca6:	f003 030c 	and.w	r3, r3, #12
 8007caa:	2b0c      	cmp	r3, #12
 8007cac:	d828      	bhi.n	8007d00 <UART_SetConfig+0x128>
 8007cae:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <UART_SetConfig+0xdc>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007ce9 	.word	0x08007ce9
 8007cb8:	08007d01 	.word	0x08007d01
 8007cbc:	08007d01 	.word	0x08007d01
 8007cc0:	08007d01 	.word	0x08007d01
 8007cc4:	08007cf5 	.word	0x08007cf5
 8007cc8:	08007d01 	.word	0x08007d01
 8007ccc:	08007d01 	.word	0x08007d01
 8007cd0:	08007d01 	.word	0x08007d01
 8007cd4:	08007cef 	.word	0x08007cef
 8007cd8:	08007d01 	.word	0x08007d01
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d01 	.word	0x08007d01
 8007ce4:	08007cfb 	.word	0x08007cfb
 8007ce8:	2300      	movs	r3, #0
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e118      	b.n	8007f20 <UART_SetConfig+0x348>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e115      	b.n	8007f20 <UART_SetConfig+0x348>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e112      	b.n	8007f20 <UART_SetConfig+0x348>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e10f      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d00:	2310      	movs	r3, #16
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e10c      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a68      	ldr	r2, [pc, #416]	; (8007eac <UART_SetConfig+0x2d4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d120      	bne.n	8007d52 <UART_SetConfig+0x17a>
 8007d10:	4b64      	ldr	r3, [pc, #400]	; (8007ea4 <UART_SetConfig+0x2cc>)
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d1a:	2b30      	cmp	r3, #48	; 0x30
 8007d1c:	d013      	beq.n	8007d46 <UART_SetConfig+0x16e>
 8007d1e:	2b30      	cmp	r3, #48	; 0x30
 8007d20:	d814      	bhi.n	8007d4c <UART_SetConfig+0x174>
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d009      	beq.n	8007d3a <UART_SetConfig+0x162>
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d810      	bhi.n	8007d4c <UART_SetConfig+0x174>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <UART_SetConfig+0x15c>
 8007d2e:	2b10      	cmp	r3, #16
 8007d30:	d006      	beq.n	8007d40 <UART_SetConfig+0x168>
 8007d32:	e00b      	b.n	8007d4c <UART_SetConfig+0x174>
 8007d34:	2300      	movs	r3, #0
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e0f2      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	77fb      	strb	r3, [r7, #31]
 8007d3e:	e0ef      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d40:	2304      	movs	r3, #4
 8007d42:	77fb      	strb	r3, [r7, #31]
 8007d44:	e0ec      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d46:	2308      	movs	r3, #8
 8007d48:	77fb      	strb	r3, [r7, #31]
 8007d4a:	e0e9      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	77fb      	strb	r3, [r7, #31]
 8007d50:	e0e6      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a56      	ldr	r2, [pc, #344]	; (8007eb0 <UART_SetConfig+0x2d8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d120      	bne.n	8007d9e <UART_SetConfig+0x1c6>
 8007d5c:	4b51      	ldr	r3, [pc, #324]	; (8007ea4 <UART_SetConfig+0x2cc>)
 8007d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d66:	2bc0      	cmp	r3, #192	; 0xc0
 8007d68:	d013      	beq.n	8007d92 <UART_SetConfig+0x1ba>
 8007d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d6c:	d814      	bhi.n	8007d98 <UART_SetConfig+0x1c0>
 8007d6e:	2b80      	cmp	r3, #128	; 0x80
 8007d70:	d009      	beq.n	8007d86 <UART_SetConfig+0x1ae>
 8007d72:	2b80      	cmp	r3, #128	; 0x80
 8007d74:	d810      	bhi.n	8007d98 <UART_SetConfig+0x1c0>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <UART_SetConfig+0x1a8>
 8007d7a:	2b40      	cmp	r3, #64	; 0x40
 8007d7c:	d006      	beq.n	8007d8c <UART_SetConfig+0x1b4>
 8007d7e:	e00b      	b.n	8007d98 <UART_SetConfig+0x1c0>
 8007d80:	2300      	movs	r3, #0
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e0cc      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d86:	2302      	movs	r3, #2
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	e0c9      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	77fb      	strb	r3, [r7, #31]
 8007d90:	e0c6      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d92:	2308      	movs	r3, #8
 8007d94:	77fb      	strb	r3, [r7, #31]
 8007d96:	e0c3      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	77fb      	strb	r3, [r7, #31]
 8007d9c:	e0c0      	b.n	8007f20 <UART_SetConfig+0x348>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a44      	ldr	r2, [pc, #272]	; (8007eb4 <UART_SetConfig+0x2dc>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d125      	bne.n	8007df4 <UART_SetConfig+0x21c>
 8007da8:	4b3e      	ldr	r3, [pc, #248]	; (8007ea4 <UART_SetConfig+0x2cc>)
 8007daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007db6:	d017      	beq.n	8007de8 <UART_SetConfig+0x210>
 8007db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dbc:	d817      	bhi.n	8007dee <UART_SetConfig+0x216>
 8007dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc2:	d00b      	beq.n	8007ddc <UART_SetConfig+0x204>
 8007dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc8:	d811      	bhi.n	8007dee <UART_SetConfig+0x216>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <UART_SetConfig+0x1fe>
 8007dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd2:	d006      	beq.n	8007de2 <UART_SetConfig+0x20a>
 8007dd4:	e00b      	b.n	8007dee <UART_SetConfig+0x216>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	77fb      	strb	r3, [r7, #31]
 8007dda:	e0a1      	b.n	8007f20 <UART_SetConfig+0x348>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e09e      	b.n	8007f20 <UART_SetConfig+0x348>
 8007de2:	2304      	movs	r3, #4
 8007de4:	77fb      	strb	r3, [r7, #31]
 8007de6:	e09b      	b.n	8007f20 <UART_SetConfig+0x348>
 8007de8:	2308      	movs	r3, #8
 8007dea:	77fb      	strb	r3, [r7, #31]
 8007dec:	e098      	b.n	8007f20 <UART_SetConfig+0x348>
 8007dee:	2310      	movs	r3, #16
 8007df0:	77fb      	strb	r3, [r7, #31]
 8007df2:	e095      	b.n	8007f20 <UART_SetConfig+0x348>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a2f      	ldr	r2, [pc, #188]	; (8007eb8 <UART_SetConfig+0x2e0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d125      	bne.n	8007e4a <UART_SetConfig+0x272>
 8007dfe:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <UART_SetConfig+0x2cc>)
 8007e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e0c:	d017      	beq.n	8007e3e <UART_SetConfig+0x266>
 8007e0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e12:	d817      	bhi.n	8007e44 <UART_SetConfig+0x26c>
 8007e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e18:	d00b      	beq.n	8007e32 <UART_SetConfig+0x25a>
 8007e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1e:	d811      	bhi.n	8007e44 <UART_SetConfig+0x26c>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <UART_SetConfig+0x254>
 8007e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e28:	d006      	beq.n	8007e38 <UART_SetConfig+0x260>
 8007e2a:	e00b      	b.n	8007e44 <UART_SetConfig+0x26c>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	77fb      	strb	r3, [r7, #31]
 8007e30:	e076      	b.n	8007f20 <UART_SetConfig+0x348>
 8007e32:	2302      	movs	r3, #2
 8007e34:	77fb      	strb	r3, [r7, #31]
 8007e36:	e073      	b.n	8007f20 <UART_SetConfig+0x348>
 8007e38:	2304      	movs	r3, #4
 8007e3a:	77fb      	strb	r3, [r7, #31]
 8007e3c:	e070      	b.n	8007f20 <UART_SetConfig+0x348>
 8007e3e:	2308      	movs	r3, #8
 8007e40:	77fb      	strb	r3, [r7, #31]
 8007e42:	e06d      	b.n	8007f20 <UART_SetConfig+0x348>
 8007e44:	2310      	movs	r3, #16
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e06a      	b.n	8007f20 <UART_SetConfig+0x348>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1b      	ldr	r2, [pc, #108]	; (8007ebc <UART_SetConfig+0x2e4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d138      	bne.n	8007ec6 <UART_SetConfig+0x2ee>
 8007e54:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <UART_SetConfig+0x2cc>)
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e62:	d017      	beq.n	8007e94 <UART_SetConfig+0x2bc>
 8007e64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e68:	d82a      	bhi.n	8007ec0 <UART_SetConfig+0x2e8>
 8007e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6e:	d00b      	beq.n	8007e88 <UART_SetConfig+0x2b0>
 8007e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e74:	d824      	bhi.n	8007ec0 <UART_SetConfig+0x2e8>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <UART_SetConfig+0x2aa>
 8007e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7e:	d006      	beq.n	8007e8e <UART_SetConfig+0x2b6>
 8007e80:	e01e      	b.n	8007ec0 <UART_SetConfig+0x2e8>
 8007e82:	2300      	movs	r3, #0
 8007e84:	77fb      	strb	r3, [r7, #31]
 8007e86:	e04b      	b.n	8007f20 <UART_SetConfig+0x348>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	77fb      	strb	r3, [r7, #31]
 8007e8c:	e048      	b.n	8007f20 <UART_SetConfig+0x348>
 8007e8e:	2304      	movs	r3, #4
 8007e90:	77fb      	strb	r3, [r7, #31]
 8007e92:	e045      	b.n	8007f20 <UART_SetConfig+0x348>
 8007e94:	2308      	movs	r3, #8
 8007e96:	77fb      	strb	r3, [r7, #31]
 8007e98:	e042      	b.n	8007f20 <UART_SetConfig+0x348>
 8007e9a:	bf00      	nop
 8007e9c:	efff69f3 	.word	0xefff69f3
 8007ea0:	40011000 	.word	0x40011000
 8007ea4:	40023800 	.word	0x40023800
 8007ea8:	40004400 	.word	0x40004400
 8007eac:	40004800 	.word	0x40004800
 8007eb0:	40004c00 	.word	0x40004c00
 8007eb4:	40005000 	.word	0x40005000
 8007eb8:	40011400 	.word	0x40011400
 8007ebc:	40007800 	.word	0x40007800
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	77fb      	strb	r3, [r7, #31]
 8007ec4:	e02c      	b.n	8007f20 <UART_SetConfig+0x348>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a72      	ldr	r2, [pc, #456]	; (8008094 <UART_SetConfig+0x4bc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d125      	bne.n	8007f1c <UART_SetConfig+0x344>
 8007ed0:	4b71      	ldr	r3, [pc, #452]	; (8008098 <UART_SetConfig+0x4c0>)
 8007ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007eda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ede:	d017      	beq.n	8007f10 <UART_SetConfig+0x338>
 8007ee0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ee4:	d817      	bhi.n	8007f16 <UART_SetConfig+0x33e>
 8007ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eea:	d00b      	beq.n	8007f04 <UART_SetConfig+0x32c>
 8007eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef0:	d811      	bhi.n	8007f16 <UART_SetConfig+0x33e>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <UART_SetConfig+0x326>
 8007ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007efa:	d006      	beq.n	8007f0a <UART_SetConfig+0x332>
 8007efc:	e00b      	b.n	8007f16 <UART_SetConfig+0x33e>
 8007efe:	2300      	movs	r3, #0
 8007f00:	77fb      	strb	r3, [r7, #31]
 8007f02:	e00d      	b.n	8007f20 <UART_SetConfig+0x348>
 8007f04:	2302      	movs	r3, #2
 8007f06:	77fb      	strb	r3, [r7, #31]
 8007f08:	e00a      	b.n	8007f20 <UART_SetConfig+0x348>
 8007f0a:	2304      	movs	r3, #4
 8007f0c:	77fb      	strb	r3, [r7, #31]
 8007f0e:	e007      	b.n	8007f20 <UART_SetConfig+0x348>
 8007f10:	2308      	movs	r3, #8
 8007f12:	77fb      	strb	r3, [r7, #31]
 8007f14:	e004      	b.n	8007f20 <UART_SetConfig+0x348>
 8007f16:	2310      	movs	r3, #16
 8007f18:	77fb      	strb	r3, [r7, #31]
 8007f1a:	e001      	b.n	8007f20 <UART_SetConfig+0x348>
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f28:	d15b      	bne.n	8007fe2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007f2a:	7ffb      	ldrb	r3, [r7, #31]
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d828      	bhi.n	8007f82 <UART_SetConfig+0x3aa>
 8007f30:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <UART_SetConfig+0x360>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f5d 	.word	0x08007f5d
 8007f3c:	08007f65 	.word	0x08007f65
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	08007f83 	.word	0x08007f83
 8007f48:	08007f73 	.word	0x08007f73
 8007f4c:	08007f83 	.word	0x08007f83
 8007f50:	08007f83 	.word	0x08007f83
 8007f54:	08007f83 	.word	0x08007f83
 8007f58:	08007f7b 	.word	0x08007f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f5c:	f7fd fff2 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
 8007f60:	61b8      	str	r0, [r7, #24]
        break;
 8007f62:	e013      	b.n	8007f8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f64:	f7fe f802 	bl	8005f6c <HAL_RCC_GetPCLK2Freq>
 8007f68:	61b8      	str	r0, [r7, #24]
        break;
 8007f6a:	e00f      	b.n	8007f8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f6c:	4b4b      	ldr	r3, [pc, #300]	; (800809c <UART_SetConfig+0x4c4>)
 8007f6e:	61bb      	str	r3, [r7, #24]
        break;
 8007f70:	e00c      	b.n	8007f8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f72:	f7fd fed5 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8007f76:	61b8      	str	r0, [r7, #24]
        break;
 8007f78:	e008      	b.n	8007f8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f7e:	61bb      	str	r3, [r7, #24]
        break;
 8007f80:	e004      	b.n	8007f8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	77bb      	strb	r3, [r7, #30]
        break;
 8007f8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d074      	beq.n	800807c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	005a      	lsls	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	441a      	add	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2b0f      	cmp	r3, #15
 8007fac:	d916      	bls.n	8007fdc <UART_SetConfig+0x404>
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb4:	d212      	bcs.n	8007fdc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f023 030f 	bic.w	r3, r3, #15
 8007fbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	89fa      	ldrh	r2, [r7, #14]
 8007fd8:	60da      	str	r2, [r3, #12]
 8007fda:	e04f      	b.n	800807c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	77bb      	strb	r3, [r7, #30]
 8007fe0:	e04c      	b.n	800807c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fe2:	7ffb      	ldrb	r3, [r7, #31]
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	d828      	bhi.n	800803a <UART_SetConfig+0x462>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <UART_SetConfig+0x418>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	0800801d 	.word	0x0800801d
 8007ff8:	08008025 	.word	0x08008025
 8007ffc:	0800803b 	.word	0x0800803b
 8008000:	0800802b 	.word	0x0800802b
 8008004:	0800803b 	.word	0x0800803b
 8008008:	0800803b 	.word	0x0800803b
 800800c:	0800803b 	.word	0x0800803b
 8008010:	08008033 	.word	0x08008033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008014:	f7fd ff96 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
 8008018:	61b8      	str	r0, [r7, #24]
        break;
 800801a:	e013      	b.n	8008044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800801c:	f7fd ffa6 	bl	8005f6c <HAL_RCC_GetPCLK2Freq>
 8008020:	61b8      	str	r0, [r7, #24]
        break;
 8008022:	e00f      	b.n	8008044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008024:	4b1d      	ldr	r3, [pc, #116]	; (800809c <UART_SetConfig+0x4c4>)
 8008026:	61bb      	str	r3, [r7, #24]
        break;
 8008028:	e00c      	b.n	8008044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800802a:	f7fd fe79 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 800802e:	61b8      	str	r0, [r7, #24]
        break;
 8008030:	e008      	b.n	8008044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008036:	61bb      	str	r3, [r7, #24]
        break;
 8008038:	e004      	b.n	8008044 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	77bb      	strb	r3, [r7, #30]
        break;
 8008042:	bf00      	nop
    }

    if (pclk != 0U)
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d018      	beq.n	800807c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	085a      	lsrs	r2, r3, #1
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	441a      	add	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	fbb2 f3f3 	udiv	r3, r2, r3
 800805c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	2b0f      	cmp	r3, #15
 8008062:	d909      	bls.n	8008078 <UART_SetConfig+0x4a0>
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806a:	d205      	bcs.n	8008078 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	b29a      	uxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	60da      	str	r2, [r3, #12]
 8008076:	e001      	b.n	800807c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008088:	7fbb      	ldrb	r3, [r7, #30]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40007c00 	.word	0x40007c00
 8008098:	40023800 	.word	0x40023800
 800809c:	00f42400 	.word	0x00f42400

080080a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00a      	beq.n	80080ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	f003 0308 	and.w	r3, r3, #8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01a      	beq.n	80081b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800819e:	d10a      	bne.n	80081b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	605a      	str	r2, [r3, #4]
  }
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081f4:	f7f9 fcd6 	bl	8001ba4 <HAL_GetTick>
 80081f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b08      	cmp	r3, #8
 8008206:	d10e      	bne.n	8008226 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f831 	bl	800827e <UART_WaitOnFlagUntilTimeout>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e027      	b.n	8008276 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b04      	cmp	r3, #4
 8008232:	d10e      	bne.n	8008252 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f81b 	bl	800827e <UART_WaitOnFlagUntilTimeout>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e011      	b.n	8008276 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b09c      	sub	sp, #112	; 0x70
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	603b      	str	r3, [r7, #0]
 800828a:	4613      	mov	r3, r2
 800828c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828e:	e0a7      	b.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008296:	f000 80a3 	beq.w	80083e0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800829a:	f7f9 fc83 	bl	8001ba4 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d302      	bcc.n	80082b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80082aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d13f      	bne.n	8008330 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082c4:	667b      	str	r3, [r7, #100]	; 0x64
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e6      	bne.n	80082b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3308      	adds	r3, #8
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	f023 0301 	bic.w	r3, r3, #1
 80082f8:	663b      	str	r3, [r7, #96]	; 0x60
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3308      	adds	r3, #8
 8008300:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008302:	64ba      	str	r2, [r7, #72]	; 0x48
 8008304:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e5      	bne.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2220      	movs	r2, #32
 800831a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2220      	movs	r2, #32
 8008320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e068      	b.n	8008402 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b00      	cmp	r3, #0
 800833c:	d050      	beq.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800834c:	d148      	bne.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008356:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800836c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
 8008378:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800837c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e6      	bne.n	8008358 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3308      	adds	r3, #8
 8008390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	613b      	str	r3, [r7, #16]
   return(result);
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f023 0301 	bic.w	r3, r3, #1
 80083a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3308      	adds	r3, #8
 80083a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083aa:	623a      	str	r2, [r7, #32]
 80083ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	69f9      	ldr	r1, [r7, #28]
 80083b0:	6a3a      	ldr	r2, [r7, #32]
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e5      	bne.n	800838a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2220      	movs	r2, #32
 80083c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e010      	b.n	8008402 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	69da      	ldr	r2, [r3, #28]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	4013      	ands	r3, r2
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	bf0c      	ite	eq
 80083f0:	2301      	moveq	r3, #1
 80083f2:	2300      	movne	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	461a      	mov	r2, r3
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	f43f af48 	beq.w	8008290 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3770      	adds	r7, #112	; 0x70
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800840c:	b084      	sub	sp, #16
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	f107 001c 	add.w	r0, r7, #28
 800841a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008422:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008424:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008426:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800842a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800842e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008432:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008436:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <SDMMC_Init+0x54>)
 8008444:	4013      	ands	r3, r2
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	b004      	add	sp, #16
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	ffff8100 	.word	0xffff8100

08008464 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2203      	movs	r2, #3
 80084ac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0303 	and.w	r3, r3, #3
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80084fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008502:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	4b06      	ldr	r3, [pc, #24]	; (8008528 <SDMMC_SendCommand+0x50>)
 8008510:	4013      	ands	r3, r2
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	fffff000 	.word	0xfffff000

0800852c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	b2db      	uxtb	r3, r3
}
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3314      	adds	r3, #20
 8008554:	461a      	mov	r2, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	4413      	add	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
}  
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008592:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008598:	431a      	orrs	r2, r3
                       Data->DPSM);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800859e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0

}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80085d2:	2310      	movs	r3, #16
 80085d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085d6:	2340      	movs	r3, #64	; 0x40
 80085d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085e4:	f107 0308 	add.w	r3, r7, #8
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff ff74 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80085f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085f4:	2110      	movs	r1, #16
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f9d6 	bl	80089a8 <SDMMC_GetCmdResp1>
 80085fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085fe:	69fb      	ldr	r3, [r7, #28]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3720      	adds	r7, #32
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008616:	2311      	movs	r3, #17
 8008618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800861a:	2340      	movs	r3, #64	; 0x40
 800861c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800861e:	2300      	movs	r3, #0
 8008620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008626:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008628:	f107 0308 	add.w	r3, r7, #8
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff ff52 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008634:	f241 3288 	movw	r2, #5000	; 0x1388
 8008638:	2111      	movs	r1, #17
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f9b4 	bl	80089a8 <SDMMC_GetCmdResp1>
 8008640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008642:	69fb      	ldr	r3, [r7, #28]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3720      	adds	r7, #32
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800865a:	2312      	movs	r3, #18
 800865c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800865e:	2340      	movs	r3, #64	; 0x40
 8008660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800866a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800866c:	f107 0308 	add.w	r3, r7, #8
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7ff ff30 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008678:	f241 3288 	movw	r2, #5000	; 0x1388
 800867c:	2112      	movs	r1, #18
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f992 	bl	80089a8 <SDMMC_GetCmdResp1>
 8008684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008686:	69fb      	ldr	r3, [r7, #28]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3720      	adds	r7, #32
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800869e:	2318      	movs	r3, #24
 80086a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086a2:	2340      	movs	r3, #64	; 0x40
 80086a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff ff0e 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80086bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c0:	2118      	movs	r1, #24
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f970 	bl	80089a8 <SDMMC_GetCmdResp1>
 80086c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086ca:	69fb      	ldr	r3, [r7, #28]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3720      	adds	r7, #32
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80086e2:	2319      	movs	r3, #25
 80086e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086e6:	2340      	movs	r3, #64	; 0x40
 80086e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086ea:	2300      	movs	r3, #0
 80086ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086f4:	f107 0308 	add.w	r3, r7, #8
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff feec 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008700:	f241 3288 	movw	r2, #5000	; 0x1388
 8008704:	2119      	movs	r1, #25
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f94e 	bl	80089a8 <SDMMC_GetCmdResp1>
 800870c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800870e:	69fb      	ldr	r3, [r7, #28]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3720      	adds	r7, #32
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008724:	230c      	movs	r3, #12
 8008726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008728:	2340      	movs	r3, #64	; 0x40
 800872a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800872c:	2300      	movs	r3, #0
 800872e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008734:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008736:	f107 0308 	add.w	r3, r7, #8
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff fecb 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008742:	4a05      	ldr	r2, [pc, #20]	; (8008758 <SDMMC_CmdStopTransfer+0x40>)
 8008744:	210c      	movs	r1, #12
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f92e 	bl	80089a8 <SDMMC_GetCmdResp1>
 800874c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800874e:	69fb      	ldr	r3, [r7, #28]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3720      	adds	r7, #32
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	05f5e100 	.word	0x05f5e100

0800875c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08a      	sub	sp, #40	; 0x28
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800876c:	2307      	movs	r3, #7
 800876e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008770:	2340      	movs	r3, #64	; 0x40
 8008772:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008774:	2300      	movs	r3, #0
 8008776:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800877c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800877e:	f107 0310 	add.w	r3, r7, #16
 8008782:	4619      	mov	r1, r3
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff fea7 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800878a:	f241 3288 	movw	r2, #5000	; 0x1388
 800878e:	2107      	movs	r1, #7
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 f909 	bl	80089a8 <SDMMC_GetCmdResp1>
 8008796:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800879a:	4618      	mov	r0, r3
 800879c:	3728      	adds	r7, #40	; 0x28
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b088      	sub	sp, #32
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087c0:	f107 0308 	add.w	r3, r7, #8
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff fe86 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fb23 	bl	8008e18 <SDMMC_GetCmdError>
 80087d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087d4:	69fb      	ldr	r3, [r7, #28]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3720      	adds	r7, #32
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b088      	sub	sp, #32
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80087e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80087ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80087ec:	2308      	movs	r3, #8
 80087ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087f0:	2340      	movs	r3, #64	; 0x40
 80087f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087fe:	f107 0308 	add.w	r3, r7, #8
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7ff fe67 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fab6 	bl	8008d7c <SDMMC_GetCmdResp7>
 8008810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008812:	69fb      	ldr	r3, [r7, #28]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3720      	adds	r7, #32
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800882a:	2337      	movs	r3, #55	; 0x37
 800882c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800882e:	2340      	movs	r3, #64	; 0x40
 8008830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008832:	2300      	movs	r3, #0
 8008834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800883a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800883c:	f107 0308 	add.w	r3, r7, #8
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fe48 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008848:	f241 3288 	movw	r2, #5000	; 0x1388
 800884c:	2137      	movs	r1, #55	; 0x37
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f8aa 	bl	80089a8 <SDMMC_GetCmdResp1>
 8008854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008856:	69fb      	ldr	r3, [r7, #28]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3720      	adds	r7, #32
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	4b0d      	ldr	r3, [pc, #52]	; (80088a4 <SDMMC_CmdAppOperCommand+0x44>)
 800886e:	4313      	orrs	r3, r2
 8008870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008872:	2329      	movs	r3, #41	; 0x29
 8008874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008876:	2340      	movs	r3, #64	; 0x40
 8008878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800887e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008882:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008884:	f107 0308 	add.w	r3, r7, #8
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fe24 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f9bf 	bl	8008c14 <SDMMC_GetCmdResp3>
 8008896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008898:	69fb      	ldr	r3, [r7, #28]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3720      	adds	r7, #32
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	80100000 	.word	0x80100000

080088a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80088b4:	2302      	movs	r3, #2
 80088b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80088b8:	23c0      	movs	r3, #192	; 0xc0
 80088ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088bc:	2300      	movs	r3, #0
 80088be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088c6:	f107 0308 	add.w	r3, r7, #8
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff fe03 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f956 	bl	8008b84 <SDMMC_GetCmdResp2>
 80088d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088da:	69fb      	ldr	r3, [r7, #28]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3720      	adds	r7, #32
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80088f2:	2309      	movs	r3, #9
 80088f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80088f6:	23c0      	movs	r3, #192	; 0xc0
 80088f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008902:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008904:	f107 0308 	add.w	r3, r7, #8
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff fde4 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f937 	bl	8008b84 <SDMMC_GetCmdResp2>
 8008916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008918:	69fb      	ldr	r3, [r7, #28]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3720      	adds	r7, #32
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b088      	sub	sp, #32
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008930:	2303      	movs	r3, #3
 8008932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008934:	2340      	movs	r3, #64	; 0x40
 8008936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008938:	2300      	movs	r3, #0
 800893a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800893c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008942:	f107 0308 	add.w	r3, r7, #8
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff fdc5 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	2103      	movs	r1, #3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f99c 	bl	8008c90 <SDMMC_GetCmdResp6>
 8008958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800895a:	69fb      	ldr	r3, [r7, #28]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008972:	230d      	movs	r3, #13
 8008974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008976:	2340      	movs	r3, #64	; 0x40
 8008978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800897e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008982:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008984:	f107 0308 	add.w	r3, r7, #8
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff fda4 	bl	80084d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008990:	f241 3288 	movw	r2, #5000	; 0x1388
 8008994:	210d      	movs	r1, #13
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f806 	bl	80089a8 <SDMMC_GetCmdResp1>
 800899c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800899e:	69fb      	ldr	r3, [r7, #28]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3720      	adds	r7, #32
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	460b      	mov	r3, r1
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80089b6:	4b70      	ldr	r3, [pc, #448]	; (8008b78 <SDMMC_GetCmdResp1+0x1d0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a70      	ldr	r2, [pc, #448]	; (8008b7c <SDMMC_GetCmdResp1+0x1d4>)
 80089bc:	fba2 2303 	umull	r2, r3, r2, r3
 80089c0:	0a5a      	lsrs	r2, r3, #9
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	fb02 f303 	mul.w	r3, r2, r3
 80089c8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	1e5a      	subs	r2, r3, #1
 80089ce:	61fa      	str	r2, [r7, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d102      	bne.n	80089da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089d8:	e0c9      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0ef      	beq.n	80089ca <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1ea      	bne.n	80089ca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d004      	beq.n	8008a0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2204      	movs	r2, #4
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a06:	2304      	movs	r3, #4
 8008a08:	e0b1      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d004      	beq.n	8008a20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e0a6      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	22c5      	movs	r2, #197	; 0xc5
 8008a24:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7ff fd80 	bl	800852c <SDMMC_GetCommandResponse>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	461a      	mov	r2, r3
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d001      	beq.n	8008a3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e099      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f7ff fd82 	bl	8008546 <SDMMC_GetResponse>
 8008a42:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	4b4e      	ldr	r3, [pc, #312]	; (8008b80 <SDMMC_GetCmdResp1+0x1d8>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e08d      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	da02      	bge.n	8008a5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a5c:	e087      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008a68:	2340      	movs	r3, #64	; 0x40
 8008a6a:	e080      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008a76:	2380      	movs	r3, #128	; 0x80
 8008a78:	e079      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a88:	e071      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a98:	e069      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aa8:	e061      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ab8:	e059      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ac8:	e051      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ad8:	e049      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008ae4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ae8:	e041      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008af8:	e039      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b08:	e031      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008b14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b18:	e029      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b28:	e021      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b38:	e019      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b48:	e011      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008b54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b58:	e009      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008b64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b68:	e001      	b.n	8008b6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3720      	adds	r7, #32
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000000 	.word	0x20000000
 8008b7c:	10624dd3 	.word	0x10624dd3
 8008b80:	fdffe008 	.word	0xfdffe008

08008b84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	; (8008c0c <SDMMC_GetCmdResp2+0x88>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a1f      	ldr	r2, [pc, #124]	; (8008c10 <SDMMC_GetCmdResp2+0x8c>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	0a5b      	lsrs	r3, r3, #9
 8008b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ba0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1e5a      	subs	r2, r3, #1
 8008ba6:	60fa      	str	r2, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bb0:	e026      	b.n	8008c00 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0ef      	beq.n	8008ba2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1ea      	bne.n	8008ba2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d004      	beq.n	8008be2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2204      	movs	r2, #4
 8008bdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bde:	2304      	movs	r3, #4
 8008be0:	e00e      	b.n	8008c00 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d004      	beq.n	8008bf8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e003      	b.n	8008c00 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	22c5      	movs	r2, #197	; 0xc5
 8008bfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	20000000 	.word	0x20000000
 8008c10:	10624dd3 	.word	0x10624dd3

08008c14 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	; (8008c88 <SDMMC_GetCmdResp3+0x74>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1a      	ldr	r2, [pc, #104]	; (8008c8c <SDMMC_GetCmdResp3+0x78>)
 8008c22:	fba2 2303 	umull	r2, r3, r2, r3
 8008c26:	0a5b      	lsrs	r3, r3, #9
 8008c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2c:	fb02 f303 	mul.w	r3, r2, r3
 8008c30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	1e5a      	subs	r2, r3, #1
 8008c36:	60fa      	str	r2, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c40:	e01b      	b.n	8008c7a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0ef      	beq.n	8008c32 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1ea      	bne.n	8008c32 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d004      	beq.n	8008c72 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2204      	movs	r2, #4
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c6e:	2304      	movs	r3, #4
 8008c70:	e003      	b.n	8008c7a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	22c5      	movs	r2, #197	; 0xc5
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	20000000 	.word	0x20000000
 8008c8c:	10624dd3 	.word	0x10624dd3

08008c90 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c9e:	4b35      	ldr	r3, [pc, #212]	; (8008d74 <SDMMC_GetCmdResp6+0xe4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a35      	ldr	r2, [pc, #212]	; (8008d78 <SDMMC_GetCmdResp6+0xe8>)
 8008ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca8:	0a5b      	lsrs	r3, r3, #9
 8008caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cae:	fb02 f303 	mul.w	r3, r2, r3
 8008cb2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	1e5a      	subs	r2, r3, #1
 8008cb8:	61fa      	str	r2, [r7, #28]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d102      	bne.n	8008cc4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cc2:	e052      	b.n	8008d6a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0ef      	beq.n	8008cb4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1ea      	bne.n	8008cb4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2204      	movs	r2, #4
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	e03a      	b.n	8008d6a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d004      	beq.n	8008d0a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2201      	movs	r2, #1
 8008d04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e02f      	b.n	8008d6a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff fc0e 	bl	800852c <SDMMC_GetCommandResponse>
 8008d10:	4603      	mov	r3, r0
 8008d12:	461a      	mov	r2, r3
 8008d14:	7afb      	ldrb	r3, [r7, #11]
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d001      	beq.n	8008d1e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e025      	b.n	8008d6a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	22c5      	movs	r2, #197	; 0xc5
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d24:	2100      	movs	r1, #0
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff fc0d 	bl	8008546 <SDMMC_GetResponse>
 8008d2c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d106      	bne.n	8008d46 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	0c1b      	lsrs	r3, r3, #16
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008d42:	2300      	movs	r3, #0
 8008d44:	e011      	b.n	8008d6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d54:	e009      	b.n	8008d6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d64:	e001      	b.n	8008d6a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	20000000 	.word	0x20000000
 8008d78:	10624dd3 	.word	0x10624dd3

08008d7c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d84:	4b22      	ldr	r3, [pc, #136]	; (8008e10 <SDMMC_GetCmdResp7+0x94>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a22      	ldr	r2, [pc, #136]	; (8008e14 <SDMMC_GetCmdResp7+0x98>)
 8008d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8e:	0a5b      	lsrs	r3, r3, #9
 8008d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d94:	fb02 f303 	mul.w	r3, r2, r3
 8008d98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	1e5a      	subs	r2, r3, #1
 8008d9e:	60fa      	str	r2, [r7, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008da4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008da8:	e02c      	b.n	8008e04 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0ef      	beq.n	8008d9a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1ea      	bne.n	8008d9a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d004      	beq.n	8008dda <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2204      	movs	r2, #4
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008dd6:	2304      	movs	r3, #4
 8008dd8:	e014      	b.n	8008e04 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d004      	beq.n	8008df0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e009      	b.n	8008e04 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2240      	movs	r2, #64	; 0x40
 8008e00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008e02:	2300      	movs	r3, #0
  
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	20000000 	.word	0x20000000
 8008e14:	10624dd3 	.word	0x10624dd3

08008e18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e20:	4b11      	ldr	r3, [pc, #68]	; (8008e68 <SDMMC_GetCmdError+0x50>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a11      	ldr	r2, [pc, #68]	; (8008e6c <SDMMC_GetCmdError+0x54>)
 8008e26:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2a:	0a5b      	lsrs	r3, r3, #9
 8008e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e30:	fb02 f303 	mul.w	r3, r2, r3
 8008e34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	1e5a      	subs	r2, r3, #1
 8008e3a:	60fa      	str	r2, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d102      	bne.n	8008e46 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e44:	e009      	b.n	8008e5a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0f1      	beq.n	8008e36 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	22c5      	movs	r2, #197	; 0xc5
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20000000 	.word	0x20000000
 8008e6c:	10624dd3 	.word	0x10624dd3

08008e70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e70:	b084      	sub	sp, #16
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	f107 001c 	add.w	r0, r7, #28
 8008e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d120      	bne.n	8008eca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	4b20      	ldr	r3, [pc, #128]	; (8008f1c <USB_CoreInit+0xac>)
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d105      	bne.n	8008ebe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 fbee 	bl	800a6a0 <USB_CoreReset>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]
 8008ec8:	e010      	b.n	8008eec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fbe2 	bl	800a6a0 <USB_CoreReset>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d10b      	bne.n	8008f0a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f043 0206 	orr.w	r2, r3, #6
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f043 0220 	orr.w	r2, r3, #32
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f16:	b004      	add	sp, #16
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	ffbdffbf 	.word	0xffbdffbf

08008f20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d165      	bne.n	8009000 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4a41      	ldr	r2, [pc, #260]	; (800903c <USB_SetTurnaroundTime+0x11c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d906      	bls.n	8008f4a <USB_SetTurnaroundTime+0x2a>
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4a40      	ldr	r2, [pc, #256]	; (8009040 <USB_SetTurnaroundTime+0x120>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d202      	bcs.n	8008f4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f44:	230f      	movs	r3, #15
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	e062      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	4a3c      	ldr	r2, [pc, #240]	; (8009040 <USB_SetTurnaroundTime+0x120>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d306      	bcc.n	8008f60 <USB_SetTurnaroundTime+0x40>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	4a3b      	ldr	r2, [pc, #236]	; (8009044 <USB_SetTurnaroundTime+0x124>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d202      	bcs.n	8008f60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f5a:	230e      	movs	r3, #14
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	e057      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4a38      	ldr	r2, [pc, #224]	; (8009044 <USB_SetTurnaroundTime+0x124>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d306      	bcc.n	8008f76 <USB_SetTurnaroundTime+0x56>
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4a37      	ldr	r2, [pc, #220]	; (8009048 <USB_SetTurnaroundTime+0x128>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d202      	bcs.n	8008f76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f70:	230d      	movs	r3, #13
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	e04c      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	4a33      	ldr	r2, [pc, #204]	; (8009048 <USB_SetTurnaroundTime+0x128>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d306      	bcc.n	8008f8c <USB_SetTurnaroundTime+0x6c>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	4a32      	ldr	r2, [pc, #200]	; (800904c <USB_SetTurnaroundTime+0x12c>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d802      	bhi.n	8008f8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f86:	230c      	movs	r3, #12
 8008f88:	617b      	str	r3, [r7, #20]
 8008f8a:	e041      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	4a2f      	ldr	r2, [pc, #188]	; (800904c <USB_SetTurnaroundTime+0x12c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d906      	bls.n	8008fa2 <USB_SetTurnaroundTime+0x82>
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4a2e      	ldr	r2, [pc, #184]	; (8009050 <USB_SetTurnaroundTime+0x130>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d802      	bhi.n	8008fa2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008f9c:	230b      	movs	r3, #11
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	e036      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	4a2a      	ldr	r2, [pc, #168]	; (8009050 <USB_SetTurnaroundTime+0x130>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d906      	bls.n	8008fb8 <USB_SetTurnaroundTime+0x98>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	4a29      	ldr	r2, [pc, #164]	; (8009054 <USB_SetTurnaroundTime+0x134>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d802      	bhi.n	8008fb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008fb2:	230a      	movs	r3, #10
 8008fb4:	617b      	str	r3, [r7, #20]
 8008fb6:	e02b      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	4a26      	ldr	r2, [pc, #152]	; (8009054 <USB_SetTurnaroundTime+0x134>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d906      	bls.n	8008fce <USB_SetTurnaroundTime+0xae>
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4a25      	ldr	r2, [pc, #148]	; (8009058 <USB_SetTurnaroundTime+0x138>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d202      	bcs.n	8008fce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008fc8:	2309      	movs	r3, #9
 8008fca:	617b      	str	r3, [r7, #20]
 8008fcc:	e020      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	4a21      	ldr	r2, [pc, #132]	; (8009058 <USB_SetTurnaroundTime+0x138>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d306      	bcc.n	8008fe4 <USB_SetTurnaroundTime+0xc4>
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	4a20      	ldr	r2, [pc, #128]	; (800905c <USB_SetTurnaroundTime+0x13c>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d802      	bhi.n	8008fe4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008fde:	2308      	movs	r3, #8
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	e015      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	4a1d      	ldr	r2, [pc, #116]	; (800905c <USB_SetTurnaroundTime+0x13c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d906      	bls.n	8008ffa <USB_SetTurnaroundTime+0xda>
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4a1c      	ldr	r2, [pc, #112]	; (8009060 <USB_SetTurnaroundTime+0x140>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d202      	bcs.n	8008ffa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ff4:	2307      	movs	r3, #7
 8008ff6:	617b      	str	r3, [r7, #20]
 8008ff8:	e00a      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008ffa:	2306      	movs	r3, #6
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e007      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009006:	2309      	movs	r3, #9
 8009008:	617b      	str	r3, [r7, #20]
 800900a:	e001      	b.n	8009010 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800900c:	2309      	movs	r3, #9
 800900e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	68da      	ldr	r2, [r3, #12]
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	029b      	lsls	r3, r3, #10
 8009024:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009028:	431a      	orrs	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	00d8acbf 	.word	0x00d8acbf
 8009040:	00e4e1c0 	.word	0x00e4e1c0
 8009044:	00f42400 	.word	0x00f42400
 8009048:	01067380 	.word	0x01067380
 800904c:	011a499f 	.word	0x011a499f
 8009050:	01312cff 	.word	0x01312cff
 8009054:	014ca43f 	.word	0x014ca43f
 8009058:	016e3600 	.word	0x016e3600
 800905c:	01a6ab1f 	.word	0x01a6ab1f
 8009060:	01e84800 	.word	0x01e84800

08009064 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f043 0201 	orr.w	r2, r3, #1
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f023 0201 	bic.w	r2, r3, #1
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d115      	bne.n	80090f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090d6:	2001      	movs	r0, #1
 80090d8:	f7f8 fd70 	bl	8001bbc <HAL_Delay>
      ms++;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 fa4b 	bl	800a57e <USB_GetMode>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d01e      	beq.n	800912c <USB_SetCurrentMode+0x84>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b31      	cmp	r3, #49	; 0x31
 80090f2:	d9f0      	bls.n	80090d6 <USB_SetCurrentMode+0x2e>
 80090f4:	e01a      	b.n	800912c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d115      	bne.n	8009128 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009108:	2001      	movs	r0, #1
 800910a:	f7f8 fd57 	bl	8001bbc <HAL_Delay>
      ms++;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3301      	adds	r3, #1
 8009112:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 fa32 	bl	800a57e <USB_GetMode>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <USB_SetCurrentMode+0x84>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b31      	cmp	r3, #49	; 0x31
 8009124:	d9f0      	bls.n	8009108 <USB_SetCurrentMode+0x60>
 8009126:	e001      	b.n	800912c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e005      	b.n	8009138 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b32      	cmp	r3, #50	; 0x32
 8009130:	d101      	bne.n	8009136 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e000      	b.n	8009138 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009140:	b084      	sub	sp, #16
 8009142:	b580      	push	{r7, lr}
 8009144:	b086      	sub	sp, #24
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800914e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800915a:	2300      	movs	r3, #0
 800915c:	613b      	str	r3, [r7, #16]
 800915e:	e009      	b.n	8009174 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	3340      	adds	r3, #64	; 0x40
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	2200      	movs	r2, #0
 800916c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	3301      	adds	r3, #1
 8009172:	613b      	str	r3, [r7, #16]
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	2b0e      	cmp	r3, #14
 8009178:	d9f2      	bls.n	8009160 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800917a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d11c      	bne.n	80091ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800918e:	f043 0302 	orr.w	r3, r3, #2
 8009192:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e005      	b.n	80091c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091cc:	461a      	mov	r2, r3
 80091ce:	2300      	movs	r3, #0
 80091d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d8:	4619      	mov	r1, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e0:	461a      	mov	r2, r3
 80091e2:	680b      	ldr	r3, [r1, #0]
 80091e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d10c      	bne.n	8009206 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d104      	bne.n	80091fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091f2:	2100      	movs	r1, #0
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f965 	bl	80094c4 <USB_SetDevSpeed>
 80091fa:	e008      	b.n	800920e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091fc:	2101      	movs	r1, #1
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f960 	bl	80094c4 <USB_SetDevSpeed>
 8009204:	e003      	b.n	800920e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009206:	2103      	movs	r1, #3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f95b 	bl	80094c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800920e:	2110      	movs	r1, #16
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f8f3 	bl	80093fc <USB_FlushTxFifo>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f91f 	bl	8009464 <USB_FlushRxFifo>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009236:	461a      	mov	r2, r3
 8009238:	2300      	movs	r3, #0
 800923a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009242:	461a      	mov	r2, r3
 8009244:	2300      	movs	r3, #0
 8009246:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924e:	461a      	mov	r2, r3
 8009250:	2300      	movs	r3, #0
 8009252:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009254:	2300      	movs	r3, #0
 8009256:	613b      	str	r3, [r7, #16]
 8009258:	e043      	b.n	80092e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800926c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009270:	d118      	bne.n	80092a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10a      	bne.n	800928e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009284:	461a      	mov	r2, r3
 8009286:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	e013      	b.n	80092b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929a:	461a      	mov	r2, r3
 800929c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e008      	b.n	80092b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b0:	461a      	mov	r2, r3
 80092b2:	2300      	movs	r3, #0
 80092b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c2:	461a      	mov	r2, r3
 80092c4:	2300      	movs	r3, #0
 80092c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d4:	461a      	mov	r2, r3
 80092d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	3301      	adds	r3, #1
 80092e0:	613b      	str	r3, [r7, #16]
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d3b7      	bcc.n	800925a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ea:	2300      	movs	r3, #0
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	e043      	b.n	8009378 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009306:	d118      	bne.n	800933a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10a      	bne.n	8009324 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931a:	461a      	mov	r2, r3
 800931c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	e013      	b.n	800934c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009330:	461a      	mov	r2, r3
 8009332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	e008      	b.n	800934c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009346:	461a      	mov	r2, r3
 8009348:	2300      	movs	r3, #0
 800934a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009358:	461a      	mov	r2, r3
 800935a:	2300      	movs	r3, #0
 800935c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	015a      	lsls	r2, r3, #5
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4413      	add	r3, r2
 8009366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936a:	461a      	mov	r2, r3
 800936c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009370:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	3301      	adds	r3, #1
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	429a      	cmp	r2, r3
 800937e:	d3b7      	bcc.n	80092f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800938e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009392:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80093a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d105      	bne.n	80093b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	f043 0210 	orr.w	r2, r3, #16
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699a      	ldr	r2, [r3, #24]
 80093b8:	4b0e      	ldr	r3, [pc, #56]	; (80093f4 <USB_DevInit+0x2b4>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d005      	beq.n	80093d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	f043 0208 	orr.w	r2, r3, #8
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d105      	bne.n	80093e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699a      	ldr	r2, [r3, #24]
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <USB_DevInit+0x2b8>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093f0:	b004      	add	sp, #16
 80093f2:	4770      	bx	lr
 80093f4:	803c3800 	.word	0x803c3800
 80093f8:	40000004 	.word	0x40000004

080093fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009406:	2300      	movs	r3, #0
 8009408:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3301      	adds	r3, #1
 800940e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4a13      	ldr	r2, [pc, #76]	; (8009460 <USB_FlushTxFifo+0x64>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d901      	bls.n	800941c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e01b      	b.n	8009454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	daf2      	bge.n	800940a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	019b      	lsls	r3, r3, #6
 800942c:	f043 0220 	orr.w	r2, r3, #32
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3301      	adds	r3, #1
 8009438:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	4a08      	ldr	r2, [pc, #32]	; (8009460 <USB_FlushTxFifo+0x64>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d901      	bls.n	8009446 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e006      	b.n	8009454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f003 0320 	and.w	r3, r3, #32
 800944e:	2b20      	cmp	r3, #32
 8009450:	d0f0      	beq.n	8009434 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	00030d40 	.word	0x00030d40

08009464 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4a11      	ldr	r2, [pc, #68]	; (80094c0 <USB_FlushRxFifo+0x5c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d901      	bls.n	8009482 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e018      	b.n	80094b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	daf2      	bge.n	8009470 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2210      	movs	r2, #16
 8009492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3301      	adds	r3, #1
 8009498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4a08      	ldr	r2, [pc, #32]	; (80094c0 <USB_FlushRxFifo+0x5c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d901      	bls.n	80094a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e006      	b.n	80094b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f003 0310 	and.w	r3, r3, #16
 80094ae:	2b10      	cmp	r3, #16
 80094b0:	d0f0      	beq.n	8009494 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	00030d40 	.word	0x00030d40

080094c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	78fb      	ldrb	r3, [r7, #3]
 80094de:	68f9      	ldr	r1, [r7, #12]
 80094e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094e4:	4313      	orrs	r3, r2
 80094e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b087      	sub	sp, #28
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f003 0306 	and.w	r3, r3, #6
 800950e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d102      	bne.n	800951c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009516:	2300      	movs	r3, #0
 8009518:	75fb      	strb	r3, [r7, #23]
 800951a:	e00a      	b.n	8009532 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b02      	cmp	r3, #2
 8009520:	d002      	beq.n	8009528 <USB_GetDevSpeed+0x32>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b06      	cmp	r3, #6
 8009526:	d102      	bne.n	800952e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009528:	2302      	movs	r3, #2
 800952a:	75fb      	strb	r3, [r7, #23]
 800952c:	e001      	b.n	8009532 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800952e:	230f      	movs	r3, #15
 8009530:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009532:	7dfb      	ldrb	r3, [r7, #23]
}
 8009534:	4618      	mov	r0, r3
 8009536:	371c      	adds	r7, #28
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d139      	bne.n	80095d0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009562:	69da      	ldr	r2, [r3, #28]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f003 030f 	and.w	r3, r3, #15
 800956c:	2101      	movs	r1, #1
 800956e:	fa01 f303 	lsl.w	r3, r1, r3
 8009572:	b29b      	uxth	r3, r3
 8009574:	68f9      	ldr	r1, [r7, #12]
 8009576:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800957a:	4313      	orrs	r3, r2
 800957c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d153      	bne.n	800963c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	791b      	ldrb	r3, [r3, #4]
 80095ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	059b      	lsls	r3, r3, #22
 80095b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095b8:	431a      	orrs	r2, r3
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	0159      	lsls	r1, r3, #5
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	440b      	add	r3, r1
 80095c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c6:	4619      	mov	r1, r3
 80095c8:	4b20      	ldr	r3, [pc, #128]	; (800964c <USB_ActivateEndpoint+0x10c>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	600b      	str	r3, [r1, #0]
 80095ce:	e035      	b.n	800963c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d6:	69da      	ldr	r2, [r3, #28]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	2101      	movs	r1, #1
 80095e2:	fa01 f303 	lsl.w	r3, r1, r3
 80095e6:	041b      	lsls	r3, r3, #16
 80095e8:	68f9      	ldr	r1, [r7, #12]
 80095ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095ee:	4313      	orrs	r3, r2
 80095f0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d119      	bne.n	800963c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4413      	add	r3, r2
 8009610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	791b      	ldrb	r3, [r3, #4]
 8009622:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009624:	430b      	orrs	r3, r1
 8009626:	431a      	orrs	r2, r3
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	0159      	lsls	r1, r3, #5
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	440b      	add	r3, r1
 8009630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009634:	4619      	mov	r1, r3
 8009636:	4b05      	ldr	r3, [pc, #20]	; (800964c <USB_ActivateEndpoint+0x10c>)
 8009638:	4313      	orrs	r3, r2
 800963a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	10008000 	.word	0x10008000

08009650 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	785b      	ldrb	r3, [r3, #1]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d161      	bne.n	8009730 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800967e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009682:	d11f      	bne.n	80096c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	0151      	lsls	r1, r2, #5
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	440a      	add	r2, r1
 800969a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800969e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80096a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	0151      	lsls	r1, r2, #5
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	440a      	add	r2, r1
 80096ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	2101      	movs	r1, #1
 80096d6:	fa01 f303 	lsl.w	r3, r1, r3
 80096da:	b29b      	uxth	r3, r3
 80096dc:	43db      	mvns	r3, r3
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096e4:	4013      	ands	r3, r2
 80096e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ee:	69da      	ldr	r2, [r3, #28]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 030f 	and.w	r3, r3, #15
 80096f8:	2101      	movs	r1, #1
 80096fa:	fa01 f303 	lsl.w	r3, r1, r3
 80096fe:	b29b      	uxth	r3, r3
 8009700:	43db      	mvns	r3, r3
 8009702:	68f9      	ldr	r1, [r7, #12]
 8009704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009708:	4013      	ands	r3, r2
 800970a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	0159      	lsls	r1, r3, #5
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	440b      	add	r3, r1
 8009722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009726:	4619      	mov	r1, r3
 8009728:	4b35      	ldr	r3, [pc, #212]	; (8009800 <USB_DeactivateEndpoint+0x1b0>)
 800972a:	4013      	ands	r3, r2
 800972c:	600b      	str	r3, [r1, #0]
 800972e:	e060      	b.n	80097f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009746:	d11f      	bne.n	8009788 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	440a      	add	r2, r1
 800975e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009762:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009766:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	0151      	lsls	r1, r2, #5
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	440a      	add	r2, r1
 800977e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009782:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009786:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	f003 030f 	and.w	r3, r3, #15
 8009798:	2101      	movs	r1, #1
 800979a:	fa01 f303 	lsl.w	r3, r1, r3
 800979e:	041b      	lsls	r3, r3, #16
 80097a0:	43db      	mvns	r3, r3
 80097a2:	68f9      	ldr	r1, [r7, #12]
 80097a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097a8:	4013      	ands	r3, r2
 80097aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b2:	69da      	ldr	r2, [r3, #28]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	2101      	movs	r1, #1
 80097be:	fa01 f303 	lsl.w	r3, r1, r3
 80097c2:	041b      	lsls	r3, r3, #16
 80097c4:	43db      	mvns	r3, r3
 80097c6:	68f9      	ldr	r1, [r7, #12]
 80097c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097cc:	4013      	ands	r3, r2
 80097ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	0159      	lsls	r1, r3, #5
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	440b      	add	r3, r1
 80097e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ea:	4619      	mov	r1, r3
 80097ec:	4b05      	ldr	r3, [pc, #20]	; (8009804 <USB_DeactivateEndpoint+0x1b4>)
 80097ee:	4013      	ands	r3, r2
 80097f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	ec337800 	.word	0xec337800
 8009804:	eff37800 	.word	0xeff37800

08009808 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08a      	sub	sp, #40	; 0x28
 800980c:	af02      	add	r7, sp, #8
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	4613      	mov	r3, r2
 8009814:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	785b      	ldrb	r3, [r3, #1]
 8009824:	2b01      	cmp	r3, #1
 8009826:	f040 8163 	bne.w	8009af0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d132      	bne.n	8009898 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	4413      	add	r3, r2
 800983a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	0159      	lsls	r1, r3, #5
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	440b      	add	r3, r1
 8009848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984c:	4619      	mov	r1, r3
 800984e:	4ba5      	ldr	r3, [pc, #660]	; (8009ae4 <USB_EPStartXfer+0x2dc>)
 8009850:	4013      	ands	r3, r2
 8009852:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	0151      	lsls	r1, r2, #5
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	440a      	add	r2, r1
 800986a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800986e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009872:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009880:	691a      	ldr	r2, [r3, #16]
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	0159      	lsls	r1, r3, #5
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	440b      	add	r3, r1
 800988a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988e:	4619      	mov	r1, r3
 8009890:	4b95      	ldr	r3, [pc, #596]	; (8009ae8 <USB_EPStartXfer+0x2e0>)
 8009892:	4013      	ands	r3, r2
 8009894:	610b      	str	r3, [r1, #16]
 8009896:	e074      	b.n	8009982 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a4:	691a      	ldr	r2, [r3, #16]
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	0159      	lsls	r1, r3, #5
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	440b      	add	r3, r1
 80098ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b2:	4619      	mov	r1, r3
 80098b4:	4b8c      	ldr	r3, [pc, #560]	; (8009ae8 <USB_EPStartXfer+0x2e0>)
 80098b6:	4013      	ands	r3, r2
 80098b8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	0159      	lsls	r1, r3, #5
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	440b      	add	r3, r1
 80098d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d4:	4619      	mov	r1, r3
 80098d6:	4b83      	ldr	r3, [pc, #524]	; (8009ae4 <USB_EPStartXfer+0x2dc>)
 80098d8:	4013      	ands	r3, r2
 80098da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	6999      	ldr	r1, [r3, #24]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	440b      	add	r3, r1
 80098f4:	1e59      	subs	r1, r3, #1
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80098fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009900:	4b7a      	ldr	r3, [pc, #488]	; (8009aec <USB_EPStartXfer+0x2e4>)
 8009902:	400b      	ands	r3, r1
 8009904:	69b9      	ldr	r1, [r7, #24]
 8009906:	0148      	lsls	r0, r1, #5
 8009908:	69f9      	ldr	r1, [r7, #28]
 800990a:	4401      	add	r1, r0
 800990c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009910:	4313      	orrs	r3, r2
 8009912:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009920:	691a      	ldr	r2, [r3, #16]
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800992a:	69b9      	ldr	r1, [r7, #24]
 800992c:	0148      	lsls	r0, r1, #5
 800992e:	69f9      	ldr	r1, [r7, #28]
 8009930:	4401      	add	r1, r0
 8009932:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009936:	4313      	orrs	r3, r2
 8009938:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	791b      	ldrb	r3, [r3, #4]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d11f      	bne.n	8009982 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	69ba      	ldr	r2, [r7, #24]
 8009952:	0151      	lsls	r1, r2, #5
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	440a      	add	r2, r1
 8009958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800995c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009960:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	69fa      	ldr	r2, [r7, #28]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800997c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009980:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d14b      	bne.n	8009a20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d009      	beq.n	80099a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	461a      	mov	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	791b      	ldrb	r3, [r3, #4]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d128      	bne.n	80099fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d110      	bne.n	80099de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	0151      	lsls	r1, r2, #5
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	440a      	add	r2, r1
 80099d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	e00f      	b.n	80099fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	69fa      	ldr	r2, [r7, #28]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	69ba      	ldr	r2, [r7, #24]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	e137      	b.n	8009c90 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	0151      	lsls	r1, r2, #5
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	440a      	add	r2, r1
 8009a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	791b      	ldrb	r3, [r3, #4]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d015      	beq.n	8009a74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 811f 	beq.w	8009c90 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	f003 030f 	and.w	r3, r3, #15
 8009a62:	2101      	movs	r1, #1
 8009a64:	fa01 f303 	lsl.w	r3, r1, r3
 8009a68:	69f9      	ldr	r1, [r7, #28]
 8009a6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	634b      	str	r3, [r1, #52]	; 0x34
 8009a72:	e10d      	b.n	8009c90 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d110      	bne.n	8009aa6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	69ba      	ldr	r2, [r7, #24]
 8009a94:	0151      	lsls	r1, r2, #5
 8009a96:	69fa      	ldr	r2, [r7, #28]
 8009a98:	440a      	add	r2, r1
 8009a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	e00f      	b.n	8009ac6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	0151      	lsls	r1, r2, #5
 8009ab8:	69fa      	ldr	r2, [r7, #28]
 8009aba:	440a      	add	r2, r1
 8009abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ac4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	6919      	ldr	r1, [r3, #16]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	781a      	ldrb	r2, [r3, #0]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	b298      	uxth	r0, r3
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	4603      	mov	r3, r0
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 faea 	bl	800a0b4 <USB_WritePacket>
 8009ae0:	e0d6      	b.n	8009c90 <USB_EPStartXfer+0x488>
 8009ae2:	bf00      	nop
 8009ae4:	e007ffff 	.word	0xe007ffff
 8009ae8:	fff80000 	.word	0xfff80000
 8009aec:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afc:	691a      	ldr	r2, [r3, #16]
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	0159      	lsls	r1, r3, #5
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	440b      	add	r3, r1
 8009b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4b63      	ldr	r3, [pc, #396]	; (8009c9c <USB_EPStartXfer+0x494>)
 8009b0e:	4013      	ands	r3, r2
 8009b10:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1e:	691a      	ldr	r2, [r3, #16]
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	0159      	lsls	r1, r3, #5
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	440b      	add	r3, r1
 8009b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	4b5c      	ldr	r3, [pc, #368]	; (8009ca0 <USB_EPStartXfer+0x498>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d123      	bne.n	8009b84 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b52:	69b9      	ldr	r1, [r7, #24]
 8009b54:	0148      	lsls	r0, r1, #5
 8009b56:	69f9      	ldr	r1, [r7, #28]
 8009b58:	4401      	add	r1, r0
 8009b5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	69ba      	ldr	r2, [r7, #24]
 8009b72:	0151      	lsls	r1, r2, #5
 8009b74:	69fa      	ldr	r2, [r7, #28]
 8009b76:	440a      	add	r2, r1
 8009b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b80:	6113      	str	r3, [r2, #16]
 8009b82:	e037      	b.n	8009bf4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	699a      	ldr	r2, [r3, #24]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	1e5a      	subs	r2, r3, #1
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b98:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	8afa      	ldrh	r2, [r7, #22]
 8009ba0:	fb03 f202 	mul.w	r2, r3, r2
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb4:	691a      	ldr	r2, [r3, #16]
 8009bb6:	8afb      	ldrh	r3, [r7, #22]
 8009bb8:	04d9      	lsls	r1, r3, #19
 8009bba:	4b3a      	ldr	r3, [pc, #232]	; (8009ca4 <USB_EPStartXfer+0x49c>)
 8009bbc:	400b      	ands	r3, r1
 8009bbe:	69b9      	ldr	r1, [r7, #24]
 8009bc0:	0148      	lsls	r0, r1, #5
 8009bc2:	69f9      	ldr	r1, [r7, #28]
 8009bc4:	4401      	add	r1, r0
 8009bc6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bda:	691a      	ldr	r2, [r3, #16]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009be4:	69b9      	ldr	r1, [r7, #24]
 8009be6:	0148      	lsls	r0, r1, #5
 8009be8:	69f9      	ldr	r1, [r7, #28]
 8009bea:	4401      	add	r1, r0
 8009bec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d10d      	bne.n	8009c16 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d009      	beq.n	8009c16 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6919      	ldr	r1, [r3, #16]
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c12:	460a      	mov	r2, r1
 8009c14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	791b      	ldrb	r3, [r3, #4]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d128      	bne.n	8009c70 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d110      	bne.n	8009c50 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	69ba      	ldr	r2, [r7, #24]
 8009c3e:	0151      	lsls	r1, r2, #5
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	440a      	add	r2, r1
 8009c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	e00f      	b.n	8009c70 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	0151      	lsls	r1, r2, #5
 8009c62:	69fa      	ldr	r2, [r7, #28]
 8009c64:	440a      	add	r2, r1
 8009c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	015a      	lsls	r2, r3, #5
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	0151      	lsls	r1, r2, #5
 8009c82:	69fa      	ldr	r2, [r7, #28]
 8009c84:	440a      	add	r2, r1
 8009c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3720      	adds	r7, #32
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	fff80000 	.word	0xfff80000
 8009ca0:	e007ffff 	.word	0xe007ffff
 8009ca4:	1ff80000 	.word	0x1ff80000

08009ca8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b087      	sub	sp, #28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	785b      	ldrb	r3, [r3, #1]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	f040 80ce 	bne.w	8009e66 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d132      	bne.n	8009d38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	0159      	lsls	r1, r3, #5
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	440b      	add	r3, r1
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cec:	4619      	mov	r1, r3
 8009cee:	4b9a      	ldr	r3, [pc, #616]	; (8009f58 <USB_EP0StartXfer+0x2b0>)
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	015a      	lsls	r2, r3, #5
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	0151      	lsls	r1, r2, #5
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	440a      	add	r2, r1
 8009d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d20:	691a      	ldr	r2, [r3, #16]
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	0159      	lsls	r1, r3, #5
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	440b      	add	r3, r1
 8009d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4b8a      	ldr	r3, [pc, #552]	; (8009f5c <USB_EP0StartXfer+0x2b4>)
 8009d32:	4013      	ands	r3, r2
 8009d34:	610b      	str	r3, [r1, #16]
 8009d36:	e04e      	b.n	8009dd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d44:	691a      	ldr	r2, [r3, #16]
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	0159      	lsls	r1, r3, #5
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	440b      	add	r3, r1
 8009d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d52:	4619      	mov	r1, r3
 8009d54:	4b81      	ldr	r3, [pc, #516]	; (8009f5c <USB_EP0StartXfer+0x2b4>)
 8009d56:	4013      	ands	r3, r2
 8009d58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	0159      	lsls	r1, r3, #5
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	440b      	add	r3, r1
 8009d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d74:	4619      	mov	r1, r3
 8009d76:	4b78      	ldr	r3, [pc, #480]	; (8009f58 <USB_EP0StartXfer+0x2b0>)
 8009d78:	4013      	ands	r3, r2
 8009d7a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	699a      	ldr	r2, [r3, #24]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d903      	bls.n	8009d90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	0151      	lsls	r1, r2, #5
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	440a      	add	r2, r1
 8009da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009daa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbc:	691a      	ldr	r2, [r3, #16]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dc6:	6939      	ldr	r1, [r7, #16]
 8009dc8:	0148      	lsls	r0, r1, #5
 8009dca:	6979      	ldr	r1, [r7, #20]
 8009dcc:	4401      	add	r1, r0
 8009dce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009dd6:	79fb      	ldrb	r3, [r7, #7]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d11e      	bne.n	8009e1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d009      	beq.n	8009df8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df0:	461a      	mov	r2, r3
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	0151      	lsls	r1, r2, #5
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	440a      	add	r2, r1
 8009e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	e097      	b.n	8009f4a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	0151      	lsls	r1, r2, #5
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	440a      	add	r2, r1
 8009e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 8083 	beq.w	8009f4a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	f003 030f 	and.w	r3, r3, #15
 8009e54:	2101      	movs	r1, #1
 8009e56:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5a:	6979      	ldr	r1, [r7, #20]
 8009e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e60:	4313      	orrs	r3, r2
 8009e62:	634b      	str	r3, [r1, #52]	; 0x34
 8009e64:	e071      	b.n	8009f4a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e72:	691a      	ldr	r2, [r3, #16]
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	0159      	lsls	r1, r3, #5
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	440b      	add	r3, r1
 8009e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e80:	4619      	mov	r1, r3
 8009e82:	4b36      	ldr	r3, [pc, #216]	; (8009f5c <USB_EP0StartXfer+0x2b4>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e94:	691a      	ldr	r2, [r3, #16]
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	0159      	lsls	r1, r3, #5
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	440b      	add	r3, r1
 8009e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	4b2c      	ldr	r3, [pc, #176]	; (8009f58 <USB_EP0StartXfer+0x2b0>)
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	0151      	lsls	r1, r2, #5
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	440a      	add	r2, r1
 8009ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eee:	691a      	ldr	r2, [r3, #16]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ef8:	6939      	ldr	r1, [r7, #16]
 8009efa:	0148      	lsls	r0, r1, #5
 8009efc:	6979      	ldr	r1, [r7, #20]
 8009efe:	4401      	add	r1, r0
 8009f00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f04:	4313      	orrs	r3, r2
 8009f06:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d10d      	bne.n	8009f2a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d009      	beq.n	8009f2a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	6919      	ldr	r1, [r3, #16]
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f26:	460a      	mov	r2, r1
 8009f28:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	0151      	lsls	r1, r2, #5
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	440a      	add	r2, r1
 8009f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	371c      	adds	r7, #28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	e007ffff 	.word	0xe007ffff
 8009f5c:	fff80000 	.word	0xfff80000

08009f60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	785b      	ldrb	r3, [r3, #1]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d14a      	bne.n	800a014 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f96:	f040 8086 	bne.w	800a0a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	7812      	ldrb	r2, [r2, #0]
 8009fae:	0151      	lsls	r1, r2, #5
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	440a      	add	r2, r1
 8009fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	7812      	ldrb	r2, [r2, #0]
 8009fd2:	0151      	lsls	r1, r2, #5
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	440a      	add	r2, r1
 8009fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f242 7210 	movw	r2, #10000	; 0x2710
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d902      	bls.n	8009ff8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ff6:	e056      	b.n	800a0a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a00c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a010:	d0e7      	beq.n	8009fe2 <USB_EPStopXfer+0x82>
 800a012:	e048      	b.n	800a0a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a02c:	d13b      	bne.n	800a0a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	7812      	ldrb	r2, [r2, #0]
 800a042:	0151      	lsls	r1, r2, #5
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	440a      	add	r2, r1
 800a048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a04c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a050:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	7812      	ldrb	r2, [r2, #0]
 800a066:	0151      	lsls	r1, r2, #5
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	440a      	add	r2, r1
 800a06c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a074:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a082:	4293      	cmp	r3, r2
 800a084:	d902      	bls.n	800a08c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	75fb      	strb	r3, [r7, #23]
          break;
 800a08a:	e00c      	b.n	800a0a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	4413      	add	r3, r2
 800a096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0a4:	d0e7      	beq.n	800a076 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	371c      	adds	r7, #28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b089      	sub	sp, #36	; 0x24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	71fb      	strb	r3, [r7, #7]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a0d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d123      	bne.n	800a122 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0da:	88bb      	ldrh	r3, [r7, #4]
 800a0dc:	3303      	adds	r3, #3
 800a0de:	089b      	lsrs	r3, r3, #2
 800a0e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	61bb      	str	r3, [r7, #24]
 800a0e6:	e018      	b.n	800a11a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	031a      	lsls	r2, r3, #12
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	3301      	adds	r3, #1
 800a100:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	3301      	adds	r3, #1
 800a106:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	3301      	adds	r3, #1
 800a10c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	3301      	adds	r3, #1
 800a112:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	3301      	adds	r3, #1
 800a118:	61bb      	str	r3, [r7, #24]
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d3e2      	bcc.n	800a0e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3724      	adds	r7, #36	; 0x24
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a130:	b480      	push	{r7}
 800a132:	b08b      	sub	sp, #44	; 0x2c
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	4613      	mov	r3, r2
 800a13c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	089b      	lsrs	r3, r3, #2
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a14e:	88fb      	ldrh	r3, [r7, #6]
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a156:	2300      	movs	r3, #0
 800a158:	623b      	str	r3, [r7, #32]
 800a15a:	e014      	b.n	800a186 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	601a      	str	r2, [r3, #0]
    pDest++;
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	3301      	adds	r3, #1
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	3301      	adds	r3, #1
 800a172:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	3301      	adds	r3, #1
 800a178:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	3301      	adds	r3, #1
 800a17e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	3301      	adds	r3, #1
 800a184:	623b      	str	r3, [r7, #32]
 800a186:	6a3a      	ldr	r2, [r7, #32]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d3e6      	bcc.n	800a15c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a18e:	8bfb      	ldrh	r3, [r7, #30]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01e      	beq.n	800a1d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a19e:	461a      	mov	r2, r3
 800a1a0:	f107 0310 	add.w	r3, r7, #16
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	701a      	strb	r2, [r3, #0]
      i++;
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	623b      	str	r3, [r7, #32]
      pDest++;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a1c6:	8bfb      	ldrh	r3, [r7, #30]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a1cc:	8bfb      	ldrh	r3, [r7, #30]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1ea      	bne.n	800a1a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	372c      	adds	r7, #44	; 0x2c
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d12c      	bne.n	800a256 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	db12      	blt.n	800a234 <USB_EPSetStall+0x54>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00f      	beq.n	800a234 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	0151      	lsls	r1, r2, #5
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	440a      	add	r2, r1
 800a22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a22e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a232:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	0151      	lsls	r1, r2, #5
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	440a      	add	r2, r1
 800a24a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a24e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a252:	6013      	str	r3, [r2, #0]
 800a254:	e02b      	b.n	800a2ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	db12      	blt.n	800a28e <USB_EPSetStall+0xae>
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00f      	beq.n	800a28e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	0151      	lsls	r1, r2, #5
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	440a      	add	r2, r1
 800a284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a28c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	0151      	lsls	r1, r2, #5
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	440a      	add	r2, r1
 800a2a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	785b      	ldrb	r3, [r3, #1]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d128      	bne.n	800a32a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	0151      	lsls	r1, r2, #5
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	440a      	add	r2, r1
 800a2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	791b      	ldrb	r3, [r3, #4]
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d003      	beq.n	800a308 <USB_EPClearStall+0x4c>
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	791b      	ldrb	r3, [r3, #4]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d138      	bne.n	800a37a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	e027      	b.n	800a37a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a344:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a348:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	791b      	ldrb	r3, [r3, #4]
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d003      	beq.n	800a35a <USB_EPClearStall+0x9e>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	791b      	ldrb	r3, [r3, #4]
 800a356:	2b02      	cmp	r3, #2
 800a358:	d10f      	bne.n	800a37a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	0151      	lsls	r1, r2, #5
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	440a      	add	r2, r1
 800a370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a378:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a3aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	011b      	lsls	r3, r3, #4
 800a3b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a3bc:	68f9      	ldr	r1, [r7, #12]
 800a3be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3ee:	f023 0303 	bic.w	r3, r3, #3
 800a3f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a402:	f023 0302 	bic.w	r3, r3, #2
 800a406:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a430:	f023 0303 	bic.w	r3, r3, #3
 800a434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a444:	f043 0302 	orr.w	r3, r3, #2
 800a448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	4013      	ands	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a470:	68fb      	ldr	r3, [r7, #12]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	0c1b      	lsrs	r3, r3, #16
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b085      	sub	sp, #20
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	b29b      	uxth	r3, r3
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a4f6:	78fb      	ldrb	r3, [r7, #3]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	4013      	ands	r3, r2
 800a512:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a514:	68bb      	ldr	r3, [r7, #8]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a522:	b480      	push	{r7}
 800a524:	b087      	sub	sp, #28
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	460b      	mov	r3, r1
 800a52c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a544:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	f003 030f 	and.w	r3, r3, #15
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	fa22 f303 	lsr.w	r3, r2, r3
 800a552:	01db      	lsls	r3, r3, #7
 800a554:	b2db      	uxtb	r3, r3
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	4313      	orrs	r3, r2
 800a55a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	4013      	ands	r3, r2
 800a56e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a570:	68bb      	ldr	r3, [r7, #8]
}
 800a572:	4618      	mov	r0, r3
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	f003 0301 	and.w	r3, r3, #1
}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
	...

0800a59c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <USB_ActivateSetup+0x44>)
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	fffff800 	.word	0xfffff800

0800a5e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	607a      	str	r2, [r7, #4]
 800a5f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	333c      	adds	r3, #60	; 0x3c
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	4a26      	ldr	r2, [pc, #152]	; (800a69c <USB_EP0_OutStart+0xb8>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d90a      	bls.n	800a61e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a618:	d101      	bne.n	800a61e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	e037      	b.n	800a68e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a624:	461a      	mov	r2, r3
 800a626:	2300      	movs	r3, #0
 800a628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a63c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a64c:	f043 0318 	orr.w	r3, r3, #24
 800a650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a660:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a664:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a666:	7afb      	ldrb	r3, [r7, #11]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d10f      	bne.n	800a68c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a672:	461a      	mov	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a686:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a68a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	4f54300a 	.word	0x4f54300a

0800a6a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4a13      	ldr	r2, [pc, #76]	; (800a704 <USB_CoreReset+0x64>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d901      	bls.n	800a6be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e01b      	b.n	800a6f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	daf2      	bge.n	800a6ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	f043 0201 	orr.w	r2, r3, #1
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4a09      	ldr	r2, [pc, #36]	; (800a704 <USB_CoreReset+0x64>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d901      	bls.n	800a6e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e006      	b.n	800a6f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	f003 0301 	and.w	r3, r3, #1
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d0f0      	beq.n	800a6d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3714      	adds	r7, #20
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	00030d40 	.word	0x00030d40

0800a708 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a70c:	4904      	ldr	r1, [pc, #16]	; (800a720 <MX_FATFS_Init+0x18>)
 800a70e:	4805      	ldr	r0, [pc, #20]	; (800a724 <MX_FATFS_Init+0x1c>)
 800a710:	f005 fa82 	bl	800fc18 <FATFS_LinkDriver>
 800a714:	4603      	mov	r3, r0
 800a716:	461a      	mov	r2, r3
 800a718:	4b03      	ldr	r3, [pc, #12]	; (800a728 <MX_FATFS_Init+0x20>)
 800a71a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a71c:	bf00      	nop
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	20005734 	.word	0x20005734
 800a724:	08012170 	.word	0x08012170
 800a728:	20005730 	.word	0x20005730

0800a72c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a730:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a732:	4618      	mov	r0, r3
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a746:	f000 f888 	bl	800a85a <BSP_SD_IsDetected>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d001      	beq.n	800a754 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a750:	2302      	movs	r3, #2
 800a752:	e005      	b.n	800a760 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a754:	4804      	ldr	r0, [pc, #16]	; (800a768 <BSP_SD_Init+0x2c>)
 800a756:	f7fc f845 	bl	80067e4 <HAL_SD_Init>
 800a75a:	4603      	mov	r3, r0
 800a75c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a75e:	79fb      	ldrb	r3, [r7, #7]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	20000200 	.word	0x20000200

0800a76c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	68f9      	ldr	r1, [r7, #12]
 800a782:	4806      	ldr	r0, [pc, #24]	; (800a79c <BSP_SD_ReadBlocks_DMA+0x30>)
 800a784:	f7fc f8e6 	bl	8006954 <HAL_SD_ReadBlocks_DMA>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a792:	7dfb      	ldrb	r3, [r7, #23]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3718      	adds	r7, #24
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	20000200 	.word	0x20000200

0800a7a0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	68f9      	ldr	r1, [r7, #12]
 800a7b6:	4806      	ldr	r0, [pc, #24]	; (800a7d0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a7b8:	f7fc f9ae 	bl	8006b18 <HAL_SD_WriteBlocks_DMA>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20000200 	.word	0x20000200

0800a7d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7d8:	4805      	ldr	r0, [pc, #20]	; (800a7f0 <BSP_SD_GetCardState+0x1c>)
 800a7da:	f7fc fdd3 	bl	8007384 <HAL_SD_GetCardState>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b04      	cmp	r3, #4
 800a7e2:	bf14      	ite	ne
 800a7e4:	2301      	movne	r3, #1
 800a7e6:	2300      	moveq	r3, #0
 800a7e8:	b2db      	uxtb	r3, r3
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20000200 	.word	0x20000200

0800a7f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	4803      	ldr	r0, [pc, #12]	; (800a80c <BSP_SD_GetCardInfo+0x18>)
 800a800:	f7fc fd94 	bl	800732c <HAL_SD_GetCardInfo>
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20000200 	.word	0x20000200

0800a810 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a818:	f000 f818 	bl	800a84c <BSP_SD_AbortCallback>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a82c:	f000 f9a8 	bl	800ab80 <BSP_SD_WriteCpltCallback>
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a840:	f000 f9aa 	bl	800ab98 <BSP_SD_ReadCpltCallback>
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0

}
 800a850:	bf00      	nop
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a860:	2301      	movs	r3, #1
 800a862:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a864:	f000 f80c 	bl	800a880 <BSP_PlatformIsDetected>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a86e:	2300      	movs	r3, #0
 800a870:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	b2db      	uxtb	r3, r3
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a886:	2301      	movs	r3, #1
 800a888:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a88a:	2104      	movs	r1, #4
 800a88c:	4806      	ldr	r0, [pc, #24]	; (800a8a8 <BSP_PlatformIsDetected+0x28>)
 800a88e:	f7f8 fe21 	bl	80034d4 <HAL_GPIO_ReadPin>
 800a892:	4603      	mov	r3, r0
 800a894:	2b01      	cmp	r3, #1
 800a896:	d001      	beq.n	800a89c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a898:	2300      	movs	r3, #0
 800a89a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a89c:	79fb      	ldrb	r3, [r7, #7]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	40021800 	.word	0x40021800

0800a8ac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a8b4:	f7f7 f976 	bl	8001ba4 <HAL_GetTick>
 800a8b8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a8ba:	e006      	b.n	800a8ca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a8bc:	f7ff ff8a 	bl	800a7d4 <BSP_SD_GetCardState>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e009      	b.n	800a8de <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a8ca:	f7f7 f96b 	bl	8001ba4 <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d8f0      	bhi.n	800a8bc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a8da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
	...

0800a8e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a8f2:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <SD_CheckStatus+0x38>)
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a8f8:	f7ff ff6c 	bl	800a7d4 <BSP_SD_GetCardState>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d107      	bne.n	800a912 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a902:	4b07      	ldr	r3, [pc, #28]	; (800a920 <SD_CheckStatus+0x38>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	b2db      	uxtb	r3, r3
 800a908:	f023 0301 	bic.w	r3, r3, #1
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	4b04      	ldr	r3, [pc, #16]	; (800a920 <SD_CheckStatus+0x38>)
 800a910:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a912:	4b03      	ldr	r3, [pc, #12]	; (800a920 <SD_CheckStatus+0x38>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	b2db      	uxtb	r3, r3
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20000009 	.word	0x20000009

0800a924 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a92e:	f7ff ff05 	bl	800a73c <BSP_SD_Init>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d107      	bne.n	800a948 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff ffd4 	bl	800a8e8 <SD_CheckStatus>
 800a940:	4603      	mov	r3, r0
 800a942:	461a      	mov	r2, r3
 800a944:	4b04      	ldr	r3, [pc, #16]	; (800a958 <SD_initialize+0x34>)
 800a946:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a948:	4b03      	ldr	r3, [pc, #12]	; (800a958 <SD_initialize+0x34>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	b2db      	uxtb	r3, r3
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20000009 	.word	0x20000009

0800a95c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	4603      	mov	r3, r0
 800a964:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff ffbd 	bl	800a8e8 <SD_CheckStatus>
 800a96e:	4603      	mov	r3, r0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	607a      	str	r2, [r7, #4]
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a98c:	f247 5030 	movw	r0, #30000	; 0x7530
 800a990:	f7ff ff8c 	bl	800a8ac <SD_CheckStatusWithTimeout>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	da01      	bge.n	800a99e <SD_read+0x26>
  {
    return res;
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	e03b      	b.n	800aa16 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	68b8      	ldr	r0, [r7, #8]
 800a9a4:	f7ff fee2 	bl	800a76c <BSP_SD_ReadBlocks_DMA>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d132      	bne.n	800aa14 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a9ae:	4b1c      	ldr	r3, [pc, #112]	; (800aa20 <SD_read+0xa8>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a9b4:	f7f7 f8f6 	bl	8001ba4 <HAL_GetTick>
 800a9b8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a9ba:	bf00      	nop
 800a9bc:	4b18      	ldr	r3, [pc, #96]	; (800aa20 <SD_read+0xa8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d108      	bne.n	800a9d6 <SD_read+0x5e>
 800a9c4:	f7f7 f8ee 	bl	8001ba4 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d9f2      	bls.n	800a9bc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a9d6:	4b12      	ldr	r3, [pc, #72]	; (800aa20 <SD_read+0xa8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d102      	bne.n	800a9e4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	75fb      	strb	r3, [r7, #23]
 800a9e2:	e017      	b.n	800aa14 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a9e4:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <SD_read+0xa8>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a9ea:	f7f7 f8db 	bl	8001ba4 <HAL_GetTick>
 800a9ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a9f0:	e007      	b.n	800aa02 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9f2:	f7ff feef 	bl	800a7d4 <BSP_SD_GetCardState>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d102      	bne.n	800aa02 <SD_read+0x8a>
          {
            res = RES_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aa00:	e008      	b.n	800aa14 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa02:	f7f7 f8cf 	bl	8001ba4 <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d9ee      	bls.n	800a9f2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20005ba0 	.word	0x20005ba0

0800aa24 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60b9      	str	r1, [r7, #8]
 800aa2c:	607a      	str	r2, [r7, #4]
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	4603      	mov	r3, r0
 800aa32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aa38:	4b24      	ldr	r3, [pc, #144]	; (800aacc <SD_write+0xa8>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa3e:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa42:	f7ff ff33 	bl	800a8ac <SD_CheckStatusWithTimeout>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	da01      	bge.n	800aa50 <SD_write+0x2c>
  {
    return res;
 800aa4c:	7dfb      	ldrb	r3, [r7, #23]
 800aa4e:	e038      	b.n	800aac2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	6879      	ldr	r1, [r7, #4]
 800aa54:	68b8      	ldr	r0, [r7, #8]
 800aa56:	f7ff fea3 	bl	800a7a0 <BSP_SD_WriteBlocks_DMA>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d12f      	bne.n	800aac0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aa60:	f7f7 f8a0 	bl	8001ba4 <HAL_GetTick>
 800aa64:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aa66:	bf00      	nop
 800aa68:	4b18      	ldr	r3, [pc, #96]	; (800aacc <SD_write+0xa8>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d108      	bne.n	800aa82 <SD_write+0x5e>
 800aa70:	f7f7 f898 	bl	8001ba4 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d9f2      	bls.n	800aa68 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800aa82:	4b12      	ldr	r3, [pc, #72]	; (800aacc <SD_write+0xa8>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d102      	bne.n	800aa90 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	75fb      	strb	r3, [r7, #23]
 800aa8e:	e017      	b.n	800aac0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800aa90:	4b0e      	ldr	r3, [pc, #56]	; (800aacc <SD_write+0xa8>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aa96:	f7f7 f885 	bl	8001ba4 <HAL_GetTick>
 800aa9a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa9c:	e007      	b.n	800aaae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa9e:	f7ff fe99 	bl	800a7d4 <BSP_SD_GetCardState>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d102      	bne.n	800aaae <SD_write+0x8a>
          {
            res = RES_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	75fb      	strb	r3, [r7, #23]
            break;
 800aaac:	e008      	b.n	800aac0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aaae:	f7f7 f879 	bl	8001ba4 <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	f247 522f 	movw	r2, #29999	; 0x752f
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d9ee      	bls.n	800aa9e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	20005b9c 	.word	0x20005b9c

0800aad0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08c      	sub	sp, #48	; 0x30
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	4603      	mov	r3, r0
 800aad8:	603a      	str	r2, [r7, #0]
 800aada:	71fb      	strb	r3, [r7, #7]
 800aadc:	460b      	mov	r3, r1
 800aade:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aae6:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <SD_ioctl+0xac>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <SD_ioctl+0x28>
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e03c      	b.n	800ab72 <SD_ioctl+0xa2>

  switch (cmd)
 800aaf8:	79bb      	ldrb	r3, [r7, #6]
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d834      	bhi.n	800ab68 <SD_ioctl+0x98>
 800aafe:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <SD_ioctl+0x34>)
 800ab00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab04:	0800ab15 	.word	0x0800ab15
 800ab08:	0800ab1d 	.word	0x0800ab1d
 800ab0c:	0800ab35 	.word	0x0800ab35
 800ab10:	0800ab4f 	.word	0x0800ab4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab1a:	e028      	b.n	800ab6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab1c:	f107 030c 	add.w	r3, r7, #12
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff fe67 	bl	800a7f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ab26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab32:	e01c      	b.n	800ab6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab34:	f107 030c 	add.w	r3, r7, #12
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff fe5b 	bl	800a7f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ab3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab4c:	e00f      	b.n	800ab6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab4e:	f107 030c 	add.w	r3, r7, #12
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7ff fe4e 	bl	800a7f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	0a5a      	lsrs	r2, r3, #9
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab66:	e002      	b.n	800ab6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ab68:	2304      	movs	r3, #4
 800ab6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ab6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3730      	adds	r7, #48	; 0x30
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20000009 	.word	0x20000009

0800ab80 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ab80:	b480      	push	{r7}
 800ab82:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ab84:	4b03      	ldr	r3, [pc, #12]	; (800ab94 <BSP_SD_WriteCpltCallback+0x14>)
 800ab86:	2201      	movs	r2, #1
 800ab88:	601a      	str	r2, [r3, #0]
}
 800ab8a:	bf00      	nop
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	20005b9c 	.word	0x20005b9c

0800ab98 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ab9c:	4b03      	ldr	r3, [pc, #12]	; (800abac <BSP_SD_ReadCpltCallback+0x14>)
 800ab9e:	2201      	movs	r2, #1
 800aba0:	601a      	str	r2, [r3, #0]
}
 800aba2:	bf00      	nop
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	20005ba0 	.word	0x20005ba0

0800abb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800abc0:	f005 fe86 	bl	80108d0 <malloc>
 800abc4:	4603      	mov	r3, r0
 800abc6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d109      	bne.n	800abe2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	32b0      	adds	r2, #176	; 0xb0
 800abd8:	2100      	movs	r1, #0
 800abda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800abde:	2302      	movs	r3, #2
 800abe0:	e0d4      	b.n	800ad8c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800abe2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800abe6:	2100      	movs	r1, #0
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f006 f92c 	bl	8010e46 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	32b0      	adds	r2, #176	; 0xb0
 800abf8:	68f9      	ldr	r1, [r7, #12]
 800abfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	32b0      	adds	r2, #176	; 0xb0
 800ac08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	7c1b      	ldrb	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d138      	bne.n	800ac8c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac1a:	4b5e      	ldr	r3, [pc, #376]	; (800ad94 <USBD_CDC_Init+0x1e4>)
 800ac1c:	7819      	ldrb	r1, [r3, #0]
 800ac1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac22:	2202      	movs	r2, #2
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f005 fcb0 	bl	801058a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac2a:	4b5a      	ldr	r3, [pc, #360]	; (800ad94 <USBD_CDC_Init+0x1e4>)
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	f003 020f 	and.w	r2, r3, #15
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	4613      	mov	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	440b      	add	r3, r1
 800ac3e:	3324      	adds	r3, #36	; 0x24
 800ac40:	2201      	movs	r2, #1
 800ac42:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac44:	4b54      	ldr	r3, [pc, #336]	; (800ad98 <USBD_CDC_Init+0x1e8>)
 800ac46:	7819      	ldrb	r1, [r3, #0]
 800ac48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f005 fc9b 	bl	801058a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac54:	4b50      	ldr	r3, [pc, #320]	; (800ad98 <USBD_CDC_Init+0x1e8>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	f003 020f 	and.w	r2, r3, #15
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	440b      	add	r3, r1
 800ac68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac70:	4b4a      	ldr	r3, [pc, #296]	; (800ad9c <USBD_CDC_Init+0x1ec>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 020f 	and.w	r2, r3, #15
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	3326      	adds	r3, #38	; 0x26
 800ac86:	2210      	movs	r2, #16
 800ac88:	801a      	strh	r2, [r3, #0]
 800ac8a:	e035      	b.n	800acf8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac8c:	4b41      	ldr	r3, [pc, #260]	; (800ad94 <USBD_CDC_Init+0x1e4>)
 800ac8e:	7819      	ldrb	r1, [r3, #0]
 800ac90:	2340      	movs	r3, #64	; 0x40
 800ac92:	2202      	movs	r2, #2
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f005 fc78 	bl	801058a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac9a:	4b3e      	ldr	r3, [pc, #248]	; (800ad94 <USBD_CDC_Init+0x1e4>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	f003 020f 	and.w	r2, r3, #15
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	440b      	add	r3, r1
 800acae:	3324      	adds	r3, #36	; 0x24
 800acb0:	2201      	movs	r2, #1
 800acb2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acb4:	4b38      	ldr	r3, [pc, #224]	; (800ad98 <USBD_CDC_Init+0x1e8>)
 800acb6:	7819      	ldrb	r1, [r3, #0]
 800acb8:	2340      	movs	r3, #64	; 0x40
 800acba:	2202      	movs	r2, #2
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f005 fc64 	bl	801058a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acc2:	4b35      	ldr	r3, [pc, #212]	; (800ad98 <USBD_CDC_Init+0x1e8>)
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	f003 020f 	and.w	r2, r3, #15
 800acca:	6879      	ldr	r1, [r7, #4]
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	440b      	add	r3, r1
 800acd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acda:	2201      	movs	r2, #1
 800acdc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800acde:	4b2f      	ldr	r3, [pc, #188]	; (800ad9c <USBD_CDC_Init+0x1ec>)
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	f003 020f 	and.w	r2, r3, #15
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	4613      	mov	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4413      	add	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	440b      	add	r3, r1
 800acf2:	3326      	adds	r3, #38	; 0x26
 800acf4:	2210      	movs	r2, #16
 800acf6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acf8:	4b28      	ldr	r3, [pc, #160]	; (800ad9c <USBD_CDC_Init+0x1ec>)
 800acfa:	7819      	ldrb	r1, [r3, #0]
 800acfc:	2308      	movs	r3, #8
 800acfe:	2203      	movs	r2, #3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f005 fc42 	bl	801058a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad06:	4b25      	ldr	r3, [pc, #148]	; (800ad9c <USBD_CDC_Init+0x1ec>)
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	f003 020f 	and.w	r2, r3, #15
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4613      	mov	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	440b      	add	r3, r1
 800ad1a:	3324      	adds	r3, #36	; 0x24
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	33b0      	adds	r3, #176	; 0xb0
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800ad56:	2302      	movs	r3, #2
 800ad58:	e018      	b.n	800ad8c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7c1b      	ldrb	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10a      	bne.n	800ad78 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad62:	4b0d      	ldr	r3, [pc, #52]	; (800ad98 <USBD_CDC_Init+0x1e8>)
 800ad64:	7819      	ldrb	r1, [r3, #0]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f005 fcf9 	bl	8010768 <USBD_LL_PrepareReceive>
 800ad76:	e008      	b.n	800ad8a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad78:	4b07      	ldr	r3, [pc, #28]	; (800ad98 <USBD_CDC_Init+0x1e8>)
 800ad7a:	7819      	ldrb	r1, [r3, #0]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad82:	2340      	movs	r3, #64	; 0x40
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f005 fcef 	bl	8010768 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	20000093 	.word	0x20000093
 800ad98:	20000094 	.word	0x20000094
 800ad9c:	20000095 	.word	0x20000095

0800ada0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800adac:	4b3a      	ldr	r3, [pc, #232]	; (800ae98 <USBD_CDC_DeInit+0xf8>)
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f005 fc0f 	bl	80105d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800adb8:	4b37      	ldr	r3, [pc, #220]	; (800ae98 <USBD_CDC_DeInit+0xf8>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f003 020f 	and.w	r2, r3, #15
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	4613      	mov	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	440b      	add	r3, r1
 800adcc:	3324      	adds	r3, #36	; 0x24
 800adce:	2200      	movs	r2, #0
 800add0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800add2:	4b32      	ldr	r3, [pc, #200]	; (800ae9c <USBD_CDC_DeInit+0xfc>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f005 fbfc 	bl	80105d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800adde:	4b2f      	ldr	r3, [pc, #188]	; (800ae9c <USBD_CDC_DeInit+0xfc>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	f003 020f 	and.w	r2, r3, #15
 800ade6:	6879      	ldr	r1, [r7, #4]
 800ade8:	4613      	mov	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	440b      	add	r3, r1
 800adf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adf6:	2200      	movs	r2, #0
 800adf8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800adfa:	4b29      	ldr	r3, [pc, #164]	; (800aea0 <USBD_CDC_DeInit+0x100>)
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f005 fbe8 	bl	80105d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae06:	4b26      	ldr	r3, [pc, #152]	; (800aea0 <USBD_CDC_DeInit+0x100>)
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	f003 020f 	and.w	r2, r3, #15
 800ae0e:	6879      	ldr	r1, [r7, #4]
 800ae10:	4613      	mov	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	440b      	add	r3, r1
 800ae1a:	3324      	adds	r3, #36	; 0x24
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae20:	4b1f      	ldr	r3, [pc, #124]	; (800aea0 <USBD_CDC_DeInit+0x100>)
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	f003 020f 	and.w	r2, r3, #15
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	440b      	add	r3, r1
 800ae34:	3326      	adds	r3, #38	; 0x26
 800ae36:	2200      	movs	r2, #0
 800ae38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	32b0      	adds	r2, #176	; 0xb0
 800ae44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d01f      	beq.n	800ae8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	33b0      	adds	r3, #176	; 0xb0
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	32b0      	adds	r2, #176	; 0xb0
 800ae6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f005 fd36 	bl	80108e0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	32b0      	adds	r2, #176	; 0xb0
 800ae7e:	2100      	movs	r1, #0
 800ae80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20000093 	.word	0x20000093
 800ae9c:	20000094 	.word	0x20000094
 800aea0:	20000095 	.word	0x20000095

0800aea4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	32b0      	adds	r2, #176	; 0xb0
 800aeb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aebc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e0bf      	b.n	800b054 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d050      	beq.n	800af82 <USBD_CDC_Setup+0xde>
 800aee0:	2b20      	cmp	r3, #32
 800aee2:	f040 80af 	bne.w	800b044 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	88db      	ldrh	r3, [r3, #6]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d03a      	beq.n	800af64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	b25b      	sxtb	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	da1b      	bge.n	800af30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	33b0      	adds	r3, #176	; 0xb0
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	88d2      	ldrh	r2, [r2, #6]
 800af14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	88db      	ldrh	r3, [r3, #6]
 800af1a:	2b07      	cmp	r3, #7
 800af1c:	bf28      	it	cs
 800af1e:	2307      	movcs	r3, #7
 800af20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	89fa      	ldrh	r2, [r7, #14]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f001 fdad 	bl	800ca88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af2e:	e090      	b.n	800b052 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	785a      	ldrb	r2, [r3, #1]
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	88db      	ldrh	r3, [r3, #6]
 800af3e:	2b3f      	cmp	r3, #63	; 0x3f
 800af40:	d803      	bhi.n	800af4a <USBD_CDC_Setup+0xa6>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	88db      	ldrh	r3, [r3, #6]
 800af46:	b2da      	uxtb	r2, r3
 800af48:	e000      	b.n	800af4c <USBD_CDC_Setup+0xa8>
 800af4a:	2240      	movs	r2, #64	; 0x40
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af52:	6939      	ldr	r1, [r7, #16]
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800af5a:	461a      	mov	r2, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f001 fdbf 	bl	800cae0 <USBD_CtlPrepareRx>
      break;
 800af62:	e076      	b.n	800b052 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	33b0      	adds	r3, #176	; 0xb0
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	7850      	ldrb	r0, [r2, #1]
 800af7a:	2200      	movs	r2, #0
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	4798      	blx	r3
      break;
 800af80:	e067      	b.n	800b052 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	785b      	ldrb	r3, [r3, #1]
 800af86:	2b0b      	cmp	r3, #11
 800af88:	d851      	bhi.n	800b02e <USBD_CDC_Setup+0x18a>
 800af8a:	a201      	add	r2, pc, #4	; (adr r2, 800af90 <USBD_CDC_Setup+0xec>)
 800af8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af90:	0800afc1 	.word	0x0800afc1
 800af94:	0800b03d 	.word	0x0800b03d
 800af98:	0800b02f 	.word	0x0800b02f
 800af9c:	0800b02f 	.word	0x0800b02f
 800afa0:	0800b02f 	.word	0x0800b02f
 800afa4:	0800b02f 	.word	0x0800b02f
 800afa8:	0800b02f 	.word	0x0800b02f
 800afac:	0800b02f 	.word	0x0800b02f
 800afb0:	0800b02f 	.word	0x0800b02f
 800afb4:	0800b02f 	.word	0x0800b02f
 800afb8:	0800afeb 	.word	0x0800afeb
 800afbc:	0800b015 	.word	0x0800b015
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d107      	bne.n	800afdc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afcc:	f107 030a 	add.w	r3, r7, #10
 800afd0:	2202      	movs	r2, #2
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fd57 	bl	800ca88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afda:	e032      	b.n	800b042 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 fce1 	bl	800c9a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800afe4:	2303      	movs	r3, #3
 800afe6:	75fb      	strb	r3, [r7, #23]
          break;
 800afe8:	e02b      	b.n	800b042 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d107      	bne.n	800b006 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aff6:	f107 030d 	add.w	r3, r7, #13
 800affa:	2201      	movs	r2, #1
 800affc:	4619      	mov	r1, r3
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f001 fd42 	bl	800ca88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b004:	e01d      	b.n	800b042 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f001 fccc 	bl	800c9a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b00e:	2303      	movs	r3, #3
 800b010:	75fb      	strb	r3, [r7, #23]
          break;
 800b012:	e016      	b.n	800b042 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d00f      	beq.n	800b040 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 fcbf 	bl	800c9a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b028:	2303      	movs	r3, #3
 800b02a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b02c:	e008      	b.n	800b040 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 fcb8 	bl	800c9a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b036:	2303      	movs	r3, #3
 800b038:	75fb      	strb	r3, [r7, #23]
          break;
 800b03a:	e002      	b.n	800b042 <USBD_CDC_Setup+0x19e>
          break;
 800b03c:	bf00      	nop
 800b03e:	e008      	b.n	800b052 <USBD_CDC_Setup+0x1ae>
          break;
 800b040:	bf00      	nop
      }
      break;
 800b042:	e006      	b.n	800b052 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 fcad 	bl	800c9a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b04c:	2303      	movs	r3, #3
 800b04e:	75fb      	strb	r3, [r7, #23]
      break;
 800b050:	bf00      	nop
  }

  return (uint8_t)ret;
 800b052:	7dfb      	ldrb	r3, [r7, #23]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b06e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	32b0      	adds	r2, #176	; 0xb0
 800b07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b082:	2303      	movs	r3, #3
 800b084:	e065      	b.n	800b152 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	32b0      	adds	r2, #176	; 0xb0
 800b090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b094:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b096:	78fb      	ldrb	r3, [r7, #3]
 800b098:	f003 020f 	and.w	r2, r3, #15
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	440b      	add	r3, r1
 800b0a8:	3318      	adds	r3, #24
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d02f      	beq.n	800b110 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0b0:	78fb      	ldrb	r3, [r7, #3]
 800b0b2:	f003 020f 	and.w	r2, r3, #15
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	3318      	adds	r3, #24
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	78fb      	ldrb	r3, [r7, #3]
 800b0c8:	f003 010f 	and.w	r1, r3, #15
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	00db      	lsls	r3, r3, #3
 800b0d2:	440b      	add	r3, r1
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4403      	add	r3, r0
 800b0d8:	3348      	adds	r3, #72	; 0x48
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0e0:	fb01 f303 	mul.w	r3, r1, r3
 800b0e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d112      	bne.n	800b110 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0ea:	78fb      	ldrb	r3, [r7, #3]
 800b0ec:	f003 020f 	and.w	r2, r3, #15
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	440b      	add	r3, r1
 800b0fc:	3318      	adds	r3, #24
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b102:	78f9      	ldrb	r1, [r7, #3]
 800b104:	2300      	movs	r3, #0
 800b106:	2200      	movs	r2, #0
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f005 fb0c 	bl	8010726 <USBD_LL_Transmit>
 800b10e:	e01f      	b.n	800b150 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2200      	movs	r2, #0
 800b114:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	33b0      	adds	r3, #176	; 0xb0
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4413      	add	r3, r2
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d010      	beq.n	800b150 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	33b0      	adds	r3, #176	; 0xb0
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4413      	add	r3, r2
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b14c:	78fa      	ldrb	r2, [r7, #3]
 800b14e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	460b      	mov	r3, r1
 800b164:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	32b0      	adds	r2, #176	; 0xb0
 800b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b174:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	32b0      	adds	r2, #176	; 0xb0
 800b180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d101      	bne.n	800b18c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b188:	2303      	movs	r3, #3
 800b18a:	e01a      	b.n	800b1c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b18c:	78fb      	ldrb	r3, [r7, #3]
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f005 fb0a 	bl	80107aa <USBD_LL_GetRxDataSize>
 800b196:	4602      	mov	r2, r0
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	33b0      	adds	r3, #176	; 0xb0
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b1bc:	4611      	mov	r1, r2
 800b1be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	32b0      	adds	r2, #176	; 0xb0
 800b1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e025      	b.n	800b238 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	33b0      	adds	r3, #176	; 0xb0
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d01a      	beq.n	800b236 <USBD_CDC_EP0_RxReady+0x6c>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b206:	2bff      	cmp	r3, #255	; 0xff
 800b208:	d015      	beq.n	800b236 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	33b0      	adds	r3, #176	; 0xb0
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b222:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b22a:	b292      	uxth	r2, r2
 800b22c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	22ff      	movs	r2, #255	; 0xff
 800b232:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b248:	2182      	movs	r1, #130	; 0x82
 800b24a:	4818      	ldr	r0, [pc, #96]	; (800b2ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b24c:	f000 fd49 	bl	800bce2 <USBD_GetEpDesc>
 800b250:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b252:	2101      	movs	r1, #1
 800b254:	4815      	ldr	r0, [pc, #84]	; (800b2ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b256:	f000 fd44 	bl	800bce2 <USBD_GetEpDesc>
 800b25a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b25c:	2181      	movs	r1, #129	; 0x81
 800b25e:	4813      	ldr	r0, [pc, #76]	; (800b2ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b260:	f000 fd3f 	bl	800bce2 <USBD_GetEpDesc>
 800b264:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2210      	movs	r2, #16
 800b270:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d006      	beq.n	800b286 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b280:	711a      	strb	r2, [r3, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d006      	beq.n	800b29a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b294:	711a      	strb	r2, [r3, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2243      	movs	r2, #67	; 0x43
 800b29e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2a0:	4b02      	ldr	r3, [pc, #8]	; (800b2ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000050 	.word	0x20000050

0800b2b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2b8:	2182      	movs	r1, #130	; 0x82
 800b2ba:	4818      	ldr	r0, [pc, #96]	; (800b31c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2bc:	f000 fd11 	bl	800bce2 <USBD_GetEpDesc>
 800b2c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	4815      	ldr	r0, [pc, #84]	; (800b31c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2c6:	f000 fd0c 	bl	800bce2 <USBD_GetEpDesc>
 800b2ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2cc:	2181      	movs	r1, #129	; 0x81
 800b2ce:	4813      	ldr	r0, [pc, #76]	; (800b31c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2d0:	f000 fd07 	bl	800bce2 <USBD_GetEpDesc>
 800b2d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2210      	movs	r2, #16
 800b2e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d006      	beq.n	800b2f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	711a      	strb	r2, [r3, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f042 0202 	orr.w	r2, r2, #2
 800b2f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d006      	beq.n	800b30a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	711a      	strb	r2, [r3, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f042 0202 	orr.w	r2, r2, #2
 800b308:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2243      	movs	r2, #67	; 0x43
 800b30e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b310:	4b02      	ldr	r3, [pc, #8]	; (800b31c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b312:	4618      	mov	r0, r3
 800b314:	3718      	adds	r7, #24
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20000050 	.word	0x20000050

0800b320 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b328:	2182      	movs	r1, #130	; 0x82
 800b32a:	4818      	ldr	r0, [pc, #96]	; (800b38c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b32c:	f000 fcd9 	bl	800bce2 <USBD_GetEpDesc>
 800b330:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b332:	2101      	movs	r1, #1
 800b334:	4815      	ldr	r0, [pc, #84]	; (800b38c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b336:	f000 fcd4 	bl	800bce2 <USBD_GetEpDesc>
 800b33a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b33c:	2181      	movs	r1, #129	; 0x81
 800b33e:	4813      	ldr	r0, [pc, #76]	; (800b38c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b340:	f000 fccf 	bl	800bce2 <USBD_GetEpDesc>
 800b344:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2210      	movs	r2, #16
 800b350:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d006      	beq.n	800b366 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b360:	711a      	strb	r2, [r3, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d006      	beq.n	800b37a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b374:	711a      	strb	r2, [r3, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2243      	movs	r2, #67	; 0x43
 800b37e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b382:	4618      	mov	r0, r3
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20000050 	.word	0x20000050

0800b390 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	220a      	movs	r2, #10
 800b39c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b39e:	4b03      	ldr	r3, [pc, #12]	; (800b3ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	2000000c 	.word	0x2000000c

0800b3b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	e009      	b.n	800b3d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	33b0      	adds	r3, #176	; 0xb0
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	32b0      	adds	r2, #176	; 0xb0
 800b3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b406:	2303      	movs	r3, #3
 800b408:	e008      	b.n	800b41c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	371c      	adds	r7, #28
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	32b0      	adds	r2, #176	; 0xb0
 800b43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b440:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b448:	2303      	movs	r3, #3
 800b44a:	e004      	b.n	800b456 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
	...

0800b464 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	32b0      	adds	r2, #176	; 0xb0
 800b476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b47a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b47c:	2301      	movs	r3, #1
 800b47e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d101      	bne.n	800b48a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b486:	2303      	movs	r3, #3
 800b488:	e025      	b.n	800b4d6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b490:	2b00      	cmp	r3, #0
 800b492:	d11f      	bne.n	800b4d4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2201      	movs	r2, #1
 800b498:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b49c:	4b10      	ldr	r3, [pc, #64]	; (800b4e0 <USBD_CDC_TransmitPacket+0x7c>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	f003 020f 	and.w	r2, r3, #15
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4403      	add	r3, r0
 800b4b6:	3318      	adds	r3, #24
 800b4b8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b4ba:	4b09      	ldr	r3, [pc, #36]	; (800b4e0 <USBD_CDC_TransmitPacket+0x7c>)
 800b4bc:	7819      	ldrb	r1, [r3, #0]
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f005 f92b 	bl	8010726 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20000093 	.word	0x20000093

0800b4e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	32b0      	adds	r2, #176	; 0xb0
 800b4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	32b0      	adds	r2, #176	; 0xb0
 800b506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b50e:	2303      	movs	r3, #3
 800b510:	e018      	b.n	800b544 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	7c1b      	ldrb	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10a      	bne.n	800b530 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b51a:	4b0c      	ldr	r3, [pc, #48]	; (800b54c <USBD_CDC_ReceivePacket+0x68>)
 800b51c:	7819      	ldrb	r1, [r3, #0]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b524:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f005 f91d 	bl	8010768 <USBD_LL_PrepareReceive>
 800b52e:	e008      	b.n	800b542 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b530:	4b06      	ldr	r3, [pc, #24]	; (800b54c <USBD_CDC_ReceivePacket+0x68>)
 800b532:	7819      	ldrb	r1, [r3, #0]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b53a:	2340      	movs	r3, #64	; 0x40
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f005 f913 	bl	8010768 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	20000094 	.word	0x20000094

0800b550 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	4613      	mov	r3, r2
 800b55c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b564:	2303      	movs	r3, #3
 800b566:	e01f      	b.n	800b5a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2201      	movs	r2, #1
 800b592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	79fa      	ldrb	r2, [r7, #7]
 800b59a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f004 ff8d 	bl	80104bc <USBD_LL_Init>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d101      	bne.n	800b5c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	e025      	b.n	800b614 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	32ae      	adds	r2, #174	; 0xae
 800b5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00f      	beq.n	800b604 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	32ae      	adds	r2, #174	; 0xae
 800b5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	f107 020e 	add.w	r2, r7, #14
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4798      	blx	r3
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f004 ff95 	bl	8010554 <USBD_LL_Start>
 800b62a:	4603      	mov	r3, r0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b63c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	460b      	mov	r3, r1
 800b654:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b660:	2b00      	cmp	r3, #0
 800b662:	d009      	beq.n	800b678 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	78fa      	ldrb	r2, [r7, #3]
 800b66e:	4611      	mov	r1, r2
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	4798      	blx	r3
 800b674:	4603      	mov	r3, r0
 800b676:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b678:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	78fa      	ldrb	r2, [r7, #3]
 800b69c:	4611      	mov	r1, r2
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	4798      	blx	r3
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f001 f932 	bl	800c932 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b6dc:	461a      	mov	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6ea:	f003 031f 	and.w	r3, r3, #31
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d01a      	beq.n	800b728 <USBD_LL_SetupStage+0x72>
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	d822      	bhi.n	800b73c <USBD_LL_SetupStage+0x86>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <USBD_LL_SetupStage+0x4a>
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d00a      	beq.n	800b714 <USBD_LL_SetupStage+0x5e>
 800b6fe:	e01d      	b.n	800b73c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fb5f 	bl	800bdcc <USBD_StdDevReq>
 800b70e:	4603      	mov	r3, r0
 800b710:	73fb      	strb	r3, [r7, #15]
      break;
 800b712:	e020      	b.n	800b756 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fbc7 	bl	800beb0 <USBD_StdItfReq>
 800b722:	4603      	mov	r3, r0
 800b724:	73fb      	strb	r3, [r7, #15]
      break;
 800b726:	e016      	b.n	800b756 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fc29 	bl	800bf88 <USBD_StdEPReq>
 800b736:	4603      	mov	r3, r0
 800b738:	73fb      	strb	r3, [r7, #15]
      break;
 800b73a:	e00c      	b.n	800b756 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b742:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b746:	b2db      	uxtb	r3, r3
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f004 ff62 	bl	8010614 <USBD_LL_StallEP>
 800b750:	4603      	mov	r3, r0
 800b752:	73fb      	strb	r3, [r7, #15]
      break;
 800b754:	bf00      	nop
  }

  return ret;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	460b      	mov	r3, r1
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b772:	7afb      	ldrb	r3, [r7, #11]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d16e      	bne.n	800b856 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b77e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b786:	2b03      	cmp	r3, #3
 800b788:	f040 8098 	bne.w	800b8bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	689a      	ldr	r2, [r3, #8]
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	429a      	cmp	r2, r3
 800b796:	d913      	bls.n	800b7c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	689a      	ldr	r2, [r3, #8]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	1ad2      	subs	r2, r2, r3
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	bf28      	it	cs
 800b7b2:	4613      	movcs	r3, r2
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	6879      	ldr	r1, [r7, #4]
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f001 f9ae 	bl	800cb1a <USBD_CtlContinueRx>
 800b7be:	e07d      	b.n	800b8bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7c6:	f003 031f 	and.w	r3, r3, #31
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d014      	beq.n	800b7f8 <USBD_LL_DataOutStage+0x98>
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d81d      	bhi.n	800b80e <USBD_LL_DataOutStage+0xae>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d002      	beq.n	800b7dc <USBD_LL_DataOutStage+0x7c>
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d003      	beq.n	800b7e2 <USBD_LL_DataOutStage+0x82>
 800b7da:	e018      	b.n	800b80e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	75bb      	strb	r3, [r7, #22]
            break;
 800b7e0:	e018      	b.n	800b814 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 fa5e 	bl	800bcae <USBD_CoreFindIF>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	75bb      	strb	r3, [r7, #22]
            break;
 800b7f6:	e00d      	b.n	800b814 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	4619      	mov	r1, r3
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 fa60 	bl	800bcc8 <USBD_CoreFindEP>
 800b808:	4603      	mov	r3, r0
 800b80a:	75bb      	strb	r3, [r7, #22]
            break;
 800b80c:	e002      	b.n	800b814 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b80e:	2300      	movs	r3, #0
 800b810:	75bb      	strb	r3, [r7, #22]
            break;
 800b812:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b814:	7dbb      	ldrb	r3, [r7, #22]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d119      	bne.n	800b84e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b03      	cmp	r3, #3
 800b824:	d113      	bne.n	800b84e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b826:	7dba      	ldrb	r2, [r7, #22]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	32ae      	adds	r2, #174	; 0xae
 800b82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00b      	beq.n	800b84e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b836:	7dba      	ldrb	r2, [r7, #22]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b83e:	7dba      	ldrb	r2, [r7, #22]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	32ae      	adds	r2, #174	; 0xae
 800b844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f001 f974 	bl	800cb3c <USBD_CtlSendStatus>
 800b854:	e032      	b.n	800b8bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b856:	7afb      	ldrb	r3, [r7, #11]
 800b858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	4619      	mov	r1, r3
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 fa31 	bl	800bcc8 <USBD_CoreFindEP>
 800b866:	4603      	mov	r3, r0
 800b868:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b86a:	7dbb      	ldrb	r3, [r7, #22]
 800b86c:	2bff      	cmp	r3, #255	; 0xff
 800b86e:	d025      	beq.n	800b8bc <USBD_LL_DataOutStage+0x15c>
 800b870:	7dbb      	ldrb	r3, [r7, #22]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d122      	bne.n	800b8bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d117      	bne.n	800b8b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b882:	7dba      	ldrb	r2, [r7, #22]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	32ae      	adds	r2, #174	; 0xae
 800b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00f      	beq.n	800b8b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b892:	7dba      	ldrb	r2, [r7, #22]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b89a:	7dba      	ldrb	r2, [r7, #22]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	32ae      	adds	r2, #174	; 0xae
 800b8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	7afa      	ldrb	r2, [r7, #11]
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	4798      	blx	r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	e000      	b.n	800b8be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b086      	sub	sp, #24
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	607a      	str	r2, [r7, #4]
 800b8d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8d4:	7afb      	ldrb	r3, [r7, #11]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d16f      	bne.n	800b9ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3314      	adds	r3, #20
 800b8de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d15a      	bne.n	800b9a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	689a      	ldr	r2, [r3, #8]
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d914      	bls.n	800b920 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	689a      	ldr	r2, [r3, #8]
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	1ad2      	subs	r2, r2, r3
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	461a      	mov	r2, r3
 800b90a:	6879      	ldr	r1, [r7, #4]
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f001 f8d6 	bl	800cabe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b912:	2300      	movs	r3, #0
 800b914:	2200      	movs	r2, #0
 800b916:	2100      	movs	r1, #0
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f004 ff25 	bl	8010768 <USBD_LL_PrepareReceive>
 800b91e:	e03f      	b.n	800b9a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	68da      	ldr	r2, [r3, #12]
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d11c      	bne.n	800b966 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	685a      	ldr	r2, [r3, #4]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b934:	429a      	cmp	r2, r3
 800b936:	d316      	bcc.n	800b966 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b942:	429a      	cmp	r2, r3
 800b944:	d20f      	bcs.n	800b966 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b946:	2200      	movs	r2, #0
 800b948:	2100      	movs	r1, #0
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f001 f8b7 	bl	800cabe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b958:	2300      	movs	r3, #0
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f004 ff02 	bl	8010768 <USBD_LL_PrepareReceive>
 800b964:	e01c      	b.n	800b9a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d10f      	bne.n	800b992 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d009      	beq.n	800b992 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b992:	2180      	movs	r1, #128	; 0x80
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f004 fe3d 	bl	8010614 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f001 f8e1 	bl	800cb62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d03a      	beq.n	800ba20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f7ff fe42 	bl	800b634 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b9b8:	e032      	b.n	800ba20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9ba:	7afb      	ldrb	r3, [r7, #11]
 800b9bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f000 f97f 	bl	800bcc8 <USBD_CoreFindEP>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
 800b9d0:	2bff      	cmp	r3, #255	; 0xff
 800b9d2:	d025      	beq.n	800ba20 <USBD_LL_DataInStage+0x15a>
 800b9d4:	7dfb      	ldrb	r3, [r7, #23]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d122      	bne.n	800ba20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d11c      	bne.n	800ba20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9e6:	7dfa      	ldrb	r2, [r7, #23]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	32ae      	adds	r2, #174	; 0xae
 800b9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f0:	695b      	ldr	r3, [r3, #20]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d014      	beq.n	800ba20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9f6:	7dfa      	ldrb	r2, [r7, #23]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9fe:	7dfa      	ldrb	r2, [r7, #23]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	32ae      	adds	r2, #174	; 0xae
 800ba04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	7afa      	ldrb	r2, [r7, #11]
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	4798      	blx	r3
 800ba12:	4603      	mov	r3, r0
 800ba14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba16:	7dbb      	ldrb	r3, [r7, #22]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba1c:	7dbb      	ldrb	r3, [r7, #22]
 800ba1e:	e000      	b.n	800ba22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d014      	beq.n	800ba90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00e      	beq.n	800ba90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	6852      	ldr	r2, [r2, #4]
 800ba7e:	b2d2      	uxtb	r2, r2
 800ba80:	4611      	mov	r1, r2
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	4798      	blx	r3
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba90:	2340      	movs	r3, #64	; 0x40
 800ba92:	2200      	movs	r2, #0
 800ba94:	2100      	movs	r1, #0
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f004 fd77 	bl	801058a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2240      	movs	r2, #64	; 0x40
 800baa8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baac:	2340      	movs	r3, #64	; 0x40
 800baae:	2200      	movs	r2, #0
 800bab0:	2180      	movs	r1, #128	; 0x80
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f004 fd69 	bl	801058a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2240      	movs	r2, #64	; 0x40
 800bac2:	621a      	str	r2, [r3, #32]

  return ret;
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bace:	b480      	push	{r7}
 800bad0:	b083      	sub	sp, #12
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
 800bad6:	460b      	mov	r3, r1
 800bad8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	78fa      	ldrb	r2, [r7, #3]
 800bade:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2204      	movs	r2, #4
 800bb08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b083      	sub	sp, #12
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	d106      	bne.n	800bb3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb34:	b2da      	uxtb	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b082      	sub	sp, #8
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d110      	bne.n	800bb80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00b      	beq.n	800bb80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6e:	69db      	ldr	r3, [r3, #28]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d005      	beq.n	800bb80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	32ae      	adds	r2, #174	; 0xae
 800bba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d101      	bne.n	800bbac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e01c      	b.n	800bbe6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d115      	bne.n	800bbe4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	32ae      	adds	r2, #174	; 0xae
 800bbc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc6:	6a1b      	ldr	r3, [r3, #32]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00b      	beq.n	800bbe4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	32ae      	adds	r2, #174	; 0xae
 800bbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	78fa      	ldrb	r2, [r7, #3]
 800bbde:	4611      	mov	r1, r2
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	32ae      	adds	r2, #174	; 0xae
 800bc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e01c      	b.n	800bc4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d115      	bne.n	800bc48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	32ae      	adds	r2, #174	; 0xae
 800bc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00b      	beq.n	800bc48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	32ae      	adds	r2, #174	; 0xae
 800bc3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	78fa      	ldrb	r2, [r7, #3]
 800bc42:	4611      	mov	r1, r2
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00e      	beq.n	800bca4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	6852      	ldr	r2, [r2, #4]
 800bc92:	b2d2      	uxtb	r2, r2
 800bc94:	4611      	mov	r1, r2
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	4798      	blx	r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bca0:	2303      	movs	r3, #3
 800bca2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b083      	sub	sp, #12
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b086      	sub	sp, #24
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	460b      	mov	r3, r1
 800bcec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	885b      	ldrh	r3, [r3, #2]
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d920      	bls.n	800bd4c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd12:	e013      	b.n	800bd3c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd14:	f107 030a 	add.w	r3, r7, #10
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6978      	ldr	r0, [r7, #20]
 800bd1c:	f000 f81b 	bl	800bd56 <USBD_GetNextDesc>
 800bd20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	785b      	ldrb	r3, [r3, #1]
 800bd26:	2b05      	cmp	r3, #5
 800bd28:	d108      	bne.n	800bd3c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	789b      	ldrb	r3, [r3, #2]
 800bd32:	78fa      	ldrb	r2, [r7, #3]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d008      	beq.n	800bd4a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	885b      	ldrh	r3, [r3, #2]
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	897b      	ldrh	r3, [r7, #10]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d8e5      	bhi.n	800bd14 <USBD_GetEpDesc+0x32>
 800bd48:	e000      	b.n	800bd4c <USBD_GetEpDesc+0x6a>
          break;
 800bd4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd4c:	693b      	ldr	r3, [r7, #16]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b085      	sub	sp, #20
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	881a      	ldrh	r2, [r3, #0]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	4413      	add	r3, r2
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4413      	add	r3, r2
 800bd80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd82:	68fb      	ldr	r3, [r7, #12]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	3301      	adds	r3, #1
 800bda6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdae:	8a3b      	ldrh	r3, [r7, #16]
 800bdb0:	021b      	lsls	r3, r3, #8
 800bdb2:	b21a      	sxth	r2, r3
 800bdb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	b21b      	sxth	r3, r3
 800bdbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdbe:	89fb      	ldrh	r3, [r7, #14]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	371c      	adds	r7, #28
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bde2:	2b40      	cmp	r3, #64	; 0x40
 800bde4:	d005      	beq.n	800bdf2 <USBD_StdDevReq+0x26>
 800bde6:	2b40      	cmp	r3, #64	; 0x40
 800bde8:	d857      	bhi.n	800be9a <USBD_StdDevReq+0xce>
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00f      	beq.n	800be0e <USBD_StdDevReq+0x42>
 800bdee:	2b20      	cmp	r3, #32
 800bdf0:	d153      	bne.n	800be9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	32ae      	adds	r2, #174	; 0xae
 800bdfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	4798      	blx	r3
 800be08:	4603      	mov	r3, r0
 800be0a:	73fb      	strb	r3, [r7, #15]
      break;
 800be0c:	e04a      	b.n	800bea4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b09      	cmp	r3, #9
 800be14:	d83b      	bhi.n	800be8e <USBD_StdDevReq+0xc2>
 800be16:	a201      	add	r2, pc, #4	; (adr r2, 800be1c <USBD_StdDevReq+0x50>)
 800be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1c:	0800be71 	.word	0x0800be71
 800be20:	0800be85 	.word	0x0800be85
 800be24:	0800be8f 	.word	0x0800be8f
 800be28:	0800be7b 	.word	0x0800be7b
 800be2c:	0800be8f 	.word	0x0800be8f
 800be30:	0800be4f 	.word	0x0800be4f
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be8f 	.word	0x0800be8f
 800be3c:	0800be67 	.word	0x0800be67
 800be40:	0800be59 	.word	0x0800be59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fa3c 	bl	800c2c4 <USBD_GetDescriptor>
          break;
 800be4c:	e024      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fbcb 	bl	800c5ec <USBD_SetAddress>
          break;
 800be56:	e01f      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fc0a 	bl	800c674 <USBD_SetConfig>
 800be60:	4603      	mov	r3, r0
 800be62:	73fb      	strb	r3, [r7, #15]
          break;
 800be64:	e018      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fcad 	bl	800c7c8 <USBD_GetConfig>
          break;
 800be6e:	e013      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fcde 	bl	800c834 <USBD_GetStatus>
          break;
 800be78:	e00e      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fd0d 	bl	800c89c <USBD_SetFeature>
          break;
 800be82:	e009      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fd31 	bl	800c8ee <USBD_ClrFeature>
          break;
 800be8c:	e004      	b.n	800be98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fd88 	bl	800c9a6 <USBD_CtlError>
          break;
 800be96:	bf00      	nop
      }
      break;
 800be98:	e004      	b.n	800bea4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fd82 	bl	800c9a6 <USBD_CtlError>
      break;
 800bea2:	bf00      	nop
  }

  return ret;
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop

0800beb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bec6:	2b40      	cmp	r3, #64	; 0x40
 800bec8:	d005      	beq.n	800bed6 <USBD_StdItfReq+0x26>
 800beca:	2b40      	cmp	r3, #64	; 0x40
 800becc:	d852      	bhi.n	800bf74 <USBD_StdItfReq+0xc4>
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <USBD_StdItfReq+0x26>
 800bed2:	2b20      	cmp	r3, #32
 800bed4:	d14e      	bne.n	800bf74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	3b01      	subs	r3, #1
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d840      	bhi.n	800bf66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	889b      	ldrh	r3, [r3, #4]
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b01      	cmp	r3, #1
 800beec:	d836      	bhi.n	800bf5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	889b      	ldrh	r3, [r3, #4]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	4619      	mov	r1, r3
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7ff fed9 	bl	800bcae <USBD_CoreFindIF>
 800befc:	4603      	mov	r3, r0
 800befe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf00:	7bbb      	ldrb	r3, [r7, #14]
 800bf02:	2bff      	cmp	r3, #255	; 0xff
 800bf04:	d01d      	beq.n	800bf42 <USBD_StdItfReq+0x92>
 800bf06:	7bbb      	ldrb	r3, [r7, #14]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d11a      	bne.n	800bf42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf0c:	7bba      	ldrb	r2, [r7, #14]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	32ae      	adds	r2, #174	; 0xae
 800bf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00f      	beq.n	800bf3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf1c:	7bba      	ldrb	r2, [r7, #14]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf24:	7bba      	ldrb	r2, [r7, #14]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	32ae      	adds	r2, #174	; 0xae
 800bf2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	4798      	blx	r3
 800bf36:	4603      	mov	r3, r0
 800bf38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf3a:	e004      	b.n	800bf46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf40:	e001      	b.n	800bf46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf42:	2303      	movs	r3, #3
 800bf44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	88db      	ldrh	r3, [r3, #6]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d110      	bne.n	800bf70 <USBD_StdItfReq+0xc0>
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10d      	bne.n	800bf70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fdf1 	bl	800cb3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf5a:	e009      	b.n	800bf70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fd21 	bl	800c9a6 <USBD_CtlError>
          break;
 800bf64:	e004      	b.n	800bf70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fd1c 	bl	800c9a6 <USBD_CtlError>
          break;
 800bf6e:	e000      	b.n	800bf72 <USBD_StdItfReq+0xc2>
          break;
 800bf70:	bf00      	nop
      }
      break;
 800bf72:	e004      	b.n	800bf7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fd15 	bl	800c9a6 <USBD_CtlError>
      break;
 800bf7c:	bf00      	nop
  }

  return ret;
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	889b      	ldrh	r3, [r3, #4]
 800bf9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfa4:	2b40      	cmp	r3, #64	; 0x40
 800bfa6:	d007      	beq.n	800bfb8 <USBD_StdEPReq+0x30>
 800bfa8:	2b40      	cmp	r3, #64	; 0x40
 800bfaa:	f200 817f 	bhi.w	800c2ac <USBD_StdEPReq+0x324>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d02a      	beq.n	800c008 <USBD_StdEPReq+0x80>
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	f040 817a 	bne.w	800c2ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfb8:	7bbb      	ldrb	r3, [r7, #14]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7ff fe83 	bl	800bcc8 <USBD_CoreFindEP>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfc6:	7b7b      	ldrb	r3, [r7, #13]
 800bfc8:	2bff      	cmp	r3, #255	; 0xff
 800bfca:	f000 8174 	beq.w	800c2b6 <USBD_StdEPReq+0x32e>
 800bfce:	7b7b      	ldrb	r3, [r7, #13]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f040 8170 	bne.w	800c2b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bfd6:	7b7a      	ldrb	r2, [r7, #13]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfde:	7b7a      	ldrb	r2, [r7, #13]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	32ae      	adds	r2, #174	; 0xae
 800bfe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 8163 	beq.w	800c2b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bff0:	7b7a      	ldrb	r2, [r7, #13]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	32ae      	adds	r2, #174	; 0xae
 800bff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	4798      	blx	r3
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c006:	e156      	b.n	800c2b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	785b      	ldrb	r3, [r3, #1]
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d008      	beq.n	800c022 <USBD_StdEPReq+0x9a>
 800c010:	2b03      	cmp	r3, #3
 800c012:	f300 8145 	bgt.w	800c2a0 <USBD_StdEPReq+0x318>
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 809b 	beq.w	800c152 <USBD_StdEPReq+0x1ca>
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d03c      	beq.n	800c09a <USBD_StdEPReq+0x112>
 800c020:	e13e      	b.n	800c2a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d002      	beq.n	800c034 <USBD_StdEPReq+0xac>
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d016      	beq.n	800c060 <USBD_StdEPReq+0xd8>
 800c032:	e02c      	b.n	800c08e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00d      	beq.n	800c056 <USBD_StdEPReq+0xce>
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b80      	cmp	r3, #128	; 0x80
 800c03e:	d00a      	beq.n	800c056 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f004 fae5 	bl	8010614 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c04a:	2180      	movs	r1, #128	; 0x80
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f004 fae1 	bl	8010614 <USBD_LL_StallEP>
 800c052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c054:	e020      	b.n	800c098 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fca4 	bl	800c9a6 <USBD_CtlError>
              break;
 800c05e:	e01b      	b.n	800c098 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	885b      	ldrh	r3, [r3, #2]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10e      	bne.n	800c086 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00b      	beq.n	800c086 <USBD_StdEPReq+0xfe>
 800c06e:	7bbb      	ldrb	r3, [r7, #14]
 800c070:	2b80      	cmp	r3, #128	; 0x80
 800c072:	d008      	beq.n	800c086 <USBD_StdEPReq+0xfe>
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	88db      	ldrh	r3, [r3, #6]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d104      	bne.n	800c086 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	4619      	mov	r1, r3
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f004 fac7 	bl	8010614 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fd58 	bl	800cb3c <USBD_CtlSendStatus>

              break;
 800c08c:	e004      	b.n	800c098 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fc88 	bl	800c9a6 <USBD_CtlError>
              break;
 800c096:	bf00      	nop
          }
          break;
 800c098:	e107      	b.n	800c2aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d002      	beq.n	800c0ac <USBD_StdEPReq+0x124>
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d016      	beq.n	800c0d8 <USBD_StdEPReq+0x150>
 800c0aa:	e04b      	b.n	800c144 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00d      	beq.n	800c0ce <USBD_StdEPReq+0x146>
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	2b80      	cmp	r3, #128	; 0x80
 800c0b6:	d00a      	beq.n	800c0ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f004 faa9 	bl	8010614 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0c2:	2180      	movs	r1, #128	; 0x80
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f004 faa5 	bl	8010614 <USBD_LL_StallEP>
 800c0ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0cc:	e040      	b.n	800c150 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fc68 	bl	800c9a6 <USBD_CtlError>
              break;
 800c0d6:	e03b      	b.n	800c150 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	885b      	ldrh	r3, [r3, #2]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d136      	bne.n	800c14e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d004      	beq.n	800c0f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f004 faaf 	bl	8010652 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fd21 	bl	800cb3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff fde2 	bl	800bcc8 <USBD_CoreFindEP>
 800c104:	4603      	mov	r3, r0
 800c106:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c108:	7b7b      	ldrb	r3, [r7, #13]
 800c10a:	2bff      	cmp	r3, #255	; 0xff
 800c10c:	d01f      	beq.n	800c14e <USBD_StdEPReq+0x1c6>
 800c10e:	7b7b      	ldrb	r3, [r7, #13]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d11c      	bne.n	800c14e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c114:	7b7a      	ldrb	r2, [r7, #13]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c11c:	7b7a      	ldrb	r2, [r7, #13]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	32ae      	adds	r2, #174	; 0xae
 800c122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d010      	beq.n	800c14e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c12c:	7b7a      	ldrb	r2, [r7, #13]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	32ae      	adds	r2, #174	; 0xae
 800c132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	4798      	blx	r3
 800c13e:	4603      	mov	r3, r0
 800c140:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c142:	e004      	b.n	800c14e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fc2d 	bl	800c9a6 <USBD_CtlError>
              break;
 800c14c:	e000      	b.n	800c150 <USBD_StdEPReq+0x1c8>
              break;
 800c14e:	bf00      	nop
          }
          break;
 800c150:	e0ab      	b.n	800c2aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d002      	beq.n	800c164 <USBD_StdEPReq+0x1dc>
 800c15e:	2b03      	cmp	r3, #3
 800c160:	d032      	beq.n	800c1c8 <USBD_StdEPReq+0x240>
 800c162:	e097      	b.n	800c294 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c164:	7bbb      	ldrb	r3, [r7, #14]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d007      	beq.n	800c17a <USBD_StdEPReq+0x1f2>
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	2b80      	cmp	r3, #128	; 0x80
 800c16e:	d004      	beq.n	800c17a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fc17 	bl	800c9a6 <USBD_CtlError>
                break;
 800c178:	e091      	b.n	800c29e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c17a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	da0b      	bge.n	800c19a <USBD_StdEPReq+0x212>
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c188:	4613      	mov	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	3310      	adds	r3, #16
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	4413      	add	r3, r2
 800c196:	3304      	adds	r3, #4
 800c198:	e00b      	b.n	800c1b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c19a:	7bbb      	ldrb	r3, [r7, #14]
 800c19c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2202      	movs	r2, #2
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fc61 	bl	800ca88 <USBD_CtlSendData>
              break;
 800c1c6:	e06a      	b.n	800c29e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	da11      	bge.n	800c1f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	f003 020f 	and.w	r2, r3, #15
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	440b      	add	r3, r1
 800c1e2:	3324      	adds	r3, #36	; 0x24
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d117      	bne.n	800c21a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fbda 	bl	800c9a6 <USBD_CtlError>
                  break;
 800c1f2:	e054      	b.n	800c29e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1f4:	7bbb      	ldrb	r3, [r7, #14]
 800c1f6:	f003 020f 	and.w	r2, r3, #15
 800c1fa:	6879      	ldr	r1, [r7, #4]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	440b      	add	r3, r1
 800c206:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d104      	bne.n	800c21a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fbc7 	bl	800c9a6 <USBD_CtlError>
                  break;
 800c218:	e041      	b.n	800c29e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c21a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	da0b      	bge.n	800c23a <USBD_StdEPReq+0x2b2>
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c228:	4613      	mov	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	3310      	adds	r3, #16
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	4413      	add	r3, r2
 800c236:	3304      	adds	r3, #4
 800c238:	e00b      	b.n	800c252 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c23a:	7bbb      	ldrb	r3, [r7, #14]
 800c23c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c240:	4613      	mov	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	4413      	add	r3, r2
 800c250:	3304      	adds	r3, #4
 800c252:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <USBD_StdEPReq+0x2d8>
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	2b80      	cmp	r3, #128	; 0x80
 800c25e:	d103      	bne.n	800c268 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2200      	movs	r2, #0
 800c264:	601a      	str	r2, [r3, #0]
 800c266:	e00e      	b.n	800c286 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f004 fa0f 	bl	8010690 <USBD_LL_IsStallEP>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d003      	beq.n	800c280 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2201      	movs	r2, #1
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	e002      	b.n	800c286 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2202      	movs	r2, #2
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fbfb 	bl	800ca88 <USBD_CtlSendData>
              break;
 800c292:	e004      	b.n	800c29e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 fb85 	bl	800c9a6 <USBD_CtlError>
              break;
 800c29c:	bf00      	nop
          }
          break;
 800c29e:	e004      	b.n	800c2aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fb7f 	bl	800c9a6 <USBD_CtlError>
          break;
 800c2a8:	bf00      	nop
      }
      break;
 800c2aa:	e005      	b.n	800c2b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fb79 	bl	800c9a6 <USBD_CtlError>
      break;
 800c2b4:	e000      	b.n	800c2b8 <USBD_StdEPReq+0x330>
      break;
 800c2b6:	bf00      	nop
  }

  return ret;
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	885b      	ldrh	r3, [r3, #2]
 800c2de:	0a1b      	lsrs	r3, r3, #8
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	2b0e      	cmp	r3, #14
 800c2e6:	f200 8152 	bhi.w	800c58e <USBD_GetDescriptor+0x2ca>
 800c2ea:	a201      	add	r2, pc, #4	; (adr r2, 800c2f0 <USBD_GetDescriptor+0x2c>)
 800c2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f0:	0800c361 	.word	0x0800c361
 800c2f4:	0800c379 	.word	0x0800c379
 800c2f8:	0800c3b9 	.word	0x0800c3b9
 800c2fc:	0800c58f 	.word	0x0800c58f
 800c300:	0800c58f 	.word	0x0800c58f
 800c304:	0800c52f 	.word	0x0800c52f
 800c308:	0800c55b 	.word	0x0800c55b
 800c30c:	0800c58f 	.word	0x0800c58f
 800c310:	0800c58f 	.word	0x0800c58f
 800c314:	0800c58f 	.word	0x0800c58f
 800c318:	0800c58f 	.word	0x0800c58f
 800c31c:	0800c58f 	.word	0x0800c58f
 800c320:	0800c58f 	.word	0x0800c58f
 800c324:	0800c58f 	.word	0x0800c58f
 800c328:	0800c32d 	.word	0x0800c32d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c332:	69db      	ldr	r3, [r3, #28]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d00b      	beq.n	800c350 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c33e:	69db      	ldr	r3, [r3, #28]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	7c12      	ldrb	r2, [r2, #16]
 800c344:	f107 0108 	add.w	r1, r7, #8
 800c348:	4610      	mov	r0, r2
 800c34a:	4798      	blx	r3
 800c34c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c34e:	e126      	b.n	800c59e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fb27 	bl	800c9a6 <USBD_CtlError>
        err++;
 800c358:	7afb      	ldrb	r3, [r7, #11]
 800c35a:	3301      	adds	r3, #1
 800c35c:	72fb      	strb	r3, [r7, #11]
      break;
 800c35e:	e11e      	b.n	800c59e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	7c12      	ldrb	r2, [r2, #16]
 800c36c:	f107 0108 	add.w	r1, r7, #8
 800c370:	4610      	mov	r0, r2
 800c372:	4798      	blx	r3
 800c374:	60f8      	str	r0, [r7, #12]
      break;
 800c376:	e112      	b.n	800c59e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	7c1b      	ldrb	r3, [r3, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10d      	bne.n	800c39c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c388:	f107 0208 	add.w	r2, r7, #8
 800c38c:	4610      	mov	r0, r2
 800c38e:	4798      	blx	r3
 800c390:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3301      	adds	r3, #1
 800c396:	2202      	movs	r2, #2
 800c398:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c39a:	e100      	b.n	800c59e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a4:	f107 0208 	add.w	r2, r7, #8
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4798      	blx	r3
 800c3ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	701a      	strb	r2, [r3, #0]
      break;
 800c3b6:	e0f2      	b.n	800c59e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	885b      	ldrh	r3, [r3, #2]
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b05      	cmp	r3, #5
 800c3c0:	f200 80ac 	bhi.w	800c51c <USBD_GetDescriptor+0x258>
 800c3c4:	a201      	add	r2, pc, #4	; (adr r2, 800c3cc <USBD_GetDescriptor+0x108>)
 800c3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ca:	bf00      	nop
 800c3cc:	0800c3e5 	.word	0x0800c3e5
 800c3d0:	0800c419 	.word	0x0800c419
 800c3d4:	0800c44d 	.word	0x0800c44d
 800c3d8:	0800c481 	.word	0x0800c481
 800c3dc:	0800c4b5 	.word	0x0800c4b5
 800c3e0:	0800c4e9 	.word	0x0800c4e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00b      	beq.n	800c408 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7c12      	ldrb	r2, [r2, #16]
 800c3fc:	f107 0108 	add.w	r1, r7, #8
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
 800c404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c406:	e091      	b.n	800c52c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 facb 	bl	800c9a6 <USBD_CtlError>
            err++;
 800c410:	7afb      	ldrb	r3, [r7, #11]
 800c412:	3301      	adds	r3, #1
 800c414:	72fb      	strb	r3, [r7, #11]
          break;
 800c416:	e089      	b.n	800c52c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	7c12      	ldrb	r2, [r2, #16]
 800c430:	f107 0108 	add.w	r1, r7, #8
 800c434:	4610      	mov	r0, r2
 800c436:	4798      	blx	r3
 800c438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c43a:	e077      	b.n	800c52c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fab1 	bl	800c9a6 <USBD_CtlError>
            err++;
 800c444:	7afb      	ldrb	r3, [r7, #11]
 800c446:	3301      	adds	r3, #1
 800c448:	72fb      	strb	r3, [r7, #11]
          break;
 800c44a:	e06f      	b.n	800c52c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00b      	beq.n	800c470 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	7c12      	ldrb	r2, [r2, #16]
 800c464:	f107 0108 	add.w	r1, r7, #8
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
 800c46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46e:	e05d      	b.n	800c52c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fa97 	bl	800c9a6 <USBD_CtlError>
            err++;
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	3301      	adds	r3, #1
 800c47c:	72fb      	strb	r3, [r7, #11]
          break;
 800c47e:	e055      	b.n	800c52c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00b      	beq.n	800c4a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	7c12      	ldrb	r2, [r2, #16]
 800c498:	f107 0108 	add.w	r1, r7, #8
 800c49c:	4610      	mov	r0, r2
 800c49e:	4798      	blx	r3
 800c4a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4a2:	e043      	b.n	800c52c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fa7d 	bl	800c9a6 <USBD_CtlError>
            err++;
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4b2:	e03b      	b.n	800c52c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ba:	695b      	ldr	r3, [r3, #20]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00b      	beq.n	800c4d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c6:	695b      	ldr	r3, [r3, #20]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	7c12      	ldrb	r2, [r2, #16]
 800c4cc:	f107 0108 	add.w	r1, r7, #8
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	4798      	blx	r3
 800c4d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d6:	e029      	b.n	800c52c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fa63 	bl	800c9a6 <USBD_CtlError>
            err++;
 800c4e0:	7afb      	ldrb	r3, [r7, #11]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e6:	e021      	b.n	800c52c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00b      	beq.n	800c50c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	7c12      	ldrb	r2, [r2, #16]
 800c500:	f107 0108 	add.w	r1, r7, #8
 800c504:	4610      	mov	r0, r2
 800c506:	4798      	blx	r3
 800c508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c50a:	e00f      	b.n	800c52c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fa49 	bl	800c9a6 <USBD_CtlError>
            err++;
 800c514:	7afb      	ldrb	r3, [r7, #11]
 800c516:	3301      	adds	r3, #1
 800c518:	72fb      	strb	r3, [r7, #11]
          break;
 800c51a:	e007      	b.n	800c52c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fa41 	bl	800c9a6 <USBD_CtlError>
          err++;
 800c524:	7afb      	ldrb	r3, [r7, #11]
 800c526:	3301      	adds	r3, #1
 800c528:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c52a:	bf00      	nop
      }
      break;
 800c52c:	e037      	b.n	800c59e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7c1b      	ldrb	r3, [r3, #16]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d109      	bne.n	800c54a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53e:	f107 0208 	add.w	r2, r7, #8
 800c542:	4610      	mov	r0, r2
 800c544:	4798      	blx	r3
 800c546:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c548:	e029      	b.n	800c59e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fa2a 	bl	800c9a6 <USBD_CtlError>
        err++;
 800c552:	7afb      	ldrb	r3, [r7, #11]
 800c554:	3301      	adds	r3, #1
 800c556:	72fb      	strb	r3, [r7, #11]
      break;
 800c558:	e021      	b.n	800c59e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7c1b      	ldrb	r3, [r3, #16]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10d      	bne.n	800c57e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56a:	f107 0208 	add.w	r2, r7, #8
 800c56e:	4610      	mov	r0, r2
 800c570:	4798      	blx	r3
 800c572:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	3301      	adds	r3, #1
 800c578:	2207      	movs	r2, #7
 800c57a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c57c:	e00f      	b.n	800c59e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fa10 	bl	800c9a6 <USBD_CtlError>
        err++;
 800c586:	7afb      	ldrb	r3, [r7, #11]
 800c588:	3301      	adds	r3, #1
 800c58a:	72fb      	strb	r3, [r7, #11]
      break;
 800c58c:	e007      	b.n	800c59e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fa08 	bl	800c9a6 <USBD_CtlError>
      err++;
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	3301      	adds	r3, #1
 800c59a:	72fb      	strb	r3, [r7, #11]
      break;
 800c59c:	bf00      	nop
  }

  if (err != 0U)
 800c59e:	7afb      	ldrb	r3, [r7, #11]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d11e      	bne.n	800c5e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	88db      	ldrh	r3, [r3, #6]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d016      	beq.n	800c5da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5ac:	893b      	ldrh	r3, [r7, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00e      	beq.n	800c5d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	88da      	ldrh	r2, [r3, #6]
 800c5b6:	893b      	ldrh	r3, [r7, #8]
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	bf28      	it	cs
 800c5bc:	4613      	movcs	r3, r2
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5c2:	893b      	ldrh	r3, [r7, #8]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	68f9      	ldr	r1, [r7, #12]
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 fa5d 	bl	800ca88 <USBD_CtlSendData>
 800c5ce:	e009      	b.n	800c5e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f9e7 	bl	800c9a6 <USBD_CtlError>
 800c5d8:	e004      	b.n	800c5e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 faae 	bl	800cb3c <USBD_CtlSendStatus>
 800c5e0:	e000      	b.n	800c5e4 <USBD_GetDescriptor+0x320>
    return;
 800c5e2:	bf00      	nop
  }
}
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop

0800c5ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	889b      	ldrh	r3, [r3, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d131      	bne.n	800c662 <USBD_SetAddress+0x76>
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	88db      	ldrh	r3, [r3, #6]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d12d      	bne.n	800c662 <USBD_SetAddress+0x76>
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	885b      	ldrh	r3, [r3, #2]
 800c60a:	2b7f      	cmp	r3, #127	; 0x7f
 800c60c:	d829      	bhi.n	800c662 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	885b      	ldrh	r3, [r3, #2]
 800c612:	b2db      	uxtb	r3, r3
 800c614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c618:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b03      	cmp	r3, #3
 800c624:	d104      	bne.n	800c630 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 f9bc 	bl	800c9a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62e:	e01d      	b.n	800c66c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	7bfa      	ldrb	r2, [r7, #15]
 800c634:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f004 f853 	bl	80106e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fa7a 	bl	800cb3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c648:	7bfb      	ldrb	r3, [r7, #15]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2202      	movs	r2, #2
 800c652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c656:	e009      	b.n	800c66c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c660:	e004      	b.n	800c66c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f99e 	bl	800c9a6 <USBD_CtlError>
  }
}
 800c66a:	bf00      	nop
 800c66c:	bf00      	nop
 800c66e:	3710      	adds	r7, #16
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c67e:	2300      	movs	r3, #0
 800c680:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	885b      	ldrh	r3, [r3, #2]
 800c686:	b2da      	uxtb	r2, r3
 800c688:	4b4e      	ldr	r3, [pc, #312]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c68a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c68c:	4b4d      	ldr	r3, [pc, #308]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d905      	bls.n	800c6a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f985 	bl	800c9a6 <USBD_CtlError>
    return USBD_FAIL;
 800c69c:	2303      	movs	r3, #3
 800c69e:	e08c      	b.n	800c7ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d002      	beq.n	800c6b2 <USBD_SetConfig+0x3e>
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d029      	beq.n	800c704 <USBD_SetConfig+0x90>
 800c6b0:	e075      	b.n	800c79e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6b2:	4b44      	ldr	r3, [pc, #272]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d020      	beq.n	800c6fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6ba:	4b42      	ldr	r3, [pc, #264]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6c4:	4b3f      	ldr	r3, [pc, #252]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7fe ffbd 	bl	800b64a <USBD_SetClassConfig>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d008      	beq.n	800c6ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 f962 	bl	800c9a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2202      	movs	r2, #2
 800c6e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6ea:	e065      	b.n	800c7b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fa25 	bl	800cb3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6fa:	e05d      	b.n	800c7b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fa1d 	bl	800cb3c <USBD_CtlSendStatus>
      break;
 800c702:	e059      	b.n	800c7b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c704:	4b2f      	ldr	r3, [pc, #188]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d112      	bne.n	800c732 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2202      	movs	r2, #2
 800c710:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c714:	4b2b      	ldr	r3, [pc, #172]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	461a      	mov	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c71e:	4b29      	ldr	r3, [pc, #164]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7fe ffac 	bl	800b682 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 fa06 	bl	800cb3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c730:	e042      	b.n	800c7b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c732:	4b24      	ldr	r3, [pc, #144]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	461a      	mov	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d02a      	beq.n	800c796 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	b2db      	uxtb	r3, r3
 800c746:	4619      	mov	r1, r3
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7fe ff9a 	bl	800b682 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c74e:	4b1d      	ldr	r3, [pc, #116]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c758:	4b1a      	ldr	r3, [pc, #104]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	4619      	mov	r1, r3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7fe ff73 	bl	800b64a <USBD_SetClassConfig>
 800c764:	4603      	mov	r3, r0
 800c766:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c768:	7bfb      	ldrb	r3, [r7, #15]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00f      	beq.n	800c78e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f918 	bl	800c9a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	4619      	mov	r1, r3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7fe ff7f 	bl	800b682 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2202      	movs	r2, #2
 800c788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c78c:	e014      	b.n	800c7b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f9d4 	bl	800cb3c <USBD_CtlSendStatus>
      break;
 800c794:	e010      	b.n	800c7b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f9d0 	bl	800cb3c <USBD_CtlSendStatus>
      break;
 800c79c:	e00c      	b.n	800c7b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c79e:	6839      	ldr	r1, [r7, #0]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f900 	bl	800c9a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7a6:	4b07      	ldr	r3, [pc, #28]	; (800c7c4 <USBD_SetConfig+0x150>)
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7fe ff68 	bl	800b682 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b6:	bf00      	nop
  }

  return ret;
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20005ba4 	.word	0x20005ba4

0800c7c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	88db      	ldrh	r3, [r3, #6]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d004      	beq.n	800c7e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f8e2 	bl	800c9a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7e2:	e023      	b.n	800c82c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b02      	cmp	r3, #2
 800c7ee:	dc02      	bgt.n	800c7f6 <USBD_GetConfig+0x2e>
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dc03      	bgt.n	800c7fc <USBD_GetConfig+0x34>
 800c7f4:	e015      	b.n	800c822 <USBD_GetConfig+0x5a>
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	d00b      	beq.n	800c812 <USBD_GetConfig+0x4a>
 800c7fa:	e012      	b.n	800c822 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	3308      	adds	r3, #8
 800c806:	2201      	movs	r2, #1
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f93c 	bl	800ca88 <USBD_CtlSendData>
        break;
 800c810:	e00c      	b.n	800c82c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3304      	adds	r3, #4
 800c816:	2201      	movs	r2, #1
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f934 	bl	800ca88 <USBD_CtlSendData>
        break;
 800c820:	e004      	b.n	800c82c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c822:	6839      	ldr	r1, [r7, #0]
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f8be 	bl	800c9a6 <USBD_CtlError>
        break;
 800c82a:	bf00      	nop
}
 800c82c:	bf00      	nop
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c844:	b2db      	uxtb	r3, r3
 800c846:	3b01      	subs	r3, #1
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d81e      	bhi.n	800c88a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	88db      	ldrh	r3, [r3, #6]
 800c850:	2b02      	cmp	r3, #2
 800c852:	d004      	beq.n	800c85e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f8a5 	bl	800c9a6 <USBD_CtlError>
        break;
 800c85c:	e01a      	b.n	800c894 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d005      	beq.n	800c87a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	f043 0202 	orr.w	r2, r3, #2
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	330c      	adds	r3, #12
 800c87e:	2202      	movs	r2, #2
 800c880:	4619      	mov	r1, r3
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f900 	bl	800ca88 <USBD_CtlSendData>
      break;
 800c888:	e004      	b.n	800c894 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 f88a 	bl	800c9a6 <USBD_CtlError>
      break;
 800c892:	bf00      	nop
  }
}
 800c894:	bf00      	nop
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	885b      	ldrh	r3, [r3, #2]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d107      	bne.n	800c8be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f940 	bl	800cb3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8bc:	e013      	b.n	800c8e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	885b      	ldrh	r3, [r3, #2]
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d10b      	bne.n	800c8de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	889b      	ldrh	r3, [r3, #4]
 800c8ca:	0a1b      	lsrs	r3, r3, #8
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	b2da      	uxtb	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f930 	bl	800cb3c <USBD_CtlSendStatus>
}
 800c8dc:	e003      	b.n	800c8e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f860 	bl	800c9a6 <USBD_CtlError>
}
 800c8e6:	bf00      	nop
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b082      	sub	sp, #8
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	3b01      	subs	r3, #1
 800c902:	2b02      	cmp	r3, #2
 800c904:	d80b      	bhi.n	800c91e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	885b      	ldrh	r3, [r3, #2]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d10c      	bne.n	800c928 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f910 	bl	800cb3c <USBD_CtlSendStatus>
      }
      break;
 800c91c:	e004      	b.n	800c928 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f840 	bl	800c9a6 <USBD_CtlError>
      break;
 800c926:	e000      	b.n	800c92a <USBD_ClrFeature+0x3c>
      break;
 800c928:	bf00      	nop
  }
}
 800c92a:	bf00      	nop
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	781a      	ldrb	r2, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	3301      	adds	r3, #1
 800c94c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	781a      	ldrb	r2, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	3301      	adds	r3, #1
 800c95a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f7ff fa17 	bl	800bd90 <SWAPBYTE>
 800c962:	4603      	mov	r3, r0
 800c964:	461a      	mov	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3301      	adds	r3, #1
 800c96e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3301      	adds	r3, #1
 800c974:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f7ff fa0a 	bl	800bd90 <SWAPBYTE>
 800c97c:	4603      	mov	r3, r0
 800c97e:	461a      	mov	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	3301      	adds	r3, #1
 800c988:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	3301      	adds	r3, #1
 800c98e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7ff f9fd 	bl	800bd90 <SWAPBYTE>
 800c996:	4603      	mov	r3, r0
 800c998:	461a      	mov	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	80da      	strh	r2, [r3, #6]
}
 800c99e:	bf00      	nop
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9b0:	2180      	movs	r1, #128	; 0x80
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f003 fe2e 	bl	8010614 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f003 fe2a 	bl	8010614 <USBD_LL_StallEP>
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d036      	beq.n	800ca4c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9e2:	6938      	ldr	r0, [r7, #16]
 800c9e4:	f000 f836 	bl	800ca54 <USBD_GetLen>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	7812      	ldrb	r2, [r2, #0]
 800ca00:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
 800ca04:	3301      	adds	r3, #1
 800ca06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	2203      	movs	r2, #3
 800ca10:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	3301      	adds	r3, #1
 800ca16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca18:	e013      	b.n	800ca42 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca1a:	7dfb      	ldrb	r3, [r7, #23]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	4413      	add	r3, r2
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	7812      	ldrb	r2, [r2, #0]
 800ca24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	613b      	str	r3, [r7, #16]
    idx++;
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	4413      	add	r3, r2
 800ca38:	2200      	movs	r2, #0
 800ca3a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca3c:	7dfb      	ldrb	r3, [r7, #23]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1e7      	bne.n	800ca1a <USBD_GetString+0x52>
 800ca4a:	e000      	b.n	800ca4e <USBD_GetString+0x86>
    return;
 800ca4c:	bf00      	nop
  }
}
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca64:	e005      	b.n	800ca72 <USBD_GetLen+0x1e>
  {
    len++;
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1f5      	bne.n	800ca66 <USBD_GetLen+0x12>
  }

  return len;
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2202      	movs	r2, #2
 800ca98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	2100      	movs	r1, #0
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f003 fe39 	bl	8010726 <USBD_LL_Transmit>

  return USBD_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b084      	sub	sp, #16
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	2100      	movs	r1, #0
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f003 fe28 	bl	8010726 <USBD_LL_Transmit>

  return USBD_OK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2203      	movs	r2, #3
 800caf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	2100      	movs	r1, #0
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f003 fe2c 	bl	8010768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	60f8      	str	r0, [r7, #12]
 800cb22:	60b9      	str	r1, [r7, #8]
 800cb24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f003 fe1b 	bl	8010768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2204      	movs	r2, #4
 800cb48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2100      	movs	r1, #0
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f003 fde7 	bl	8010726 <USBD_LL_Transmit>

  return USBD_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b082      	sub	sp, #8
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2205      	movs	r2, #5
 800cb6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb72:	2300      	movs	r3, #0
 800cb74:	2200      	movs	r2, #0
 800cb76:	2100      	movs	r1, #0
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f003 fdf5 	bl	8010768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cb92:	79fb      	ldrb	r3, [r7, #7]
 800cb94:	4a08      	ldr	r2, [pc, #32]	; (800cbb8 <disk_status+0x30>)
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4413      	add	r3, r2
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	79fa      	ldrb	r2, [r7, #7]
 800cba0:	4905      	ldr	r1, [pc, #20]	; (800cbb8 <disk_status+0x30>)
 800cba2:	440a      	add	r2, r1
 800cba4:	7a12      	ldrb	r2, [r2, #8]
 800cba6:	4610      	mov	r0, r2
 800cba8:	4798      	blx	r3
 800cbaa:	4603      	mov	r3, r0
 800cbac:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	20005dd0 	.word	0x20005dd0

0800cbbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cbca:	79fb      	ldrb	r3, [r7, #7]
 800cbcc:	4a0d      	ldr	r2, [pc, #52]	; (800cc04 <disk_initialize+0x48>)
 800cbce:	5cd3      	ldrb	r3, [r2, r3]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d111      	bne.n	800cbf8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	4a0b      	ldr	r2, [pc, #44]	; (800cc04 <disk_initialize+0x48>)
 800cbd8:	2101      	movs	r1, #1
 800cbda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbdc:	79fb      	ldrb	r3, [r7, #7]
 800cbde:	4a09      	ldr	r2, [pc, #36]	; (800cc04 <disk_initialize+0x48>)
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	79fa      	ldrb	r2, [r7, #7]
 800cbea:	4906      	ldr	r1, [pc, #24]	; (800cc04 <disk_initialize+0x48>)
 800cbec:	440a      	add	r2, r1
 800cbee:	7a12      	ldrb	r2, [r2, #8]
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	4798      	blx	r3
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	20005dd0 	.word	0x20005dd0

0800cc08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc08:	b590      	push	{r4, r7, lr}
 800cc0a:	b087      	sub	sp, #28
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60b9      	str	r1, [r7, #8]
 800cc10:	607a      	str	r2, [r7, #4]
 800cc12:	603b      	str	r3, [r7, #0]
 800cc14:	4603      	mov	r3, r0
 800cc16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	4a0a      	ldr	r2, [pc, #40]	; (800cc44 <disk_read+0x3c>)
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4413      	add	r3, r2
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	689c      	ldr	r4, [r3, #8]
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
 800cc26:	4a07      	ldr	r2, [pc, #28]	; (800cc44 <disk_read+0x3c>)
 800cc28:	4413      	add	r3, r2
 800cc2a:	7a18      	ldrb	r0, [r3, #8]
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	68b9      	ldr	r1, [r7, #8]
 800cc32:	47a0      	blx	r4
 800cc34:	4603      	mov	r3, r0
 800cc36:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	371c      	adds	r7, #28
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd90      	pop	{r4, r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20005dd0 	.word	0x20005dd0

0800cc48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc48:	b590      	push	{r4, r7, lr}
 800cc4a:	b087      	sub	sp, #28
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60b9      	str	r1, [r7, #8]
 800cc50:	607a      	str	r2, [r7, #4]
 800cc52:	603b      	str	r3, [r7, #0]
 800cc54:	4603      	mov	r3, r0
 800cc56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	4a0a      	ldr	r2, [pc, #40]	; (800cc84 <disk_write+0x3c>)
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	4413      	add	r3, r2
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	68dc      	ldr	r4, [r3, #12]
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	4a07      	ldr	r2, [pc, #28]	; (800cc84 <disk_write+0x3c>)
 800cc68:	4413      	add	r3, r2
 800cc6a:	7a18      	ldrb	r0, [r3, #8]
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	68b9      	ldr	r1, [r7, #8]
 800cc72:	47a0      	blx	r4
 800cc74:	4603      	mov	r3, r0
 800cc76:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	371c      	adds	r7, #28
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd90      	pop	{r4, r7, pc}
 800cc82:	bf00      	nop
 800cc84:	20005dd0 	.word	0x20005dd0

0800cc88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	603a      	str	r2, [r7, #0]
 800cc92:	71fb      	strb	r3, [r7, #7]
 800cc94:	460b      	mov	r3, r1
 800cc96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	4a09      	ldr	r2, [pc, #36]	; (800ccc0 <disk_ioctl+0x38>)
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	79fa      	ldrb	r2, [r7, #7]
 800cca6:	4906      	ldr	r1, [pc, #24]	; (800ccc0 <disk_ioctl+0x38>)
 800cca8:	440a      	add	r2, r1
 800ccaa:	7a10      	ldrb	r0, [r2, #8]
 800ccac:	79b9      	ldrb	r1, [r7, #6]
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	4798      	blx	r3
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	73fb      	strb	r3, [r7, #15]
  return res;
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3710      	adds	r7, #16
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	20005dd0 	.word	0x20005dd0

0800ccc4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ccd4:	89fb      	ldrh	r3, [r7, #14]
 800ccd6:	021b      	lsls	r3, r3, #8
 800ccd8:	b21a      	sxth	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	b21b      	sxth	r3, r3
 800cce0:	4313      	orrs	r3, r2
 800cce2:	b21b      	sxth	r3, r3
 800cce4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cce6:	89fb      	ldrh	r3, [r7, #14]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	3303      	adds	r3, #3
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	021b      	lsls	r3, r3, #8
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	3202      	adds	r2, #2
 800cd0c:	7812      	ldrb	r2, [r2, #0]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	021b      	lsls	r3, r3, #8
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	3201      	adds	r2, #1
 800cd1a:	7812      	ldrb	r2, [r2, #0]
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	7812      	ldrb	r2, [r2, #0]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
	return rv;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3714      	adds	r7, #20
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd3a:	b480      	push	{r7}
 800cd3c:	b083      	sub	sp, #12
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	460b      	mov	r3, r1
 800cd44:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	607a      	str	r2, [r7, #4]
 800cd4c:	887a      	ldrh	r2, [r7, #2]
 800cd4e:	b2d2      	uxtb	r2, r2
 800cd50:	701a      	strb	r2, [r3, #0]
 800cd52:	887b      	ldrh	r3, [r7, #2]
 800cd54:	0a1b      	lsrs	r3, r3, #8
 800cd56:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	1c5a      	adds	r2, r3, #1
 800cd5c:	607a      	str	r2, [r7, #4]
 800cd5e:	887a      	ldrh	r2, [r7, #2]
 800cd60:	b2d2      	uxtb	r2, r2
 800cd62:	701a      	strb	r2, [r3, #0]
}
 800cd64:	bf00      	nop
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	1c5a      	adds	r2, r3, #1
 800cd7e:	607a      	str	r2, [r7, #4]
 800cd80:	683a      	ldr	r2, [r7, #0]
 800cd82:	b2d2      	uxtb	r2, r2
 800cd84:	701a      	strb	r2, [r3, #0]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	0a1b      	lsrs	r3, r3, #8
 800cd8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	1c5a      	adds	r2, r3, #1
 800cd90:	607a      	str	r2, [r7, #4]
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	b2d2      	uxtb	r2, r2
 800cd96:	701a      	strb	r2, [r3, #0]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	0a1b      	lsrs	r3, r3, #8
 800cd9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	b2d2      	uxtb	r2, r2
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	0a1b      	lsrs	r3, r3, #8
 800cdae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	1c5a      	adds	r2, r3, #1
 800cdb4:	607a      	str	r2, [r7, #4]
 800cdb6:	683a      	ldr	r2, [r7, #0]
 800cdb8:	b2d2      	uxtb	r2, r2
 800cdba:	701a      	strb	r2, [r3, #0]
}
 800cdbc:	bf00      	nop
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cdc8:	b480      	push	{r7}
 800cdca:	b087      	sub	sp, #28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00d      	beq.n	800cdfe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	1c53      	adds	r3, r2, #1
 800cde6:	613b      	str	r3, [r7, #16]
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	1c59      	adds	r1, r3, #1
 800cdec:	6179      	str	r1, [r7, #20]
 800cdee:	7812      	ldrb	r2, [r2, #0]
 800cdf0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	607b      	str	r3, [r7, #4]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1f1      	bne.n	800cde2 <mem_cpy+0x1a>
	}
}
 800cdfe:	bf00      	nop
 800ce00:	371c      	adds	r7, #28
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ce0a:	b480      	push	{r7}
 800ce0c:	b087      	sub	sp, #28
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	60f8      	str	r0, [r7, #12]
 800ce12:	60b9      	str	r1, [r7, #8]
 800ce14:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	1c5a      	adds	r2, r3, #1
 800ce1e:	617a      	str	r2, [r7, #20]
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	b2d2      	uxtb	r2, r2
 800ce24:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	607b      	str	r3, [r7, #4]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1f3      	bne.n	800ce1a <mem_set+0x10>
}
 800ce32:	bf00      	nop
 800ce34:	bf00      	nop
 800ce36:	371c      	adds	r7, #28
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce40:	b480      	push	{r7}
 800ce42:	b089      	sub	sp, #36	; 0x24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	61fb      	str	r3, [r7, #28]
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce54:	2300      	movs	r3, #0
 800ce56:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	61fa      	str	r2, [r7, #28]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	4619      	mov	r1, r3
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	1c5a      	adds	r2, r3, #1
 800ce66:	61ba      	str	r2, [r7, #24]
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	1acb      	subs	r3, r1, r3
 800ce6c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	3b01      	subs	r3, #1
 800ce72:	607b      	str	r3, [r7, #4]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d002      	beq.n	800ce80 <mem_cmp+0x40>
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d0eb      	beq.n	800ce58 <mem_cmp+0x18>

	return r;
 800ce80:	697b      	ldr	r3, [r7, #20]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3724      	adds	r7, #36	; 0x24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr

0800ce8e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ce8e:	b480      	push	{r7}
 800ce90:	b083      	sub	sp, #12
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ce98:	e002      	b.n	800cea0 <chk_chr+0x12>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	607b      	str	r3, [r7, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d005      	beq.n	800ceb4 <chk_chr+0x26>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	461a      	mov	r2, r3
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d1f2      	bne.n	800ce9a <chk_chr+0xc>
	return *str;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cece:	2300      	movs	r3, #0
 800ced0:	60bb      	str	r3, [r7, #8]
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	60fb      	str	r3, [r7, #12]
 800ced6:	e029      	b.n	800cf2c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ced8:	4a27      	ldr	r2, [pc, #156]	; (800cf78 <chk_lock+0xb4>)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	011b      	lsls	r3, r3, #4
 800cede:	4413      	add	r3, r2
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d01d      	beq.n	800cf22 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cee6:	4a24      	ldr	r2, [pc, #144]	; (800cf78 <chk_lock+0xb4>)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	011b      	lsls	r3, r3, #4
 800ceec:	4413      	add	r3, r2
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d116      	bne.n	800cf26 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cef8:	4a1f      	ldr	r2, [pc, #124]	; (800cf78 <chk_lock+0xb4>)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	011b      	lsls	r3, r3, #4
 800cefe:	4413      	add	r3, r2
 800cf00:	3304      	adds	r3, #4
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d10c      	bne.n	800cf26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf0c:	4a1a      	ldr	r2, [pc, #104]	; (800cf78 <chk_lock+0xb4>)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	011b      	lsls	r3, r3, #4
 800cf12:	4413      	add	r3, r2
 800cf14:	3308      	adds	r3, #8
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d102      	bne.n	800cf26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf20:	e007      	b.n	800cf32 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf22:	2301      	movs	r3, #1
 800cf24:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	60fb      	str	r3, [r7, #12]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d9d2      	bls.n	800ced8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d109      	bne.n	800cf4c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d102      	bne.n	800cf44 <chk_lock+0x80>
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d101      	bne.n	800cf48 <chk_lock+0x84>
 800cf44:	2300      	movs	r3, #0
 800cf46:	e010      	b.n	800cf6a <chk_lock+0xa6>
 800cf48:	2312      	movs	r3, #18
 800cf4a:	e00e      	b.n	800cf6a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d108      	bne.n	800cf64 <chk_lock+0xa0>
 800cf52:	4a09      	ldr	r2, [pc, #36]	; (800cf78 <chk_lock+0xb4>)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	011b      	lsls	r3, r3, #4
 800cf58:	4413      	add	r3, r2
 800cf5a:	330c      	adds	r3, #12
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf62:	d101      	bne.n	800cf68 <chk_lock+0xa4>
 800cf64:	2310      	movs	r3, #16
 800cf66:	e000      	b.n	800cf6a <chk_lock+0xa6>
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	20005bb0 	.word	0x20005bb0

0800cf7c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf82:	2300      	movs	r3, #0
 800cf84:	607b      	str	r3, [r7, #4]
 800cf86:	e002      	b.n	800cf8e <enq_lock+0x12>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	607b      	str	r3, [r7, #4]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d806      	bhi.n	800cfa2 <enq_lock+0x26>
 800cf94:	4a09      	ldr	r2, [pc, #36]	; (800cfbc <enq_lock+0x40>)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	011b      	lsls	r3, r3, #4
 800cf9a:	4413      	add	r3, r2
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d1f2      	bne.n	800cf88 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	bf14      	ite	ne
 800cfa8:	2301      	movne	r3, #1
 800cfaa:	2300      	moveq	r3, #0
 800cfac:	b2db      	uxtb	r3, r3
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	20005bb0 	.word	0x20005bb0

0800cfc0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfca:	2300      	movs	r3, #0
 800cfcc:	60fb      	str	r3, [r7, #12]
 800cfce:	e01f      	b.n	800d010 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cfd0:	4a41      	ldr	r2, [pc, #260]	; (800d0d8 <inc_lock+0x118>)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	011b      	lsls	r3, r3, #4
 800cfd6:	4413      	add	r3, r2
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d113      	bne.n	800d00a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cfe2:	4a3d      	ldr	r2, [pc, #244]	; (800d0d8 <inc_lock+0x118>)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	011b      	lsls	r3, r3, #4
 800cfe8:	4413      	add	r3, r2
 800cfea:	3304      	adds	r3, #4
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d109      	bne.n	800d00a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cff6:	4a38      	ldr	r2, [pc, #224]	; (800d0d8 <inc_lock+0x118>)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	011b      	lsls	r3, r3, #4
 800cffc:	4413      	add	r3, r2
 800cffe:	3308      	adds	r3, #8
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d006:	429a      	cmp	r2, r3
 800d008:	d006      	beq.n	800d018 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3301      	adds	r3, #1
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d9dc      	bls.n	800cfd0 <inc_lock+0x10>
 800d016:	e000      	b.n	800d01a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d018:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d132      	bne.n	800d086 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d020:	2300      	movs	r3, #0
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	e002      	b.n	800d02c <inc_lock+0x6c>
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	3301      	adds	r3, #1
 800d02a:	60fb      	str	r3, [r7, #12]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d806      	bhi.n	800d040 <inc_lock+0x80>
 800d032:	4a29      	ldr	r2, [pc, #164]	; (800d0d8 <inc_lock+0x118>)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	011b      	lsls	r3, r3, #4
 800d038:	4413      	add	r3, r2
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d1f2      	bne.n	800d026 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2b02      	cmp	r3, #2
 800d044:	d101      	bne.n	800d04a <inc_lock+0x8a>
 800d046:	2300      	movs	r3, #0
 800d048:	e040      	b.n	800d0cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	4922      	ldr	r1, [pc, #136]	; (800d0d8 <inc_lock+0x118>)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	440b      	add	r3, r1
 800d056:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	689a      	ldr	r2, [r3, #8]
 800d05c:	491e      	ldr	r1, [pc, #120]	; (800d0d8 <inc_lock+0x118>)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	011b      	lsls	r3, r3, #4
 800d062:	440b      	add	r3, r1
 800d064:	3304      	adds	r3, #4
 800d066:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	695a      	ldr	r2, [r3, #20]
 800d06c:	491a      	ldr	r1, [pc, #104]	; (800d0d8 <inc_lock+0x118>)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	011b      	lsls	r3, r3, #4
 800d072:	440b      	add	r3, r1
 800d074:	3308      	adds	r3, #8
 800d076:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d078:	4a17      	ldr	r2, [pc, #92]	; (800d0d8 <inc_lock+0x118>)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	011b      	lsls	r3, r3, #4
 800d07e:	4413      	add	r3, r2
 800d080:	330c      	adds	r3, #12
 800d082:	2200      	movs	r2, #0
 800d084:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d009      	beq.n	800d0a0 <inc_lock+0xe0>
 800d08c:	4a12      	ldr	r2, [pc, #72]	; (800d0d8 <inc_lock+0x118>)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	011b      	lsls	r3, r3, #4
 800d092:	4413      	add	r3, r2
 800d094:	330c      	adds	r3, #12
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <inc_lock+0xe0>
 800d09c:	2300      	movs	r3, #0
 800d09e:	e015      	b.n	800d0cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d108      	bne.n	800d0b8 <inc_lock+0xf8>
 800d0a6:	4a0c      	ldr	r2, [pc, #48]	; (800d0d8 <inc_lock+0x118>)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	011b      	lsls	r3, r3, #4
 800d0ac:	4413      	add	r3, r2
 800d0ae:	330c      	adds	r3, #12
 800d0b0:	881b      	ldrh	r3, [r3, #0]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	e001      	b.n	800d0bc <inc_lock+0xfc>
 800d0b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0bc:	4906      	ldr	r1, [pc, #24]	; (800d0d8 <inc_lock+0x118>)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	011b      	lsls	r3, r3, #4
 800d0c2:	440b      	add	r3, r1
 800d0c4:	330c      	adds	r3, #12
 800d0c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3301      	adds	r3, #1
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	20005bb0 	.word	0x20005bb0

0800d0dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	607b      	str	r3, [r7, #4]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d825      	bhi.n	800d13c <dec_lock+0x60>
		n = Files[i].ctr;
 800d0f0:	4a17      	ldr	r2, [pc, #92]	; (800d150 <dec_lock+0x74>)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	011b      	lsls	r3, r3, #4
 800d0f6:	4413      	add	r3, r2
 800d0f8:	330c      	adds	r3, #12
 800d0fa:	881b      	ldrh	r3, [r3, #0]
 800d0fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d0fe:	89fb      	ldrh	r3, [r7, #14]
 800d100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d104:	d101      	bne.n	800d10a <dec_lock+0x2e>
 800d106:	2300      	movs	r3, #0
 800d108:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d10a:	89fb      	ldrh	r3, [r7, #14]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <dec_lock+0x3a>
 800d110:	89fb      	ldrh	r3, [r7, #14]
 800d112:	3b01      	subs	r3, #1
 800d114:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d116:	4a0e      	ldr	r2, [pc, #56]	; (800d150 <dec_lock+0x74>)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	4413      	add	r3, r2
 800d11e:	330c      	adds	r3, #12
 800d120:	89fa      	ldrh	r2, [r7, #14]
 800d122:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d124:	89fb      	ldrh	r3, [r7, #14]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d105      	bne.n	800d136 <dec_lock+0x5a>
 800d12a:	4a09      	ldr	r2, [pc, #36]	; (800d150 <dec_lock+0x74>)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	011b      	lsls	r3, r3, #4
 800d130:	4413      	add	r3, r2
 800d132:	2200      	movs	r2, #0
 800d134:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d136:	2300      	movs	r3, #0
 800d138:	737b      	strb	r3, [r7, #13]
 800d13a:	e001      	b.n	800d140 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d13c:	2302      	movs	r3, #2
 800d13e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d140:	7b7b      	ldrb	r3, [r7, #13]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3714      	adds	r7, #20
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	20005bb0 	.word	0x20005bb0

0800d154 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d15c:	2300      	movs	r3, #0
 800d15e:	60fb      	str	r3, [r7, #12]
 800d160:	e010      	b.n	800d184 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d162:	4a0d      	ldr	r2, [pc, #52]	; (800d198 <clear_lock+0x44>)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	011b      	lsls	r3, r3, #4
 800d168:	4413      	add	r3, r2
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d105      	bne.n	800d17e <clear_lock+0x2a>
 800d172:	4a09      	ldr	r2, [pc, #36]	; (800d198 <clear_lock+0x44>)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	011b      	lsls	r3, r3, #4
 800d178:	4413      	add	r3, r2
 800d17a:	2200      	movs	r2, #0
 800d17c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	3301      	adds	r3, #1
 800d182:	60fb      	str	r3, [r7, #12]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b01      	cmp	r3, #1
 800d188:	d9eb      	bls.n	800d162 <clear_lock+0xe>
	}
}
 800d18a:	bf00      	nop
 800d18c:	bf00      	nop
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr
 800d198:	20005bb0 	.word	0x20005bb0

0800d19c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	78db      	ldrb	r3, [r3, #3]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d034      	beq.n	800d21a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	7858      	ldrb	r0, [r3, #1]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	f7ff fd40 	bl	800cc48 <disk_write>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d002      	beq.n	800d1d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	73fb      	strb	r3, [r7, #15]
 800d1d2:	e022      	b.n	800d21a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	1ad2      	subs	r2, r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d217      	bcs.n	800d21a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	789b      	ldrb	r3, [r3, #2]
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	e010      	b.n	800d214 <sync_window+0x78>
					wsect += fs->fsize;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	69db      	ldr	r3, [r3, #28]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	7858      	ldrb	r0, [r3, #1]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d206:	2301      	movs	r3, #1
 800d208:	697a      	ldr	r2, [r7, #20]
 800d20a:	f7ff fd1d 	bl	800cc48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	3b01      	subs	r3, #1
 800d212:	613b      	str	r3, [r7, #16]
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d8eb      	bhi.n	800d1f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d236:	683a      	ldr	r2, [r7, #0]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d01b      	beq.n	800d274 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff ffad 	bl	800d19c <sync_window>
 800d242:	4603      	mov	r3, r0
 800d244:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d246:	7bfb      	ldrb	r3, [r7, #15]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d113      	bne.n	800d274 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	7858      	ldrb	r0, [r3, #1]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d256:	2301      	movs	r3, #1
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	f7ff fcd5 	bl	800cc08 <disk_read>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d004      	beq.n	800d26e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d268:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d274:	7bfb      	ldrb	r3, [r7, #15]
}
 800d276:	4618      	mov	r0, r3
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
	...

0800d280 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7ff ff87 	bl	800d19c <sync_window>
 800d28e:	4603      	mov	r3, r0
 800d290:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d292:	7bfb      	ldrb	r3, [r7, #15]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d158      	bne.n	800d34a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2b03      	cmp	r3, #3
 800d29e:	d148      	bne.n	800d332 <sync_fs+0xb2>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	791b      	ldrb	r3, [r3, #4]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d144      	bne.n	800d332 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	3334      	adds	r3, #52	; 0x34
 800d2ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff fda9 	bl	800ce0a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	3334      	adds	r3, #52	; 0x34
 800d2bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2c0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7ff fd38 	bl	800cd3a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	3334      	adds	r3, #52	; 0x34
 800d2ce:	4921      	ldr	r1, [pc, #132]	; (800d354 <sync_fs+0xd4>)
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fd4d 	bl	800cd70 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	3334      	adds	r3, #52	; 0x34
 800d2da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2de:	491e      	ldr	r1, [pc, #120]	; (800d358 <sync_fs+0xd8>)
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7ff fd45 	bl	800cd70 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	3334      	adds	r3, #52	; 0x34
 800d2ea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	f7ff fd3b 	bl	800cd70 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	3334      	adds	r3, #52	; 0x34
 800d2fe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	4619      	mov	r1, r3
 800d308:	4610      	mov	r0, r2
 800d30a:	f7ff fd31 	bl	800cd70 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7858      	ldrb	r0, [r3, #1]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d326:	2301      	movs	r3, #1
 800d328:	f7ff fc8e 	bl	800cc48 <disk_write>
			fs->fsi_flag = 0;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	785b      	ldrb	r3, [r3, #1]
 800d336:	2200      	movs	r2, #0
 800d338:	2100      	movs	r1, #0
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff fca4 	bl	800cc88 <disk_ioctl>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d001      	beq.n	800d34a <sync_fs+0xca>
 800d346:	2301      	movs	r3, #1
 800d348:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	41615252 	.word	0x41615252
 800d358:	61417272 	.word	0x61417272

0800d35c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	3b02      	subs	r3, #2
 800d36a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	3b02      	subs	r3, #2
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d301      	bcc.n	800d37c <clust2sect+0x20>
 800d378:	2300      	movs	r3, #0
 800d37a:	e008      	b.n	800d38e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	895b      	ldrh	r3, [r3, #10]
 800d380:	461a      	mov	r2, r3
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	fb03 f202 	mul.w	r2, r3, r2
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38c:	4413      	add	r3, r2
}
 800d38e:	4618      	mov	r0, r3
 800d390:	370c      	adds	r7, #12
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr

0800d39a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b086      	sub	sp, #24
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d904      	bls.n	800d3ba <get_fat+0x20>
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d302      	bcc.n	800d3c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	617b      	str	r3, [r7, #20]
 800d3be:	e08f      	b.n	800d4e0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d3c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	2b03      	cmp	r3, #3
 800d3cc:	d062      	beq.n	800d494 <get_fat+0xfa>
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	dc7c      	bgt.n	800d4cc <get_fat+0x132>
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d002      	beq.n	800d3dc <get_fat+0x42>
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d042      	beq.n	800d460 <get_fat+0xc6>
 800d3da:	e077      	b.n	800d4cc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	085b      	lsrs	r3, r3, #1
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	0a5b      	lsrs	r3, r3, #9
 800d3f2:	4413      	add	r3, r2
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6938      	ldr	r0, [r7, #16]
 800d3f8:	f7ff ff14 	bl	800d224 <move_window>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d167      	bne.n	800d4d2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	60fa      	str	r2, [r7, #12]
 800d408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	4413      	add	r3, r2
 800d410:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d414:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	0a5b      	lsrs	r3, r3, #9
 800d41e:	4413      	add	r3, r2
 800d420:	4619      	mov	r1, r3
 800d422:	6938      	ldr	r0, [r7, #16]
 800d424:	f7ff fefe 	bl	800d224 <move_window>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d153      	bne.n	800d4d6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	4413      	add	r3, r2
 800d438:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d43c:	021b      	lsls	r3, r3, #8
 800d43e:	461a      	mov	r2, r3
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	4313      	orrs	r3, r2
 800d444:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	f003 0301 	and.w	r3, r3, #1
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <get_fat+0xbc>
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	091b      	lsrs	r3, r3, #4
 800d454:	e002      	b.n	800d45c <get_fat+0xc2>
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d45c:	617b      	str	r3, [r7, #20]
			break;
 800d45e:	e03f      	b.n	800d4e0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	0a1b      	lsrs	r3, r3, #8
 800d468:	4413      	add	r3, r2
 800d46a:	4619      	mov	r1, r3
 800d46c:	6938      	ldr	r0, [r7, #16]
 800d46e:	f7ff fed9 	bl	800d224 <move_window>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d130      	bne.n	800d4da <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d486:	4413      	add	r3, r2
 800d488:	4618      	mov	r0, r3
 800d48a:	f7ff fc1b 	bl	800ccc4 <ld_word>
 800d48e:	4603      	mov	r3, r0
 800d490:	617b      	str	r3, [r7, #20]
			break;
 800d492:	e025      	b.n	800d4e0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	09db      	lsrs	r3, r3, #7
 800d49c:	4413      	add	r3, r2
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6938      	ldr	r0, [r7, #16]
 800d4a2:	f7ff febf 	bl	800d224 <move_window>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d118      	bne.n	800d4de <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d4ba:	4413      	add	r3, r2
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7ff fc19 	bl	800ccf4 <ld_dword>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d4c8:	617b      	str	r3, [r7, #20]
			break;
 800d4ca:	e009      	b.n	800d4e0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	617b      	str	r3, [r7, #20]
 800d4d0:	e006      	b.n	800d4e0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4d2:	bf00      	nop
 800d4d4:	e004      	b.n	800d4e0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4d6:	bf00      	nop
 800d4d8:	e002      	b.n	800d4e0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4da:	bf00      	nop
 800d4dc:	e000      	b.n	800d4e0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4de:	bf00      	nop
		}
	}

	return val;
 800d4e0:	697b      	ldr	r3, [r7, #20]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d4ea:	b590      	push	{r4, r7, lr}
 800d4ec:	b089      	sub	sp, #36	; 0x24
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	60f8      	str	r0, [r7, #12]
 800d4f2:	60b9      	str	r1, [r7, #8]
 800d4f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	f240 80d9 	bls.w	800d6b4 <put_fat+0x1ca>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	699b      	ldr	r3, [r3, #24]
 800d506:	68ba      	ldr	r2, [r7, #8]
 800d508:	429a      	cmp	r2, r3
 800d50a:	f080 80d3 	bcs.w	800d6b4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	2b03      	cmp	r3, #3
 800d514:	f000 8096 	beq.w	800d644 <put_fat+0x15a>
 800d518:	2b03      	cmp	r3, #3
 800d51a:	f300 80cb 	bgt.w	800d6b4 <put_fat+0x1ca>
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d002      	beq.n	800d528 <put_fat+0x3e>
 800d522:	2b02      	cmp	r3, #2
 800d524:	d06e      	beq.n	800d604 <put_fat+0x11a>
 800d526:	e0c5      	b.n	800d6b4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	61bb      	str	r3, [r7, #24]
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	085b      	lsrs	r3, r3, #1
 800d530:	69ba      	ldr	r2, [r7, #24]
 800d532:	4413      	add	r3, r2
 800d534:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	0a5b      	lsrs	r3, r3, #9
 800d53e:	4413      	add	r3, r2
 800d540:	4619      	mov	r1, r3
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	f7ff fe6e 	bl	800d224 <move_window>
 800d548:	4603      	mov	r3, r0
 800d54a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d54c:	7ffb      	ldrb	r3, [r7, #31]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	f040 80a9 	bne.w	800d6a6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	1c59      	adds	r1, r3, #1
 800d55e:	61b9      	str	r1, [r7, #24]
 800d560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d564:	4413      	add	r3, r2
 800d566:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	f003 0301 	and.w	r3, r3, #1
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00d      	beq.n	800d58e <put_fat+0xa4>
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	b25b      	sxtb	r3, r3
 800d578:	f003 030f 	and.w	r3, r3, #15
 800d57c:	b25a      	sxtb	r2, r3
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	b2db      	uxtb	r3, r3
 800d582:	011b      	lsls	r3, r3, #4
 800d584:	b25b      	sxtb	r3, r3
 800d586:	4313      	orrs	r3, r2
 800d588:	b25b      	sxtb	r3, r3
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	e001      	b.n	800d592 <put_fat+0xa8>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	b2db      	uxtb	r3, r3
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2201      	movs	r2, #1
 800d59a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	0a5b      	lsrs	r3, r3, #9
 800d5a4:	4413      	add	r3, r2
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7ff fe3b 	bl	800d224 <move_window>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5b2:	7ffb      	ldrb	r3, [r7, #31]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d178      	bne.n	800d6aa <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c4:	4413      	add	r3, r2
 800d5c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	f003 0301 	and.w	r3, r3, #1
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d003      	beq.n	800d5da <put_fat+0xf0>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	091b      	lsrs	r3, r3, #4
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	e00e      	b.n	800d5f8 <put_fat+0x10e>
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	b25b      	sxtb	r3, r3
 800d5e0:	f023 030f 	bic.w	r3, r3, #15
 800d5e4:	b25a      	sxtb	r2, r3
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	0a1b      	lsrs	r3, r3, #8
 800d5ea:	b25b      	sxtb	r3, r3
 800d5ec:	f003 030f 	and.w	r3, r3, #15
 800d5f0:	b25b      	sxtb	r3, r3
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	b25b      	sxtb	r3, r3
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2201      	movs	r2, #1
 800d600:	70da      	strb	r2, [r3, #3]
			break;
 800d602:	e057      	b.n	800d6b4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	0a1b      	lsrs	r3, r3, #8
 800d60c:	4413      	add	r3, r2
 800d60e:	4619      	mov	r1, r3
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f7ff fe07 	bl	800d224 <move_window>
 800d616:	4603      	mov	r3, r0
 800d618:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d61a:	7ffb      	ldrb	r3, [r7, #31]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d146      	bne.n	800d6ae <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	005b      	lsls	r3, r3, #1
 800d62a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d62e:	4413      	add	r3, r2
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	b292      	uxth	r2, r2
 800d634:	4611      	mov	r1, r2
 800d636:	4618      	mov	r0, r3
 800d638:	f7ff fb7f 	bl	800cd3a <st_word>
			fs->wflag = 1;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2201      	movs	r2, #1
 800d640:	70da      	strb	r2, [r3, #3]
			break;
 800d642:	e037      	b.n	800d6b4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	09db      	lsrs	r3, r3, #7
 800d64c:	4413      	add	r3, r2
 800d64e:	4619      	mov	r1, r3
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7ff fde7 	bl	800d224 <move_window>
 800d656:	4603      	mov	r3, r0
 800d658:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d65a:	7ffb      	ldrb	r3, [r7, #31]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d128      	bne.n	800d6b2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d674:	4413      	add	r3, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f7ff fb3c 	bl	800ccf4 <ld_dword>
 800d67c:	4603      	mov	r3, r0
 800d67e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d682:	4323      	orrs	r3, r4
 800d684:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d694:	4413      	add	r3, r2
 800d696:	6879      	ldr	r1, [r7, #4]
 800d698:	4618      	mov	r0, r3
 800d69a:	f7ff fb69 	bl	800cd70 <st_dword>
			fs->wflag = 1;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	70da      	strb	r2, [r3, #3]
			break;
 800d6a4:	e006      	b.n	800d6b4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6a6:	bf00      	nop
 800d6a8:	e004      	b.n	800d6b4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6aa:	bf00      	nop
 800d6ac:	e002      	b.n	800d6b4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6ae:	bf00      	nop
 800d6b0:	e000      	b.n	800d6b4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6b2:	bf00      	nop
		}
	}
	return res;
 800d6b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3724      	adds	r7, #36	; 0x24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd90      	pop	{r4, r7, pc}

0800d6be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b088      	sub	sp, #32
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	60f8      	str	r0, [r7, #12]
 800d6c6:	60b9      	str	r1, [r7, #8]
 800d6c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d904      	bls.n	800d6e4 <remove_chain+0x26>
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	699b      	ldr	r3, [r3, #24]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d301      	bcc.n	800d6e8 <remove_chain+0x2a>
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	e04b      	b.n	800d780 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00c      	beq.n	800d708 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d6ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6f2:	6879      	ldr	r1, [r7, #4]
 800d6f4:	69b8      	ldr	r0, [r7, #24]
 800d6f6:	f7ff fef8 	bl	800d4ea <put_fat>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d6fe:	7ffb      	ldrb	r3, [r7, #31]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <remove_chain+0x4a>
 800d704:	7ffb      	ldrb	r3, [r7, #31]
 800d706:	e03b      	b.n	800d780 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d708:	68b9      	ldr	r1, [r7, #8]
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f7ff fe45 	bl	800d39a <get_fat>
 800d710:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d031      	beq.n	800d77c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d101      	bne.n	800d722 <remove_chain+0x64>
 800d71e:	2302      	movs	r3, #2
 800d720:	e02e      	b.n	800d780 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d728:	d101      	bne.n	800d72e <remove_chain+0x70>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e028      	b.n	800d780 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d72e:	2200      	movs	r2, #0
 800d730:	68b9      	ldr	r1, [r7, #8]
 800d732:	69b8      	ldr	r0, [r7, #24]
 800d734:	f7ff fed9 	bl	800d4ea <put_fat>
 800d738:	4603      	mov	r3, r0
 800d73a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d73c:	7ffb      	ldrb	r3, [r7, #31]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <remove_chain+0x88>
 800d742:	7ffb      	ldrb	r3, [r7, #31]
 800d744:	e01c      	b.n	800d780 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	695a      	ldr	r2, [r3, #20]
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	699b      	ldr	r3, [r3, #24]
 800d74e:	3b02      	subs	r3, #2
 800d750:	429a      	cmp	r2, r3
 800d752:	d20b      	bcs.n	800d76c <remove_chain+0xae>
			fs->free_clst++;
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	1c5a      	adds	r2, r3, #1
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	791b      	ldrb	r3, [r3, #4]
 800d762:	f043 0301 	orr.w	r3, r3, #1
 800d766:	b2da      	uxtb	r2, r3
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	429a      	cmp	r2, r3
 800d778:	d3c6      	bcc.n	800d708 <remove_chain+0x4a>
 800d77a:	e000      	b.n	800d77e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d77c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3720      	adds	r7, #32
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b088      	sub	sp, #32
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10d      	bne.n	800d7ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d004      	beq.n	800d7b4 <create_chain+0x2c>
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	699b      	ldr	r3, [r3, #24]
 800d7ae:	69ba      	ldr	r2, [r7, #24]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d31b      	bcc.n	800d7ec <create_chain+0x64>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	61bb      	str	r3, [r7, #24]
 800d7b8:	e018      	b.n	800d7ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7ba:	6839      	ldr	r1, [r7, #0]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff fdec 	bl	800d39a <get_fat>
 800d7c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d801      	bhi.n	800d7ce <create_chain+0x46>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e070      	b.n	800d8b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7d4:	d101      	bne.n	800d7da <create_chain+0x52>
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	e06a      	b.n	800d8b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	699b      	ldr	r3, [r3, #24]
 800d7de:	68fa      	ldr	r2, [r7, #12]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d201      	bcs.n	800d7e8 <create_chain+0x60>
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	e063      	b.n	800d8b0 <create_chain+0x128>
		scl = clst;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	699b      	ldr	r3, [r3, #24]
 800d7fa:	69fa      	ldr	r2, [r7, #28]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d307      	bcc.n	800d810 <create_chain+0x88>
				ncl = 2;
 800d800:	2302      	movs	r3, #2
 800d802:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d804:	69fa      	ldr	r2, [r7, #28]
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d901      	bls.n	800d810 <create_chain+0x88>
 800d80c:	2300      	movs	r3, #0
 800d80e:	e04f      	b.n	800d8b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d810:	69f9      	ldr	r1, [r7, #28]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff fdc1 	bl	800d39a <get_fat>
 800d818:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00e      	beq.n	800d83e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2b01      	cmp	r3, #1
 800d824:	d003      	beq.n	800d82e <create_chain+0xa6>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d82c:	d101      	bne.n	800d832 <create_chain+0xaa>
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	e03e      	b.n	800d8b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d832:	69fa      	ldr	r2, [r7, #28]
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	429a      	cmp	r2, r3
 800d838:	d1da      	bne.n	800d7f0 <create_chain+0x68>
 800d83a:	2300      	movs	r3, #0
 800d83c:	e038      	b.n	800d8b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d83e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d844:	69f9      	ldr	r1, [r7, #28]
 800d846:	6938      	ldr	r0, [r7, #16]
 800d848:	f7ff fe4f 	bl	800d4ea <put_fat>
 800d84c:	4603      	mov	r3, r0
 800d84e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d850:	7dfb      	ldrb	r3, [r7, #23]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d109      	bne.n	800d86a <create_chain+0xe2>
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d006      	beq.n	800d86a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d85c:	69fa      	ldr	r2, [r7, #28]
 800d85e:	6839      	ldr	r1, [r7, #0]
 800d860:	6938      	ldr	r0, [r7, #16]
 800d862:	f7ff fe42 	bl	800d4ea <put_fat>
 800d866:	4603      	mov	r3, r0
 800d868:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d86a:	7dfb      	ldrb	r3, [r7, #23]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d116      	bne.n	800d89e <create_chain+0x116>
		fs->last_clst = ncl;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	69fa      	ldr	r2, [r7, #28]
 800d874:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	695a      	ldr	r2, [r3, #20]
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	3b02      	subs	r3, #2
 800d880:	429a      	cmp	r2, r3
 800d882:	d804      	bhi.n	800d88e <create_chain+0x106>
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	1e5a      	subs	r2, r3, #1
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	791b      	ldrb	r3, [r3, #4]
 800d892:	f043 0301 	orr.w	r3, r3, #1
 800d896:	b2da      	uxtb	r2, r3
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	711a      	strb	r2, [r3, #4]
 800d89c:	e007      	b.n	800d8ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d89e:	7dfb      	ldrb	r3, [r7, #23]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d102      	bne.n	800d8aa <create_chain+0x122>
 800d8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8a8:	e000      	b.n	800d8ac <create_chain+0x124>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d8ae:	69fb      	ldr	r3, [r7, #28]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3720      	adds	r7, #32
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b087      	sub	sp, #28
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	0a5b      	lsrs	r3, r3, #9
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	8952      	ldrh	r2, [r2, #10]
 800d8d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	1d1a      	adds	r2, r3, #4
 800d8e2:	613a      	str	r2, [r7, #16]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d101      	bne.n	800d8f2 <clmt_clust+0x3a>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	e010      	b.n	800d914 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d307      	bcc.n	800d90a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	617b      	str	r3, [r7, #20]
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	3304      	adds	r3, #4
 800d906:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d908:	e7e9      	b.n	800d8de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d90a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	4413      	add	r3, r2
}
 800d914:	4618      	mov	r0, r3
 800d916:	371c      	adds	r7, #28
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d936:	d204      	bcs.n	800d942 <dir_sdi+0x22>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	f003 031f 	and.w	r3, r3, #31
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d942:	2302      	movs	r3, #2
 800d944:	e063      	b.n	800da0e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	683a      	ldr	r2, [r7, #0]
 800d94a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d106      	bne.n	800d966 <dir_sdi+0x46>
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d902      	bls.n	800d966 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d964:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10c      	bne.n	800d986 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	095b      	lsrs	r3, r3, #5
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	8912      	ldrh	r2, [r2, #8]
 800d974:	4293      	cmp	r3, r2
 800d976:	d301      	bcc.n	800d97c <dir_sdi+0x5c>
 800d978:	2302      	movs	r3, #2
 800d97a:	e048      	b.n	800da0e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	61da      	str	r2, [r3, #28]
 800d984:	e029      	b.n	800d9da <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	895b      	ldrh	r3, [r3, #10]
 800d98a:	025b      	lsls	r3, r3, #9
 800d98c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d98e:	e019      	b.n	800d9c4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6979      	ldr	r1, [r7, #20]
 800d994:	4618      	mov	r0, r3
 800d996:	f7ff fd00 	bl	800d39a <get_fat>
 800d99a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9a2:	d101      	bne.n	800d9a8 <dir_sdi+0x88>
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e032      	b.n	800da0e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d904      	bls.n	800d9b8 <dir_sdi+0x98>
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	699b      	ldr	r3, [r3, #24]
 800d9b2:	697a      	ldr	r2, [r7, #20]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d301      	bcc.n	800d9bc <dir_sdi+0x9c>
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	e028      	b.n	800da0e <dir_sdi+0xee>
			ofs -= csz;
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9c4:	683a      	ldr	r2, [r7, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d2e1      	bcs.n	800d990 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d9cc:	6979      	ldr	r1, [r7, #20]
 800d9ce:	6938      	ldr	r0, [r7, #16]
 800d9d0:	f7ff fcc4 	bl	800d35c <clust2sect>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	697a      	ldr	r2, [r7, #20]
 800d9de:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	69db      	ldr	r3, [r3, #28]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d101      	bne.n	800d9ec <dir_sdi+0xcc>
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	e010      	b.n	800da0e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	69da      	ldr	r2, [r3, #28]
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	0a5b      	lsrs	r3, r3, #9
 800d9f4:	441a      	add	r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da06:	441a      	add	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da0c:	2300      	movs	r3, #0
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3718      	adds	r7, #24
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da16:	b580      	push	{r7, lr}
 800da18:	b086      	sub	sp, #24
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
 800da1e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	695b      	ldr	r3, [r3, #20]
 800da2a:	3320      	adds	r3, #32
 800da2c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	69db      	ldr	r3, [r3, #28]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <dir_next+0x28>
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da3c:	d301      	bcc.n	800da42 <dir_next+0x2c>
 800da3e:	2304      	movs	r3, #4
 800da40:	e0aa      	b.n	800db98 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f040 8098 	bne.w	800db7e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	69db      	ldr	r3, [r3, #28]
 800da52:	1c5a      	adds	r2, r3, #1
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10b      	bne.n	800da78 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	095b      	lsrs	r3, r3, #5
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	8912      	ldrh	r2, [r2, #8]
 800da68:	4293      	cmp	r3, r2
 800da6a:	f0c0 8088 	bcc.w	800db7e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	61da      	str	r2, [r3, #28]
 800da74:	2304      	movs	r3, #4
 800da76:	e08f      	b.n	800db98 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	0a5b      	lsrs	r3, r3, #9
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	8952      	ldrh	r2, [r2, #10]
 800da80:	3a01      	subs	r2, #1
 800da82:	4013      	ands	r3, r2
 800da84:	2b00      	cmp	r3, #0
 800da86:	d17a      	bne.n	800db7e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	4619      	mov	r1, r3
 800da90:	4610      	mov	r0, r2
 800da92:	f7ff fc82 	bl	800d39a <get_fat>
 800da96:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d801      	bhi.n	800daa2 <dir_next+0x8c>
 800da9e:	2302      	movs	r3, #2
 800daa0:	e07a      	b.n	800db98 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daa8:	d101      	bne.n	800daae <dir_next+0x98>
 800daaa:	2301      	movs	r3, #1
 800daac:	e074      	b.n	800db98 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	697a      	ldr	r2, [r7, #20]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d358      	bcc.n	800db6a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d104      	bne.n	800dac8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	61da      	str	r2, [r3, #28]
 800dac4:	2304      	movs	r3, #4
 800dac6:	e067      	b.n	800db98 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	699b      	ldr	r3, [r3, #24]
 800dace:	4619      	mov	r1, r3
 800dad0:	4610      	mov	r0, r2
 800dad2:	f7ff fe59 	bl	800d788 <create_chain>
 800dad6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <dir_next+0xcc>
 800dade:	2307      	movs	r3, #7
 800dae0:	e05a      	b.n	800db98 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d101      	bne.n	800daec <dir_next+0xd6>
 800dae8:	2302      	movs	r3, #2
 800daea:	e055      	b.n	800db98 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daf2:	d101      	bne.n	800daf8 <dir_next+0xe2>
 800daf4:	2301      	movs	r3, #1
 800daf6:	e04f      	b.n	800db98 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f7ff fb4f 	bl	800d19c <sync_window>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d001      	beq.n	800db08 <dir_next+0xf2>
 800db04:	2301      	movs	r3, #1
 800db06:	e047      	b.n	800db98 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3334      	adds	r3, #52	; 0x34
 800db0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db10:	2100      	movs	r1, #0
 800db12:	4618      	mov	r0, r3
 800db14:	f7ff f979 	bl	800ce0a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db18:	2300      	movs	r3, #0
 800db1a:	613b      	str	r3, [r7, #16]
 800db1c:	6979      	ldr	r1, [r7, #20]
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f7ff fc1c 	bl	800d35c <clust2sect>
 800db24:	4602      	mov	r2, r0
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	631a      	str	r2, [r3, #48]	; 0x30
 800db2a:	e012      	b.n	800db52 <dir_next+0x13c>
						fs->wflag = 1;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2201      	movs	r2, #1
 800db30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f7ff fb32 	bl	800d19c <sync_window>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <dir_next+0x12c>
 800db3e:	2301      	movs	r3, #1
 800db40:	e02a      	b.n	800db98 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	3301      	adds	r3, #1
 800db46:	613b      	str	r3, [r7, #16]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db4c:	1c5a      	adds	r2, r3, #1
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	631a      	str	r2, [r3, #48]	; 0x30
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	895b      	ldrh	r3, [r3, #10]
 800db56:	461a      	mov	r2, r3
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d3e6      	bcc.n	800db2c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	1ad2      	subs	r2, r2, r3
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	697a      	ldr	r2, [r7, #20]
 800db6e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800db70:	6979      	ldr	r1, [r7, #20]
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f7ff fbf2 	bl	800d35c <clust2sect>
 800db78:	4602      	mov	r2, r0
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db90:	441a      	add	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3718      	adds	r7, #24
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff feb4 	bl	800d920 <dir_sdi>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d12b      	bne.n	800dc1a <dir_alloc+0x7a>
		n = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	69db      	ldr	r3, [r3, #28]
 800dbca:	4619      	mov	r1, r3
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7ff fb29 	bl	800d224 <move_window>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d11d      	bne.n	800dc18 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a1b      	ldr	r3, [r3, #32]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	2be5      	cmp	r3, #229	; 0xe5
 800dbe4:	d004      	beq.n	800dbf0 <dir_alloc+0x50>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d107      	bne.n	800dc00 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	613b      	str	r3, [r7, #16]
 800dbf6:	693a      	ldr	r2, [r7, #16]
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d102      	bne.n	800dc04 <dir_alloc+0x64>
 800dbfe:	e00c      	b.n	800dc1a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc00:	2300      	movs	r3, #0
 800dc02:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc04:	2101      	movs	r1, #1
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7ff ff05 	bl	800da16 <dir_next>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc10:	7dfb      	ldrb	r3, [r7, #23]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d0d7      	beq.n	800dbc6 <dir_alloc+0x26>
 800dc16:	e000      	b.n	800dc1a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc18:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc1a:	7dfb      	ldrb	r3, [r7, #23]
 800dc1c:	2b04      	cmp	r3, #4
 800dc1e:	d101      	bne.n	800dc24 <dir_alloc+0x84>
 800dc20:	2307      	movs	r3, #7
 800dc22:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc24:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3718      	adds	r7, #24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b084      	sub	sp, #16
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	331a      	adds	r3, #26
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff f841 	bl	800ccc4 <ld_word>
 800dc42:	4603      	mov	r3, r0
 800dc44:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d109      	bne.n	800dc62 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	3314      	adds	r3, #20
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7ff f836 	bl	800ccc4 <ld_word>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	041b      	lsls	r3, r3, #16
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc62:	68fb      	ldr	r3, [r7, #12]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3710      	adds	r7, #16
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	331a      	adds	r3, #26
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	b292      	uxth	r2, r2
 800dc80:	4611      	mov	r1, r2
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff f859 	bl	800cd3a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2b03      	cmp	r3, #3
 800dc8e:	d109      	bne.n	800dca4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	f103 0214 	add.w	r2, r3, #20
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	0c1b      	lsrs	r3, r3, #16
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	4610      	mov	r0, r2
 800dca0:	f7ff f84b 	bl	800cd3a <st_word>
	}
}
 800dca4:	bf00      	nop
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dcac:	b590      	push	{r4, r7, lr}
 800dcae:	b087      	sub	sp, #28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	331a      	adds	r3, #26
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7ff f802 	bl	800ccc4 <ld_word>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d001      	beq.n	800dcca <cmp_lfn+0x1e>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e059      	b.n	800dd7e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcd2:	1e5a      	subs	r2, r3, #1
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	4413      	add	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4413      	add	r3, r2
 800dcde:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dce0:	2301      	movs	r3, #1
 800dce2:	81fb      	strh	r3, [r7, #14]
 800dce4:	2300      	movs	r3, #0
 800dce6:	613b      	str	r3, [r7, #16]
 800dce8:	e033      	b.n	800dd52 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dcea:	4a27      	ldr	r2, [pc, #156]	; (800dd88 <cmp_lfn+0xdc>)
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	4413      	add	r3, r2
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fe ffe3 	bl	800ccc4 <ld_word>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dd02:	89fb      	ldrh	r3, [r7, #14]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d01a      	beq.n	800dd3e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	2bfe      	cmp	r3, #254	; 0xfe
 800dd0c:	d812      	bhi.n	800dd34 <cmp_lfn+0x88>
 800dd0e:	89bb      	ldrh	r3, [r7, #12]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f001 ffcd 	bl	800fcb0 <ff_wtoupper>
 800dd16:	4603      	mov	r3, r0
 800dd18:	461c      	mov	r4, r3
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	1c5a      	adds	r2, r3, #1
 800dd1e:	617a      	str	r2, [r7, #20]
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	4413      	add	r3, r2
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f001 ffc1 	bl	800fcb0 <ff_wtoupper>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	429c      	cmp	r4, r3
 800dd32:	d001      	beq.n	800dd38 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dd34:	2300      	movs	r3, #0
 800dd36:	e022      	b.n	800dd7e <cmp_lfn+0xd2>
			}
			wc = uc;
 800dd38:	89bb      	ldrh	r3, [r7, #12]
 800dd3a:	81fb      	strh	r3, [r7, #14]
 800dd3c:	e006      	b.n	800dd4c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd3e:	89bb      	ldrh	r3, [r7, #12]
 800dd40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d001      	beq.n	800dd4c <cmp_lfn+0xa0>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e018      	b.n	800dd7e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	613b      	str	r3, [r7, #16]
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	2b0c      	cmp	r3, #12
 800dd56:	d9c8      	bls.n	800dcea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00b      	beq.n	800dd7c <cmp_lfn+0xd0>
 800dd64:	89fb      	ldrh	r3, [r7, #14]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d008      	beq.n	800dd7c <cmp_lfn+0xd0>
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	4413      	add	r3, r2
 800dd72:	881b      	ldrh	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d001      	beq.n	800dd7c <cmp_lfn+0xd0>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e000      	b.n	800dd7e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dd7c:	2301      	movs	r3, #1
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	371c      	adds	r7, #28
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd90      	pop	{r4, r7, pc}
 800dd86:	bf00      	nop
 800dd88:	08012204 	.word	0x08012204

0800dd8c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	331a      	adds	r3, #26
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fe ff92 	bl	800ccc4 <ld_word>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d001      	beq.n	800ddaa <pick_lfn+0x1e>
 800dda6:	2300      	movs	r3, #0
 800dda8:	e04d      	b.n	800de46 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddb2:	1e5a      	subs	r2, r3, #1
 800ddb4:	4613      	mov	r3, r2
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	4413      	add	r3, r2
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	4413      	add	r3, r2
 800ddbe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	81fb      	strh	r3, [r7, #14]
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	613b      	str	r3, [r7, #16]
 800ddc8:	e028      	b.n	800de1c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ddca:	4a21      	ldr	r2, [pc, #132]	; (800de50 <pick_lfn+0xc4>)
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	4413      	add	r3, r2
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7fe ff73 	bl	800ccc4 <ld_word>
 800ddde:	4603      	mov	r3, r0
 800dde0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dde2:	89fb      	ldrh	r3, [r7, #14]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00f      	beq.n	800de08 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	2bfe      	cmp	r3, #254	; 0xfe
 800ddec:	d901      	bls.n	800ddf2 <pick_lfn+0x66>
 800ddee:	2300      	movs	r3, #0
 800ddf0:	e029      	b.n	800de46 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ddf2:	89bb      	ldrh	r3, [r7, #12]
 800ddf4:	81fb      	strh	r3, [r7, #14]
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	1c5a      	adds	r2, r3, #1
 800ddfa:	617a      	str	r2, [r7, #20]
 800ddfc:	005b      	lsls	r3, r3, #1
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	4413      	add	r3, r2
 800de02:	89fa      	ldrh	r2, [r7, #14]
 800de04:	801a      	strh	r2, [r3, #0]
 800de06:	e006      	b.n	800de16 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800de08:	89bb      	ldrh	r3, [r7, #12]
 800de0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de0e:	4293      	cmp	r3, r2
 800de10:	d001      	beq.n	800de16 <pick_lfn+0x8a>
 800de12:	2300      	movs	r3, #0
 800de14:	e017      	b.n	800de46 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	3301      	adds	r3, #1
 800de1a:	613b      	str	r3, [r7, #16]
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	2b0c      	cmp	r3, #12
 800de20:	d9d3      	bls.n	800ddca <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00a      	beq.n	800de44 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	2bfe      	cmp	r3, #254	; 0xfe
 800de32:	d901      	bls.n	800de38 <pick_lfn+0xac>
 800de34:	2300      	movs	r3, #0
 800de36:	e006      	b.n	800de46 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	4413      	add	r3, r2
 800de40:	2200      	movs	r2, #0
 800de42:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800de44:	2301      	movs	r3, #1
}
 800de46:	4618      	mov	r0, r3
 800de48:	3718      	adds	r7, #24
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	08012204 	.word	0x08012204

0800de54 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b088      	sub	sp, #32
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	4611      	mov	r1, r2
 800de60:	461a      	mov	r2, r3
 800de62:	460b      	mov	r3, r1
 800de64:	71fb      	strb	r3, [r7, #7]
 800de66:	4613      	mov	r3, r2
 800de68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	330d      	adds	r3, #13
 800de6e:	79ba      	ldrb	r2, [r7, #6]
 800de70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	330b      	adds	r3, #11
 800de76:	220f      	movs	r2, #15
 800de78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	330c      	adds	r3, #12
 800de7e:	2200      	movs	r2, #0
 800de80:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	331a      	adds	r3, #26
 800de86:	2100      	movs	r1, #0
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fe ff56 	bl	800cd3a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800de8e:	79fb      	ldrb	r3, [r7, #7]
 800de90:	1e5a      	subs	r2, r3, #1
 800de92:	4613      	mov	r3, r2
 800de94:	005b      	lsls	r3, r3, #1
 800de96:	4413      	add	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800de9e:	2300      	movs	r3, #0
 800dea0:	82fb      	strh	r3, [r7, #22]
 800dea2:	2300      	movs	r3, #0
 800dea4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dea6:	8afb      	ldrh	r3, [r7, #22]
 800dea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800deac:	4293      	cmp	r3, r2
 800deae:	d007      	beq.n	800dec0 <put_lfn+0x6c>
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	1c5a      	adds	r2, r3, #1
 800deb4:	61fa      	str	r2, [r7, #28]
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	4413      	add	r3, r2
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dec0:	4a17      	ldr	r2, [pc, #92]	; (800df20 <put_lfn+0xcc>)
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	4413      	add	r3, r2
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	461a      	mov	r2, r3
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	4413      	add	r3, r2
 800dece:	8afa      	ldrh	r2, [r7, #22]
 800ded0:	4611      	mov	r1, r2
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fe ff31 	bl	800cd3a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ded8:	8afb      	ldrh	r3, [r7, #22]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d102      	bne.n	800dee4 <put_lfn+0x90>
 800dede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dee2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	3301      	adds	r3, #1
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	2b0c      	cmp	r3, #12
 800deee:	d9da      	bls.n	800dea6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800def0:	8afb      	ldrh	r3, [r7, #22]
 800def2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800def6:	4293      	cmp	r3, r2
 800def8:	d006      	beq.n	800df08 <put_lfn+0xb4>
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	4413      	add	r3, r2
 800df02:	881b      	ldrh	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d103      	bne.n	800df10 <put_lfn+0xbc>
 800df08:	79fb      	ldrb	r3, [r7, #7]
 800df0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df0e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	79fa      	ldrb	r2, [r7, #7]
 800df14:	701a      	strb	r2, [r3, #0]
}
 800df16:	bf00      	nop
 800df18:	3720      	adds	r7, #32
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	08012204 	.word	0x08012204

0800df24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08c      	sub	sp, #48	; 0x30
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
 800df30:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800df32:	220b      	movs	r2, #11
 800df34:	68b9      	ldr	r1, [r7, #8]
 800df36:	68f8      	ldr	r0, [r7, #12]
 800df38:	f7fe ff46 	bl	800cdc8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	2b05      	cmp	r3, #5
 800df40:	d929      	bls.n	800df96 <gen_numname+0x72>
		sr = seq;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800df46:	e020      	b.n	800df8a <gen_numname+0x66>
			wc = *lfn++;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	1c9a      	adds	r2, r3, #2
 800df4c:	607a      	str	r2, [r7, #4]
 800df4e:	881b      	ldrh	r3, [r3, #0]
 800df50:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800df52:	2300      	movs	r3, #0
 800df54:	62bb      	str	r3, [r7, #40]	; 0x28
 800df56:	e015      	b.n	800df84 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	005a      	lsls	r2, r3, #1
 800df5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df5e:	f003 0301 	and.w	r3, r3, #1
 800df62:	4413      	add	r3, r2
 800df64:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800df66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df68:	085b      	lsrs	r3, r3, #1
 800df6a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df72:	2b00      	cmp	r3, #0
 800df74:	d003      	beq.n	800df7e <gen_numname+0x5a>
 800df76:	69fa      	ldr	r2, [r7, #28]
 800df78:	4b30      	ldr	r3, [pc, #192]	; (800e03c <gen_numname+0x118>)
 800df7a:	4053      	eors	r3, r2
 800df7c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800df7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df80:	3301      	adds	r3, #1
 800df82:	62bb      	str	r3, [r7, #40]	; 0x28
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	2b0f      	cmp	r3, #15
 800df88:	d9e6      	bls.n	800df58 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1da      	bne.n	800df48 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800df96:	2307      	movs	r3, #7
 800df98:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	f003 030f 	and.w	r3, r3, #15
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	3330      	adds	r3, #48	; 0x30
 800dfa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dfaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfae:	2b39      	cmp	r3, #57	; 0x39
 800dfb0:	d904      	bls.n	800dfbc <gen_numname+0x98>
 800dfb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfb6:	3307      	adds	r3, #7
 800dfb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbe:	1e5a      	subs	r2, r3, #1
 800dfc0:	62ba      	str	r2, [r7, #40]	; 0x28
 800dfc2:	3330      	adds	r3, #48	; 0x30
 800dfc4:	443b      	add	r3, r7
 800dfc6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dfca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	091b      	lsrs	r3, r3, #4
 800dfd2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1df      	bne.n	800df9a <gen_numname+0x76>
	ns[i] = '~';
 800dfda:	f107 0214 	add.w	r2, r7, #20
 800dfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe0:	4413      	add	r3, r2
 800dfe2:	227e      	movs	r2, #126	; 0x7e
 800dfe4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	627b      	str	r3, [r7, #36]	; 0x24
 800dfea:	e002      	b.n	800dff2 <gen_numname+0xce>
 800dfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfee:	3301      	adds	r3, #1
 800dff0:	627b      	str	r3, [r7, #36]	; 0x24
 800dff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d205      	bcs.n	800e006 <gen_numname+0xe2>
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffe:	4413      	add	r3, r2
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	2b20      	cmp	r3, #32
 800e004:	d1f2      	bne.n	800dfec <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e008:	2b07      	cmp	r3, #7
 800e00a:	d807      	bhi.n	800e01c <gen_numname+0xf8>
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	1c5a      	adds	r2, r3, #1
 800e010:	62ba      	str	r2, [r7, #40]	; 0x28
 800e012:	3330      	adds	r3, #48	; 0x30
 800e014:	443b      	add	r3, r7
 800e016:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e01a:	e000      	b.n	800e01e <gen_numname+0xfa>
 800e01c:	2120      	movs	r1, #32
 800e01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e020:	1c5a      	adds	r2, r3, #1
 800e022:	627a      	str	r2, [r7, #36]	; 0x24
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	4413      	add	r3, r2
 800e028:	460a      	mov	r2, r1
 800e02a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	2b07      	cmp	r3, #7
 800e030:	d9e9      	bls.n	800e006 <gen_numname+0xe2>
}
 800e032:	bf00      	nop
 800e034:	bf00      	nop
 800e036:	3730      	adds	r7, #48	; 0x30
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	00011021 	.word	0x00011021

0800e040 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e048:	2300      	movs	r3, #0
 800e04a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e04c:	230b      	movs	r3, #11
 800e04e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e050:	7bfb      	ldrb	r3, [r7, #15]
 800e052:	b2da      	uxtb	r2, r3
 800e054:	0852      	lsrs	r2, r2, #1
 800e056:	01db      	lsls	r3, r3, #7
 800e058:	4313      	orrs	r3, r2
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	1c59      	adds	r1, r3, #1
 800e060:	6079      	str	r1, [r7, #4]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	4413      	add	r3, r2
 800e066:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	3b01      	subs	r3, #1
 800e06c:	60bb      	str	r3, [r7, #8]
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1ed      	bne.n	800e050 <sum_sfn+0x10>
	return sum;
 800e074:	7bfb      	ldrb	r3, [r7, #15]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b086      	sub	sp, #24
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e08c:	2304      	movs	r3, #4
 800e08e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e096:	23ff      	movs	r3, #255	; 0xff
 800e098:	757b      	strb	r3, [r7, #21]
 800e09a:	23ff      	movs	r3, #255	; 0xff
 800e09c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e09e:	e081      	b.n	800e1a4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	69db      	ldr	r3, [r3, #28]
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	6938      	ldr	r0, [r7, #16]
 800e0a8:	f7ff f8bc 	bl	800d224 <move_window>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0b0:	7dfb      	ldrb	r3, [r7, #23]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d17c      	bne.n	800e1b0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a1b      	ldr	r3, [r3, #32]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e0be:	7dbb      	ldrb	r3, [r7, #22]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d102      	bne.n	800e0ca <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e0c4:	2304      	movs	r3, #4
 800e0c6:	75fb      	strb	r3, [r7, #23]
 800e0c8:	e077      	b.n	800e1ba <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a1b      	ldr	r3, [r3, #32]
 800e0ce:	330b      	adds	r3, #11
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0d6:	73fb      	strb	r3, [r7, #15]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	7bfa      	ldrb	r2, [r7, #15]
 800e0dc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e0de:	7dbb      	ldrb	r3, [r7, #22]
 800e0e0:	2be5      	cmp	r3, #229	; 0xe5
 800e0e2:	d00e      	beq.n	800e102 <dir_read+0x80>
 800e0e4:	7dbb      	ldrb	r3, [r7, #22]
 800e0e6:	2b2e      	cmp	r3, #46	; 0x2e
 800e0e8:	d00b      	beq.n	800e102 <dir_read+0x80>
 800e0ea:	7bfb      	ldrb	r3, [r7, #15]
 800e0ec:	f023 0320 	bic.w	r3, r3, #32
 800e0f0:	2b08      	cmp	r3, #8
 800e0f2:	bf0c      	ite	eq
 800e0f4:	2301      	moveq	r3, #1
 800e0f6:	2300      	movne	r3, #0
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d002      	beq.n	800e108 <dir_read+0x86>
				ord = 0xFF;
 800e102:	23ff      	movs	r3, #255	; 0xff
 800e104:	757b      	strb	r3, [r7, #21]
 800e106:	e044      	b.n	800e192 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	2b0f      	cmp	r3, #15
 800e10c:	d12f      	bne.n	800e16e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e10e:	7dbb      	ldrb	r3, [r7, #22]
 800e110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00d      	beq.n	800e134 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a1b      	ldr	r3, [r3, #32]
 800e11c:	7b5b      	ldrb	r3, [r3, #13]
 800e11e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e120:	7dbb      	ldrb	r3, [r7, #22]
 800e122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e126:	75bb      	strb	r3, [r7, #22]
 800e128:	7dbb      	ldrb	r3, [r7, #22]
 800e12a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	695a      	ldr	r2, [r3, #20]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e134:	7dba      	ldrb	r2, [r7, #22]
 800e136:	7d7b      	ldrb	r3, [r7, #21]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d115      	bne.n	800e168 <dir_read+0xe6>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a1b      	ldr	r3, [r3, #32]
 800e140:	330d      	adds	r3, #13
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	7d3a      	ldrb	r2, [r7, #20]
 800e146:	429a      	cmp	r2, r3
 800e148:	d10e      	bne.n	800e168 <dir_read+0xe6>
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	68da      	ldr	r2, [r3, #12]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6a1b      	ldr	r3, [r3, #32]
 800e152:	4619      	mov	r1, r3
 800e154:	4610      	mov	r0, r2
 800e156:	f7ff fe19 	bl	800dd8c <pick_lfn>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d003      	beq.n	800e168 <dir_read+0xe6>
 800e160:	7d7b      	ldrb	r3, [r7, #21]
 800e162:	3b01      	subs	r3, #1
 800e164:	b2db      	uxtb	r3, r3
 800e166:	e000      	b.n	800e16a <dir_read+0xe8>
 800e168:	23ff      	movs	r3, #255	; 0xff
 800e16a:	757b      	strb	r3, [r7, #21]
 800e16c:	e011      	b.n	800e192 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e16e:	7d7b      	ldrb	r3, [r7, #21]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d109      	bne.n	800e188 <dir_read+0x106>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	4618      	mov	r0, r3
 800e17a:	f7ff ff61 	bl	800e040 <sum_sfn>
 800e17e:	4603      	mov	r3, r0
 800e180:	461a      	mov	r2, r3
 800e182:	7d3b      	ldrb	r3, [r7, #20]
 800e184:	4293      	cmp	r3, r2
 800e186:	d015      	beq.n	800e1b4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e18e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e190:	e010      	b.n	800e1b4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e192:	2100      	movs	r1, #0
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7ff fc3e 	bl	800da16 <dir_next>
 800e19a:	4603      	mov	r3, r0
 800e19c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e19e:	7dfb      	ldrb	r3, [r7, #23]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d109      	bne.n	800e1b8 <dir_read+0x136>
	while (dp->sect) {
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	69db      	ldr	r3, [r3, #28]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f47f af79 	bne.w	800e0a0 <dir_read+0x1e>
 800e1ae:	e004      	b.n	800e1ba <dir_read+0x138>
		if (res != FR_OK) break;
 800e1b0:	bf00      	nop
 800e1b2:	e002      	b.n	800e1ba <dir_read+0x138>
					break;
 800e1b4:	bf00      	nop
 800e1b6:	e000      	b.n	800e1ba <dir_read+0x138>
		if (res != FR_OK) break;
 800e1b8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e1ba:	7dfb      	ldrb	r3, [r7, #23]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d002      	beq.n	800e1c6 <dir_read+0x144>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	61da      	str	r2, [r3, #28]
	return res;
 800e1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3718      	adds	r7, #24
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e1de:	2100      	movs	r1, #0
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7ff fb9d 	bl	800d920 <dir_sdi>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e1ea:	7dfb      	ldrb	r3, [r7, #23]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d001      	beq.n	800e1f4 <dir_find+0x24>
 800e1f0:	7dfb      	ldrb	r3, [r7, #23]
 800e1f2:	e0a9      	b.n	800e348 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e1f4:	23ff      	movs	r3, #255	; 0xff
 800e1f6:	753b      	strb	r3, [r7, #20]
 800e1f8:	7d3b      	ldrb	r3, [r7, #20]
 800e1fa:	757b      	strb	r3, [r7, #21]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e202:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	69db      	ldr	r3, [r3, #28]
 800e208:	4619      	mov	r1, r3
 800e20a:	6938      	ldr	r0, [r7, #16]
 800e20c:	f7ff f80a 	bl	800d224 <move_window>
 800e210:	4603      	mov	r3, r0
 800e212:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e214:	7dfb      	ldrb	r3, [r7, #23]
 800e216:	2b00      	cmp	r3, #0
 800e218:	f040 8090 	bne.w	800e33c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6a1b      	ldr	r3, [r3, #32]
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e224:	7dbb      	ldrb	r3, [r7, #22]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d102      	bne.n	800e230 <dir_find+0x60>
 800e22a:	2304      	movs	r3, #4
 800e22c:	75fb      	strb	r3, [r7, #23]
 800e22e:	e08a      	b.n	800e346 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6a1b      	ldr	r3, [r3, #32]
 800e234:	330b      	adds	r3, #11
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e23c:	73fb      	strb	r3, [r7, #15]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	7bfa      	ldrb	r2, [r7, #15]
 800e242:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e244:	7dbb      	ldrb	r3, [r7, #22]
 800e246:	2be5      	cmp	r3, #229	; 0xe5
 800e248:	d007      	beq.n	800e25a <dir_find+0x8a>
 800e24a:	7bfb      	ldrb	r3, [r7, #15]
 800e24c:	f003 0308 	and.w	r3, r3, #8
 800e250:	2b00      	cmp	r3, #0
 800e252:	d009      	beq.n	800e268 <dir_find+0x98>
 800e254:	7bfb      	ldrb	r3, [r7, #15]
 800e256:	2b0f      	cmp	r3, #15
 800e258:	d006      	beq.n	800e268 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e25a:	23ff      	movs	r3, #255	; 0xff
 800e25c:	757b      	strb	r3, [r7, #21]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e264:	631a      	str	r2, [r3, #48]	; 0x30
 800e266:	e05e      	b.n	800e326 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e268:	7bfb      	ldrb	r3, [r7, #15]
 800e26a:	2b0f      	cmp	r3, #15
 800e26c:	d136      	bne.n	800e2dc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d154      	bne.n	800e326 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e27c:	7dbb      	ldrb	r3, [r7, #22]
 800e27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00d      	beq.n	800e2a2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	7b5b      	ldrb	r3, [r3, #13]
 800e28c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e28e:	7dbb      	ldrb	r3, [r7, #22]
 800e290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e294:	75bb      	strb	r3, [r7, #22]
 800e296:	7dbb      	ldrb	r3, [r7, #22]
 800e298:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	695a      	ldr	r2, [r3, #20]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e2a2:	7dba      	ldrb	r2, [r7, #22]
 800e2a4:	7d7b      	ldrb	r3, [r7, #21]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d115      	bne.n	800e2d6 <dir_find+0x106>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a1b      	ldr	r3, [r3, #32]
 800e2ae:	330d      	adds	r3, #13
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	7d3a      	ldrb	r2, [r7, #20]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d10e      	bne.n	800e2d6 <dir_find+0x106>
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	68da      	ldr	r2, [r3, #12]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6a1b      	ldr	r3, [r3, #32]
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	f7ff fcf2 	bl	800dcac <cmp_lfn>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d003      	beq.n	800e2d6 <dir_find+0x106>
 800e2ce:	7d7b      	ldrb	r3, [r7, #21]
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	e000      	b.n	800e2d8 <dir_find+0x108>
 800e2d6:	23ff      	movs	r3, #255	; 0xff
 800e2d8:	757b      	strb	r3, [r7, #21]
 800e2da:	e024      	b.n	800e326 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e2dc:	7d7b      	ldrb	r3, [r7, #21]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d109      	bne.n	800e2f6 <dir_find+0x126>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6a1b      	ldr	r3, [r3, #32]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7ff feaa 	bl	800e040 <sum_sfn>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	7d3b      	ldrb	r3, [r7, #20]
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d024      	beq.n	800e340 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e2fc:	f003 0301 	and.w	r3, r3, #1
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10a      	bne.n	800e31a <dir_find+0x14a>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6a18      	ldr	r0, [r3, #32]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	3324      	adds	r3, #36	; 0x24
 800e30c:	220b      	movs	r2, #11
 800e30e:	4619      	mov	r1, r3
 800e310:	f7fe fd96 	bl	800ce40 <mem_cmp>
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d014      	beq.n	800e344 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e31a:	23ff      	movs	r3, #255	; 0xff
 800e31c:	757b      	strb	r3, [r7, #21]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e324:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e326:	2100      	movs	r1, #0
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7ff fb74 	bl	800da16 <dir_next>
 800e32e:	4603      	mov	r3, r0
 800e330:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e332:	7dfb      	ldrb	r3, [r7, #23]
 800e334:	2b00      	cmp	r3, #0
 800e336:	f43f af65 	beq.w	800e204 <dir_find+0x34>
 800e33a:	e004      	b.n	800e346 <dir_find+0x176>
		if (res != FR_OK) break;
 800e33c:	bf00      	nop
 800e33e:	e002      	b.n	800e346 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e340:	bf00      	nop
 800e342:	e000      	b.n	800e346 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e344:	bf00      	nop

	return res;
 800e346:	7dfb      	ldrb	r3, [r7, #23]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3718      	adds	r7, #24
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08c      	sub	sp, #48	; 0x30
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e364:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d001      	beq.n	800e370 <dir_register+0x20>
 800e36c:	2306      	movs	r3, #6
 800e36e:	e0e0      	b.n	800e532 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e370:	2300      	movs	r3, #0
 800e372:	627b      	str	r3, [r7, #36]	; 0x24
 800e374:	e002      	b.n	800e37c <dir_register+0x2c>
 800e376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e378:	3301      	adds	r3, #1
 800e37a:	627b      	str	r3, [r7, #36]	; 0x24
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	68da      	ldr	r2, [r3, #12]
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	005b      	lsls	r3, r3, #1
 800e384:	4413      	add	r3, r2
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d1f4      	bne.n	800e376 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e392:	f107 030c 	add.w	r3, r7, #12
 800e396:	220c      	movs	r2, #12
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fe fd15 	bl	800cdc8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e39e:	7dfb      	ldrb	r3, [r7, #23]
 800e3a0:	f003 0301 	and.w	r3, r3, #1
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d032      	beq.n	800e40e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2240      	movs	r2, #64	; 0x40
 800e3ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3b4:	e016      	b.n	800e3e4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	68da      	ldr	r2, [r3, #12]
 800e3c0:	f107 010c 	add.w	r1, r7, #12
 800e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c6:	f7ff fdad 	bl	800df24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7ff ff00 	bl	800e1d0 <dir_find>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e3d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e6:	2b63      	cmp	r3, #99	; 0x63
 800e3e8:	d9e5      	bls.n	800e3b6 <dir_register+0x66>
 800e3ea:	e000      	b.n	800e3ee <dir_register+0x9e>
			if (res != FR_OK) break;
 800e3ec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f0:	2b64      	cmp	r3, #100	; 0x64
 800e3f2:	d101      	bne.n	800e3f8 <dir_register+0xa8>
 800e3f4:	2307      	movs	r3, #7
 800e3f6:	e09c      	b.n	800e532 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e3f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3fc:	2b04      	cmp	r3, #4
 800e3fe:	d002      	beq.n	800e406 <dir_register+0xb6>
 800e400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e404:	e095      	b.n	800e532 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e406:	7dfa      	ldrb	r2, [r7, #23]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e40e:	7dfb      	ldrb	r3, [r7, #23]
 800e410:	f003 0302 	and.w	r3, r3, #2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d007      	beq.n	800e428 <dir_register+0xd8>
 800e418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41a:	330c      	adds	r3, #12
 800e41c:	4a47      	ldr	r2, [pc, #284]	; (800e53c <dir_register+0x1ec>)
 800e41e:	fba2 2303 	umull	r2, r3, r2, r3
 800e422:	089b      	lsrs	r3, r3, #2
 800e424:	3301      	adds	r3, #1
 800e426:	e000      	b.n	800e42a <dir_register+0xda>
 800e428:	2301      	movs	r3, #1
 800e42a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e42c:	6a39      	ldr	r1, [r7, #32]
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f7ff fbb6 	bl	800dba0 <dir_alloc>
 800e434:	4603      	mov	r3, r0
 800e436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d148      	bne.n	800e4d4 <dir_register+0x184>
 800e442:	6a3b      	ldr	r3, [r7, #32]
 800e444:	3b01      	subs	r3, #1
 800e446:	623b      	str	r3, [r7, #32]
 800e448:	6a3b      	ldr	r3, [r7, #32]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d042      	beq.n	800e4d4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	695a      	ldr	r2, [r3, #20]
 800e452:	6a3b      	ldr	r3, [r7, #32]
 800e454:	015b      	lsls	r3, r3, #5
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff fa60 	bl	800d920 <dir_sdi>
 800e460:	4603      	mov	r3, r0
 800e462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d132      	bne.n	800e4d4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	3324      	adds	r3, #36	; 0x24
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fde4 	bl	800e040 <sum_sfn>
 800e478:	4603      	mov	r3, r0
 800e47a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	69db      	ldr	r3, [r3, #28]
 800e480:	4619      	mov	r1, r3
 800e482:	69f8      	ldr	r0, [r7, #28]
 800e484:	f7fe fece 	bl	800d224 <move_window>
 800e488:	4603      	mov	r3, r0
 800e48a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e48e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e492:	2b00      	cmp	r3, #0
 800e494:	d11d      	bne.n	800e4d2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	68d8      	ldr	r0, [r3, #12]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a19      	ldr	r1, [r3, #32]
 800e49e:	6a3b      	ldr	r3, [r7, #32]
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	7efb      	ldrb	r3, [r7, #27]
 800e4a4:	f7ff fcd6 	bl	800de54 <put_lfn>
				fs->wflag = 1;
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7ff fab0 	bl	800da16 <dir_next>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e4bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d107      	bne.n	800e4d4 <dir_register+0x184>
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	623b      	str	r3, [r7, #32]
 800e4ca:	6a3b      	ldr	r3, [r7, #32]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d1d5      	bne.n	800e47c <dir_register+0x12c>
 800e4d0:	e000      	b.n	800e4d4 <dir_register+0x184>
				if (res != FR_OK) break;
 800e4d2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e4d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d128      	bne.n	800e52e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	69db      	ldr	r3, [r3, #28]
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	69f8      	ldr	r0, [r7, #28]
 800e4e4:	f7fe fe9e 	bl	800d224 <move_window>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e4ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d11b      	bne.n	800e52e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fe fc83 	bl	800ce0a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6a18      	ldr	r0, [r3, #32]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	3324      	adds	r3, #36	; 0x24
 800e50c:	220b      	movs	r2, #11
 800e50e:	4619      	mov	r1, r3
 800e510:	f7fe fc5a 	bl	800cdc8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6a1b      	ldr	r3, [r3, #32]
 800e51e:	330c      	adds	r3, #12
 800e520:	f002 0218 	and.w	r2, r2, #24
 800e524:	b2d2      	uxtb	r2, r2
 800e526:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	2201      	movs	r2, #1
 800e52c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e52e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e532:	4618      	mov	r0, r3
 800e534:	3730      	adds	r7, #48	; 0x30
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	4ec4ec4f 	.word	0x4ec4ec4f

0800e540 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b088      	sub	sp, #32
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	2200      	movs	r2, #0
 800e554:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	69db      	ldr	r3, [r3, #28]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 80c9 	beq.w	800e6f2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e568:	d032      	beq.n	800e5d0 <get_fileinfo+0x90>
			i = j = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	61bb      	str	r3, [r7, #24]
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e572:	e01b      	b.n	800e5ac <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e574:	89fb      	ldrh	r3, [r7, #14]
 800e576:	2100      	movs	r1, #0
 800e578:	4618      	mov	r0, r3
 800e57a:	f001 fb5d 	bl	800fc38 <ff_convert>
 800e57e:	4603      	mov	r3, r0
 800e580:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e582:	89fb      	ldrh	r3, [r7, #14]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d102      	bne.n	800e58e <get_fileinfo+0x4e>
 800e588:	2300      	movs	r3, #0
 800e58a:	61fb      	str	r3, [r7, #28]
 800e58c:	e01a      	b.n	800e5c4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	2bfe      	cmp	r3, #254	; 0xfe
 800e592:	d902      	bls.n	800e59a <get_fileinfo+0x5a>
 800e594:	2300      	movs	r3, #0
 800e596:	61fb      	str	r3, [r7, #28]
 800e598:	e014      	b.n	800e5c4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	61fa      	str	r2, [r7, #28]
 800e5a0:	89fa      	ldrh	r2, [r7, #14]
 800e5a2:	b2d1      	uxtb	r1, r2
 800e5a4:	683a      	ldr	r2, [r7, #0]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	460a      	mov	r2, r1
 800e5aa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	68da      	ldr	r2, [r3, #12]
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	1c59      	adds	r1, r3, #1
 800e5b4:	61b9      	str	r1, [r7, #24]
 800e5b6:	005b      	lsls	r3, r3, #1
 800e5b8:	4413      	add	r3, r2
 800e5ba:	881b      	ldrh	r3, [r3, #0]
 800e5bc:	81fb      	strh	r3, [r7, #14]
 800e5be:	89fb      	ldrh	r3, [r7, #14]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1d7      	bne.n	800e574 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e5c4:	683a      	ldr	r2, [r7, #0]
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	3316      	adds	r3, #22
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	61bb      	str	r3, [r7, #24]
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e5d8:	683a      	ldr	r2, [r7, #0]
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	4413      	add	r3, r2
 800e5de:	3316      	adds	r3, #22
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e5e4:	e04c      	b.n	800e680 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a1a      	ldr	r2, [r3, #32]
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	1c59      	adds	r1, r3, #1
 800e5ee:	61f9      	str	r1, [r7, #28]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e5f6:	7dfb      	ldrb	r3, [r7, #23]
 800e5f8:	2b20      	cmp	r3, #32
 800e5fa:	d100      	bne.n	800e5fe <get_fileinfo+0xbe>
 800e5fc:	e040      	b.n	800e680 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
 800e600:	2b05      	cmp	r3, #5
 800e602:	d101      	bne.n	800e608 <get_fileinfo+0xc8>
 800e604:	23e5      	movs	r3, #229	; 0xe5
 800e606:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	2b09      	cmp	r3, #9
 800e60c:	d10f      	bne.n	800e62e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e60e:	89bb      	ldrh	r3, [r7, #12]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d105      	bne.n	800e620 <get_fileinfo+0xe0>
 800e614:	683a      	ldr	r2, [r7, #0]
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	4413      	add	r3, r2
 800e61a:	3316      	adds	r3, #22
 800e61c:	222e      	movs	r2, #46	; 0x2e
 800e61e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	61ba      	str	r2, [r7, #24]
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	4413      	add	r3, r2
 800e62a:	222e      	movs	r2, #46	; 0x2e
 800e62c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	4413      	add	r3, r2
 800e634:	3309      	adds	r3, #9
 800e636:	7dfa      	ldrb	r2, [r7, #23]
 800e638:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e63a:	89bb      	ldrh	r3, [r7, #12]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d11c      	bne.n	800e67a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e640:	7dfb      	ldrb	r3, [r7, #23]
 800e642:	2b40      	cmp	r3, #64	; 0x40
 800e644:	d913      	bls.n	800e66e <get_fileinfo+0x12e>
 800e646:	7dfb      	ldrb	r3, [r7, #23]
 800e648:	2b5a      	cmp	r3, #90	; 0x5a
 800e64a:	d810      	bhi.n	800e66e <get_fileinfo+0x12e>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6a1b      	ldr	r3, [r3, #32]
 800e650:	330c      	adds	r3, #12
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	461a      	mov	r2, r3
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	2b08      	cmp	r3, #8
 800e65a:	d901      	bls.n	800e660 <get_fileinfo+0x120>
 800e65c:	2310      	movs	r3, #16
 800e65e:	e000      	b.n	800e662 <get_fileinfo+0x122>
 800e660:	2308      	movs	r3, #8
 800e662:	4013      	ands	r3, r2
 800e664:	2b00      	cmp	r3, #0
 800e666:	d002      	beq.n	800e66e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e668:	7dfb      	ldrb	r3, [r7, #23]
 800e66a:	3320      	adds	r3, #32
 800e66c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e66e:	683a      	ldr	r2, [r7, #0]
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	4413      	add	r3, r2
 800e674:	3316      	adds	r3, #22
 800e676:	7dfa      	ldrb	r2, [r7, #23]
 800e678:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	3301      	adds	r3, #1
 800e67e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	2b0a      	cmp	r3, #10
 800e684:	d9af      	bls.n	800e5e6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e686:	89bb      	ldrh	r3, [r7, #12]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d10d      	bne.n	800e6a8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e68c:	683a      	ldr	r2, [r7, #0]
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	4413      	add	r3, r2
 800e692:	3316      	adds	r3, #22
 800e694:	2200      	movs	r2, #0
 800e696:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6a1b      	ldr	r3, [r3, #32]
 800e69c:	330c      	adds	r3, #12
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d101      	bne.n	800e6a8 <get_fileinfo+0x168>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e6a8:	683a      	ldr	r2, [r7, #0]
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	3309      	adds	r3, #9
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a1b      	ldr	r3, [r3, #32]
 800e6b8:	7ada      	ldrb	r2, [r3, #11]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a1b      	ldr	r3, [r3, #32]
 800e6c2:	331c      	adds	r3, #28
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7fe fb15 	bl	800ccf4 <ld_dword>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6a1b      	ldr	r3, [r3, #32]
 800e6d4:	3316      	adds	r3, #22
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe fb0c 	bl	800ccf4 <ld_dword>
 800e6dc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	80da      	strh	r2, [r3, #6]
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	0c1b      	lsrs	r3, r3, #16
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	809a      	strh	r2, [r3, #4]
 800e6f0:	e000      	b.n	800e6f4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e6f2:	bf00      	nop
}
 800e6f4:	3720      	adds	r7, #32
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
	...

0800e6fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08a      	sub	sp, #40	; 0x28
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	613b      	str	r3, [r7, #16]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	60fb      	str	r3, [r7, #12]
 800e714:	2300      	movs	r3, #0
 800e716:	617b      	str	r3, [r7, #20]
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	1c5a      	adds	r2, r3, #1
 800e720:	61ba      	str	r2, [r7, #24]
 800e722:	693a      	ldr	r2, [r7, #16]
 800e724:	4413      	add	r3, r2
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e72a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e72c:	2b1f      	cmp	r3, #31
 800e72e:	d940      	bls.n	800e7b2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e732:	2b2f      	cmp	r3, #47	; 0x2f
 800e734:	d006      	beq.n	800e744 <create_name+0x48>
 800e736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e738:	2b5c      	cmp	r3, #92	; 0x5c
 800e73a:	d110      	bne.n	800e75e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e73c:	e002      	b.n	800e744 <create_name+0x48>
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	3301      	adds	r3, #1
 800e742:	61bb      	str	r3, [r7, #24]
 800e744:	693a      	ldr	r2, [r7, #16]
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	4413      	add	r3, r2
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b2f      	cmp	r3, #47	; 0x2f
 800e74e:	d0f6      	beq.n	800e73e <create_name+0x42>
 800e750:	693a      	ldr	r2, [r7, #16]
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	4413      	add	r3, r2
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	2b5c      	cmp	r3, #92	; 0x5c
 800e75a:	d0f0      	beq.n	800e73e <create_name+0x42>
			break;
 800e75c:	e02a      	b.n	800e7b4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	2bfe      	cmp	r3, #254	; 0xfe
 800e762:	d901      	bls.n	800e768 <create_name+0x6c>
 800e764:	2306      	movs	r3, #6
 800e766:	e17d      	b.n	800ea64 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e76e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e770:	2101      	movs	r1, #1
 800e772:	4618      	mov	r0, r3
 800e774:	f001 fa60 	bl	800fc38 <ff_convert>
 800e778:	4603      	mov	r3, r0
 800e77a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e77c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d101      	bne.n	800e786 <create_name+0x8a>
 800e782:	2306      	movs	r3, #6
 800e784:	e16e      	b.n	800ea64 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e788:	2b7f      	cmp	r3, #127	; 0x7f
 800e78a:	d809      	bhi.n	800e7a0 <create_name+0xa4>
 800e78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e78e:	4619      	mov	r1, r3
 800e790:	488d      	ldr	r0, [pc, #564]	; (800e9c8 <create_name+0x2cc>)
 800e792:	f7fe fb7c 	bl	800ce8e <chk_chr>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <create_name+0xa4>
 800e79c:	2306      	movs	r3, #6
 800e79e:	e161      	b.n	800ea64 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	617a      	str	r2, [r7, #20]
 800e7a6:	005b      	lsls	r3, r3, #1
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7ae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e7b0:	e7b4      	b.n	800e71c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e7b2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e7b4:	693a      	ldr	r2, [r7, #16]
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	441a      	add	r2, r3
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e7be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7c0:	2b1f      	cmp	r3, #31
 800e7c2:	d801      	bhi.n	800e7c8 <create_name+0xcc>
 800e7c4:	2304      	movs	r3, #4
 800e7c6:	e000      	b.n	800e7ca <create_name+0xce>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e7ce:	e011      	b.n	800e7f4 <create_name+0xf8>
		w = lfn[di - 1];
 800e7d0:	697a      	ldr	r2, [r7, #20]
 800e7d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e7d6:	4413      	add	r3, r2
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	4413      	add	r3, r2
 800e7de:	881b      	ldrh	r3, [r3, #0]
 800e7e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e7e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7e4:	2b20      	cmp	r3, #32
 800e7e6:	d002      	beq.n	800e7ee <create_name+0xf2>
 800e7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e7ec:	d106      	bne.n	800e7fc <create_name+0x100>
		di--;
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d1ea      	bne.n	800e7d0 <create_name+0xd4>
 800e7fa:	e000      	b.n	800e7fe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e7fc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	4413      	add	r3, r2
 800e806:	2200      	movs	r2, #0
 800e808:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <create_name+0x118>
 800e810:	2306      	movs	r3, #6
 800e812:	e127      	b.n	800ea64 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	3324      	adds	r3, #36	; 0x24
 800e818:	220b      	movs	r2, #11
 800e81a:	2120      	movs	r1, #32
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fe faf4 	bl	800ce0a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e822:	2300      	movs	r3, #0
 800e824:	61bb      	str	r3, [r7, #24]
 800e826:	e002      	b.n	800e82e <create_name+0x132>
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	3301      	adds	r3, #1
 800e82c:	61bb      	str	r3, [r7, #24]
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	005b      	lsls	r3, r3, #1
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	4413      	add	r3, r2
 800e836:	881b      	ldrh	r3, [r3, #0]
 800e838:	2b20      	cmp	r3, #32
 800e83a:	d0f5      	beq.n	800e828 <create_name+0x12c>
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	005b      	lsls	r3, r3, #1
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	4413      	add	r3, r2
 800e844:	881b      	ldrh	r3, [r3, #0]
 800e846:	2b2e      	cmp	r3, #46	; 0x2e
 800e848:	d0ee      	beq.n	800e828 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d009      	beq.n	800e864 <create_name+0x168>
 800e850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e854:	f043 0303 	orr.w	r3, r3, #3
 800e858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e85c:	e002      	b.n	800e864 <create_name+0x168>
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	3b01      	subs	r3, #1
 800e862:	617b      	str	r3, [r7, #20]
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d009      	beq.n	800e87e <create_name+0x182>
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e870:	4413      	add	r3, r2
 800e872:	005b      	lsls	r3, r3, #1
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	4413      	add	r3, r2
 800e878:	881b      	ldrh	r3, [r3, #0]
 800e87a:	2b2e      	cmp	r3, #46	; 0x2e
 800e87c:	d1ef      	bne.n	800e85e <create_name+0x162>

	i = b = 0; ni = 8;
 800e87e:	2300      	movs	r3, #0
 800e880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e884:	2300      	movs	r3, #0
 800e886:	623b      	str	r3, [r7, #32]
 800e888:	2308      	movs	r3, #8
 800e88a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	1c5a      	adds	r2, r3, #1
 800e890:	61ba      	str	r2, [r7, #24]
 800e892:	005b      	lsls	r3, r3, #1
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	4413      	add	r3, r2
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e89c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f000 8090 	beq.w	800e9c4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e8a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8a6:	2b20      	cmp	r3, #32
 800e8a8:	d006      	beq.n	800e8b8 <create_name+0x1bc>
 800e8aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ac:	2b2e      	cmp	r3, #46	; 0x2e
 800e8ae:	d10a      	bne.n	800e8c6 <create_name+0x1ca>
 800e8b0:	69ba      	ldr	r2, [r7, #24]
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d006      	beq.n	800e8c6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8bc:	f043 0303 	orr.w	r3, r3, #3
 800e8c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8c4:	e07d      	b.n	800e9c2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e8c6:	6a3a      	ldr	r2, [r7, #32]
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d203      	bcs.n	800e8d6 <create_name+0x1da>
 800e8ce:	69ba      	ldr	r2, [r7, #24]
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d123      	bne.n	800e91e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	2b0b      	cmp	r3, #11
 800e8da:	d106      	bne.n	800e8ea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8e0:	f043 0303 	orr.w	r3, r3, #3
 800e8e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8e8:	e075      	b.n	800e9d6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e8ea:	69ba      	ldr	r2, [r7, #24]
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d005      	beq.n	800e8fe <create_name+0x202>
 800e8f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8f6:	f043 0303 	orr.w	r3, r3, #3
 800e8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e8fe:	69ba      	ldr	r2, [r7, #24]
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	429a      	cmp	r2, r3
 800e904:	d866      	bhi.n	800e9d4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	61bb      	str	r3, [r7, #24]
 800e90a:	2308      	movs	r3, #8
 800e90c:	623b      	str	r3, [r7, #32]
 800e90e:	230b      	movs	r3, #11
 800e910:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e912:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e91c:	e051      	b.n	800e9c2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e91e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e920:	2b7f      	cmp	r3, #127	; 0x7f
 800e922:	d914      	bls.n	800e94e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e926:	2100      	movs	r1, #0
 800e928:	4618      	mov	r0, r3
 800e92a:	f001 f985 	bl	800fc38 <ff_convert>
 800e92e:	4603      	mov	r3, r0
 800e930:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e934:	2b00      	cmp	r3, #0
 800e936:	d004      	beq.n	800e942 <create_name+0x246>
 800e938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e93a:	3b80      	subs	r3, #128	; 0x80
 800e93c:	4a23      	ldr	r2, [pc, #140]	; (800e9cc <create_name+0x2d0>)
 800e93e:	5cd3      	ldrb	r3, [r2, r3]
 800e940:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e946:	f043 0302 	orr.w	r3, r3, #2
 800e94a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e94e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e950:	2b00      	cmp	r3, #0
 800e952:	d007      	beq.n	800e964 <create_name+0x268>
 800e954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e956:	4619      	mov	r1, r3
 800e958:	481d      	ldr	r0, [pc, #116]	; (800e9d0 <create_name+0x2d4>)
 800e95a:	f7fe fa98 	bl	800ce8e <chk_chr>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d008      	beq.n	800e976 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e964:	235f      	movs	r3, #95	; 0x5f
 800e966:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e96c:	f043 0303 	orr.w	r3, r3, #3
 800e970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e974:	e01b      	b.n	800e9ae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e978:	2b40      	cmp	r3, #64	; 0x40
 800e97a:	d909      	bls.n	800e990 <create_name+0x294>
 800e97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e97e:	2b5a      	cmp	r3, #90	; 0x5a
 800e980:	d806      	bhi.n	800e990 <create_name+0x294>
					b |= 2;
 800e982:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e986:	f043 0302 	orr.w	r3, r3, #2
 800e98a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e98e:	e00e      	b.n	800e9ae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e992:	2b60      	cmp	r3, #96	; 0x60
 800e994:	d90b      	bls.n	800e9ae <create_name+0x2b2>
 800e996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e998:	2b7a      	cmp	r3, #122	; 0x7a
 800e99a:	d808      	bhi.n	800e9ae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e99c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9a0:	f043 0301 	orr.w	r3, r3, #1
 800e9a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9aa:	3b20      	subs	r3, #32
 800e9ac:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e9ae:	6a3b      	ldr	r3, [r7, #32]
 800e9b0:	1c5a      	adds	r2, r3, #1
 800e9b2:	623a      	str	r2, [r7, #32]
 800e9b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9b6:	b2d1      	uxtb	r1, r2
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	460a      	mov	r2, r1
 800e9be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e9c2:	e763      	b.n	800e88c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e9c4:	bf00      	nop
 800e9c6:	e006      	b.n	800e9d6 <create_name+0x2da>
 800e9c8:	080120c0 	.word	0x080120c0
 800e9cc:	08012184 	.word	0x08012184
 800e9d0:	080120cc 	.word	0x080120cc
			if (si > di) break;			/* No extension */
 800e9d4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e9dc:	2be5      	cmp	r3, #229	; 0xe5
 800e9de:	d103      	bne.n	800e9e8 <create_name+0x2ec>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2205      	movs	r2, #5
 800e9e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	2b08      	cmp	r3, #8
 800e9ec:	d104      	bne.n	800e9f8 <create_name+0x2fc>
 800e9ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e9f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9fc:	f003 030c 	and.w	r3, r3, #12
 800ea00:	2b0c      	cmp	r3, #12
 800ea02:	d005      	beq.n	800ea10 <create_name+0x314>
 800ea04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea08:	f003 0303 	and.w	r3, r3, #3
 800ea0c:	2b03      	cmp	r3, #3
 800ea0e:	d105      	bne.n	800ea1c <create_name+0x320>
 800ea10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea14:	f043 0302 	orr.w	r3, r3, #2
 800ea18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ea1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea20:	f003 0302 	and.w	r3, r3, #2
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d117      	bne.n	800ea58 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ea28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea2c:	f003 0303 	and.w	r3, r3, #3
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d105      	bne.n	800ea40 <create_name+0x344>
 800ea34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea38:	f043 0310 	orr.w	r3, r3, #16
 800ea3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ea40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea44:	f003 030c 	and.w	r3, r3, #12
 800ea48:	2b04      	cmp	r3, #4
 800ea4a:	d105      	bne.n	800ea58 <create_name+0x35c>
 800ea4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea50:	f043 0308 	orr.w	r3, r3, #8
 800ea54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ea5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ea62:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3728      	adds	r7, #40	; 0x28
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ea80:	e002      	b.n	800ea88 <follow_path+0x1c>
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	3301      	adds	r3, #1
 800ea86:	603b      	str	r3, [r7, #0]
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	2b2f      	cmp	r3, #47	; 0x2f
 800ea8e:	d0f8      	beq.n	800ea82 <follow_path+0x16>
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	2b5c      	cmp	r3, #92	; 0x5c
 800ea96:	d0f4      	beq.n	800ea82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	2b1f      	cmp	r3, #31
 800eaa4:	d80a      	bhi.n	800eabc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2280      	movs	r2, #128	; 0x80
 800eaaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800eaae:	2100      	movs	r1, #0
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7fe ff35 	bl	800d920 <dir_sdi>
 800eab6:	4603      	mov	r3, r0
 800eab8:	75fb      	strb	r3, [r7, #23]
 800eaba:	e043      	b.n	800eb44 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eabc:	463b      	mov	r3, r7
 800eabe:	4619      	mov	r1, r3
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7ff fe1b 	bl	800e6fc <create_name>
 800eac6:	4603      	mov	r3, r0
 800eac8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d134      	bne.n	800eb3a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f7ff fb7d 	bl	800e1d0 <dir_find>
 800ead6:	4603      	mov	r3, r0
 800ead8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eae0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eae2:	7dfb      	ldrb	r3, [r7, #23]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00a      	beq.n	800eafe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eae8:	7dfb      	ldrb	r3, [r7, #23]
 800eaea:	2b04      	cmp	r3, #4
 800eaec:	d127      	bne.n	800eb3e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eaee:	7afb      	ldrb	r3, [r7, #11]
 800eaf0:	f003 0304 	and.w	r3, r3, #4
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d122      	bne.n	800eb3e <follow_path+0xd2>
 800eaf8:	2305      	movs	r3, #5
 800eafa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eafc:	e01f      	b.n	800eb3e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eafe:	7afb      	ldrb	r3, [r7, #11]
 800eb00:	f003 0304 	and.w	r3, r3, #4
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d11c      	bne.n	800eb42 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	799b      	ldrb	r3, [r3, #6]
 800eb0c:	f003 0310 	and.w	r3, r3, #16
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d102      	bne.n	800eb1a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eb14:	2305      	movs	r3, #5
 800eb16:	75fb      	strb	r3, [r7, #23]
 800eb18:	e014      	b.n	800eb44 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	695b      	ldr	r3, [r3, #20]
 800eb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb28:	4413      	add	r3, r2
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f7ff f87e 	bl	800dc2e <ld_clust>
 800eb32:	4602      	mov	r2, r0
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb38:	e7c0      	b.n	800eabc <follow_path+0x50>
			if (res != FR_OK) break;
 800eb3a:	bf00      	nop
 800eb3c:	e002      	b.n	800eb44 <follow_path+0xd8>
				break;
 800eb3e:	bf00      	nop
 800eb40:	e000      	b.n	800eb44 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb42:	bf00      	nop
			}
		}
	}

	return res;
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3718      	adds	r7, #24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800eb4e:	b480      	push	{r7}
 800eb50:	b087      	sub	sp, #28
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eb56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb5a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d031      	beq.n	800ebc8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	617b      	str	r3, [r7, #20]
 800eb6a:	e002      	b.n	800eb72 <get_ldnumber+0x24>
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	617b      	str	r3, [r7, #20]
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	2b1f      	cmp	r3, #31
 800eb78:	d903      	bls.n	800eb82 <get_ldnumber+0x34>
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	2b3a      	cmp	r3, #58	; 0x3a
 800eb80:	d1f4      	bne.n	800eb6c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	2b3a      	cmp	r3, #58	; 0x3a
 800eb88:	d11c      	bne.n	800ebc4 <get_ldnumber+0x76>
			tp = *path;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	1c5a      	adds	r2, r3, #1
 800eb94:	60fa      	str	r2, [r7, #12]
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	3b30      	subs	r3, #48	; 0x30
 800eb9a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	2b09      	cmp	r3, #9
 800eba0:	d80e      	bhi.n	800ebc0 <get_ldnumber+0x72>
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d10a      	bne.n	800ebc0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d107      	bne.n	800ebc0 <get_ldnumber+0x72>
					vol = (int)i;
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	617b      	str	r3, [r7, #20]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	697a      	ldr	r2, [r7, #20]
 800ebbe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	e002      	b.n	800ebca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ebc8:	693b      	ldr	r3, [r7, #16]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	371c      	adds	r7, #28
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	70da      	strb	r2, [r3, #3]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebee:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ebf0:	6839      	ldr	r1, [r7, #0]
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f7fe fb16 	bl	800d224 <move_window>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <check_fs+0x2a>
 800ebfe:	2304      	movs	r3, #4
 800ec00:	e038      	b.n	800ec74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	3334      	adds	r3, #52	; 0x34
 800ec06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fe f85a 	bl	800ccc4 <ld_word>
 800ec10:	4603      	mov	r3, r0
 800ec12:	461a      	mov	r2, r3
 800ec14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d001      	beq.n	800ec20 <check_fs+0x48>
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	e029      	b.n	800ec74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec26:	2be9      	cmp	r3, #233	; 0xe9
 800ec28:	d009      	beq.n	800ec3e <check_fs+0x66>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec30:	2beb      	cmp	r3, #235	; 0xeb
 800ec32:	d11e      	bne.n	800ec72 <check_fs+0x9a>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ec3a:	2b90      	cmp	r3, #144	; 0x90
 800ec3c:	d119      	bne.n	800ec72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	3334      	adds	r3, #52	; 0x34
 800ec42:	3336      	adds	r3, #54	; 0x36
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fe f855 	bl	800ccf4 <ld_dword>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ec50:	4a0a      	ldr	r2, [pc, #40]	; (800ec7c <check_fs+0xa4>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d101      	bne.n	800ec5a <check_fs+0x82>
 800ec56:	2300      	movs	r3, #0
 800ec58:	e00c      	b.n	800ec74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	3334      	adds	r3, #52	; 0x34
 800ec5e:	3352      	adds	r3, #82	; 0x52
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe f847 	bl	800ccf4 <ld_dword>
 800ec66:	4603      	mov	r3, r0
 800ec68:	4a05      	ldr	r2, [pc, #20]	; (800ec80 <check_fs+0xa8>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d101      	bne.n	800ec72 <check_fs+0x9a>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e000      	b.n	800ec74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ec72:	2302      	movs	r3, #2
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	00544146 	.word	0x00544146
 800ec80:	33544146 	.word	0x33544146

0800ec84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b096      	sub	sp, #88	; 0x58
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	4613      	mov	r3, r2
 800ec90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	2200      	movs	r2, #0
 800ec96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f7ff ff58 	bl	800eb4e <get_ldnumber>
 800ec9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	da01      	bge.n	800ecaa <find_volume+0x26>
 800eca6:	230b      	movs	r3, #11
 800eca8:	e230      	b.n	800f10c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ecaa:	4aa1      	ldr	r2, [pc, #644]	; (800ef30 <find_volume+0x2ac>)
 800ecac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecb2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ecb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d101      	bne.n	800ecbe <find_volume+0x3a>
 800ecba:	230c      	movs	r3, #12
 800ecbc:	e226      	b.n	800f10c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecc2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ecc4:	79fb      	ldrb	r3, [r7, #7]
 800ecc6:	f023 0301 	bic.w	r3, r3, #1
 800ecca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d01a      	beq.n	800ed0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd6:	785b      	ldrb	r3, [r3, #1]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fd ff55 	bl	800cb88 <disk_status>
 800ecde:	4603      	mov	r3, r0
 800ece0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ece4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ece8:	f003 0301 	and.w	r3, r3, #1
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10c      	bne.n	800ed0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ecf0:	79fb      	ldrb	r3, [r7, #7]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d007      	beq.n	800ed06 <find_volume+0x82>
 800ecf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecfa:	f003 0304 	and.w	r3, r3, #4
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d001      	beq.n	800ed06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ed02:	230a      	movs	r3, #10
 800ed04:	e202      	b.n	800f10c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800ed06:	2300      	movs	r3, #0
 800ed08:	e200      	b.n	800f10c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ed0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ed10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ed18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1a:	785b      	ldrb	r3, [r3, #1]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fd ff4d 	bl	800cbbc <disk_initialize>
 800ed22:	4603      	mov	r3, r0
 800ed24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ed28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed2c:	f003 0301 	and.w	r3, r3, #1
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ed34:	2303      	movs	r3, #3
 800ed36:	e1e9      	b.n	800f10c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ed38:	79fb      	ldrb	r3, [r7, #7]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d007      	beq.n	800ed4e <find_volume+0xca>
 800ed3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed42:	f003 0304 	and.w	r3, r3, #4
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d001      	beq.n	800ed4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ed4a:	230a      	movs	r3, #10
 800ed4c:	e1de      	b.n	800f10c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ed52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed56:	f7ff ff3f 	bl	800ebd8 <check_fs>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ed60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed64:	2b02      	cmp	r3, #2
 800ed66:	d149      	bne.n	800edfc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ed68:	2300      	movs	r3, #0
 800ed6a:	643b      	str	r3, [r7, #64]	; 0x40
 800ed6c:	e01e      	b.n	800edac <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ed6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed76:	011b      	lsls	r3, r3, #4
 800ed78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ed7c:	4413      	add	r3, r2
 800ed7e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	3304      	adds	r3, #4
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d006      	beq.n	800ed98 <find_volume+0x114>
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8c:	3308      	adds	r3, #8
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fd ffb0 	bl	800ccf4 <ld_dword>
 800ed94:	4602      	mov	r2, r0
 800ed96:	e000      	b.n	800ed9a <find_volume+0x116>
 800ed98:	2200      	movs	r2, #0
 800ed9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	3358      	adds	r3, #88	; 0x58
 800eda0:	443b      	add	r3, r7
 800eda2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eda6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda8:	3301      	adds	r3, #1
 800edaa:	643b      	str	r3, [r7, #64]	; 0x40
 800edac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edae:	2b03      	cmp	r3, #3
 800edb0:	d9dd      	bls.n	800ed6e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800edb2:	2300      	movs	r3, #0
 800edb4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800edb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <find_volume+0x13e>
 800edbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edbe:	3b01      	subs	r3, #1
 800edc0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800edc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	3358      	adds	r3, #88	; 0x58
 800edc8:	443b      	add	r3, r7
 800edca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800edce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800edd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d005      	beq.n	800ede2 <find_volume+0x15e>
 800edd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800edd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edda:	f7ff fefd 	bl	800ebd8 <check_fs>
 800edde:	4603      	mov	r3, r0
 800ede0:	e000      	b.n	800ede4 <find_volume+0x160>
 800ede2:	2303      	movs	r3, #3
 800ede4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ede8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edec:	2b01      	cmp	r3, #1
 800edee:	d905      	bls.n	800edfc <find_volume+0x178>
 800edf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf2:	3301      	adds	r3, #1
 800edf4:	643b      	str	r3, [r7, #64]	; 0x40
 800edf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf8:	2b03      	cmp	r3, #3
 800edfa:	d9e2      	bls.n	800edc2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800edfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee00:	2b04      	cmp	r3, #4
 800ee02:	d101      	bne.n	800ee08 <find_volume+0x184>
 800ee04:	2301      	movs	r3, #1
 800ee06:	e181      	b.n	800f10c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ee08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d901      	bls.n	800ee14 <find_volume+0x190>
 800ee10:	230d      	movs	r3, #13
 800ee12:	e17b      	b.n	800f10c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee16:	3334      	adds	r3, #52	; 0x34
 800ee18:	330b      	adds	r3, #11
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fd ff52 	bl	800ccc4 <ld_word>
 800ee20:	4603      	mov	r3, r0
 800ee22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee26:	d001      	beq.n	800ee2c <find_volume+0x1a8>
 800ee28:	230d      	movs	r3, #13
 800ee2a:	e16f      	b.n	800f10c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	3334      	adds	r3, #52	; 0x34
 800ee30:	3316      	adds	r3, #22
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fd ff46 	bl	800ccc4 <ld_word>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ee3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d106      	bne.n	800ee50 <find_volume+0x1cc>
 800ee42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee44:	3334      	adds	r3, #52	; 0x34
 800ee46:	3324      	adds	r3, #36	; 0x24
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7fd ff53 	bl	800ccf4 <ld_dword>
 800ee4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ee50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee54:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee58:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ee5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ee60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee62:	789b      	ldrb	r3, [r3, #2]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d005      	beq.n	800ee74 <find_volume+0x1f0>
 800ee68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6a:	789b      	ldrb	r3, [r3, #2]
 800ee6c:	2b02      	cmp	r3, #2
 800ee6e:	d001      	beq.n	800ee74 <find_volume+0x1f0>
 800ee70:	230d      	movs	r3, #13
 800ee72:	e14b      	b.n	800f10c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	789b      	ldrb	r3, [r3, #2]
 800ee78:	461a      	mov	r2, r3
 800ee7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee7c:	fb02 f303 	mul.w	r3, r2, r3
 800ee80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ee8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee90:	895b      	ldrh	r3, [r3, #10]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d008      	beq.n	800eea8 <find_volume+0x224>
 800ee96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee98:	895b      	ldrh	r3, [r3, #10]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9e:	895b      	ldrh	r3, [r3, #10]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	4013      	ands	r3, r2
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d001      	beq.n	800eeac <find_volume+0x228>
 800eea8:	230d      	movs	r3, #13
 800eeaa:	e12f      	b.n	800f10c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeae:	3334      	adds	r3, #52	; 0x34
 800eeb0:	3311      	adds	r3, #17
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fd ff06 	bl	800ccc4 <ld_word>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	461a      	mov	r2, r3
 800eebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	891b      	ldrh	r3, [r3, #8]
 800eec4:	f003 030f 	and.w	r3, r3, #15
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d001      	beq.n	800eed2 <find_volume+0x24e>
 800eece:	230d      	movs	r3, #13
 800eed0:	e11c      	b.n	800f10c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed4:	3334      	adds	r3, #52	; 0x34
 800eed6:	3313      	adds	r3, #19
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fd fef3 	bl	800ccc4 <ld_word>
 800eede:	4603      	mov	r3, r0
 800eee0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d106      	bne.n	800eef6 <find_volume+0x272>
 800eee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeea:	3334      	adds	r3, #52	; 0x34
 800eeec:	3320      	adds	r3, #32
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fd ff00 	bl	800ccf4 <ld_dword>
 800eef4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	3334      	adds	r3, #52	; 0x34
 800eefa:	330e      	adds	r3, #14
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fd fee1 	bl	800ccc4 <ld_word>
 800ef02:	4603      	mov	r3, r0
 800ef04:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ef06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d101      	bne.n	800ef10 <find_volume+0x28c>
 800ef0c:	230d      	movs	r3, #13
 800ef0e:	e0fd      	b.n	800f10c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ef10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef14:	4413      	add	r3, r2
 800ef16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef18:	8912      	ldrh	r2, [r2, #8]
 800ef1a:	0912      	lsrs	r2, r2, #4
 800ef1c:	b292      	uxth	r2, r2
 800ef1e:	4413      	add	r3, r2
 800ef20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ef22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d204      	bcs.n	800ef34 <find_volume+0x2b0>
 800ef2a:	230d      	movs	r3, #13
 800ef2c:	e0ee      	b.n	800f10c <find_volume+0x488>
 800ef2e:	bf00      	nop
 800ef30:	20005ba8 	.word	0x20005ba8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ef34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef38:	1ad3      	subs	r3, r2, r3
 800ef3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef3c:	8952      	ldrh	r2, [r2, #10]
 800ef3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef42:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d101      	bne.n	800ef4e <find_volume+0x2ca>
 800ef4a:	230d      	movs	r3, #13
 800ef4c:	e0de      	b.n	800f10c <find_volume+0x488>
		fmt = FS_FAT32;
 800ef4e:	2303      	movs	r3, #3
 800ef50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d802      	bhi.n	800ef64 <find_volume+0x2e0>
 800ef5e:	2302      	movs	r3, #2
 800ef60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d802      	bhi.n	800ef74 <find_volume+0x2f0>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	1c9a      	adds	r2, r3, #2
 800ef78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef80:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ef82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef86:	441a      	add	r2, r3
 800ef88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ef8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef90:	441a      	add	r2, r3
 800ef92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef94:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ef96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef9a:	2b03      	cmp	r3, #3
 800ef9c:	d11e      	bne.n	800efdc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ef9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa0:	3334      	adds	r3, #52	; 0x34
 800efa2:	332a      	adds	r3, #42	; 0x2a
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fd fe8d 	bl	800ccc4 <ld_word>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d001      	beq.n	800efb4 <find_volume+0x330>
 800efb0:	230d      	movs	r3, #13
 800efb2:	e0ab      	b.n	800f10c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800efb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb6:	891b      	ldrh	r3, [r3, #8]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d001      	beq.n	800efc0 <find_volume+0x33c>
 800efbc:	230d      	movs	r3, #13
 800efbe:	e0a5      	b.n	800f10c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800efc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc2:	3334      	adds	r3, #52	; 0x34
 800efc4:	332c      	adds	r3, #44	; 0x2c
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7fd fe94 	bl	800ccf4 <ld_dword>
 800efcc:	4602      	mov	r2, r0
 800efce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800efd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd4:	699b      	ldr	r3, [r3, #24]
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	647b      	str	r3, [r7, #68]	; 0x44
 800efda:	e01f      	b.n	800f01c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800efdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efde:	891b      	ldrh	r3, [r3, #8]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <find_volume+0x364>
 800efe4:	230d      	movs	r3, #13
 800efe6:	e091      	b.n	800f10c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efee:	441a      	add	r2, r3
 800eff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eff8:	2b02      	cmp	r3, #2
 800effa:	d103      	bne.n	800f004 <find_volume+0x380>
 800effc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effe:	699b      	ldr	r3, [r3, #24]
 800f000:	005b      	lsls	r3, r3, #1
 800f002:	e00a      	b.n	800f01a <find_volume+0x396>
 800f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f006:	699a      	ldr	r2, [r3, #24]
 800f008:	4613      	mov	r3, r2
 800f00a:	005b      	lsls	r3, r3, #1
 800f00c:	4413      	add	r3, r2
 800f00e:	085a      	lsrs	r2, r3, #1
 800f010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f012:	699b      	ldr	r3, [r3, #24]
 800f014:	f003 0301 	and.w	r3, r3, #1
 800f018:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f01a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01e:	69da      	ldr	r2, [r3, #28]
 800f020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f022:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f026:	0a5b      	lsrs	r3, r3, #9
 800f028:	429a      	cmp	r2, r3
 800f02a:	d201      	bcs.n	800f030 <find_volume+0x3ac>
 800f02c:	230d      	movs	r3, #13
 800f02e:	e06d      	b.n	800f10c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f036:	615a      	str	r2, [r3, #20]
 800f038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03a:	695a      	ldr	r2, [r3, #20]
 800f03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	2280      	movs	r2, #128	; 0x80
 800f044:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f046:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f04a:	2b03      	cmp	r3, #3
 800f04c:	d149      	bne.n	800f0e2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f050:	3334      	adds	r3, #52	; 0x34
 800f052:	3330      	adds	r3, #48	; 0x30
 800f054:	4618      	mov	r0, r3
 800f056:	f7fd fe35 	bl	800ccc4 <ld_word>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d140      	bne.n	800f0e2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f062:	3301      	adds	r3, #1
 800f064:	4619      	mov	r1, r3
 800f066:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f068:	f7fe f8dc 	bl	800d224 <move_window>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d137      	bne.n	800f0e2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f074:	2200      	movs	r2, #0
 800f076:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07a:	3334      	adds	r3, #52	; 0x34
 800f07c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f080:	4618      	mov	r0, r3
 800f082:	f7fd fe1f 	bl	800ccc4 <ld_word>
 800f086:	4603      	mov	r3, r0
 800f088:	461a      	mov	r2, r3
 800f08a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f08e:	429a      	cmp	r2, r3
 800f090:	d127      	bne.n	800f0e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f094:	3334      	adds	r3, #52	; 0x34
 800f096:	4618      	mov	r0, r3
 800f098:	f7fd fe2c 	bl	800ccf4 <ld_dword>
 800f09c:	4603      	mov	r3, r0
 800f09e:	4a1d      	ldr	r2, [pc, #116]	; (800f114 <find_volume+0x490>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d11e      	bne.n	800f0e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a6:	3334      	adds	r3, #52	; 0x34
 800f0a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fd fe21 	bl	800ccf4 <ld_dword>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	4a18      	ldr	r2, [pc, #96]	; (800f118 <find_volume+0x494>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d113      	bne.n	800f0e2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0bc:	3334      	adds	r3, #52	; 0x34
 800f0be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fd fe16 	bl	800ccf4 <ld_dword>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0cc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d0:	3334      	adds	r3, #52	; 0x34
 800f0d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fd fe0c 	bl	800ccf4 <ld_dword>
 800f0dc:	4602      	mov	r2, r0
 800f0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f0e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f0ea:	4b0c      	ldr	r3, [pc, #48]	; (800f11c <find_volume+0x498>)
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	4b0a      	ldr	r3, [pc, #40]	; (800f11c <find_volume+0x498>)
 800f0f4:	801a      	strh	r2, [r3, #0]
 800f0f6:	4b09      	ldr	r3, [pc, #36]	; (800f11c <find_volume+0x498>)
 800f0f8:	881a      	ldrh	r2, [r3, #0]
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f100:	4a07      	ldr	r2, [pc, #28]	; (800f120 <find_volume+0x49c>)
 800f102:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f106:	f7fe f825 	bl	800d154 <clear_lock>
#endif
	return FR_OK;
 800f10a:	2300      	movs	r3, #0
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3758      	adds	r7, #88	; 0x58
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	41615252 	.word	0x41615252
 800f118:	61417272 	.word	0x61417272
 800f11c:	20005bac 	.word	0x20005bac
 800f120:	20005bd0 	.word	0x20005bd0

0800f124 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f12e:	2309      	movs	r3, #9
 800f130:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d01c      	beq.n	800f172 <validate+0x4e>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d018      	beq.n	800f172 <validate+0x4e>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d013      	beq.n	800f172 <validate+0x4e>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	889a      	ldrh	r2, [r3, #4]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	88db      	ldrh	r3, [r3, #6]
 800f154:	429a      	cmp	r2, r3
 800f156:	d10c      	bne.n	800f172 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	785b      	ldrb	r3, [r3, #1]
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fd fd12 	bl	800cb88 <disk_status>
 800f164:	4603      	mov	r3, r0
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d101      	bne.n	800f172 <validate+0x4e>
			res = FR_OK;
 800f16e:	2300      	movs	r3, #0
 800f170:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f172:	7bfb      	ldrb	r3, [r7, #15]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d102      	bne.n	800f17e <validate+0x5a>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	e000      	b.n	800f180 <validate+0x5c>
 800f17e:	2300      	movs	r3, #0
 800f180:	683a      	ldr	r2, [r7, #0]
 800f182:	6013      	str	r3, [r2, #0]
	return res;
 800f184:	7bfb      	ldrb	r3, [r7, #15]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
	...

0800f190 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b088      	sub	sp, #32
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	4613      	mov	r3, r2
 800f19c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f1a2:	f107 0310 	add.w	r3, r7, #16
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7ff fcd1 	bl	800eb4e <get_ldnumber>
 800f1ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	da01      	bge.n	800f1b8 <f_mount+0x28>
 800f1b4:	230b      	movs	r3, #11
 800f1b6:	e02b      	b.n	800f210 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f1b8:	4a17      	ldr	r2, [pc, #92]	; (800f218 <f_mount+0x88>)
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d005      	beq.n	800f1d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f1c8:	69b8      	ldr	r0, [r7, #24]
 800f1ca:	f7fd ffc3 	bl	800d154 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d002      	beq.n	800f1e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	490d      	ldr	r1, [pc, #52]	; (800f218 <f_mount+0x88>)
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d002      	beq.n	800f1f6 <f_mount+0x66>
 800f1f0:	79fb      	ldrb	r3, [r7, #7]
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d001      	beq.n	800f1fa <f_mount+0x6a>
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	e00a      	b.n	800f210 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f1fa:	f107 010c 	add.w	r1, r7, #12
 800f1fe:	f107 0308 	add.w	r3, r7, #8
 800f202:	2200      	movs	r2, #0
 800f204:	4618      	mov	r0, r3
 800f206:	f7ff fd3d 	bl	800ec84 <find_volume>
 800f20a:	4603      	mov	r3, r0
 800f20c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f210:	4618      	mov	r0, r3
 800f212:	3720      	adds	r7, #32
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	20005ba8 	.word	0x20005ba8

0800f21c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b09a      	sub	sp, #104	; 0x68
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	4613      	mov	r3, r2
 800f228:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <f_open+0x18>
 800f230:	2309      	movs	r3, #9
 800f232:	e1ad      	b.n	800f590 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f234:	79fb      	ldrb	r3, [r7, #7]
 800f236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f23a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f23c:	79fa      	ldrb	r2, [r7, #7]
 800f23e:	f107 0114 	add.w	r1, r7, #20
 800f242:	f107 0308 	add.w	r3, r7, #8
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fd1c 	bl	800ec84 <find_volume>
 800f24c:	4603      	mov	r3, r0
 800f24e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f252:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f256:	2b00      	cmp	r3, #0
 800f258:	f040 8191 	bne.w	800f57e <f_open+0x362>
		dj.obj.fs = fs;
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	f107 0318 	add.w	r3, r7, #24
 800f266:	4611      	mov	r1, r2
 800f268:	4618      	mov	r0, r3
 800f26a:	f7ff fbff 	bl	800ea6c <follow_path>
 800f26e:	4603      	mov	r3, r0
 800f270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f274:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d11a      	bne.n	800f2b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f27c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f280:	b25b      	sxtb	r3, r3
 800f282:	2b00      	cmp	r3, #0
 800f284:	da03      	bge.n	800f28e <f_open+0x72>
				res = FR_INVALID_NAME;
 800f286:	2306      	movs	r3, #6
 800f288:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f28c:	e011      	b.n	800f2b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f28e:	79fb      	ldrb	r3, [r7, #7]
 800f290:	f023 0301 	bic.w	r3, r3, #1
 800f294:	2b00      	cmp	r3, #0
 800f296:	bf14      	ite	ne
 800f298:	2301      	movne	r3, #1
 800f29a:	2300      	moveq	r3, #0
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	461a      	mov	r2, r3
 800f2a0:	f107 0318 	add.w	r3, r7, #24
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fd fe0c 	bl	800cec4 <chk_lock>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f2b2:	79fb      	ldrb	r3, [r7, #7]
 800f2b4:	f003 031c 	and.w	r3, r3, #28
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d07f      	beq.n	800f3bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f2bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d017      	beq.n	800f2f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f2c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2c8:	2b04      	cmp	r3, #4
 800f2ca:	d10e      	bne.n	800f2ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f2cc:	f7fd fe56 	bl	800cf7c <enq_lock>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d006      	beq.n	800f2e4 <f_open+0xc8>
 800f2d6:	f107 0318 	add.w	r3, r7, #24
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7ff f838 	bl	800e350 <dir_register>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	e000      	b.n	800f2e6 <f_open+0xca>
 800f2e4:	2312      	movs	r3, #18
 800f2e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f2ea:	79fb      	ldrb	r3, [r7, #7]
 800f2ec:	f043 0308 	orr.w	r3, r3, #8
 800f2f0:	71fb      	strb	r3, [r7, #7]
 800f2f2:	e010      	b.n	800f316 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f2f4:	7fbb      	ldrb	r3, [r7, #30]
 800f2f6:	f003 0311 	and.w	r3, r3, #17
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d003      	beq.n	800f306 <f_open+0xea>
					res = FR_DENIED;
 800f2fe:	2307      	movs	r3, #7
 800f300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f304:	e007      	b.n	800f316 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f306:	79fb      	ldrb	r3, [r7, #7]
 800f308:	f003 0304 	and.w	r3, r3, #4
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d002      	beq.n	800f316 <f_open+0xfa>
 800f310:	2308      	movs	r3, #8
 800f312:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f316:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d168      	bne.n	800f3f0 <f_open+0x1d4>
 800f31e:	79fb      	ldrb	r3, [r7, #7]
 800f320:	f003 0308 	and.w	r3, r3, #8
 800f324:	2b00      	cmp	r3, #0
 800f326:	d063      	beq.n	800f3f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f328:	f7fb fa00 	bl	800a72c <get_fattime>
 800f32c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f330:	330e      	adds	r3, #14
 800f332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f334:	4618      	mov	r0, r3
 800f336:	f7fd fd1b 	bl	800cd70 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33c:	3316      	adds	r3, #22
 800f33e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f340:	4618      	mov	r0, r3
 800f342:	f7fd fd15 	bl	800cd70 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f348:	330b      	adds	r3, #11
 800f34a:	2220      	movs	r2, #32
 800f34c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f352:	4611      	mov	r1, r2
 800f354:	4618      	mov	r0, r3
 800f356:	f7fe fc6a 	bl	800dc2e <ld_clust>
 800f35a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f360:	2200      	movs	r2, #0
 800f362:	4618      	mov	r0, r3
 800f364:	f7fe fc82 	bl	800dc6c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36a:	331c      	adds	r3, #28
 800f36c:	2100      	movs	r1, #0
 800f36e:	4618      	mov	r0, r3
 800f370:	f7fd fcfe 	bl	800cd70 <st_dword>
					fs->wflag = 1;
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	2201      	movs	r2, #1
 800f378:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d037      	beq.n	800f3f0 <f_open+0x1d4>
						dw = fs->winsect;
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f384:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f386:	f107 0318 	add.w	r3, r7, #24
 800f38a:	2200      	movs	r2, #0
 800f38c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f38e:	4618      	mov	r0, r3
 800f390:	f7fe f995 	bl	800d6be <remove_chain>
 800f394:	4603      	mov	r3, r0
 800f396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f39a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d126      	bne.n	800f3f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fd ff3c 	bl	800d224 <move_window>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f3b6:	3a01      	subs	r2, #1
 800f3b8:	611a      	str	r2, [r3, #16]
 800f3ba:	e019      	b.n	800f3f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f3bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d115      	bne.n	800f3f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f3c4:	7fbb      	ldrb	r3, [r7, #30]
 800f3c6:	f003 0310 	and.w	r3, r3, #16
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d003      	beq.n	800f3d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f3ce:	2304      	movs	r3, #4
 800f3d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f3d4:	e00c      	b.n	800f3f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f3d6:	79fb      	ldrb	r3, [r7, #7]
 800f3d8:	f003 0302 	and.w	r3, r3, #2
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d007      	beq.n	800f3f0 <f_open+0x1d4>
 800f3e0:	7fbb      	ldrb	r3, [r7, #30]
 800f3e2:	f003 0301 	and.w	r3, r3, #1
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d002      	beq.n	800f3f0 <f_open+0x1d4>
						res = FR_DENIED;
 800f3ea:	2307      	movs	r3, #7
 800f3ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f3f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d128      	bne.n	800f44a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f3f8:	79fb      	ldrb	r3, [r7, #7]
 800f3fa:	f003 0308 	and.w	r3, r3, #8
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d003      	beq.n	800f40a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f402:	79fb      	ldrb	r3, [r7, #7]
 800f404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f408:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f418:	79fb      	ldrb	r3, [r7, #7]
 800f41a:	f023 0301 	bic.w	r3, r3, #1
 800f41e:	2b00      	cmp	r3, #0
 800f420:	bf14      	ite	ne
 800f422:	2301      	movne	r3, #1
 800f424:	2300      	moveq	r3, #0
 800f426:	b2db      	uxtb	r3, r3
 800f428:	461a      	mov	r2, r3
 800f42a:	f107 0318 	add.w	r3, r7, #24
 800f42e:	4611      	mov	r1, r2
 800f430:	4618      	mov	r0, r3
 800f432:	f7fd fdc5 	bl	800cfc0 <inc_lock>
 800f436:	4602      	mov	r2, r0
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	691b      	ldr	r3, [r3, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d102      	bne.n	800f44a <f_open+0x22e>
 800f444:	2302      	movs	r3, #2
 800f446:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f44a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f040 8095 	bne.w	800f57e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f458:	4611      	mov	r1, r2
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fe fbe7 	bl	800dc2e <ld_clust>
 800f460:	4602      	mov	r2, r0
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f468:	331c      	adds	r3, #28
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fd fc42 	bl	800ccf4 <ld_dword>
 800f470:	4602      	mov	r2, r0
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2200      	movs	r2, #0
 800f47a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f47c:	697a      	ldr	r2, [r7, #20]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	88da      	ldrh	r2, [r3, #6]
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	79fa      	ldrb	r2, [r7, #7]
 800f48e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2200      	movs	r2, #0
 800f494:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2200      	movs	r2, #0
 800f49a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3330      	adds	r3, #48	; 0x30
 800f4a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fd fcac 	bl	800ce0a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f4b2:	79fb      	ldrb	r3, [r7, #7]
 800f4b4:	f003 0320 	and.w	r3, r3, #32
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d060      	beq.n	800f57e <f_open+0x362>
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d05c      	beq.n	800f57e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	68da      	ldr	r2, [r3, #12]
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	895b      	ldrh	r3, [r3, #10]
 800f4d0:	025b      	lsls	r3, r3, #9
 800f4d2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	689b      	ldr	r3, [r3, #8]
 800f4d8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4e0:	e016      	b.n	800f510 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fd ff57 	bl	800d39a <get_fat>
 800f4ec:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f4ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d802      	bhi.n	800f4fa <f_open+0x2de>
 800f4f4:	2302      	movs	r3, #2
 800f4f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f4fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f500:	d102      	bne.n	800f508 <f_open+0x2ec>
 800f502:	2301      	movs	r3, #1
 800f504:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f50c:	1ad3      	subs	r3, r2, r3
 800f50e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f510:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f514:	2b00      	cmp	r3, #0
 800f516:	d103      	bne.n	800f520 <f_open+0x304>
 800f518:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f51a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d8e0      	bhi.n	800f4e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f524:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f526:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d127      	bne.n	800f57e <f_open+0x362>
 800f52e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f534:	2b00      	cmp	r3, #0
 800f536:	d022      	beq.n	800f57e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fd ff0d 	bl	800d35c <clust2sect>
 800f542:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f546:	2b00      	cmp	r3, #0
 800f548:	d103      	bne.n	800f552 <f_open+0x336>
						res = FR_INT_ERR;
 800f54a:	2302      	movs	r3, #2
 800f54c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f550:	e015      	b.n	800f57e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f554:	0a5a      	lsrs	r2, r3, #9
 800f556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f558:	441a      	add	r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	7858      	ldrb	r0, [r3, #1]
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	6a1a      	ldr	r2, [r3, #32]
 800f56c:	2301      	movs	r3, #1
 800f56e:	f7fd fb4b 	bl	800cc08 <disk_read>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d002      	beq.n	800f57e <f_open+0x362>
 800f578:	2301      	movs	r3, #1
 800f57a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f57e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f582:	2b00      	cmp	r3, #0
 800f584:	d002      	beq.n	800f58c <f_open+0x370>
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2200      	movs	r2, #0
 800f58a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f58c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f590:	4618      	mov	r0, r3
 800f592:	3768      	adds	r7, #104	; 0x68
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b08c      	sub	sp, #48	; 0x30
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f107 0210 	add.w	r2, r7, #16
 800f5b6:	4611      	mov	r1, r2
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7ff fdb3 	bl	800f124 <validate>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f5c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d107      	bne.n	800f5dc <f_write+0x44>
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	7d5b      	ldrb	r3, [r3, #21]
 800f5d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f5d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d002      	beq.n	800f5e2 <f_write+0x4a>
 800f5dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5e0:	e14b      	b.n	800f87a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	7d1b      	ldrb	r3, [r3, #20]
 800f5e6:	f003 0302 	and.w	r3, r3, #2
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d101      	bne.n	800f5f2 <f_write+0x5a>
 800f5ee:	2307      	movs	r3, #7
 800f5f0:	e143      	b.n	800f87a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	699a      	ldr	r2, [r3, #24]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	441a      	add	r2, r3
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	699b      	ldr	r3, [r3, #24]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	f080 812d 	bcs.w	800f85e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	699b      	ldr	r3, [r3, #24]
 800f608:	43db      	mvns	r3, r3
 800f60a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f60c:	e127      	b.n	800f85e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	699b      	ldr	r3, [r3, #24]
 800f612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f616:	2b00      	cmp	r3, #0
 800f618:	f040 80e3 	bne.w	800f7e2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	699b      	ldr	r3, [r3, #24]
 800f620:	0a5b      	lsrs	r3, r3, #9
 800f622:	693a      	ldr	r2, [r7, #16]
 800f624:	8952      	ldrh	r2, [r2, #10]
 800f626:	3a01      	subs	r2, #1
 800f628:	4013      	ands	r3, r2
 800f62a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d143      	bne.n	800f6ba <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	699b      	ldr	r3, [r3, #24]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d10c      	bne.n	800f654 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f642:	2b00      	cmp	r3, #0
 800f644:	d11a      	bne.n	800f67c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2100      	movs	r1, #0
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7fe f89c 	bl	800d788 <create_chain>
 800f650:	62b8      	str	r0, [r7, #40]	; 0x28
 800f652:	e013      	b.n	800f67c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d007      	beq.n	800f66c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	699b      	ldr	r3, [r3, #24]
 800f660:	4619      	mov	r1, r3
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f7fe f928 	bl	800d8b8 <clmt_clust>
 800f668:	62b8      	str	r0, [r7, #40]	; 0x28
 800f66a:	e007      	b.n	800f67c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	69db      	ldr	r3, [r3, #28]
 800f672:	4619      	mov	r1, r3
 800f674:	4610      	mov	r0, r2
 800f676:	f7fe f887 	bl	800d788 <create_chain>
 800f67a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f000 80f2 	beq.w	800f868 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f686:	2b01      	cmp	r3, #1
 800f688:	d104      	bne.n	800f694 <f_write+0xfc>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2202      	movs	r2, #2
 800f68e:	755a      	strb	r2, [r3, #21]
 800f690:	2302      	movs	r3, #2
 800f692:	e0f2      	b.n	800f87a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f69a:	d104      	bne.n	800f6a6 <f_write+0x10e>
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	755a      	strb	r2, [r3, #21]
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e0e9      	b.n	800f87a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6aa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d102      	bne.n	800f6ba <f_write+0x122>
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6b8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	7d1b      	ldrb	r3, [r3, #20]
 800f6be:	b25b      	sxtb	r3, r3
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	da18      	bge.n	800f6f6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	7858      	ldrb	r0, [r3, #1]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6a1a      	ldr	r2, [r3, #32]
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	f7fd fab8 	bl	800cc48 <disk_write>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d004      	beq.n	800f6e8 <f_write+0x150>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	755a      	strb	r2, [r3, #21]
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e0c8      	b.n	800f87a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	7d1b      	ldrb	r3, [r3, #20]
 800f6ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6f0:	b2da      	uxtb	r2, r3
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f6f6:	693a      	ldr	r2, [r7, #16]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	69db      	ldr	r3, [r3, #28]
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	4610      	mov	r0, r2
 800f700:	f7fd fe2c 	bl	800d35c <clust2sect>
 800f704:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d104      	bne.n	800f716 <f_write+0x17e>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2202      	movs	r2, #2
 800f710:	755a      	strb	r2, [r3, #21]
 800f712:	2302      	movs	r3, #2
 800f714:	e0b1      	b.n	800f87a <f_write+0x2e2>
			sect += csect;
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	4413      	add	r3, r2
 800f71c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	0a5b      	lsrs	r3, r3, #9
 800f722:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f724:	6a3b      	ldr	r3, [r7, #32]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d03c      	beq.n	800f7a4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f72a:	69ba      	ldr	r2, [r7, #24]
 800f72c:	6a3b      	ldr	r3, [r7, #32]
 800f72e:	4413      	add	r3, r2
 800f730:	693a      	ldr	r2, [r7, #16]
 800f732:	8952      	ldrh	r2, [r2, #10]
 800f734:	4293      	cmp	r3, r2
 800f736:	d905      	bls.n	800f744 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	895b      	ldrh	r3, [r3, #10]
 800f73c:	461a      	mov	r2, r3
 800f73e:	69bb      	ldr	r3, [r7, #24]
 800f740:	1ad3      	subs	r3, r2, r3
 800f742:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	7858      	ldrb	r0, [r3, #1]
 800f748:	6a3b      	ldr	r3, [r7, #32]
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	69f9      	ldr	r1, [r7, #28]
 800f74e:	f7fd fa7b 	bl	800cc48 <disk_write>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d004      	beq.n	800f762 <f_write+0x1ca>
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2201      	movs	r2, #1
 800f75c:	755a      	strb	r2, [r3, #21]
 800f75e:	2301      	movs	r3, #1
 800f760:	e08b      	b.n	800f87a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	6a1a      	ldr	r2, [r3, #32]
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	1ad3      	subs	r3, r2, r3
 800f76a:	6a3a      	ldr	r2, [r7, #32]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d915      	bls.n	800f79c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6a1a      	ldr	r2, [r3, #32]
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	1ad3      	subs	r3, r2, r3
 800f77e:	025b      	lsls	r3, r3, #9
 800f780:	69fa      	ldr	r2, [r7, #28]
 800f782:	4413      	add	r3, r2
 800f784:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f788:	4619      	mov	r1, r3
 800f78a:	f7fd fb1d 	bl	800cdc8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	7d1b      	ldrb	r3, [r3, #20]
 800f792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f796:	b2da      	uxtb	r2, r3
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f79c:	6a3b      	ldr	r3, [r7, #32]
 800f79e:	025b      	lsls	r3, r3, #9
 800f7a0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f7a2:	e03f      	b.n	800f824 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	6a1b      	ldr	r3, [r3, #32]
 800f7a8:	697a      	ldr	r2, [r7, #20]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d016      	beq.n	800f7dc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	699a      	ldr	r2, [r3, #24]
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d210      	bcs.n	800f7dc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	7858      	ldrb	r0, [r3, #1]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	697a      	ldr	r2, [r7, #20]
 800f7c8:	f7fd fa1e 	bl	800cc08 <disk_read>
 800f7cc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d004      	beq.n	800f7dc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	755a      	strb	r2, [r3, #21]
 800f7d8:	2301      	movs	r3, #1
 800f7da:	e04e      	b.n	800f87a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	697a      	ldr	r2, [r7, #20]
 800f7e0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	699b      	ldr	r3, [r3, #24]
 800f7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7ea:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f7ee:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d901      	bls.n	800f7fc <f_write+0x264>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	699b      	ldr	r3, [r3, #24]
 800f806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f80a:	4413      	add	r3, r2
 800f80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f80e:	69f9      	ldr	r1, [r7, #28]
 800f810:	4618      	mov	r0, r3
 800f812:	f7fd fad9 	bl	800cdc8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	7d1b      	ldrb	r3, [r3, #20]
 800f81a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f81e:	b2da      	uxtb	r2, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f824:	69fa      	ldr	r2, [r7, #28]
 800f826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f828:	4413      	add	r3, r2
 800f82a:	61fb      	str	r3, [r7, #28]
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	699a      	ldr	r2, [r3, #24]
 800f830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f832:	441a      	add	r2, r3
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	619a      	str	r2, [r3, #24]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	68da      	ldr	r2, [r3, #12]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	699b      	ldr	r3, [r3, #24]
 800f840:	429a      	cmp	r2, r3
 800f842:	bf38      	it	cc
 800f844:	461a      	movcc	r2, r3
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	60da      	str	r2, [r3, #12]
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f850:	441a      	add	r2, r3
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	601a      	str	r2, [r3, #0]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85a:	1ad3      	subs	r3, r2, r3
 800f85c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2b00      	cmp	r3, #0
 800f862:	f47f aed4 	bne.w	800f60e <f_write+0x76>
 800f866:	e000      	b.n	800f86a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f868:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	7d1b      	ldrb	r3, [r3, #20]
 800f86e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f872:	b2da      	uxtb	r2, r3
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3730      	adds	r7, #48	; 0x30
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b086      	sub	sp, #24
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f107 0208 	add.w	r2, r7, #8
 800f890:	4611      	mov	r1, r2
 800f892:	4618      	mov	r0, r3
 800f894:	f7ff fc46 	bl	800f124 <validate>
 800f898:	4603      	mov	r3, r0
 800f89a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f89c:	7dfb      	ldrb	r3, [r7, #23]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d168      	bne.n	800f974 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	7d1b      	ldrb	r3, [r3, #20]
 800f8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d062      	beq.n	800f974 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	7d1b      	ldrb	r3, [r3, #20]
 800f8b2:	b25b      	sxtb	r3, r3
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	da15      	bge.n	800f8e4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	7858      	ldrb	r0, [r3, #1]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a1a      	ldr	r2, [r3, #32]
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	f7fd f9be 	bl	800cc48 <disk_write>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d001      	beq.n	800f8d6 <f_sync+0x54>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	e04f      	b.n	800f976 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	7d1b      	ldrb	r3, [r3, #20]
 800f8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f8e4:	f7fa ff22 	bl	800a72c <get_fattime>
 800f8e8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f8ea:	68ba      	ldr	r2, [r7, #8]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4610      	mov	r0, r2
 800f8f4:	f7fd fc96 	bl	800d224 <move_window>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f8fc:	7dfb      	ldrb	r3, [r7, #23]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d138      	bne.n	800f974 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f906:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	330b      	adds	r3, #11
 800f90c:	781a      	ldrb	r2, [r3, #0]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	330b      	adds	r3, #11
 800f912:	f042 0220 	orr.w	r2, r2, #32
 800f916:	b2d2      	uxtb	r2, r2
 800f918:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6818      	ldr	r0, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	461a      	mov	r2, r3
 800f924:	68f9      	ldr	r1, [r7, #12]
 800f926:	f7fe f9a1 	bl	800dc6c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f103 021c 	add.w	r2, r3, #28
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	4619      	mov	r1, r3
 800f936:	4610      	mov	r0, r2
 800f938:	f7fd fa1a 	bl	800cd70 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	3316      	adds	r3, #22
 800f940:	6939      	ldr	r1, [r7, #16]
 800f942:	4618      	mov	r0, r3
 800f944:	f7fd fa14 	bl	800cd70 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	3312      	adds	r3, #18
 800f94c:	2100      	movs	r1, #0
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fd f9f3 	bl	800cd3a <st_word>
					fs->wflag = 1;
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	2201      	movs	r2, #1
 800f958:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fd fc8f 	bl	800d280 <sync_fs>
 800f962:	4603      	mov	r3, r0
 800f964:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	7d1b      	ldrb	r3, [r3, #20]
 800f96a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f974:	7dfb      	ldrb	r3, [r7, #23]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3718      	adds	r7, #24
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b084      	sub	sp, #16
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f7ff ff7b 	bl	800f882 <f_sync>
 800f98c:	4603      	mov	r3, r0
 800f98e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f990:	7bfb      	ldrb	r3, [r7, #15]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d118      	bne.n	800f9c8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f107 0208 	add.w	r2, r7, #8
 800f99c:	4611      	mov	r1, r2
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7ff fbc0 	bl	800f124 <validate>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f9a8:	7bfb      	ldrb	r3, [r7, #15]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d10c      	bne.n	800f9c8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fd fb92 	bl	800d0dc <dec_lock>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d102      	bne.n	800f9c8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b086      	sub	sp, #24
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <f_opendir+0x14>
 800f9e2:	2309      	movs	r3, #9
 800f9e4:	e064      	b.n	800fab0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f9ea:	f107 010c 	add.w	r1, r7, #12
 800f9ee:	463b      	mov	r3, r7
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7ff f946 	bl	800ec84 <find_volume>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d14f      	bne.n	800faa2 <f_opendir+0xd0>
		obj->fs = fs;
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f7ff f82d 	bl	800ea6c <follow_path>
 800fa12:	4603      	mov	r3, r0
 800fa14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800fa16:	7dfb      	ldrb	r3, [r7, #23]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d13d      	bne.n	800fa98 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa22:	b25b      	sxtb	r3, r3
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	db12      	blt.n	800fa4e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	799b      	ldrb	r3, [r3, #6]
 800fa2c:	f003 0310 	and.w	r3, r3, #16
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00a      	beq.n	800fa4a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	f7fe f8f6 	bl	800dc2e <ld_clust>
 800fa42:	4602      	mov	r2, r0
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	609a      	str	r2, [r3, #8]
 800fa48:	e001      	b.n	800fa4e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fa4a:	2305      	movs	r3, #5
 800fa4c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800fa4e:	7dfb      	ldrb	r3, [r7, #23]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d121      	bne.n	800fa98 <f_opendir+0xc6>
				obj->id = fs->id;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	88da      	ldrh	r2, [r3, #6]
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7fd ff5e 	bl	800d920 <dir_sdi>
 800fa64:	4603      	mov	r3, r0
 800fa66:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d114      	bne.n	800fa98 <f_opendir+0xc6>
					if (obj->sclust) {
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	689b      	ldr	r3, [r3, #8]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00d      	beq.n	800fa92 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fa76:	2100      	movs	r1, #0
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7fd faa1 	bl	800cfc0 <inc_lock>
 800fa7e:	4602      	mov	r2, r0
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d105      	bne.n	800fa98 <f_opendir+0xc6>
 800fa8c:	2312      	movs	r3, #18
 800fa8e:	75fb      	strb	r3, [r7, #23]
 800fa90:	e002      	b.n	800fa98 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	2200      	movs	r2, #0
 800fa96:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fa98:	7dfb      	ldrb	r3, [r7, #23]
 800fa9a:	2b04      	cmp	r3, #4
 800fa9c:	d101      	bne.n	800faa2 <f_opendir+0xd0>
 800fa9e:	2305      	movs	r3, #5
 800faa0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800faa2:	7dfb      	ldrb	r3, [r7, #23]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d002      	beq.n	800faae <f_opendir+0xdc>
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	2200      	movs	r2, #0
 800faac:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800faae:	7dfb      	ldrb	r3, [r7, #23]
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3718      	adds	r7, #24
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f107 0208 	add.w	r2, r7, #8
 800fac6:	4611      	mov	r1, r2
 800fac8:	4618      	mov	r0, r3
 800faca:	f7ff fb2b 	bl	800f124 <validate>
 800face:	4603      	mov	r3, r0
 800fad0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fad2:	7bfb      	ldrb	r3, [r7, #15]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d110      	bne.n	800fafa <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d006      	beq.n	800faee <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fd faf9 	bl	800d0dc <dec_lock>
 800faea:	4603      	mov	r3, r0
 800faec:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800faee:	7bfb      	ldrb	r3, [r7, #15]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d102      	bne.n	800fafa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800fafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f107 0208 	add.w	r2, r7, #8
 800fb14:	4611      	mov	r1, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7ff fb04 	bl	800f124 <validate>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d126      	bne.n	800fb74 <f_readdir+0x70>
		if (!fno) {
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d106      	bne.n	800fb3a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7fd fef6 	bl	800d920 <dir_sdi>
 800fb34:	4603      	mov	r3, r0
 800fb36:	73fb      	strb	r3, [r7, #15]
 800fb38:	e01c      	b.n	800fb74 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7fe faa0 	bl	800e082 <dir_read>
 800fb42:	4603      	mov	r3, r0
 800fb44:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fb46:	7bfb      	ldrb	r3, [r7, #15]
 800fb48:	2b04      	cmp	r3, #4
 800fb4a:	d101      	bne.n	800fb50 <f_readdir+0x4c>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800fb50:	7bfb      	ldrb	r3, [r7, #15]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d10e      	bne.n	800fb74 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fb56:	6839      	ldr	r1, [r7, #0]
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7fe fcf1 	bl	800e540 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fb5e:	2100      	movs	r1, #0
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7fd ff58 	bl	800da16 <dir_next>
 800fb66:	4603      	mov	r3, r0
 800fb68:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fb6a:	7bfb      	ldrb	r3, [r7, #15]
 800fb6c:	2b04      	cmp	r3, #4
 800fb6e:	d101      	bne.n	800fb74 <f_readdir+0x70>
 800fb70:	2300      	movs	r3, #0
 800fb72:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
	...

0800fb80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b087      	sub	sp, #28
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fb96:	4b1f      	ldr	r3, [pc, #124]	; (800fc14 <FATFS_LinkDriverEx+0x94>)
 800fb98:	7a5b      	ldrb	r3, [r3, #9]
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d131      	bne.n	800fc04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fba0:	4b1c      	ldr	r3, [pc, #112]	; (800fc14 <FATFS_LinkDriverEx+0x94>)
 800fba2:	7a5b      	ldrb	r3, [r3, #9]
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	461a      	mov	r2, r3
 800fba8:	4b1a      	ldr	r3, [pc, #104]	; (800fc14 <FATFS_LinkDriverEx+0x94>)
 800fbaa:	2100      	movs	r1, #0
 800fbac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fbae:	4b19      	ldr	r3, [pc, #100]	; (800fc14 <FATFS_LinkDriverEx+0x94>)
 800fbb0:	7a5b      	ldrb	r3, [r3, #9]
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	4a17      	ldr	r2, [pc, #92]	; (800fc14 <FATFS_LinkDriverEx+0x94>)
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	4413      	add	r3, r2
 800fbba:	68fa      	ldr	r2, [r7, #12]
 800fbbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fbbe:	4b15      	ldr	r3, [pc, #84]	; (800fc14 <FATFS_LinkDriverEx+0x94>)
 800fbc0:	7a5b      	ldrb	r3, [r3, #9]
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	4b13      	ldr	r3, [pc, #76]	; (800fc14 <FATFS_LinkDriverEx+0x94>)
 800fbc8:	4413      	add	r3, r2
 800fbca:	79fa      	ldrb	r2, [r7, #7]
 800fbcc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fbce:	4b11      	ldr	r3, [pc, #68]	; (800fc14 <FATFS_LinkDriverEx+0x94>)
 800fbd0:	7a5b      	ldrb	r3, [r3, #9]
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	1c5a      	adds	r2, r3, #1
 800fbd6:	b2d1      	uxtb	r1, r2
 800fbd8:	4a0e      	ldr	r2, [pc, #56]	; (800fc14 <FATFS_LinkDriverEx+0x94>)
 800fbda:	7251      	strb	r1, [r2, #9]
 800fbdc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fbde:	7dbb      	ldrb	r3, [r7, #22]
 800fbe0:	3330      	adds	r3, #48	; 0x30
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	3301      	adds	r3, #1
 800fbec:	223a      	movs	r2, #58	; 0x3a
 800fbee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	3302      	adds	r3, #2
 800fbf4:	222f      	movs	r2, #47	; 0x2f
 800fbf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	3303      	adds	r3, #3
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fc00:	2300      	movs	r3, #0
 800fc02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fc04:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	371c      	adds	r7, #28
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	20005dd0 	.word	0x20005dd0

0800fc18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fc22:	2200      	movs	r2, #0
 800fc24:	6839      	ldr	r1, [r7, #0]
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7ff ffaa 	bl	800fb80 <FATFS_LinkDriverEx>
 800fc2c:	4603      	mov	r3, r0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
	...

0800fc38 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	4603      	mov	r3, r0
 800fc40:	6039      	str	r1, [r7, #0]
 800fc42:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fc44:	88fb      	ldrh	r3, [r7, #6]
 800fc46:	2b7f      	cmp	r3, #127	; 0x7f
 800fc48:	d802      	bhi.n	800fc50 <ff_convert+0x18>
		c = chr;
 800fc4a:	88fb      	ldrh	r3, [r7, #6]
 800fc4c:	81fb      	strh	r3, [r7, #14]
 800fc4e:	e025      	b.n	800fc9c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00b      	beq.n	800fc6e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fc56:	88fb      	ldrh	r3, [r7, #6]
 800fc58:	2bff      	cmp	r3, #255	; 0xff
 800fc5a:	d805      	bhi.n	800fc68 <ff_convert+0x30>
 800fc5c:	88fb      	ldrh	r3, [r7, #6]
 800fc5e:	3b80      	subs	r3, #128	; 0x80
 800fc60:	4a12      	ldr	r2, [pc, #72]	; (800fcac <ff_convert+0x74>)
 800fc62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc66:	e000      	b.n	800fc6a <ff_convert+0x32>
 800fc68:	2300      	movs	r3, #0
 800fc6a:	81fb      	strh	r3, [r7, #14]
 800fc6c:	e016      	b.n	800fc9c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fc6e:	2300      	movs	r3, #0
 800fc70:	81fb      	strh	r3, [r7, #14]
 800fc72:	e009      	b.n	800fc88 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fc74:	89fb      	ldrh	r3, [r7, #14]
 800fc76:	4a0d      	ldr	r2, [pc, #52]	; (800fcac <ff_convert+0x74>)
 800fc78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc7c:	88fa      	ldrh	r2, [r7, #6]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d006      	beq.n	800fc90 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fc82:	89fb      	ldrh	r3, [r7, #14]
 800fc84:	3301      	adds	r3, #1
 800fc86:	81fb      	strh	r3, [r7, #14]
 800fc88:	89fb      	ldrh	r3, [r7, #14]
 800fc8a:	2b7f      	cmp	r3, #127	; 0x7f
 800fc8c:	d9f2      	bls.n	800fc74 <ff_convert+0x3c>
 800fc8e:	e000      	b.n	800fc92 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fc90:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fc92:	89fb      	ldrh	r3, [r7, #14]
 800fc94:	3380      	adds	r3, #128	; 0x80
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fc9c:	89fb      	ldrh	r3, [r7, #14]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3714      	adds	r7, #20
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	08012214 	.word	0x08012214

0800fcb0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b087      	sub	sp, #28
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fcba:	88fb      	ldrh	r3, [r7, #6]
 800fcbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcc0:	d201      	bcs.n	800fcc6 <ff_wtoupper+0x16>
 800fcc2:	4b3e      	ldr	r3, [pc, #248]	; (800fdbc <ff_wtoupper+0x10c>)
 800fcc4:	e000      	b.n	800fcc8 <ff_wtoupper+0x18>
 800fcc6:	4b3e      	ldr	r3, [pc, #248]	; (800fdc0 <ff_wtoupper+0x110>)
 800fcc8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	1c9a      	adds	r2, r3, #2
 800fcce:	617a      	str	r2, [r7, #20]
 800fcd0:	881b      	ldrh	r3, [r3, #0]
 800fcd2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fcd4:	8a7b      	ldrh	r3, [r7, #18]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d068      	beq.n	800fdac <ff_wtoupper+0xfc>
 800fcda:	88fa      	ldrh	r2, [r7, #6]
 800fcdc:	8a7b      	ldrh	r3, [r7, #18]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d364      	bcc.n	800fdac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	1c9a      	adds	r2, r3, #2
 800fce6:	617a      	str	r2, [r7, #20]
 800fce8:	881b      	ldrh	r3, [r3, #0]
 800fcea:	823b      	strh	r3, [r7, #16]
 800fcec:	8a3b      	ldrh	r3, [r7, #16]
 800fcee:	0a1b      	lsrs	r3, r3, #8
 800fcf0:	81fb      	strh	r3, [r7, #14]
 800fcf2:	8a3b      	ldrh	r3, [r7, #16]
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fcf8:	88fa      	ldrh	r2, [r7, #6]
 800fcfa:	8a79      	ldrh	r1, [r7, #18]
 800fcfc:	8a3b      	ldrh	r3, [r7, #16]
 800fcfe:	440b      	add	r3, r1
 800fd00:	429a      	cmp	r2, r3
 800fd02:	da49      	bge.n	800fd98 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fd04:	89fb      	ldrh	r3, [r7, #14]
 800fd06:	2b08      	cmp	r3, #8
 800fd08:	d84f      	bhi.n	800fdaa <ff_wtoupper+0xfa>
 800fd0a:	a201      	add	r2, pc, #4	; (adr r2, 800fd10 <ff_wtoupper+0x60>)
 800fd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd10:	0800fd35 	.word	0x0800fd35
 800fd14:	0800fd47 	.word	0x0800fd47
 800fd18:	0800fd5d 	.word	0x0800fd5d
 800fd1c:	0800fd65 	.word	0x0800fd65
 800fd20:	0800fd6d 	.word	0x0800fd6d
 800fd24:	0800fd75 	.word	0x0800fd75
 800fd28:	0800fd7d 	.word	0x0800fd7d
 800fd2c:	0800fd85 	.word	0x0800fd85
 800fd30:	0800fd8d 	.word	0x0800fd8d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fd34:	88fa      	ldrh	r2, [r7, #6]
 800fd36:	8a7b      	ldrh	r3, [r7, #18]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	005b      	lsls	r3, r3, #1
 800fd3c:	697a      	ldr	r2, [r7, #20]
 800fd3e:	4413      	add	r3, r2
 800fd40:	881b      	ldrh	r3, [r3, #0]
 800fd42:	80fb      	strh	r3, [r7, #6]
 800fd44:	e027      	b.n	800fd96 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fd46:	88fa      	ldrh	r2, [r7, #6]
 800fd48:	8a7b      	ldrh	r3, [r7, #18]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	f003 0301 	and.w	r3, r3, #1
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	88fa      	ldrh	r2, [r7, #6]
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	80fb      	strh	r3, [r7, #6]
 800fd5a:	e01c      	b.n	800fd96 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fd5c:	88fb      	ldrh	r3, [r7, #6]
 800fd5e:	3b10      	subs	r3, #16
 800fd60:	80fb      	strh	r3, [r7, #6]
 800fd62:	e018      	b.n	800fd96 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fd64:	88fb      	ldrh	r3, [r7, #6]
 800fd66:	3b20      	subs	r3, #32
 800fd68:	80fb      	strh	r3, [r7, #6]
 800fd6a:	e014      	b.n	800fd96 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fd6c:	88fb      	ldrh	r3, [r7, #6]
 800fd6e:	3b30      	subs	r3, #48	; 0x30
 800fd70:	80fb      	strh	r3, [r7, #6]
 800fd72:	e010      	b.n	800fd96 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fd74:	88fb      	ldrh	r3, [r7, #6]
 800fd76:	3b1a      	subs	r3, #26
 800fd78:	80fb      	strh	r3, [r7, #6]
 800fd7a:	e00c      	b.n	800fd96 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fd7c:	88fb      	ldrh	r3, [r7, #6]
 800fd7e:	3308      	adds	r3, #8
 800fd80:	80fb      	strh	r3, [r7, #6]
 800fd82:	e008      	b.n	800fd96 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fd84:	88fb      	ldrh	r3, [r7, #6]
 800fd86:	3b50      	subs	r3, #80	; 0x50
 800fd88:	80fb      	strh	r3, [r7, #6]
 800fd8a:	e004      	b.n	800fd96 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fd8c:	88fb      	ldrh	r3, [r7, #6]
 800fd8e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fd92:	80fb      	strh	r3, [r7, #6]
 800fd94:	bf00      	nop
			}
			break;
 800fd96:	e008      	b.n	800fdaa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fd98:	89fb      	ldrh	r3, [r7, #14]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d195      	bne.n	800fcca <ff_wtoupper+0x1a>
 800fd9e:	8a3b      	ldrh	r3, [r7, #16]
 800fda0:	005b      	lsls	r3, r3, #1
 800fda2:	697a      	ldr	r2, [r7, #20]
 800fda4:	4413      	add	r3, r2
 800fda6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fda8:	e78f      	b.n	800fcca <ff_wtoupper+0x1a>
			break;
 800fdaa:	bf00      	nop
	}

	return chr;
 800fdac:	88fb      	ldrh	r3, [r7, #6]
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	371c      	adds	r7, #28
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	08012314 	.word	0x08012314
 800fdc0:	08012508 	.word	0x08012508

0800fdc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fdc8:	2200      	movs	r2, #0
 800fdca:	4912      	ldr	r1, [pc, #72]	; (800fe14 <MX_USB_DEVICE_Init+0x50>)
 800fdcc:	4812      	ldr	r0, [pc, #72]	; (800fe18 <MX_USB_DEVICE_Init+0x54>)
 800fdce:	f7fb fbbf 	bl	800b550 <USBD_Init>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d001      	beq.n	800fddc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fdd8:	f7f1 f9f8 	bl	80011cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fddc:	490f      	ldr	r1, [pc, #60]	; (800fe1c <MX_USB_DEVICE_Init+0x58>)
 800fdde:	480e      	ldr	r0, [pc, #56]	; (800fe18 <MX_USB_DEVICE_Init+0x54>)
 800fde0:	f7fb fbe6 	bl	800b5b0 <USBD_RegisterClass>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d001      	beq.n	800fdee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fdea:	f7f1 f9ef 	bl	80011cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fdee:	490c      	ldr	r1, [pc, #48]	; (800fe20 <MX_USB_DEVICE_Init+0x5c>)
 800fdf0:	4809      	ldr	r0, [pc, #36]	; (800fe18 <MX_USB_DEVICE_Init+0x54>)
 800fdf2:	f7fb fadd 	bl	800b3b0 <USBD_CDC_RegisterInterface>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d001      	beq.n	800fe00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fdfc:	f7f1 f9e6 	bl	80011cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fe00:	4805      	ldr	r0, [pc, #20]	; (800fe18 <MX_USB_DEVICE_Init+0x54>)
 800fe02:	f7fb fc0b 	bl	800b61c <USBD_Start>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d001      	beq.n	800fe10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fe0c:	f7f1 f9de 	bl	80011cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fe10:	bf00      	nop
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	200000ac 	.word	0x200000ac
 800fe18:	20005ddc 	.word	0x20005ddc
 800fe1c:	20000018 	.word	0x20000018
 800fe20:	20000098 	.word	0x20000098

0800fe24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fe28:	2200      	movs	r2, #0
 800fe2a:	4905      	ldr	r1, [pc, #20]	; (800fe40 <CDC_Init_FS+0x1c>)
 800fe2c:	4805      	ldr	r0, [pc, #20]	; (800fe44 <CDC_Init_FS+0x20>)
 800fe2e:	f7fb fad9 	bl	800b3e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fe32:	4905      	ldr	r1, [pc, #20]	; (800fe48 <CDC_Init_FS+0x24>)
 800fe34:	4803      	ldr	r0, [pc, #12]	; (800fe44 <CDC_Init_FS+0x20>)
 800fe36:	f7fb faf7 	bl	800b428 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	200068b8 	.word	0x200068b8
 800fe44:	20005ddc 	.word	0x20005ddc
 800fe48:	200060b8 	.word	0x200060b8

0800fe4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	4603      	mov	r3, r0
 800fe64:	6039      	str	r1, [r7, #0]
 800fe66:	71fb      	strb	r3, [r7, #7]
 800fe68:	4613      	mov	r3, r2
 800fe6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe6c:	79fb      	ldrb	r3, [r7, #7]
 800fe6e:	2b23      	cmp	r3, #35	; 0x23
 800fe70:	d84a      	bhi.n	800ff08 <CDC_Control_FS+0xac>
 800fe72:	a201      	add	r2, pc, #4	; (adr r2, 800fe78 <CDC_Control_FS+0x1c>)
 800fe74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe78:	0800ff09 	.word	0x0800ff09
 800fe7c:	0800ff09 	.word	0x0800ff09
 800fe80:	0800ff09 	.word	0x0800ff09
 800fe84:	0800ff09 	.word	0x0800ff09
 800fe88:	0800ff09 	.word	0x0800ff09
 800fe8c:	0800ff09 	.word	0x0800ff09
 800fe90:	0800ff09 	.word	0x0800ff09
 800fe94:	0800ff09 	.word	0x0800ff09
 800fe98:	0800ff09 	.word	0x0800ff09
 800fe9c:	0800ff09 	.word	0x0800ff09
 800fea0:	0800ff09 	.word	0x0800ff09
 800fea4:	0800ff09 	.word	0x0800ff09
 800fea8:	0800ff09 	.word	0x0800ff09
 800feac:	0800ff09 	.word	0x0800ff09
 800feb0:	0800ff09 	.word	0x0800ff09
 800feb4:	0800ff09 	.word	0x0800ff09
 800feb8:	0800ff09 	.word	0x0800ff09
 800febc:	0800ff09 	.word	0x0800ff09
 800fec0:	0800ff09 	.word	0x0800ff09
 800fec4:	0800ff09 	.word	0x0800ff09
 800fec8:	0800ff09 	.word	0x0800ff09
 800fecc:	0800ff09 	.word	0x0800ff09
 800fed0:	0800ff09 	.word	0x0800ff09
 800fed4:	0800ff09 	.word	0x0800ff09
 800fed8:	0800ff09 	.word	0x0800ff09
 800fedc:	0800ff09 	.word	0x0800ff09
 800fee0:	0800ff09 	.word	0x0800ff09
 800fee4:	0800ff09 	.word	0x0800ff09
 800fee8:	0800ff09 	.word	0x0800ff09
 800feec:	0800ff09 	.word	0x0800ff09
 800fef0:	0800ff09 	.word	0x0800ff09
 800fef4:	0800ff09 	.word	0x0800ff09
 800fef8:	0800ff09 	.word	0x0800ff09
 800fefc:	0800ff09 	.word	0x0800ff09
 800ff00:	0800ff09 	.word	0x0800ff09
 800ff04:	0800ff09 	.word	0x0800ff09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ff08:	bf00      	nop
  }

  return (USBD_OK);
 800ff0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ff22:	6879      	ldr	r1, [r7, #4]
 800ff24:	4805      	ldr	r0, [pc, #20]	; (800ff3c <CDC_Receive_FS+0x24>)
 800ff26:	f7fb fa7f 	bl	800b428 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ff2a:	4804      	ldr	r0, [pc, #16]	; (800ff3c <CDC_Receive_FS+0x24>)
 800ff2c:	f7fb fada 	bl	800b4e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ff30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3708      	adds	r7, #8
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	20005ddc 	.word	0x20005ddc

0800ff40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ff50:	4b0d      	ldr	r3, [pc, #52]	; (800ff88 <CDC_Transmit_FS+0x48>)
 800ff52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d001      	beq.n	800ff66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ff62:	2301      	movs	r3, #1
 800ff64:	e00b      	b.n	800ff7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ff66:	887b      	ldrh	r3, [r7, #2]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	6879      	ldr	r1, [r7, #4]
 800ff6c:	4806      	ldr	r0, [pc, #24]	; (800ff88 <CDC_Transmit_FS+0x48>)
 800ff6e:	f7fb fa39 	bl	800b3e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ff72:	4805      	ldr	r0, [pc, #20]	; (800ff88 <CDC_Transmit_FS+0x48>)
 800ff74:	f7fb fa76 	bl	800b464 <USBD_CDC_TransmitPacket>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ff7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	20005ddc 	.word	0x20005ddc

0800ff8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b087      	sub	sp, #28
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	4613      	mov	r3, r2
 800ff98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	371c      	adds	r7, #28
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
	...

0800ffb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	6039      	str	r1, [r7, #0]
 800ffba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	2212      	movs	r2, #18
 800ffc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ffc2:	4b03      	ldr	r3, [pc, #12]	; (800ffd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr
 800ffd0:	200000cc 	.word	0x200000cc

0800ffd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	4603      	mov	r3, r0
 800ffdc:	6039      	str	r1, [r7, #0]
 800ffde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	2204      	movs	r2, #4
 800ffe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ffe6:	4b03      	ldr	r3, [pc, #12]	; (800fff4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr
 800fff4:	200000ec 	.word	0x200000ec

0800fff8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	4603      	mov	r3, r0
 8010000:	6039      	str	r1, [r7, #0]
 8010002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010004:	79fb      	ldrb	r3, [r7, #7]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d105      	bne.n	8010016 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801000a:	683a      	ldr	r2, [r7, #0]
 801000c:	4907      	ldr	r1, [pc, #28]	; (801002c <USBD_FS_ProductStrDescriptor+0x34>)
 801000e:	4808      	ldr	r0, [pc, #32]	; (8010030 <USBD_FS_ProductStrDescriptor+0x38>)
 8010010:	f7fc fcda 	bl	800c9c8 <USBD_GetString>
 8010014:	e004      	b.n	8010020 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010016:	683a      	ldr	r2, [r7, #0]
 8010018:	4904      	ldr	r1, [pc, #16]	; (801002c <USBD_FS_ProductStrDescriptor+0x34>)
 801001a:	4805      	ldr	r0, [pc, #20]	; (8010030 <USBD_FS_ProductStrDescriptor+0x38>)
 801001c:	f7fc fcd4 	bl	800c9c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010020:	4b02      	ldr	r3, [pc, #8]	; (801002c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010022:	4618      	mov	r0, r3
 8010024:	3708      	adds	r7, #8
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	200070b8 	.word	0x200070b8
 8010030:	08012108 	.word	0x08012108

08010034 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	6039      	str	r1, [r7, #0]
 801003e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010040:	683a      	ldr	r2, [r7, #0]
 8010042:	4904      	ldr	r1, [pc, #16]	; (8010054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010044:	4804      	ldr	r0, [pc, #16]	; (8010058 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010046:	f7fc fcbf 	bl	800c9c8 <USBD_GetString>
  return USBD_StrDesc;
 801004a:	4b02      	ldr	r3, [pc, #8]	; (8010054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801004c:	4618      	mov	r0, r3
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}
 8010054:	200070b8 	.word	0x200070b8
 8010058:	08012120 	.word	0x08012120

0801005c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	4603      	mov	r3, r0
 8010064:	6039      	str	r1, [r7, #0]
 8010066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	221a      	movs	r2, #26
 801006c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801006e:	f000 f855 	bl	801011c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010072:	4b02      	ldr	r3, [pc, #8]	; (801007c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010074:	4618      	mov	r0, r3
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	200000f0 	.word	0x200000f0

08010080 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	4603      	mov	r3, r0
 8010088:	6039      	str	r1, [r7, #0]
 801008a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801008c:	79fb      	ldrb	r3, [r7, #7]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d105      	bne.n	801009e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010092:	683a      	ldr	r2, [r7, #0]
 8010094:	4907      	ldr	r1, [pc, #28]	; (80100b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010096:	4808      	ldr	r0, [pc, #32]	; (80100b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010098:	f7fc fc96 	bl	800c9c8 <USBD_GetString>
 801009c:	e004      	b.n	80100a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801009e:	683a      	ldr	r2, [r7, #0]
 80100a0:	4904      	ldr	r1, [pc, #16]	; (80100b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80100a2:	4805      	ldr	r0, [pc, #20]	; (80100b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80100a4:	f7fc fc90 	bl	800c9c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80100a8:	4b02      	ldr	r3, [pc, #8]	; (80100b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	200070b8 	.word	0x200070b8
 80100b8:	08012134 	.word	0x08012134

080100bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	4603      	mov	r3, r0
 80100c4:	6039      	str	r1, [r7, #0]
 80100c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80100c8:	79fb      	ldrb	r3, [r7, #7]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d105      	bne.n	80100da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80100ce:	683a      	ldr	r2, [r7, #0]
 80100d0:	4907      	ldr	r1, [pc, #28]	; (80100f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80100d2:	4808      	ldr	r0, [pc, #32]	; (80100f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80100d4:	f7fc fc78 	bl	800c9c8 <USBD_GetString>
 80100d8:	e004      	b.n	80100e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80100da:	683a      	ldr	r2, [r7, #0]
 80100dc:	4904      	ldr	r1, [pc, #16]	; (80100f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80100de:	4805      	ldr	r0, [pc, #20]	; (80100f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80100e0:	f7fc fc72 	bl	800c9c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80100e4:	4b02      	ldr	r3, [pc, #8]	; (80100f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3708      	adds	r7, #8
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	200070b8 	.word	0x200070b8
 80100f4:	08012140 	.word	0x08012140

080100f8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4603      	mov	r3, r0
 8010100:	6039      	str	r1, [r7, #0]
 8010102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	220c      	movs	r2, #12
 8010108:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801010a:	4b03      	ldr	r3, [pc, #12]	; (8010118 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801010c:	4618      	mov	r0, r3
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr
 8010118:	200000e0 	.word	0x200000e0

0801011c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010122:	4b0f      	ldr	r3, [pc, #60]	; (8010160 <Get_SerialNum+0x44>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010128:	4b0e      	ldr	r3, [pc, #56]	; (8010164 <Get_SerialNum+0x48>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801012e:	4b0e      	ldr	r3, [pc, #56]	; (8010168 <Get_SerialNum+0x4c>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010134:	68fa      	ldr	r2, [r7, #12]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4413      	add	r3, r2
 801013a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d009      	beq.n	8010156 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010142:	2208      	movs	r2, #8
 8010144:	4909      	ldr	r1, [pc, #36]	; (801016c <Get_SerialNum+0x50>)
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f000 f814 	bl	8010174 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801014c:	2204      	movs	r2, #4
 801014e:	4908      	ldr	r1, [pc, #32]	; (8010170 <Get_SerialNum+0x54>)
 8010150:	68b8      	ldr	r0, [r7, #8]
 8010152:	f000 f80f 	bl	8010174 <IntToUnicode>
  }
}
 8010156:	bf00      	nop
 8010158:	3710      	adds	r7, #16
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	1ff0f420 	.word	0x1ff0f420
 8010164:	1ff0f424 	.word	0x1ff0f424
 8010168:	1ff0f428 	.word	0x1ff0f428
 801016c:	200000f2 	.word	0x200000f2
 8010170:	20000102 	.word	0x20000102

08010174 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010174:	b480      	push	{r7}
 8010176:	b087      	sub	sp, #28
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	4613      	mov	r3, r2
 8010180:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010182:	2300      	movs	r3, #0
 8010184:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010186:	2300      	movs	r3, #0
 8010188:	75fb      	strb	r3, [r7, #23]
 801018a:	e027      	b.n	80101dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	0f1b      	lsrs	r3, r3, #28
 8010190:	2b09      	cmp	r3, #9
 8010192:	d80b      	bhi.n	80101ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	0f1b      	lsrs	r3, r3, #28
 8010198:	b2da      	uxtb	r2, r3
 801019a:	7dfb      	ldrb	r3, [r7, #23]
 801019c:	005b      	lsls	r3, r3, #1
 801019e:	4619      	mov	r1, r3
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	440b      	add	r3, r1
 80101a4:	3230      	adds	r2, #48	; 0x30
 80101a6:	b2d2      	uxtb	r2, r2
 80101a8:	701a      	strb	r2, [r3, #0]
 80101aa:	e00a      	b.n	80101c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	0f1b      	lsrs	r3, r3, #28
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	7dfb      	ldrb	r3, [r7, #23]
 80101b4:	005b      	lsls	r3, r3, #1
 80101b6:	4619      	mov	r1, r3
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	440b      	add	r3, r1
 80101bc:	3237      	adds	r2, #55	; 0x37
 80101be:	b2d2      	uxtb	r2, r2
 80101c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	011b      	lsls	r3, r3, #4
 80101c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80101c8:	7dfb      	ldrb	r3, [r7, #23]
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	3301      	adds	r3, #1
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	4413      	add	r3, r2
 80101d2:	2200      	movs	r2, #0
 80101d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80101d6:	7dfb      	ldrb	r3, [r7, #23]
 80101d8:	3301      	adds	r3, #1
 80101da:	75fb      	strb	r3, [r7, #23]
 80101dc:	7dfa      	ldrb	r2, [r7, #23]
 80101de:	79fb      	ldrb	r3, [r7, #7]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d3d3      	bcc.n	801018c <IntToUnicode+0x18>
  }
}
 80101e4:	bf00      	nop
 80101e6:	bf00      	nop
 80101e8:	371c      	adds	r7, #28
 80101ea:	46bd      	mov	sp, r7
 80101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f0:	4770      	bx	lr
	...

080101f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b0ae      	sub	sp, #184	; 0xb8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010200:	2200      	movs	r2, #0
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	605a      	str	r2, [r3, #4]
 8010206:	609a      	str	r2, [r3, #8]
 8010208:	60da      	str	r2, [r3, #12]
 801020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801020c:	f107 0314 	add.w	r3, r7, #20
 8010210:	2290      	movs	r2, #144	; 0x90
 8010212:	2100      	movs	r1, #0
 8010214:	4618      	mov	r0, r3
 8010216:	f000 fe16 	bl	8010e46 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010222:	d151      	bne.n	80102c8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010224:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010228:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801022a:	2300      	movs	r3, #0
 801022c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010230:	f107 0314 	add.w	r3, r7, #20
 8010234:	4618      	mov	r0, r3
 8010236:	f7f5 fead 	bl	8005f94 <HAL_RCCEx_PeriphCLKConfig>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d001      	beq.n	8010244 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010240:	f7f0 ffc4 	bl	80011cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010244:	4b22      	ldr	r3, [pc, #136]	; (80102d0 <HAL_PCD_MspInit+0xdc>)
 8010246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010248:	4a21      	ldr	r2, [pc, #132]	; (80102d0 <HAL_PCD_MspInit+0xdc>)
 801024a:	f043 0301 	orr.w	r3, r3, #1
 801024e:	6313      	str	r3, [r2, #48]	; 0x30
 8010250:	4b1f      	ldr	r3, [pc, #124]	; (80102d0 <HAL_PCD_MspInit+0xdc>)
 8010252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	613b      	str	r3, [r7, #16]
 801025a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801025c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010264:	2302      	movs	r3, #2
 8010266:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801026a:	2300      	movs	r3, #0
 801026c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010270:	2303      	movs	r3, #3
 8010272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010276:	230a      	movs	r3, #10
 8010278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801027c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010280:	4619      	mov	r1, r3
 8010282:	4814      	ldr	r0, [pc, #80]	; (80102d4 <HAL_PCD_MspInit+0xe0>)
 8010284:	f7f2 ff7a 	bl	800317c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010288:	4b11      	ldr	r3, [pc, #68]	; (80102d0 <HAL_PCD_MspInit+0xdc>)
 801028a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801028c:	4a10      	ldr	r2, [pc, #64]	; (80102d0 <HAL_PCD_MspInit+0xdc>)
 801028e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010292:	6353      	str	r3, [r2, #52]	; 0x34
 8010294:	4b0e      	ldr	r3, [pc, #56]	; (80102d0 <HAL_PCD_MspInit+0xdc>)
 8010296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801029c:	60fb      	str	r3, [r7, #12]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	4b0b      	ldr	r3, [pc, #44]	; (80102d0 <HAL_PCD_MspInit+0xdc>)
 80102a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102a4:	4a0a      	ldr	r2, [pc, #40]	; (80102d0 <HAL_PCD_MspInit+0xdc>)
 80102a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80102aa:	6453      	str	r3, [r2, #68]	; 0x44
 80102ac:	4b08      	ldr	r3, [pc, #32]	; (80102d0 <HAL_PCD_MspInit+0xdc>)
 80102ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80102b4:	60bb      	str	r3, [r7, #8]
 80102b6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80102b8:	2200      	movs	r2, #0
 80102ba:	2100      	movs	r1, #0
 80102bc:	2043      	movs	r0, #67	; 0x43
 80102be:	f7f2 fb80 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80102c2:	2043      	movs	r0, #67	; 0x43
 80102c4:	f7f2 fb99 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80102c8:	bf00      	nop
 80102ca:	37b8      	adds	r7, #184	; 0xb8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	40023800 	.word	0x40023800
 80102d4:	40020000 	.word	0x40020000

080102d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80102ec:	4619      	mov	r1, r3
 80102ee:	4610      	mov	r0, r2
 80102f0:	f7fb f9e1 	bl	800b6b6 <USBD_LL_SetupStage>
}
 80102f4:	bf00      	nop
 80102f6:	3708      	adds	r7, #8
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	460b      	mov	r3, r1
 8010306:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801030e:	78fa      	ldrb	r2, [r7, #3]
 8010310:	6879      	ldr	r1, [r7, #4]
 8010312:	4613      	mov	r3, r2
 8010314:	00db      	lsls	r3, r3, #3
 8010316:	4413      	add	r3, r2
 8010318:	009b      	lsls	r3, r3, #2
 801031a:	440b      	add	r3, r1
 801031c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	78fb      	ldrb	r3, [r7, #3]
 8010324:	4619      	mov	r1, r3
 8010326:	f7fb fa1b 	bl	800b760 <USBD_LL_DataOutStage>
}
 801032a:	bf00      	nop
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010332:	b580      	push	{r7, lr}
 8010334:	b082      	sub	sp, #8
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
 801033a:	460b      	mov	r3, r1
 801033c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010344:	78fa      	ldrb	r2, [r7, #3]
 8010346:	6879      	ldr	r1, [r7, #4]
 8010348:	4613      	mov	r3, r2
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	4413      	add	r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	440b      	add	r3, r1
 8010352:	334c      	adds	r3, #76	; 0x4c
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	78fb      	ldrb	r3, [r7, #3]
 8010358:	4619      	mov	r1, r3
 801035a:	f7fb fab4 	bl	800b8c6 <USBD_LL_DataInStage>
}
 801035e:	bf00      	nop
 8010360:	3708      	adds	r7, #8
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}

08010366 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010366:	b580      	push	{r7, lr}
 8010368:	b082      	sub	sp, #8
 801036a:	af00      	add	r7, sp, #0
 801036c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010374:	4618      	mov	r0, r3
 8010376:	f7fb fbe8 	bl	800bb4a <USBD_LL_SOF>
}
 801037a:	bf00      	nop
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b084      	sub	sp, #16
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801038a:	2301      	movs	r3, #1
 801038c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d102      	bne.n	801039c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010396:	2300      	movs	r3, #0
 8010398:	73fb      	strb	r3, [r7, #15]
 801039a:	e008      	b.n	80103ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	2b02      	cmp	r3, #2
 80103a2:	d102      	bne.n	80103aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80103a4:	2301      	movs	r3, #1
 80103a6:	73fb      	strb	r3, [r7, #15]
 80103a8:	e001      	b.n	80103ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80103aa:	f7f0 ff0f 	bl	80011cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80103b4:	7bfa      	ldrb	r2, [r7, #15]
 80103b6:	4611      	mov	r1, r2
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fb fb88 	bl	800bace <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fb fb30 	bl	800ba2a <USBD_LL_Reset>
}
 80103ca:	bf00      	nop
 80103cc:	3710      	adds	r7, #16
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
	...

080103d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fb fb83 	bl	800baee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	687a      	ldr	r2, [r7, #4]
 80103f4:	6812      	ldr	r2, [r2, #0]
 80103f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80103fa:	f043 0301 	orr.w	r3, r3, #1
 80103fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6a1b      	ldr	r3, [r3, #32]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d005      	beq.n	8010414 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010408:	4b04      	ldr	r3, [pc, #16]	; (801041c <HAL_PCD_SuspendCallback+0x48>)
 801040a:	691b      	ldr	r3, [r3, #16]
 801040c:	4a03      	ldr	r2, [pc, #12]	; (801041c <HAL_PCD_SuspendCallback+0x48>)
 801040e:	f043 0306 	orr.w	r3, r3, #6
 8010412:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010414:	bf00      	nop
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	e000ed00 	.word	0xe000ed00

08010420 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801042e:	4618      	mov	r0, r3
 8010430:	f7fb fb73 	bl	800bb1a <USBD_LL_Resume>
}
 8010434:	bf00      	nop
 8010436:	3708      	adds	r7, #8
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	460b      	mov	r3, r1
 8010446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801044e:	78fa      	ldrb	r2, [r7, #3]
 8010450:	4611      	mov	r1, r2
 8010452:	4618      	mov	r0, r3
 8010454:	f7fb fbcb 	bl	800bbee <USBD_LL_IsoOUTIncomplete>
}
 8010458:	bf00      	nop
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010472:	78fa      	ldrb	r2, [r7, #3]
 8010474:	4611      	mov	r1, r2
 8010476:	4618      	mov	r0, r3
 8010478:	f7fb fb87 	bl	800bb8a <USBD_LL_IsoINIncomplete>
}
 801047c:	bf00      	nop
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010492:	4618      	mov	r0, r3
 8010494:	f7fb fbdd 	bl	800bc52 <USBD_LL_DevConnected>
}
 8010498:	bf00      	nop
 801049a:	3708      	adds	r7, #8
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fb fbda 	bl	800bc68 <USBD_LL_DevDisconnected>
}
 80104b4:	bf00      	nop
 80104b6:	3708      	adds	r7, #8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d13c      	bne.n	8010546 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80104cc:	4a20      	ldr	r2, [pc, #128]	; (8010550 <USBD_LL_Init+0x94>)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4a1e      	ldr	r2, [pc, #120]	; (8010550 <USBD_LL_Init+0x94>)
 80104d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80104dc:	4b1c      	ldr	r3, [pc, #112]	; (8010550 <USBD_LL_Init+0x94>)
 80104de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80104e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80104e4:	4b1a      	ldr	r3, [pc, #104]	; (8010550 <USBD_LL_Init+0x94>)
 80104e6:	2206      	movs	r2, #6
 80104e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80104ea:	4b19      	ldr	r3, [pc, #100]	; (8010550 <USBD_LL_Init+0x94>)
 80104ec:	2202      	movs	r2, #2
 80104ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80104f0:	4b17      	ldr	r3, [pc, #92]	; (8010550 <USBD_LL_Init+0x94>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80104f6:	4b16      	ldr	r3, [pc, #88]	; (8010550 <USBD_LL_Init+0x94>)
 80104f8:	2202      	movs	r2, #2
 80104fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80104fc:	4b14      	ldr	r3, [pc, #80]	; (8010550 <USBD_LL_Init+0x94>)
 80104fe:	2200      	movs	r2, #0
 8010500:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010502:	4b13      	ldr	r3, [pc, #76]	; (8010550 <USBD_LL_Init+0x94>)
 8010504:	2200      	movs	r2, #0
 8010506:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010508:	4b11      	ldr	r3, [pc, #68]	; (8010550 <USBD_LL_Init+0x94>)
 801050a:	2200      	movs	r2, #0
 801050c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801050e:	4b10      	ldr	r3, [pc, #64]	; (8010550 <USBD_LL_Init+0x94>)
 8010510:	2200      	movs	r2, #0
 8010512:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010514:	4b0e      	ldr	r3, [pc, #56]	; (8010550 <USBD_LL_Init+0x94>)
 8010516:	2200      	movs	r2, #0
 8010518:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801051a:	480d      	ldr	r0, [pc, #52]	; (8010550 <USBD_LL_Init+0x94>)
 801051c:	f7f3 fdad 	bl	800407a <HAL_PCD_Init>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d001      	beq.n	801052a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010526:	f7f0 fe51 	bl	80011cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801052a:	2180      	movs	r1, #128	; 0x80
 801052c:	4808      	ldr	r0, [pc, #32]	; (8010550 <USBD_LL_Init+0x94>)
 801052e:	f7f5 f828 	bl	8005582 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010532:	2240      	movs	r2, #64	; 0x40
 8010534:	2100      	movs	r1, #0
 8010536:	4806      	ldr	r0, [pc, #24]	; (8010550 <USBD_LL_Init+0x94>)
 8010538:	f7f4 ffdc 	bl	80054f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801053c:	2280      	movs	r2, #128	; 0x80
 801053e:	2101      	movs	r1, #1
 8010540:	4803      	ldr	r0, [pc, #12]	; (8010550 <USBD_LL_Init+0x94>)
 8010542:	f7f4 ffd7 	bl	80054f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010546:	2300      	movs	r3, #0
}
 8010548:	4618      	mov	r0, r3
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	200072b8 	.word	0x200072b8

08010554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801055c:	2300      	movs	r3, #0
 801055e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010560:	2300      	movs	r3, #0
 8010562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801056a:	4618      	mov	r0, r3
 801056c:	f7f3 fea9 	bl	80042c2 <HAL_PCD_Start>
 8010570:	4603      	mov	r3, r0
 8010572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010574:	7bfb      	ldrb	r3, [r7, #15]
 8010576:	4618      	mov	r0, r3
 8010578:	f000 f97e 	bl	8010878 <USBD_Get_USB_Status>
 801057c:	4603      	mov	r3, r0
 801057e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010580:	7bbb      	ldrb	r3, [r7, #14]
}
 8010582:	4618      	mov	r0, r3
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b084      	sub	sp, #16
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
 8010592:	4608      	mov	r0, r1
 8010594:	4611      	mov	r1, r2
 8010596:	461a      	mov	r2, r3
 8010598:	4603      	mov	r3, r0
 801059a:	70fb      	strb	r3, [r7, #3]
 801059c:	460b      	mov	r3, r1
 801059e:	70bb      	strb	r3, [r7, #2]
 80105a0:	4613      	mov	r3, r2
 80105a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105a4:	2300      	movs	r3, #0
 80105a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105a8:	2300      	movs	r3, #0
 80105aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80105b2:	78bb      	ldrb	r3, [r7, #2]
 80105b4:	883a      	ldrh	r2, [r7, #0]
 80105b6:	78f9      	ldrb	r1, [r7, #3]
 80105b8:	f7f4 fb96 	bl	8004ce8 <HAL_PCD_EP_Open>
 80105bc:	4603      	mov	r3, r0
 80105be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
 80105c2:	4618      	mov	r0, r3
 80105c4:	f000 f958 	bl	8010878 <USBD_Get_USB_Status>
 80105c8:	4603      	mov	r3, r0
 80105ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b084      	sub	sp, #16
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	460b      	mov	r3, r1
 80105e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e2:	2300      	movs	r3, #0
 80105e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105e6:	2300      	movs	r3, #0
 80105e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80105f0:	78fa      	ldrb	r2, [r7, #3]
 80105f2:	4611      	mov	r1, r2
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7f4 fbdf 	bl	8004db8 <HAL_PCD_EP_Close>
 80105fa:	4603      	mov	r3, r0
 80105fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105fe:	7bfb      	ldrb	r3, [r7, #15]
 8010600:	4618      	mov	r0, r3
 8010602:	f000 f939 	bl	8010878 <USBD_Get_USB_Status>
 8010606:	4603      	mov	r3, r0
 8010608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801060a:	7bbb      	ldrb	r3, [r7, #14]
}
 801060c:	4618      	mov	r0, r3
 801060e:	3710      	adds	r7, #16
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	460b      	mov	r3, r1
 801061e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010620:	2300      	movs	r3, #0
 8010622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010624:	2300      	movs	r3, #0
 8010626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801062e:	78fa      	ldrb	r2, [r7, #3]
 8010630:	4611      	mov	r1, r2
 8010632:	4618      	mov	r0, r3
 8010634:	f7f4 fcb7 	bl	8004fa6 <HAL_PCD_EP_SetStall>
 8010638:	4603      	mov	r3, r0
 801063a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801063c:	7bfb      	ldrb	r3, [r7, #15]
 801063e:	4618      	mov	r0, r3
 8010640:	f000 f91a 	bl	8010878 <USBD_Get_USB_Status>
 8010644:	4603      	mov	r3, r0
 8010646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010648:	7bbb      	ldrb	r3, [r7, #14]
}
 801064a:	4618      	mov	r0, r3
 801064c:	3710      	adds	r7, #16
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b084      	sub	sp, #16
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	460b      	mov	r3, r1
 801065c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801065e:	2300      	movs	r3, #0
 8010660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010662:	2300      	movs	r3, #0
 8010664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801066c:	78fa      	ldrb	r2, [r7, #3]
 801066e:	4611      	mov	r1, r2
 8010670:	4618      	mov	r0, r3
 8010672:	f7f4 fcfc 	bl	800506e <HAL_PCD_EP_ClrStall>
 8010676:	4603      	mov	r3, r0
 8010678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801067a:	7bfb      	ldrb	r3, [r7, #15]
 801067c:	4618      	mov	r0, r3
 801067e:	f000 f8fb 	bl	8010878 <USBD_Get_USB_Status>
 8010682:	4603      	mov	r3, r0
 8010684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010686:	7bbb      	ldrb	r3, [r7, #14]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3710      	adds	r7, #16
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010690:	b480      	push	{r7}
 8010692:	b085      	sub	sp, #20
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	460b      	mov	r3, r1
 801069a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80106a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	da0b      	bge.n	80106c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80106ac:	78fb      	ldrb	r3, [r7, #3]
 80106ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80106b2:	68f9      	ldr	r1, [r7, #12]
 80106b4:	4613      	mov	r3, r2
 80106b6:	00db      	lsls	r3, r3, #3
 80106b8:	4413      	add	r3, r2
 80106ba:	009b      	lsls	r3, r3, #2
 80106bc:	440b      	add	r3, r1
 80106be:	333e      	adds	r3, #62	; 0x3e
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	e00b      	b.n	80106dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80106c4:	78fb      	ldrb	r3, [r7, #3]
 80106c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80106ca:	68f9      	ldr	r1, [r7, #12]
 80106cc:	4613      	mov	r3, r2
 80106ce:	00db      	lsls	r3, r3, #3
 80106d0:	4413      	add	r3, r2
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	440b      	add	r3, r1
 80106d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80106da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3714      	adds	r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	460b      	mov	r3, r1
 80106f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106f4:	2300      	movs	r3, #0
 80106f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106f8:	2300      	movs	r3, #0
 80106fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010702:	78fa      	ldrb	r2, [r7, #3]
 8010704:	4611      	mov	r1, r2
 8010706:	4618      	mov	r0, r3
 8010708:	f7f4 fac9 	bl	8004c9e <HAL_PCD_SetAddress>
 801070c:	4603      	mov	r3, r0
 801070e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010710:	7bfb      	ldrb	r3, [r7, #15]
 8010712:	4618      	mov	r0, r3
 8010714:	f000 f8b0 	bl	8010878 <USBD_Get_USB_Status>
 8010718:	4603      	mov	r3, r0
 801071a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801071c:	7bbb      	ldrb	r3, [r7, #14]
}
 801071e:	4618      	mov	r0, r3
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010726:	b580      	push	{r7, lr}
 8010728:	b086      	sub	sp, #24
 801072a:	af00      	add	r7, sp, #0
 801072c:	60f8      	str	r0, [r7, #12]
 801072e:	607a      	str	r2, [r7, #4]
 8010730:	603b      	str	r3, [r7, #0]
 8010732:	460b      	mov	r3, r1
 8010734:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010736:	2300      	movs	r3, #0
 8010738:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801073a:	2300      	movs	r3, #0
 801073c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010744:	7af9      	ldrb	r1, [r7, #11]
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	f7f4 fbe2 	bl	8004f12 <HAL_PCD_EP_Transmit>
 801074e:	4603      	mov	r3, r0
 8010750:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010752:	7dfb      	ldrb	r3, [r7, #23]
 8010754:	4618      	mov	r0, r3
 8010756:	f000 f88f 	bl	8010878 <USBD_Get_USB_Status>
 801075a:	4603      	mov	r3, r0
 801075c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801075e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010760:	4618      	mov	r0, r3
 8010762:	3718      	adds	r7, #24
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b086      	sub	sp, #24
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	607a      	str	r2, [r7, #4]
 8010772:	603b      	str	r3, [r7, #0]
 8010774:	460b      	mov	r3, r1
 8010776:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010778:	2300      	movs	r3, #0
 801077a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801077c:	2300      	movs	r3, #0
 801077e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010786:	7af9      	ldrb	r1, [r7, #11]
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	687a      	ldr	r2, [r7, #4]
 801078c:	f7f4 fb5e 	bl	8004e4c <HAL_PCD_EP_Receive>
 8010790:	4603      	mov	r3, r0
 8010792:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010794:	7dfb      	ldrb	r3, [r7, #23]
 8010796:	4618      	mov	r0, r3
 8010798:	f000 f86e 	bl	8010878 <USBD_Get_USB_Status>
 801079c:	4603      	mov	r3, r0
 801079e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80107a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3718      	adds	r7, #24
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b082      	sub	sp, #8
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
 80107b2:	460b      	mov	r3, r1
 80107b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107bc:	78fa      	ldrb	r2, [r7, #3]
 80107be:	4611      	mov	r1, r2
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7f4 fb8e 	bl	8004ee2 <HAL_PCD_EP_GetRxCount>
 80107c6:	4603      	mov	r3, r0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	460b      	mov	r3, r1
 80107da:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80107dc:	78fb      	ldrb	r3, [r7, #3]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d002      	beq.n	80107e8 <HAL_PCDEx_LPM_Callback+0x18>
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d01f      	beq.n	8010826 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80107e6:	e03b      	b.n	8010860 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a1b      	ldr	r3, [r3, #32]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d007      	beq.n	8010800 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80107f0:	f000 f83c 	bl	801086c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80107f4:	4b1c      	ldr	r3, [pc, #112]	; (8010868 <HAL_PCDEx_LPM_Callback+0x98>)
 80107f6:	691b      	ldr	r3, [r3, #16]
 80107f8:	4a1b      	ldr	r2, [pc, #108]	; (8010868 <HAL_PCDEx_LPM_Callback+0x98>)
 80107fa:	f023 0306 	bic.w	r3, r3, #6
 80107fe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	6812      	ldr	r2, [r2, #0]
 801080e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010812:	f023 0301 	bic.w	r3, r3, #1
 8010816:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801081e:	4618      	mov	r0, r3
 8010820:	f7fb f97b 	bl	800bb1a <USBD_LL_Resume>
    break;
 8010824:	e01c      	b.n	8010860 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	6812      	ldr	r2, [r2, #0]
 8010834:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010838:	f043 0301 	orr.w	r3, r3, #1
 801083c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010844:	4618      	mov	r0, r3
 8010846:	f7fb f952 	bl	800baee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6a1b      	ldr	r3, [r3, #32]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d005      	beq.n	801085e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010852:	4b05      	ldr	r3, [pc, #20]	; (8010868 <HAL_PCDEx_LPM_Callback+0x98>)
 8010854:	691b      	ldr	r3, [r3, #16]
 8010856:	4a04      	ldr	r2, [pc, #16]	; (8010868 <HAL_PCDEx_LPM_Callback+0x98>)
 8010858:	f043 0306 	orr.w	r3, r3, #6
 801085c:	6113      	str	r3, [r2, #16]
    break;
 801085e:	bf00      	nop
}
 8010860:	bf00      	nop
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	e000ed00 	.word	0xe000ed00

0801086c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010870:	f7f0 f988 	bl	8000b84 <SystemClock_Config>
}
 8010874:	bf00      	nop
 8010876:	bd80      	pop	{r7, pc}

08010878 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010882:	2300      	movs	r3, #0
 8010884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010886:	79fb      	ldrb	r3, [r7, #7]
 8010888:	2b03      	cmp	r3, #3
 801088a:	d817      	bhi.n	80108bc <USBD_Get_USB_Status+0x44>
 801088c:	a201      	add	r2, pc, #4	; (adr r2, 8010894 <USBD_Get_USB_Status+0x1c>)
 801088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010892:	bf00      	nop
 8010894:	080108a5 	.word	0x080108a5
 8010898:	080108ab 	.word	0x080108ab
 801089c:	080108b1 	.word	0x080108b1
 80108a0:	080108b7 	.word	0x080108b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80108a4:	2300      	movs	r3, #0
 80108a6:	73fb      	strb	r3, [r7, #15]
    break;
 80108a8:	e00b      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108aa:	2303      	movs	r3, #3
 80108ac:	73fb      	strb	r3, [r7, #15]
    break;
 80108ae:	e008      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108b0:	2301      	movs	r3, #1
 80108b2:	73fb      	strb	r3, [r7, #15]
    break;
 80108b4:	e005      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108b6:	2303      	movs	r3, #3
 80108b8:	73fb      	strb	r3, [r7, #15]
    break;
 80108ba:	e002      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80108bc:	2303      	movs	r3, #3
 80108be:	73fb      	strb	r3, [r7, #15]
    break;
 80108c0:	bf00      	nop
  }
  return usb_status;
 80108c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <malloc>:
 80108d0:	4b02      	ldr	r3, [pc, #8]	; (80108dc <malloc+0xc>)
 80108d2:	4601      	mov	r1, r0
 80108d4:	6818      	ldr	r0, [r3, #0]
 80108d6:	f000 b82b 	b.w	8010930 <_malloc_r>
 80108da:	bf00      	nop
 80108dc:	20000164 	.word	0x20000164

080108e0 <free>:
 80108e0:	4b02      	ldr	r3, [pc, #8]	; (80108ec <free+0xc>)
 80108e2:	4601      	mov	r1, r0
 80108e4:	6818      	ldr	r0, [r3, #0]
 80108e6:	f000 baf5 	b.w	8010ed4 <_free_r>
 80108ea:	bf00      	nop
 80108ec:	20000164 	.word	0x20000164

080108f0 <sbrk_aligned>:
 80108f0:	b570      	push	{r4, r5, r6, lr}
 80108f2:	4e0e      	ldr	r6, [pc, #56]	; (801092c <sbrk_aligned+0x3c>)
 80108f4:	460c      	mov	r4, r1
 80108f6:	6831      	ldr	r1, [r6, #0]
 80108f8:	4605      	mov	r5, r0
 80108fa:	b911      	cbnz	r1, 8010902 <sbrk_aligned+0x12>
 80108fc:	f000 faac 	bl	8010e58 <_sbrk_r>
 8010900:	6030      	str	r0, [r6, #0]
 8010902:	4621      	mov	r1, r4
 8010904:	4628      	mov	r0, r5
 8010906:	f000 faa7 	bl	8010e58 <_sbrk_r>
 801090a:	1c43      	adds	r3, r0, #1
 801090c:	d00a      	beq.n	8010924 <sbrk_aligned+0x34>
 801090e:	1cc4      	adds	r4, r0, #3
 8010910:	f024 0403 	bic.w	r4, r4, #3
 8010914:	42a0      	cmp	r0, r4
 8010916:	d007      	beq.n	8010928 <sbrk_aligned+0x38>
 8010918:	1a21      	subs	r1, r4, r0
 801091a:	4628      	mov	r0, r5
 801091c:	f000 fa9c 	bl	8010e58 <_sbrk_r>
 8010920:	3001      	adds	r0, #1
 8010922:	d101      	bne.n	8010928 <sbrk_aligned+0x38>
 8010924:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010928:	4620      	mov	r0, r4
 801092a:	bd70      	pop	{r4, r5, r6, pc}
 801092c:	200077c4 	.word	0x200077c4

08010930 <_malloc_r>:
 8010930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010934:	1ccd      	adds	r5, r1, #3
 8010936:	f025 0503 	bic.w	r5, r5, #3
 801093a:	3508      	adds	r5, #8
 801093c:	2d0c      	cmp	r5, #12
 801093e:	bf38      	it	cc
 8010940:	250c      	movcc	r5, #12
 8010942:	2d00      	cmp	r5, #0
 8010944:	4607      	mov	r7, r0
 8010946:	db01      	blt.n	801094c <_malloc_r+0x1c>
 8010948:	42a9      	cmp	r1, r5
 801094a:	d905      	bls.n	8010958 <_malloc_r+0x28>
 801094c:	230c      	movs	r3, #12
 801094e:	603b      	str	r3, [r7, #0]
 8010950:	2600      	movs	r6, #0
 8010952:	4630      	mov	r0, r6
 8010954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010958:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010a2c <_malloc_r+0xfc>
 801095c:	f000 f89c 	bl	8010a98 <__malloc_lock>
 8010960:	f8d8 3000 	ldr.w	r3, [r8]
 8010964:	461c      	mov	r4, r3
 8010966:	bb5c      	cbnz	r4, 80109c0 <_malloc_r+0x90>
 8010968:	4629      	mov	r1, r5
 801096a:	4638      	mov	r0, r7
 801096c:	f7ff ffc0 	bl	80108f0 <sbrk_aligned>
 8010970:	1c43      	adds	r3, r0, #1
 8010972:	4604      	mov	r4, r0
 8010974:	d155      	bne.n	8010a22 <_malloc_r+0xf2>
 8010976:	f8d8 4000 	ldr.w	r4, [r8]
 801097a:	4626      	mov	r6, r4
 801097c:	2e00      	cmp	r6, #0
 801097e:	d145      	bne.n	8010a0c <_malloc_r+0xdc>
 8010980:	2c00      	cmp	r4, #0
 8010982:	d048      	beq.n	8010a16 <_malloc_r+0xe6>
 8010984:	6823      	ldr	r3, [r4, #0]
 8010986:	4631      	mov	r1, r6
 8010988:	4638      	mov	r0, r7
 801098a:	eb04 0903 	add.w	r9, r4, r3
 801098e:	f000 fa63 	bl	8010e58 <_sbrk_r>
 8010992:	4581      	cmp	r9, r0
 8010994:	d13f      	bne.n	8010a16 <_malloc_r+0xe6>
 8010996:	6821      	ldr	r1, [r4, #0]
 8010998:	1a6d      	subs	r5, r5, r1
 801099a:	4629      	mov	r1, r5
 801099c:	4638      	mov	r0, r7
 801099e:	f7ff ffa7 	bl	80108f0 <sbrk_aligned>
 80109a2:	3001      	adds	r0, #1
 80109a4:	d037      	beq.n	8010a16 <_malloc_r+0xe6>
 80109a6:	6823      	ldr	r3, [r4, #0]
 80109a8:	442b      	add	r3, r5
 80109aa:	6023      	str	r3, [r4, #0]
 80109ac:	f8d8 3000 	ldr.w	r3, [r8]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d038      	beq.n	8010a26 <_malloc_r+0xf6>
 80109b4:	685a      	ldr	r2, [r3, #4]
 80109b6:	42a2      	cmp	r2, r4
 80109b8:	d12b      	bne.n	8010a12 <_malloc_r+0xe2>
 80109ba:	2200      	movs	r2, #0
 80109bc:	605a      	str	r2, [r3, #4]
 80109be:	e00f      	b.n	80109e0 <_malloc_r+0xb0>
 80109c0:	6822      	ldr	r2, [r4, #0]
 80109c2:	1b52      	subs	r2, r2, r5
 80109c4:	d41f      	bmi.n	8010a06 <_malloc_r+0xd6>
 80109c6:	2a0b      	cmp	r2, #11
 80109c8:	d917      	bls.n	80109fa <_malloc_r+0xca>
 80109ca:	1961      	adds	r1, r4, r5
 80109cc:	42a3      	cmp	r3, r4
 80109ce:	6025      	str	r5, [r4, #0]
 80109d0:	bf18      	it	ne
 80109d2:	6059      	strne	r1, [r3, #4]
 80109d4:	6863      	ldr	r3, [r4, #4]
 80109d6:	bf08      	it	eq
 80109d8:	f8c8 1000 	streq.w	r1, [r8]
 80109dc:	5162      	str	r2, [r4, r5]
 80109de:	604b      	str	r3, [r1, #4]
 80109e0:	4638      	mov	r0, r7
 80109e2:	f104 060b 	add.w	r6, r4, #11
 80109e6:	f000 f85d 	bl	8010aa4 <__malloc_unlock>
 80109ea:	f026 0607 	bic.w	r6, r6, #7
 80109ee:	1d23      	adds	r3, r4, #4
 80109f0:	1af2      	subs	r2, r6, r3
 80109f2:	d0ae      	beq.n	8010952 <_malloc_r+0x22>
 80109f4:	1b9b      	subs	r3, r3, r6
 80109f6:	50a3      	str	r3, [r4, r2]
 80109f8:	e7ab      	b.n	8010952 <_malloc_r+0x22>
 80109fa:	42a3      	cmp	r3, r4
 80109fc:	6862      	ldr	r2, [r4, #4]
 80109fe:	d1dd      	bne.n	80109bc <_malloc_r+0x8c>
 8010a00:	f8c8 2000 	str.w	r2, [r8]
 8010a04:	e7ec      	b.n	80109e0 <_malloc_r+0xb0>
 8010a06:	4623      	mov	r3, r4
 8010a08:	6864      	ldr	r4, [r4, #4]
 8010a0a:	e7ac      	b.n	8010966 <_malloc_r+0x36>
 8010a0c:	4634      	mov	r4, r6
 8010a0e:	6876      	ldr	r6, [r6, #4]
 8010a10:	e7b4      	b.n	801097c <_malloc_r+0x4c>
 8010a12:	4613      	mov	r3, r2
 8010a14:	e7cc      	b.n	80109b0 <_malloc_r+0x80>
 8010a16:	230c      	movs	r3, #12
 8010a18:	603b      	str	r3, [r7, #0]
 8010a1a:	4638      	mov	r0, r7
 8010a1c:	f000 f842 	bl	8010aa4 <__malloc_unlock>
 8010a20:	e797      	b.n	8010952 <_malloc_r+0x22>
 8010a22:	6025      	str	r5, [r4, #0]
 8010a24:	e7dc      	b.n	80109e0 <_malloc_r+0xb0>
 8010a26:	605b      	str	r3, [r3, #4]
 8010a28:	deff      	udf	#255	; 0xff
 8010a2a:	bf00      	nop
 8010a2c:	200077c0 	.word	0x200077c0

08010a30 <sniprintf>:
 8010a30:	b40c      	push	{r2, r3}
 8010a32:	b530      	push	{r4, r5, lr}
 8010a34:	4b17      	ldr	r3, [pc, #92]	; (8010a94 <sniprintf+0x64>)
 8010a36:	1e0c      	subs	r4, r1, #0
 8010a38:	681d      	ldr	r5, [r3, #0]
 8010a3a:	b09d      	sub	sp, #116	; 0x74
 8010a3c:	da08      	bge.n	8010a50 <sniprintf+0x20>
 8010a3e:	238b      	movs	r3, #139	; 0x8b
 8010a40:	602b      	str	r3, [r5, #0]
 8010a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a46:	b01d      	add	sp, #116	; 0x74
 8010a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a4c:	b002      	add	sp, #8
 8010a4e:	4770      	bx	lr
 8010a50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010a54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010a58:	bf14      	ite	ne
 8010a5a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010a5e:	4623      	moveq	r3, r4
 8010a60:	9304      	str	r3, [sp, #16]
 8010a62:	9307      	str	r3, [sp, #28]
 8010a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a68:	9002      	str	r0, [sp, #8]
 8010a6a:	9006      	str	r0, [sp, #24]
 8010a6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010a72:	ab21      	add	r3, sp, #132	; 0x84
 8010a74:	a902      	add	r1, sp, #8
 8010a76:	4628      	mov	r0, r5
 8010a78:	9301      	str	r3, [sp, #4]
 8010a7a:	f000 fad1 	bl	8011020 <_svfiprintf_r>
 8010a7e:	1c43      	adds	r3, r0, #1
 8010a80:	bfbc      	itt	lt
 8010a82:	238b      	movlt	r3, #139	; 0x8b
 8010a84:	602b      	strlt	r3, [r5, #0]
 8010a86:	2c00      	cmp	r4, #0
 8010a88:	d0dd      	beq.n	8010a46 <sniprintf+0x16>
 8010a8a:	9b02      	ldr	r3, [sp, #8]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	701a      	strb	r2, [r3, #0]
 8010a90:	e7d9      	b.n	8010a46 <sniprintf+0x16>
 8010a92:	bf00      	nop
 8010a94:	20000164 	.word	0x20000164

08010a98 <__malloc_lock>:
 8010a98:	4801      	ldr	r0, [pc, #4]	; (8010aa0 <__malloc_lock+0x8>)
 8010a9a:	f000 ba18 	b.w	8010ece <__retarget_lock_acquire_recursive>
 8010a9e:	bf00      	nop
 8010aa0:	20007904 	.word	0x20007904

08010aa4 <__malloc_unlock>:
 8010aa4:	4801      	ldr	r0, [pc, #4]	; (8010aac <__malloc_unlock+0x8>)
 8010aa6:	f000 ba13 	b.w	8010ed0 <__retarget_lock_release_recursive>
 8010aaa:	bf00      	nop
 8010aac:	20007904 	.word	0x20007904

08010ab0 <std>:
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	b510      	push	{r4, lr}
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8010aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010abe:	6083      	str	r3, [r0, #8]
 8010ac0:	8181      	strh	r1, [r0, #12]
 8010ac2:	6643      	str	r3, [r0, #100]	; 0x64
 8010ac4:	81c2      	strh	r2, [r0, #14]
 8010ac6:	6183      	str	r3, [r0, #24]
 8010ac8:	4619      	mov	r1, r3
 8010aca:	2208      	movs	r2, #8
 8010acc:	305c      	adds	r0, #92	; 0x5c
 8010ace:	f000 f9ba 	bl	8010e46 <memset>
 8010ad2:	4b0d      	ldr	r3, [pc, #52]	; (8010b08 <std+0x58>)
 8010ad4:	6263      	str	r3, [r4, #36]	; 0x24
 8010ad6:	4b0d      	ldr	r3, [pc, #52]	; (8010b0c <std+0x5c>)
 8010ad8:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ada:	4b0d      	ldr	r3, [pc, #52]	; (8010b10 <std+0x60>)
 8010adc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ade:	4b0d      	ldr	r3, [pc, #52]	; (8010b14 <std+0x64>)
 8010ae0:	6323      	str	r3, [r4, #48]	; 0x30
 8010ae2:	4b0d      	ldr	r3, [pc, #52]	; (8010b18 <std+0x68>)
 8010ae4:	6224      	str	r4, [r4, #32]
 8010ae6:	429c      	cmp	r4, r3
 8010ae8:	d006      	beq.n	8010af8 <std+0x48>
 8010aea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010aee:	4294      	cmp	r4, r2
 8010af0:	d002      	beq.n	8010af8 <std+0x48>
 8010af2:	33d0      	adds	r3, #208	; 0xd0
 8010af4:	429c      	cmp	r4, r3
 8010af6:	d105      	bne.n	8010b04 <std+0x54>
 8010af8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b00:	f000 b9e4 	b.w	8010ecc <__retarget_lock_init_recursive>
 8010b04:	bd10      	pop	{r4, pc}
 8010b06:	bf00      	nop
 8010b08:	08011921 	.word	0x08011921
 8010b0c:	08011943 	.word	0x08011943
 8010b10:	0801197b 	.word	0x0801197b
 8010b14:	0801199f 	.word	0x0801199f
 8010b18:	200077c8 	.word	0x200077c8

08010b1c <stdio_exit_handler>:
 8010b1c:	4a02      	ldr	r2, [pc, #8]	; (8010b28 <stdio_exit_handler+0xc>)
 8010b1e:	4903      	ldr	r1, [pc, #12]	; (8010b2c <stdio_exit_handler+0x10>)
 8010b20:	4803      	ldr	r0, [pc, #12]	; (8010b30 <stdio_exit_handler+0x14>)
 8010b22:	f000 b8f5 	b.w	8010d10 <_fwalk_sglue>
 8010b26:	bf00      	nop
 8010b28:	2000010c 	.word	0x2000010c
 8010b2c:	080118d1 	.word	0x080118d1
 8010b30:	20000118 	.word	0x20000118

08010b34 <cleanup_stdio>:
 8010b34:	6841      	ldr	r1, [r0, #4]
 8010b36:	4b0c      	ldr	r3, [pc, #48]	; (8010b68 <cleanup_stdio+0x34>)
 8010b38:	4299      	cmp	r1, r3
 8010b3a:	b510      	push	{r4, lr}
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	d001      	beq.n	8010b44 <cleanup_stdio+0x10>
 8010b40:	f000 fec6 	bl	80118d0 <_fflush_r>
 8010b44:	68a1      	ldr	r1, [r4, #8]
 8010b46:	4b09      	ldr	r3, [pc, #36]	; (8010b6c <cleanup_stdio+0x38>)
 8010b48:	4299      	cmp	r1, r3
 8010b4a:	d002      	beq.n	8010b52 <cleanup_stdio+0x1e>
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f000 febf 	bl	80118d0 <_fflush_r>
 8010b52:	68e1      	ldr	r1, [r4, #12]
 8010b54:	4b06      	ldr	r3, [pc, #24]	; (8010b70 <cleanup_stdio+0x3c>)
 8010b56:	4299      	cmp	r1, r3
 8010b58:	d004      	beq.n	8010b64 <cleanup_stdio+0x30>
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b60:	f000 beb6 	b.w	80118d0 <_fflush_r>
 8010b64:	bd10      	pop	{r4, pc}
 8010b66:	bf00      	nop
 8010b68:	200077c8 	.word	0x200077c8
 8010b6c:	20007830 	.word	0x20007830
 8010b70:	20007898 	.word	0x20007898

08010b74 <global_stdio_init.part.0>:
 8010b74:	b510      	push	{r4, lr}
 8010b76:	4b0b      	ldr	r3, [pc, #44]	; (8010ba4 <global_stdio_init.part.0+0x30>)
 8010b78:	4c0b      	ldr	r4, [pc, #44]	; (8010ba8 <global_stdio_init.part.0+0x34>)
 8010b7a:	4a0c      	ldr	r2, [pc, #48]	; (8010bac <global_stdio_init.part.0+0x38>)
 8010b7c:	601a      	str	r2, [r3, #0]
 8010b7e:	4620      	mov	r0, r4
 8010b80:	2200      	movs	r2, #0
 8010b82:	2104      	movs	r1, #4
 8010b84:	f7ff ff94 	bl	8010ab0 <std>
 8010b88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	2109      	movs	r1, #9
 8010b90:	f7ff ff8e 	bl	8010ab0 <std>
 8010b94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010b98:	2202      	movs	r2, #2
 8010b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b9e:	2112      	movs	r1, #18
 8010ba0:	f7ff bf86 	b.w	8010ab0 <std>
 8010ba4:	20007900 	.word	0x20007900
 8010ba8:	200077c8 	.word	0x200077c8
 8010bac:	08010b1d 	.word	0x08010b1d

08010bb0 <__sfp_lock_acquire>:
 8010bb0:	4801      	ldr	r0, [pc, #4]	; (8010bb8 <__sfp_lock_acquire+0x8>)
 8010bb2:	f000 b98c 	b.w	8010ece <__retarget_lock_acquire_recursive>
 8010bb6:	bf00      	nop
 8010bb8:	20007905 	.word	0x20007905

08010bbc <__sfp_lock_release>:
 8010bbc:	4801      	ldr	r0, [pc, #4]	; (8010bc4 <__sfp_lock_release+0x8>)
 8010bbe:	f000 b987 	b.w	8010ed0 <__retarget_lock_release_recursive>
 8010bc2:	bf00      	nop
 8010bc4:	20007905 	.word	0x20007905

08010bc8 <__sinit>:
 8010bc8:	b510      	push	{r4, lr}
 8010bca:	4604      	mov	r4, r0
 8010bcc:	f7ff fff0 	bl	8010bb0 <__sfp_lock_acquire>
 8010bd0:	6a23      	ldr	r3, [r4, #32]
 8010bd2:	b11b      	cbz	r3, 8010bdc <__sinit+0x14>
 8010bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bd8:	f7ff bff0 	b.w	8010bbc <__sfp_lock_release>
 8010bdc:	4b04      	ldr	r3, [pc, #16]	; (8010bf0 <__sinit+0x28>)
 8010bde:	6223      	str	r3, [r4, #32]
 8010be0:	4b04      	ldr	r3, [pc, #16]	; (8010bf4 <__sinit+0x2c>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d1f5      	bne.n	8010bd4 <__sinit+0xc>
 8010be8:	f7ff ffc4 	bl	8010b74 <global_stdio_init.part.0>
 8010bec:	e7f2      	b.n	8010bd4 <__sinit+0xc>
 8010bee:	bf00      	nop
 8010bf0:	08010b35 	.word	0x08010b35
 8010bf4:	20007900 	.word	0x20007900

08010bf8 <_strtol_l.constprop.0>:
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bfe:	d001      	beq.n	8010c04 <_strtol_l.constprop.0+0xc>
 8010c00:	2b24      	cmp	r3, #36	; 0x24
 8010c02:	d906      	bls.n	8010c12 <_strtol_l.constprop.0+0x1a>
 8010c04:	f000 f938 	bl	8010e78 <__errno>
 8010c08:	2316      	movs	r3, #22
 8010c0a:	6003      	str	r3, [r0, #0]
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010cf8 <_strtol_l.constprop.0+0x100>
 8010c16:	460d      	mov	r5, r1
 8010c18:	462e      	mov	r6, r5
 8010c1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c1e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010c22:	f017 0708 	ands.w	r7, r7, #8
 8010c26:	d1f7      	bne.n	8010c18 <_strtol_l.constprop.0+0x20>
 8010c28:	2c2d      	cmp	r4, #45	; 0x2d
 8010c2a:	d132      	bne.n	8010c92 <_strtol_l.constprop.0+0x9a>
 8010c2c:	782c      	ldrb	r4, [r5, #0]
 8010c2e:	2701      	movs	r7, #1
 8010c30:	1cb5      	adds	r5, r6, #2
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d05b      	beq.n	8010cee <_strtol_l.constprop.0+0xf6>
 8010c36:	2b10      	cmp	r3, #16
 8010c38:	d109      	bne.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010c3a:	2c30      	cmp	r4, #48	; 0x30
 8010c3c:	d107      	bne.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010c3e:	782c      	ldrb	r4, [r5, #0]
 8010c40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010c44:	2c58      	cmp	r4, #88	; 0x58
 8010c46:	d14d      	bne.n	8010ce4 <_strtol_l.constprop.0+0xec>
 8010c48:	786c      	ldrb	r4, [r5, #1]
 8010c4a:	2310      	movs	r3, #16
 8010c4c:	3502      	adds	r5, #2
 8010c4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010c52:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010c56:	f04f 0e00 	mov.w	lr, #0
 8010c5a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010c5e:	4676      	mov	r6, lr
 8010c60:	fb03 8a19 	mls	sl, r3, r9, r8
 8010c64:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010c68:	f1bc 0f09 	cmp.w	ip, #9
 8010c6c:	d816      	bhi.n	8010c9c <_strtol_l.constprop.0+0xa4>
 8010c6e:	4664      	mov	r4, ip
 8010c70:	42a3      	cmp	r3, r4
 8010c72:	dd24      	ble.n	8010cbe <_strtol_l.constprop.0+0xc6>
 8010c74:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8010c78:	d008      	beq.n	8010c8c <_strtol_l.constprop.0+0x94>
 8010c7a:	45b1      	cmp	r9, r6
 8010c7c:	d31c      	bcc.n	8010cb8 <_strtol_l.constprop.0+0xc0>
 8010c7e:	d101      	bne.n	8010c84 <_strtol_l.constprop.0+0x8c>
 8010c80:	45a2      	cmp	sl, r4
 8010c82:	db19      	blt.n	8010cb8 <_strtol_l.constprop.0+0xc0>
 8010c84:	fb06 4603 	mla	r6, r6, r3, r4
 8010c88:	f04f 0e01 	mov.w	lr, #1
 8010c8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c90:	e7e8      	b.n	8010c64 <_strtol_l.constprop.0+0x6c>
 8010c92:	2c2b      	cmp	r4, #43	; 0x2b
 8010c94:	bf04      	itt	eq
 8010c96:	782c      	ldrbeq	r4, [r5, #0]
 8010c98:	1cb5      	addeq	r5, r6, #2
 8010c9a:	e7ca      	b.n	8010c32 <_strtol_l.constprop.0+0x3a>
 8010c9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010ca0:	f1bc 0f19 	cmp.w	ip, #25
 8010ca4:	d801      	bhi.n	8010caa <_strtol_l.constprop.0+0xb2>
 8010ca6:	3c37      	subs	r4, #55	; 0x37
 8010ca8:	e7e2      	b.n	8010c70 <_strtol_l.constprop.0+0x78>
 8010caa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010cae:	f1bc 0f19 	cmp.w	ip, #25
 8010cb2:	d804      	bhi.n	8010cbe <_strtol_l.constprop.0+0xc6>
 8010cb4:	3c57      	subs	r4, #87	; 0x57
 8010cb6:	e7db      	b.n	8010c70 <_strtol_l.constprop.0+0x78>
 8010cb8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8010cbc:	e7e6      	b.n	8010c8c <_strtol_l.constprop.0+0x94>
 8010cbe:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8010cc2:	d105      	bne.n	8010cd0 <_strtol_l.constprop.0+0xd8>
 8010cc4:	2322      	movs	r3, #34	; 0x22
 8010cc6:	6003      	str	r3, [r0, #0]
 8010cc8:	4646      	mov	r6, r8
 8010cca:	b942      	cbnz	r2, 8010cde <_strtol_l.constprop.0+0xe6>
 8010ccc:	4630      	mov	r0, r6
 8010cce:	e79e      	b.n	8010c0e <_strtol_l.constprop.0+0x16>
 8010cd0:	b107      	cbz	r7, 8010cd4 <_strtol_l.constprop.0+0xdc>
 8010cd2:	4276      	negs	r6, r6
 8010cd4:	2a00      	cmp	r2, #0
 8010cd6:	d0f9      	beq.n	8010ccc <_strtol_l.constprop.0+0xd4>
 8010cd8:	f1be 0f00 	cmp.w	lr, #0
 8010cdc:	d000      	beq.n	8010ce0 <_strtol_l.constprop.0+0xe8>
 8010cde:	1e69      	subs	r1, r5, #1
 8010ce0:	6011      	str	r1, [r2, #0]
 8010ce2:	e7f3      	b.n	8010ccc <_strtol_l.constprop.0+0xd4>
 8010ce4:	2430      	movs	r4, #48	; 0x30
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d1b1      	bne.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010cea:	2308      	movs	r3, #8
 8010cec:	e7af      	b.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010cee:	2c30      	cmp	r4, #48	; 0x30
 8010cf0:	d0a5      	beq.n	8010c3e <_strtol_l.constprop.0+0x46>
 8010cf2:	230a      	movs	r3, #10
 8010cf4:	e7ab      	b.n	8010c4e <_strtol_l.constprop.0+0x56>
 8010cf6:	bf00      	nop
 8010cf8:	080125c5 	.word	0x080125c5

08010cfc <strtol>:
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	460a      	mov	r2, r1
 8010d00:	4601      	mov	r1, r0
 8010d02:	4802      	ldr	r0, [pc, #8]	; (8010d0c <strtol+0x10>)
 8010d04:	6800      	ldr	r0, [r0, #0]
 8010d06:	f7ff bf77 	b.w	8010bf8 <_strtol_l.constprop.0>
 8010d0a:	bf00      	nop
 8010d0c:	20000164 	.word	0x20000164

08010d10 <_fwalk_sglue>:
 8010d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d14:	4607      	mov	r7, r0
 8010d16:	4688      	mov	r8, r1
 8010d18:	4614      	mov	r4, r2
 8010d1a:	2600      	movs	r6, #0
 8010d1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d20:	f1b9 0901 	subs.w	r9, r9, #1
 8010d24:	d505      	bpl.n	8010d32 <_fwalk_sglue+0x22>
 8010d26:	6824      	ldr	r4, [r4, #0]
 8010d28:	2c00      	cmp	r4, #0
 8010d2a:	d1f7      	bne.n	8010d1c <_fwalk_sglue+0xc>
 8010d2c:	4630      	mov	r0, r6
 8010d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d32:	89ab      	ldrh	r3, [r5, #12]
 8010d34:	2b01      	cmp	r3, #1
 8010d36:	d907      	bls.n	8010d48 <_fwalk_sglue+0x38>
 8010d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	d003      	beq.n	8010d48 <_fwalk_sglue+0x38>
 8010d40:	4629      	mov	r1, r5
 8010d42:	4638      	mov	r0, r7
 8010d44:	47c0      	blx	r8
 8010d46:	4306      	orrs	r6, r0
 8010d48:	3568      	adds	r5, #104	; 0x68
 8010d4a:	e7e9      	b.n	8010d20 <_fwalk_sglue+0x10>

08010d4c <iprintf>:
 8010d4c:	b40f      	push	{r0, r1, r2, r3}
 8010d4e:	b507      	push	{r0, r1, r2, lr}
 8010d50:	4906      	ldr	r1, [pc, #24]	; (8010d6c <iprintf+0x20>)
 8010d52:	ab04      	add	r3, sp, #16
 8010d54:	6808      	ldr	r0, [r1, #0]
 8010d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d5a:	6881      	ldr	r1, [r0, #8]
 8010d5c:	9301      	str	r3, [sp, #4]
 8010d5e:	f000 fa87 	bl	8011270 <_vfiprintf_r>
 8010d62:	b003      	add	sp, #12
 8010d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d68:	b004      	add	sp, #16
 8010d6a:	4770      	bx	lr
 8010d6c:	20000164 	.word	0x20000164

08010d70 <_puts_r>:
 8010d70:	6a03      	ldr	r3, [r0, #32]
 8010d72:	b570      	push	{r4, r5, r6, lr}
 8010d74:	6884      	ldr	r4, [r0, #8]
 8010d76:	4605      	mov	r5, r0
 8010d78:	460e      	mov	r6, r1
 8010d7a:	b90b      	cbnz	r3, 8010d80 <_puts_r+0x10>
 8010d7c:	f7ff ff24 	bl	8010bc8 <__sinit>
 8010d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d82:	07db      	lsls	r3, r3, #31
 8010d84:	d405      	bmi.n	8010d92 <_puts_r+0x22>
 8010d86:	89a3      	ldrh	r3, [r4, #12]
 8010d88:	0598      	lsls	r0, r3, #22
 8010d8a:	d402      	bmi.n	8010d92 <_puts_r+0x22>
 8010d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d8e:	f000 f89e 	bl	8010ece <__retarget_lock_acquire_recursive>
 8010d92:	89a3      	ldrh	r3, [r4, #12]
 8010d94:	0719      	lsls	r1, r3, #28
 8010d96:	d513      	bpl.n	8010dc0 <_puts_r+0x50>
 8010d98:	6923      	ldr	r3, [r4, #16]
 8010d9a:	b18b      	cbz	r3, 8010dc0 <_puts_r+0x50>
 8010d9c:	3e01      	subs	r6, #1
 8010d9e:	68a3      	ldr	r3, [r4, #8]
 8010da0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010da4:	3b01      	subs	r3, #1
 8010da6:	60a3      	str	r3, [r4, #8]
 8010da8:	b9e9      	cbnz	r1, 8010de6 <_puts_r+0x76>
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	da2e      	bge.n	8010e0c <_puts_r+0x9c>
 8010dae:	4622      	mov	r2, r4
 8010db0:	210a      	movs	r1, #10
 8010db2:	4628      	mov	r0, r5
 8010db4:	f000 fe26 	bl	8011a04 <__swbuf_r>
 8010db8:	3001      	adds	r0, #1
 8010dba:	d007      	beq.n	8010dcc <_puts_r+0x5c>
 8010dbc:	250a      	movs	r5, #10
 8010dbe:	e007      	b.n	8010dd0 <_puts_r+0x60>
 8010dc0:	4621      	mov	r1, r4
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f000 fe5c 	bl	8011a80 <__swsetup_r>
 8010dc8:	2800      	cmp	r0, #0
 8010dca:	d0e7      	beq.n	8010d9c <_puts_r+0x2c>
 8010dcc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dd2:	07da      	lsls	r2, r3, #31
 8010dd4:	d405      	bmi.n	8010de2 <_puts_r+0x72>
 8010dd6:	89a3      	ldrh	r3, [r4, #12]
 8010dd8:	059b      	lsls	r3, r3, #22
 8010dda:	d402      	bmi.n	8010de2 <_puts_r+0x72>
 8010ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dde:	f000 f877 	bl	8010ed0 <__retarget_lock_release_recursive>
 8010de2:	4628      	mov	r0, r5
 8010de4:	bd70      	pop	{r4, r5, r6, pc}
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	da04      	bge.n	8010df4 <_puts_r+0x84>
 8010dea:	69a2      	ldr	r2, [r4, #24]
 8010dec:	429a      	cmp	r2, r3
 8010dee:	dc06      	bgt.n	8010dfe <_puts_r+0x8e>
 8010df0:	290a      	cmp	r1, #10
 8010df2:	d004      	beq.n	8010dfe <_puts_r+0x8e>
 8010df4:	6823      	ldr	r3, [r4, #0]
 8010df6:	1c5a      	adds	r2, r3, #1
 8010df8:	6022      	str	r2, [r4, #0]
 8010dfa:	7019      	strb	r1, [r3, #0]
 8010dfc:	e7cf      	b.n	8010d9e <_puts_r+0x2e>
 8010dfe:	4622      	mov	r2, r4
 8010e00:	4628      	mov	r0, r5
 8010e02:	f000 fdff 	bl	8011a04 <__swbuf_r>
 8010e06:	3001      	adds	r0, #1
 8010e08:	d1c9      	bne.n	8010d9e <_puts_r+0x2e>
 8010e0a:	e7df      	b.n	8010dcc <_puts_r+0x5c>
 8010e0c:	6823      	ldr	r3, [r4, #0]
 8010e0e:	250a      	movs	r5, #10
 8010e10:	1c5a      	adds	r2, r3, #1
 8010e12:	6022      	str	r2, [r4, #0]
 8010e14:	701d      	strb	r5, [r3, #0]
 8010e16:	e7db      	b.n	8010dd0 <_puts_r+0x60>

08010e18 <puts>:
 8010e18:	4b02      	ldr	r3, [pc, #8]	; (8010e24 <puts+0xc>)
 8010e1a:	4601      	mov	r1, r0
 8010e1c:	6818      	ldr	r0, [r3, #0]
 8010e1e:	f7ff bfa7 	b.w	8010d70 <_puts_r>
 8010e22:	bf00      	nop
 8010e24:	20000164 	.word	0x20000164

08010e28 <strcat>:
 8010e28:	b510      	push	{r4, lr}
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	7814      	ldrb	r4, [r2, #0]
 8010e2e:	4613      	mov	r3, r2
 8010e30:	3201      	adds	r2, #1
 8010e32:	2c00      	cmp	r4, #0
 8010e34:	d1fa      	bne.n	8010e2c <strcat+0x4>
 8010e36:	3b01      	subs	r3, #1
 8010e38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e40:	2a00      	cmp	r2, #0
 8010e42:	d1f9      	bne.n	8010e38 <strcat+0x10>
 8010e44:	bd10      	pop	{r4, pc}

08010e46 <memset>:
 8010e46:	4402      	add	r2, r0
 8010e48:	4603      	mov	r3, r0
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d100      	bne.n	8010e50 <memset+0xa>
 8010e4e:	4770      	bx	lr
 8010e50:	f803 1b01 	strb.w	r1, [r3], #1
 8010e54:	e7f9      	b.n	8010e4a <memset+0x4>
	...

08010e58 <_sbrk_r>:
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	4d06      	ldr	r5, [pc, #24]	; (8010e74 <_sbrk_r+0x1c>)
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	4604      	mov	r4, r0
 8010e60:	4608      	mov	r0, r1
 8010e62:	602b      	str	r3, [r5, #0]
 8010e64:	f7f0 fcec 	bl	8001840 <_sbrk>
 8010e68:	1c43      	adds	r3, r0, #1
 8010e6a:	d102      	bne.n	8010e72 <_sbrk_r+0x1a>
 8010e6c:	682b      	ldr	r3, [r5, #0]
 8010e6e:	b103      	cbz	r3, 8010e72 <_sbrk_r+0x1a>
 8010e70:	6023      	str	r3, [r4, #0]
 8010e72:	bd38      	pop	{r3, r4, r5, pc}
 8010e74:	20007908 	.word	0x20007908

08010e78 <__errno>:
 8010e78:	4b01      	ldr	r3, [pc, #4]	; (8010e80 <__errno+0x8>)
 8010e7a:	6818      	ldr	r0, [r3, #0]
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	20000164 	.word	0x20000164

08010e84 <__libc_init_array>:
 8010e84:	b570      	push	{r4, r5, r6, lr}
 8010e86:	4d0d      	ldr	r5, [pc, #52]	; (8010ebc <__libc_init_array+0x38>)
 8010e88:	4c0d      	ldr	r4, [pc, #52]	; (8010ec0 <__libc_init_array+0x3c>)
 8010e8a:	1b64      	subs	r4, r4, r5
 8010e8c:	10a4      	asrs	r4, r4, #2
 8010e8e:	2600      	movs	r6, #0
 8010e90:	42a6      	cmp	r6, r4
 8010e92:	d109      	bne.n	8010ea8 <__libc_init_array+0x24>
 8010e94:	4d0b      	ldr	r5, [pc, #44]	; (8010ec4 <__libc_init_array+0x40>)
 8010e96:	4c0c      	ldr	r4, [pc, #48]	; (8010ec8 <__libc_init_array+0x44>)
 8010e98:	f000 ff44 	bl	8011d24 <_init>
 8010e9c:	1b64      	subs	r4, r4, r5
 8010e9e:	10a4      	asrs	r4, r4, #2
 8010ea0:	2600      	movs	r6, #0
 8010ea2:	42a6      	cmp	r6, r4
 8010ea4:	d105      	bne.n	8010eb2 <__libc_init_array+0x2e>
 8010ea6:	bd70      	pop	{r4, r5, r6, pc}
 8010ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eac:	4798      	blx	r3
 8010eae:	3601      	adds	r6, #1
 8010eb0:	e7ee      	b.n	8010e90 <__libc_init_array+0xc>
 8010eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eb6:	4798      	blx	r3
 8010eb8:	3601      	adds	r6, #1
 8010eba:	e7f2      	b.n	8010ea2 <__libc_init_array+0x1e>
 8010ebc:	08012700 	.word	0x08012700
 8010ec0:	08012700 	.word	0x08012700
 8010ec4:	08012700 	.word	0x08012700
 8010ec8:	08012704 	.word	0x08012704

08010ecc <__retarget_lock_init_recursive>:
 8010ecc:	4770      	bx	lr

08010ece <__retarget_lock_acquire_recursive>:
 8010ece:	4770      	bx	lr

08010ed0 <__retarget_lock_release_recursive>:
 8010ed0:	4770      	bx	lr
	...

08010ed4 <_free_r>:
 8010ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ed6:	2900      	cmp	r1, #0
 8010ed8:	d044      	beq.n	8010f64 <_free_r+0x90>
 8010eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ede:	9001      	str	r0, [sp, #4]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8010ee6:	bfb8      	it	lt
 8010ee8:	18e4      	addlt	r4, r4, r3
 8010eea:	f7ff fdd5 	bl	8010a98 <__malloc_lock>
 8010eee:	4a1e      	ldr	r2, [pc, #120]	; (8010f68 <_free_r+0x94>)
 8010ef0:	9801      	ldr	r0, [sp, #4]
 8010ef2:	6813      	ldr	r3, [r2, #0]
 8010ef4:	b933      	cbnz	r3, 8010f04 <_free_r+0x30>
 8010ef6:	6063      	str	r3, [r4, #4]
 8010ef8:	6014      	str	r4, [r2, #0]
 8010efa:	b003      	add	sp, #12
 8010efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f00:	f7ff bdd0 	b.w	8010aa4 <__malloc_unlock>
 8010f04:	42a3      	cmp	r3, r4
 8010f06:	d908      	bls.n	8010f1a <_free_r+0x46>
 8010f08:	6825      	ldr	r5, [r4, #0]
 8010f0a:	1961      	adds	r1, r4, r5
 8010f0c:	428b      	cmp	r3, r1
 8010f0e:	bf01      	itttt	eq
 8010f10:	6819      	ldreq	r1, [r3, #0]
 8010f12:	685b      	ldreq	r3, [r3, #4]
 8010f14:	1949      	addeq	r1, r1, r5
 8010f16:	6021      	streq	r1, [r4, #0]
 8010f18:	e7ed      	b.n	8010ef6 <_free_r+0x22>
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	b10b      	cbz	r3, 8010f24 <_free_r+0x50>
 8010f20:	42a3      	cmp	r3, r4
 8010f22:	d9fa      	bls.n	8010f1a <_free_r+0x46>
 8010f24:	6811      	ldr	r1, [r2, #0]
 8010f26:	1855      	adds	r5, r2, r1
 8010f28:	42a5      	cmp	r5, r4
 8010f2a:	d10b      	bne.n	8010f44 <_free_r+0x70>
 8010f2c:	6824      	ldr	r4, [r4, #0]
 8010f2e:	4421      	add	r1, r4
 8010f30:	1854      	adds	r4, r2, r1
 8010f32:	42a3      	cmp	r3, r4
 8010f34:	6011      	str	r1, [r2, #0]
 8010f36:	d1e0      	bne.n	8010efa <_free_r+0x26>
 8010f38:	681c      	ldr	r4, [r3, #0]
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	6053      	str	r3, [r2, #4]
 8010f3e:	440c      	add	r4, r1
 8010f40:	6014      	str	r4, [r2, #0]
 8010f42:	e7da      	b.n	8010efa <_free_r+0x26>
 8010f44:	d902      	bls.n	8010f4c <_free_r+0x78>
 8010f46:	230c      	movs	r3, #12
 8010f48:	6003      	str	r3, [r0, #0]
 8010f4a:	e7d6      	b.n	8010efa <_free_r+0x26>
 8010f4c:	6825      	ldr	r5, [r4, #0]
 8010f4e:	1961      	adds	r1, r4, r5
 8010f50:	428b      	cmp	r3, r1
 8010f52:	bf04      	itt	eq
 8010f54:	6819      	ldreq	r1, [r3, #0]
 8010f56:	685b      	ldreq	r3, [r3, #4]
 8010f58:	6063      	str	r3, [r4, #4]
 8010f5a:	bf04      	itt	eq
 8010f5c:	1949      	addeq	r1, r1, r5
 8010f5e:	6021      	streq	r1, [r4, #0]
 8010f60:	6054      	str	r4, [r2, #4]
 8010f62:	e7ca      	b.n	8010efa <_free_r+0x26>
 8010f64:	b003      	add	sp, #12
 8010f66:	bd30      	pop	{r4, r5, pc}
 8010f68:	200077c0 	.word	0x200077c0

08010f6c <__ssputs_r>:
 8010f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f70:	688e      	ldr	r6, [r1, #8]
 8010f72:	461f      	mov	r7, r3
 8010f74:	42be      	cmp	r6, r7
 8010f76:	680b      	ldr	r3, [r1, #0]
 8010f78:	4682      	mov	sl, r0
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	4690      	mov	r8, r2
 8010f7e:	d82c      	bhi.n	8010fda <__ssputs_r+0x6e>
 8010f80:	898a      	ldrh	r2, [r1, #12]
 8010f82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f86:	d026      	beq.n	8010fd6 <__ssputs_r+0x6a>
 8010f88:	6965      	ldr	r5, [r4, #20]
 8010f8a:	6909      	ldr	r1, [r1, #16]
 8010f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f90:	eba3 0901 	sub.w	r9, r3, r1
 8010f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f98:	1c7b      	adds	r3, r7, #1
 8010f9a:	444b      	add	r3, r9
 8010f9c:	106d      	asrs	r5, r5, #1
 8010f9e:	429d      	cmp	r5, r3
 8010fa0:	bf38      	it	cc
 8010fa2:	461d      	movcc	r5, r3
 8010fa4:	0553      	lsls	r3, r2, #21
 8010fa6:	d527      	bpl.n	8010ff8 <__ssputs_r+0x8c>
 8010fa8:	4629      	mov	r1, r5
 8010faa:	f7ff fcc1 	bl	8010930 <_malloc_r>
 8010fae:	4606      	mov	r6, r0
 8010fb0:	b360      	cbz	r0, 801100c <__ssputs_r+0xa0>
 8010fb2:	6921      	ldr	r1, [r4, #16]
 8010fb4:	464a      	mov	r2, r9
 8010fb6:	f000 fe9f 	bl	8011cf8 <memcpy>
 8010fba:	89a3      	ldrh	r3, [r4, #12]
 8010fbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fc4:	81a3      	strh	r3, [r4, #12]
 8010fc6:	6126      	str	r6, [r4, #16]
 8010fc8:	6165      	str	r5, [r4, #20]
 8010fca:	444e      	add	r6, r9
 8010fcc:	eba5 0509 	sub.w	r5, r5, r9
 8010fd0:	6026      	str	r6, [r4, #0]
 8010fd2:	60a5      	str	r5, [r4, #8]
 8010fd4:	463e      	mov	r6, r7
 8010fd6:	42be      	cmp	r6, r7
 8010fd8:	d900      	bls.n	8010fdc <__ssputs_r+0x70>
 8010fda:	463e      	mov	r6, r7
 8010fdc:	6820      	ldr	r0, [r4, #0]
 8010fde:	4632      	mov	r2, r6
 8010fe0:	4641      	mov	r1, r8
 8010fe2:	f000 fe07 	bl	8011bf4 <memmove>
 8010fe6:	68a3      	ldr	r3, [r4, #8]
 8010fe8:	1b9b      	subs	r3, r3, r6
 8010fea:	60a3      	str	r3, [r4, #8]
 8010fec:	6823      	ldr	r3, [r4, #0]
 8010fee:	4433      	add	r3, r6
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ff8:	462a      	mov	r2, r5
 8010ffa:	f000 fcd4 	bl	80119a6 <_realloc_r>
 8010ffe:	4606      	mov	r6, r0
 8011000:	2800      	cmp	r0, #0
 8011002:	d1e0      	bne.n	8010fc6 <__ssputs_r+0x5a>
 8011004:	6921      	ldr	r1, [r4, #16]
 8011006:	4650      	mov	r0, sl
 8011008:	f7ff ff64 	bl	8010ed4 <_free_r>
 801100c:	230c      	movs	r3, #12
 801100e:	f8ca 3000 	str.w	r3, [sl]
 8011012:	89a3      	ldrh	r3, [r4, #12]
 8011014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011018:	81a3      	strh	r3, [r4, #12]
 801101a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801101e:	e7e9      	b.n	8010ff4 <__ssputs_r+0x88>

08011020 <_svfiprintf_r>:
 8011020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011024:	4698      	mov	r8, r3
 8011026:	898b      	ldrh	r3, [r1, #12]
 8011028:	061b      	lsls	r3, r3, #24
 801102a:	b09d      	sub	sp, #116	; 0x74
 801102c:	4607      	mov	r7, r0
 801102e:	460d      	mov	r5, r1
 8011030:	4614      	mov	r4, r2
 8011032:	d50e      	bpl.n	8011052 <_svfiprintf_r+0x32>
 8011034:	690b      	ldr	r3, [r1, #16]
 8011036:	b963      	cbnz	r3, 8011052 <_svfiprintf_r+0x32>
 8011038:	2140      	movs	r1, #64	; 0x40
 801103a:	f7ff fc79 	bl	8010930 <_malloc_r>
 801103e:	6028      	str	r0, [r5, #0]
 8011040:	6128      	str	r0, [r5, #16]
 8011042:	b920      	cbnz	r0, 801104e <_svfiprintf_r+0x2e>
 8011044:	230c      	movs	r3, #12
 8011046:	603b      	str	r3, [r7, #0]
 8011048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801104c:	e0d0      	b.n	80111f0 <_svfiprintf_r+0x1d0>
 801104e:	2340      	movs	r3, #64	; 0x40
 8011050:	616b      	str	r3, [r5, #20]
 8011052:	2300      	movs	r3, #0
 8011054:	9309      	str	r3, [sp, #36]	; 0x24
 8011056:	2320      	movs	r3, #32
 8011058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801105c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011060:	2330      	movs	r3, #48	; 0x30
 8011062:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011208 <_svfiprintf_r+0x1e8>
 8011066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801106a:	f04f 0901 	mov.w	r9, #1
 801106e:	4623      	mov	r3, r4
 8011070:	469a      	mov	sl, r3
 8011072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011076:	b10a      	cbz	r2, 801107c <_svfiprintf_r+0x5c>
 8011078:	2a25      	cmp	r2, #37	; 0x25
 801107a:	d1f9      	bne.n	8011070 <_svfiprintf_r+0x50>
 801107c:	ebba 0b04 	subs.w	fp, sl, r4
 8011080:	d00b      	beq.n	801109a <_svfiprintf_r+0x7a>
 8011082:	465b      	mov	r3, fp
 8011084:	4622      	mov	r2, r4
 8011086:	4629      	mov	r1, r5
 8011088:	4638      	mov	r0, r7
 801108a:	f7ff ff6f 	bl	8010f6c <__ssputs_r>
 801108e:	3001      	adds	r0, #1
 8011090:	f000 80a9 	beq.w	80111e6 <_svfiprintf_r+0x1c6>
 8011094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011096:	445a      	add	r2, fp
 8011098:	9209      	str	r2, [sp, #36]	; 0x24
 801109a:	f89a 3000 	ldrb.w	r3, [sl]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	f000 80a1 	beq.w	80111e6 <_svfiprintf_r+0x1c6>
 80110a4:	2300      	movs	r3, #0
 80110a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110ae:	f10a 0a01 	add.w	sl, sl, #1
 80110b2:	9304      	str	r3, [sp, #16]
 80110b4:	9307      	str	r3, [sp, #28]
 80110b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110ba:	931a      	str	r3, [sp, #104]	; 0x68
 80110bc:	4654      	mov	r4, sl
 80110be:	2205      	movs	r2, #5
 80110c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c4:	4850      	ldr	r0, [pc, #320]	; (8011208 <_svfiprintf_r+0x1e8>)
 80110c6:	f7ef f8bb 	bl	8000240 <memchr>
 80110ca:	9a04      	ldr	r2, [sp, #16]
 80110cc:	b9d8      	cbnz	r0, 8011106 <_svfiprintf_r+0xe6>
 80110ce:	06d0      	lsls	r0, r2, #27
 80110d0:	bf44      	itt	mi
 80110d2:	2320      	movmi	r3, #32
 80110d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110d8:	0711      	lsls	r1, r2, #28
 80110da:	bf44      	itt	mi
 80110dc:	232b      	movmi	r3, #43	; 0x2b
 80110de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110e2:	f89a 3000 	ldrb.w	r3, [sl]
 80110e6:	2b2a      	cmp	r3, #42	; 0x2a
 80110e8:	d015      	beq.n	8011116 <_svfiprintf_r+0xf6>
 80110ea:	9a07      	ldr	r2, [sp, #28]
 80110ec:	4654      	mov	r4, sl
 80110ee:	2000      	movs	r0, #0
 80110f0:	f04f 0c0a 	mov.w	ip, #10
 80110f4:	4621      	mov	r1, r4
 80110f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110fa:	3b30      	subs	r3, #48	; 0x30
 80110fc:	2b09      	cmp	r3, #9
 80110fe:	d94d      	bls.n	801119c <_svfiprintf_r+0x17c>
 8011100:	b1b0      	cbz	r0, 8011130 <_svfiprintf_r+0x110>
 8011102:	9207      	str	r2, [sp, #28]
 8011104:	e014      	b.n	8011130 <_svfiprintf_r+0x110>
 8011106:	eba0 0308 	sub.w	r3, r0, r8
 801110a:	fa09 f303 	lsl.w	r3, r9, r3
 801110e:	4313      	orrs	r3, r2
 8011110:	9304      	str	r3, [sp, #16]
 8011112:	46a2      	mov	sl, r4
 8011114:	e7d2      	b.n	80110bc <_svfiprintf_r+0x9c>
 8011116:	9b03      	ldr	r3, [sp, #12]
 8011118:	1d19      	adds	r1, r3, #4
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	9103      	str	r1, [sp, #12]
 801111e:	2b00      	cmp	r3, #0
 8011120:	bfbb      	ittet	lt
 8011122:	425b      	neglt	r3, r3
 8011124:	f042 0202 	orrlt.w	r2, r2, #2
 8011128:	9307      	strge	r3, [sp, #28]
 801112a:	9307      	strlt	r3, [sp, #28]
 801112c:	bfb8      	it	lt
 801112e:	9204      	strlt	r2, [sp, #16]
 8011130:	7823      	ldrb	r3, [r4, #0]
 8011132:	2b2e      	cmp	r3, #46	; 0x2e
 8011134:	d10c      	bne.n	8011150 <_svfiprintf_r+0x130>
 8011136:	7863      	ldrb	r3, [r4, #1]
 8011138:	2b2a      	cmp	r3, #42	; 0x2a
 801113a:	d134      	bne.n	80111a6 <_svfiprintf_r+0x186>
 801113c:	9b03      	ldr	r3, [sp, #12]
 801113e:	1d1a      	adds	r2, r3, #4
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	9203      	str	r2, [sp, #12]
 8011144:	2b00      	cmp	r3, #0
 8011146:	bfb8      	it	lt
 8011148:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801114c:	3402      	adds	r4, #2
 801114e:	9305      	str	r3, [sp, #20]
 8011150:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011218 <_svfiprintf_r+0x1f8>
 8011154:	7821      	ldrb	r1, [r4, #0]
 8011156:	2203      	movs	r2, #3
 8011158:	4650      	mov	r0, sl
 801115a:	f7ef f871 	bl	8000240 <memchr>
 801115e:	b138      	cbz	r0, 8011170 <_svfiprintf_r+0x150>
 8011160:	9b04      	ldr	r3, [sp, #16]
 8011162:	eba0 000a 	sub.w	r0, r0, sl
 8011166:	2240      	movs	r2, #64	; 0x40
 8011168:	4082      	lsls	r2, r0
 801116a:	4313      	orrs	r3, r2
 801116c:	3401      	adds	r4, #1
 801116e:	9304      	str	r3, [sp, #16]
 8011170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011174:	4825      	ldr	r0, [pc, #148]	; (801120c <_svfiprintf_r+0x1ec>)
 8011176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801117a:	2206      	movs	r2, #6
 801117c:	f7ef f860 	bl	8000240 <memchr>
 8011180:	2800      	cmp	r0, #0
 8011182:	d038      	beq.n	80111f6 <_svfiprintf_r+0x1d6>
 8011184:	4b22      	ldr	r3, [pc, #136]	; (8011210 <_svfiprintf_r+0x1f0>)
 8011186:	bb1b      	cbnz	r3, 80111d0 <_svfiprintf_r+0x1b0>
 8011188:	9b03      	ldr	r3, [sp, #12]
 801118a:	3307      	adds	r3, #7
 801118c:	f023 0307 	bic.w	r3, r3, #7
 8011190:	3308      	adds	r3, #8
 8011192:	9303      	str	r3, [sp, #12]
 8011194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011196:	4433      	add	r3, r6
 8011198:	9309      	str	r3, [sp, #36]	; 0x24
 801119a:	e768      	b.n	801106e <_svfiprintf_r+0x4e>
 801119c:	fb0c 3202 	mla	r2, ip, r2, r3
 80111a0:	460c      	mov	r4, r1
 80111a2:	2001      	movs	r0, #1
 80111a4:	e7a6      	b.n	80110f4 <_svfiprintf_r+0xd4>
 80111a6:	2300      	movs	r3, #0
 80111a8:	3401      	adds	r4, #1
 80111aa:	9305      	str	r3, [sp, #20]
 80111ac:	4619      	mov	r1, r3
 80111ae:	f04f 0c0a 	mov.w	ip, #10
 80111b2:	4620      	mov	r0, r4
 80111b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111b8:	3a30      	subs	r2, #48	; 0x30
 80111ba:	2a09      	cmp	r2, #9
 80111bc:	d903      	bls.n	80111c6 <_svfiprintf_r+0x1a6>
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d0c6      	beq.n	8011150 <_svfiprintf_r+0x130>
 80111c2:	9105      	str	r1, [sp, #20]
 80111c4:	e7c4      	b.n	8011150 <_svfiprintf_r+0x130>
 80111c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80111ca:	4604      	mov	r4, r0
 80111cc:	2301      	movs	r3, #1
 80111ce:	e7f0      	b.n	80111b2 <_svfiprintf_r+0x192>
 80111d0:	ab03      	add	r3, sp, #12
 80111d2:	9300      	str	r3, [sp, #0]
 80111d4:	462a      	mov	r2, r5
 80111d6:	4b0f      	ldr	r3, [pc, #60]	; (8011214 <_svfiprintf_r+0x1f4>)
 80111d8:	a904      	add	r1, sp, #16
 80111da:	4638      	mov	r0, r7
 80111dc:	f3af 8000 	nop.w
 80111e0:	1c42      	adds	r2, r0, #1
 80111e2:	4606      	mov	r6, r0
 80111e4:	d1d6      	bne.n	8011194 <_svfiprintf_r+0x174>
 80111e6:	89ab      	ldrh	r3, [r5, #12]
 80111e8:	065b      	lsls	r3, r3, #25
 80111ea:	f53f af2d 	bmi.w	8011048 <_svfiprintf_r+0x28>
 80111ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111f0:	b01d      	add	sp, #116	; 0x74
 80111f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f6:	ab03      	add	r3, sp, #12
 80111f8:	9300      	str	r3, [sp, #0]
 80111fa:	462a      	mov	r2, r5
 80111fc:	4b05      	ldr	r3, [pc, #20]	; (8011214 <_svfiprintf_r+0x1f4>)
 80111fe:	a904      	add	r1, sp, #16
 8011200:	4638      	mov	r0, r7
 8011202:	f000 f9bd 	bl	8011580 <_printf_i>
 8011206:	e7eb      	b.n	80111e0 <_svfiprintf_r+0x1c0>
 8011208:	080126c5 	.word	0x080126c5
 801120c:	080126cf 	.word	0x080126cf
 8011210:	00000000 	.word	0x00000000
 8011214:	08010f6d 	.word	0x08010f6d
 8011218:	080126cb 	.word	0x080126cb

0801121c <__sfputc_r>:
 801121c:	6893      	ldr	r3, [r2, #8]
 801121e:	3b01      	subs	r3, #1
 8011220:	2b00      	cmp	r3, #0
 8011222:	b410      	push	{r4}
 8011224:	6093      	str	r3, [r2, #8]
 8011226:	da08      	bge.n	801123a <__sfputc_r+0x1e>
 8011228:	6994      	ldr	r4, [r2, #24]
 801122a:	42a3      	cmp	r3, r4
 801122c:	db01      	blt.n	8011232 <__sfputc_r+0x16>
 801122e:	290a      	cmp	r1, #10
 8011230:	d103      	bne.n	801123a <__sfputc_r+0x1e>
 8011232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011236:	f000 bbe5 	b.w	8011a04 <__swbuf_r>
 801123a:	6813      	ldr	r3, [r2, #0]
 801123c:	1c58      	adds	r0, r3, #1
 801123e:	6010      	str	r0, [r2, #0]
 8011240:	7019      	strb	r1, [r3, #0]
 8011242:	4608      	mov	r0, r1
 8011244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011248:	4770      	bx	lr

0801124a <__sfputs_r>:
 801124a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124c:	4606      	mov	r6, r0
 801124e:	460f      	mov	r7, r1
 8011250:	4614      	mov	r4, r2
 8011252:	18d5      	adds	r5, r2, r3
 8011254:	42ac      	cmp	r4, r5
 8011256:	d101      	bne.n	801125c <__sfputs_r+0x12>
 8011258:	2000      	movs	r0, #0
 801125a:	e007      	b.n	801126c <__sfputs_r+0x22>
 801125c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011260:	463a      	mov	r2, r7
 8011262:	4630      	mov	r0, r6
 8011264:	f7ff ffda 	bl	801121c <__sfputc_r>
 8011268:	1c43      	adds	r3, r0, #1
 801126a:	d1f3      	bne.n	8011254 <__sfputs_r+0xa>
 801126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011270 <_vfiprintf_r>:
 8011270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011274:	460d      	mov	r5, r1
 8011276:	b09d      	sub	sp, #116	; 0x74
 8011278:	4614      	mov	r4, r2
 801127a:	4698      	mov	r8, r3
 801127c:	4606      	mov	r6, r0
 801127e:	b118      	cbz	r0, 8011288 <_vfiprintf_r+0x18>
 8011280:	6a03      	ldr	r3, [r0, #32]
 8011282:	b90b      	cbnz	r3, 8011288 <_vfiprintf_r+0x18>
 8011284:	f7ff fca0 	bl	8010bc8 <__sinit>
 8011288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801128a:	07d9      	lsls	r1, r3, #31
 801128c:	d405      	bmi.n	801129a <_vfiprintf_r+0x2a>
 801128e:	89ab      	ldrh	r3, [r5, #12]
 8011290:	059a      	lsls	r2, r3, #22
 8011292:	d402      	bmi.n	801129a <_vfiprintf_r+0x2a>
 8011294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011296:	f7ff fe1a 	bl	8010ece <__retarget_lock_acquire_recursive>
 801129a:	89ab      	ldrh	r3, [r5, #12]
 801129c:	071b      	lsls	r3, r3, #28
 801129e:	d501      	bpl.n	80112a4 <_vfiprintf_r+0x34>
 80112a0:	692b      	ldr	r3, [r5, #16]
 80112a2:	b99b      	cbnz	r3, 80112cc <_vfiprintf_r+0x5c>
 80112a4:	4629      	mov	r1, r5
 80112a6:	4630      	mov	r0, r6
 80112a8:	f000 fbea 	bl	8011a80 <__swsetup_r>
 80112ac:	b170      	cbz	r0, 80112cc <_vfiprintf_r+0x5c>
 80112ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112b0:	07dc      	lsls	r4, r3, #31
 80112b2:	d504      	bpl.n	80112be <_vfiprintf_r+0x4e>
 80112b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112b8:	b01d      	add	sp, #116	; 0x74
 80112ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112be:	89ab      	ldrh	r3, [r5, #12]
 80112c0:	0598      	lsls	r0, r3, #22
 80112c2:	d4f7      	bmi.n	80112b4 <_vfiprintf_r+0x44>
 80112c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112c6:	f7ff fe03 	bl	8010ed0 <__retarget_lock_release_recursive>
 80112ca:	e7f3      	b.n	80112b4 <_vfiprintf_r+0x44>
 80112cc:	2300      	movs	r3, #0
 80112ce:	9309      	str	r3, [sp, #36]	; 0x24
 80112d0:	2320      	movs	r3, #32
 80112d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80112da:	2330      	movs	r3, #48	; 0x30
 80112dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011490 <_vfiprintf_r+0x220>
 80112e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112e4:	f04f 0901 	mov.w	r9, #1
 80112e8:	4623      	mov	r3, r4
 80112ea:	469a      	mov	sl, r3
 80112ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112f0:	b10a      	cbz	r2, 80112f6 <_vfiprintf_r+0x86>
 80112f2:	2a25      	cmp	r2, #37	; 0x25
 80112f4:	d1f9      	bne.n	80112ea <_vfiprintf_r+0x7a>
 80112f6:	ebba 0b04 	subs.w	fp, sl, r4
 80112fa:	d00b      	beq.n	8011314 <_vfiprintf_r+0xa4>
 80112fc:	465b      	mov	r3, fp
 80112fe:	4622      	mov	r2, r4
 8011300:	4629      	mov	r1, r5
 8011302:	4630      	mov	r0, r6
 8011304:	f7ff ffa1 	bl	801124a <__sfputs_r>
 8011308:	3001      	adds	r0, #1
 801130a:	f000 80a9 	beq.w	8011460 <_vfiprintf_r+0x1f0>
 801130e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011310:	445a      	add	r2, fp
 8011312:	9209      	str	r2, [sp, #36]	; 0x24
 8011314:	f89a 3000 	ldrb.w	r3, [sl]
 8011318:	2b00      	cmp	r3, #0
 801131a:	f000 80a1 	beq.w	8011460 <_vfiprintf_r+0x1f0>
 801131e:	2300      	movs	r3, #0
 8011320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011328:	f10a 0a01 	add.w	sl, sl, #1
 801132c:	9304      	str	r3, [sp, #16]
 801132e:	9307      	str	r3, [sp, #28]
 8011330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011334:	931a      	str	r3, [sp, #104]	; 0x68
 8011336:	4654      	mov	r4, sl
 8011338:	2205      	movs	r2, #5
 801133a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801133e:	4854      	ldr	r0, [pc, #336]	; (8011490 <_vfiprintf_r+0x220>)
 8011340:	f7ee ff7e 	bl	8000240 <memchr>
 8011344:	9a04      	ldr	r2, [sp, #16]
 8011346:	b9d8      	cbnz	r0, 8011380 <_vfiprintf_r+0x110>
 8011348:	06d1      	lsls	r1, r2, #27
 801134a:	bf44      	itt	mi
 801134c:	2320      	movmi	r3, #32
 801134e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011352:	0713      	lsls	r3, r2, #28
 8011354:	bf44      	itt	mi
 8011356:	232b      	movmi	r3, #43	; 0x2b
 8011358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801135c:	f89a 3000 	ldrb.w	r3, [sl]
 8011360:	2b2a      	cmp	r3, #42	; 0x2a
 8011362:	d015      	beq.n	8011390 <_vfiprintf_r+0x120>
 8011364:	9a07      	ldr	r2, [sp, #28]
 8011366:	4654      	mov	r4, sl
 8011368:	2000      	movs	r0, #0
 801136a:	f04f 0c0a 	mov.w	ip, #10
 801136e:	4621      	mov	r1, r4
 8011370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011374:	3b30      	subs	r3, #48	; 0x30
 8011376:	2b09      	cmp	r3, #9
 8011378:	d94d      	bls.n	8011416 <_vfiprintf_r+0x1a6>
 801137a:	b1b0      	cbz	r0, 80113aa <_vfiprintf_r+0x13a>
 801137c:	9207      	str	r2, [sp, #28]
 801137e:	e014      	b.n	80113aa <_vfiprintf_r+0x13a>
 8011380:	eba0 0308 	sub.w	r3, r0, r8
 8011384:	fa09 f303 	lsl.w	r3, r9, r3
 8011388:	4313      	orrs	r3, r2
 801138a:	9304      	str	r3, [sp, #16]
 801138c:	46a2      	mov	sl, r4
 801138e:	e7d2      	b.n	8011336 <_vfiprintf_r+0xc6>
 8011390:	9b03      	ldr	r3, [sp, #12]
 8011392:	1d19      	adds	r1, r3, #4
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	9103      	str	r1, [sp, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	bfbb      	ittet	lt
 801139c:	425b      	neglt	r3, r3
 801139e:	f042 0202 	orrlt.w	r2, r2, #2
 80113a2:	9307      	strge	r3, [sp, #28]
 80113a4:	9307      	strlt	r3, [sp, #28]
 80113a6:	bfb8      	it	lt
 80113a8:	9204      	strlt	r2, [sp, #16]
 80113aa:	7823      	ldrb	r3, [r4, #0]
 80113ac:	2b2e      	cmp	r3, #46	; 0x2e
 80113ae:	d10c      	bne.n	80113ca <_vfiprintf_r+0x15a>
 80113b0:	7863      	ldrb	r3, [r4, #1]
 80113b2:	2b2a      	cmp	r3, #42	; 0x2a
 80113b4:	d134      	bne.n	8011420 <_vfiprintf_r+0x1b0>
 80113b6:	9b03      	ldr	r3, [sp, #12]
 80113b8:	1d1a      	adds	r2, r3, #4
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	9203      	str	r2, [sp, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	bfb8      	it	lt
 80113c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80113c6:	3402      	adds	r4, #2
 80113c8:	9305      	str	r3, [sp, #20]
 80113ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80114a0 <_vfiprintf_r+0x230>
 80113ce:	7821      	ldrb	r1, [r4, #0]
 80113d0:	2203      	movs	r2, #3
 80113d2:	4650      	mov	r0, sl
 80113d4:	f7ee ff34 	bl	8000240 <memchr>
 80113d8:	b138      	cbz	r0, 80113ea <_vfiprintf_r+0x17a>
 80113da:	9b04      	ldr	r3, [sp, #16]
 80113dc:	eba0 000a 	sub.w	r0, r0, sl
 80113e0:	2240      	movs	r2, #64	; 0x40
 80113e2:	4082      	lsls	r2, r0
 80113e4:	4313      	orrs	r3, r2
 80113e6:	3401      	adds	r4, #1
 80113e8:	9304      	str	r3, [sp, #16]
 80113ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113ee:	4829      	ldr	r0, [pc, #164]	; (8011494 <_vfiprintf_r+0x224>)
 80113f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113f4:	2206      	movs	r2, #6
 80113f6:	f7ee ff23 	bl	8000240 <memchr>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d03f      	beq.n	801147e <_vfiprintf_r+0x20e>
 80113fe:	4b26      	ldr	r3, [pc, #152]	; (8011498 <_vfiprintf_r+0x228>)
 8011400:	bb1b      	cbnz	r3, 801144a <_vfiprintf_r+0x1da>
 8011402:	9b03      	ldr	r3, [sp, #12]
 8011404:	3307      	adds	r3, #7
 8011406:	f023 0307 	bic.w	r3, r3, #7
 801140a:	3308      	adds	r3, #8
 801140c:	9303      	str	r3, [sp, #12]
 801140e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011410:	443b      	add	r3, r7
 8011412:	9309      	str	r3, [sp, #36]	; 0x24
 8011414:	e768      	b.n	80112e8 <_vfiprintf_r+0x78>
 8011416:	fb0c 3202 	mla	r2, ip, r2, r3
 801141a:	460c      	mov	r4, r1
 801141c:	2001      	movs	r0, #1
 801141e:	e7a6      	b.n	801136e <_vfiprintf_r+0xfe>
 8011420:	2300      	movs	r3, #0
 8011422:	3401      	adds	r4, #1
 8011424:	9305      	str	r3, [sp, #20]
 8011426:	4619      	mov	r1, r3
 8011428:	f04f 0c0a 	mov.w	ip, #10
 801142c:	4620      	mov	r0, r4
 801142e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011432:	3a30      	subs	r2, #48	; 0x30
 8011434:	2a09      	cmp	r2, #9
 8011436:	d903      	bls.n	8011440 <_vfiprintf_r+0x1d0>
 8011438:	2b00      	cmp	r3, #0
 801143a:	d0c6      	beq.n	80113ca <_vfiprintf_r+0x15a>
 801143c:	9105      	str	r1, [sp, #20]
 801143e:	e7c4      	b.n	80113ca <_vfiprintf_r+0x15a>
 8011440:	fb0c 2101 	mla	r1, ip, r1, r2
 8011444:	4604      	mov	r4, r0
 8011446:	2301      	movs	r3, #1
 8011448:	e7f0      	b.n	801142c <_vfiprintf_r+0x1bc>
 801144a:	ab03      	add	r3, sp, #12
 801144c:	9300      	str	r3, [sp, #0]
 801144e:	462a      	mov	r2, r5
 8011450:	4b12      	ldr	r3, [pc, #72]	; (801149c <_vfiprintf_r+0x22c>)
 8011452:	a904      	add	r1, sp, #16
 8011454:	4630      	mov	r0, r6
 8011456:	f3af 8000 	nop.w
 801145a:	4607      	mov	r7, r0
 801145c:	1c78      	adds	r0, r7, #1
 801145e:	d1d6      	bne.n	801140e <_vfiprintf_r+0x19e>
 8011460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011462:	07d9      	lsls	r1, r3, #31
 8011464:	d405      	bmi.n	8011472 <_vfiprintf_r+0x202>
 8011466:	89ab      	ldrh	r3, [r5, #12]
 8011468:	059a      	lsls	r2, r3, #22
 801146a:	d402      	bmi.n	8011472 <_vfiprintf_r+0x202>
 801146c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801146e:	f7ff fd2f 	bl	8010ed0 <__retarget_lock_release_recursive>
 8011472:	89ab      	ldrh	r3, [r5, #12]
 8011474:	065b      	lsls	r3, r3, #25
 8011476:	f53f af1d 	bmi.w	80112b4 <_vfiprintf_r+0x44>
 801147a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801147c:	e71c      	b.n	80112b8 <_vfiprintf_r+0x48>
 801147e:	ab03      	add	r3, sp, #12
 8011480:	9300      	str	r3, [sp, #0]
 8011482:	462a      	mov	r2, r5
 8011484:	4b05      	ldr	r3, [pc, #20]	; (801149c <_vfiprintf_r+0x22c>)
 8011486:	a904      	add	r1, sp, #16
 8011488:	4630      	mov	r0, r6
 801148a:	f000 f879 	bl	8011580 <_printf_i>
 801148e:	e7e4      	b.n	801145a <_vfiprintf_r+0x1ea>
 8011490:	080126c5 	.word	0x080126c5
 8011494:	080126cf 	.word	0x080126cf
 8011498:	00000000 	.word	0x00000000
 801149c:	0801124b 	.word	0x0801124b
 80114a0:	080126cb 	.word	0x080126cb

080114a4 <_printf_common>:
 80114a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a8:	4616      	mov	r6, r2
 80114aa:	4699      	mov	r9, r3
 80114ac:	688a      	ldr	r2, [r1, #8]
 80114ae:	690b      	ldr	r3, [r1, #16]
 80114b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80114b4:	4293      	cmp	r3, r2
 80114b6:	bfb8      	it	lt
 80114b8:	4613      	movlt	r3, r2
 80114ba:	6033      	str	r3, [r6, #0]
 80114bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114c0:	4607      	mov	r7, r0
 80114c2:	460c      	mov	r4, r1
 80114c4:	b10a      	cbz	r2, 80114ca <_printf_common+0x26>
 80114c6:	3301      	adds	r3, #1
 80114c8:	6033      	str	r3, [r6, #0]
 80114ca:	6823      	ldr	r3, [r4, #0]
 80114cc:	0699      	lsls	r1, r3, #26
 80114ce:	bf42      	ittt	mi
 80114d0:	6833      	ldrmi	r3, [r6, #0]
 80114d2:	3302      	addmi	r3, #2
 80114d4:	6033      	strmi	r3, [r6, #0]
 80114d6:	6825      	ldr	r5, [r4, #0]
 80114d8:	f015 0506 	ands.w	r5, r5, #6
 80114dc:	d106      	bne.n	80114ec <_printf_common+0x48>
 80114de:	f104 0a19 	add.w	sl, r4, #25
 80114e2:	68e3      	ldr	r3, [r4, #12]
 80114e4:	6832      	ldr	r2, [r6, #0]
 80114e6:	1a9b      	subs	r3, r3, r2
 80114e8:	42ab      	cmp	r3, r5
 80114ea:	dc26      	bgt.n	801153a <_printf_common+0x96>
 80114ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80114f0:	1e13      	subs	r3, r2, #0
 80114f2:	6822      	ldr	r2, [r4, #0]
 80114f4:	bf18      	it	ne
 80114f6:	2301      	movne	r3, #1
 80114f8:	0692      	lsls	r2, r2, #26
 80114fa:	d42b      	bmi.n	8011554 <_printf_common+0xb0>
 80114fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011500:	4649      	mov	r1, r9
 8011502:	4638      	mov	r0, r7
 8011504:	47c0      	blx	r8
 8011506:	3001      	adds	r0, #1
 8011508:	d01e      	beq.n	8011548 <_printf_common+0xa4>
 801150a:	6823      	ldr	r3, [r4, #0]
 801150c:	6922      	ldr	r2, [r4, #16]
 801150e:	f003 0306 	and.w	r3, r3, #6
 8011512:	2b04      	cmp	r3, #4
 8011514:	bf02      	ittt	eq
 8011516:	68e5      	ldreq	r5, [r4, #12]
 8011518:	6833      	ldreq	r3, [r6, #0]
 801151a:	1aed      	subeq	r5, r5, r3
 801151c:	68a3      	ldr	r3, [r4, #8]
 801151e:	bf0c      	ite	eq
 8011520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011524:	2500      	movne	r5, #0
 8011526:	4293      	cmp	r3, r2
 8011528:	bfc4      	itt	gt
 801152a:	1a9b      	subgt	r3, r3, r2
 801152c:	18ed      	addgt	r5, r5, r3
 801152e:	2600      	movs	r6, #0
 8011530:	341a      	adds	r4, #26
 8011532:	42b5      	cmp	r5, r6
 8011534:	d11a      	bne.n	801156c <_printf_common+0xc8>
 8011536:	2000      	movs	r0, #0
 8011538:	e008      	b.n	801154c <_printf_common+0xa8>
 801153a:	2301      	movs	r3, #1
 801153c:	4652      	mov	r2, sl
 801153e:	4649      	mov	r1, r9
 8011540:	4638      	mov	r0, r7
 8011542:	47c0      	blx	r8
 8011544:	3001      	adds	r0, #1
 8011546:	d103      	bne.n	8011550 <_printf_common+0xac>
 8011548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801154c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011550:	3501      	adds	r5, #1
 8011552:	e7c6      	b.n	80114e2 <_printf_common+0x3e>
 8011554:	18e1      	adds	r1, r4, r3
 8011556:	1c5a      	adds	r2, r3, #1
 8011558:	2030      	movs	r0, #48	; 0x30
 801155a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801155e:	4422      	add	r2, r4
 8011560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011568:	3302      	adds	r3, #2
 801156a:	e7c7      	b.n	80114fc <_printf_common+0x58>
 801156c:	2301      	movs	r3, #1
 801156e:	4622      	mov	r2, r4
 8011570:	4649      	mov	r1, r9
 8011572:	4638      	mov	r0, r7
 8011574:	47c0      	blx	r8
 8011576:	3001      	adds	r0, #1
 8011578:	d0e6      	beq.n	8011548 <_printf_common+0xa4>
 801157a:	3601      	adds	r6, #1
 801157c:	e7d9      	b.n	8011532 <_printf_common+0x8e>
	...

08011580 <_printf_i>:
 8011580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011584:	7e0f      	ldrb	r7, [r1, #24]
 8011586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011588:	2f78      	cmp	r7, #120	; 0x78
 801158a:	4691      	mov	r9, r2
 801158c:	4680      	mov	r8, r0
 801158e:	460c      	mov	r4, r1
 8011590:	469a      	mov	sl, r3
 8011592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011596:	d807      	bhi.n	80115a8 <_printf_i+0x28>
 8011598:	2f62      	cmp	r7, #98	; 0x62
 801159a:	d80a      	bhi.n	80115b2 <_printf_i+0x32>
 801159c:	2f00      	cmp	r7, #0
 801159e:	f000 80d4 	beq.w	801174a <_printf_i+0x1ca>
 80115a2:	2f58      	cmp	r7, #88	; 0x58
 80115a4:	f000 80c0 	beq.w	8011728 <_printf_i+0x1a8>
 80115a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80115b0:	e03a      	b.n	8011628 <_printf_i+0xa8>
 80115b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80115b6:	2b15      	cmp	r3, #21
 80115b8:	d8f6      	bhi.n	80115a8 <_printf_i+0x28>
 80115ba:	a101      	add	r1, pc, #4	; (adr r1, 80115c0 <_printf_i+0x40>)
 80115bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115c0:	08011619 	.word	0x08011619
 80115c4:	0801162d 	.word	0x0801162d
 80115c8:	080115a9 	.word	0x080115a9
 80115cc:	080115a9 	.word	0x080115a9
 80115d0:	080115a9 	.word	0x080115a9
 80115d4:	080115a9 	.word	0x080115a9
 80115d8:	0801162d 	.word	0x0801162d
 80115dc:	080115a9 	.word	0x080115a9
 80115e0:	080115a9 	.word	0x080115a9
 80115e4:	080115a9 	.word	0x080115a9
 80115e8:	080115a9 	.word	0x080115a9
 80115ec:	08011731 	.word	0x08011731
 80115f0:	08011659 	.word	0x08011659
 80115f4:	080116eb 	.word	0x080116eb
 80115f8:	080115a9 	.word	0x080115a9
 80115fc:	080115a9 	.word	0x080115a9
 8011600:	08011753 	.word	0x08011753
 8011604:	080115a9 	.word	0x080115a9
 8011608:	08011659 	.word	0x08011659
 801160c:	080115a9 	.word	0x080115a9
 8011610:	080115a9 	.word	0x080115a9
 8011614:	080116f3 	.word	0x080116f3
 8011618:	682b      	ldr	r3, [r5, #0]
 801161a:	1d1a      	adds	r2, r3, #4
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	602a      	str	r2, [r5, #0]
 8011620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011628:	2301      	movs	r3, #1
 801162a:	e09f      	b.n	801176c <_printf_i+0x1ec>
 801162c:	6820      	ldr	r0, [r4, #0]
 801162e:	682b      	ldr	r3, [r5, #0]
 8011630:	0607      	lsls	r7, r0, #24
 8011632:	f103 0104 	add.w	r1, r3, #4
 8011636:	6029      	str	r1, [r5, #0]
 8011638:	d501      	bpl.n	801163e <_printf_i+0xbe>
 801163a:	681e      	ldr	r6, [r3, #0]
 801163c:	e003      	b.n	8011646 <_printf_i+0xc6>
 801163e:	0646      	lsls	r6, r0, #25
 8011640:	d5fb      	bpl.n	801163a <_printf_i+0xba>
 8011642:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011646:	2e00      	cmp	r6, #0
 8011648:	da03      	bge.n	8011652 <_printf_i+0xd2>
 801164a:	232d      	movs	r3, #45	; 0x2d
 801164c:	4276      	negs	r6, r6
 801164e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011652:	485a      	ldr	r0, [pc, #360]	; (80117bc <_printf_i+0x23c>)
 8011654:	230a      	movs	r3, #10
 8011656:	e012      	b.n	801167e <_printf_i+0xfe>
 8011658:	682b      	ldr	r3, [r5, #0]
 801165a:	6820      	ldr	r0, [r4, #0]
 801165c:	1d19      	adds	r1, r3, #4
 801165e:	6029      	str	r1, [r5, #0]
 8011660:	0605      	lsls	r5, r0, #24
 8011662:	d501      	bpl.n	8011668 <_printf_i+0xe8>
 8011664:	681e      	ldr	r6, [r3, #0]
 8011666:	e002      	b.n	801166e <_printf_i+0xee>
 8011668:	0641      	lsls	r1, r0, #25
 801166a:	d5fb      	bpl.n	8011664 <_printf_i+0xe4>
 801166c:	881e      	ldrh	r6, [r3, #0]
 801166e:	4853      	ldr	r0, [pc, #332]	; (80117bc <_printf_i+0x23c>)
 8011670:	2f6f      	cmp	r7, #111	; 0x6f
 8011672:	bf0c      	ite	eq
 8011674:	2308      	moveq	r3, #8
 8011676:	230a      	movne	r3, #10
 8011678:	2100      	movs	r1, #0
 801167a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801167e:	6865      	ldr	r5, [r4, #4]
 8011680:	60a5      	str	r5, [r4, #8]
 8011682:	2d00      	cmp	r5, #0
 8011684:	bfa2      	ittt	ge
 8011686:	6821      	ldrge	r1, [r4, #0]
 8011688:	f021 0104 	bicge.w	r1, r1, #4
 801168c:	6021      	strge	r1, [r4, #0]
 801168e:	b90e      	cbnz	r6, 8011694 <_printf_i+0x114>
 8011690:	2d00      	cmp	r5, #0
 8011692:	d04b      	beq.n	801172c <_printf_i+0x1ac>
 8011694:	4615      	mov	r5, r2
 8011696:	fbb6 f1f3 	udiv	r1, r6, r3
 801169a:	fb03 6711 	mls	r7, r3, r1, r6
 801169e:	5dc7      	ldrb	r7, [r0, r7]
 80116a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80116a4:	4637      	mov	r7, r6
 80116a6:	42bb      	cmp	r3, r7
 80116a8:	460e      	mov	r6, r1
 80116aa:	d9f4      	bls.n	8011696 <_printf_i+0x116>
 80116ac:	2b08      	cmp	r3, #8
 80116ae:	d10b      	bne.n	80116c8 <_printf_i+0x148>
 80116b0:	6823      	ldr	r3, [r4, #0]
 80116b2:	07de      	lsls	r6, r3, #31
 80116b4:	d508      	bpl.n	80116c8 <_printf_i+0x148>
 80116b6:	6923      	ldr	r3, [r4, #16]
 80116b8:	6861      	ldr	r1, [r4, #4]
 80116ba:	4299      	cmp	r1, r3
 80116bc:	bfde      	ittt	le
 80116be:	2330      	movle	r3, #48	; 0x30
 80116c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80116c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80116c8:	1b52      	subs	r2, r2, r5
 80116ca:	6122      	str	r2, [r4, #16]
 80116cc:	f8cd a000 	str.w	sl, [sp]
 80116d0:	464b      	mov	r3, r9
 80116d2:	aa03      	add	r2, sp, #12
 80116d4:	4621      	mov	r1, r4
 80116d6:	4640      	mov	r0, r8
 80116d8:	f7ff fee4 	bl	80114a4 <_printf_common>
 80116dc:	3001      	adds	r0, #1
 80116de:	d14a      	bne.n	8011776 <_printf_i+0x1f6>
 80116e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116e4:	b004      	add	sp, #16
 80116e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ea:	6823      	ldr	r3, [r4, #0]
 80116ec:	f043 0320 	orr.w	r3, r3, #32
 80116f0:	6023      	str	r3, [r4, #0]
 80116f2:	4833      	ldr	r0, [pc, #204]	; (80117c0 <_printf_i+0x240>)
 80116f4:	2778      	movs	r7, #120	; 0x78
 80116f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80116fa:	6823      	ldr	r3, [r4, #0]
 80116fc:	6829      	ldr	r1, [r5, #0]
 80116fe:	061f      	lsls	r7, r3, #24
 8011700:	f851 6b04 	ldr.w	r6, [r1], #4
 8011704:	d402      	bmi.n	801170c <_printf_i+0x18c>
 8011706:	065f      	lsls	r7, r3, #25
 8011708:	bf48      	it	mi
 801170a:	b2b6      	uxthmi	r6, r6
 801170c:	07df      	lsls	r7, r3, #31
 801170e:	bf48      	it	mi
 8011710:	f043 0320 	orrmi.w	r3, r3, #32
 8011714:	6029      	str	r1, [r5, #0]
 8011716:	bf48      	it	mi
 8011718:	6023      	strmi	r3, [r4, #0]
 801171a:	b91e      	cbnz	r6, 8011724 <_printf_i+0x1a4>
 801171c:	6823      	ldr	r3, [r4, #0]
 801171e:	f023 0320 	bic.w	r3, r3, #32
 8011722:	6023      	str	r3, [r4, #0]
 8011724:	2310      	movs	r3, #16
 8011726:	e7a7      	b.n	8011678 <_printf_i+0xf8>
 8011728:	4824      	ldr	r0, [pc, #144]	; (80117bc <_printf_i+0x23c>)
 801172a:	e7e4      	b.n	80116f6 <_printf_i+0x176>
 801172c:	4615      	mov	r5, r2
 801172e:	e7bd      	b.n	80116ac <_printf_i+0x12c>
 8011730:	682b      	ldr	r3, [r5, #0]
 8011732:	6826      	ldr	r6, [r4, #0]
 8011734:	6961      	ldr	r1, [r4, #20]
 8011736:	1d18      	adds	r0, r3, #4
 8011738:	6028      	str	r0, [r5, #0]
 801173a:	0635      	lsls	r5, r6, #24
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	d501      	bpl.n	8011744 <_printf_i+0x1c4>
 8011740:	6019      	str	r1, [r3, #0]
 8011742:	e002      	b.n	801174a <_printf_i+0x1ca>
 8011744:	0670      	lsls	r0, r6, #25
 8011746:	d5fb      	bpl.n	8011740 <_printf_i+0x1c0>
 8011748:	8019      	strh	r1, [r3, #0]
 801174a:	2300      	movs	r3, #0
 801174c:	6123      	str	r3, [r4, #16]
 801174e:	4615      	mov	r5, r2
 8011750:	e7bc      	b.n	80116cc <_printf_i+0x14c>
 8011752:	682b      	ldr	r3, [r5, #0]
 8011754:	1d1a      	adds	r2, r3, #4
 8011756:	602a      	str	r2, [r5, #0]
 8011758:	681d      	ldr	r5, [r3, #0]
 801175a:	6862      	ldr	r2, [r4, #4]
 801175c:	2100      	movs	r1, #0
 801175e:	4628      	mov	r0, r5
 8011760:	f7ee fd6e 	bl	8000240 <memchr>
 8011764:	b108      	cbz	r0, 801176a <_printf_i+0x1ea>
 8011766:	1b40      	subs	r0, r0, r5
 8011768:	6060      	str	r0, [r4, #4]
 801176a:	6863      	ldr	r3, [r4, #4]
 801176c:	6123      	str	r3, [r4, #16]
 801176e:	2300      	movs	r3, #0
 8011770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011774:	e7aa      	b.n	80116cc <_printf_i+0x14c>
 8011776:	6923      	ldr	r3, [r4, #16]
 8011778:	462a      	mov	r2, r5
 801177a:	4649      	mov	r1, r9
 801177c:	4640      	mov	r0, r8
 801177e:	47d0      	blx	sl
 8011780:	3001      	adds	r0, #1
 8011782:	d0ad      	beq.n	80116e0 <_printf_i+0x160>
 8011784:	6823      	ldr	r3, [r4, #0]
 8011786:	079b      	lsls	r3, r3, #30
 8011788:	d413      	bmi.n	80117b2 <_printf_i+0x232>
 801178a:	68e0      	ldr	r0, [r4, #12]
 801178c:	9b03      	ldr	r3, [sp, #12]
 801178e:	4298      	cmp	r0, r3
 8011790:	bfb8      	it	lt
 8011792:	4618      	movlt	r0, r3
 8011794:	e7a6      	b.n	80116e4 <_printf_i+0x164>
 8011796:	2301      	movs	r3, #1
 8011798:	4632      	mov	r2, r6
 801179a:	4649      	mov	r1, r9
 801179c:	4640      	mov	r0, r8
 801179e:	47d0      	blx	sl
 80117a0:	3001      	adds	r0, #1
 80117a2:	d09d      	beq.n	80116e0 <_printf_i+0x160>
 80117a4:	3501      	adds	r5, #1
 80117a6:	68e3      	ldr	r3, [r4, #12]
 80117a8:	9903      	ldr	r1, [sp, #12]
 80117aa:	1a5b      	subs	r3, r3, r1
 80117ac:	42ab      	cmp	r3, r5
 80117ae:	dcf2      	bgt.n	8011796 <_printf_i+0x216>
 80117b0:	e7eb      	b.n	801178a <_printf_i+0x20a>
 80117b2:	2500      	movs	r5, #0
 80117b4:	f104 0619 	add.w	r6, r4, #25
 80117b8:	e7f5      	b.n	80117a6 <_printf_i+0x226>
 80117ba:	bf00      	nop
 80117bc:	080126d6 	.word	0x080126d6
 80117c0:	080126e7 	.word	0x080126e7

080117c4 <__sflush_r>:
 80117c4:	898a      	ldrh	r2, [r1, #12]
 80117c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ca:	4605      	mov	r5, r0
 80117cc:	0710      	lsls	r0, r2, #28
 80117ce:	460c      	mov	r4, r1
 80117d0:	d458      	bmi.n	8011884 <__sflush_r+0xc0>
 80117d2:	684b      	ldr	r3, [r1, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	dc05      	bgt.n	80117e4 <__sflush_r+0x20>
 80117d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117da:	2b00      	cmp	r3, #0
 80117dc:	dc02      	bgt.n	80117e4 <__sflush_r+0x20>
 80117de:	2000      	movs	r0, #0
 80117e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117e6:	2e00      	cmp	r6, #0
 80117e8:	d0f9      	beq.n	80117de <__sflush_r+0x1a>
 80117ea:	2300      	movs	r3, #0
 80117ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80117f0:	682f      	ldr	r7, [r5, #0]
 80117f2:	6a21      	ldr	r1, [r4, #32]
 80117f4:	602b      	str	r3, [r5, #0]
 80117f6:	d032      	beq.n	801185e <__sflush_r+0x9a>
 80117f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80117fa:	89a3      	ldrh	r3, [r4, #12]
 80117fc:	075a      	lsls	r2, r3, #29
 80117fe:	d505      	bpl.n	801180c <__sflush_r+0x48>
 8011800:	6863      	ldr	r3, [r4, #4]
 8011802:	1ac0      	subs	r0, r0, r3
 8011804:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011806:	b10b      	cbz	r3, 801180c <__sflush_r+0x48>
 8011808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801180a:	1ac0      	subs	r0, r0, r3
 801180c:	2300      	movs	r3, #0
 801180e:	4602      	mov	r2, r0
 8011810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011812:	6a21      	ldr	r1, [r4, #32]
 8011814:	4628      	mov	r0, r5
 8011816:	47b0      	blx	r6
 8011818:	1c43      	adds	r3, r0, #1
 801181a:	89a3      	ldrh	r3, [r4, #12]
 801181c:	d106      	bne.n	801182c <__sflush_r+0x68>
 801181e:	6829      	ldr	r1, [r5, #0]
 8011820:	291d      	cmp	r1, #29
 8011822:	d82b      	bhi.n	801187c <__sflush_r+0xb8>
 8011824:	4a29      	ldr	r2, [pc, #164]	; (80118cc <__sflush_r+0x108>)
 8011826:	410a      	asrs	r2, r1
 8011828:	07d6      	lsls	r6, r2, #31
 801182a:	d427      	bmi.n	801187c <__sflush_r+0xb8>
 801182c:	2200      	movs	r2, #0
 801182e:	6062      	str	r2, [r4, #4]
 8011830:	04d9      	lsls	r1, r3, #19
 8011832:	6922      	ldr	r2, [r4, #16]
 8011834:	6022      	str	r2, [r4, #0]
 8011836:	d504      	bpl.n	8011842 <__sflush_r+0x7e>
 8011838:	1c42      	adds	r2, r0, #1
 801183a:	d101      	bne.n	8011840 <__sflush_r+0x7c>
 801183c:	682b      	ldr	r3, [r5, #0]
 801183e:	b903      	cbnz	r3, 8011842 <__sflush_r+0x7e>
 8011840:	6560      	str	r0, [r4, #84]	; 0x54
 8011842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011844:	602f      	str	r7, [r5, #0]
 8011846:	2900      	cmp	r1, #0
 8011848:	d0c9      	beq.n	80117de <__sflush_r+0x1a>
 801184a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801184e:	4299      	cmp	r1, r3
 8011850:	d002      	beq.n	8011858 <__sflush_r+0x94>
 8011852:	4628      	mov	r0, r5
 8011854:	f7ff fb3e 	bl	8010ed4 <_free_r>
 8011858:	2000      	movs	r0, #0
 801185a:	6360      	str	r0, [r4, #52]	; 0x34
 801185c:	e7c0      	b.n	80117e0 <__sflush_r+0x1c>
 801185e:	2301      	movs	r3, #1
 8011860:	4628      	mov	r0, r5
 8011862:	47b0      	blx	r6
 8011864:	1c41      	adds	r1, r0, #1
 8011866:	d1c8      	bne.n	80117fa <__sflush_r+0x36>
 8011868:	682b      	ldr	r3, [r5, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d0c5      	beq.n	80117fa <__sflush_r+0x36>
 801186e:	2b1d      	cmp	r3, #29
 8011870:	d001      	beq.n	8011876 <__sflush_r+0xb2>
 8011872:	2b16      	cmp	r3, #22
 8011874:	d101      	bne.n	801187a <__sflush_r+0xb6>
 8011876:	602f      	str	r7, [r5, #0]
 8011878:	e7b1      	b.n	80117de <__sflush_r+0x1a>
 801187a:	89a3      	ldrh	r3, [r4, #12]
 801187c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011880:	81a3      	strh	r3, [r4, #12]
 8011882:	e7ad      	b.n	80117e0 <__sflush_r+0x1c>
 8011884:	690f      	ldr	r7, [r1, #16]
 8011886:	2f00      	cmp	r7, #0
 8011888:	d0a9      	beq.n	80117de <__sflush_r+0x1a>
 801188a:	0793      	lsls	r3, r2, #30
 801188c:	680e      	ldr	r6, [r1, #0]
 801188e:	bf08      	it	eq
 8011890:	694b      	ldreq	r3, [r1, #20]
 8011892:	600f      	str	r7, [r1, #0]
 8011894:	bf18      	it	ne
 8011896:	2300      	movne	r3, #0
 8011898:	eba6 0807 	sub.w	r8, r6, r7
 801189c:	608b      	str	r3, [r1, #8]
 801189e:	f1b8 0f00 	cmp.w	r8, #0
 80118a2:	dd9c      	ble.n	80117de <__sflush_r+0x1a>
 80118a4:	6a21      	ldr	r1, [r4, #32]
 80118a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118a8:	4643      	mov	r3, r8
 80118aa:	463a      	mov	r2, r7
 80118ac:	4628      	mov	r0, r5
 80118ae:	47b0      	blx	r6
 80118b0:	2800      	cmp	r0, #0
 80118b2:	dc06      	bgt.n	80118c2 <__sflush_r+0xfe>
 80118b4:	89a3      	ldrh	r3, [r4, #12]
 80118b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ba:	81a3      	strh	r3, [r4, #12]
 80118bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118c0:	e78e      	b.n	80117e0 <__sflush_r+0x1c>
 80118c2:	4407      	add	r7, r0
 80118c4:	eba8 0800 	sub.w	r8, r8, r0
 80118c8:	e7e9      	b.n	801189e <__sflush_r+0xda>
 80118ca:	bf00      	nop
 80118cc:	dfbffffe 	.word	0xdfbffffe

080118d0 <_fflush_r>:
 80118d0:	b538      	push	{r3, r4, r5, lr}
 80118d2:	690b      	ldr	r3, [r1, #16]
 80118d4:	4605      	mov	r5, r0
 80118d6:	460c      	mov	r4, r1
 80118d8:	b913      	cbnz	r3, 80118e0 <_fflush_r+0x10>
 80118da:	2500      	movs	r5, #0
 80118dc:	4628      	mov	r0, r5
 80118de:	bd38      	pop	{r3, r4, r5, pc}
 80118e0:	b118      	cbz	r0, 80118ea <_fflush_r+0x1a>
 80118e2:	6a03      	ldr	r3, [r0, #32]
 80118e4:	b90b      	cbnz	r3, 80118ea <_fflush_r+0x1a>
 80118e6:	f7ff f96f 	bl	8010bc8 <__sinit>
 80118ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d0f3      	beq.n	80118da <_fflush_r+0xa>
 80118f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118f4:	07d0      	lsls	r0, r2, #31
 80118f6:	d404      	bmi.n	8011902 <_fflush_r+0x32>
 80118f8:	0599      	lsls	r1, r3, #22
 80118fa:	d402      	bmi.n	8011902 <_fflush_r+0x32>
 80118fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118fe:	f7ff fae6 	bl	8010ece <__retarget_lock_acquire_recursive>
 8011902:	4628      	mov	r0, r5
 8011904:	4621      	mov	r1, r4
 8011906:	f7ff ff5d 	bl	80117c4 <__sflush_r>
 801190a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801190c:	07da      	lsls	r2, r3, #31
 801190e:	4605      	mov	r5, r0
 8011910:	d4e4      	bmi.n	80118dc <_fflush_r+0xc>
 8011912:	89a3      	ldrh	r3, [r4, #12]
 8011914:	059b      	lsls	r3, r3, #22
 8011916:	d4e1      	bmi.n	80118dc <_fflush_r+0xc>
 8011918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801191a:	f7ff fad9 	bl	8010ed0 <__retarget_lock_release_recursive>
 801191e:	e7dd      	b.n	80118dc <_fflush_r+0xc>

08011920 <__sread>:
 8011920:	b510      	push	{r4, lr}
 8011922:	460c      	mov	r4, r1
 8011924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011928:	f000 f9c2 	bl	8011cb0 <_read_r>
 801192c:	2800      	cmp	r0, #0
 801192e:	bfab      	itete	ge
 8011930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011932:	89a3      	ldrhlt	r3, [r4, #12]
 8011934:	181b      	addge	r3, r3, r0
 8011936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801193a:	bfac      	ite	ge
 801193c:	6563      	strge	r3, [r4, #84]	; 0x54
 801193e:	81a3      	strhlt	r3, [r4, #12]
 8011940:	bd10      	pop	{r4, pc}

08011942 <__swrite>:
 8011942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011946:	461f      	mov	r7, r3
 8011948:	898b      	ldrh	r3, [r1, #12]
 801194a:	05db      	lsls	r3, r3, #23
 801194c:	4605      	mov	r5, r0
 801194e:	460c      	mov	r4, r1
 8011950:	4616      	mov	r6, r2
 8011952:	d505      	bpl.n	8011960 <__swrite+0x1e>
 8011954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011958:	2302      	movs	r3, #2
 801195a:	2200      	movs	r2, #0
 801195c:	f000 f996 	bl	8011c8c <_lseek_r>
 8011960:	89a3      	ldrh	r3, [r4, #12]
 8011962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801196a:	81a3      	strh	r3, [r4, #12]
 801196c:	4632      	mov	r2, r6
 801196e:	463b      	mov	r3, r7
 8011970:	4628      	mov	r0, r5
 8011972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011976:	f000 b9ad 	b.w	8011cd4 <_write_r>

0801197a <__sseek>:
 801197a:	b510      	push	{r4, lr}
 801197c:	460c      	mov	r4, r1
 801197e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011982:	f000 f983 	bl	8011c8c <_lseek_r>
 8011986:	1c43      	adds	r3, r0, #1
 8011988:	89a3      	ldrh	r3, [r4, #12]
 801198a:	bf15      	itete	ne
 801198c:	6560      	strne	r0, [r4, #84]	; 0x54
 801198e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011996:	81a3      	strheq	r3, [r4, #12]
 8011998:	bf18      	it	ne
 801199a:	81a3      	strhne	r3, [r4, #12]
 801199c:	bd10      	pop	{r4, pc}

0801199e <__sclose>:
 801199e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119a2:	f000 b941 	b.w	8011c28 <_close_r>

080119a6 <_realloc_r>:
 80119a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119aa:	4680      	mov	r8, r0
 80119ac:	4614      	mov	r4, r2
 80119ae:	460e      	mov	r6, r1
 80119b0:	b921      	cbnz	r1, 80119bc <_realloc_r+0x16>
 80119b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119b6:	4611      	mov	r1, r2
 80119b8:	f7fe bfba 	b.w	8010930 <_malloc_r>
 80119bc:	b92a      	cbnz	r2, 80119ca <_realloc_r+0x24>
 80119be:	f7ff fa89 	bl	8010ed4 <_free_r>
 80119c2:	4625      	mov	r5, r4
 80119c4:	4628      	mov	r0, r5
 80119c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ca:	f000 f9a3 	bl	8011d14 <_malloc_usable_size_r>
 80119ce:	4284      	cmp	r4, r0
 80119d0:	4607      	mov	r7, r0
 80119d2:	d802      	bhi.n	80119da <_realloc_r+0x34>
 80119d4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80119d8:	d812      	bhi.n	8011a00 <_realloc_r+0x5a>
 80119da:	4621      	mov	r1, r4
 80119dc:	4640      	mov	r0, r8
 80119de:	f7fe ffa7 	bl	8010930 <_malloc_r>
 80119e2:	4605      	mov	r5, r0
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d0ed      	beq.n	80119c4 <_realloc_r+0x1e>
 80119e8:	42bc      	cmp	r4, r7
 80119ea:	4622      	mov	r2, r4
 80119ec:	4631      	mov	r1, r6
 80119ee:	bf28      	it	cs
 80119f0:	463a      	movcs	r2, r7
 80119f2:	f000 f981 	bl	8011cf8 <memcpy>
 80119f6:	4631      	mov	r1, r6
 80119f8:	4640      	mov	r0, r8
 80119fa:	f7ff fa6b 	bl	8010ed4 <_free_r>
 80119fe:	e7e1      	b.n	80119c4 <_realloc_r+0x1e>
 8011a00:	4635      	mov	r5, r6
 8011a02:	e7df      	b.n	80119c4 <_realloc_r+0x1e>

08011a04 <__swbuf_r>:
 8011a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a06:	460e      	mov	r6, r1
 8011a08:	4614      	mov	r4, r2
 8011a0a:	4605      	mov	r5, r0
 8011a0c:	b118      	cbz	r0, 8011a16 <__swbuf_r+0x12>
 8011a0e:	6a03      	ldr	r3, [r0, #32]
 8011a10:	b90b      	cbnz	r3, 8011a16 <__swbuf_r+0x12>
 8011a12:	f7ff f8d9 	bl	8010bc8 <__sinit>
 8011a16:	69a3      	ldr	r3, [r4, #24]
 8011a18:	60a3      	str	r3, [r4, #8]
 8011a1a:	89a3      	ldrh	r3, [r4, #12]
 8011a1c:	071a      	lsls	r2, r3, #28
 8011a1e:	d525      	bpl.n	8011a6c <__swbuf_r+0x68>
 8011a20:	6923      	ldr	r3, [r4, #16]
 8011a22:	b31b      	cbz	r3, 8011a6c <__swbuf_r+0x68>
 8011a24:	6823      	ldr	r3, [r4, #0]
 8011a26:	6922      	ldr	r2, [r4, #16]
 8011a28:	1a98      	subs	r0, r3, r2
 8011a2a:	6963      	ldr	r3, [r4, #20]
 8011a2c:	b2f6      	uxtb	r6, r6
 8011a2e:	4283      	cmp	r3, r0
 8011a30:	4637      	mov	r7, r6
 8011a32:	dc04      	bgt.n	8011a3e <__swbuf_r+0x3a>
 8011a34:	4621      	mov	r1, r4
 8011a36:	4628      	mov	r0, r5
 8011a38:	f7ff ff4a 	bl	80118d0 <_fflush_r>
 8011a3c:	b9e0      	cbnz	r0, 8011a78 <__swbuf_r+0x74>
 8011a3e:	68a3      	ldr	r3, [r4, #8]
 8011a40:	3b01      	subs	r3, #1
 8011a42:	60a3      	str	r3, [r4, #8]
 8011a44:	6823      	ldr	r3, [r4, #0]
 8011a46:	1c5a      	adds	r2, r3, #1
 8011a48:	6022      	str	r2, [r4, #0]
 8011a4a:	701e      	strb	r6, [r3, #0]
 8011a4c:	6962      	ldr	r2, [r4, #20]
 8011a4e:	1c43      	adds	r3, r0, #1
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d004      	beq.n	8011a5e <__swbuf_r+0x5a>
 8011a54:	89a3      	ldrh	r3, [r4, #12]
 8011a56:	07db      	lsls	r3, r3, #31
 8011a58:	d506      	bpl.n	8011a68 <__swbuf_r+0x64>
 8011a5a:	2e0a      	cmp	r6, #10
 8011a5c:	d104      	bne.n	8011a68 <__swbuf_r+0x64>
 8011a5e:	4621      	mov	r1, r4
 8011a60:	4628      	mov	r0, r5
 8011a62:	f7ff ff35 	bl	80118d0 <_fflush_r>
 8011a66:	b938      	cbnz	r0, 8011a78 <__swbuf_r+0x74>
 8011a68:	4638      	mov	r0, r7
 8011a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a6c:	4621      	mov	r1, r4
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f000 f806 	bl	8011a80 <__swsetup_r>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	d0d5      	beq.n	8011a24 <__swbuf_r+0x20>
 8011a78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011a7c:	e7f4      	b.n	8011a68 <__swbuf_r+0x64>
	...

08011a80 <__swsetup_r>:
 8011a80:	b538      	push	{r3, r4, r5, lr}
 8011a82:	4b2a      	ldr	r3, [pc, #168]	; (8011b2c <__swsetup_r+0xac>)
 8011a84:	4605      	mov	r5, r0
 8011a86:	6818      	ldr	r0, [r3, #0]
 8011a88:	460c      	mov	r4, r1
 8011a8a:	b118      	cbz	r0, 8011a94 <__swsetup_r+0x14>
 8011a8c:	6a03      	ldr	r3, [r0, #32]
 8011a8e:	b90b      	cbnz	r3, 8011a94 <__swsetup_r+0x14>
 8011a90:	f7ff f89a 	bl	8010bc8 <__sinit>
 8011a94:	89a3      	ldrh	r3, [r4, #12]
 8011a96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a9a:	0718      	lsls	r0, r3, #28
 8011a9c:	d422      	bmi.n	8011ae4 <__swsetup_r+0x64>
 8011a9e:	06d9      	lsls	r1, r3, #27
 8011aa0:	d407      	bmi.n	8011ab2 <__swsetup_r+0x32>
 8011aa2:	2309      	movs	r3, #9
 8011aa4:	602b      	str	r3, [r5, #0]
 8011aa6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011aaa:	81a3      	strh	r3, [r4, #12]
 8011aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ab0:	e034      	b.n	8011b1c <__swsetup_r+0x9c>
 8011ab2:	0758      	lsls	r0, r3, #29
 8011ab4:	d512      	bpl.n	8011adc <__swsetup_r+0x5c>
 8011ab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ab8:	b141      	cbz	r1, 8011acc <__swsetup_r+0x4c>
 8011aba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011abe:	4299      	cmp	r1, r3
 8011ac0:	d002      	beq.n	8011ac8 <__swsetup_r+0x48>
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	f7ff fa06 	bl	8010ed4 <_free_r>
 8011ac8:	2300      	movs	r3, #0
 8011aca:	6363      	str	r3, [r4, #52]	; 0x34
 8011acc:	89a3      	ldrh	r3, [r4, #12]
 8011ace:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011ad2:	81a3      	strh	r3, [r4, #12]
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	6063      	str	r3, [r4, #4]
 8011ad8:	6923      	ldr	r3, [r4, #16]
 8011ada:	6023      	str	r3, [r4, #0]
 8011adc:	89a3      	ldrh	r3, [r4, #12]
 8011ade:	f043 0308 	orr.w	r3, r3, #8
 8011ae2:	81a3      	strh	r3, [r4, #12]
 8011ae4:	6923      	ldr	r3, [r4, #16]
 8011ae6:	b94b      	cbnz	r3, 8011afc <__swsetup_r+0x7c>
 8011ae8:	89a3      	ldrh	r3, [r4, #12]
 8011aea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011af2:	d003      	beq.n	8011afc <__swsetup_r+0x7c>
 8011af4:	4621      	mov	r1, r4
 8011af6:	4628      	mov	r0, r5
 8011af8:	f000 f840 	bl	8011b7c <__smakebuf_r>
 8011afc:	89a0      	ldrh	r0, [r4, #12]
 8011afe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b02:	f010 0301 	ands.w	r3, r0, #1
 8011b06:	d00a      	beq.n	8011b1e <__swsetup_r+0x9e>
 8011b08:	2300      	movs	r3, #0
 8011b0a:	60a3      	str	r3, [r4, #8]
 8011b0c:	6963      	ldr	r3, [r4, #20]
 8011b0e:	425b      	negs	r3, r3
 8011b10:	61a3      	str	r3, [r4, #24]
 8011b12:	6923      	ldr	r3, [r4, #16]
 8011b14:	b943      	cbnz	r3, 8011b28 <__swsetup_r+0xa8>
 8011b16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b1a:	d1c4      	bne.n	8011aa6 <__swsetup_r+0x26>
 8011b1c:	bd38      	pop	{r3, r4, r5, pc}
 8011b1e:	0781      	lsls	r1, r0, #30
 8011b20:	bf58      	it	pl
 8011b22:	6963      	ldrpl	r3, [r4, #20]
 8011b24:	60a3      	str	r3, [r4, #8]
 8011b26:	e7f4      	b.n	8011b12 <__swsetup_r+0x92>
 8011b28:	2000      	movs	r0, #0
 8011b2a:	e7f7      	b.n	8011b1c <__swsetup_r+0x9c>
 8011b2c:	20000164 	.word	0x20000164

08011b30 <__swhatbuf_r>:
 8011b30:	b570      	push	{r4, r5, r6, lr}
 8011b32:	460c      	mov	r4, r1
 8011b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b38:	2900      	cmp	r1, #0
 8011b3a:	b096      	sub	sp, #88	; 0x58
 8011b3c:	4615      	mov	r5, r2
 8011b3e:	461e      	mov	r6, r3
 8011b40:	da0d      	bge.n	8011b5e <__swhatbuf_r+0x2e>
 8011b42:	89a3      	ldrh	r3, [r4, #12]
 8011b44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011b48:	f04f 0100 	mov.w	r1, #0
 8011b4c:	bf0c      	ite	eq
 8011b4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011b52:	2340      	movne	r3, #64	; 0x40
 8011b54:	2000      	movs	r0, #0
 8011b56:	6031      	str	r1, [r6, #0]
 8011b58:	602b      	str	r3, [r5, #0]
 8011b5a:	b016      	add	sp, #88	; 0x58
 8011b5c:	bd70      	pop	{r4, r5, r6, pc}
 8011b5e:	466a      	mov	r2, sp
 8011b60:	f000 f872 	bl	8011c48 <_fstat_r>
 8011b64:	2800      	cmp	r0, #0
 8011b66:	dbec      	blt.n	8011b42 <__swhatbuf_r+0x12>
 8011b68:	9901      	ldr	r1, [sp, #4]
 8011b6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011b6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011b72:	4259      	negs	r1, r3
 8011b74:	4159      	adcs	r1, r3
 8011b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b7a:	e7eb      	b.n	8011b54 <__swhatbuf_r+0x24>

08011b7c <__smakebuf_r>:
 8011b7c:	898b      	ldrh	r3, [r1, #12]
 8011b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b80:	079d      	lsls	r5, r3, #30
 8011b82:	4606      	mov	r6, r0
 8011b84:	460c      	mov	r4, r1
 8011b86:	d507      	bpl.n	8011b98 <__smakebuf_r+0x1c>
 8011b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b8c:	6023      	str	r3, [r4, #0]
 8011b8e:	6123      	str	r3, [r4, #16]
 8011b90:	2301      	movs	r3, #1
 8011b92:	6163      	str	r3, [r4, #20]
 8011b94:	b002      	add	sp, #8
 8011b96:	bd70      	pop	{r4, r5, r6, pc}
 8011b98:	ab01      	add	r3, sp, #4
 8011b9a:	466a      	mov	r2, sp
 8011b9c:	f7ff ffc8 	bl	8011b30 <__swhatbuf_r>
 8011ba0:	9900      	ldr	r1, [sp, #0]
 8011ba2:	4605      	mov	r5, r0
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	f7fe fec3 	bl	8010930 <_malloc_r>
 8011baa:	b948      	cbnz	r0, 8011bc0 <__smakebuf_r+0x44>
 8011bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bb0:	059a      	lsls	r2, r3, #22
 8011bb2:	d4ef      	bmi.n	8011b94 <__smakebuf_r+0x18>
 8011bb4:	f023 0303 	bic.w	r3, r3, #3
 8011bb8:	f043 0302 	orr.w	r3, r3, #2
 8011bbc:	81a3      	strh	r3, [r4, #12]
 8011bbe:	e7e3      	b.n	8011b88 <__smakebuf_r+0xc>
 8011bc0:	89a3      	ldrh	r3, [r4, #12]
 8011bc2:	6020      	str	r0, [r4, #0]
 8011bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bc8:	81a3      	strh	r3, [r4, #12]
 8011bca:	9b00      	ldr	r3, [sp, #0]
 8011bcc:	6163      	str	r3, [r4, #20]
 8011bce:	9b01      	ldr	r3, [sp, #4]
 8011bd0:	6120      	str	r0, [r4, #16]
 8011bd2:	b15b      	cbz	r3, 8011bec <__smakebuf_r+0x70>
 8011bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bd8:	4630      	mov	r0, r6
 8011bda:	f000 f847 	bl	8011c6c <_isatty_r>
 8011bde:	b128      	cbz	r0, 8011bec <__smakebuf_r+0x70>
 8011be0:	89a3      	ldrh	r3, [r4, #12]
 8011be2:	f023 0303 	bic.w	r3, r3, #3
 8011be6:	f043 0301 	orr.w	r3, r3, #1
 8011bea:	81a3      	strh	r3, [r4, #12]
 8011bec:	89a3      	ldrh	r3, [r4, #12]
 8011bee:	431d      	orrs	r5, r3
 8011bf0:	81a5      	strh	r5, [r4, #12]
 8011bf2:	e7cf      	b.n	8011b94 <__smakebuf_r+0x18>

08011bf4 <memmove>:
 8011bf4:	4288      	cmp	r0, r1
 8011bf6:	b510      	push	{r4, lr}
 8011bf8:	eb01 0402 	add.w	r4, r1, r2
 8011bfc:	d902      	bls.n	8011c04 <memmove+0x10>
 8011bfe:	4284      	cmp	r4, r0
 8011c00:	4623      	mov	r3, r4
 8011c02:	d807      	bhi.n	8011c14 <memmove+0x20>
 8011c04:	1e43      	subs	r3, r0, #1
 8011c06:	42a1      	cmp	r1, r4
 8011c08:	d008      	beq.n	8011c1c <memmove+0x28>
 8011c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c12:	e7f8      	b.n	8011c06 <memmove+0x12>
 8011c14:	4402      	add	r2, r0
 8011c16:	4601      	mov	r1, r0
 8011c18:	428a      	cmp	r2, r1
 8011c1a:	d100      	bne.n	8011c1e <memmove+0x2a>
 8011c1c:	bd10      	pop	{r4, pc}
 8011c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c26:	e7f7      	b.n	8011c18 <memmove+0x24>

08011c28 <_close_r>:
 8011c28:	b538      	push	{r3, r4, r5, lr}
 8011c2a:	4d06      	ldr	r5, [pc, #24]	; (8011c44 <_close_r+0x1c>)
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	4604      	mov	r4, r0
 8011c30:	4608      	mov	r0, r1
 8011c32:	602b      	str	r3, [r5, #0]
 8011c34:	f7ef fdcf 	bl	80017d6 <_close>
 8011c38:	1c43      	adds	r3, r0, #1
 8011c3a:	d102      	bne.n	8011c42 <_close_r+0x1a>
 8011c3c:	682b      	ldr	r3, [r5, #0]
 8011c3e:	b103      	cbz	r3, 8011c42 <_close_r+0x1a>
 8011c40:	6023      	str	r3, [r4, #0]
 8011c42:	bd38      	pop	{r3, r4, r5, pc}
 8011c44:	20007908 	.word	0x20007908

08011c48 <_fstat_r>:
 8011c48:	b538      	push	{r3, r4, r5, lr}
 8011c4a:	4d07      	ldr	r5, [pc, #28]	; (8011c68 <_fstat_r+0x20>)
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	4604      	mov	r4, r0
 8011c50:	4608      	mov	r0, r1
 8011c52:	4611      	mov	r1, r2
 8011c54:	602b      	str	r3, [r5, #0]
 8011c56:	f7ef fdca 	bl	80017ee <_fstat>
 8011c5a:	1c43      	adds	r3, r0, #1
 8011c5c:	d102      	bne.n	8011c64 <_fstat_r+0x1c>
 8011c5e:	682b      	ldr	r3, [r5, #0]
 8011c60:	b103      	cbz	r3, 8011c64 <_fstat_r+0x1c>
 8011c62:	6023      	str	r3, [r4, #0]
 8011c64:	bd38      	pop	{r3, r4, r5, pc}
 8011c66:	bf00      	nop
 8011c68:	20007908 	.word	0x20007908

08011c6c <_isatty_r>:
 8011c6c:	b538      	push	{r3, r4, r5, lr}
 8011c6e:	4d06      	ldr	r5, [pc, #24]	; (8011c88 <_isatty_r+0x1c>)
 8011c70:	2300      	movs	r3, #0
 8011c72:	4604      	mov	r4, r0
 8011c74:	4608      	mov	r0, r1
 8011c76:	602b      	str	r3, [r5, #0]
 8011c78:	f7ef fdc9 	bl	800180e <_isatty>
 8011c7c:	1c43      	adds	r3, r0, #1
 8011c7e:	d102      	bne.n	8011c86 <_isatty_r+0x1a>
 8011c80:	682b      	ldr	r3, [r5, #0]
 8011c82:	b103      	cbz	r3, 8011c86 <_isatty_r+0x1a>
 8011c84:	6023      	str	r3, [r4, #0]
 8011c86:	bd38      	pop	{r3, r4, r5, pc}
 8011c88:	20007908 	.word	0x20007908

08011c8c <_lseek_r>:
 8011c8c:	b538      	push	{r3, r4, r5, lr}
 8011c8e:	4d07      	ldr	r5, [pc, #28]	; (8011cac <_lseek_r+0x20>)
 8011c90:	4604      	mov	r4, r0
 8011c92:	4608      	mov	r0, r1
 8011c94:	4611      	mov	r1, r2
 8011c96:	2200      	movs	r2, #0
 8011c98:	602a      	str	r2, [r5, #0]
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	f7ef fdc2 	bl	8001824 <_lseek>
 8011ca0:	1c43      	adds	r3, r0, #1
 8011ca2:	d102      	bne.n	8011caa <_lseek_r+0x1e>
 8011ca4:	682b      	ldr	r3, [r5, #0]
 8011ca6:	b103      	cbz	r3, 8011caa <_lseek_r+0x1e>
 8011ca8:	6023      	str	r3, [r4, #0]
 8011caa:	bd38      	pop	{r3, r4, r5, pc}
 8011cac:	20007908 	.word	0x20007908

08011cb0 <_read_r>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	4d07      	ldr	r5, [pc, #28]	; (8011cd0 <_read_r+0x20>)
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	4608      	mov	r0, r1
 8011cb8:	4611      	mov	r1, r2
 8011cba:	2200      	movs	r2, #0
 8011cbc:	602a      	str	r2, [r5, #0]
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	f7ef fd50 	bl	8001764 <_read>
 8011cc4:	1c43      	adds	r3, r0, #1
 8011cc6:	d102      	bne.n	8011cce <_read_r+0x1e>
 8011cc8:	682b      	ldr	r3, [r5, #0]
 8011cca:	b103      	cbz	r3, 8011cce <_read_r+0x1e>
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	bd38      	pop	{r3, r4, r5, pc}
 8011cd0:	20007908 	.word	0x20007908

08011cd4 <_write_r>:
 8011cd4:	b538      	push	{r3, r4, r5, lr}
 8011cd6:	4d07      	ldr	r5, [pc, #28]	; (8011cf4 <_write_r+0x20>)
 8011cd8:	4604      	mov	r4, r0
 8011cda:	4608      	mov	r0, r1
 8011cdc:	4611      	mov	r1, r2
 8011cde:	2200      	movs	r2, #0
 8011ce0:	602a      	str	r2, [r5, #0]
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	f7ef fd5b 	bl	800179e <_write>
 8011ce8:	1c43      	adds	r3, r0, #1
 8011cea:	d102      	bne.n	8011cf2 <_write_r+0x1e>
 8011cec:	682b      	ldr	r3, [r5, #0]
 8011cee:	b103      	cbz	r3, 8011cf2 <_write_r+0x1e>
 8011cf0:	6023      	str	r3, [r4, #0]
 8011cf2:	bd38      	pop	{r3, r4, r5, pc}
 8011cf4:	20007908 	.word	0x20007908

08011cf8 <memcpy>:
 8011cf8:	440a      	add	r2, r1
 8011cfa:	4291      	cmp	r1, r2
 8011cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011d00:	d100      	bne.n	8011d04 <memcpy+0xc>
 8011d02:	4770      	bx	lr
 8011d04:	b510      	push	{r4, lr}
 8011d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d0e:	4291      	cmp	r1, r2
 8011d10:	d1f9      	bne.n	8011d06 <memcpy+0xe>
 8011d12:	bd10      	pop	{r4, pc}

08011d14 <_malloc_usable_size_r>:
 8011d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d18:	1f18      	subs	r0, r3, #4
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	bfbc      	itt	lt
 8011d1e:	580b      	ldrlt	r3, [r1, r0]
 8011d20:	18c0      	addlt	r0, r0, r3
 8011d22:	4770      	bx	lr

08011d24 <_init>:
 8011d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d26:	bf00      	nop
 8011d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d2a:	bc08      	pop	{r3}
 8011d2c:	469e      	mov	lr, r3
 8011d2e:	4770      	bx	lr

08011d30 <_fini>:
 8011d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d32:	bf00      	nop
 8011d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d36:	bc08      	pop	{r3}
 8011d38:	469e      	mov	lr, r3
 8011d3a:	4770      	bx	lr
