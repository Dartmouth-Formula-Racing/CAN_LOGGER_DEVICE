
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f820  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800fa20  0800fa20  0001fa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcbc  0800fcbc  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcbc  0800fcbc  0001fcbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcc4  0800fcc4  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcc4  0800fcc4  0001fcc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcc8  0800fcc8  0001fcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800fccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b60  20000168  0800fe34  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cc8  0800fe34  00024cc8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e8a5  00000000  00000000  000201d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a45  00000000  00000000  0003ea7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  000434c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001213  00000000  00000000  00044ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd20  00000000  00000000  00045eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020705  00000000  00000000  00073bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001007cd  00000000  00000000  000942d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bcc  00000000  00000000  00194aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0019b674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fa08 	.word	0x0800fa08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	0800fa08 	.word	0x0800fa08

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 ff03 	bl	80013ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f906 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa1e 	bl	8000a28 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f9f6 	bl	80009dc <MX_DMA_Init>
  MX_CAN1_Init();
 80005f0:	f000 f968 	bl	80008c4 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f4:	f000 f99c 	bl	8000930 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f9c0 	bl	800097c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fc:	f008 fee6 	bl	80093cc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000600:	f00d fade 	bl	800dbc0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060a:	4860      	ldr	r0, [pc, #384]	; (800078c <main+0x1b0>)
 800060c:	f002 fb7e 	bl	8002d0c <HAL_GPIO_WritePin>

	HAL_CAN_Start(&hcan1);
 8000610:	485f      	ldr	r0, [pc, #380]	; (8000790 <main+0x1b4>)
 8000612:	f001 f953 	bl	80018bc <HAL_CAN_Start>
	CAN_Filter_Config();
 8000616:	f000 fb3d 	bl	8000c94 <CAN_Filter_Config>

	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 1) != FR_OK) {
 800061a:	2201      	movs	r2, #1
 800061c:	495d      	ldr	r1, [pc, #372]	; (8000794 <main+0x1b8>)
 800061e:	485e      	ldr	r0, [pc, #376]	; (8000798 <main+0x1bc>)
 8000620:	f00c fe50 	bl	800d2c4 <f_mount>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d004      	beq.n	8000634 <main+0x58>
		printf("\r\nMounting Failed!\r\n");
 800062a:	485c      	ldr	r0, [pc, #368]	; (800079c <main+0x1c0>)
 800062c:	f00e fa66 	bl	800eafc <puts>
		Error_Handler();
 8000630:	f000 fbb2 	bl	8000d98 <Error_Handler>
	}
	printf("Mounting succeeded...\r\n");
 8000634:	485a      	ldr	r0, [pc, #360]	; (80007a0 <main+0x1c4>)
 8000636:	f00e fa61 	bl	800eafc <puts>

	//Open file for writing (Create)
	if (f_open(&SDFile, "CAN.log", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 800063a:	220a      	movs	r2, #10
 800063c:	4959      	ldr	r1, [pc, #356]	; (80007a4 <main+0x1c8>)
 800063e:	485a      	ldr	r0, [pc, #360]	; (80007a8 <main+0x1cc>)
 8000640:	f00c fe86 	bl	800d350 <f_open>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d004      	beq.n	8000654 <main+0x78>
		printf("\r\nOpen Failed!\r\n");
 800064a:	4858      	ldr	r0, [pc, #352]	; (80007ac <main+0x1d0>)
 800064c:	f00e fa56 	bl	800eafc <puts>
		Error_Handler();
 8000650:	f000 fba2 	bl	8000d98 <Error_Handler>
	}
	printf("Starting new log...\r\n");
 8000654:	4856      	ldr	r0, [pc, #344]	; (80007b0 <main+0x1d4>)
 8000656:	f00e fa51 	bl	800eafc <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	buffer1[0] = '\00';
 800065a:	4b56      	ldr	r3, [pc, #344]	; (80007b4 <main+0x1d8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	buffer2[0] = '\00';
 8000660:	4b55      	ldr	r3, [pc, #340]	; (80007b8 <main+0x1dc>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	double_buffer_fill_level[0] = 0;
 8000666:	4b55      	ldr	r3, [pc, #340]	; (80007bc <main+0x1e0>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	double_buffer_fill_level[1] = 0;
 800066c:	4b53      	ldr	r3, [pc, #332]	; (80007bc <main+0x1e0>)
 800066e:	2200      	movs	r2, #0
 8000670:	705a      	strb	r2, [r3, #1]
	filling_buffer = 0;
 8000672:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <main+0x1e4>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]

	while (buffer_emptyings < MAX_BUFFER_EMPTYINGS) {
 8000678:	e06a      	b.n	8000750 <main+0x174>
		while (!buffer_filled);
 800067a:	bf00      	nop
 800067c:	4b51      	ldr	r3, [pc, #324]	; (80007c4 <main+0x1e8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0fb      	beq.n	800067c <main+0xa0>


		res = f_write(&SDFile, filling_buffer ? buffer1 : buffer2, ENCODED_CAN_SIZE_BYTES*CAN_MESSAGES_TO_BUFFER, (void*) &byteswritten);
 8000684:	4b4e      	ldr	r3, [pc, #312]	; (80007c0 <main+0x1e4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <main+0xb4>
 800068c:	4949      	ldr	r1, [pc, #292]	; (80007b4 <main+0x1d8>)
 800068e:	e000      	b.n	8000692 <main+0xb6>
 8000690:	4949      	ldr	r1, [pc, #292]	; (80007b8 <main+0x1dc>)
 8000692:	4b4d      	ldr	r3, [pc, #308]	; (80007c8 <main+0x1ec>)
 8000694:	f44f 52a4 	mov.w	r2, #5248	; 0x1480
 8000698:	4843      	ldr	r0, [pc, #268]	; (80007a8 <main+0x1cc>)
 800069a:	f00d f817 	bl	800d6cc <f_write>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b4a      	ldr	r3, [pc, #296]	; (80007cc <main+0x1f0>)
 80006a4:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(filling_buffer ? buffer1 : buffer2, ENCODED_CAN_SIZE_BYTES*CAN_MESSAGES_TO_BUFFER);
 80006a6:	4b46      	ldr	r3, [pc, #280]	; (80007c0 <main+0x1e4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <main+0xd6>
 80006ae:	4b41      	ldr	r3, [pc, #260]	; (80007b4 <main+0x1d8>)
 80006b0:	e000      	b.n	80006b4 <main+0xd8>
 80006b2:	4b41      	ldr	r3, [pc, #260]	; (80007b8 <main+0x1dc>)
 80006b4:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00d fb3f 	bl	800dd3c <CDC_Transmit_FS>

		if ((byteswritten == 0) || (res != FR_OK)) {
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <main+0x1ec>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <main+0xf2>
 80006c6:	4b41      	ldr	r3, [pc, #260]	; (80007cc <main+0x1f0>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d004      	beq.n	80006d8 <main+0xfc>
			printf("\r\nWriting Failed!\r\n");
 80006ce:	4840      	ldr	r0, [pc, #256]	; (80007d0 <main+0x1f4>)
 80006d0:	f00e fa14 	bl	800eafc <puts>
			Error_Handler();
 80006d4:	f000 fb60 	bl	8000d98 <Error_Handler>
		}

		buffer_emptyings++;
 80006d8:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <main+0x1f8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a3d      	ldr	r2, [pc, #244]	; (80007d4 <main+0x1f8>)
 80006e0:	6013      	str	r3, [r2, #0]
		printf("emptied buffer %d\n\r", !filling_buffer);
 80006e2:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <main+0x1e4>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	bf0c      	ite	eq
 80006ea:	2301      	moveq	r3, #1
 80006ec:	2300      	movne	r3, #0
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	4839      	ldr	r0, [pc, #228]	; (80007d8 <main+0x1fc>)
 80006f4:	f00e f99c 	bl	800ea30 <iprintf>
		printf("buffers emptied: %ld\n\r", buffer_emptyings);
 80006f8:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <main+0x1f8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	4837      	ldr	r0, [pc, #220]	; (80007dc <main+0x200>)
 8000700:	f00e f996 	bl	800ea30 <iprintf>
		printf("sizeof: %ld\n\r", byteswritten);
 8000704:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <main+0x1ec>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	4835      	ldr	r0, [pc, #212]	; (80007e0 <main+0x204>)
 800070c:	f00e f990 	bl	800ea30 <iprintf>

		total_size += byteswritten;
 8000710:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <main+0x208>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <main+0x1ec>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4413      	add	r3, r2
 800071a:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <main+0x208>)
 800071c:	6013      	str	r3, [r2, #0]
		if (filling_buffer) {
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <main+0x1e4>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d003      	beq.n	800072e <main+0x152>
			buffer1[0] = '\00';
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <main+0x1d8>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	e002      	b.n	8000734 <main+0x158>
		}
		else {
			buffer2[0] = '\00';
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <main+0x1dc>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
		}
		double_buffer_fill_level[!filling_buffer] = 0;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <main+0x1e4>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf0c      	ite	eq
 800073c:	2301      	moveq	r3, #1
 800073e:	2300      	movne	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	461a      	mov	r2, r3
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <main+0x1e0>)
 8000746:	2100      	movs	r1, #0
 8000748:	5499      	strb	r1, [r3, r2]
		buffer_filled = 0;
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <main+0x1e8>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
	while (buffer_emptyings < MAX_BUFFER_EMPTYINGS) {
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <main+0x1f8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8000758:	d38f      	bcc.n	800067a <main+0x9e>
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("%d Messages received!", MAX_BUFFER_EMPTYINGS * CAN_MESSAGES_TO_BUFFER);
 800075a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800075e:	4822      	ldr	r0, [pc, #136]	; (80007e8 <main+0x20c>)
 8000760:	f00e f966 	bl	800ea30 <iprintf>
	printf("total sizeof: %ld\n\r", total_size);
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <main+0x208>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	4820      	ldr	r0, [pc, #128]	; (80007ec <main+0x210>)
 800076c:	f00e f960 	bl	800ea30 <iprintf>

	printf("\r\nUnmounting!\r\n");
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <main+0x214>)
 8000772:	f00e f9c3 	bl	800eafc <puts>
	f_close(&SDFile);
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <main+0x1cc>)
 8000778:	f00d f99b 	bl	800dab2 <f_close>
	f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <main+0x1bc>)
 8000782:	f00c fd9f 	bl	800d2c4 <f_mount>
 8000786:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000788:	4618      	mov	r0, r3
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021400 	.word	0x40021400
 8000790:	20000184 	.word	0x20000184
 8000794:	20002cf4 	.word	0x20002cf4
 8000798:	20002cf8 	.word	0x20002cf8
 800079c:	0800fa20 	.word	0x0800fa20
 80007a0:	0800fa34 	.word	0x0800fa34
 80007a4:	0800fa4c 	.word	0x0800fa4c
 80007a8:	20002f28 	.word	0x20002f28
 80007ac:	0800fa54 	.word	0x0800fa54
 80007b0:	0800fa64 	.word	0x0800fa64
 80007b4:	200003d0 	.word	0x200003d0
 80007b8:	20001854 	.word	0x20001854
 80007bc:	20002cd8 	.word	0x20002cd8
 80007c0:	20002cda 	.word	0x20002cda
 80007c4:	20002ce0 	.word	0x20002ce0
 80007c8:	200003a8 	.word	0x200003a8
 80007cc:	20000378 	.word	0x20000378
 80007d0:	0800fa7c 	.word	0x0800fa7c
 80007d4:	20002cdc 	.word	0x20002cdc
 80007d8:	0800fa90 	.word	0x0800fa90
 80007dc:	0800faa4 	.word	0x0800faa4
 80007e0:	0800fabc 	.word	0x0800fabc
 80007e4:	20002ce4 	.word	0x20002ce4
 80007e8:	0800facc 	.word	0x0800facc
 80007ec:	0800fae4 	.word	0x0800fae4
 80007f0:	0800faf8 	.word	0x0800faf8

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2234      	movs	r2, #52	; 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f00e f991 	bl	800eb2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <SystemClock_Config+0xc8>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <SystemClock_Config+0xc8>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SystemClock_Config+0xc8>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <SystemClock_Config+0xcc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <SystemClock_Config+0xcc>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <SystemClock_Config+0xcc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000868:	2304      	movs	r3, #4
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800086c:	2304      	movs	r3, #4
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fd19 	bl	80042b0 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000884:	f000 fa88 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 ffb1 	bl	800480c <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008b0:	f000 fa72 	bl	8000d98 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3750      	adds	r7, #80	; 0x50
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_CAN1_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_CAN1_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_CAN1_Init+0x64>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_CAN1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_CAN1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_CAN1_Init+0x64>)
 80008e2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80008e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_CAN1_Init+0x64>)
 80008ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <MX_CAN1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_CAN1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_CAN1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_CAN1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_CAN1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_CAN1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_CAN1_Init+0x64>)
 8000916:	f000 fde9 	bl	80014ec <HAL_CAN_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000920:	f000 fa3a 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000184 	.word	0x20000184
 800092c:	40006400 	.word	0x40006400

08000930 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SDMMC1_SD_Init+0x44>)
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <MX_SDMMC1_SD_Init+0x48>)
 8000938:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SDMMC1_SD_Init+0x44>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SDMMC1_SD_Init+0x44>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SDMMC1_SD_Init+0x44>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SDMMC1_SD_Init+0x44>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_SDMMC1_SD_Init+0x44>)
 8000954:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000958:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SDMMC1_SD_Init+0x44>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_SDMMC1_SD_Init+0x44>)
 8000962:	f004 fda1 	bl	80054a8 <HAL_SD_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 800096c:	f000 fa14 	bl	8000d98 <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200001ac 	.word	0x200001ac
 8000978:	40012c00 	.word	0x40012c00

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <MX_USART3_UART_Init+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009c0:	f005 fe9a 	bl	80066f8 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f9e5 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200002f0 	.word	0x200002f0
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_DMA_Init+0x48>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <MX_DMA_Init+0x48>)
 80009e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_DMA_Init+0x48>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	203b      	movs	r0, #59	; 0x3b
 8000a00:	f001 fbe3 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a04:	203b      	movs	r0, #59	; 0x3b
 8000a06:	f001 fbfc 	bl	8002202 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2045      	movs	r0, #69	; 0x45
 8000a10:	f001 fbdb 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a14:	2045      	movs	r0, #69	; 0x45
 8000a16:	f001 fbf4 	bl	8002202 <HAL_NVIC_EnableIRQ>

}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b56      	ldr	r3, [pc, #344]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a55      	ldr	r2, [pc, #340]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b53      	ldr	r3, [pc, #332]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	4b50      	ldr	r3, [pc, #320]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a4f      	ldr	r2, [pc, #316]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6e:	4b4a      	ldr	r3, [pc, #296]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a49      	ldr	r2, [pc, #292]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a74:	f043 0320 	orr.w	r3, r3, #32
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b47      	ldr	r3, [pc, #284]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0320 	and.w	r3, r3, #32
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a43      	ldr	r2, [pc, #268]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b41      	ldr	r3, [pc, #260]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a3d      	ldr	r2, [pc, #244]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a37      	ldr	r2, [pc, #220]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <MX_GPIO_Init+0x170>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	482b      	ldr	r0, [pc, #172]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000aee:	f002 f90d 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2140      	movs	r1, #64	; 0x40
 8000af6:	482a      	ldr	r0, [pc, #168]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000af8:	f002 f908 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	4828      	ldr	r0, [pc, #160]	; (8000ba4 <MX_GPIO_Init+0x17c>)
 8000b02:	f002 f903 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <MX_GPIO_Init+0x180>)
 8000b1e:	f001 ff31 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000b3c:	f001 ff22 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000b40:	2384      	movs	r3, #132	; 0x84
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000b54:	f001 ff16 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b58:	2340      	movs	r3, #64	; 0x40
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000b70:	f001 ff08 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_GPIO_Init+0x17c>)
 8000b8c:	f001 fefa 	bl	8002984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b90:	bf00      	nop
 8000b92:	3730      	adds	r7, #48	; 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40021400 	.word	0x40021400
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40020800 	.word	0x40020800

08000bac <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000bac:	b5b0      	push	{r4, r5, r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af06      	add	r7, sp, #24
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) Error_Handler();
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000bb4:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	482f      	ldr	r0, [pc, #188]	; (8000c78 <Get_and_Append_CAN_Message_to_Buffer+0xcc>)
 8000bba:	f000 fec3 	bl	8001944 <HAL_CAN_GetRxMessage>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <Get_and_Append_CAN_Message_to_Buffer+0x1c>
 8000bc4:	f000 f8e8 	bl	8000d98 <Error_Handler>

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	80fb      	strh	r3, [r7, #6]
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000be8:	78db      	ldrb	r3, [r3, #3]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	80bb      	strh	r3, [r7, #4]
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000bfc:	795b      	ldrb	r3, [r3, #5]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	807b      	strh	r3, [r7, #2]
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000c06:	799b      	ldrb	r3, [r3, #6]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000c10:	79db      	ldrb	r3, [r3, #7]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	803b      	strh	r3, [r7, #0]

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES+1, "(%010ld) X %08lX#%04X%04X%04X%04X\n",
 8000c18:	f000 fc38 	bl	800148c <HAL_GetTick>
 8000c1c:	4605      	mov	r5, r0
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	88fa      	ldrh	r2, [r7, #6]
 8000c24:	88b9      	ldrh	r1, [r7, #4]
 8000c26:	8878      	ldrh	r0, [r7, #2]
 8000c28:	883c      	ldrh	r4, [r7, #0]
 8000c2a:	9404      	str	r4, [sp, #16]
 8000c2c:	9003      	str	r0, [sp, #12]
 8000c2e:	9102      	str	r1, [sp, #8]
 8000c30:	9201      	str	r2, [sp, #4]
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	462b      	mov	r3, r5
 8000c36:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <Get_and_Append_CAN_Message_to_Buffer+0xd0>)
 8000c38:	212a      	movs	r1, #42	; 0x2a
 8000c3a:	4811      	ldr	r0, [pc, #68]	; (8000c80 <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 8000c3c:	f00d fdf6 	bl	800e82c <sniprintf>
			HAL_GetTick(), RxHeader.ExtId, data1, data2, data3, data4);

	strcat(filling_buffer ? buffer2 : buffer1, encodedData);
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xd8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <Get_and_Append_CAN_Message_to_Buffer+0xa0>
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <Get_and_Append_CAN_Message_to_Buffer+0xdc>)
 8000c4a:	e000      	b.n	8000c4e <Get_and_Append_CAN_Message_to_Buffer+0xa2>
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8000c4e:	490c      	ldr	r1, [pc, #48]	; (8000c80 <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f00d ff5b 	bl	800eb0c <strcat>
	double_buffer_fill_level[filling_buffer]++;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xd8>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000c5c:	5cd2      	ldrb	r2, [r2, r3]
 8000c5e:	3201      	adds	r2, #1
 8000c60:	b2d1      	uxtb	r1, r2
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000c64:	54d1      	strb	r1, [r2, r3]
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200003c8 	.word	0x200003c8
 8000c74:	200003ac 	.word	0x200003ac
 8000c78:	20000184 	.word	0x20000184
 8000c7c:	0800fb08 	.word	0x0800fb08
 8000c80:	2000037c 	.word	0x2000037c
 8000c84:	20002cda 	.word	0x20002cda
 8000c88:	20001854 	.word	0x20001854
 8000c8c:	200003d0 	.word	0x200003d0
 8000c90:	20002cd8 	.word	0x20002cd8

08000c94 <CAN_Filter_Config>:


void CAN_Filter_Config(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8000c9e:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8000ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	0a1a      	lsrs	r2, r3, #8
 8000cb2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8000cc0:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000cc2:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8000cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc6:	0a1a      	lsrs	r2, r3, #8
 8000cc8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK) {
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480a      	ldr	r0, [pc, #40]	; (8000d14 <CAN_Filter_Config+0x80>)
 8000cea:	f000 fcfb 	bl	80016e4 <HAL_CAN_ConfigFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <CAN_Filter_Config+0x64>
		Error_Handler();
 8000cf4:	f000 f850 	bl	8000d98 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <CAN_Filter_Config+0x80>)
 8000cfc:	f000 ff34 	bl	8001b68 <HAL_CAN_ActivateNotification>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <CAN_Filter_Config+0x76>
			!= HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8000d06:	f000 f847 	bl	8000d98 <Error_Handler>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3730      	adds	r7, #48	; 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000184 	.word	0x20000184

08000d18 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER &&
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b80      	cmp	r3, #128	; 0x80
 8000d26:	d105      	bne.n	8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER) Error_Handler();
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d2a:	785b      	ldrb	r3, [r3, #1]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER &&
 8000d2c:	2b80      	cmp	r3, #128	; 0x80
 8000d2e:	d101      	bne.n	8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER) Error_Handler();
 8000d30:	f000 f832 	bl	8000d98 <Error_Handler>

	Get_and_Append_CAN_Message_to_Buffer();
 8000d34:	f7ff ff3a 	bl	8000bac <Get_and_Append_CAN_Message_to_Buffer>

	if (double_buffer_fill_level[filling_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d40:	5c9b      	ldrb	r3, [r3, r2]
 8000d42:	2b80      	cmp	r3, #128	; 0x80
 8000d44:	d10c      	bne.n	8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		buffer_filled = 1;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
		filling_buffer = !filling_buffer;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf0c      	ite	eq
 8000d54:	2301      	moveq	r3, #1
 8000d56:	2300      	movne	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d5e:	701a      	strb	r2, [r3, #0]
	}
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20002cd8 	.word	0x20002cd8
 8000d6c:	20002cda 	.word	0x20002cda
 8000d70:	20002ce0 	.word	0x20002ce0

08000d74 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000d7c:	1d39      	adds	r1, r7, #4
 8000d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d82:	2201      	movs	r2, #1
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <__io_putchar+0x20>)
 8000d86:	f005 fd05 	bl	8006794 <HAL_UART_Transmit>

	return ch;
 8000d8a:	687b      	ldr	r3, [r7, #4]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200002f0 	.word	0x200002f0

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <Error_Handler+0x1c>)
 8000da2:	f00d feab 	bl	800eafc <puts>
	  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <Error_Handler+0x20>)
 8000dae:	f001 ffad 	bl	8002d0c <HAL_GPIO_WritePin>

	while (1) {
 8000db2:	e7fe      	b.n	8000db2 <Error_Handler+0x1a>
 8000db4:	0800fb2c 	.word	0x0800fb2c
 8000db8:	40021400 	.word	0x40021400

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_MspInit+0x44>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_MspInit+0x44>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_MspInit+0x44>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_MspInit+0x44>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <HAL_CAN_MspInit+0x8c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12f      	bne.n	8000e86 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_CAN_MspInit+0x90>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_CAN_MspInit+0x90>)
 8000e2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_CAN_MspInit+0x90>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_CAN_MspInit+0x90>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_CAN_MspInit+0x90>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_CAN_MspInit+0x90>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e56:	2303      	movs	r3, #3
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e66:	2309      	movs	r3, #9
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <HAL_CAN_MspInit+0x94>)
 8000e72:	f001 fd87 	bl	8002984 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2014      	movs	r0, #20
 8000e7c:	f001 f9a5 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e80:	2014      	movs	r0, #20
 8000e82:	f001 f9be 	bl	8002202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40006400 	.word	0x40006400
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020c00 	.word	0x40020c00

08000e9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ae      	sub	sp, #184	; 0xb8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2290      	movs	r2, #144	; 0x90
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00d fe34 	bl	800eb2a <memset>
  if(hsd->Instance==SDMMC1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a73      	ldr	r2, [pc, #460]	; (8001094 <HAL_SD_MspInit+0x1f8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	f040 80de 	bne.w	800108a <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000ece:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000ed2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 feb9 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000eec:	f7ff ff54 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ef0:	4b69      	ldr	r3, [pc, #420]	; (8001098 <HAL_SD_MspInit+0x1fc>)
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	4a68      	ldr	r2, [pc, #416]	; (8001098 <HAL_SD_MspInit+0x1fc>)
 8000ef6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000efa:	6453      	str	r3, [r2, #68]	; 0x44
 8000efc:	4b66      	ldr	r3, [pc, #408]	; (8001098 <HAL_SD_MspInit+0x1fc>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f08:	4b63      	ldr	r3, [pc, #396]	; (8001098 <HAL_SD_MspInit+0x1fc>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a62      	ldr	r2, [pc, #392]	; (8001098 <HAL_SD_MspInit+0x1fc>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b60      	ldr	r3, [pc, #384]	; (8001098 <HAL_SD_MspInit+0x1fc>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f20:	4b5d      	ldr	r3, [pc, #372]	; (8001098 <HAL_SD_MspInit+0x1fc>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	4a5c      	ldr	r2, [pc, #368]	; (8001098 <HAL_SD_MspInit+0x1fc>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2c:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <HAL_SD_MspInit+0x1fc>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000f38:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f52:	230c      	movs	r3, #12
 8000f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	484f      	ldr	r0, [pc, #316]	; (800109c <HAL_SD_MspInit+0x200>)
 8000f60:	f001 fd10 	bl	8002984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f64:	2304      	movs	r3, #4
 8000f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4845      	ldr	r0, [pc, #276]	; (80010a0 <HAL_SD_MspInit+0x204>)
 8000f8a:	f001 fcfb 	bl	8002984 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000f8e:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000f90:	4a45      	ldr	r2, [pc, #276]	; (80010a8 <HAL_SD_MspInit+0x20c>)
 8000f92:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f94:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9c:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa2:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa8:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fae:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fb0:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fb8:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fbe:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc6:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fcc:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fd2:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000fd8:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fe2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000fe8:	482e      	ldr	r0, [pc, #184]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000fea:	f001 f925 	bl	8002238 <HAL_DMA_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8000ff4:	f7ff fed0 	bl	8000d98 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a2a      	ldr	r2, [pc, #168]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ffe:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <HAL_SD_MspInit+0x208>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001006:	4a2a      	ldr	r2, [pc, #168]	; (80010b0 <HAL_SD_MspInit+0x214>)
 8001008:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_SD_MspInit+0x210>)
 800100c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001010:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001014:	2240      	movs	r2, #64	; 0x40
 8001016:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_SD_MspInit+0x210>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001024:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001030:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001034:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001038:	2220      	movs	r2, #32
 800103a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_SD_MspInit+0x210>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001044:	2204      	movs	r2, #4
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_SD_MspInit+0x210>)
 800104a:	2203      	movs	r2, #3
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001050:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001058:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800105c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800105e:	4813      	ldr	r0, [pc, #76]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001060:	f001 f8ea 	bl	8002238 <HAL_DMA_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800106a:	f7ff fe95 	bl	8000d98 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_SD_MspInit+0x210>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2031      	movs	r0, #49	; 0x31
 8001080:	f001 f8a3 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001084:	2031      	movs	r0, #49	; 0x31
 8001086:	f001 f8bc 	bl	8002202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	37b8      	adds	r7, #184	; 0xb8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40012c00 	.word	0x40012c00
 8001098:	40023800 	.word	0x40023800
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	20000230 	.word	0x20000230
 80010a8:	40026458 	.word	0x40026458
 80010ac:	20000290 	.word	0x20000290
 80010b0:	400264a0 	.word	0x400264a0

080010b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0ae      	sub	sp, #184	; 0xb8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2290      	movs	r2, #144	; 0x90
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00d fd28 	bl	800eb2a <memset>
  if(huart->Instance==USART3)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a22      	ldr	r2, [pc, #136]	; (8001168 <HAL_UART_MspInit+0xb4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d13c      	bne.n	800115e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fdb0 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010fe:	f7ff fe4b 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_UART_MspInit+0xb8>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_UART_MspInit+0xb8>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_UART_MspInit+0xb8>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_UART_MspInit+0xb8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <HAL_UART_MspInit+0xb8>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_UART_MspInit+0xb8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001132:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800114c:	2307      	movs	r3, #7
 800114e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001152:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_UART_MspInit+0xbc>)
 800115a:	f001 fc13 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	37b8      	adds	r7, #184	; 0xb8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40004800 	.word	0x40004800
 800116c:	40023800 	.word	0x40023800
 8001170:	40020c00 	.word	0x40020c00

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c0:	f000 f950 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <CAN1_RX0_IRQHandler+0x10>)
 80011ce:	f000 fcf1 	bl	8001bb4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000184 	.word	0x20000184

080011dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <SDMMC1_IRQHandler+0x10>)
 80011e2:	f004 fbe1 	bl	80059a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001ac 	.word	0x200001ac

080011f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <DMA2_Stream3_IRQHandler+0x10>)
 80011f6:	f001 f94f 	bl	8002498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000230 	.word	0x20000230

08001204 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <OTG_FS_IRQHandler+0x10>)
 800120a:	f001 fede 	bl	8002fca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20004674 	.word	0x20004674

08001218 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <DMA2_Stream6_IRQHandler+0x10>)
 800121e:	f001 f93b 	bl	8002498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000290 	.word	0x20000290

0800122c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e00a      	b.n	8001254 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800123e:	f3af 8000 	nop.w
 8001242:	4601      	mov	r1, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf0      	blt.n	800123e <_read+0x12>
  }

  return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e009      	b.n	800128c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd77 	bl	8000d74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf1      	blt.n	8001278 <_write+0x12>
  }
  return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_close>:

int _close(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c6:	605a      	str	r2, [r3, #4]
  return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_isatty>:

int _isatty(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f00d fc10 	bl	800eb5c <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20080000 	.word	0x20080000
 8001368:	00000400 	.word	0x00000400
 800136c:	20002ce8 	.word	0x20002ce8
 8001370:	20004cc8 	.word	0x20004cc8

08001374 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800139e:	490e      	ldr	r1, [pc, #56]	; (80013d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b4:	4c0b      	ldr	r4, [pc, #44]	; (80013e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013c2:	f7ff ffd7 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c6:	f00d fbcf 	bl	800eb68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff f907 	bl	80005dc <main>
  bx  lr    
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80013dc:	0800fccc 	.word	0x0800fccc
  ldr r2, =_sbss
 80013e0:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80013e4:	20004cc8 	.word	0x20004cc8

080013e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC_IRQHandler>

080013ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ee:	2003      	movs	r0, #3
 80013f0:	f000 fee0 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f000 f805 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fa:	f7ff fcdf 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fefb 	bl	800221e <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001440:	f000 fec3 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000000 	.word	0x20000000
 800145c:	20000008 	.word	0x20000008
 8001460:	20000004 	.word	0x20000004

08001464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x20>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x24>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_IncTick+0x24>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000008 	.word	0x20000008
 8001488:	20002cec 	.word	0x20002cec

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_GetTick+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20002cec 	.word	0x20002cec

080014a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff ffee 	bl	800148c <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014bc:	d005      	beq.n	80014ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_Delay+0x44>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ca:	bf00      	nop
 80014cc:	f7ff ffde 	bl	800148c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8f7      	bhi.n	80014cc <HAL_Delay+0x28>
  {
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000008 	.word	0x20000008

080014ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0ed      	b.n	80016da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fc7a 	bl	8000e04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001520:	f7ff ffb4 	bl	800148c <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001526:	e012      	b.n	800154e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001528:	f7ff ffb0 	bl	800148c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d90b      	bls.n	800154e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2205      	movs	r2, #5
 8001546:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0c5      	b.n	80016da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0e5      	beq.n	8001528 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0202 	bic.w	r2, r2, #2
 800156a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156c:	f7ff ff8e 	bl	800148c <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001572:	e012      	b.n	800159a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001574:	f7ff ff8a 	bl	800148c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b0a      	cmp	r3, #10
 8001580:	d90b      	bls.n	800159a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2205      	movs	r2, #5
 8001592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e09f      	b.n	80016da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e5      	bne.n	8001574 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7e1b      	ldrb	r3, [r3, #24]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d108      	bne.n	80015c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e007      	b.n	80015d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7e5b      	ldrb	r3, [r3, #25]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d108      	bne.n	80015ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e007      	b.n	80015fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e9b      	ldrb	r3, [r3, #26]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d108      	bne.n	8001616 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0220 	orr.w	r2, r2, #32
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e007      	b.n	8001626 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0220 	bic.w	r2, r2, #32
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7edb      	ldrb	r3, [r3, #27]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0210 	bic.w	r2, r2, #16
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e007      	b.n	8001650 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0210 	orr.w	r2, r2, #16
 800164e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7f1b      	ldrb	r3, [r3, #28]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d108      	bne.n	800166a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0208 	orr.w	r2, r2, #8
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e007      	b.n	800167a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0208 	bic.w	r2, r2, #8
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7f5b      	ldrb	r3, [r3, #29]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0204 	orr.w	r2, r2, #4
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e007      	b.n	80016a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0204 	bic.w	r2, r2, #4
 80016a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	ea42 0103 	orr.w	r1, r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	1e5a      	subs	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016fc:	7cfb      	ldrb	r3, [r7, #19]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d003      	beq.n	800170a <HAL_CAN_ConfigFilter+0x26>
 8001702:	7cfb      	ldrb	r3, [r7, #19]
 8001704:	2b02      	cmp	r3, #2
 8001706:	f040 80c7 	bne.w	8001898 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a69      	ldr	r2, [pc, #420]	; (80018b4 <HAL_CAN_ConfigFilter+0x1d0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d001      	beq.n	8001718 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_CAN_ConfigFilter+0x1d4>)
 8001716:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	4a63      	ldr	r2, [pc, #396]	; (80018b8 <HAL_CAN_ConfigFilter+0x1d4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d111      	bne.n	8001754 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001736:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	431a      	orrs	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	2201      	movs	r2, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43db      	mvns	r3, r3
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d123      	bne.n	80017c6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	401a      	ands	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3248      	adds	r2, #72	; 0x48
 80017a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017bc:	6979      	ldr	r1, [r7, #20]
 80017be:	3348      	adds	r3, #72	; 0x48
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d122      	bne.n	8001814 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3248      	adds	r2, #72	; 0x48
 80017f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001808:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800180a:	6979      	ldr	r1, [r7, #20]
 800180c:	3348      	adds	r3, #72	; 0x48
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800182e:	e007      	b.n	8001840 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800185a:	e007      	b.n	800186c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d107      	bne.n	8001884 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800188a:	f023 0201 	bic.w	r2, r3, #1
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e006      	b.n	80018a6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
  }
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40003400 	.word	0x40003400
 80018b8:	40006400 	.word	0x40006400

080018bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d12e      	bne.n	800192e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018e8:	f7ff fdd0 	bl	800148c <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ee:	e012      	b.n	8001916 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f0:	f7ff fdcc 	bl	800148c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b0a      	cmp	r3, #10
 80018fc:	d90b      	bls.n	8001916 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2205      	movs	r2, #5
 800190e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e012      	b.n	800193c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e5      	bne.n	80018f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e006      	b.n	800193c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
  }
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001958:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d003      	beq.n	8001968 <HAL_CAN_GetRxMessage+0x24>
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2b02      	cmp	r3, #2
 8001964:	f040 80f3 	bne.w	8001b4e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10e      	bne.n	800198c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d116      	bne.n	80019aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0e7      	b.n	8001b5c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d107      	bne.n	80019aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0d8      	b.n	8001b5c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	331b      	adds	r3, #27
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0204 	and.w	r2, r3, #4
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10c      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	331b      	adds	r3, #27
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0d5b      	lsrs	r3, r3, #21
 80019d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e00b      	b.n	80019fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	331b      	adds	r3, #27
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	331b      	adds	r3, #27
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0202 	and.w	r2, r3, #2
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	331b      	adds	r3, #27
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 020f 	and.w	r2, r3, #15
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	331b      	adds	r3, #27
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4413      	add	r3, r2
 8001a34:	3304      	adds	r3, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	331b      	adds	r3, #27
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0a1a      	lsrs	r2, r3, #8
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0c1a      	lsrs	r2, r3, #16
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0e1a      	lsrs	r2, r3, #24
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3303      	adds	r3, #3
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0a1a      	lsrs	r2, r3, #8
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	3305      	adds	r3, #5
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	0c1a      	lsrs	r2, r3, #16
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	3306      	adds	r3, #6
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0e1a      	lsrs	r2, r3, #24
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	3307      	adds	r3, #7
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d108      	bne.n	8001b3a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0220 	orr.w	r2, r2, #32
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	e007      	b.n	8001b4a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0220 	orr.w	r2, r2, #32
 8001b48:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e006      	b.n	8001b5c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
  }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b78:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d002      	beq.n	8001b86 <HAL_CAN_ActivateNotification+0x1e>
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d109      	bne.n	8001b9a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6959      	ldr	r1, [r3, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e006      	b.n	8001ba8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
  }
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d07c      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d023      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f983 	bl	8001f22 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c1c:	e016      	b.n	8001c4c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c30:	e00c      	b.n	8001c4c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
 8001c44:	e002      	b.n	8001c4c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f989 	bl	8001f5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d024      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f963 	bl	8001f36 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c70:	e016      	b.n	8001ca0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	e00c      	b.n	8001ca0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
 8001c98:	e002      	b.n	8001ca0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f969 	bl	8001f72 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d024      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f943 	bl	8001f4a <HAL_CAN_TxMailbox2CompleteCallback>
 8001cc4:	e016      	b.n	8001cf4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	e00c      	b.n	8001cf4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	e002      	b.n	8001cf4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f949 	bl	8001f86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00c      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2210      	movs	r2, #16
 8001d16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2208      	movs	r2, #8
 8001d32:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f930 	bl	8001f9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7fe ffe0 	bl	8000d18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00c      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2208      	movs	r2, #8
 8001d96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f912 	bl	8001fc2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d009      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8f9 	bl	8001fae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8fc 	bl	8001fd6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2208      	movs	r2, #8
 8001df8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8f5 	bl	8001fea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d07b      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d072      	beq.n	8001efa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d008      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d043      	beq.n	8001efa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d03e      	beq.n	8001efa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e82:	2b60      	cmp	r3, #96	; 0x60
 8001e84:	d02b      	beq.n	8001ede <HAL_CAN_IRQHandler+0x32a>
 8001e86:	2b60      	cmp	r3, #96	; 0x60
 8001e88:	d82e      	bhi.n	8001ee8 <HAL_CAN_IRQHandler+0x334>
 8001e8a:	2b50      	cmp	r3, #80	; 0x50
 8001e8c:	d022      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x320>
 8001e8e:	2b50      	cmp	r3, #80	; 0x50
 8001e90:	d82a      	bhi.n	8001ee8 <HAL_CAN_IRQHandler+0x334>
 8001e92:	2b40      	cmp	r3, #64	; 0x40
 8001e94:	d019      	beq.n	8001eca <HAL_CAN_IRQHandler+0x316>
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d826      	bhi.n	8001ee8 <HAL_CAN_IRQHandler+0x334>
 8001e9a:	2b30      	cmp	r3, #48	; 0x30
 8001e9c:	d010      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x30c>
 8001e9e:	2b30      	cmp	r3, #48	; 0x30
 8001ea0:	d822      	bhi.n	8001ee8 <HAL_CAN_IRQHandler+0x334>
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d002      	beq.n	8001eac <HAL_CAN_IRQHandler+0x2f8>
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d005      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001eaa:	e01d      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb4:	e019      	b.n	8001eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f043 0310 	orr.w	r3, r3, #16
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ebe:	e014      	b.n	8001eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ec8:	e00f      	b.n	8001eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ed2:	e00a      	b.n	8001eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001edc:	e005      	b.n	8001eea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ee6:	e000      	b.n	8001eea <HAL_CAN_IRQHandler+0x336>
            break;
 8001ee8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ef8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2204      	movs	r2, #4
 8001f00:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f872 	bl	8001ffe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <__NVIC_SetPriorityGrouping+0x40>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	4313      	orrs	r3, r2
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x40>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00
 8002058:	05fa0000 	.word	0x05fa0000

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4907      	ldr	r1, [pc, #28]	; (80020b0 <__NVIC_EnableIRQ+0x38>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e100 	.word	0xe000e100

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	; (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	; (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002194:	f7ff ff8e 	bl	80020b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff29 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff3e 	bl	800205c <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff8e 	bl	8002108 <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5d 	bl	80020b4 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff31 	bl	8002078 <__NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffa2 	bl	8002170 <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff f922 	bl	800148c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e099      	b.n	8002388 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002274:	e00f      	b.n	8002296 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002276:	f7ff f909 	bl	800148c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b05      	cmp	r3, #5
 8002282:	d908      	bls.n	8002296 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2203      	movs	r2, #3
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e078      	b.n	8002388 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e8      	bne.n	8002276 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_DMA_Init+0x158>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d107      	bne.n	8002300 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	4313      	orrs	r3, r2
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f023 0307 	bic.w	r3, r3, #7
 8002316:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	2b04      	cmp	r3, #4
 8002328:	d117      	bne.n	800235a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 faa5 	bl	800288c <DMA_CheckFifoParam>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2240      	movs	r2, #64	; 0x40
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002356:	2301      	movs	r3, #1
 8002358:	e016      	b.n	8002388 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fa5c 	bl	8002820 <DMA_CalcBaseAndBitshift>
 8002368:	4603      	mov	r3, r0
 800236a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	223f      	movs	r2, #63	; 0x3f
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	e010803f 	.word	0xe010803f

08002394 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_DMA_Start_IT+0x26>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e048      	b.n	800244c <HAL_DMA_Start_IT+0xb8>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d137      	bne.n	800243e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2202      	movs	r2, #2
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f9ee 	bl	80027c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	223f      	movs	r2, #63	; 0x3f
 80023ee:	409a      	lsls	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0216 	orr.w	r2, r2, #22
 8002402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002412:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0208 	orr.w	r2, r2, #8
 800242a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e005      	b.n	800244a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002446:	2302      	movs	r3, #2
 8002448:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800244a:	7dfb      	ldrb	r3, [r7, #23]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d004      	beq.n	8002472 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e00c      	b.n	800248c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2205      	movs	r2, #5
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80024a4:	4b8e      	ldr	r3, [pc, #568]	; (80026e0 <HAL_DMA_IRQHandler+0x248>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a8e      	ldr	r2, [pc, #568]	; (80026e4 <HAL_DMA_IRQHandler+0x24c>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0a9b      	lsrs	r3, r3, #10
 80024b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	2208      	movs	r2, #8
 80024c4:	409a      	lsls	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01a      	beq.n	8002504 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0204 	bic.w	r2, r2, #4
 80024ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	2208      	movs	r2, #8
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	2201      	movs	r2, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d012      	beq.n	800253a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	2201      	movs	r2, #1
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f043 0202 	orr.w	r2, r3, #2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	2204      	movs	r2, #4
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	2204      	movs	r2, #4
 800255e:	409a      	lsls	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f043 0204 	orr.w	r2, r3, #4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	2210      	movs	r2, #16
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d043      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03c      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	2210      	movs	r2, #16
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d018      	beq.n	80025da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d108      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d024      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e01f      	b.n	8002608 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
 80025d8:	e016      	b.n	8002608 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0208 	bic.w	r2, r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2220      	movs	r2, #32
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 808f 	beq.w	8002738 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8087 	beq.w	8002738 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	2220      	movs	r2, #32
 8002630:	409a      	lsls	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b05      	cmp	r3, #5
 8002640:	d136      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0216 	bic.w	r2, r2, #22
 8002650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002660:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d103      	bne.n	8002672 <HAL_DMA_IRQHandler+0x1da>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0208 	bic.w	r2, r2, #8
 8002680:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	223f      	movs	r2, #63	; 0x3f
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d07e      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
        }
        return;
 80026ae:	e079      	b.n	80027a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01d      	beq.n	80026fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d031      	beq.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
 80026dc:	e02c      	b.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
 80026de:	bf00      	nop
 80026e0:	20000000 	.word	0x20000000
 80026e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d023      	beq.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
 80026f8:	e01e      	b.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10f      	bne.n	8002728 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0210 	bic.w	r2, r2, #16
 8002716:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	2b00      	cmp	r3, #0
 800273e:	d032      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d022      	beq.n	8002792 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2205      	movs	r2, #5
 8002750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	3301      	adds	r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	d307      	bcc.n	8002780 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f2      	bne.n	8002764 <HAL_DMA_IRQHandler+0x2cc>
 800277e:	e000      	b.n	8002782 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002780:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
 80027a2:	e000      	b.n	80027a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027a4:	bf00      	nop
    }
  }
}
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b40      	cmp	r3, #64	; 0x40
 80027f0:	d108      	bne.n	8002804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002802:	e007      	b.n	8002814 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3b10      	subs	r3, #16
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <DMA_CalcBaseAndBitshift+0x60>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <DMA_CalcBaseAndBitshift+0x64>)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d908      	bls.n	8002860 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <DMA_CalcBaseAndBitshift+0x68>)
 8002856:	4013      	ands	r3, r2
 8002858:	1d1a      	adds	r2, r3, #4
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58
 800285e:	e006      	b.n	800286e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <DMA_CalcBaseAndBitshift+0x68>)
 8002868:	4013      	ands	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	aaaaaaab 	.word	0xaaaaaaab
 8002884:	0800fbec 	.word	0x0800fbec
 8002888:	fffffc00 	.word	0xfffffc00

0800288c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d11f      	bne.n	80028e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d856      	bhi.n	800295a <DMA_CheckFifoParam+0xce>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <DMA_CheckFifoParam+0x28>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	080028d7 	.word	0x080028d7
 80028bc:	080028c5 	.word	0x080028c5
 80028c0:	0800295b 	.word	0x0800295b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d046      	beq.n	800295e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d4:	e043      	b.n	800295e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028de:	d140      	bne.n	8002962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e4:	e03d      	b.n	8002962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ee:	d121      	bne.n	8002934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d837      	bhi.n	8002966 <DMA_CheckFifoParam+0xda>
 80028f6:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <DMA_CheckFifoParam+0x70>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	08002913 	.word	0x08002913
 8002904:	0800290d 	.word	0x0800290d
 8002908:	08002925 	.word	0x08002925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      break;
 8002910:	e030      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d025      	beq.n	800296a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002922:	e022      	b.n	800296a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800292c:	d11f      	bne.n	800296e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002932:	e01c      	b.n	800296e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d903      	bls.n	8002942 <DMA_CheckFifoParam+0xb6>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d003      	beq.n	8002948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002940:	e018      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      break;
 8002946:	e015      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00e      	beq.n	8002972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e00b      	b.n	8002972 <DMA_CheckFifoParam+0xe6>
      break;
 800295a:	bf00      	nop
 800295c:	e00a      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e008      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e006      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e004      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;   
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
    }
  } 
  
  return status; 
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e175      	b.n	8002c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029a4:	2201      	movs	r2, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	f040 8164 	bne.w	8002c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d005      	beq.n	80029da <HAL_GPIO_Init+0x56>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d130      	bne.n	8002a3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 0201 	and.w	r2, r3, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d017      	beq.n	8002a78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d123      	bne.n	8002acc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	08da      	lsrs	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3208      	adds	r2, #8
 8002a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	08da      	lsrs	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3208      	adds	r2, #8
 8002ac6:	69b9      	ldr	r1, [r7, #24]
 8002ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0203 	and.w	r2, r3, #3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80be 	beq.w	8002c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	4b66      	ldr	r3, [pc, #408]	; (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b18:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1a:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b26:	4a61      	ldr	r2, [pc, #388]	; (8002cac <HAL_GPIO_Init+0x328>)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_GPIO_Init+0x32c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d037      	beq.n	8002bc2 <HAL_GPIO_Init+0x23e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d031      	beq.n	8002bbe <HAL_GPIO_Init+0x23a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a56      	ldr	r2, [pc, #344]	; (8002cb8 <HAL_GPIO_Init+0x334>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d02b      	beq.n	8002bba <HAL_GPIO_Init+0x236>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a55      	ldr	r2, [pc, #340]	; (8002cbc <HAL_GPIO_Init+0x338>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d025      	beq.n	8002bb6 <HAL_GPIO_Init+0x232>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a54      	ldr	r2, [pc, #336]	; (8002cc0 <HAL_GPIO_Init+0x33c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01f      	beq.n	8002bb2 <HAL_GPIO_Init+0x22e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a53      	ldr	r2, [pc, #332]	; (8002cc4 <HAL_GPIO_Init+0x340>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d019      	beq.n	8002bae <HAL_GPIO_Init+0x22a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_GPIO_Init+0x344>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0x226>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a51      	ldr	r2, [pc, #324]	; (8002ccc <HAL_GPIO_Init+0x348>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00d      	beq.n	8002ba6 <HAL_GPIO_Init+0x222>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a50      	ldr	r2, [pc, #320]	; (8002cd0 <HAL_GPIO_Init+0x34c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x21e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4f      	ldr	r2, [pc, #316]	; (8002cd4 <HAL_GPIO_Init+0x350>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_GPIO_Init+0x21a>
 8002b9a:	2309      	movs	r3, #9
 8002b9c:	e012      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	e010      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	e00e      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e00c      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002baa:	2306      	movs	r3, #6
 8002bac:	e00a      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bae:	2305      	movs	r3, #5
 8002bb0:	e008      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e004      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e002      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_GPIO_Init+0x240>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	f002 0203 	and.w	r2, r2, #3
 8002bca:	0092      	lsls	r2, r2, #2
 8002bcc:	4093      	lsls	r3, r2
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bd4:	4935      	ldr	r1, [pc, #212]	; (8002cac <HAL_GPIO_Init+0x328>)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_GPIO_Init+0x354>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c06:	4a34      	ldr	r2, [pc, #208]	; (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c30:	4a29      	ldr	r2, [pc, #164]	; (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c5a:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c84:	4a14      	ldr	r2, [pc, #80]	; (8002cd8 <HAL_GPIO_Init+0x354>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	f67f ae86 	bls.w	80029a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3724      	adds	r7, #36	; 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40013800 	.word	0x40013800
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	40020c00 	.word	0x40020c00
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40021400 	.word	0x40021400
 8002cc8:	40021800 	.word	0x40021800
 8002ccc:	40021c00 	.word	0x40021c00
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	40022400 	.word	0x40022400
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e001      	b.n	8002cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d1c:	787b      	ldrb	r3, [r7, #1]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d28:	e003      	b.n	8002d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	041a      	lsls	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	619a      	str	r2, [r3, #24]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d40:	b08f      	sub	sp, #60	; 0x3c
 8002d42:	af0a      	add	r7, sp, #40	; 0x28
 8002d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e116      	b.n	8002f7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f00b f940 	bl	800dff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2203      	movs	r2, #3
 8002d74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 ffdb 	bl	8007d4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	687e      	ldr	r6, [r7, #4]
 8002d9c:	466d      	mov	r5, sp
 8002d9e:	f106 0410 	add.w	r4, r6, #16
 8002da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db2:	1d33      	adds	r3, r6, #4
 8002db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db6:	6838      	ldr	r0, [r7, #0]
 8002db8:	f004 febc 	bl	8007b34 <USB_CoreInit>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0d7      	b.n	8002f7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f004 ffc9 	bl	8007d6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	e04a      	b.n	8002e76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	333d      	adds	r3, #61	; 0x3d
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	333c      	adds	r3, #60	; 0x3c
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	b298      	uxth	r0, r3
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3344      	adds	r3, #68	; 0x44
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3340      	adds	r3, #64	; 0x40
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3348      	adds	r3, #72	; 0x48
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	334c      	adds	r3, #76	; 0x4c
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3354      	adds	r3, #84	; 0x54
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	3301      	adds	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3af      	bcc.n	8002de0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e044      	b.n	8002f10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d3b5      	bcc.n	8002e86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	687e      	ldr	r6, [r7, #4]
 8002f22:	466d      	mov	r5, sp
 8002f24:	f106 0410 	add.w	r4, r6, #16
 8002f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f34:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f38:	1d33      	adds	r3, r6, #4
 8002f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f3c:	6838      	ldr	r0, [r7, #0]
 8002f3e:	f004 ff61 	bl	8007e04 <USB_DevInit>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e014      	b.n	8002f7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d102      	bne.n	8002f72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f001 f97b 	bl	8004268 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f006 f8af 	bl	80090da <USB_DevDisconnect>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_PCD_Start+0x16>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e012      	b.n	8002fc2 <HAL_PCD_Start+0x3c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f004 febd 	bl	8007d28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f006 f870 	bl	8009098 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fca:	b590      	push	{r4, r7, lr}
 8002fcc:	b08d      	sub	sp, #52	; 0x34
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f006 f92e 	bl	8009242 <USB_GetMode>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 84b7 	bne.w	800395c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f006 f892 	bl	800911c <USB_ReadInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 84ad 	beq.w	800395a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f006 f87f 	bl	800911c <USB_ReadInterrupts>
 800301e:	4603      	mov	r3, r0
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d107      	bne.n	8003038 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f002 0202 	and.w	r2, r2, #2
 8003036:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f006 f86d 	bl	800911c <USB_ReadInterrupts>
 8003042:	4603      	mov	r3, r0
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b10      	cmp	r3, #16
 800304a:	d161      	bne.n	8003110 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0210 	bic.w	r2, r2, #16
 800305a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4413      	add	r3, r2
 8003078:	3304      	adds	r3, #4
 800307a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	0c5b      	lsrs	r3, r3, #17
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	2b02      	cmp	r3, #2
 8003086:	d124      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d035      	beq.n	8003100 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800309e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6a38      	ldr	r0, [r7, #32]
 80030a8:	f005 fea4 	bl	8008df4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b8:	441a      	add	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ca:	441a      	add	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	621a      	str	r2, [r3, #32]
 80030d0:	e016      	b.n	8003100 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	0c5b      	lsrs	r3, r3, #17
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d110      	bne.n	8003100 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030e4:	2208      	movs	r2, #8
 80030e6:	4619      	mov	r1, r3
 80030e8:	6a38      	ldr	r0, [r7, #32]
 80030ea:	f005 fe83 	bl	8008df4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030fa:	441a      	add	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0210 	orr.w	r2, r2, #16
 800310e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f006 f801 	bl	800911c <USB_ReadInterrupts>
 800311a:	4603      	mov	r3, r0
 800311c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003120:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003124:	f040 80a7 	bne.w	8003276 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f006 f806 	bl	8009142 <USB_ReadDevAllOutEpInterrupt>
 8003136:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003138:	e099      	b.n	800326e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 808e 	beq.w	8003262 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f006 f82a 	bl	80091aa <USB_ReadDevOutEPInterrupt>
 8003156:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316e:	461a      	mov	r2, r3
 8003170:	2301      	movs	r3, #1
 8003172:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fef0 	bl	8003f5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	2308      	movs	r3, #8
 8003196:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 ffc6 	bl	800412c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b6:	461a      	mov	r2, r3
 80031b8:	2310      	movs	r3, #16
 80031ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d030      	beq.n	8003228 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d109      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	78db      	ldrb	r3, [r3, #3]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d108      	bne.n	8003216 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2200      	movs	r2, #0
 8003208:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	b2db      	uxtb	r3, r3
 800320e:	4619      	mov	r1, r3
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f00b f811 	bl	800e238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003222:	461a      	mov	r2, r3
 8003224:	2302      	movs	r3, #2
 8003226:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	2320      	movs	r3, #32
 8003242:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	461a      	mov	r2, r3
 800325c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003260:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f af62 	bne.w	800313a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f005 ff4e 	bl	800911c <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800328a:	f040 80db 	bne.w	8003444 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f005 ff6f 	bl	8009176 <USB_ReadDevAllInEpInterrupt>
 8003298:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800329e:	e0cd      	b.n	800343c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80c2 	beq.w	8003430 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f005 ff95 	bl	80091e6 <USB_ReadDevInEPInterrupt>
 80032bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d057      	beq.n	8003378 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69f9      	ldr	r1, [r7, #28]
 80032e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032e8:	4013      	ands	r3, r2
 80032ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f8:	461a      	mov	r2, r3
 80032fa:	2301      	movs	r3, #1
 80032fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d132      	bne.n	800336c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	334c      	adds	r3, #76	; 0x4c
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4403      	add	r3, r0
 8003326:	3348      	adds	r3, #72	; 0x48
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4419      	add	r1, r3
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4403      	add	r3, r0
 800333a:	334c      	adds	r3, #76	; 0x4c
 800333c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d113      	bne.n	800336c <HAL_PCD_IRQHandler+0x3a2>
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3354      	adds	r3, #84	; 0x54
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d108      	bne.n	800336c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003364:	461a      	mov	r2, r3
 8003366:	2101      	movs	r1, #1
 8003368:	f005 ff9e 	bl	80092a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f00a fedb 	bl	800e12e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338e:	461a      	mov	r2, r3
 8003390:	2308      	movs	r3, #8
 8003392:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033aa:	461a      	mov	r2, r3
 80033ac:	2310      	movs	r3, #16
 80033ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c6:	461a      	mov	r2, r3
 80033c8:	2340      	movs	r3, #64	; 0x40
 80033ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d023      	beq.n	800341e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d8:	6a38      	ldr	r0, [r7, #32]
 80033da:	f004 fe71 	bl	80080c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	3338      	adds	r3, #56	; 0x38
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	78db      	ldrb	r3, [r3, #3]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d108      	bne.n	800340c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f00a ff28 	bl	800e25c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	461a      	mov	r2, r3
 800341a:	2302      	movs	r3, #2
 800341c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fd08 	bl	8003e40 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	3301      	adds	r3, #1
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	2b00      	cmp	r3, #0
 8003440:	f47f af2e 	bne.w	80032a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f005 fe67 	bl	800911c <USB_ReadInterrupts>
 800344e:	4603      	mov	r3, r0
 8003450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003458:	d122      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003474:	2b01      	cmp	r3, #1
 8003476:	d108      	bne.n	800348a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003480:	2100      	movs	r1, #0
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f00b f8a2 	bl	800e5cc <HAL_PCDEx_LPM_Callback>
 8003488:	e002      	b.n	8003490 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f00a fec6 	bl	800e21c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800349e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 fe39 	bl	800911c <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b4:	d112      	bne.n	80034dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f00a fe82 	bl	800e1d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034da:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f005 fe1b 	bl	800911c <USB_ReadInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f0:	d121      	bne.n	8003536 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003500:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d111      	bne.n	8003530 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	f003 020f 	and.w	r2, r3, #15
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003526:	2101      	movs	r1, #1
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f00b f84f 	bl	800e5cc <HAL_PCDEx_LPM_Callback>
 800352e:	e002      	b.n	8003536 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f00a fe4d 	bl	800e1d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f005 fdee 	bl	800911c <USB_ReadInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354a:	f040 80b7 	bne.w	80036bc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2110      	movs	r1, #16
 8003568:	4618      	mov	r0, r3
 800356a:	f004 fda9 	bl	80080c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356e:	2300      	movs	r3, #0
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003572:	e046      	b.n	8003602 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	461a      	mov	r2, r3
 8003582:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003586:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	440a      	add	r2, r1
 800359e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b4:	461a      	mov	r2, r3
 80035b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035cc:	0151      	lsls	r1, r2, #5
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	440a      	add	r2, r1
 80035d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	3301      	adds	r3, #1
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003608:	429a      	cmp	r2, r3
 800360a:	d3b3      	bcc.n	8003574 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800361a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800361e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	2b00      	cmp	r3, #0
 8003626:	d016      	beq.n	8003656 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003638:	f043 030b 	orr.w	r3, r3, #11
 800363c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364e:	f043 030b 	orr.w	r3, r3, #11
 8003652:	6453      	str	r3, [r2, #68]	; 0x44
 8003654:	e015      	b.n	8003682 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003664:	4619      	mov	r1, r3
 8003666:	f242 032b 	movw	r3, #8235	; 0x202b
 800366a:	4313      	orrs	r3, r2
 800366c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367c:	f043 030b 	orr.w	r3, r3, #11
 8003680:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003690:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003694:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036a6:	461a      	mov	r2, r3
 80036a8:	f005 fdfe 	bl	80092a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f005 fd2b 	bl	800911c <USB_ReadInterrupts>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d0:	d124      	bne.n	800371c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f005 fdc2 	bl	8009260 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f004 fd6a 	bl	80081ba <USB_GetDevSpeed>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681c      	ldr	r4, [r3, #0]
 80036f2:	f001 fa7d 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 80036f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	4620      	mov	r0, r4
 8003702:	f004 fa6f 	bl	8007be4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f00a fd39 	bl	800e17e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800371a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f005 fcfb 	bl	800911c <USB_ReadInterrupts>
 8003726:	4603      	mov	r3, r0
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d10a      	bne.n	8003746 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f00a fd16 	bl	800e162 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f002 0208 	and.w	r2, r2, #8
 8003744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f005 fce6 	bl	800911c <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b80      	cmp	r3, #128	; 0x80
 8003758:	d122      	bne.n	80037a0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003766:	2301      	movs	r3, #1
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	e014      	b.n	8003796 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d105      	bne.n	8003790 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	b2db      	uxtb	r3, r3
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fb27 	bl	8003dde <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	3301      	adds	r3, #1
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	429a      	cmp	r2, r3
 800379e:	d3e5      	bcc.n	800376c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f005 fcb9 	bl	800911c <USB_ReadInterrupts>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b4:	d13b      	bne.n	800382e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037b6:	2301      	movs	r3, #1
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	e02b      	b.n	8003814 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3340      	adds	r3, #64	; 0x40
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d115      	bne.n	800380e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da12      	bge.n	800380e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	333f      	adds	r3, #63	; 0x3f
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fae8 	bl	8003dde <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	3301      	adds	r3, #1
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	429a      	cmp	r2, r3
 800381c:	d3ce      	bcc.n	80037bc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800382c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f005 fc72 	bl	800911c <USB_ReadInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003842:	d155      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003844:	2301      	movs	r3, #1
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
 8003848:	e045      	b.n	80038d6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d12e      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003872:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003874:	2b00      	cmp	r3, #0
 8003876:	da2b      	bge.n	80038d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003884:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003888:	429a      	cmp	r2, r3
 800388a:	d121      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038cc:	6053      	str	r3, [r2, #4]
            break;
 80038ce:	e007      	b.n	80038e0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	3301      	adds	r3, #1
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	429a      	cmp	r2, r3
 80038de:	d3b4      	bcc.n	800384a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f005 fc11 	bl	800911c <USB_ReadInterrupts>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d10a      	bne.n	800391c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f00a fcba 	bl	800e280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800391a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f005 fbfb 	bl	800911c <USB_ReadInterrupts>
 8003926:	4603      	mov	r3, r0
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b04      	cmp	r3, #4
 800392e:	d115      	bne.n	800395c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f00a fcaa 	bl	800e29c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	e000      	b.n	800395c <HAL_PCD_IRQHandler+0x992>
      return;
 800395a:	bf00      	nop
    }
  }
}
 800395c:	3734      	adds	r7, #52	; 0x34
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}

08003962 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	460b      	mov	r3, r1
 800396c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_PCD_SetAddress+0x1a>
 8003978:	2302      	movs	r3, #2
 800397a:	e013      	b.n	80039a4 <HAL_PCD_SetAddress+0x42>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f005 fb59 	bl	800904c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	461a      	mov	r2, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	70fb      	strb	r3, [r7, #3]
 80039be:	460b      	mov	r3, r1
 80039c0:	803b      	strh	r3, [r7, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	da0f      	bge.n	80039f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	f003 020f 	and.w	r2, r3, #15
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	3338      	adds	r3, #56	; 0x38
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	3304      	adds	r3, #4
 80039e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	705a      	strb	r2, [r3, #1]
 80039f0:	e00f      	b.n	8003a12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	f003 020f 	and.w	r2, r3, #15
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4413      	add	r3, r2
 8003a08:	3304      	adds	r3, #4
 8003a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a1e:	883a      	ldrh	r2, [r7, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	78ba      	ldrb	r2, [r7, #2]
 8003a28:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	785b      	ldrb	r3, [r3, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a3c:	78bb      	ldrb	r3, [r7, #2]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d102      	bne.n	8003a48 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_PCD_EP_Open+0xaa>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e00e      	b.n	8003a74 <HAL_PCD_EP_Open+0xc8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f004 fbcd 	bl	8008204 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003a72:	7afb      	ldrb	r3, [r7, #11]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da0f      	bge.n	8003ab0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	3338      	adds	r3, #56	; 0x38
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	705a      	strb	r2, [r3, #1]
 8003aae:	e00f      	b.n	8003ad0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 020f 	and.w	r2, r3, #15
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_PCD_EP_Close+0x6e>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e00e      	b.n	8003b08 <HAL_PCD_EP_Close+0x8c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f004 fc0b 	bl	8008314 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	f003 020f 	and.w	r2, r3, #15
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b52:	7afb      	ldrb	r3, [r7, #11]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d102      	bne.n	8003b6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b6c:	7afb      	ldrb	r3, [r7, #11]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6979      	ldr	r1, [r7, #20]
 8003b84:	f004 fef2 	bl	800896c <USB_EP0StartXfer>
 8003b88:	e008      	b.n	8003b9c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	6979      	ldr	r1, [r7, #20]
 8003b98:	f004 fc98 	bl	80084cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 020f 	and.w	r2, r3, #15
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003bc8:	681b      	ldr	r3, [r3, #0]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	460b      	mov	r3, r1
 8003be4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	3338      	adds	r3, #56	; 0x38
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2201      	movs	r2, #1
 8003c14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c16:	7afb      	ldrb	r3, [r7, #11]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d102      	bne.n	8003c30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	6979      	ldr	r1, [r7, #20]
 8003c48:	f004 fe90 	bl	800896c <USB_EP0StartXfer>
 8003c4c:	e008      	b.n	8003c60 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6979      	ldr	r1, [r7, #20]
 8003c5c:	f004 fc36 	bl	80084cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d901      	bls.n	8003c88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e050      	b.n	8003d2a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da0f      	bge.n	8003cb0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	3338      	adds	r3, #56	; 0x38
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	705a      	strb	r2, [r3, #1]
 8003cae:	e00d      	b.n	8003ccc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_PCD_EP_SetStall+0x82>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e01e      	b.n	8003d2a <HAL_PCD_EP_SetStall+0xc0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68f9      	ldr	r1, [r7, #12]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f005 f8d2 	bl	8008ea4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	b2d9      	uxtb	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f005 fac4 	bl	80092a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	f003 020f 	and.w	r2, r3, #15
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d901      	bls.n	8003d50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e042      	b.n	8003dd6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	da0f      	bge.n	8003d78 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 020f 	and.w	r2, r3, #15
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	3338      	adds	r3, #56	; 0x38
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	705a      	strb	r2, [r3, #1]
 8003d76:	e00f      	b.n	8003d98 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f003 020f 	and.w	r2, r3, #15
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3304      	adds	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_PCD_EP_ClrStall+0x86>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e00e      	b.n	8003dd6 <HAL_PCD_EP_ClrStall+0xa4>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68f9      	ldr	r1, [r7, #12]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f005 f8da 	bl	8008f80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da0c      	bge.n	8003e0c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	3338      	adds	r3, #56	; 0x38
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	3304      	adds	r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e00c      	b.n	8003e26 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	3304      	adds	r3, #4
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f004 fef9 	bl	8008c24 <USB_EPStopXfer>
 8003e32:	4603      	mov	r3, r0
 8003e34:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e36:	7afb      	ldrb	r3, [r7, #11]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	3338      	adds	r3, #56	; 0x38
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	3304      	adds	r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d901      	bls.n	8003e78 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e06c      	b.n	8003f52 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d902      	bls.n	8003e94 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	3303      	adds	r3, #3
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e9c:	e02b      	b.n	8003ef6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d902      	bls.n	8003eba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3303      	adds	r3, #3
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6919      	ldr	r1, [r3, #16]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	6978      	ldr	r0, [r7, #20]
 8003eda:	f004 ff4d 	bl	8008d78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	441a      	add	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d809      	bhi.n	8003f20 <PCD_WriteEmptyTxFifo+0xe0>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d203      	bcs.n	8003f20 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1be      	bne.n	8003e9e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d811      	bhi.n	8003f50 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	2201      	movs	r2, #1
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	6939      	ldr	r1, [r7, #16]
 8003f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	333c      	adds	r3, #60	; 0x3c
 8003f74:	3304      	adds	r3, #4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d17b      	bne.n	800408a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d015      	beq.n	8003fc8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4a61      	ldr	r2, [pc, #388]	; (8004124 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	f240 80b9 	bls.w	8004118 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80b3 	beq.w	8004118 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc4:	6093      	str	r3, [r2, #8]
 8003fc6:	e0a7      	b.n	8004118 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	6093      	str	r3, [r2, #8]
 8003fe4:	e098      	b.n	8004118 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f040 8093 	bne.w	8004118 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	4a4b      	ldr	r2, [pc, #300]	; (8004124 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d90f      	bls.n	800401a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	461a      	mov	r2, r3
 8004012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004016:	6093      	str	r3, [r2, #8]
 8004018:	e07e      	b.n	8004118 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	3304      	adds	r3, #4
 800402e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	0159      	lsls	r1, r3, #5
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	440b      	add	r3, r1
 800403c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004046:	1ad2      	subs	r2, r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d114      	bne.n	800407c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004064:	461a      	mov	r2, r3
 8004066:	2101      	movs	r1, #1
 8004068:	f005 f91e 	bl	80092a8 <USB_EP0_OutStart>
 800406c:	e006      	b.n	800407c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	441a      	add	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f00a f838 	bl	800e0f8 <HAL_PCD_DataOutStageCallback>
 8004088:	e046      	b.n	8004118 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4a26      	ldr	r2, [pc, #152]	; (8004128 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d124      	bne.n	80040dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	461a      	mov	r2, r3
 80040aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ae:	6093      	str	r3, [r2, #8]
 80040b0:	e032      	b.n	8004118 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	461a      	mov	r2, r3
 80040ca:	2320      	movs	r3, #32
 80040cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	4619      	mov	r1, r3
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f00a f80f 	bl	800e0f8 <HAL_PCD_DataOutStageCallback>
 80040da:	e01d      	b.n	8004118 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d114      	bne.n	800410c <PCD_EP_OutXfrComplete_int+0x1b0>
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d108      	bne.n	800410c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004104:	461a      	mov	r2, r3
 8004106:	2100      	movs	r1, #0
 8004108:	f005 f8ce 	bl	80092a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4619      	mov	r1, r3
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f009 fff0 	bl	800e0f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	4f54300a 	.word	0x4f54300a
 8004128:	4f54310a 	.word	0x4f54310a

0800412c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	333c      	adds	r3, #60	; 0x3c
 8004144:	3304      	adds	r3, #4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d90e      	bls.n	8004180 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	461a      	mov	r2, r3
 800417a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800417e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f009 ffa7 	bl	800e0d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d90c      	bls.n	80041a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d108      	bne.n	80041a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041a0:	461a      	mov	r2, r3
 80041a2:	2101      	movs	r1, #1
 80041a4:	f005 f880 	bl	80092a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	4f54300a 	.word	0x4f54300a

080041b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
 80041c4:	4613      	mov	r3, r2
 80041c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d107      	bne.n	80041e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041d6:	883b      	ldrh	r3, [r7, #0]
 80041d8:	0419      	lsls	r1, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
 80041e4:	e028      	b.n	8004238 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	4413      	add	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	e00d      	b.n	8004216 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	3340      	adds	r3, #64	; 0x40
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4413      	add	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	3301      	adds	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
 8004216:	7bfa      	ldrb	r2, [r7, #15]
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	3b01      	subs	r3, #1
 800421c:	429a      	cmp	r2, r3
 800421e:	d3ec      	bcc.n	80041fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004220:	883b      	ldrh	r3, [r7, #0]
 8004222:	0418      	lsls	r0, r3, #16
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6819      	ldr	r1, [r3, #0]
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	3b01      	subs	r3, #1
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	4302      	orrs	r2, r0
 8004230:	3340      	adds	r3, #64	; 0x40
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_PCDEx_ActivateLPM+0x44>)
 8004298:	4313      	orrs	r3, r2
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	10000003 	.word	0x10000003

080042b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042b8:	2300      	movs	r3, #0
 80042ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e29b      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8087 	beq.w	80043e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042d4:	4b96      	ldr	r3, [pc, #600]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 030c 	and.w	r3, r3, #12
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d00c      	beq.n	80042fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e0:	4b93      	ldr	r3, [pc, #588]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d112      	bne.n	8004312 <HAL_RCC_OscConfig+0x62>
 80042ec:	4b90      	ldr	r3, [pc, #576]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f8:	d10b      	bne.n	8004312 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fa:	4b8d      	ldr	r3, [pc, #564]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x130>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d168      	bne.n	80043e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e275      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431a:	d106      	bne.n	800432a <HAL_RCC_OscConfig+0x7a>
 800431c:	4b84      	ldr	r3, [pc, #528]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a83      	ldr	r2, [pc, #524]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e02e      	b.n	8004388 <HAL_RCC_OscConfig+0xd8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x9c>
 8004332:	4b7f      	ldr	r3, [pc, #508]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7e      	ldr	r2, [pc, #504]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b7c      	ldr	r3, [pc, #496]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a7b      	ldr	r2, [pc, #492]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0xd8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0xc0>
 8004356:	4b76      	ldr	r3, [pc, #472]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a75      	ldr	r2, [pc, #468]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b73      	ldr	r3, [pc, #460]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a72      	ldr	r2, [pc, #456]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0xd8>
 8004370:	4b6f      	ldr	r3, [pc, #444]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a6e      	ldr	r2, [pc, #440]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b6c      	ldr	r3, [pc, #432]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a6b      	ldr	r2, [pc, #428]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd f87c 	bl	800148c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fd f878 	bl	800148c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e229      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b61      	ldr	r3, [pc, #388]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0xe8>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd f868 	bl	800148c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fd f864 	bl	800148c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e215      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	4b57      	ldr	r3, [pc, #348]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x110>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d069      	beq.n	80044c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ee:	4b50      	ldr	r3, [pc, #320]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fa:	4b4d      	ldr	r3, [pc, #308]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b08      	cmp	r3, #8
 8004404:	d11c      	bne.n	8004440 <HAL_RCC_OscConfig+0x190>
 8004406:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004412:	4b47      	ldr	r3, [pc, #284]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x17a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d001      	beq.n	800442a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e1e9      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	4b41      	ldr	r3, [pc, #260]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	493d      	ldr	r1, [pc, #244]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	e040      	b.n	80044c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d023      	beq.n	8004490 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004448:	4b39      	ldr	r3, [pc, #228]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a38      	ldr	r2, [pc, #224]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fd f81a 	bl	800148c <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445c:	f7fd f816 	bl	800148c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1c7      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446e:	4b30      	ldr	r3, [pc, #192]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447a:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4929      	ldr	r1, [pc, #164]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
 800448e:	e018      	b.n	80044c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a26      	ldr	r2, [pc, #152]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fc fff6 	bl	800148c <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a4:	f7fc fff2 	bl	800148c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e1a3      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b6:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d038      	beq.n	8004540 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d019      	beq.n	800450a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d6:	4b16      	ldr	r3, [pc, #88]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	4a15      	ldr	r2, [pc, #84]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e2:	f7fc ffd3 	bl	800148c <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fc ffcf 	bl	800148c <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e180      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 80044fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x23a>
 8004508:	e01a      	b.n	8004540 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 800450c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <HAL_RCC_OscConfig+0x280>)
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004516:	f7fc ffb9 	bl	800148c <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451e:	f7fc ffb5 	bl	800148c <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d903      	bls.n	8004534 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e166      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
 8004530:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	4b92      	ldr	r3, [pc, #584]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ee      	bne.n	800451e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a4 	beq.w	8004696 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454e:	4b8c      	ldr	r3, [pc, #560]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	4b89      	ldr	r3, [pc, #548]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	4a88      	ldr	r2, [pc, #544]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004564:	6413      	str	r3, [r2, #64]	; 0x40
 8004566:	4b86      	ldr	r3, [pc, #536]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004576:	4b83      	ldr	r3, [pc, #524]	; (8004784 <HAL_RCC_OscConfig+0x4d4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d118      	bne.n	80045b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004582:	4b80      	ldr	r3, [pc, #512]	; (8004784 <HAL_RCC_OscConfig+0x4d4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a7f      	ldr	r2, [pc, #508]	; (8004784 <HAL_RCC_OscConfig+0x4d4>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458e:	f7fc ff7d 	bl	800148c <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004596:	f7fc ff79 	bl	800148c <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b64      	cmp	r3, #100	; 0x64
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e12a      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a8:	4b76      	ldr	r3, [pc, #472]	; (8004784 <HAL_RCC_OscConfig+0x4d4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x31a>
 80045bc:	4b70      	ldr	r3, [pc, #448]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	4a6f      	ldr	r2, [pc, #444]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70
 80045c8:	e02d      	b.n	8004626 <HAL_RCC_OscConfig+0x376>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x33c>
 80045d2:	4b6b      	ldr	r3, [pc, #428]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	4a6a      	ldr	r2, [pc, #424]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	6713      	str	r3, [r2, #112]	; 0x70
 80045de:	4b68      	ldr	r3, [pc, #416]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a67      	ldr	r2, [pc, #412]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80045e4:	f023 0304 	bic.w	r3, r3, #4
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ea:	e01c      	b.n	8004626 <HAL_RCC_OscConfig+0x376>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b05      	cmp	r3, #5
 80045f2:	d10c      	bne.n	800460e <HAL_RCC_OscConfig+0x35e>
 80045f4:	4b62      	ldr	r3, [pc, #392]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	4a61      	ldr	r2, [pc, #388]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80045fa:	f043 0304 	orr.w	r3, r3, #4
 80045fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004600:	4b5f      	ldr	r3, [pc, #380]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	4a5e      	ldr	r2, [pc, #376]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6713      	str	r3, [r2, #112]	; 0x70
 800460c:	e00b      	b.n	8004626 <HAL_RCC_OscConfig+0x376>
 800460e:	4b5c      	ldr	r3, [pc, #368]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	4a5b      	ldr	r2, [pc, #364]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	6713      	str	r3, [r2, #112]	; 0x70
 800461a:	4b59      	ldr	r3, [pc, #356]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4a58      	ldr	r2, [pc, #352]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d015      	beq.n	800465a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fc ff2d 	bl	800148c <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	e00a      	b.n	800464c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fc ff29 	bl	800148c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	; 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e0d8      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	4b4c      	ldr	r3, [pc, #304]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ee      	beq.n	8004636 <HAL_RCC_OscConfig+0x386>
 8004658:	e014      	b.n	8004684 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fc ff17 	bl	800148c <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fc ff13 	bl	800148c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0c2      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004678:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ee      	bne.n	8004662 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d105      	bne.n	8004696 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468a:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a3c      	ldr	r2, [pc, #240]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80ae 	beq.w	80047fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a0:	4b37      	ldr	r3, [pc, #220]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d06d      	beq.n	8004788 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d14b      	bne.n	800474c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b4:	4b32      	ldr	r3, [pc, #200]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a31      	ldr	r2, [pc, #196]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fc fee4 	bl	800148c <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fc fee0 	bl	800148c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e091      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	4b29      	ldr	r3, [pc, #164]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	3b01      	subs	r3, #1
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	071b      	lsls	r3, r3, #28
 8004712:	491b      	ldr	r1, [pc, #108]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004718:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 800471e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fc feb2 	bl	800148c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fc feae 	bl	800148c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e05f      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x47c>
 800474a:	e057      	b.n	80047fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fc fe98 	bl	800148c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004760:	f7fc fe94 	bl	800148c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e045      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004772:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_RCC_OscConfig+0x4d0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x4b0>
 800477e:	e03d      	b.n	80047fc <HAL_RCC_OscConfig+0x54c>
 8004780:	40023800 	.word	0x40023800
 8004784:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004788:	4b1f      	ldr	r3, [pc, #124]	; (8004808 <HAL_RCC_OscConfig+0x558>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d030      	beq.n	80047f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d129      	bne.n	80047f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d122      	bne.n	80047f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047b8:	4013      	ands	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d119      	bne.n	80047f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	3b01      	subs	r3, #1
 80047d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d10f      	bne.n	80047f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800

0800480c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0d0      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004824:	4b6a      	ldr	r3, [pc, #424]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d910      	bls.n	8004854 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b67      	ldr	r3, [pc, #412]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 020f 	bic.w	r2, r3, #15
 800483a:	4965      	ldr	r1, [pc, #404]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b63      	ldr	r3, [pc, #396]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0b8      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800486c:	4b59      	ldr	r3, [pc, #356]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a58      	ldr	r2, [pc, #352]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004876:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004884:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 800488a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800488e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004890:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	494d      	ldr	r1, [pc, #308]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d040      	beq.n	8004930 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d115      	bne.n	80048ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e073      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048de:	4b3d      	ldr	r3, [pc, #244]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e06b      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ee:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 0203 	bic.w	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4936      	ldr	r1, [pc, #216]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004900:	f7fc fdc4 	bl	800148c <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	e00a      	b.n	800491e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fc fdc0 	bl	800148c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	; 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e053      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 020c 	and.w	r2, r3, #12
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	429a      	cmp	r2, r3
 800492e:	d1eb      	bne.n	8004908 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004930:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d210      	bcs.n	8004960 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 020f 	bic.w	r2, r3, #15
 8004946:	4922      	ldr	r1, [pc, #136]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e032      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4916      	ldr	r1, [pc, #88]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	490e      	ldr	r1, [pc, #56]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800499e:	f000 f821 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80049a2:	4602      	mov	r2, r0
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	490a      	ldr	r1, [pc, #40]	; (80049d8 <HAL_RCC_ClockConfig+0x1cc>)
 80049b0:	5ccb      	ldrb	r3, [r1, r3]
 80049b2:	fa22 f303 	lsr.w	r3, r2, r3
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <HAL_RCC_ClockConfig+0x1d0>)
 80049b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <HAL_RCC_ClockConfig+0x1d4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fc fd20 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00
 80049d4:	40023800 	.word	0x40023800
 80049d8:	0800fbd4 	.word	0x0800fbd4
 80049dc:	20000000 	.word	0x20000000
 80049e0:	20000004 	.word	0x20000004

080049e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e8:	b094      	sub	sp, #80	; 0x50
 80049ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	647b      	str	r3, [r7, #68]	; 0x44
 80049f0:	2300      	movs	r3, #0
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f4:	2300      	movs	r3, #0
 80049f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049fc:	4b79      	ldr	r3, [pc, #484]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d00d      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x40>
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	f200 80e1 	bhi.w	8004bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x34>
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d003      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a16:	e0db      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b73      	ldr	r3, [pc, #460]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a1c:	e0db      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a1e:	4b73      	ldr	r3, [pc, #460]	; (8004bec <HAL_RCC_GetSysClockFreq+0x208>)
 8004a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a22:	e0d8      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a24:	4b6f      	ldr	r3, [pc, #444]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a2c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a2e:	4b6d      	ldr	r3, [pc, #436]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d063      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3a:	4b6a      	ldr	r3, [pc, #424]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	099b      	lsrs	r3, r3, #6
 8004a40:	2200      	movs	r2, #0
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a4e:	2300      	movs	r3, #0
 8004a50:	637b      	str	r3, [r7, #52]	; 0x34
 8004a52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a56:	4622      	mov	r2, r4
 8004a58:	462b      	mov	r3, r5
 8004a5a:	f04f 0000 	mov.w	r0, #0
 8004a5e:	f04f 0100 	mov.w	r1, #0
 8004a62:	0159      	lsls	r1, r3, #5
 8004a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a68:	0150      	lsls	r0, r2, #5
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4621      	mov	r1, r4
 8004a70:	1a51      	subs	r1, r2, r1
 8004a72:	6139      	str	r1, [r7, #16]
 8004a74:	4629      	mov	r1, r5
 8004a76:	eb63 0301 	sbc.w	r3, r3, r1
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a88:	4659      	mov	r1, fp
 8004a8a:	018b      	lsls	r3, r1, #6
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a92:	4651      	mov	r1, sl
 8004a94:	018a      	lsls	r2, r1, #6
 8004a96:	4651      	mov	r1, sl
 8004a98:	ebb2 0801 	subs.w	r8, r2, r1
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	eb63 0901 	sbc.w	r9, r3, r1
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ab6:	4690      	mov	r8, r2
 8004ab8:	4699      	mov	r9, r3
 8004aba:	4623      	mov	r3, r4
 8004abc:	eb18 0303 	adds.w	r3, r8, r3
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	eb49 0303 	adc.w	r3, r9, r3
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	024b      	lsls	r3, r1, #9
 8004ada:	4621      	mov	r1, r4
 8004adc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	024a      	lsls	r2, r1, #9
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aea:	2200      	movs	r2, #0
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004af4:	f7fb fbf4 	bl	80002e0 <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4613      	mov	r3, r2
 8004afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b00:	e058      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b02:	4b38      	ldr	r3, [pc, #224]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	2300      	movs	r3, #0
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
 8004b18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	464b      	mov	r3, r9
 8004b20:	f04f 0000 	mov.w	r0, #0
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	0159      	lsls	r1, r3, #5
 8004b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b2e:	0150      	lsls	r0, r2, #5
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4641      	mov	r1, r8
 8004b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b54:	ebb2 040a 	subs.w	r4, r2, sl
 8004b58:	eb63 050b 	sbc.w	r5, r3, fp
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	00eb      	lsls	r3, r5, #3
 8004b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6a:	00e2      	lsls	r2, r4, #3
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	461d      	mov	r5, r3
 8004b70:	4643      	mov	r3, r8
 8004b72:	18e3      	adds	r3, r4, r3
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	464b      	mov	r3, r9
 8004b78:	eb45 0303 	adc.w	r3, r5, r3
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	028b      	lsls	r3, r1, #10
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b94:	4621      	mov	r1, r4
 8004b96:	028a      	lsls	r2, r1, #10
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	61fa      	str	r2, [r7, #28]
 8004ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba8:	f7fb fb9a 	bl	80002e0 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3750      	adds	r7, #80	; 0x50
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	007a1200 	.word	0x007a1200

08004bf0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000000 	.word	0x20000000

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff0 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	0800fbe4 	.word	0x0800fbe4

08004c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c34:	f7ff ffdc 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0b5b      	lsrs	r3, r3, #13
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4903      	ldr	r1, [pc, #12]	; (8004c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	0800fbe4 	.word	0x0800fbe4

08004c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c80:	4b69      	ldr	r3, [pc, #420]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a68      	ldr	r2, [pc, #416]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c8a:	6093      	str	r3, [r2, #8]
 8004c8c:	4b66      	ldr	r3, [pc, #408]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	4964      	ldr	r1, [pc, #400]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d017      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cb2:	4b5d      	ldr	r3, [pc, #372]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc0:	4959      	ldr	r1, [pc, #356]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d017      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cee:	4b4e      	ldr	r3, [pc, #312]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	494a      	ldr	r1, [pc, #296]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 808b 	beq.w	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d3c:	4b3a      	ldr	r3, [pc, #232]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	4a39      	ldr	r2, [pc, #228]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d46:	6413      	str	r3, [r2, #64]	; 0x40
 8004d48:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d54:	4b35      	ldr	r3, [pc, #212]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a34      	ldr	r2, [pc, #208]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d60:	f7fc fb94 	bl	800148c <HAL_GetTick>
 8004d64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d68:	f7fc fb90 	bl	800148c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e38f      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d7a:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d86:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d035      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d02e      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da4:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dae:	4b1e      	ldr	r3, [pc, #120]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dba:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	4a1a      	ldr	r2, [pc, #104]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004dc6:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dcc:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d114      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fc fb58 	bl	800148c <HAL_GetTick>
 8004ddc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dde:	e00a      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de0:	f7fc fb54 	bl	800148c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e351      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0ee      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e0e:	d111      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e1e:	400b      	ands	r3, r1
 8004e20:	4901      	ldr	r1, [pc, #4]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
 8004e26:	e00b      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40007000 	.word	0x40007000
 8004e30:	0ffffcff 	.word	0x0ffffcff
 8004e34:	4bac      	ldr	r3, [pc, #688]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4aab      	ldr	r2, [pc, #684]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e3e:	6093      	str	r3, [r2, #8]
 8004e40:	4ba9      	ldr	r3, [pc, #676]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4c:	49a6      	ldr	r1, [pc, #664]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e5e:	4ba2      	ldr	r3, [pc, #648]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e64:	4aa0      	ldr	r2, [pc, #640]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e6e:	4b9e      	ldr	r3, [pc, #632]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	499b      	ldr	r1, [pc, #620]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e8c:	4b96      	ldr	r3, [pc, #600]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e9a:	4993      	ldr	r1, [pc, #588]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eae:	4b8e      	ldr	r3, [pc, #568]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ebc:	498a      	ldr	r1, [pc, #552]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed0:	4b85      	ldr	r3, [pc, #532]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ede:	4982      	ldr	r1, [pc, #520]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ef2:	4b7d      	ldr	r3, [pc, #500]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4979      	ldr	r1, [pc, #484]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f14:	4b74      	ldr	r3, [pc, #464]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f023 0203 	bic.w	r2, r3, #3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	4971      	ldr	r1, [pc, #452]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f36:	4b6c      	ldr	r3, [pc, #432]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3c:	f023 020c 	bic.w	r2, r3, #12
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f44:	4968      	ldr	r1, [pc, #416]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f58:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f66:	4960      	ldr	r1, [pc, #384]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f7a:	4b5b      	ldr	r3, [pc, #364]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f88:	4957      	ldr	r1, [pc, #348]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f9c:	4b52      	ldr	r3, [pc, #328]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	494f      	ldr	r1, [pc, #316]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	4946      	ldr	r1, [pc, #280]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004fe0:	4b41      	ldr	r3, [pc, #260]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fee:	493e      	ldr	r1, [pc, #248]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005002:	4b39      	ldr	r3, [pc, #228]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	4935      	ldr	r1, [pc, #212]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005024:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005032:	492d      	ldr	r1, [pc, #180]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d011      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005046:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005054:	4924      	ldr	r1, [pc, #144]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005064:	d101      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005066:	2301      	movs	r3, #1
 8005068:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005076:	2301      	movs	r3, #1
 8005078:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005086:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005094:	4914      	ldr	r1, [pc, #80]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b8:	490b      	ldr	r1, [pc, #44]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00f      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050dc:	4902      	ldr	r1, [pc, #8]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050e4:	e002      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050f8:	4b8a      	ldr	r3, [pc, #552]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	4986      	ldr	r1, [pc, #536]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800511c:	4b81      	ldr	r3, [pc, #516]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800511e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005122:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512c:	497d      	ldr	r1, [pc, #500]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d006      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 80d6 	beq.w	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005148:	4b76      	ldr	r3, [pc, #472]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a75      	ldr	r2, [pc, #468]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005154:	f7fc f99a 	bl	800148c <HAL_GetTick>
 8005158:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800515c:	f7fc f996 	bl	800148c <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e195      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800516e:	4b6d      	ldr	r3, [pc, #436]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d021      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	2b00      	cmp	r3, #0
 800518c:	d11d      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800518e:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800519c:	4b61      	ldr	r3, [pc, #388]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a2:	0e1b      	lsrs	r3, r3, #24
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	019a      	lsls	r2, r3, #6
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	061b      	lsls	r3, r3, #24
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	071b      	lsls	r3, r3, #28
 80051c2:	4958      	ldr	r1, [pc, #352]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d02e      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f4:	d129      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051f6:	4b4b      	ldr	r3, [pc, #300]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005204:	4b47      	ldr	r3, [pc, #284]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520a:	0f1b      	lsrs	r3, r3, #28
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	019a      	lsls	r2, r3, #6
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	061b      	lsls	r3, r3, #24
 8005224:	431a      	orrs	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	071b      	lsls	r3, r3, #28
 800522a:	493e      	ldr	r1, [pc, #248]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005232:	4b3c      	ldr	r3, [pc, #240]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005238:	f023 021f 	bic.w	r2, r3, #31
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	3b01      	subs	r3, #1
 8005242:	4938      	ldr	r1, [pc, #224]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01d      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005256:	4b33      	ldr	r3, [pc, #204]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525c:	0e1b      	lsrs	r3, r3, #24
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005264:	4b2f      	ldr	r3, [pc, #188]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526a:	0f1b      	lsrs	r3, r3, #28
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	019a      	lsls	r2, r3, #6
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	061b      	lsls	r3, r3, #24
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	071b      	lsls	r3, r3, #28
 800528a:	4926      	ldr	r1, [pc, #152]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d011      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	019a      	lsls	r2, r3, #6
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	041b      	lsls	r3, r3, #16
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	061b      	lsls	r3, r3, #24
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	071b      	lsls	r3, r3, #28
 80052ba:	491a      	ldr	r1, [pc, #104]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052c2:	4b18      	ldr	r3, [pc, #96]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a17      	ldr	r2, [pc, #92]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ce:	f7fc f8dd 	bl	800148c <HAL_GetTick>
 80052d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052d4:	e008      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052d6:	f7fc f8d9 	bl	800148c <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b64      	cmp	r3, #100	; 0x64
 80052e2:	d901      	bls.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e0d8      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052e8:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	f040 80ce 	bne.w	8005498 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a08      	ldr	r2, [pc, #32]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005308:	f7fc f8c0 	bl	800148c <HAL_GetTick>
 800530c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800530e:	e00b      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005310:	f7fc f8bc 	bl	800148c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	; 0x64
 800531c:	d904      	bls.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0bb      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005328:	4b5e      	ldr	r3, [pc, #376]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005334:	d0ec      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02e      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d12a      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800535e:	4b51      	ldr	r3, [pc, #324]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800536c:	4b4d      	ldr	r3, [pc, #308]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	0f1b      	lsrs	r3, r3, #28
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	019a      	lsls	r2, r3, #6
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	041b      	lsls	r3, r3, #16
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	061b      	lsls	r3, r3, #24
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	071b      	lsls	r3, r3, #28
 8005392:	4944      	ldr	r1, [pc, #272]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800539a:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800539c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	3b01      	subs	r3, #1
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	493d      	ldr	r1, [pc, #244]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d022      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c8:	d11d      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053ca:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	0e1b      	lsrs	r3, r3, #24
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053d8:	4b32      	ldr	r3, [pc, #200]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	0f1b      	lsrs	r3, r3, #28
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	019a      	lsls	r2, r3, #6
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	431a      	orrs	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	431a      	orrs	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	071b      	lsls	r3, r3, #28
 80053fe:	4929      	ldr	r1, [pc, #164]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d028      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005412:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	0e1b      	lsrs	r3, r3, #24
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005420:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	0c1b      	lsrs	r3, r3, #16
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	019a      	lsls	r2, r3, #6
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	041b      	lsls	r3, r3, #16
 8005438:	431a      	orrs	r2, r3
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	061b      	lsls	r3, r3, #24
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	071b      	lsls	r3, r3, #28
 8005446:	4917      	ldr	r1, [pc, #92]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800544e:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	4911      	ldr	r1, [pc, #68]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005464:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a0e      	ldr	r2, [pc, #56]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800546a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005470:	f7fc f80c 	bl	800148c <HAL_GetTick>
 8005474:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005478:	f7fc f808 	bl	800148c <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b64      	cmp	r3, #100	; 0x64
 8005484:	d901      	bls.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e007      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005496:	d1ef      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800

080054a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e022      	b.n	8005500 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d105      	bne.n	80054d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fb fce5 	bl	8000e9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2203      	movs	r2, #3
 80054d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f814 	bl	8005508 <HAL_SD_InitCard>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e00a      	b.n	8005500 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005508:	b5b0      	push	{r4, r5, r7, lr}
 800550a:	b08e      	sub	sp, #56	; 0x38
 800550c:	af04      	add	r7, sp, #16
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005510:	2300      	movs	r3, #0
 8005512:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005520:	2300      	movs	r3, #0
 8005522:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005524:	2376      	movs	r3, #118	; 0x76
 8005526:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681d      	ldr	r5, [r3, #0]
 800552c:	466c      	mov	r4, sp
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005540:	4628      	mov	r0, r5
 8005542:	f001 fdc5 	bl	80070d0 <SDMMC_Init>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800554c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e059      	b.n	800560c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005566:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f001 fdf9 	bl	8007164 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005580:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005582:	2002      	movs	r0, #2
 8005584:	f7fb ff8e 	bl	80014a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 ff59 	bl	8006440 <SD_PowerON>
 800558e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e02e      	b.n	800560c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fe78 	bl	80062a4 <SD_InitCard>
 80055b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e01b      	b.n	800560c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055dc:	4618      	mov	r0, r3
 80055de:	f001 fe53 	bl	8007288 <SDMMC_CmdBlockLength>
 80055e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00f      	beq.n	800560a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <HAL_SD_InitCard+0x10c>)
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3728      	adds	r7, #40	; 0x28
 8005610:	46bd      	mov	sp, r7
 8005612:	bdb0      	pop	{r4, r5, r7, pc}
 8005614:	004005ff 	.word	0x004005ff

08005618 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08c      	sub	sp, #48	; 0x30
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d107      	bne.n	8005640 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0c3      	b.n	80057c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	f040 80bc 	bne.w	80057c6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	441a      	add	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565e:	429a      	cmp	r2, r3
 8005660:	d907      	bls.n	8005672 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0aa      	b.n	80057c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2203      	movs	r2, #3
 8005676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005690:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	4a4e      	ldr	r2, [pc, #312]	; (80057d0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005698:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	4a4d      	ldr	r2, [pc, #308]	; (80057d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80056a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2200      	movs	r2, #0
 80056a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2200      	movs	r2, #0
 80056b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3380      	adds	r3, #128	; 0x80
 80056d8:	4619      	mov	r1, r3
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	025b      	lsls	r3, r3, #9
 80056e0:	089b      	lsrs	r3, r3, #2
 80056e2:	f7fc fe57 	bl	8002394 <HAL_DMA_Start_IT>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d017      	beq.n	800571c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80056fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a35      	ldr	r2, [pc, #212]	; (80057d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e055      	b.n	80057c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0208 	orr.w	r2, r2, #8
 800572a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005730:	2b01      	cmp	r3, #1
 8005732:	d002      	beq.n	800573a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	025b      	lsls	r3, r3, #9
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800573a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800573e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	025b      	lsls	r3, r3, #9
 8005744:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005746:	2390      	movs	r3, #144	; 0x90
 8005748:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800574a:	2302      	movs	r3, #2
 800574c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800574e:	2300      	movs	r3, #0
 8005750:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005752:	2301      	movs	r3, #1
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f107 0210 	add.w	r2, r7, #16
 800575e:	4611      	mov	r1, r2
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fd65 	bl	8007230 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d90a      	bls.n	8005782 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2282      	movs	r2, #130	; 0x82
 8005770:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005778:	4618      	mov	r0, r3
 800577a:	f001 fdc9 	bl	8007310 <SDMMC_CmdReadMultiBlock>
 800577e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005780:	e009      	b.n	8005796 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2281      	movs	r2, #129	; 0x81
 8005786:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578e:	4618      	mov	r0, r3
 8005790:	f001 fd9c 	bl	80072cc <SDMMC_CmdReadSingleBlock>
 8005794:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d012      	beq.n	80057c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a0d      	ldr	r2, [pc, #52]	; (80057d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	431a      	orrs	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e002      	b.n	80057c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3730      	adds	r7, #48	; 0x30
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	080060b3 	.word	0x080060b3
 80057d4:	08006125 	.word	0x08006125
 80057d8:	004005ff 	.word	0x004005ff

080057dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d107      	bne.n	8005804 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0c6      	b.n	8005992 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	f040 80bf 	bne.w	8005990 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	441a      	add	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005822:	429a      	cmp	r2, r3
 8005824:	d907      	bls.n	8005836 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0ad      	b.n	8005992 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2203      	movs	r2, #3
 800583a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 021a 	orr.w	r2, r2, #26
 8005854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	4a50      	ldr	r2, [pc, #320]	; (800599c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	4a4f      	ldr	r2, [pc, #316]	; (80059a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005864:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	2200      	movs	r2, #0
 800586c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005872:	2b01      	cmp	r3, #1
 8005874:	d002      	beq.n	800587c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	025b      	lsls	r3, r3, #9
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d90a      	bls.n	8005898 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	22a0      	movs	r2, #160	; 0xa0
 8005886:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fd82 	bl	8007398 <SDMMC_CmdWriteMultiBlock>
 8005894:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005896:	e009      	b.n	80058ac <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2290      	movs	r2, #144	; 0x90
 800589c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 fd55 	bl	8007354 <SDMMC_CmdWriteSingleBlock>
 80058aa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d012      	beq.n	80058d8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a3b      	ldr	r2, [pc, #236]	; (80059a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e05c      	b.n	8005992 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0208 	orr.w	r2, r2, #8
 80058e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ec:	2240      	movs	r2, #64	; 0x40
 80058ee:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3380      	adds	r3, #128	; 0x80
 8005918:	461a      	mov	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	025b      	lsls	r3, r3, #9
 800591e:	089b      	lsrs	r3, r3, #2
 8005920:	f7fc fd38 	bl	8002394 <HAL_DMA_Start_IT>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01a      	beq.n	8005960 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 021a 	bic.w	r2, r2, #26
 8005938:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e018      	b.n	8005992 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005964:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	025b      	lsls	r3, r3, #9
 800596a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800596c:	2390      	movs	r3, #144	; 0x90
 800596e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005974:	2300      	movs	r3, #0
 8005976:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005978:	2301      	movs	r3, #1
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f107 0210 	add.w	r2, r7, #16
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fc52 	bl	8007230 <SDMMC_ConfigData>

      return HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	e000      	b.n	8005992 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005990:	2302      	movs	r3, #2
  }
}
 8005992:	4618      	mov	r0, r3
 8005994:	3730      	adds	r7, #48	; 0x30
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	08006089 	.word	0x08006089
 80059a0:	08006125 	.word	0x08006125
 80059a4:	004005ff 	.word	0x004005ff

080059a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_SD_IRQHandler+0x2e>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fdec 	bl	80065ac <SD_Read_IT>
 80059d4:	e15a      	b.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 808d 	beq.w	8005b00 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b9a      	ldr	r3, [pc, #616]	; (8005c64 <HAL_SD_IRQHandler+0x2bc>)
 80059fc:	400b      	ands	r3, r1
 80059fe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d039      	beq.n	8005a8e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <HAL_SD_IRQHandler+0x86>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d011      	beq.n	8005a52 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 fcd2 	bl	80073dc <SDMMC_CmdStopTransfer>
 8005a38:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f921 	bl	8005c94 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <HAL_SD_IRQHandler+0xd6>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f003 fd3c 	bl	80094fc <HAL_SD_RxCpltCallback>
 8005a84:	e102      	b.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f003 fd2e 	bl	80094e8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a8c:	e0fe      	b.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80f9 	beq.w	8005c8c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d011      	beq.n	8005ac8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fc97 	bl	80073dc <SDMMC_CmdStopTransfer>
 8005aae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d008      	beq.n	8005ac8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f8e6 	bl	8005c94 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f040 80dc 	bne.w	8005c8c <HAL_SD_IRQHandler+0x2e4>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f040 80d6 	bne.w	8005c8c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0208 	bic.w	r2, r2, #8
 8005aee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f003 fcf5 	bl	80094e8 <HAL_SD_TxCpltCallback>
}
 8005afe:	e0c5      	b.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_SD_IRQHandler+0x178>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fd98 	bl	800664e <SD_Write_IT>
 8005b1e:	e0b5      	b.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b26:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 80ae 	beq.w	8005c8c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	f043 0202 	orr.w	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	f043 0208 	orr.w	r2, r3, #8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	f043 0220 	orr.w	r2, r3, #32
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	f043 0210 	orr.w	r2, r3, #16
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005bb0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fc10 	bl	80073dc <SDMMC_CmdStopTransfer>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f857 	bl	8005c94 <HAL_SD_ErrorCallback>
}
 8005be6:	e051      	b.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d04c      	beq.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <HAL_SD_IRQHandler+0x25e>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d011      	beq.n	8005c2a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <HAL_SD_IRQHandler+0x2c0>)
 8005c0c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fc fc1e 	bl	8002454 <HAL_DMA_Abort_IT>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d036      	beq.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fad0 	bl	80061c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005c28:	e030      	b.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <HAL_SD_IRQHandler+0x296>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d018      	beq.n	8005c70 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <HAL_SD_IRQHandler+0x2c4>)
 8005c44:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fc fc02 	bl	8002454 <HAL_DMA_Abort_IT>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01a      	beq.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 faeb 	bl	8006236 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005c60:	e014      	b.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
 8005c62:	bf00      	nop
 8005c64:	ffff3ec5 	.word	0xffff3ec5
 8005c68:	080061c9 	.word	0x080061c9
 8005c6c:	08006237 	.word	0x08006237
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f003 fc25 	bl	80094d4 <HAL_SD_AbortCallback>
}
 8005c8a:	e7ff      	b.n	8005c8c <HAL_SD_IRQHandler+0x2e4>
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cb6:	0f9b      	lsrs	r3, r3, #30
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc2:	0e9b      	lsrs	r3, r3, #26
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd4:	0e1b      	lsrs	r3, r3, #24
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf2:	0a1b      	lsrs	r3, r3, #8
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d08:	0d1b      	lsrs	r3, r3, #20
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d26:	0bdb      	lsrs	r3, r3, #15
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d38:	0b9b      	lsrs	r3, r3, #14
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d4a:	0b5b      	lsrs	r3, r3, #13
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5c:	0b1b      	lsrs	r3, r3, #12
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d163      	bne.n	8005e40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7c:	009a      	lsls	r2, r3, #2
 8005d7e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d82:	4013      	ands	r3, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005d88:	0f92      	lsrs	r2, r2, #30
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d94:	0edb      	lsrs	r3, r3, #27
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da6:	0e1b      	lsrs	r3, r3, #24
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db8:	0d5b      	lsrs	r3, r3, #21
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dca:	0c9b      	lsrs	r3, r3, #18
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ddc:	0bdb      	lsrs	r3, r3, #15
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	7e1b      	ldrb	r3, [r3, #24]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	3302      	adds	r3, #2
 8005e00:	2201      	movs	r2, #1
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005e0a:	fb03 f202 	mul.w	r2, r3, r2
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	7a1b      	ldrb	r3, [r3, #8]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	409a      	lsls	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e2c:	0a52      	lsrs	r2, r2, #9
 8005e2e:	fb03 f202 	mul.w	r2, r3, r2
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e3c:	661a      	str	r2, [r3, #96]	; 0x60
 8005e3e:	e031      	b.n	8005ea4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d11d      	bne.n	8005e84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e4c:	041b      	lsls	r3, r3, #16
 8005e4e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e56:	0c1b      	lsrs	r3, r3, #16
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	3301      	adds	r3, #1
 8005e64:	029a      	lsls	r2, r3, #10
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	661a      	str	r2, [r3, #96]	; 0x60
 8005e82:	e00f      	b.n	8005ea4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a58      	ldr	r2, [pc, #352]	; (8005fec <HAL_SD_GetCardCSD+0x344>)
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e09d      	b.n	8005fe0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea8:	0b9b      	lsrs	r3, r3, #14
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eba:	09db      	lsrs	r3, r3, #7
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	0fdb      	lsrs	r3, r3, #31
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	0f5b      	lsrs	r3, r3, #29
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efa:	0e9b      	lsrs	r3, r3, #26
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	0d9b      	lsrs	r3, r3, #22
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	0d5b      	lsrs	r3, r3, #21
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	0c1b      	lsrs	r3, r3, #16
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4e:	0bdb      	lsrs	r3, r3, #15
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f62:	0b9b      	lsrs	r3, r3, #14
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	0b5b      	lsrs	r3, r3, #13
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	0b1b      	lsrs	r3, r3, #12
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	0a9b      	lsrs	r3, r3, #10
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	0a1b      	lsrs	r3, r3, #8
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	004005ff 	.word	0x004005ff

08005ff0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006054:	f107 030c 	add.w	r3, r7, #12
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa7e 	bl	800655c <SD_SendStatus>
 8006060:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	0a5b      	lsrs	r3, r3, #9
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800607e:	693b      	ldr	r3, [r7, #16]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	2b82      	cmp	r3, #130	; 0x82
 80060c6:	d111      	bne.n	80060ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 f985 	bl	80073dc <SDMMC_CmdStopTransfer>
 80060d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d008      	beq.n	80060ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	431a      	orrs	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7ff fdd4 	bl	8005c94 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0208 	bic.w	r2, r2, #8
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f240 523a 	movw	r2, #1338	; 0x53a
 8006104:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f003 f9f1 	bl	80094fc <HAL_SD_RxCpltCallback>
#endif
}
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fc fb3a 	bl	80027ac <HAL_DMA_GetError>
 8006138:	4603      	mov	r3, r0
 800613a:	2b02      	cmp	r3, #2
 800613c:	d03e      	beq.n	80061bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006144:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d002      	beq.n	800615a <SD_DMAError+0x36>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d12d      	bne.n	80061b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <SD_DMAError+0xa0>)
 8006160:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006170:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800617e:	6978      	ldr	r0, [r7, #20]
 8006180:	f7ff ff62 	bl	8006048 <HAL_SD_GetCardState>
 8006184:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b06      	cmp	r3, #6
 800618a:	d002      	beq.n	8006192 <SD_DMAError+0x6e>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b05      	cmp	r3, #5
 8006190:	d10a      	bne.n	80061a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f001 f920 	bl	80073dc <SDMMC_CmdStopTransfer>
 800619c:	4602      	mov	r2, r0
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	431a      	orrs	r2, r3
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2200      	movs	r2, #0
 80061b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80061b6:	6978      	ldr	r0, [r7, #20]
 80061b8:	f7ff fd6c 	bl	8005c94 <HAL_SD_ErrorCallback>
#endif
  }
}
 80061bc:	bf00      	nop
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	004005ff 	.word	0x004005ff

080061c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f240 523a 	movw	r2, #1338	; 0x53a
 80061de:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff ff31 	bl	8006048 <HAL_SD_GetCardState>
 80061e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b06      	cmp	r3, #6
 80061fa:	d002      	beq.n	8006202 <SD_DMATxAbort+0x3a>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d10a      	bne.n	8006218 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f001 f8e8 	bl	80073dc <SDMMC_CmdStopTransfer>
 800620c:	4602      	mov	r2, r0
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	431a      	orrs	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f003 f957 	bl	80094d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006226:	e002      	b.n	800622e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff fd33 	bl	8005c94 <HAL_SD_ErrorCallback>
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f240 523a 	movw	r2, #1338	; 0x53a
 800624c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff fefa 	bl	8006048 <HAL_SD_GetCardState>
 8006254:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b06      	cmp	r3, #6
 8006268:	d002      	beq.n	8006270 <SD_DMARxAbort+0x3a>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b05      	cmp	r3, #5
 800626e:	d10a      	bne.n	8006286 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f8b1 	bl	80073dc <SDMMC_CmdStopTransfer>
 800627a:	4602      	mov	r2, r0
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f003 f920 	bl	80094d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006294:	e002      	b.n	800629c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fcfc 	bl	8005c94 <HAL_SD_ErrorCallback>
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80062a4:	b5b0      	push	{r4, r5, r7, lr}
 80062a6:	b094      	sub	sp, #80	; 0x50
 80062a8:	af04      	add	r7, sp, #16
 80062aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80062ac:	2301      	movs	r3, #1
 80062ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 ff63 	bl	8007180 <SDMMC_GetPowerState>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80062c4:	e0b8      	b.n	8006438 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d02f      	beq.n	800632e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f94a 	bl	800756c <SDMMC_CmdSendCID>
 80062d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80062da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80062e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e2:	e0a9      	b.n	8006438 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 ff8d 	bl	800720a <SDMMC_GetResponse>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2104      	movs	r1, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 ff84 	bl	800720a <SDMMC_GetResponse>
 8006302:	4602      	mov	r2, r0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2108      	movs	r1, #8
 800630e:	4618      	mov	r0, r3
 8006310:	f000 ff7b 	bl	800720a <SDMMC_GetResponse>
 8006314:	4602      	mov	r2, r0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	210c      	movs	r1, #12
 8006320:	4618      	mov	r0, r3
 8006322:	f000 ff72 	bl	800720a <SDMMC_GetResponse>
 8006326:	4602      	mov	r2, r0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	2b03      	cmp	r3, #3
 8006334:	d00d      	beq.n	8006352 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f107 020e 	add.w	r2, r7, #14
 800633e:	4611      	mov	r1, r2
 8006340:	4618      	mov	r0, r3
 8006342:	f001 f950 	bl	80075e6 <SDMMC_CmdSetRelAdd>
 8006346:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <SD_InitCard+0xae>
    {
      return errorstate;
 800634e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006350:	e072      	b.n	8006438 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006356:	2b03      	cmp	r3, #3
 8006358:	d036      	beq.n	80063c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800635a:	89fb      	ldrh	r3, [r7, #14]
 800635c:	461a      	mov	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636a:	041b      	lsls	r3, r3, #16
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f001 f91a 	bl	80075a8 <SDMMC_CmdSendCSD>
 8006374:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <SD_InitCard+0xdc>
    {
      return errorstate;
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	e05b      	b.n	8006438 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f000 ff3f 	bl	800720a <SDMMC_GetResponse>
 800638c:	4602      	mov	r2, r0
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2104      	movs	r1, #4
 8006398:	4618      	mov	r0, r3
 800639a:	f000 ff36 	bl	800720a <SDMMC_GetResponse>
 800639e:	4602      	mov	r2, r0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2108      	movs	r1, #8
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 ff2d 	bl	800720a <SDMMC_GetResponse>
 80063b0:	4602      	mov	r2, r0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	210c      	movs	r1, #12
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 ff24 	bl	800720a <SDMMC_GetResponse>
 80063c2:	4602      	mov	r2, r0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2104      	movs	r1, #4
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 ff1b 	bl	800720a <SDMMC_GetResponse>
 80063d4:	4603      	mov	r3, r0
 80063d6:	0d1a      	lsrs	r2, r3, #20
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80063dc:	f107 0310 	add.w	r3, r7, #16
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff fc60 	bl	8005ca8 <HAL_SD_GetCardCSD>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063f2:	e021      	b.n	8006438 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6819      	ldr	r1, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fc:	041b      	lsls	r3, r3, #16
 80063fe:	2200      	movs	r2, #0
 8006400:	461c      	mov	r4, r3
 8006402:	4615      	mov	r5, r2
 8006404:	4622      	mov	r2, r4
 8006406:	462b      	mov	r3, r5
 8006408:	4608      	mov	r0, r1
 800640a:	f001 f809 	bl	8007420 <SDMMC_CmdSelDesel>
 800640e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <SD_InitCard+0x176>
  {
    return errorstate;
 8006416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006418:	e00e      	b.n	8006438 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681d      	ldr	r5, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	466c      	mov	r4, sp
 8006422:	f103 0210 	add.w	r2, r3, #16
 8006426:	ca07      	ldmia	r2, {r0, r1, r2}
 8006428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800642c:	3304      	adds	r3, #4
 800642e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006430:	4628      	mov	r0, r5
 8006432:	f000 fe4d 	bl	80070d0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3740      	adds	r7, #64	; 0x40
 800643c:	46bd      	mov	sp, r7
 800643e:	bdb0      	pop	{r4, r5, r7, pc}

08006440 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f001 f804 	bl	8007466 <SDMMC_CmdGoIdleState>
 800645e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	e072      	b.n	8006550 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f001 f817 	bl	80074a2 <SDMMC_CmdOperCond>
 8006474:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00d      	beq.n	8006498 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 ffed 	bl	8007466 <SDMMC_CmdGoIdleState>
 800648c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	e05b      	b.n	8006550 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d137      	bne.n	8006516 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2100      	movs	r1, #0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 f817 	bl	80074e0 <SDMMC_CmdAppCommand>
 80064b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d02d      	beq.n	8006516 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064be:	e047      	b.n	8006550 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 f80a 	bl	80074e0 <SDMMC_CmdAppCommand>
 80064cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	e03b      	b.n	8006550 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	491e      	ldr	r1, [pc, #120]	; (8006558 <SD_PowerON+0x118>)
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 f820 	bl	8007524 <SDMMC_CmdAppOperCommand>
 80064e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064f0:	e02e      	b.n	8006550 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2100      	movs	r1, #0
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fe86 	bl	800720a <SDMMC_GetResponse>
 80064fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	0fdb      	lsrs	r3, r3, #31
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <SD_PowerON+0xcc>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <SD_PowerON+0xce>
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]

    count++;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	3301      	adds	r3, #1
 8006514:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800651c:	4293      	cmp	r3, r2
 800651e:	d802      	bhi.n	8006526 <SD_PowerON+0xe6>
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0cc      	beq.n	80064c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800652c:	4293      	cmp	r3, r2
 800652e:	d902      	bls.n	8006536 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006534:	e00c      	b.n	8006550 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
 8006546:	e002      	b.n	800654e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	c1100000 	.word	0xc1100000

0800655c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800656c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006570:	e018      	b.n	80065a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657a:	041b      	lsls	r3, r3, #16
 800657c:	4619      	mov	r1, r3
 800657e:	4610      	mov	r0, r2
 8006580:	f001 f852 	bl	8007628 <SDMMC_CmdSendStatus>
 8006584:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <SD_SendStatus+0x34>
  {
    return errorstate;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	e009      	b.n	80065a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f000 fe37 	bl	800720a <SDMMC_GetResponse>
 800659c:	4602      	mov	r2, r0
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d03f      	beq.n	8006646 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	e033      	b.n	8006634 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fda9 	bl	8007128 <SDMMC_ReadFIFO>
 80065d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	0a1b      	lsrs	r3, r3, #8
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3301      	adds	r3, #1
 80065fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	3b01      	subs	r3, #1
 8006600:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	b2da      	uxtb	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3b01      	subs	r3, #1
 8006616:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	0e1b      	lsrs	r3, r3, #24
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	3b01      	subs	r3, #1
 800662c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	3301      	adds	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2b07      	cmp	r3, #7
 8006638:	d9c8      	bls.n	80065cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006646:	bf00      	nop
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b086      	sub	sp, #24
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d043      	beq.n	80066f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	e037      	b.n	80066de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	3b01      	subs	r3, #1
 800667e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	021a      	lsls	r2, r3, #8
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4313      	orrs	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3b01      	subs	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	041a      	lsls	r2, r3, #16
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	061a      	lsls	r2, r3, #24
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3301      	adds	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f107 0208 	add.w	r2, r7, #8
 80066d0:	4611      	mov	r1, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fd35 	bl	8007142 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	3301      	adds	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b07      	cmp	r3, #7
 80066e2:	d9c4      	bls.n	800666e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80066f0:	bf00      	nop
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e040      	b.n	800678c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fa fcca 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2224      	movs	r2, #36	; 0x24
 8006724:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f8b0 	bl	800689c <UART_SetConfig>
 800673c:	4603      	mov	r3, r0
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e022      	b.n	800678c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fb08 	bl	8006d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb8f 	bl	8006ea8 <UART_CheckIdleState>
 800678a:	4603      	mov	r3, r0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	; 0x28
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	4613      	mov	r3, r2
 80067a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d171      	bne.n	8006890 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <HAL_UART_Transmit+0x24>
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e06a      	b.n	8006892 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2221      	movs	r2, #33	; 0x21
 80067c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ca:	f7fa fe5f 	bl	800148c <HAL_GetTick>
 80067ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	88fa      	ldrh	r2, [r7, #6]
 80067d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	88fa      	ldrh	r2, [r7, #6]
 80067dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	d108      	bne.n	80067fc <HAL_UART_Transmit+0x68>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e003      	b.n	8006804 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006804:	e02c      	b.n	8006860 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	2180      	movs	r1, #128	; 0x80
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fb96 	bl	8006f42 <UART_WaitOnFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e038      	b.n	8006892 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006834:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	3302      	adds	r3, #2
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	e007      	b.n	800684e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	3301      	adds	r3, #1
 800684c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1cc      	bne.n	8006806 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2200      	movs	r2, #0
 8006874:	2140      	movs	r1, #64	; 0x40
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fb63 	bl	8006f42 <UART_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e005      	b.n	8006892 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	e000      	b.n	8006892 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006890:	2302      	movs	r3, #2
  }
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	4ba6      	ldr	r3, [pc, #664]	; (8006b60 <UART_SetConfig+0x2c4>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	6979      	ldr	r1, [r7, #20]
 80068d0:	430b      	orrs	r3, r1
 80068d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	430a      	orrs	r2, r1
 800690c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a94      	ldr	r2, [pc, #592]	; (8006b64 <UART_SetConfig+0x2c8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d120      	bne.n	800695a <UART_SetConfig+0xbe>
 8006918:	4b93      	ldr	r3, [pc, #588]	; (8006b68 <UART_SetConfig+0x2cc>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b03      	cmp	r3, #3
 8006924:	d816      	bhi.n	8006954 <UART_SetConfig+0xb8>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <UART_SetConfig+0x90>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	0800693d 	.word	0x0800693d
 8006930:	08006949 	.word	0x08006949
 8006934:	08006943 	.word	0x08006943
 8006938:	0800694f 	.word	0x0800694f
 800693c:	2301      	movs	r3, #1
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e150      	b.n	8006be4 <UART_SetConfig+0x348>
 8006942:	2302      	movs	r3, #2
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e14d      	b.n	8006be4 <UART_SetConfig+0x348>
 8006948:	2304      	movs	r3, #4
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e14a      	b.n	8006be4 <UART_SetConfig+0x348>
 800694e:	2308      	movs	r3, #8
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e147      	b.n	8006be4 <UART_SetConfig+0x348>
 8006954:	2310      	movs	r3, #16
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e144      	b.n	8006be4 <UART_SetConfig+0x348>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a83      	ldr	r2, [pc, #524]	; (8006b6c <UART_SetConfig+0x2d0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d132      	bne.n	80069ca <UART_SetConfig+0x12e>
 8006964:	4b80      	ldr	r3, [pc, #512]	; (8006b68 <UART_SetConfig+0x2cc>)
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696a:	f003 030c 	and.w	r3, r3, #12
 800696e:	2b0c      	cmp	r3, #12
 8006970:	d828      	bhi.n	80069c4 <UART_SetConfig+0x128>
 8006972:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <UART_SetConfig+0xdc>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	080069ad 	.word	0x080069ad
 800697c:	080069c5 	.word	0x080069c5
 8006980:	080069c5 	.word	0x080069c5
 8006984:	080069c5 	.word	0x080069c5
 8006988:	080069b9 	.word	0x080069b9
 800698c:	080069c5 	.word	0x080069c5
 8006990:	080069c5 	.word	0x080069c5
 8006994:	080069c5 	.word	0x080069c5
 8006998:	080069b3 	.word	0x080069b3
 800699c:	080069c5 	.word	0x080069c5
 80069a0:	080069c5 	.word	0x080069c5
 80069a4:	080069c5 	.word	0x080069c5
 80069a8:	080069bf 	.word	0x080069bf
 80069ac:	2300      	movs	r3, #0
 80069ae:	77fb      	strb	r3, [r7, #31]
 80069b0:	e118      	b.n	8006be4 <UART_SetConfig+0x348>
 80069b2:	2302      	movs	r3, #2
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e115      	b.n	8006be4 <UART_SetConfig+0x348>
 80069b8:	2304      	movs	r3, #4
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e112      	b.n	8006be4 <UART_SetConfig+0x348>
 80069be:	2308      	movs	r3, #8
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e10f      	b.n	8006be4 <UART_SetConfig+0x348>
 80069c4:	2310      	movs	r3, #16
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e10c      	b.n	8006be4 <UART_SetConfig+0x348>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a68      	ldr	r2, [pc, #416]	; (8006b70 <UART_SetConfig+0x2d4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d120      	bne.n	8006a16 <UART_SetConfig+0x17a>
 80069d4:	4b64      	ldr	r3, [pc, #400]	; (8006b68 <UART_SetConfig+0x2cc>)
 80069d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069de:	2b30      	cmp	r3, #48	; 0x30
 80069e0:	d013      	beq.n	8006a0a <UART_SetConfig+0x16e>
 80069e2:	2b30      	cmp	r3, #48	; 0x30
 80069e4:	d814      	bhi.n	8006a10 <UART_SetConfig+0x174>
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d009      	beq.n	80069fe <UART_SetConfig+0x162>
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d810      	bhi.n	8006a10 <UART_SetConfig+0x174>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <UART_SetConfig+0x15c>
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d006      	beq.n	8006a04 <UART_SetConfig+0x168>
 80069f6:	e00b      	b.n	8006a10 <UART_SetConfig+0x174>
 80069f8:	2300      	movs	r3, #0
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e0f2      	b.n	8006be4 <UART_SetConfig+0x348>
 80069fe:	2302      	movs	r3, #2
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e0ef      	b.n	8006be4 <UART_SetConfig+0x348>
 8006a04:	2304      	movs	r3, #4
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e0ec      	b.n	8006be4 <UART_SetConfig+0x348>
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e0e9      	b.n	8006be4 <UART_SetConfig+0x348>
 8006a10:	2310      	movs	r3, #16
 8006a12:	77fb      	strb	r3, [r7, #31]
 8006a14:	e0e6      	b.n	8006be4 <UART_SetConfig+0x348>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a56      	ldr	r2, [pc, #344]	; (8006b74 <UART_SetConfig+0x2d8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d120      	bne.n	8006a62 <UART_SetConfig+0x1c6>
 8006a20:	4b51      	ldr	r3, [pc, #324]	; (8006b68 <UART_SetConfig+0x2cc>)
 8006a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a2c:	d013      	beq.n	8006a56 <UART_SetConfig+0x1ba>
 8006a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a30:	d814      	bhi.n	8006a5c <UART_SetConfig+0x1c0>
 8006a32:	2b80      	cmp	r3, #128	; 0x80
 8006a34:	d009      	beq.n	8006a4a <UART_SetConfig+0x1ae>
 8006a36:	2b80      	cmp	r3, #128	; 0x80
 8006a38:	d810      	bhi.n	8006a5c <UART_SetConfig+0x1c0>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <UART_SetConfig+0x1a8>
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	d006      	beq.n	8006a50 <UART_SetConfig+0x1b4>
 8006a42:	e00b      	b.n	8006a5c <UART_SetConfig+0x1c0>
 8006a44:	2300      	movs	r3, #0
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e0cc      	b.n	8006be4 <UART_SetConfig+0x348>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e0c9      	b.n	8006be4 <UART_SetConfig+0x348>
 8006a50:	2304      	movs	r3, #4
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e0c6      	b.n	8006be4 <UART_SetConfig+0x348>
 8006a56:	2308      	movs	r3, #8
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e0c3      	b.n	8006be4 <UART_SetConfig+0x348>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e0c0      	b.n	8006be4 <UART_SetConfig+0x348>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a44      	ldr	r2, [pc, #272]	; (8006b78 <UART_SetConfig+0x2dc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d125      	bne.n	8006ab8 <UART_SetConfig+0x21c>
 8006a6c:	4b3e      	ldr	r3, [pc, #248]	; (8006b68 <UART_SetConfig+0x2cc>)
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7a:	d017      	beq.n	8006aac <UART_SetConfig+0x210>
 8006a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a80:	d817      	bhi.n	8006ab2 <UART_SetConfig+0x216>
 8006a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a86:	d00b      	beq.n	8006aa0 <UART_SetConfig+0x204>
 8006a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8c:	d811      	bhi.n	8006ab2 <UART_SetConfig+0x216>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <UART_SetConfig+0x1fe>
 8006a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a96:	d006      	beq.n	8006aa6 <UART_SetConfig+0x20a>
 8006a98:	e00b      	b.n	8006ab2 <UART_SetConfig+0x216>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	77fb      	strb	r3, [r7, #31]
 8006a9e:	e0a1      	b.n	8006be4 <UART_SetConfig+0x348>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	e09e      	b.n	8006be4 <UART_SetConfig+0x348>
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	77fb      	strb	r3, [r7, #31]
 8006aaa:	e09b      	b.n	8006be4 <UART_SetConfig+0x348>
 8006aac:	2308      	movs	r3, #8
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	e098      	b.n	8006be4 <UART_SetConfig+0x348>
 8006ab2:	2310      	movs	r3, #16
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e095      	b.n	8006be4 <UART_SetConfig+0x348>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a2f      	ldr	r2, [pc, #188]	; (8006b7c <UART_SetConfig+0x2e0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d125      	bne.n	8006b0e <UART_SetConfig+0x272>
 8006ac2:	4b29      	ldr	r3, [pc, #164]	; (8006b68 <UART_SetConfig+0x2cc>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ad0:	d017      	beq.n	8006b02 <UART_SetConfig+0x266>
 8006ad2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ad6:	d817      	bhi.n	8006b08 <UART_SetConfig+0x26c>
 8006ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006adc:	d00b      	beq.n	8006af6 <UART_SetConfig+0x25a>
 8006ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae2:	d811      	bhi.n	8006b08 <UART_SetConfig+0x26c>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <UART_SetConfig+0x254>
 8006ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aec:	d006      	beq.n	8006afc <UART_SetConfig+0x260>
 8006aee:	e00b      	b.n	8006b08 <UART_SetConfig+0x26c>
 8006af0:	2301      	movs	r3, #1
 8006af2:	77fb      	strb	r3, [r7, #31]
 8006af4:	e076      	b.n	8006be4 <UART_SetConfig+0x348>
 8006af6:	2302      	movs	r3, #2
 8006af8:	77fb      	strb	r3, [r7, #31]
 8006afa:	e073      	b.n	8006be4 <UART_SetConfig+0x348>
 8006afc:	2304      	movs	r3, #4
 8006afe:	77fb      	strb	r3, [r7, #31]
 8006b00:	e070      	b.n	8006be4 <UART_SetConfig+0x348>
 8006b02:	2308      	movs	r3, #8
 8006b04:	77fb      	strb	r3, [r7, #31]
 8006b06:	e06d      	b.n	8006be4 <UART_SetConfig+0x348>
 8006b08:	2310      	movs	r3, #16
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e06a      	b.n	8006be4 <UART_SetConfig+0x348>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1b      	ldr	r2, [pc, #108]	; (8006b80 <UART_SetConfig+0x2e4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d138      	bne.n	8006b8a <UART_SetConfig+0x2ee>
 8006b18:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <UART_SetConfig+0x2cc>)
 8006b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b26:	d017      	beq.n	8006b58 <UART_SetConfig+0x2bc>
 8006b28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b2c:	d82a      	bhi.n	8006b84 <UART_SetConfig+0x2e8>
 8006b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b32:	d00b      	beq.n	8006b4c <UART_SetConfig+0x2b0>
 8006b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b38:	d824      	bhi.n	8006b84 <UART_SetConfig+0x2e8>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <UART_SetConfig+0x2aa>
 8006b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b42:	d006      	beq.n	8006b52 <UART_SetConfig+0x2b6>
 8006b44:	e01e      	b.n	8006b84 <UART_SetConfig+0x2e8>
 8006b46:	2300      	movs	r3, #0
 8006b48:	77fb      	strb	r3, [r7, #31]
 8006b4a:	e04b      	b.n	8006be4 <UART_SetConfig+0x348>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e048      	b.n	8006be4 <UART_SetConfig+0x348>
 8006b52:	2304      	movs	r3, #4
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e045      	b.n	8006be4 <UART_SetConfig+0x348>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e042      	b.n	8006be4 <UART_SetConfig+0x348>
 8006b5e:	bf00      	nop
 8006b60:	efff69f3 	.word	0xefff69f3
 8006b64:	40011000 	.word	0x40011000
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	40004400 	.word	0x40004400
 8006b70:	40004800 	.word	0x40004800
 8006b74:	40004c00 	.word	0x40004c00
 8006b78:	40005000 	.word	0x40005000
 8006b7c:	40011400 	.word	0x40011400
 8006b80:	40007800 	.word	0x40007800
 8006b84:	2310      	movs	r3, #16
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e02c      	b.n	8006be4 <UART_SetConfig+0x348>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a72      	ldr	r2, [pc, #456]	; (8006d58 <UART_SetConfig+0x4bc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d125      	bne.n	8006be0 <UART_SetConfig+0x344>
 8006b94:	4b71      	ldr	r3, [pc, #452]	; (8006d5c <UART_SetConfig+0x4c0>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ba2:	d017      	beq.n	8006bd4 <UART_SetConfig+0x338>
 8006ba4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ba8:	d817      	bhi.n	8006bda <UART_SetConfig+0x33e>
 8006baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bae:	d00b      	beq.n	8006bc8 <UART_SetConfig+0x32c>
 8006bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb4:	d811      	bhi.n	8006bda <UART_SetConfig+0x33e>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <UART_SetConfig+0x326>
 8006bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bbe:	d006      	beq.n	8006bce <UART_SetConfig+0x332>
 8006bc0:	e00b      	b.n	8006bda <UART_SetConfig+0x33e>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	77fb      	strb	r3, [r7, #31]
 8006bc6:	e00d      	b.n	8006be4 <UART_SetConfig+0x348>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e00a      	b.n	8006be4 <UART_SetConfig+0x348>
 8006bce:	2304      	movs	r3, #4
 8006bd0:	77fb      	strb	r3, [r7, #31]
 8006bd2:	e007      	b.n	8006be4 <UART_SetConfig+0x348>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e004      	b.n	8006be4 <UART_SetConfig+0x348>
 8006bda:	2310      	movs	r3, #16
 8006bdc:	77fb      	strb	r3, [r7, #31]
 8006bde:	e001      	b.n	8006be4 <UART_SetConfig+0x348>
 8006be0:	2310      	movs	r3, #16
 8006be2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bec:	d15b      	bne.n	8006ca6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006bee:	7ffb      	ldrb	r3, [r7, #31]
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d828      	bhi.n	8006c46 <UART_SetConfig+0x3aa>
 8006bf4:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0x360>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c29 	.word	0x08006c29
 8006c04:	08006c31 	.word	0x08006c31
 8006c08:	08006c47 	.word	0x08006c47
 8006c0c:	08006c37 	.word	0x08006c37
 8006c10:	08006c47 	.word	0x08006c47
 8006c14:	08006c47 	.word	0x08006c47
 8006c18:	08006c47 	.word	0x08006c47
 8006c1c:	08006c3f 	.word	0x08006c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c20:	f7fd fff2 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8006c24:	61b8      	str	r0, [r7, #24]
        break;
 8006c26:	e013      	b.n	8006c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c28:	f7fe f802 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8006c2c:	61b8      	str	r0, [r7, #24]
        break;
 8006c2e:	e00f      	b.n	8006c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c30:	4b4b      	ldr	r3, [pc, #300]	; (8006d60 <UART_SetConfig+0x4c4>)
 8006c32:	61bb      	str	r3, [r7, #24]
        break;
 8006c34:	e00c      	b.n	8006c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c36:	f7fd fed5 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8006c3a:	61b8      	str	r0, [r7, #24]
        break;
 8006c3c:	e008      	b.n	8006c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c42:	61bb      	str	r3, [r7, #24]
        break;
 8006c44:	e004      	b.n	8006c50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d074      	beq.n	8006d40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	005a      	lsls	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	441a      	add	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2b0f      	cmp	r3, #15
 8006c70:	d916      	bls.n	8006ca0 <UART_SetConfig+0x404>
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c78:	d212      	bcs.n	8006ca0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f023 030f 	bic.w	r3, r3, #15
 8006c82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	89fb      	ldrh	r3, [r7, #14]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	89fa      	ldrh	r2, [r7, #14]
 8006c9c:	60da      	str	r2, [r3, #12]
 8006c9e:	e04f      	b.n	8006d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	77bb      	strb	r3, [r7, #30]
 8006ca4:	e04c      	b.n	8006d40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ca6:	7ffb      	ldrb	r3, [r7, #31]
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d828      	bhi.n	8006cfe <UART_SetConfig+0x462>
 8006cac:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0x418>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006cd9 	.word	0x08006cd9
 8006cb8:	08006ce1 	.word	0x08006ce1
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	08006cff 	.word	0x08006cff
 8006cc4:	08006cef 	.word	0x08006cef
 8006cc8:	08006cff 	.word	0x08006cff
 8006ccc:	08006cff 	.word	0x08006cff
 8006cd0:	08006cff 	.word	0x08006cff
 8006cd4:	08006cf7 	.word	0x08006cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd8:	f7fd ff96 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8006cdc:	61b8      	str	r0, [r7, #24]
        break;
 8006cde:	e013      	b.n	8006d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce0:	f7fd ffa6 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8006ce4:	61b8      	str	r0, [r7, #24]
        break;
 8006ce6:	e00f      	b.n	8006d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <UART_SetConfig+0x4c4>)
 8006cea:	61bb      	str	r3, [r7, #24]
        break;
 8006cec:	e00c      	b.n	8006d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cee:	f7fd fe79 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8006cf2:	61b8      	str	r0, [r7, #24]
        break;
 8006cf4:	e008      	b.n	8006d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfa:	61bb      	str	r3, [r7, #24]
        break;
 8006cfc:	e004      	b.n	8006d08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	77bb      	strb	r3, [r7, #30]
        break;
 8006d06:	bf00      	nop
    }

    if (pclk != 0U)
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d018      	beq.n	8006d40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	085a      	lsrs	r2, r3, #1
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	441a      	add	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b0f      	cmp	r3, #15
 8006d26:	d909      	bls.n	8006d3c <UART_SetConfig+0x4a0>
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2e:	d205      	bcs.n	8006d3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60da      	str	r2, [r3, #12]
 8006d3a:	e001      	b.n	8006d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40007c00 	.word	0x40007c00
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	00f42400 	.word	0x00f42400

08006d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01a      	beq.n	8006e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e62:	d10a      	bne.n	8006e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	605a      	str	r2, [r3, #4]
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eb8:	f7fa fae8 	bl	800148c <HAL_GetTick>
 8006ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d10e      	bne.n	8006eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f831 	bl	8006f42 <UART_WaitOnFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e027      	b.n	8006f3a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d10e      	bne.n	8006f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f81b 	bl	8006f42 <UART_WaitOnFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e011      	b.n	8006f3a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b09c      	sub	sp, #112	; 0x70
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	603b      	str	r3, [r7, #0]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f52:	e0a7      	b.n	80070a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f5a:	f000 80a3 	beq.w	80070a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5e:	f7fa fa95 	bl	800148c <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d302      	bcc.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d13f      	bne.n	8006ff4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f88:	667b      	str	r3, [r7, #100]	; 0x64
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e6      	bne.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	f023 0301 	bic.w	r3, r3, #1
 8006fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e5      	bne.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e068      	b.n	80070c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d050      	beq.n	80070a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800700c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007010:	d148      	bne.n	80070a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800701a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007030:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
 800703c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e6      	bne.n	800701c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	613b      	str	r3, [r7, #16]
   return(result);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	66bb      	str	r3, [r7, #104]	; 0x68
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800706e:	623a      	str	r2, [r7, #32]
 8007070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	69f9      	ldr	r1, [r7, #28]
 8007074:	6a3a      	ldr	r2, [r7, #32]
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	61bb      	str	r3, [r7, #24]
   return(result);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e5      	bne.n	800704e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e010      	b.n	80070c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69da      	ldr	r2, [r3, #28]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4013      	ands	r3, r2
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	bf0c      	ite	eq
 80070b4:	2301      	moveq	r3, #1
 80070b6:	2300      	movne	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	429a      	cmp	r2, r3
 80070c0:	f43f af48 	beq.w	8006f54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3770      	adds	r7, #112	; 0x70
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80070d0:	b084      	sub	sp, #16
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	f107 001c 	add.w	r0, r7, #28
 80070de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80070e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80070e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80070ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80070ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80070f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80070f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80070fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	4b07      	ldr	r3, [pc, #28]	; (8007124 <SDMMC_Init+0x54>)
 8007108:	4013      	ands	r3, r2
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	b004      	add	sp, #16
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	ffff8100 	.word	0xffff8100

08007128 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2203      	movs	r2, #3
 8007170:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0303 	and.w	r3, r3, #3
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80071c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80071c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <SDMMC_SendCommand+0x50>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	fffff000 	.word	0xfffff000

080071f0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	b2db      	uxtb	r3, r3
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3314      	adds	r3, #20
 8007218:	461a      	mov	r2, r3
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	4413      	add	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
}  
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007256:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800725c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007262:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800727a:	2300      	movs	r3, #0

}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007296:	2310      	movs	r3, #16
 8007298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800729a:	2340      	movs	r3, #64	; 0x40
 800729c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072a8:	f107 0308 	add.w	r3, r7, #8
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff ff74 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80072b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b8:	2110      	movs	r1, #16
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f9d6 	bl	800766c <SDMMC_GetCmdResp1>
 80072c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072c2:	69fb      	ldr	r3, [r7, #28]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3720      	adds	r7, #32
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80072da:	2311      	movs	r3, #17
 80072dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072de:	2340      	movs	r3, #64	; 0x40
 80072e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072e2:	2300      	movs	r3, #0
 80072e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072ec:	f107 0308 	add.w	r3, r7, #8
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff ff52 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80072f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fc:	2111      	movs	r1, #17
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f9b4 	bl	800766c <SDMMC_GetCmdResp1>
 8007304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007306:	69fb      	ldr	r3, [r7, #28]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800731e:	2312      	movs	r3, #18
 8007320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007322:	2340      	movs	r3, #64	; 0x40
 8007324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800732a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800732e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007330:	f107 0308 	add.w	r3, r7, #8
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff ff30 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800733c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007340:	2112      	movs	r1, #18
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f992 	bl	800766c <SDMMC_GetCmdResp1>
 8007348:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800734a:	69fb      	ldr	r3, [r7, #28]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3720      	adds	r7, #32
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007362:	2318      	movs	r3, #24
 8007364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007366:	2340      	movs	r3, #64	; 0x40
 8007368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800736e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007372:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007374:	f107 0308 	add.w	r3, r7, #8
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff ff0e 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007380:	f241 3288 	movw	r2, #5000	; 0x1388
 8007384:	2118      	movs	r1, #24
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f970 	bl	800766c <SDMMC_GetCmdResp1>
 800738c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800738e:	69fb      	ldr	r3, [r7, #28]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3720      	adds	r7, #32
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80073a6:	2319      	movs	r3, #25
 80073a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073aa:	2340      	movs	r3, #64	; 0x40
 80073ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073b8:	f107 0308 	add.w	r3, r7, #8
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff feec 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80073c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c8:	2119      	movs	r1, #25
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f94e 	bl	800766c <SDMMC_GetCmdResp1>
 80073d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073d2:	69fb      	ldr	r3, [r7, #28]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3720      	adds	r7, #32
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80073e8:	230c      	movs	r3, #12
 80073ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073ec:	2340      	movs	r3, #64	; 0x40
 80073ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073fa:	f107 0308 	add.w	r3, r7, #8
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff fecb 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007406:	4a05      	ldr	r2, [pc, #20]	; (800741c <SDMMC_CmdStopTransfer+0x40>)
 8007408:	210c      	movs	r1, #12
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f92e 	bl	800766c <SDMMC_GetCmdResp1>
 8007410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007412:	69fb      	ldr	r3, [r7, #28]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3720      	adds	r7, #32
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	05f5e100 	.word	0x05f5e100

08007420 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	; 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007430:	2307      	movs	r3, #7
 8007432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007434:	2340      	movs	r3, #64	; 0x40
 8007436:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800743c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007440:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007442:	f107 0310 	add.w	r3, r7, #16
 8007446:	4619      	mov	r1, r3
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7ff fea7 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800744e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007452:	2107      	movs	r1, #7
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f909 	bl	800766c <SDMMC_GetCmdResp1>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800745e:	4618      	mov	r0, r3
 8007460:	3728      	adds	r7, #40	; 0x28
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b088      	sub	sp, #32
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007476:	2300      	movs	r3, #0
 8007478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800747e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007482:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007484:	f107 0308 	add.w	r3, r7, #8
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff fe86 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fb23 	bl	8007adc <SDMMC_GetCmdError>
 8007496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007498:	69fb      	ldr	r3, [r7, #28]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3720      	adds	r7, #32
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b088      	sub	sp, #32
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80074aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80074ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80074b0:	2308      	movs	r3, #8
 80074b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074b4:	2340      	movs	r3, #64	; 0x40
 80074b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074b8:	2300      	movs	r3, #0
 80074ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074c2:	f107 0308 	add.w	r3, r7, #8
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff fe67 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fab6 	bl	8007a40 <SDMMC_GetCmdResp7>
 80074d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074d6:	69fb      	ldr	r3, [r7, #28]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074ee:	2337      	movs	r3, #55	; 0x37
 80074f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074f2:	2340      	movs	r3, #64	; 0x40
 80074f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007500:	f107 0308 	add.w	r3, r7, #8
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fe48 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800750c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007510:	2137      	movs	r1, #55	; 0x37
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f8aa 	bl	800766c <SDMMC_GetCmdResp1>
 8007518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800751a:	69fb      	ldr	r3, [r7, #28]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <SDMMC_CmdAppOperCommand+0x44>)
 8007532:	4313      	orrs	r3, r2
 8007534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007536:	2329      	movs	r3, #41	; 0x29
 8007538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800753a:	2340      	movs	r3, #64	; 0x40
 800753c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800753e:	2300      	movs	r3, #0
 8007540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007546:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007548:	f107 0308 	add.w	r3, r7, #8
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fe24 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f9bf 	bl	80078d8 <SDMMC_GetCmdResp3>
 800755a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800755c:	69fb      	ldr	r3, [r7, #28]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	80100000 	.word	0x80100000

0800756c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007578:	2302      	movs	r3, #2
 800757a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800757c:	23c0      	movs	r3, #192	; 0xc0
 800757e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800758a:	f107 0308 	add.w	r3, r7, #8
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff fe03 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f956 	bl	8007848 <SDMMC_GetCmdResp2>
 800759c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800759e:	69fb      	ldr	r3, [r7, #28]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80075b6:	2309      	movs	r3, #9
 80075b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80075ba:	23c0      	movs	r3, #192	; 0xc0
 80075bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075c8:	f107 0308 	add.w	r3, r7, #8
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fde4 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f937 	bl	8007848 <SDMMC_GetCmdResp2>
 80075da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075dc:	69fb      	ldr	r3, [r7, #28]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b088      	sub	sp, #32
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80075f4:	2303      	movs	r3, #3
 80075f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075f8:	2340      	movs	r3, #64	; 0x40
 80075fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075fc:	2300      	movs	r3, #0
 80075fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007604:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007606:	f107 0308 	add.w	r3, r7, #8
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff fdc5 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	2103      	movs	r1, #3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f99c 	bl	8007954 <SDMMC_GetCmdResp6>
 800761c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800761e:	69fb      	ldr	r3, [r7, #28]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007636:	230d      	movs	r3, #13
 8007638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800763a:	2340      	movs	r3, #64	; 0x40
 800763c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007646:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007648:	f107 0308 	add.w	r3, r7, #8
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fda4 	bl	800719c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007654:	f241 3288 	movw	r2, #5000	; 0x1388
 8007658:	210d      	movs	r1, #13
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f806 	bl	800766c <SDMMC_GetCmdResp1>
 8007660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007662:	69fb      	ldr	r3, [r7, #28]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	460b      	mov	r3, r1
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800767a:	4b70      	ldr	r3, [pc, #448]	; (800783c <SDMMC_GetCmdResp1+0x1d0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a70      	ldr	r2, [pc, #448]	; (8007840 <SDMMC_GetCmdResp1+0x1d4>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	0a5a      	lsrs	r2, r3, #9
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	fb02 f303 	mul.w	r3, r2, r3
 800768c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	1e5a      	subs	r2, r3, #1
 8007692:	61fa      	str	r2, [r7, #28]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007698:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800769c:	e0c9      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0ef      	beq.n	800768e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1ea      	bne.n	800768e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2204      	movs	r2, #4
 80076c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076ca:	2304      	movs	r3, #4
 80076cc:	e0b1      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e0a6      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	22c5      	movs	r2, #197	; 0xc5
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff fd80 	bl	80071f0 <SDMMC_GetCommandResponse>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d001      	beq.n	80076fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e099      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80076fe:	2100      	movs	r1, #0
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f7ff fd82 	bl	800720a <SDMMC_GetResponse>
 8007706:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4b4e      	ldr	r3, [pc, #312]	; (8007844 <SDMMC_GetCmdResp1+0x1d8>)
 800770c:	4013      	ands	r3, r2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007712:	2300      	movs	r3, #0
 8007714:	e08d      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	da02      	bge.n	8007722 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800771c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007720:	e087      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800772c:	2340      	movs	r3, #64	; 0x40
 800772e:	e080      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800773a:	2380      	movs	r3, #128	; 0x80
 800773c:	e079      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800774c:	e071      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800775c:	e069      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800776c:	e061      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800777c:	e059      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800778c:	e051      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800779c:	e049      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80077a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077ac:	e041      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80077b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077bc:	e039      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80077c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077cc:	e031      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80077d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80077dc:	e029      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80077e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077ec:	e021      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80077f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80077fc:	e019      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007808:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800780c:	e011      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007818:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800781c:	e009      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007828:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800782c:	e001      	b.n	8007832 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800782e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000000 	.word	0x20000000
 8007840:	10624dd3 	.word	0x10624dd3
 8007844:	fdffe008 	.word	0xfdffe008

08007848 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007850:	4b1f      	ldr	r3, [pc, #124]	; (80078d0 <SDMMC_GetCmdResp2+0x88>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1f      	ldr	r2, [pc, #124]	; (80078d4 <SDMMC_GetCmdResp2+0x8c>)
 8007856:	fba2 2303 	umull	r2, r3, r2, r3
 800785a:	0a5b      	lsrs	r3, r3, #9
 800785c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007860:	fb02 f303 	mul.w	r3, r2, r3
 8007864:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1e5a      	subs	r2, r3, #1
 800786a:	60fa      	str	r2, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007874:	e026      	b.n	80078c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0ef      	beq.n	8007866 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1ea      	bne.n	8007866 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078a2:	2304      	movs	r3, #4
 80078a4:	e00e      	b.n	80078c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e003      	b.n	80078c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	22c5      	movs	r2, #197	; 0xc5
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	20000000 	.word	0x20000000
 80078d4:	10624dd3 	.word	0x10624dd3

080078d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078e0:	4b1a      	ldr	r3, [pc, #104]	; (800794c <SDMMC_GetCmdResp3+0x74>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a1a      	ldr	r2, [pc, #104]	; (8007950 <SDMMC_GetCmdResp3+0x78>)
 80078e6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ea:	0a5b      	lsrs	r3, r3, #9
 80078ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f0:	fb02 f303 	mul.w	r3, r2, r3
 80078f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1e5a      	subs	r2, r3, #1
 80078fa:	60fa      	str	r2, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007900:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007904:	e01b      	b.n	800793e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0ef      	beq.n	80078f6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1ea      	bne.n	80078f6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2204      	movs	r2, #4
 8007930:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007932:	2304      	movs	r3, #4
 8007934:	e003      	b.n	800793e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	22c5      	movs	r2, #197	; 0xc5
 800793a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000000 	.word	0x20000000
 8007950:	10624dd3 	.word	0x10624dd3

08007954 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	460b      	mov	r3, r1
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007962:	4b35      	ldr	r3, [pc, #212]	; (8007a38 <SDMMC_GetCmdResp6+0xe4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a35      	ldr	r2, [pc, #212]	; (8007a3c <SDMMC_GetCmdResp6+0xe8>)
 8007968:	fba2 2303 	umull	r2, r3, r2, r3
 800796c:	0a5b      	lsrs	r3, r3, #9
 800796e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007972:	fb02 f303 	mul.w	r3, r2, r3
 8007976:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	1e5a      	subs	r2, r3, #1
 800797c:	61fa      	str	r2, [r7, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d102      	bne.n	8007988 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007982:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007986:	e052      	b.n	8007a2e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0ef      	beq.n	8007978 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1ea      	bne.n	8007978 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d004      	beq.n	80079b8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2204      	movs	r2, #4
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079b4:	2304      	movs	r3, #4
 80079b6:	e03a      	b.n	8007a2e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d004      	beq.n	80079ce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e02f      	b.n	8007a2e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f7ff fc0e 	bl	80071f0 <SDMMC_GetCommandResponse>
 80079d4:	4603      	mov	r3, r0
 80079d6:	461a      	mov	r2, r3
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	4293      	cmp	r3, r2
 80079dc:	d001      	beq.n	80079e2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079de:	2301      	movs	r3, #1
 80079e0:	e025      	b.n	8007a2e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	22c5      	movs	r2, #197	; 0xc5
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80079e8:	2100      	movs	r1, #0
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f7ff fc0d 	bl	800720a <SDMMC_GetResponse>
 80079f0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	0c1b      	lsrs	r3, r3, #16
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e011      	b.n	8007a2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a18:	e009      	b.n	8007a2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a28:	e001      	b.n	8007a2e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3720      	adds	r7, #32
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000000 	.word	0x20000000
 8007a3c:	10624dd3 	.word	0x10624dd3

08007a40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a48:	4b22      	ldr	r3, [pc, #136]	; (8007ad4 <SDMMC_GetCmdResp7+0x94>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a22      	ldr	r2, [pc, #136]	; (8007ad8 <SDMMC_GetCmdResp7+0x98>)
 8007a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a52:	0a5b      	lsrs	r3, r3, #9
 8007a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a58:	fb02 f303 	mul.w	r3, r2, r3
 8007a5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1e5a      	subs	r2, r3, #1
 8007a62:	60fa      	str	r2, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a6c:	e02c      	b.n	8007ac8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0ef      	beq.n	8007a5e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1ea      	bne.n	8007a5e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d004      	beq.n	8007a9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2204      	movs	r2, #4
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a9a:	2304      	movs	r3, #4
 8007a9c:	e014      	b.n	8007ac8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e009      	b.n	8007ac8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2240      	movs	r2, #64	; 0x40
 8007ac4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ac6:	2300      	movs	r3, #0
  
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	20000000 	.word	0x20000000
 8007ad8:	10624dd3 	.word	0x10624dd3

08007adc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ae4:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <SDMMC_GetCmdError+0x50>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a11      	ldr	r2, [pc, #68]	; (8007b30 <SDMMC_GetCmdError+0x54>)
 8007aea:	fba2 2303 	umull	r2, r3, r2, r3
 8007aee:	0a5b      	lsrs	r3, r3, #9
 8007af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af4:	fb02 f303 	mul.w	r3, r2, r3
 8007af8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	1e5a      	subs	r2, r3, #1
 8007afe:	60fa      	str	r2, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b08:	e009      	b.n	8007b1e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0f1      	beq.n	8007afa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	22c5      	movs	r2, #197	; 0xc5
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000000 	.word	0x20000000
 8007b30:	10624dd3 	.word	0x10624dd3

08007b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b34:	b084      	sub	sp, #16
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	f107 001c 	add.w	r0, r7, #28
 8007b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d120      	bne.n	8007b8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <USB_CoreInit+0xac>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d105      	bne.n	8007b82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fbee 	bl	8009364 <USB_CoreReset>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	e010      	b.n	8007bb0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 fbe2 	bl	8009364 <USB_CoreReset>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d10b      	bne.n	8007bce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f043 0206 	orr.w	r2, r3, #6
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bda:	b004      	add	sp, #16
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	ffbdffbf 	.word	0xffbdffbf

08007be4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d165      	bne.n	8007cc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4a41      	ldr	r2, [pc, #260]	; (8007d00 <USB_SetTurnaroundTime+0x11c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d906      	bls.n	8007c0e <USB_SetTurnaroundTime+0x2a>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4a40      	ldr	r2, [pc, #256]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d202      	bcs.n	8007c0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c08:	230f      	movs	r3, #15
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	e062      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d306      	bcc.n	8007c24 <USB_SetTurnaroundTime+0x40>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4a3b      	ldr	r2, [pc, #236]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d202      	bcs.n	8007c24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c1e:	230e      	movs	r3, #14
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	e057      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d306      	bcc.n	8007c3a <USB_SetTurnaroundTime+0x56>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4a37      	ldr	r2, [pc, #220]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d202      	bcs.n	8007c3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c34:	230d      	movs	r3, #13
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e04c      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	4a33      	ldr	r2, [pc, #204]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d306      	bcc.n	8007c50 <USB_SetTurnaroundTime+0x6c>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d802      	bhi.n	8007c50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	e041      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4a2f      	ldr	r2, [pc, #188]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d906      	bls.n	8007c66 <USB_SetTurnaroundTime+0x82>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4a2e      	ldr	r2, [pc, #184]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d802      	bhi.n	8007c66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c60:	230b      	movs	r3, #11
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e036      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d906      	bls.n	8007c7c <USB_SetTurnaroundTime+0x98>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d802      	bhi.n	8007c7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c76:	230a      	movs	r3, #10
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	e02b      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4a26      	ldr	r2, [pc, #152]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d906      	bls.n	8007c92 <USB_SetTurnaroundTime+0xae>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4a25      	ldr	r2, [pc, #148]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d202      	bcs.n	8007c92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e020      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4a21      	ldr	r2, [pc, #132]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d306      	bcc.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d802      	bhi.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	e015      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d906      	bls.n	8007cbe <USB_SetTurnaroundTime+0xda>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4a1c      	ldr	r2, [pc, #112]	; (8007d24 <USB_SetTurnaroundTime+0x140>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d202      	bcs.n	8007cbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007cb8:	2307      	movs	r3, #7
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e00a      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cbe:	2306      	movs	r3, #6
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e007      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007cca:	2309      	movs	r3, #9
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e001      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007cd0:	2309      	movs	r3, #9
 8007cd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	029b      	lsls	r3, r3, #10
 8007ce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	00d8acbf 	.word	0x00d8acbf
 8007d04:	00e4e1c0 	.word	0x00e4e1c0
 8007d08:	00f42400 	.word	0x00f42400
 8007d0c:	01067380 	.word	0x01067380
 8007d10:	011a499f 	.word	0x011a499f
 8007d14:	01312cff 	.word	0x01312cff
 8007d18:	014ca43f 	.word	0x014ca43f
 8007d1c:	016e3600 	.word	0x016e3600
 8007d20:	01a6ab1f 	.word	0x01a6ab1f
 8007d24:	01e84800 	.word	0x01e84800

08007d28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f043 0201 	orr.w	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d115      	bne.n	8007dba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	f7f9 fb82 	bl	80014a4 <HAL_Delay>
      ms++;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fa4b 	bl	8009242 <USB_GetMode>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d01e      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b31      	cmp	r3, #49	; 0x31
 8007db6:	d9f0      	bls.n	8007d9a <USB_SetCurrentMode+0x2e>
 8007db8:	e01a      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d115      	bne.n	8007dec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dcc:	2001      	movs	r0, #1
 8007dce:	f7f9 fb69 	bl	80014a4 <HAL_Delay>
      ms++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fa32 	bl	8009242 <USB_GetMode>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b31      	cmp	r3, #49	; 0x31
 8007de8:	d9f0      	bls.n	8007dcc <USB_SetCurrentMode+0x60>
 8007dea:	e001      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e005      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b32      	cmp	r3, #50	; 0x32
 8007df4:	d101      	bne.n	8007dfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e04:	b084      	sub	sp, #16
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	e009      	b.n	8007e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3340      	adds	r3, #64	; 0x40
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3301      	adds	r3, #1
 8007e36:	613b      	str	r3, [r7, #16]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b0e      	cmp	r3, #14
 8007e3c:	d9f2      	bls.n	8007e24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d11c      	bne.n	8007e7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e52:	f043 0302 	orr.w	r3, r3, #2
 8007e56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	e005      	b.n	8007e8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e90:	461a      	mov	r2, r3
 8007e92:	2300      	movs	r3, #0
 8007e94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	680b      	ldr	r3, [r1, #0]
 8007ea8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d10c      	bne.n	8007eca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d104      	bne.n	8007ec0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f965 	bl	8008188 <USB_SetDevSpeed>
 8007ebe:	e008      	b.n	8007ed2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f960 	bl	8008188 <USB_SetDevSpeed>
 8007ec8:	e003      	b.n	8007ed2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007eca:	2103      	movs	r1, #3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f95b 	bl	8008188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ed2:	2110      	movs	r1, #16
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8f3 	bl	80080c0 <USB_FlushTxFifo>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f91f 	bl	8008128 <USB_FlushRxFifo>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efa:	461a      	mov	r2, r3
 8007efc:	2300      	movs	r3, #0
 8007efe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f06:	461a      	mov	r2, r3
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	461a      	mov	r2, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	e043      	b.n	8007fa6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f34:	d118      	bne.n	8007f68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	e013      	b.n	8007f7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	e008      	b.n	8007f7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f74:	461a      	mov	r2, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f86:	461a      	mov	r2, r3
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f98:	461a      	mov	r2, r3
 8007f9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d3b7      	bcc.n	8007f1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fae:	2300      	movs	r3, #0
 8007fb0:	613b      	str	r3, [r7, #16]
 8007fb2:	e043      	b.n	800803c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fca:	d118      	bne.n	8007ffe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	e013      	b.n	8008010 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	e008      	b.n	8008010 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800a:	461a      	mov	r2, r3
 800800c:	2300      	movs	r3, #0
 800800e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801c:	461a      	mov	r2, r3
 800801e:	2300      	movs	r3, #0
 8008020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802e:	461a      	mov	r2, r3
 8008030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008034:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	3301      	adds	r3, #1
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	429a      	cmp	r2, r3
 8008042:	d3b7      	bcc.n	8007fb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008056:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	2b00      	cmp	r3, #0
 800806a:	d105      	bne.n	8008078 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f043 0210 	orr.w	r2, r3, #16
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <USB_DevInit+0x2b4>)
 800807e:	4313      	orrs	r3, r2
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f043 0208 	orr.w	r2, r3, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008098:	2b01      	cmp	r3, #1
 800809a:	d105      	bne.n	80080a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	4b06      	ldr	r3, [pc, #24]	; (80080bc <USB_DevInit+0x2b8>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080b4:	b004      	add	sp, #16
 80080b6:	4770      	bx	lr
 80080b8:	803c3800 	.word	0x803c3800
 80080bc:	40000004 	.word	0x40000004

080080c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3301      	adds	r3, #1
 80080d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a13      	ldr	r2, [pc, #76]	; (8008124 <USB_FlushTxFifo+0x64>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d901      	bls.n	80080e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e01b      	b.n	8008118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	daf2      	bge.n	80080ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	019b      	lsls	r3, r3, #6
 80080f0:	f043 0220 	orr.w	r2, r3, #32
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4a08      	ldr	r2, [pc, #32]	; (8008124 <USB_FlushTxFifo+0x64>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d901      	bls.n	800810a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e006      	b.n	8008118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b20      	cmp	r3, #32
 8008114:	d0f0      	beq.n	80080f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	00030d40 	.word	0x00030d40

08008128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3301      	adds	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4a11      	ldr	r2, [pc, #68]	; (8008184 <USB_FlushRxFifo+0x5c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d901      	bls.n	8008146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e018      	b.n	8008178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	daf2      	bge.n	8008134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2210      	movs	r2, #16
 8008156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a08      	ldr	r2, [pc, #32]	; (8008184 <USB_FlushRxFifo+0x5c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d901      	bls.n	800816a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e006      	b.n	8008178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0310 	and.w	r3, r3, #16
 8008172:	2b10      	cmp	r3, #16
 8008174:	d0f0      	beq.n	8008158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	00030d40 	.word	0x00030d40

08008188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081a8:	4313      	orrs	r3, r2
 80081aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b087      	sub	sp, #28
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f003 0306 	and.w	r3, r3, #6
 80081d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081da:	2300      	movs	r3, #0
 80081dc:	75fb      	strb	r3, [r7, #23]
 80081de:	e00a      	b.n	80081f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d002      	beq.n	80081ec <USB_GetDevSpeed+0x32>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b06      	cmp	r3, #6
 80081ea:	d102      	bne.n	80081f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081ec:	2302      	movs	r3, #2
 80081ee:	75fb      	strb	r3, [r7, #23]
 80081f0:	e001      	b.n	80081f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081f2:	230f      	movs	r3, #15
 80081f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d139      	bne.n	8008294 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008226:	69da      	ldr	r2, [r3, #28]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	2101      	movs	r1, #1
 8008232:	fa01 f303 	lsl.w	r3, r1, r3
 8008236:	b29b      	uxth	r3, r3
 8008238:	68f9      	ldr	r1, [r7, #12]
 800823a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800823e:	4313      	orrs	r3, r2
 8008240:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d153      	bne.n	8008300 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	791b      	ldrb	r3, [r3, #4]
 8008272:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008274:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	059b      	lsls	r3, r3, #22
 800827a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800827c:	431a      	orrs	r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	0159      	lsls	r1, r3, #5
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	440b      	add	r3, r1
 8008286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828a:	4619      	mov	r1, r3
 800828c:	4b20      	ldr	r3, [pc, #128]	; (8008310 <USB_ActivateEndpoint+0x10c>)
 800828e:	4313      	orrs	r3, r2
 8008290:	600b      	str	r3, [r1, #0]
 8008292:	e035      	b.n	8008300 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	2101      	movs	r1, #1
 80082a6:	fa01 f303 	lsl.w	r3, r1, r3
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	68f9      	ldr	r1, [r7, #12]
 80082ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b2:	4313      	orrs	r3, r2
 80082b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d119      	bne.n	8008300 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	791b      	ldrb	r3, [r3, #4]
 80082e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082e8:	430b      	orrs	r3, r1
 80082ea:	431a      	orrs	r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	0159      	lsls	r1, r3, #5
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	440b      	add	r3, r1
 80082f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f8:	4619      	mov	r1, r3
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <USB_ActivateEndpoint+0x10c>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	10008000 	.word	0x10008000

08008314 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d161      	bne.n	80083f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008346:	d11f      	bne.n	8008388 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	0151      	lsls	r1, r2, #5
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	440a      	add	r2, r1
 800835e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008366:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008386:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f003 030f 	and.w	r3, r3, #15
 8008398:	2101      	movs	r1, #1
 800839a:	fa01 f303 	lsl.w	r3, r1, r3
 800839e:	b29b      	uxth	r3, r3
 80083a0:	43db      	mvns	r3, r3
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083a8:	4013      	ands	r3, r2
 80083aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b2:	69da      	ldr	r2, [r3, #28]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	2101      	movs	r1, #1
 80083be:	fa01 f303 	lsl.w	r3, r1, r3
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	43db      	mvns	r3, r3
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083cc:	4013      	ands	r3, r2
 80083ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	0159      	lsls	r1, r3, #5
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	440b      	add	r3, r1
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	4619      	mov	r1, r3
 80083ec:	4b35      	ldr	r3, [pc, #212]	; (80084c4 <USB_DeactivateEndpoint+0x1b0>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]
 80083f2:	e060      	b.n	80084b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800840a:	d11f      	bne.n	800844c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	0151      	lsls	r1, r2, #5
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	440a      	add	r2, r1
 8008422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800842a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	440a      	add	r2, r1
 8008442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800844a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	f003 030f 	and.w	r3, r3, #15
 800845c:	2101      	movs	r1, #1
 800845e:	fa01 f303 	lsl.w	r3, r1, r3
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	43db      	mvns	r3, r3
 8008466:	68f9      	ldr	r1, [r7, #12]
 8008468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800846c:	4013      	ands	r3, r2
 800846e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	2101      	movs	r1, #1
 8008482:	fa01 f303 	lsl.w	r3, r1, r3
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	43db      	mvns	r3, r3
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008490:	4013      	ands	r3, r2
 8008492:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	0159      	lsls	r1, r3, #5
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	440b      	add	r3, r1
 80084aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ae:	4619      	mov	r1, r3
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <USB_DeactivateEndpoint+0x1b4>)
 80084b2:	4013      	ands	r3, r2
 80084b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	ec337800 	.word	0xec337800
 80084c8:	eff37800 	.word	0xeff37800

080084cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	; 0x28
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	f040 8163 	bne.w	80087b4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d132      	bne.n	800855c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	0159      	lsls	r1, r3, #5
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	440b      	add	r3, r1
 800850c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008510:	4619      	mov	r1, r3
 8008512:	4ba5      	ldr	r3, [pc, #660]	; (80087a8 <USB_EPStartXfer+0x2dc>)
 8008514:	4013      	ands	r3, r2
 8008516:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008544:	691a      	ldr	r2, [r3, #16]
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	0159      	lsls	r1, r3, #5
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	440b      	add	r3, r1
 800854e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008552:	4619      	mov	r1, r3
 8008554:	4b95      	ldr	r3, [pc, #596]	; (80087ac <USB_EPStartXfer+0x2e0>)
 8008556:	4013      	ands	r3, r2
 8008558:	610b      	str	r3, [r1, #16]
 800855a:	e074      	b.n	8008646 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008568:	691a      	ldr	r2, [r3, #16]
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	0159      	lsls	r1, r3, #5
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	440b      	add	r3, r1
 8008572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008576:	4619      	mov	r1, r3
 8008578:	4b8c      	ldr	r3, [pc, #560]	; (80087ac <USB_EPStartXfer+0x2e0>)
 800857a:	4013      	ands	r3, r2
 800857c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	0159      	lsls	r1, r3, #5
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	440b      	add	r3, r1
 8008594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008598:	4619      	mov	r1, r3
 800859a:	4b83      	ldr	r3, [pc, #524]	; (80087a8 <USB_EPStartXfer+0x2dc>)
 800859c:	4013      	ands	r3, r2
 800859e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6999      	ldr	r1, [r3, #24]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	440b      	add	r3, r1
 80085b8:	1e59      	subs	r1, r3, #1
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	fbb1 f3f3 	udiv	r3, r1, r3
 80085c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085c4:	4b7a      	ldr	r3, [pc, #488]	; (80087b0 <USB_EPStartXfer+0x2e4>)
 80085c6:	400b      	ands	r3, r1
 80085c8:	69b9      	ldr	r1, [r7, #24]
 80085ca:	0148      	lsls	r0, r1, #5
 80085cc:	69f9      	ldr	r1, [r7, #28]
 80085ce:	4401      	add	r1, r0
 80085d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085d4:	4313      	orrs	r3, r2
 80085d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ee:	69b9      	ldr	r1, [r7, #24]
 80085f0:	0148      	lsls	r0, r1, #5
 80085f2:	69f9      	ldr	r1, [r7, #28]
 80085f4:	4401      	add	r1, r0
 80085f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085fa:	4313      	orrs	r3, r2
 80085fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	791b      	ldrb	r3, [r3, #4]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d11f      	bne.n	8008646 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008620:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008624:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008644:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d14b      	bne.n	80086e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	461a      	mov	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	791b      	ldrb	r3, [r3, #4]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d128      	bne.n	80086c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867c:	2b00      	cmp	r3, #0
 800867e:	d110      	bne.n	80086a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	440a      	add	r2, r1
 8008696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800869a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	e00f      	b.n	80086c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	0151      	lsls	r1, r2, #5
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	440a      	add	r2, r1
 80086b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	0151      	lsls	r1, r2, #5
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	440a      	add	r2, r1
 80086d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	e137      	b.n	8008954 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	0151      	lsls	r1, r2, #5
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	440a      	add	r2, r1
 80086fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008702:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	791b      	ldrb	r3, [r3, #4]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d015      	beq.n	8008738 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 811f 	beq.w	8008954 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	2101      	movs	r1, #1
 8008728:	fa01 f303 	lsl.w	r3, r1, r3
 800872c:	69f9      	ldr	r1, [r7, #28]
 800872e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008732:	4313      	orrs	r3, r2
 8008734:	634b      	str	r3, [r1, #52]	; 0x34
 8008736:	e10d      	b.n	8008954 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008744:	2b00      	cmp	r3, #0
 8008746:	d110      	bne.n	800876a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	440a      	add	r2, r1
 800875e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	e00f      	b.n	800878a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	440a      	add	r2, r1
 8008780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008788:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6919      	ldr	r1, [r3, #16]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	781a      	ldrb	r2, [r3, #0]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	b298      	uxth	r0, r3
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	4603      	mov	r3, r0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 faea 	bl	8008d78 <USB_WritePacket>
 80087a4:	e0d6      	b.n	8008954 <USB_EPStartXfer+0x488>
 80087a6:	bf00      	nop
 80087a8:	e007ffff 	.word	0xe007ffff
 80087ac:	fff80000 	.word	0xfff80000
 80087b0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	0159      	lsls	r1, r3, #5
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	440b      	add	r3, r1
 80087ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ce:	4619      	mov	r1, r3
 80087d0:	4b63      	ldr	r3, [pc, #396]	; (8008960 <USB_EPStartXfer+0x494>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	0159      	lsls	r1, r3, #5
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	440b      	add	r3, r1
 80087ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f0:	4619      	mov	r1, r3
 80087f2:	4b5c      	ldr	r3, [pc, #368]	; (8008964 <USB_EPStartXfer+0x498>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d123      	bne.n	8008848 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008816:	69b9      	ldr	r1, [r7, #24]
 8008818:	0148      	lsls	r0, r1, #5
 800881a:	69f9      	ldr	r1, [r7, #28]
 800881c:	4401      	add	r1, r0
 800881e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008822:	4313      	orrs	r3, r2
 8008824:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4413      	add	r3, r2
 800882e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	0151      	lsls	r1, r2, #5
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	440a      	add	r2, r1
 800883c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008844:	6113      	str	r3, [r2, #16]
 8008846:	e037      	b.n	80088b8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	699a      	ldr	r2, [r3, #24]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	4413      	add	r3, r2
 8008852:	1e5a      	subs	r2, r3, #1
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	fbb2 f3f3 	udiv	r3, r2, r3
 800885c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	8afa      	ldrh	r2, [r7, #22]
 8008864:	fb03 f202 	mul.w	r2, r3, r2
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008878:	691a      	ldr	r2, [r3, #16]
 800887a:	8afb      	ldrh	r3, [r7, #22]
 800887c:	04d9      	lsls	r1, r3, #19
 800887e:	4b3a      	ldr	r3, [pc, #232]	; (8008968 <USB_EPStartXfer+0x49c>)
 8008880:	400b      	ands	r3, r1
 8008882:	69b9      	ldr	r1, [r7, #24]
 8008884:	0148      	lsls	r0, r1, #5
 8008886:	69f9      	ldr	r1, [r7, #28]
 8008888:	4401      	add	r1, r0
 800888a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800888e:	4313      	orrs	r3, r2
 8008890:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889e:	691a      	ldr	r2, [r3, #16]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a8:	69b9      	ldr	r1, [r7, #24]
 80088aa:	0148      	lsls	r0, r1, #5
 80088ac:	69f9      	ldr	r1, [r7, #28]
 80088ae:	4401      	add	r1, r0
 80088b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088b4:	4313      	orrs	r3, r2
 80088b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d10d      	bne.n	80088da <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6919      	ldr	r1, [r3, #16]
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d6:	460a      	mov	r2, r1
 80088d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	791b      	ldrb	r3, [r3, #4]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d128      	bne.n	8008934 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d110      	bne.n	8008914 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	0151      	lsls	r1, r2, #5
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	440a      	add	r2, r1
 8008908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800890c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	e00f      	b.n	8008934 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	440a      	add	r2, r1
 800892a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008932:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008952:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	fff80000 	.word	0xfff80000
 8008964:	e007ffff 	.word	0xe007ffff
 8008968:	1ff80000 	.word	0x1ff80000

0800896c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b01      	cmp	r3, #1
 800898a:	f040 80ce 	bne.w	8008b2a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d132      	bne.n	80089fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a2:	691a      	ldr	r2, [r3, #16]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	0159      	lsls	r1, r3, #5
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	440b      	add	r3, r1
 80089ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b0:	4619      	mov	r1, r3
 80089b2:	4b9a      	ldr	r3, [pc, #616]	; (8008c1c <USB_EP0StartXfer+0x2b0>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	0159      	lsls	r1, r3, #5
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	440b      	add	r3, r1
 80089ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f2:	4619      	mov	r1, r3
 80089f4:	4b8a      	ldr	r3, [pc, #552]	; (8008c20 <USB_EP0StartXfer+0x2b4>)
 80089f6:	4013      	ands	r3, r2
 80089f8:	610b      	str	r3, [r1, #16]
 80089fa:	e04e      	b.n	8008a9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	0159      	lsls	r1, r3, #5
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	440b      	add	r3, r1
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	4619      	mov	r1, r3
 8008a18:	4b81      	ldr	r3, [pc, #516]	; (8008c20 <USB_EP0StartXfer+0x2b4>)
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	0159      	lsls	r1, r3, #5
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	440b      	add	r3, r1
 8008a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4b78      	ldr	r3, [pc, #480]	; (8008c1c <USB_EP0StartXfer+0x2b0>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	699a      	ldr	r2, [r3, #24]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d903      	bls.n	8008a54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	0151      	lsls	r1, r2, #5
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	440a      	add	r2, r1
 8008a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a8a:	6939      	ldr	r1, [r7, #16]
 8008a8c:	0148      	lsls	r0, r1, #5
 8008a8e:	6979      	ldr	r1, [r7, #20]
 8008a90:	4401      	add	r1, r0
 8008a92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a96:	4313      	orrs	r3, r2
 8008a98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d11e      	bne.n	8008ade <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	0151      	lsls	r1, r2, #5
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	e097      	b.n	8008c0e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008afc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 8083 	beq.w	8008c0e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	f003 030f 	and.w	r3, r3, #15
 8008b18:	2101      	movs	r1, #1
 8008b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1e:	6979      	ldr	r1, [r7, #20]
 8008b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b24:	4313      	orrs	r3, r2
 8008b26:	634b      	str	r3, [r1, #52]	; 0x34
 8008b28:	e071      	b.n	8008c0e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	691a      	ldr	r2, [r3, #16]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	0159      	lsls	r1, r3, #5
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	440b      	add	r3, r1
 8008b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b44:	4619      	mov	r1, r3
 8008b46:	4b36      	ldr	r3, [pc, #216]	; (8008c20 <USB_EP0StartXfer+0x2b4>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b58:	691a      	ldr	r2, [r3, #16]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	0159      	lsls	r1, r3, #5
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	440b      	add	r3, r1
 8008b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b66:	4619      	mov	r1, r3
 8008b68:	4b2c      	ldr	r3, [pc, #176]	; (8008c1c <USB_EP0StartXfer+0x2b0>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	0151      	lsls	r1, r2, #5
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	440a      	add	r2, r1
 8008b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bbc:	6939      	ldr	r1, [r7, #16]
 8008bbe:	0148      	lsls	r0, r1, #5
 8008bc0:	6979      	ldr	r1, [r7, #20]
 8008bc2:	4401      	add	r1, r0
 8008bc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d10d      	bne.n	8008bee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6919      	ldr	r1, [r3, #16]
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bea:	460a      	mov	r2, r1
 8008bec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	0151      	lsls	r1, r2, #5
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	440a      	add	r2, r1
 8008c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	e007ffff 	.word	0xe007ffff
 8008c20:	fff80000 	.word	0xfff80000

08008c24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d14a      	bne.n	8008cd8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c5a:	f040 8086 	bne.w	8008d6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	7812      	ldrb	r2, [r2, #0]
 8008c72:	0151      	lsls	r1, r2, #5
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	440a      	add	r2, r1
 8008c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	7812      	ldrb	r2, [r2, #0]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ca4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d902      	bls.n	8008cbc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cba:	e056      	b.n	8008d6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd4:	d0e7      	beq.n	8008ca6 <USB_EPStopXfer+0x82>
 8008cd6:	e048      	b.n	8008d6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cf0:	d13b      	bne.n	8008d6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	0151      	lsls	r1, r2, #5
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	440a      	add	r2, r1
 8008d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	7812      	ldrb	r2, [r2, #0]
 8008d2a:	0151      	lsls	r1, r2, #5
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	440a      	add	r2, r1
 8008d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d902      	bls.n	8008d50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d4e:	e00c      	b.n	8008d6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d68:	d0e7      	beq.n	8008d3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b089      	sub	sp, #36	; 0x24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4611      	mov	r1, r2
 8008d84:	461a      	mov	r2, r3
 8008d86:	460b      	mov	r3, r1
 8008d88:	71fb      	strb	r3, [r7, #7]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d123      	bne.n	8008de6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d9e:	88bb      	ldrh	r3, [r7, #4]
 8008da0:	3303      	adds	r3, #3
 8008da2:	089b      	lsrs	r3, r3, #2
 8008da4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008da6:	2300      	movs	r3, #0
 8008da8:	61bb      	str	r3, [r7, #24]
 8008daa:	e018      	b.n	8008dde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	031a      	lsls	r2, r3, #12
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db8:	461a      	mov	r2, r3
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	61bb      	str	r3, [r7, #24]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d3e2      	bcc.n	8008dac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3724      	adds	r7, #36	; 0x24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b08b      	sub	sp, #44	; 0x2c
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e0a:	88fb      	ldrh	r3, [r7, #6]
 8008e0c:	089b      	lsrs	r3, r3, #2
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	f003 0303 	and.w	r3, r3, #3
 8008e18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	623b      	str	r3, [r7, #32]
 8008e1e:	e014      	b.n	8008e4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	3301      	adds	r3, #1
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	3301      	adds	r3, #1
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	3301      	adds	r3, #1
 8008e42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	3301      	adds	r3, #1
 8008e48:	623b      	str	r3, [r7, #32]
 8008e4a:	6a3a      	ldr	r2, [r7, #32]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d3e6      	bcc.n	8008e20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e52:	8bfb      	ldrh	r3, [r7, #30]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01e      	beq.n	8008e96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e62:	461a      	mov	r2, r3
 8008e64:	f107 0310 	add.w	r3, r7, #16
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	fa22 f303 	lsr.w	r3, r2, r3
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	701a      	strb	r2, [r3, #0]
      i++;
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	3301      	adds	r3, #1
 8008e82:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	3301      	adds	r3, #1
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e8a:	8bfb      	ldrh	r3, [r7, #30]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e90:	8bfb      	ldrh	r3, [r7, #30]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1ea      	bne.n	8008e6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	372c      	adds	r7, #44	; 0x2c
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	785b      	ldrb	r3, [r3, #1]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d12c      	bne.n	8008f1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	db12      	blt.n	8008ef8 <USB_EPSetStall+0x54>
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00f      	beq.n	8008ef8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	0151      	lsls	r1, r2, #5
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	440a      	add	r2, r1
 8008eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ef6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	0151      	lsls	r1, r2, #5
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	440a      	add	r2, r1
 8008f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	e02b      	b.n	8008f72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	db12      	blt.n	8008f52 <USB_EPSetStall+0xae>
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00f      	beq.n	8008f52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d128      	bne.n	8008fee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	0151      	lsls	r1, r2, #5
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	440a      	add	r2, r1
 8008fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	791b      	ldrb	r3, [r3, #4]
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d003      	beq.n	8008fcc <USB_EPClearStall+0x4c>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	791b      	ldrb	r3, [r3, #4]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d138      	bne.n	800903e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	0151      	lsls	r1, r2, #5
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	440a      	add	r2, r1
 8008fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	e027      	b.n	800903e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	0151      	lsls	r1, r2, #5
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	440a      	add	r2, r1
 8009004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009008:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800900c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	791b      	ldrb	r3, [r3, #4]
 8009012:	2b03      	cmp	r3, #3
 8009014:	d003      	beq.n	800901e <USB_EPClearStall+0x9e>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d10f      	bne.n	800903e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	0151      	lsls	r1, r2, #5
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	440a      	add	r2, r1
 8009034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800903c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800906a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800906e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009080:	68f9      	ldr	r1, [r7, #12]
 8009082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009086:	4313      	orrs	r3, r2
 8009088:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090b2:	f023 0303 	bic.w	r3, r3, #3
 80090b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090c6:	f023 0302 	bic.w	r3, r3, #2
 80090ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090f4:	f023 0303 	bic.w	r3, r3, #3
 80090f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009108:	f043 0302 	orr.w	r3, r3, #2
 800910c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4013      	ands	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009134:	68fb      	ldr	r3, [r7, #12]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	4013      	ands	r3, r2
 8009164:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	0c1b      	lsrs	r3, r3, #16
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	4013      	ands	r3, r2
 8009198:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	b29b      	uxth	r3, r3
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091ba:	78fb      	ldrb	r3, [r7, #3]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	4013      	ands	r3, r2
 80091d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091d8:	68bb      	ldr	r3, [r7, #8]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b087      	sub	sp, #28
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009208:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800920a:	78fb      	ldrb	r3, [r7, #3]
 800920c:	f003 030f 	and.w	r3, r3, #15
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	fa22 f303 	lsr.w	r3, r2, r3
 8009216:	01db      	lsls	r3, r3, #7
 8009218:	b2db      	uxtb	r3, r3
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	4313      	orrs	r3, r2
 800921e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	4013      	ands	r3, r2
 8009232:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009234:	68bb      	ldr	r3, [r7, #8]
}
 8009236:	4618      	mov	r0, r3
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	f003 0301 	and.w	r3, r3, #1
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	4619      	mov	r1, r3
 800927c:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <USB_ActivateSetup+0x44>)
 800927e:	4013      	ands	r3, r2
 8009280:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009294:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	fffff800 	.word	0xfffff800

080092a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	460b      	mov	r3, r1
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	333c      	adds	r3, #60	; 0x3c
 80092be:	3304      	adds	r3, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	4a26      	ldr	r2, [pc, #152]	; (8009360 <USB_EP0_OutStart+0xb8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d90a      	bls.n	80092e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092dc:	d101      	bne.n	80092e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e037      	b.n	8009352 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e8:	461a      	mov	r2, r3
 80092ea:	2300      	movs	r3, #0
 80092ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009310:	f043 0318 	orr.w	r3, r3, #24
 8009314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009324:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009328:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800932a:	7afb      	ldrb	r3, [r7, #11]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10f      	bne.n	8009350 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009336:	461a      	mov	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800934e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	4f54300a 	.word	0x4f54300a

08009364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	3301      	adds	r3, #1
 8009374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4a13      	ldr	r2, [pc, #76]	; (80093c8 <USB_CoreReset+0x64>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d901      	bls.n	8009382 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e01b      	b.n	80093ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	daf2      	bge.n	8009370 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f043 0201 	orr.w	r2, r3, #1
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3301      	adds	r3, #1
 800939e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a09      	ldr	r2, [pc, #36]	; (80093c8 <USB_CoreReset+0x64>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d901      	bls.n	80093ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e006      	b.n	80093ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d0f0      	beq.n	800939a <USB_CoreReset+0x36>

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	00030d40 	.word	0x00030d40

080093cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80093d0:	4904      	ldr	r1, [pc, #16]	; (80093e4 <MX_FATFS_Init+0x18>)
 80093d2:	4805      	ldr	r0, [pc, #20]	; (80093e8 <MX_FATFS_Init+0x1c>)
 80093d4:	f004 fbe4 	bl	800dba0 <FATFS_LinkDriver>
 80093d8:	4603      	mov	r3, r0
 80093da:	461a      	mov	r2, r3
 80093dc:	4b03      	ldr	r3, [pc, #12]	; (80093ec <MX_FATFS_Init+0x20>)
 80093de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80093e0:	bf00      	nop
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20002cf4 	.word	0x20002cf4
 80093e8:	0800fbf4 	.word	0x0800fbf4
 80093ec:	20002cf0 	.word	0x20002cf0

080093f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80093f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800940a:	f000 f888 	bl	800951e <BSP_SD_IsDetected>
 800940e:	4603      	mov	r3, r0
 8009410:	2b01      	cmp	r3, #1
 8009412:	d001      	beq.n	8009418 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009414:	2302      	movs	r3, #2
 8009416:	e005      	b.n	8009424 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009418:	4804      	ldr	r0, [pc, #16]	; (800942c <BSP_SD_Init+0x2c>)
 800941a:	f7fc f845 	bl	80054a8 <HAL_SD_Init>
 800941e:	4603      	mov	r3, r0
 8009420:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009422:	79fb      	ldrb	r3, [r7, #7]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	200001ac 	.word	0x200001ac

08009430 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	68f9      	ldr	r1, [r7, #12]
 8009446:	4806      	ldr	r0, [pc, #24]	; (8009460 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009448:	f7fc f8e6 	bl	8005618 <HAL_SD_ReadBlocks_DMA>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009456:	7dfb      	ldrb	r3, [r7, #23]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	200001ac 	.word	0x200001ac

08009464 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	68f9      	ldr	r1, [r7, #12]
 800947a:	4806      	ldr	r0, [pc, #24]	; (8009494 <BSP_SD_WriteBlocks_DMA+0x30>)
 800947c:	f7fc f9ae 	bl	80057dc <HAL_SD_WriteBlocks_DMA>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	200001ac 	.word	0x200001ac

08009498 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800949c:	4805      	ldr	r0, [pc, #20]	; (80094b4 <BSP_SD_GetCardState+0x1c>)
 800949e:	f7fc fdd3 	bl	8006048 <HAL_SD_GetCardState>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	bf14      	ite	ne
 80094a8:	2301      	movne	r3, #1
 80094aa:	2300      	moveq	r3, #0
 80094ac:	b2db      	uxtb	r3, r3
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	200001ac 	.word	0x200001ac

080094b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	4803      	ldr	r0, [pc, #12]	; (80094d0 <BSP_SD_GetCardInfo+0x18>)
 80094c4:	f7fc fd94 	bl	8005ff0 <HAL_SD_GetCardInfo>
}
 80094c8:	bf00      	nop
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	200001ac 	.word	0x200001ac

080094d4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80094dc:	f000 f818 	bl	8009510 <BSP_SD_AbortCallback>
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80094f0:	f000 f9a8 	bl	8009844 <BSP_SD_WriteCpltCallback>
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009504:	f000 f9aa 	bl	800985c <BSP_SD_ReadCpltCallback>
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0

}
 8009514:	bf00      	nop
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009524:	2301      	movs	r3, #1
 8009526:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009528:	f000 f80c 	bl	8009544 <BSP_PlatformIsDetected>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009532:	2300      	movs	r3, #0
 8009534:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	b2db      	uxtb	r3, r3
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800954a:	2301      	movs	r3, #1
 800954c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800954e:	2104      	movs	r1, #4
 8009550:	4806      	ldr	r0, [pc, #24]	; (800956c <BSP_PlatformIsDetected+0x28>)
 8009552:	f7f9 fbc3 	bl	8002cdc <HAL_GPIO_ReadPin>
 8009556:	4603      	mov	r3, r0
 8009558:	2b01      	cmp	r3, #1
 800955a:	d001      	beq.n	8009560 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800955c:	2300      	movs	r3, #0
 800955e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009560:	79fb      	ldrb	r3, [r7, #7]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	40021800 	.word	0x40021800

08009570 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009578:	f7f7 ff88 	bl	800148c <HAL_GetTick>
 800957c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800957e:	e006      	b.n	800958e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009580:	f7ff ff8a 	bl	8009498 <BSP_SD_GetCardState>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800958a:	2300      	movs	r3, #0
 800958c:	e009      	b.n	80095a2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800958e:	f7f7 ff7d 	bl	800148c <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	429a      	cmp	r2, r3
 800959c:	d8f0      	bhi.n	8009580 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800959e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <SD_CheckStatus+0x38>)
 80095b8:	2201      	movs	r2, #1
 80095ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80095bc:	f7ff ff6c 	bl	8009498 <BSP_SD_GetCardState>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d107      	bne.n	80095d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80095c6:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <SD_CheckStatus+0x38>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	f023 0301 	bic.w	r3, r3, #1
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <SD_CheckStatus+0x38>)
 80095d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80095d6:	4b03      	ldr	r3, [pc, #12]	; (80095e4 <SD_CheckStatus+0x38>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	b2db      	uxtb	r3, r3
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20000009 	.word	0x20000009

080095e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80095f2:	f7ff ff05 	bl	8009400 <BSP_SD_Init>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d107      	bne.n	800960c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff ffd4 	bl	80095ac <SD_CheckStatus>
 8009604:	4603      	mov	r3, r0
 8009606:	461a      	mov	r2, r3
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <SD_initialize+0x34>)
 800960a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800960c:	4b03      	ldr	r3, [pc, #12]	; (800961c <SD_initialize+0x34>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	b2db      	uxtb	r3, r3
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000009 	.word	0x20000009

08009620 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff ffbd 	bl	80095ac <SD_CheckStatus>
 8009632:	4603      	mov	r3, r0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	607a      	str	r2, [r7, #4]
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	4603      	mov	r3, r0
 800964a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009650:	f247 5030 	movw	r0, #30000	; 0x7530
 8009654:	f7ff ff8c 	bl	8009570 <SD_CheckStatusWithTimeout>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	da01      	bge.n	8009662 <SD_read+0x26>
  {
    return res;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	e03b      	b.n	80096da <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	68b8      	ldr	r0, [r7, #8]
 8009668:	f7ff fee2 	bl	8009430 <BSP_SD_ReadBlocks_DMA>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d132      	bne.n	80096d8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009672:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <SD_read+0xa8>)
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009678:	f7f7 ff08 	bl	800148c <HAL_GetTick>
 800967c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800967e:	bf00      	nop
 8009680:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <SD_read+0xa8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d108      	bne.n	800969a <SD_read+0x5e>
 8009688:	f7f7 ff00 	bl	800148c <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	f247 522f 	movw	r2, #29999	; 0x752f
 8009696:	4293      	cmp	r3, r2
 8009698:	d9f2      	bls.n	8009680 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800969a:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <SD_read+0xa8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d102      	bne.n	80096a8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	75fb      	strb	r3, [r7, #23]
 80096a6:	e017      	b.n	80096d8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80096a8:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <SD_read+0xa8>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80096ae:	f7f7 feed 	bl	800148c <HAL_GetTick>
 80096b2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80096b4:	e007      	b.n	80096c6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80096b6:	f7ff feef 	bl	8009498 <BSP_SD_GetCardState>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d102      	bne.n	80096c6 <SD_read+0x8a>
          {
            res = RES_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80096c4:	e008      	b.n	80096d8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80096c6:	f7f7 fee1 	bl	800148c <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	f247 522f 	movw	r2, #29999	; 0x752f
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d9ee      	bls.n	80096b6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	2000315c 	.word	0x2000315c

080096e8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
 80096f2:	603b      	str	r3, [r7, #0]
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80096fc:	4b24      	ldr	r3, [pc, #144]	; (8009790 <SD_write+0xa8>)
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009702:	f247 5030 	movw	r0, #30000	; 0x7530
 8009706:	f7ff ff33 	bl	8009570 <SD_CheckStatusWithTimeout>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	da01      	bge.n	8009714 <SD_write+0x2c>
  {
    return res;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	e038      	b.n	8009786 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	68b8      	ldr	r0, [r7, #8]
 800971a:	f7ff fea3 	bl	8009464 <BSP_SD_WriteBlocks_DMA>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d12f      	bne.n	8009784 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009724:	f7f7 feb2 	bl	800148c <HAL_GetTick>
 8009728:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800972a:	bf00      	nop
 800972c:	4b18      	ldr	r3, [pc, #96]	; (8009790 <SD_write+0xa8>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d108      	bne.n	8009746 <SD_write+0x5e>
 8009734:	f7f7 feaa 	bl	800148c <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009742:	4293      	cmp	r3, r2
 8009744:	d9f2      	bls.n	800972c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009746:	4b12      	ldr	r3, [pc, #72]	; (8009790 <SD_write+0xa8>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d102      	bne.n	8009754 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]
 8009752:	e017      	b.n	8009784 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <SD_write+0xa8>)
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800975a:	f7f7 fe97 	bl	800148c <HAL_GetTick>
 800975e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009760:	e007      	b.n	8009772 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009762:	f7ff fe99 	bl	8009498 <BSP_SD_GetCardState>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d102      	bne.n	8009772 <SD_write+0x8a>
          {
            res = RES_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	75fb      	strb	r3, [r7, #23]
            break;
 8009770:	e008      	b.n	8009784 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009772:	f7f7 fe8b 	bl	800148c <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009780:	4293      	cmp	r3, r2
 8009782:	d9ee      	bls.n	8009762 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20003158 	.word	0x20003158

08009794 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08c      	sub	sp, #48	; 0x30
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	603a      	str	r2, [r7, #0]
 800979e:	71fb      	strb	r3, [r7, #7]
 80097a0:	460b      	mov	r3, r1
 80097a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80097aa:	4b25      	ldr	r3, [pc, #148]	; (8009840 <SD_ioctl+0xac>)
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <SD_ioctl+0x28>
 80097b8:	2303      	movs	r3, #3
 80097ba:	e03c      	b.n	8009836 <SD_ioctl+0xa2>

  switch (cmd)
 80097bc:	79bb      	ldrb	r3, [r7, #6]
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d834      	bhi.n	800982c <SD_ioctl+0x98>
 80097c2:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <SD_ioctl+0x34>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	080097d9 	.word	0x080097d9
 80097cc:	080097e1 	.word	0x080097e1
 80097d0:	080097f9 	.word	0x080097f9
 80097d4:	08009813 	.word	0x08009813
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097de:	e028      	b.n	8009832 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80097e0:	f107 030c 	add.w	r3, r7, #12
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff fe67 	bl	80094b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80097ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097f6:	e01c      	b.n	8009832 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80097f8:	f107 030c 	add.w	r3, r7, #12
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff fe5b 	bl	80094b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009804:	b29a      	uxth	r2, r3
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009810:	e00f      	b.n	8009832 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	4618      	mov	r0, r3
 8009818:	f7ff fe4e 	bl	80094b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	0a5a      	lsrs	r2, r3, #9
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800982a:	e002      	b.n	8009832 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800982c:	2304      	movs	r3, #4
 800982e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009836:	4618      	mov	r0, r3
 8009838:	3730      	adds	r7, #48	; 0x30
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20000009 	.word	0x20000009

08009844 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009848:	4b03      	ldr	r3, [pc, #12]	; (8009858 <BSP_SD_WriteCpltCallback+0x14>)
 800984a:	2201      	movs	r2, #1
 800984c:	601a      	str	r2, [r3, #0]
}
 800984e:	bf00      	nop
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	20003158 	.word	0x20003158

0800985c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009860:	4b03      	ldr	r3, [pc, #12]	; (8009870 <BSP_SD_ReadCpltCallback+0x14>)
 8009862:	2201      	movs	r2, #1
 8009864:	601a      	str	r2, [r3, #0]
}
 8009866:	bf00      	nop
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	2000315c 	.word	0x2000315c

08009874 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009880:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009884:	f004 ff22 	bl	800e6cc <malloc>
 8009888:	4603      	mov	r3, r0
 800988a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d109      	bne.n	80098a6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	32b0      	adds	r2, #176	; 0xb0
 800989c:	2100      	movs	r1, #0
 800989e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80098a2:	2302      	movs	r3, #2
 80098a4:	e0d4      	b.n	8009a50 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80098a6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80098aa:	2100      	movs	r1, #0
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f005 f93c 	bl	800eb2a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	32b0      	adds	r2, #176	; 0xb0
 80098bc:	68f9      	ldr	r1, [r7, #12]
 80098be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	32b0      	adds	r2, #176	; 0xb0
 80098cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	7c1b      	ldrb	r3, [r3, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d138      	bne.n	8009950 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098de:	4b5e      	ldr	r3, [pc, #376]	; (8009a58 <USBD_CDC_Init+0x1e4>)
 80098e0:	7819      	ldrb	r1, [r3, #0]
 80098e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098e6:	2202      	movs	r2, #2
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f004 fd4c 	bl	800e386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098ee:	4b5a      	ldr	r3, [pc, #360]	; (8009a58 <USBD_CDC_Init+0x1e4>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	f003 020f 	and.w	r2, r3, #15
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	440b      	add	r3, r1
 8009902:	3324      	adds	r3, #36	; 0x24
 8009904:	2201      	movs	r2, #1
 8009906:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009908:	4b54      	ldr	r3, [pc, #336]	; (8009a5c <USBD_CDC_Init+0x1e8>)
 800990a:	7819      	ldrb	r1, [r3, #0]
 800990c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009910:	2202      	movs	r2, #2
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f004 fd37 	bl	800e386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009918:	4b50      	ldr	r3, [pc, #320]	; (8009a5c <USBD_CDC_Init+0x1e8>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	f003 020f 	and.w	r2, r3, #15
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	4613      	mov	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	440b      	add	r3, r1
 800992c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009930:	2201      	movs	r2, #1
 8009932:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009934:	4b4a      	ldr	r3, [pc, #296]	; (8009a60 <USBD_CDC_Init+0x1ec>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f003 020f 	and.w	r2, r3, #15
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	440b      	add	r3, r1
 8009948:	3326      	adds	r3, #38	; 0x26
 800994a:	2210      	movs	r2, #16
 800994c:	801a      	strh	r2, [r3, #0]
 800994e:	e035      	b.n	80099bc <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009950:	4b41      	ldr	r3, [pc, #260]	; (8009a58 <USBD_CDC_Init+0x1e4>)
 8009952:	7819      	ldrb	r1, [r3, #0]
 8009954:	2340      	movs	r3, #64	; 0x40
 8009956:	2202      	movs	r2, #2
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f004 fd14 	bl	800e386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800995e:	4b3e      	ldr	r3, [pc, #248]	; (8009a58 <USBD_CDC_Init+0x1e4>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	f003 020f 	and.w	r2, r3, #15
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	440b      	add	r3, r1
 8009972:	3324      	adds	r3, #36	; 0x24
 8009974:	2201      	movs	r2, #1
 8009976:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009978:	4b38      	ldr	r3, [pc, #224]	; (8009a5c <USBD_CDC_Init+0x1e8>)
 800997a:	7819      	ldrb	r1, [r3, #0]
 800997c:	2340      	movs	r3, #64	; 0x40
 800997e:	2202      	movs	r2, #2
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f004 fd00 	bl	800e386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009986:	4b35      	ldr	r3, [pc, #212]	; (8009a5c <USBD_CDC_Init+0x1e8>)
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	f003 020f 	and.w	r2, r3, #15
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800999e:	2201      	movs	r2, #1
 80099a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80099a2:	4b2f      	ldr	r3, [pc, #188]	; (8009a60 <USBD_CDC_Init+0x1ec>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	f003 020f 	and.w	r2, r3, #15
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	4613      	mov	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	440b      	add	r3, r1
 80099b6:	3326      	adds	r3, #38	; 0x26
 80099b8:	2210      	movs	r2, #16
 80099ba:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099bc:	4b28      	ldr	r3, [pc, #160]	; (8009a60 <USBD_CDC_Init+0x1ec>)
 80099be:	7819      	ldrb	r1, [r3, #0]
 80099c0:	2308      	movs	r3, #8
 80099c2:	2203      	movs	r2, #3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f004 fcde 	bl	800e386 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80099ca:	4b25      	ldr	r3, [pc, #148]	; (8009a60 <USBD_CDC_Init+0x1ec>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	f003 020f 	and.w	r2, r3, #15
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4613      	mov	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	3324      	adds	r3, #36	; 0x24
 80099e0:	2201      	movs	r2, #1
 80099e2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	33b0      	adds	r3, #176	; 0xb0
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	e018      	b.n	8009a50 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	7c1b      	ldrb	r3, [r3, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a26:	4b0d      	ldr	r3, [pc, #52]	; (8009a5c <USBD_CDC_Init+0x1e8>)
 8009a28:	7819      	ldrb	r1, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f004 fd95 	bl	800e564 <USBD_LL_PrepareReceive>
 8009a3a:	e008      	b.n	8009a4e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a3c:	4b07      	ldr	r3, [pc, #28]	; (8009a5c <USBD_CDC_Init+0x1e8>)
 8009a3e:	7819      	ldrb	r1, [r3, #0]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a46:	2340      	movs	r3, #64	; 0x40
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f004 fd8b 	bl	800e564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20000093 	.word	0x20000093
 8009a5c:	20000094 	.word	0x20000094
 8009a60:	20000095 	.word	0x20000095

08009a64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a70:	4b3a      	ldr	r3, [pc, #232]	; (8009b5c <USBD_CDC_DeInit+0xf8>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f004 fcab 	bl	800e3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a7c:	4b37      	ldr	r3, [pc, #220]	; (8009b5c <USBD_CDC_DeInit+0xf8>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	f003 020f 	and.w	r2, r3, #15
 8009a84:	6879      	ldr	r1, [r7, #4]
 8009a86:	4613      	mov	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	440b      	add	r3, r1
 8009a90:	3324      	adds	r3, #36	; 0x24
 8009a92:	2200      	movs	r2, #0
 8009a94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a96:	4b32      	ldr	r3, [pc, #200]	; (8009b60 <USBD_CDC_DeInit+0xfc>)
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f004 fc98 	bl	800e3d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009aa2:	4b2f      	ldr	r3, [pc, #188]	; (8009b60 <USBD_CDC_DeInit+0xfc>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	f003 020f 	and.w	r2, r3, #15
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009aba:	2200      	movs	r2, #0
 8009abc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009abe:	4b29      	ldr	r3, [pc, #164]	; (8009b64 <USBD_CDC_DeInit+0x100>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f004 fc84 	bl	800e3d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009aca:	4b26      	ldr	r3, [pc, #152]	; (8009b64 <USBD_CDC_DeInit+0x100>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	f003 020f 	and.w	r2, r3, #15
 8009ad2:	6879      	ldr	r1, [r7, #4]
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	440b      	add	r3, r1
 8009ade:	3324      	adds	r3, #36	; 0x24
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009ae4:	4b1f      	ldr	r3, [pc, #124]	; (8009b64 <USBD_CDC_DeInit+0x100>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	f003 020f 	and.w	r2, r3, #15
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	440b      	add	r3, r1
 8009af8:	3326      	adds	r3, #38	; 0x26
 8009afa:	2200      	movs	r2, #0
 8009afc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	32b0      	adds	r2, #176	; 0xb0
 8009b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01f      	beq.n	8009b50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	33b0      	adds	r3, #176	; 0xb0
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	32b0      	adds	r2, #176	; 0xb0
 8009b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f004 fdd2 	bl	800e6dc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	32b0      	adds	r2, #176	; 0xb0
 8009b42:	2100      	movs	r1, #0
 8009b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20000093 	.word	0x20000093
 8009b60:	20000094 	.word	0x20000094
 8009b64:	20000095 	.word	0x20000095

08009b68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	32b0      	adds	r2, #176	; 0xb0
 8009b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e0bf      	b.n	8009d18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d050      	beq.n	8009c46 <USBD_CDC_Setup+0xde>
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	f040 80af 	bne.w	8009d08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	88db      	ldrh	r3, [r3, #6]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d03a      	beq.n	8009c28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b25b      	sxtb	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	da1b      	bge.n	8009bf4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	33b0      	adds	r3, #176	; 0xb0
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009bd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	88d2      	ldrh	r2, [r2, #6]
 8009bd8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	88db      	ldrh	r3, [r3, #6]
 8009bde:	2b07      	cmp	r3, #7
 8009be0:	bf28      	it	cs
 8009be2:	2307      	movcs	r3, #7
 8009be4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	89fa      	ldrh	r2, [r7, #14]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f001 fdad 	bl	800b74c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009bf2:	e090      	b.n	8009d16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	785a      	ldrb	r2, [r3, #1]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	88db      	ldrh	r3, [r3, #6]
 8009c02:	2b3f      	cmp	r3, #63	; 0x3f
 8009c04:	d803      	bhi.n	8009c0e <USBD_CDC_Setup+0xa6>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	88db      	ldrh	r3, [r3, #6]
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	e000      	b.n	8009c10 <USBD_CDC_Setup+0xa8>
 8009c0e:	2240      	movs	r2, #64	; 0x40
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009c16:	6939      	ldr	r1, [r7, #16]
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009c1e:	461a      	mov	r2, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f001 fdbf 	bl	800b7a4 <USBD_CtlPrepareRx>
      break;
 8009c26:	e076      	b.n	8009d16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	33b0      	adds	r3, #176	; 0xb0
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	7850      	ldrb	r0, [r2, #1]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	4798      	blx	r3
      break;
 8009c44:	e067      	b.n	8009d16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	785b      	ldrb	r3, [r3, #1]
 8009c4a:	2b0b      	cmp	r3, #11
 8009c4c:	d851      	bhi.n	8009cf2 <USBD_CDC_Setup+0x18a>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <USBD_CDC_Setup+0xec>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c85 	.word	0x08009c85
 8009c58:	08009d01 	.word	0x08009d01
 8009c5c:	08009cf3 	.word	0x08009cf3
 8009c60:	08009cf3 	.word	0x08009cf3
 8009c64:	08009cf3 	.word	0x08009cf3
 8009c68:	08009cf3 	.word	0x08009cf3
 8009c6c:	08009cf3 	.word	0x08009cf3
 8009c70:	08009cf3 	.word	0x08009cf3
 8009c74:	08009cf3 	.word	0x08009cf3
 8009c78:	08009cf3 	.word	0x08009cf3
 8009c7c:	08009caf 	.word	0x08009caf
 8009c80:	08009cd9 	.word	0x08009cd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d107      	bne.n	8009ca0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c90:	f107 030a 	add.w	r3, r7, #10
 8009c94:	2202      	movs	r2, #2
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fd57 	bl	800b74c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c9e:	e032      	b.n	8009d06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 fce1 	bl	800b66a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	75fb      	strb	r3, [r7, #23]
          break;
 8009cac:	e02b      	b.n	8009d06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d107      	bne.n	8009cca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cba:	f107 030d 	add.w	r3, r7, #13
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f001 fd42 	bl	800b74c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cc8:	e01d      	b.n	8009d06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 fccc 	bl	800b66a <USBD_CtlError>
            ret = USBD_FAIL;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8009cd6:	e016      	b.n	8009d06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b03      	cmp	r3, #3
 8009ce2:	d00f      	beq.n	8009d04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 fcbf 	bl	800b66a <USBD_CtlError>
            ret = USBD_FAIL;
 8009cec:	2303      	movs	r3, #3
 8009cee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009cf0:	e008      	b.n	8009d04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 fcb8 	bl	800b66a <USBD_CtlError>
          ret = USBD_FAIL;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8009cfe:	e002      	b.n	8009d06 <USBD_CDC_Setup+0x19e>
          break;
 8009d00:	bf00      	nop
 8009d02:	e008      	b.n	8009d16 <USBD_CDC_Setup+0x1ae>
          break;
 8009d04:	bf00      	nop
      }
      break;
 8009d06:	e006      	b.n	8009d16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f001 fcad 	bl	800b66a <USBD_CtlError>
      ret = USBD_FAIL;
 8009d10:	2303      	movs	r3, #3
 8009d12:	75fb      	strb	r3, [r7, #23]
      break;
 8009d14:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	32b0      	adds	r2, #176	; 0xb0
 8009d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e065      	b.n	8009e16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	32b0      	adds	r2, #176	; 0xb0
 8009d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	f003 020f 	and.w	r2, r3, #15
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	3318      	adds	r3, #24
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d02f      	beq.n	8009dd4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	f003 020f 	and.w	r2, r3, #15
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	440b      	add	r3, r1
 8009d86:	3318      	adds	r3, #24
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	f003 010f 	and.w	r1, r3, #15
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	460b      	mov	r3, r1
 8009d94:	00db      	lsls	r3, r3, #3
 8009d96:	440b      	add	r3, r1
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4403      	add	r3, r0
 8009d9c:	3348      	adds	r3, #72	; 0x48
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	fbb2 f1f3 	udiv	r1, r2, r3
 8009da4:	fb01 f303 	mul.w	r3, r1, r3
 8009da8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d112      	bne.n	8009dd4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	f003 020f 	and.w	r2, r3, #15
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	3318      	adds	r3, #24
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009dc6:	78f9      	ldrb	r1, [r7, #3]
 8009dc8:	2300      	movs	r3, #0
 8009dca:	2200      	movs	r2, #0
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f004 fba8 	bl	800e522 <USBD_LL_Transmit>
 8009dd2:	e01f      	b.n	8009e14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	33b0      	adds	r3, #176	; 0xb0
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d010      	beq.n	8009e14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	33b0      	adds	r3, #176	; 0xb0
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009e10:	78fa      	ldrb	r2, [r7, #3]
 8009e12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	32b0      	adds	r2, #176	; 0xb0
 8009e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	32b0      	adds	r2, #176	; 0xb0
 8009e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e01a      	b.n	8009e86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f004 fba6 	bl	800e5a6 <USBD_LL_GetRxDataSize>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	33b0      	adds	r3, #176	; 0xb0
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e80:	4611      	mov	r1, r2
 8009e82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	32b0      	adds	r2, #176	; 0xb0
 8009ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e025      	b.n	8009efc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	33b0      	adds	r3, #176	; 0xb0
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01a      	beq.n	8009efa <USBD_CDC_EP0_RxReady+0x6c>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009eca:	2bff      	cmp	r3, #255	; 0xff
 8009ecc:	d015      	beq.n	8009efa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	33b0      	adds	r3, #176	; 0xb0
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009ee6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009eee:	b292      	uxth	r2, r2
 8009ef0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	22ff      	movs	r2, #255	; 0xff
 8009ef6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f0c:	2182      	movs	r1, #130	; 0x82
 8009f0e:	4818      	ldr	r0, [pc, #96]	; (8009f70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f10:	f000 fd49 	bl	800a9a6 <USBD_GetEpDesc>
 8009f14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f16:	2101      	movs	r1, #1
 8009f18:	4815      	ldr	r0, [pc, #84]	; (8009f70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f1a:	f000 fd44 	bl	800a9a6 <USBD_GetEpDesc>
 8009f1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f20:	2181      	movs	r1, #129	; 0x81
 8009f22:	4813      	ldr	r0, [pc, #76]	; (8009f70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f24:	f000 fd3f 	bl	800a9a6 <USBD_GetEpDesc>
 8009f28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2210      	movs	r2, #16
 8009f34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d006      	beq.n	8009f4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f44:	711a      	strb	r2, [r3, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d006      	beq.n	8009f5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f58:	711a      	strb	r2, [r3, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2243      	movs	r2, #67	; 0x43
 8009f62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f64:	4b02      	ldr	r3, [pc, #8]	; (8009f70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000050 	.word	0x20000050

08009f74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f7c:	2182      	movs	r1, #130	; 0x82
 8009f7e:	4818      	ldr	r0, [pc, #96]	; (8009fe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f80:	f000 fd11 	bl	800a9a6 <USBD_GetEpDesc>
 8009f84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f86:	2101      	movs	r1, #1
 8009f88:	4815      	ldr	r0, [pc, #84]	; (8009fe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f8a:	f000 fd0c 	bl	800a9a6 <USBD_GetEpDesc>
 8009f8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f90:	2181      	movs	r1, #129	; 0x81
 8009f92:	4813      	ldr	r0, [pc, #76]	; (8009fe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f94:	f000 fd07 	bl	800a9a6 <USBD_GetEpDesc>
 8009f98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2210      	movs	r2, #16
 8009fa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d006      	beq.n	8009fba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	711a      	strb	r2, [r3, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f042 0202 	orr.w	r2, r2, #2
 8009fb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d006      	beq.n	8009fce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	711a      	strb	r2, [r3, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f042 0202 	orr.w	r2, r2, #2
 8009fcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2243      	movs	r2, #67	; 0x43
 8009fd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fd4:	4b02      	ldr	r3, [pc, #8]	; (8009fe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3718      	adds	r7, #24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	20000050 	.word	0x20000050

08009fe4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fec:	2182      	movs	r1, #130	; 0x82
 8009fee:	4818      	ldr	r0, [pc, #96]	; (800a050 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ff0:	f000 fcd9 	bl	800a9a6 <USBD_GetEpDesc>
 8009ff4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ff6:	2101      	movs	r1, #1
 8009ff8:	4815      	ldr	r0, [pc, #84]	; (800a050 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ffa:	f000 fcd4 	bl	800a9a6 <USBD_GetEpDesc>
 8009ffe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a000:	2181      	movs	r1, #129	; 0x81
 800a002:	4813      	ldr	r0, [pc, #76]	; (800a050 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a004:	f000 fccf 	bl	800a9a6 <USBD_GetEpDesc>
 800a008:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2210      	movs	r2, #16
 800a014:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d006      	beq.n	800a02a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2200      	movs	r2, #0
 800a020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a024:	711a      	strb	r2, [r3, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d006      	beq.n	800a03e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a038:	711a      	strb	r2, [r3, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2243      	movs	r2, #67	; 0x43
 800a042:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a044:	4b02      	ldr	r3, [pc, #8]	; (800a050 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000050 	.word	0x20000050

0800a054 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	220a      	movs	r2, #10
 800a060:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a062:	4b03      	ldr	r3, [pc, #12]	; (800a070 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	2000000c 	.word	0x2000000c

0800a074 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a084:	2303      	movs	r3, #3
 800a086:	e009      	b.n	800a09c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	33b0      	adds	r3, #176	; 0xb0
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	32b0      	adds	r2, #176	; 0xb0
 800a0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e008      	b.n	800a0e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	371c      	adds	r7, #28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	32b0      	adds	r2, #176	; 0xb0
 800a100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a104:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e004      	b.n	800a11a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
	...

0800a128 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	32b0      	adds	r2, #176	; 0xb0
 800a13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a140:	2301      	movs	r3, #1
 800a142:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e025      	b.n	800a19a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a154:	2b00      	cmp	r3, #0
 800a156:	d11f      	bne.n	800a198 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a160:	4b10      	ldr	r3, [pc, #64]	; (800a1a4 <USBD_CDC_TransmitPacket+0x7c>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	f003 020f 	and.w	r2, r3, #15
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4403      	add	r3, r0
 800a17a:	3318      	adds	r3, #24
 800a17c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a17e:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <USBD_CDC_TransmitPacket+0x7c>)
 800a180:	7819      	ldrb	r1, [r3, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f004 f9c7 	bl	800e522 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a198:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000093 	.word	0x20000093

0800a1a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	32b0      	adds	r2, #176	; 0xb0
 800a1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	32b0      	adds	r2, #176	; 0xb0
 800a1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e018      	b.n	800a208 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	7c1b      	ldrb	r3, [r3, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1de:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <USBD_CDC_ReceivePacket+0x68>)
 800a1e0:	7819      	ldrb	r1, [r3, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f004 f9b9 	bl	800e564 <USBD_LL_PrepareReceive>
 800a1f2:	e008      	b.n	800a206 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1f4:	4b06      	ldr	r3, [pc, #24]	; (800a210 <USBD_CDC_ReceivePacket+0x68>)
 800a1f6:	7819      	ldrb	r1, [r3, #0]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1fe:	2340      	movs	r3, #64	; 0x40
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f004 f9af 	bl	800e564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	20000094 	.word	0x20000094

0800a214 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a228:	2303      	movs	r3, #3
 800a22a:	e01f      	b.n	800a26c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	79fa      	ldrb	r2, [r7, #7]
 800a25e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f004 f829 	bl	800e2b8 <USBD_LL_Init>
 800a266:	4603      	mov	r3, r0
 800a268:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a288:	2303      	movs	r3, #3
 800a28a:	e025      	b.n	800a2d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	32ae      	adds	r2, #174	; 0xae
 800a29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00f      	beq.n	800a2c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	32ae      	adds	r2, #174	; 0xae
 800a2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b8:	f107 020e 	add.w	r2, r7, #14
 800a2bc:	4610      	mov	r0, r2
 800a2be:	4798      	blx	r3
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a2ce:	1c5a      	adds	r2, r3, #1
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f004 f831 	bl	800e350 <USBD_LL_Start>
 800a2ee:	4603      	mov	r3, r0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a300:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a302:	4618      	mov	r0, r3
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d009      	beq.n	800a33c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	78fa      	ldrb	r2, [r7, #3]
 800a332:	4611      	mov	r1, r2
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	4798      	blx	r3
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	460b      	mov	r3, r1
 800a350:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	78fa      	ldrb	r2, [r7, #3]
 800a360:	4611      	mov	r1, r2
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	4798      	blx	r3
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a36c:	2303      	movs	r3, #3
 800a36e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f001 f932 	bl	800b5f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3ae:	f003 031f 	and.w	r3, r3, #31
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d01a      	beq.n	800a3ec <USBD_LL_SetupStage+0x72>
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d822      	bhi.n	800a400 <USBD_LL_SetupStage+0x86>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d002      	beq.n	800a3c4 <USBD_LL_SetupStage+0x4a>
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d00a      	beq.n	800a3d8 <USBD_LL_SetupStage+0x5e>
 800a3c2:	e01d      	b.n	800a400 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fb5f 	bl	800aa90 <USBD_StdDevReq>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3d6:	e020      	b.n	800a41a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fbc7 	bl	800ab74 <USBD_StdItfReq>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ea:	e016      	b.n	800a41a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fc29 	bl	800ac4c <USBD_StdEPReq>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a3fe:	e00c      	b.n	800a41a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a406:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f003 fffe 	bl	800e410 <USBD_LL_StallEP>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]
      break;
 800a418:	bf00      	nop
  }

  return ret;
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	460b      	mov	r3, r1
 800a42e:	607a      	str	r2, [r7, #4]
 800a430:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a436:	7afb      	ldrb	r3, [r7, #11]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d16e      	bne.n	800a51a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a442:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	f040 8098 	bne.w	800a580 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d913      	bls.n	800a484 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	1ad2      	subs	r2, r2, r3
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	68da      	ldr	r2, [r3, #12]
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	4293      	cmp	r3, r2
 800a474:	bf28      	it	cs
 800a476:	4613      	movcs	r3, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f001 f9ae 	bl	800b7de <USBD_CtlContinueRx>
 800a482:	e07d      	b.n	800a580 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a48a:	f003 031f 	and.w	r3, r3, #31
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d014      	beq.n	800a4bc <USBD_LL_DataOutStage+0x98>
 800a492:	2b02      	cmp	r3, #2
 800a494:	d81d      	bhi.n	800a4d2 <USBD_LL_DataOutStage+0xae>
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <USBD_LL_DataOutStage+0x7c>
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d003      	beq.n	800a4a6 <USBD_LL_DataOutStage+0x82>
 800a49e:	e018      	b.n	800a4d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	75bb      	strb	r3, [r7, #22]
            break;
 800a4a4:	e018      	b.n	800a4d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 fa5e 	bl	800a972 <USBD_CoreFindIF>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	75bb      	strb	r3, [r7, #22]
            break;
 800a4ba:	e00d      	b.n	800a4d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 fa60 	bl	800a98c <USBD_CoreFindEP>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	75bb      	strb	r3, [r7, #22]
            break;
 800a4d0:	e002      	b.n	800a4d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	75bb      	strb	r3, [r7, #22]
            break;
 800a4d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a4d8:	7dbb      	ldrb	r3, [r7, #22]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d119      	bne.n	800a512 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d113      	bne.n	800a512 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a4ea:	7dba      	ldrb	r2, [r7, #22]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	32ae      	adds	r2, #174	; 0xae
 800a4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00b      	beq.n	800a512 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a4fa:	7dba      	ldrb	r2, [r7, #22]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a502:	7dba      	ldrb	r2, [r7, #22]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	32ae      	adds	r2, #174	; 0xae
 800a508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f001 f974 	bl	800b800 <USBD_CtlSendStatus>
 800a518:	e032      	b.n	800a580 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a51a:	7afb      	ldrb	r3, [r7, #11]
 800a51c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a520:	b2db      	uxtb	r3, r3
 800a522:	4619      	mov	r1, r3
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f000 fa31 	bl	800a98c <USBD_CoreFindEP>
 800a52a:	4603      	mov	r3, r0
 800a52c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a52e:	7dbb      	ldrb	r3, [r7, #22]
 800a530:	2bff      	cmp	r3, #255	; 0xff
 800a532:	d025      	beq.n	800a580 <USBD_LL_DataOutStage+0x15c>
 800a534:	7dbb      	ldrb	r3, [r7, #22]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d122      	bne.n	800a580 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b03      	cmp	r3, #3
 800a544:	d117      	bne.n	800a576 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a546:	7dba      	ldrb	r2, [r7, #22]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	32ae      	adds	r2, #174	; 0xae
 800a54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00f      	beq.n	800a576 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a556:	7dba      	ldrb	r2, [r7, #22]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a55e:	7dba      	ldrb	r2, [r7, #22]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	32ae      	adds	r2, #174	; 0xae
 800a564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	7afa      	ldrb	r2, [r7, #11]
 800a56c:	4611      	mov	r1, r2
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	4798      	blx	r3
 800a572:	4603      	mov	r3, r0
 800a574:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a576:	7dfb      	ldrb	r3, [r7, #23]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	e000      	b.n	800a582 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b086      	sub	sp, #24
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	460b      	mov	r3, r1
 800a594:	607a      	str	r2, [r7, #4]
 800a596:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d16f      	bne.n	800a67e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3314      	adds	r3, #20
 800a5a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d15a      	bne.n	800a664 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	689a      	ldr	r2, [r3, #8]
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d914      	bls.n	800a5e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	689a      	ldr	r2, [r3, #8]
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	1ad2      	subs	r2, r2, r3
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f001 f8d6 	bl	800b782 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2100      	movs	r1, #0
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f003 ffc1 	bl	800e564 <USBD_LL_PrepareReceive>
 800a5e2:	e03f      	b.n	800a664 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d11c      	bne.n	800a62a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d316      	bcc.n	800a62a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a606:	429a      	cmp	r2, r3
 800a608:	d20f      	bcs.n	800a62a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a60a:	2200      	movs	r2, #0
 800a60c:	2100      	movs	r1, #0
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f001 f8b7 	bl	800b782 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a61c:	2300      	movs	r3, #0
 800a61e:	2200      	movs	r2, #0
 800a620:	2100      	movs	r1, #0
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f003 ff9e 	bl	800e564 <USBD_LL_PrepareReceive>
 800a628:	e01c      	b.n	800a664 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b03      	cmp	r3, #3
 800a634:	d10f      	bne.n	800a656 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d009      	beq.n	800a656 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a656:	2180      	movs	r1, #128	; 0x80
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f003 fed9 	bl	800e410 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f001 f8e1 	bl	800b826 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d03a      	beq.n	800a6e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f7ff fe42 	bl	800a2f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a67c:	e032      	b.n	800a6e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a684:	b2db      	uxtb	r3, r3
 800a686:	4619      	mov	r1, r3
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f97f 	bl	800a98c <USBD_CoreFindEP>
 800a68e:	4603      	mov	r3, r0
 800a690:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a692:	7dfb      	ldrb	r3, [r7, #23]
 800a694:	2bff      	cmp	r3, #255	; 0xff
 800a696:	d025      	beq.n	800a6e4 <USBD_LL_DataInStage+0x15a>
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d122      	bne.n	800a6e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d11c      	bne.n	800a6e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a6aa:	7dfa      	ldrb	r2, [r7, #23]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	32ae      	adds	r2, #174	; 0xae
 800a6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d014      	beq.n	800a6e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a6ba:	7dfa      	ldrb	r2, [r7, #23]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a6c2:	7dfa      	ldrb	r2, [r7, #23]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	32ae      	adds	r2, #174	; 0xae
 800a6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	7afa      	ldrb	r2, [r7, #11]
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	4798      	blx	r3
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a6da:	7dbb      	ldrb	r3, [r7, #22]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a6e0:	7dbb      	ldrb	r3, [r7, #22]
 800a6e2:	e000      	b.n	800a6e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a726:	2b00      	cmp	r3, #0
 800a728:	d014      	beq.n	800a754 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00e      	beq.n	800a754 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6852      	ldr	r2, [r2, #4]
 800a742:	b2d2      	uxtb	r2, r2
 800a744:	4611      	mov	r1, r2
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	4798      	blx	r3
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a750:	2303      	movs	r3, #3
 800a752:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a754:	2340      	movs	r3, #64	; 0x40
 800a756:	2200      	movs	r2, #0
 800a758:	2100      	movs	r1, #0
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f003 fe13 	bl	800e386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2240      	movs	r2, #64	; 0x40
 800a76c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a770:	2340      	movs	r3, #64	; 0x40
 800a772:	2200      	movs	r2, #0
 800a774:	2180      	movs	r1, #128	; 0x80
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f003 fe05 	bl	800e386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2240      	movs	r2, #64	; 0x40
 800a786:	621a      	str	r2, [r3, #32]

  return ret;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	460b      	mov	r3, r1
 800a79c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	78fa      	ldrb	r2, [r7, #3]
 800a7a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2204      	movs	r2, #4
 800a7cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d106      	bne.n	800a800 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d110      	bne.n	800a844 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00b      	beq.n	800a844 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a832:	69db      	ldr	r3, [r3, #28]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d005      	beq.n	800a844 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b082      	sub	sp, #8
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	460b      	mov	r3, r1
 800a858:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	32ae      	adds	r2, #174	; 0xae
 800a864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e01c      	b.n	800a8aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d115      	bne.n	800a8a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	32ae      	adds	r2, #174	; 0xae
 800a886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00b      	beq.n	800a8a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	32ae      	adds	r2, #174	; 0xae
 800a89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	78fa      	ldrb	r2, [r7, #3]
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	32ae      	adds	r2, #174	; 0xae
 800a8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e01c      	b.n	800a90e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d115      	bne.n	800a90c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	32ae      	adds	r2, #174	; 0xae
 800a8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00b      	beq.n	800a90c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	32ae      	adds	r2, #174	; 0xae
 800a8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	78fa      	ldrb	r2, [r7, #3]
 800a906:	4611      	mov	r1, r2
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00e      	beq.n	800a968 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	6852      	ldr	r2, [r2, #4]
 800a956:	b2d2      	uxtb	r2, r2
 800a958:	4611      	mov	r1, r2
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a964:	2303      	movs	r3, #3
 800a966:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a968:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a972:	b480      	push	{r7}
 800a974:	b083      	sub	sp, #12
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	460b      	mov	r3, r1
 800a97c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a97e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a980:	4618      	mov	r0, r3
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a998:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b086      	sub	sp, #24
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	885b      	ldrh	r3, [r3, #2]
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d920      	bls.n	800aa10 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a9d6:	e013      	b.n	800aa00 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a9d8:	f107 030a 	add.w	r3, r7, #10
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6978      	ldr	r0, [r7, #20]
 800a9e0:	f000 f81b 	bl	800aa1a <USBD_GetNextDesc>
 800a9e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	785b      	ldrb	r3, [r3, #1]
 800a9ea:	2b05      	cmp	r3, #5
 800a9ec:	d108      	bne.n	800aa00 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	789b      	ldrb	r3, [r3, #2]
 800a9f6:	78fa      	ldrb	r2, [r7, #3]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d008      	beq.n	800aa0e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	885b      	ldrh	r3, [r3, #2]
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	897b      	ldrh	r3, [r7, #10]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d8e5      	bhi.n	800a9d8 <USBD_GetEpDesc+0x32>
 800aa0c:	e000      	b.n	800aa10 <USBD_GetEpDesc+0x6a>
          break;
 800aa0e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa10:	693b      	ldr	r3, [r7, #16]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3718      	adds	r7, #24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b085      	sub	sp, #20
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	881a      	ldrh	r2, [r3, #0]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	4413      	add	r3, r2
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4413      	add	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa46:	68fb      	ldr	r3, [r7, #12]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b087      	sub	sp, #28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa72:	8a3b      	ldrh	r3, [r7, #16]
 800aa74:	021b      	lsls	r3, r3, #8
 800aa76:	b21a      	sxth	r2, r3
 800aa78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	b21b      	sxth	r3, r3
 800aa80:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa82:	89fb      	ldrh	r3, [r7, #14]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	371c      	adds	r7, #28
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aaa6:	2b40      	cmp	r3, #64	; 0x40
 800aaa8:	d005      	beq.n	800aab6 <USBD_StdDevReq+0x26>
 800aaaa:	2b40      	cmp	r3, #64	; 0x40
 800aaac:	d857      	bhi.n	800ab5e <USBD_StdDevReq+0xce>
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00f      	beq.n	800aad2 <USBD_StdDevReq+0x42>
 800aab2:	2b20      	cmp	r3, #32
 800aab4:	d153      	bne.n	800ab5e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	32ae      	adds	r2, #174	; 0xae
 800aac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	4798      	blx	r3
 800aacc:	4603      	mov	r3, r0
 800aace:	73fb      	strb	r3, [r7, #15]
      break;
 800aad0:	e04a      	b.n	800ab68 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	2b09      	cmp	r3, #9
 800aad8:	d83b      	bhi.n	800ab52 <USBD_StdDevReq+0xc2>
 800aada:	a201      	add	r2, pc, #4	; (adr r2, 800aae0 <USBD_StdDevReq+0x50>)
 800aadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae0:	0800ab35 	.word	0x0800ab35
 800aae4:	0800ab49 	.word	0x0800ab49
 800aae8:	0800ab53 	.word	0x0800ab53
 800aaec:	0800ab3f 	.word	0x0800ab3f
 800aaf0:	0800ab53 	.word	0x0800ab53
 800aaf4:	0800ab13 	.word	0x0800ab13
 800aaf8:	0800ab09 	.word	0x0800ab09
 800aafc:	0800ab53 	.word	0x0800ab53
 800ab00:	0800ab2b 	.word	0x0800ab2b
 800ab04:	0800ab1d 	.word	0x0800ab1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fa3c 	bl	800af88 <USBD_GetDescriptor>
          break;
 800ab10:	e024      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fbcb 	bl	800b2b0 <USBD_SetAddress>
          break;
 800ab1a:	e01f      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fc0a 	bl	800b338 <USBD_SetConfig>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]
          break;
 800ab28:	e018      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fcad 	bl	800b48c <USBD_GetConfig>
          break;
 800ab32:	e013      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fcde 	bl	800b4f8 <USBD_GetStatus>
          break;
 800ab3c:	e00e      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fd0d 	bl	800b560 <USBD_SetFeature>
          break;
 800ab46:	e009      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fd31 	bl	800b5b2 <USBD_ClrFeature>
          break;
 800ab50:	e004      	b.n	800ab5c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fd88 	bl	800b66a <USBD_CtlError>
          break;
 800ab5a:	bf00      	nop
      }
      break;
 800ab5c:	e004      	b.n	800ab68 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fd82 	bl	800b66a <USBD_CtlError>
      break;
 800ab66:	bf00      	nop
  }

  return ret;
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop

0800ab74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab8a:	2b40      	cmp	r3, #64	; 0x40
 800ab8c:	d005      	beq.n	800ab9a <USBD_StdItfReq+0x26>
 800ab8e:	2b40      	cmp	r3, #64	; 0x40
 800ab90:	d852      	bhi.n	800ac38 <USBD_StdItfReq+0xc4>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <USBD_StdItfReq+0x26>
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	d14e      	bne.n	800ac38 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	3b01      	subs	r3, #1
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d840      	bhi.n	800ac2a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	889b      	ldrh	r3, [r3, #4]
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d836      	bhi.n	800ac20 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	889b      	ldrh	r3, [r3, #4]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff fed9 	bl	800a972 <USBD_CoreFindIF>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	2bff      	cmp	r3, #255	; 0xff
 800abc8:	d01d      	beq.n	800ac06 <USBD_StdItfReq+0x92>
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d11a      	bne.n	800ac06 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800abd0:	7bba      	ldrb	r2, [r7, #14]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	32ae      	adds	r2, #174	; 0xae
 800abd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00f      	beq.n	800ac00 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800abe0:	7bba      	ldrb	r2, [r7, #14]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800abe8:	7bba      	ldrb	r2, [r7, #14]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	32ae      	adds	r2, #174	; 0xae
 800abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	4798      	blx	r3
 800abfa:	4603      	mov	r3, r0
 800abfc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abfe:	e004      	b.n	800ac0a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac00:	2303      	movs	r3, #3
 800ac02:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac04:	e001      	b.n	800ac0a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac06:	2303      	movs	r3, #3
 800ac08:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	88db      	ldrh	r3, [r3, #6]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d110      	bne.n	800ac34 <USBD_StdItfReq+0xc0>
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10d      	bne.n	800ac34 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fdf1 	bl	800b800 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac1e:	e009      	b.n	800ac34 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac20:	6839      	ldr	r1, [r7, #0]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fd21 	bl	800b66a <USBD_CtlError>
          break;
 800ac28:	e004      	b.n	800ac34 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fd1c 	bl	800b66a <USBD_CtlError>
          break;
 800ac32:	e000      	b.n	800ac36 <USBD_StdItfReq+0xc2>
          break;
 800ac34:	bf00      	nop
      }
      break;
 800ac36:	e004      	b.n	800ac42 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fd15 	bl	800b66a <USBD_CtlError>
      break;
 800ac40:	bf00      	nop
  }

  return ret;
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	889b      	ldrh	r3, [r3, #4]
 800ac5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac68:	2b40      	cmp	r3, #64	; 0x40
 800ac6a:	d007      	beq.n	800ac7c <USBD_StdEPReq+0x30>
 800ac6c:	2b40      	cmp	r3, #64	; 0x40
 800ac6e:	f200 817f 	bhi.w	800af70 <USBD_StdEPReq+0x324>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d02a      	beq.n	800accc <USBD_StdEPReq+0x80>
 800ac76:	2b20      	cmp	r3, #32
 800ac78:	f040 817a 	bne.w	800af70 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff fe83 	bl	800a98c <USBD_CoreFindEP>
 800ac86:	4603      	mov	r3, r0
 800ac88:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac8a:	7b7b      	ldrb	r3, [r7, #13]
 800ac8c:	2bff      	cmp	r3, #255	; 0xff
 800ac8e:	f000 8174 	beq.w	800af7a <USBD_StdEPReq+0x32e>
 800ac92:	7b7b      	ldrb	r3, [r7, #13]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 8170 	bne.w	800af7a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac9a:	7b7a      	ldrb	r2, [r7, #13]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aca2:	7b7a      	ldrb	r2, [r7, #13]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	32ae      	adds	r2, #174	; 0xae
 800aca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 8163 	beq.w	800af7a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800acb4:	7b7a      	ldrb	r2, [r7, #13]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	32ae      	adds	r2, #174	; 0xae
 800acba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	4798      	blx	r3
 800acc6:	4603      	mov	r3, r0
 800acc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800acca:	e156      	b.n	800af7a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	785b      	ldrb	r3, [r3, #1]
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d008      	beq.n	800ace6 <USBD_StdEPReq+0x9a>
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	f300 8145 	bgt.w	800af64 <USBD_StdEPReq+0x318>
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 809b 	beq.w	800ae16 <USBD_StdEPReq+0x1ca>
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d03c      	beq.n	800ad5e <USBD_StdEPReq+0x112>
 800ace4:	e13e      	b.n	800af64 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d002      	beq.n	800acf8 <USBD_StdEPReq+0xac>
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d016      	beq.n	800ad24 <USBD_StdEPReq+0xd8>
 800acf6:	e02c      	b.n	800ad52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acf8:	7bbb      	ldrb	r3, [r7, #14]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00d      	beq.n	800ad1a <USBD_StdEPReq+0xce>
 800acfe:	7bbb      	ldrb	r3, [r7, #14]
 800ad00:	2b80      	cmp	r3, #128	; 0x80
 800ad02:	d00a      	beq.n	800ad1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f003 fb81 	bl	800e410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad0e:	2180      	movs	r1, #128	; 0x80
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f003 fb7d 	bl	800e410 <USBD_LL_StallEP>
 800ad16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad18:	e020      	b.n	800ad5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fca4 	bl	800b66a <USBD_CtlError>
              break;
 800ad22:	e01b      	b.n	800ad5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	885b      	ldrh	r3, [r3, #2]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10e      	bne.n	800ad4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00b      	beq.n	800ad4a <USBD_StdEPReq+0xfe>
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	2b80      	cmp	r3, #128	; 0x80
 800ad36:	d008      	beq.n	800ad4a <USBD_StdEPReq+0xfe>
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	88db      	ldrh	r3, [r3, #6]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d104      	bne.n	800ad4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f003 fb63 	bl	800e410 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fd58 	bl	800b800 <USBD_CtlSendStatus>

              break;
 800ad50:	e004      	b.n	800ad5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fc88 	bl	800b66a <USBD_CtlError>
              break;
 800ad5a:	bf00      	nop
          }
          break;
 800ad5c:	e107      	b.n	800af6e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d002      	beq.n	800ad70 <USBD_StdEPReq+0x124>
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d016      	beq.n	800ad9c <USBD_StdEPReq+0x150>
 800ad6e:	e04b      	b.n	800ae08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad70:	7bbb      	ldrb	r3, [r7, #14]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00d      	beq.n	800ad92 <USBD_StdEPReq+0x146>
 800ad76:	7bbb      	ldrb	r3, [r7, #14]
 800ad78:	2b80      	cmp	r3, #128	; 0x80
 800ad7a:	d00a      	beq.n	800ad92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f003 fb45 	bl	800e410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad86:	2180      	movs	r1, #128	; 0x80
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f003 fb41 	bl	800e410 <USBD_LL_StallEP>
 800ad8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad90:	e040      	b.n	800ae14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fc68 	bl	800b66a <USBD_CtlError>
              break;
 800ad9a:	e03b      	b.n	800ae14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	885b      	ldrh	r3, [r3, #2]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d136      	bne.n	800ae12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d004      	beq.n	800adb8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800adae:	7bbb      	ldrb	r3, [r7, #14]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f003 fb4b 	bl	800e44e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fd21 	bl	800b800 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff fde2 	bl	800a98c <USBD_CoreFindEP>
 800adc8:	4603      	mov	r3, r0
 800adca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adcc:	7b7b      	ldrb	r3, [r7, #13]
 800adce:	2bff      	cmp	r3, #255	; 0xff
 800add0:	d01f      	beq.n	800ae12 <USBD_StdEPReq+0x1c6>
 800add2:	7b7b      	ldrb	r3, [r7, #13]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11c      	bne.n	800ae12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800add8:	7b7a      	ldrb	r2, [r7, #13]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ade0:	7b7a      	ldrb	r2, [r7, #13]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	32ae      	adds	r2, #174	; 0xae
 800ade6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d010      	beq.n	800ae12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800adf0:	7b7a      	ldrb	r2, [r7, #13]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	32ae      	adds	r2, #174	; 0xae
 800adf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	4798      	blx	r3
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae06:	e004      	b.n	800ae12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fc2d 	bl	800b66a <USBD_CtlError>
              break;
 800ae10:	e000      	b.n	800ae14 <USBD_StdEPReq+0x1c8>
              break;
 800ae12:	bf00      	nop
          }
          break;
 800ae14:	e0ab      	b.n	800af6e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d002      	beq.n	800ae28 <USBD_StdEPReq+0x1dc>
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d032      	beq.n	800ae8c <USBD_StdEPReq+0x240>
 800ae26:	e097      	b.n	800af58 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <USBD_StdEPReq+0x1f2>
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	2b80      	cmp	r3, #128	; 0x80
 800ae32:	d004      	beq.n	800ae3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fc17 	bl	800b66a <USBD_CtlError>
                break;
 800ae3c:	e091      	b.n	800af62 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	da0b      	bge.n	800ae5e <USBD_StdEPReq+0x212>
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
 800ae48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	3310      	adds	r3, #16
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	4413      	add	r3, r2
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	e00b      	b.n	800ae76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae5e:	7bbb      	ldrb	r3, [r7, #14]
 800ae60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae64:	4613      	mov	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	4413      	add	r3, r2
 800ae74:	3304      	adds	r3, #4
 800ae76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2202      	movs	r2, #2
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fc61 	bl	800b74c <USBD_CtlSendData>
              break;
 800ae8a:	e06a      	b.n	800af62 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	da11      	bge.n	800aeb8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	f003 020f 	and.w	r2, r3, #15
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	440b      	add	r3, r1
 800aea6:	3324      	adds	r3, #36	; 0x24
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d117      	bne.n	800aede <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fbda 	bl	800b66a <USBD_CtlError>
                  break;
 800aeb6:	e054      	b.n	800af62 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	f003 020f 	and.w	r2, r3, #15
 800aebe:	6879      	ldr	r1, [r7, #4]
 800aec0:	4613      	mov	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	440b      	add	r3, r1
 800aeca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d104      	bne.n	800aede <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fbc7 	bl	800b66a <USBD_CtlError>
                  break;
 800aedc:	e041      	b.n	800af62 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aede:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	da0b      	bge.n	800aefe <USBD_StdEPReq+0x2b2>
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aeec:	4613      	mov	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4413      	add	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	3310      	adds	r3, #16
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	4413      	add	r3, r2
 800aefa:	3304      	adds	r3, #4
 800aefc:	e00b      	b.n	800af16 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aefe:	7bbb      	ldrb	r3, [r7, #14]
 800af00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	4413      	add	r3, r2
 800af14:	3304      	adds	r3, #4
 800af16:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <USBD_StdEPReq+0x2d8>
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	2b80      	cmp	r3, #128	; 0x80
 800af22:	d103      	bne.n	800af2c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	e00e      	b.n	800af4a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f003 faab 	bl	800e48c <USBD_LL_IsStallEP>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	2201      	movs	r2, #1
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	e002      	b.n	800af4a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2200      	movs	r2, #0
 800af48:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2202      	movs	r2, #2
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fbfb 	bl	800b74c <USBD_CtlSendData>
              break;
 800af56:	e004      	b.n	800af62 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fb85 	bl	800b66a <USBD_CtlError>
              break;
 800af60:	bf00      	nop
          }
          break;
 800af62:	e004      	b.n	800af6e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fb7f 	bl	800b66a <USBD_CtlError>
          break;
 800af6c:	bf00      	nop
      }
      break;
 800af6e:	e005      	b.n	800af7c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fb79 	bl	800b66a <USBD_CtlError>
      break;
 800af78:	e000      	b.n	800af7c <USBD_StdEPReq+0x330>
      break;
 800af7a:	bf00      	nop
  }

  return ret;
 800af7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
	...

0800af88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af92:	2300      	movs	r3, #0
 800af94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af9a:	2300      	movs	r3, #0
 800af9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	885b      	ldrh	r3, [r3, #2]
 800afa2:	0a1b      	lsrs	r3, r3, #8
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	3b01      	subs	r3, #1
 800afa8:	2b0e      	cmp	r3, #14
 800afaa:	f200 8152 	bhi.w	800b252 <USBD_GetDescriptor+0x2ca>
 800afae:	a201      	add	r2, pc, #4	; (adr r2, 800afb4 <USBD_GetDescriptor+0x2c>)
 800afb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb4:	0800b025 	.word	0x0800b025
 800afb8:	0800b03d 	.word	0x0800b03d
 800afbc:	0800b07d 	.word	0x0800b07d
 800afc0:	0800b253 	.word	0x0800b253
 800afc4:	0800b253 	.word	0x0800b253
 800afc8:	0800b1f3 	.word	0x0800b1f3
 800afcc:	0800b21f 	.word	0x0800b21f
 800afd0:	0800b253 	.word	0x0800b253
 800afd4:	0800b253 	.word	0x0800b253
 800afd8:	0800b253 	.word	0x0800b253
 800afdc:	0800b253 	.word	0x0800b253
 800afe0:	0800b253 	.word	0x0800b253
 800afe4:	0800b253 	.word	0x0800b253
 800afe8:	0800b253 	.word	0x0800b253
 800afec:	0800aff1 	.word	0x0800aff1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aff6:	69db      	ldr	r3, [r3, #28]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00b      	beq.n	800b014 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	7c12      	ldrb	r2, [r2, #16]
 800b008:	f107 0108 	add.w	r1, r7, #8
 800b00c:	4610      	mov	r0, r2
 800b00e:	4798      	blx	r3
 800b010:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b012:	e126      	b.n	800b262 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fb27 	bl	800b66a <USBD_CtlError>
        err++;
 800b01c:	7afb      	ldrb	r3, [r7, #11]
 800b01e:	3301      	adds	r3, #1
 800b020:	72fb      	strb	r3, [r7, #11]
      break;
 800b022:	e11e      	b.n	800b262 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	7c12      	ldrb	r2, [r2, #16]
 800b030:	f107 0108 	add.w	r1, r7, #8
 800b034:	4610      	mov	r0, r2
 800b036:	4798      	blx	r3
 800b038:	60f8      	str	r0, [r7, #12]
      break;
 800b03a:	e112      	b.n	800b262 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	7c1b      	ldrb	r3, [r3, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10d      	bne.n	800b060 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04c:	f107 0208 	add.w	r2, r7, #8
 800b050:	4610      	mov	r0, r2
 800b052:	4798      	blx	r3
 800b054:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3301      	adds	r3, #1
 800b05a:	2202      	movs	r2, #2
 800b05c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b05e:	e100      	b.n	800b262 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b068:	f107 0208 	add.w	r2, r7, #8
 800b06c:	4610      	mov	r0, r2
 800b06e:	4798      	blx	r3
 800b070:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3301      	adds	r3, #1
 800b076:	2202      	movs	r2, #2
 800b078:	701a      	strb	r2, [r3, #0]
      break;
 800b07a:	e0f2      	b.n	800b262 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	885b      	ldrh	r3, [r3, #2]
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b05      	cmp	r3, #5
 800b084:	f200 80ac 	bhi.w	800b1e0 <USBD_GetDescriptor+0x258>
 800b088:	a201      	add	r2, pc, #4	; (adr r2, 800b090 <USBD_GetDescriptor+0x108>)
 800b08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08e:	bf00      	nop
 800b090:	0800b0a9 	.word	0x0800b0a9
 800b094:	0800b0dd 	.word	0x0800b0dd
 800b098:	0800b111 	.word	0x0800b111
 800b09c:	0800b145 	.word	0x0800b145
 800b0a0:	0800b179 	.word	0x0800b179
 800b0a4:	0800b1ad 	.word	0x0800b1ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00b      	beq.n	800b0cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	7c12      	ldrb	r2, [r2, #16]
 800b0c0:	f107 0108 	add.w	r1, r7, #8
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4798      	blx	r3
 800b0c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ca:	e091      	b.n	800b1f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 facb 	bl	800b66a <USBD_CtlError>
            err++;
 800b0d4:	7afb      	ldrb	r3, [r7, #11]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0da:	e089      	b.n	800b1f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00b      	beq.n	800b100 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	7c12      	ldrb	r2, [r2, #16]
 800b0f4:	f107 0108 	add.w	r1, r7, #8
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0fe:	e077      	b.n	800b1f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fab1 	bl	800b66a <USBD_CtlError>
            err++;
 800b108:	7afb      	ldrb	r3, [r7, #11]
 800b10a:	3301      	adds	r3, #1
 800b10c:	72fb      	strb	r3, [r7, #11]
          break;
 800b10e:	e06f      	b.n	800b1f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00b      	beq.n	800b134 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	7c12      	ldrb	r2, [r2, #16]
 800b128:	f107 0108 	add.w	r1, r7, #8
 800b12c:	4610      	mov	r0, r2
 800b12e:	4798      	blx	r3
 800b130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b132:	e05d      	b.n	800b1f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fa97 	bl	800b66a <USBD_CtlError>
            err++;
 800b13c:	7afb      	ldrb	r3, [r7, #11]
 800b13e:	3301      	adds	r3, #1
 800b140:	72fb      	strb	r3, [r7, #11]
          break;
 800b142:	e055      	b.n	800b1f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00b      	beq.n	800b168 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	7c12      	ldrb	r2, [r2, #16]
 800b15c:	f107 0108 	add.w	r1, r7, #8
 800b160:	4610      	mov	r0, r2
 800b162:	4798      	blx	r3
 800b164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b166:	e043      	b.n	800b1f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fa7d 	bl	800b66a <USBD_CtlError>
            err++;
 800b170:	7afb      	ldrb	r3, [r7, #11]
 800b172:	3301      	adds	r3, #1
 800b174:	72fb      	strb	r3, [r7, #11]
          break;
 800b176:	e03b      	b.n	800b1f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00b      	beq.n	800b19c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	7c12      	ldrb	r2, [r2, #16]
 800b190:	f107 0108 	add.w	r1, r7, #8
 800b194:	4610      	mov	r0, r2
 800b196:	4798      	blx	r3
 800b198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b19a:	e029      	b.n	800b1f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa63 	bl	800b66a <USBD_CtlError>
            err++;
 800b1a4:	7afb      	ldrb	r3, [r7, #11]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1aa:	e021      	b.n	800b1f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00b      	beq.n	800b1d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	7c12      	ldrb	r2, [r2, #16]
 800b1c4:	f107 0108 	add.w	r1, r7, #8
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
 800b1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ce:	e00f      	b.n	800b1f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fa49 	bl	800b66a <USBD_CtlError>
            err++;
 800b1d8:	7afb      	ldrb	r3, [r7, #11]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b1de:	e007      	b.n	800b1f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fa41 	bl	800b66a <USBD_CtlError>
          err++;
 800b1e8:	7afb      	ldrb	r3, [r7, #11]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b1ee:	bf00      	nop
      }
      break;
 800b1f0:	e037      	b.n	800b262 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	7c1b      	ldrb	r3, [r3, #16]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d109      	bne.n	800b20e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b202:	f107 0208 	add.w	r2, r7, #8
 800b206:	4610      	mov	r0, r2
 800b208:	4798      	blx	r3
 800b20a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b20c:	e029      	b.n	800b262 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fa2a 	bl	800b66a <USBD_CtlError>
        err++;
 800b216:	7afb      	ldrb	r3, [r7, #11]
 800b218:	3301      	adds	r3, #1
 800b21a:	72fb      	strb	r3, [r7, #11]
      break;
 800b21c:	e021      	b.n	800b262 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	7c1b      	ldrb	r3, [r3, #16]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10d      	bne.n	800b242 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22e:	f107 0208 	add.w	r2, r7, #8
 800b232:	4610      	mov	r0, r2
 800b234:	4798      	blx	r3
 800b236:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3301      	adds	r3, #1
 800b23c:	2207      	movs	r2, #7
 800b23e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b240:	e00f      	b.n	800b262 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fa10 	bl	800b66a <USBD_CtlError>
        err++;
 800b24a:	7afb      	ldrb	r3, [r7, #11]
 800b24c:	3301      	adds	r3, #1
 800b24e:	72fb      	strb	r3, [r7, #11]
      break;
 800b250:	e007      	b.n	800b262 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fa08 	bl	800b66a <USBD_CtlError>
      err++;
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	3301      	adds	r3, #1
 800b25e:	72fb      	strb	r3, [r7, #11]
      break;
 800b260:	bf00      	nop
  }

  if (err != 0U)
 800b262:	7afb      	ldrb	r3, [r7, #11]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d11e      	bne.n	800b2a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	88db      	ldrh	r3, [r3, #6]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d016      	beq.n	800b29e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b270:	893b      	ldrh	r3, [r7, #8]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00e      	beq.n	800b294 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	88da      	ldrh	r2, [r3, #6]
 800b27a:	893b      	ldrh	r3, [r7, #8]
 800b27c:	4293      	cmp	r3, r2
 800b27e:	bf28      	it	cs
 800b280:	4613      	movcs	r3, r2
 800b282:	b29b      	uxth	r3, r3
 800b284:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b286:	893b      	ldrh	r3, [r7, #8]
 800b288:	461a      	mov	r2, r3
 800b28a:	68f9      	ldr	r1, [r7, #12]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fa5d 	bl	800b74c <USBD_CtlSendData>
 800b292:	e009      	b.n	800b2a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f9e7 	bl	800b66a <USBD_CtlError>
 800b29c:	e004      	b.n	800b2a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 faae 	bl	800b800 <USBD_CtlSendStatus>
 800b2a4:	e000      	b.n	800b2a8 <USBD_GetDescriptor+0x320>
    return;
 800b2a6:	bf00      	nop
  }
}
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop

0800b2b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	889b      	ldrh	r3, [r3, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d131      	bne.n	800b326 <USBD_SetAddress+0x76>
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	88db      	ldrh	r3, [r3, #6]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d12d      	bne.n	800b326 <USBD_SetAddress+0x76>
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	885b      	ldrh	r3, [r3, #2]
 800b2ce:	2b7f      	cmp	r3, #127	; 0x7f
 800b2d0:	d829      	bhi.n	800b326 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	885b      	ldrh	r3, [r3, #2]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d104      	bne.n	800b2f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f9bc 	bl	800b66a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2f2:	e01d      	b.n	800b330 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7bfa      	ldrb	r2, [r7, #15]
 800b2f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f003 f8ef 	bl	800e4e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fa7a 	bl	800b800 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d004      	beq.n	800b31c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2202      	movs	r2, #2
 800b316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b31a:	e009      	b.n	800b330 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b324:	e004      	b.n	800b330 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f99e 	bl	800b66a <USBD_CtlError>
  }
}
 800b32e:	bf00      	nop
 800b330:	bf00      	nop
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	885b      	ldrh	r3, [r3, #2]
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	4b4e      	ldr	r3, [pc, #312]	; (800b488 <USBD_SetConfig+0x150>)
 800b34e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b350:	4b4d      	ldr	r3, [pc, #308]	; (800b488 <USBD_SetConfig+0x150>)
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d905      	bls.n	800b364 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b358:	6839      	ldr	r1, [r7, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f985 	bl	800b66a <USBD_CtlError>
    return USBD_FAIL;
 800b360:	2303      	movs	r3, #3
 800b362:	e08c      	b.n	800b47e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d002      	beq.n	800b376 <USBD_SetConfig+0x3e>
 800b370:	2b03      	cmp	r3, #3
 800b372:	d029      	beq.n	800b3c8 <USBD_SetConfig+0x90>
 800b374:	e075      	b.n	800b462 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b376:	4b44      	ldr	r3, [pc, #272]	; (800b488 <USBD_SetConfig+0x150>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d020      	beq.n	800b3c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b37e:	4b42      	ldr	r3, [pc, #264]	; (800b488 <USBD_SetConfig+0x150>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b388:	4b3f      	ldr	r3, [pc, #252]	; (800b488 <USBD_SetConfig+0x150>)
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7fe ffbd 	bl	800a30e <USBD_SetClassConfig>
 800b394:	4603      	mov	r3, r0
 800b396:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b398:	7bfb      	ldrb	r3, [r7, #15]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d008      	beq.n	800b3b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f962 	bl	800b66a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3ae:	e065      	b.n	800b47c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fa25 	bl	800b800 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2203      	movs	r2, #3
 800b3ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3be:	e05d      	b.n	800b47c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fa1d 	bl	800b800 <USBD_CtlSendStatus>
      break;
 800b3c6:	e059      	b.n	800b47c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b3c8:	4b2f      	ldr	r3, [pc, #188]	; (800b488 <USBD_SetConfig+0x150>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d112      	bne.n	800b3f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b3d8:	4b2b      	ldr	r3, [pc, #172]	; (800b488 <USBD_SetConfig+0x150>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	461a      	mov	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3e2:	4b29      	ldr	r3, [pc, #164]	; (800b488 <USBD_SetConfig+0x150>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7fe ffac 	bl	800a346 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa06 	bl	800b800 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3f4:	e042      	b.n	800b47c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b3f6:	4b24      	ldr	r3, [pc, #144]	; (800b488 <USBD_SetConfig+0x150>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	429a      	cmp	r2, r3
 800b402:	d02a      	beq.n	800b45a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7fe ff9a 	bl	800a346 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b412:	4b1d      	ldr	r3, [pc, #116]	; (800b488 <USBD_SetConfig+0x150>)
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	461a      	mov	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b41c:	4b1a      	ldr	r3, [pc, #104]	; (800b488 <USBD_SetConfig+0x150>)
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7fe ff73 	bl	800a30e <USBD_SetClassConfig>
 800b428:	4603      	mov	r3, r0
 800b42a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00f      	beq.n	800b452 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f918 	bl	800b66a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	4619      	mov	r1, r3
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7fe ff7f 	bl	800a346 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2202      	movs	r2, #2
 800b44c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b450:	e014      	b.n	800b47c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f9d4 	bl	800b800 <USBD_CtlSendStatus>
      break;
 800b458:	e010      	b.n	800b47c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f9d0 	bl	800b800 <USBD_CtlSendStatus>
      break;
 800b460:	e00c      	b.n	800b47c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f900 	bl	800b66a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b46a:	4b07      	ldr	r3, [pc, #28]	; (800b488 <USBD_SetConfig+0x150>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7fe ff68 	bl	800a346 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b476:	2303      	movs	r3, #3
 800b478:	73fb      	strb	r3, [r7, #15]
      break;
 800b47a:	bf00      	nop
  }

  return ret;
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20003160 	.word	0x20003160

0800b48c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	88db      	ldrh	r3, [r3, #6]
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d004      	beq.n	800b4a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f8e2 	bl	800b66a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4a6:	e023      	b.n	800b4f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	dc02      	bgt.n	800b4ba <USBD_GetConfig+0x2e>
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dc03      	bgt.n	800b4c0 <USBD_GetConfig+0x34>
 800b4b8:	e015      	b.n	800b4e6 <USBD_GetConfig+0x5a>
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d00b      	beq.n	800b4d6 <USBD_GetConfig+0x4a>
 800b4be:	e012      	b.n	800b4e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f93c 	bl	800b74c <USBD_CtlSendData>
        break;
 800b4d4:	e00c      	b.n	800b4f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	2201      	movs	r2, #1
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f934 	bl	800b74c <USBD_CtlSendData>
        break;
 800b4e4:	e004      	b.n	800b4f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f8be 	bl	800b66a <USBD_CtlError>
        break;
 800b4ee:	bf00      	nop
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	3b01      	subs	r3, #1
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d81e      	bhi.n	800b54e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	88db      	ldrh	r3, [r3, #6]
 800b514:	2b02      	cmp	r3, #2
 800b516:	d004      	beq.n	800b522 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f8a5 	bl	800b66a <USBD_CtlError>
        break;
 800b520:	e01a      	b.n	800b558 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d005      	beq.n	800b53e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	f043 0202 	orr.w	r2, r3, #2
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	330c      	adds	r3, #12
 800b542:	2202      	movs	r2, #2
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f900 	bl	800b74c <USBD_CtlSendData>
      break;
 800b54c:	e004      	b.n	800b558 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f88a 	bl	800b66a <USBD_CtlError>
      break;
 800b556:	bf00      	nop
  }
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	885b      	ldrh	r3, [r3, #2]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d107      	bne.n	800b582 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f940 	bl	800b800 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b580:	e013      	b.n	800b5aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	885b      	ldrh	r3, [r3, #2]
 800b586:	2b02      	cmp	r3, #2
 800b588:	d10b      	bne.n	800b5a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	889b      	ldrh	r3, [r3, #4]
 800b58e:	0a1b      	lsrs	r3, r3, #8
 800b590:	b29b      	uxth	r3, r3
 800b592:	b2da      	uxtb	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f930 	bl	800b800 <USBD_CtlSendStatus>
}
 800b5a0:	e003      	b.n	800b5aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f860 	bl	800b66a <USBD_CtlError>
}
 800b5aa:	bf00      	nop
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b082      	sub	sp, #8
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d80b      	bhi.n	800b5e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	885b      	ldrh	r3, [r3, #2]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d10c      	bne.n	800b5ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f910 	bl	800b800 <USBD_CtlSendStatus>
      }
      break;
 800b5e0:	e004      	b.n	800b5ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f840 	bl	800b66a <USBD_CtlError>
      break;
 800b5ea:	e000      	b.n	800b5ee <USBD_ClrFeature+0x3c>
      break;
 800b5ec:	bf00      	nop
  }
}
 800b5ee:	bf00      	nop
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	781a      	ldrb	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	3301      	adds	r3, #1
 800b610:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	781a      	ldrb	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3301      	adds	r3, #1
 800b61e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f7ff fa17 	bl	800aa54 <SWAPBYTE>
 800b626:	4603      	mov	r3, r0
 800b628:	461a      	mov	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3301      	adds	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3301      	adds	r3, #1
 800b638:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f7ff fa0a 	bl	800aa54 <SWAPBYTE>
 800b640:	4603      	mov	r3, r0
 800b642:	461a      	mov	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	3301      	adds	r3, #1
 800b64c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3301      	adds	r3, #1
 800b652:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff f9fd 	bl	800aa54 <SWAPBYTE>
 800b65a:	4603      	mov	r3, r0
 800b65c:	461a      	mov	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	80da      	strh	r2, [r3, #6]
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b674:	2180      	movs	r1, #128	; 0x80
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f002 feca 	bl	800e410 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b67c:	2100      	movs	r1, #0
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f002 fec6 	bl	800e410 <USBD_LL_StallEP>
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d036      	beq.n	800b710 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b6a6:	6938      	ldr	r0, [r7, #16]
 800b6a8:	f000 f836 	bl	800b718 <USBD_GetLen>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	005b      	lsls	r3, r3, #1
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	4413      	add	r3, r2
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	7812      	ldrb	r2, [r2, #0]
 800b6c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	2203      	movs	r2, #3
 800b6d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6d6:	7dfb      	ldrb	r3, [r7, #23]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b6dc:	e013      	b.n	800b706 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	7812      	ldrb	r2, [r2, #0]
 800b6e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	613b      	str	r3, [r7, #16]
    idx++;
 800b6f0:	7dfb      	ldrb	r3, [r7, #23]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	3301      	adds	r3, #1
 800b704:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1e7      	bne.n	800b6de <USBD_GetString+0x52>
 800b70e:	e000      	b.n	800b712 <USBD_GetString+0x86>
    return;
 800b710:	bf00      	nop
  }
}
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b720:	2300      	movs	r3, #0
 800b722:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b728:	e005      	b.n	800b736 <USBD_GetLen+0x1e>
  {
    len++;
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	3301      	adds	r3, #1
 800b72e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	3301      	adds	r3, #1
 800b734:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1f5      	bne.n	800b72a <USBD_GetLen+0x12>
  }

  return len;
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2202      	movs	r2, #2
 800b75c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	2100      	movs	r1, #0
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f002 fed5 	bl	800e522 <USBD_LL_Transmit>

  return USBD_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b084      	sub	sp, #16
 800b786:	af00      	add	r7, sp, #0
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	60b9      	str	r1, [r7, #8]
 800b78c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	2100      	movs	r1, #0
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f002 fec4 	bl	800e522 <USBD_LL_Transmit>

  return USBD_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2203      	movs	r2, #3
 800b7b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f002 fec8 	bl	800e564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b084      	sub	sp, #16
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	60f8      	str	r0, [r7, #12]
 800b7e6:	60b9      	str	r1, [r7, #8]
 800b7e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f002 feb7 	bl	800e564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2204      	movs	r2, #4
 800b80c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b810:	2300      	movs	r3, #0
 800b812:	2200      	movs	r2, #0
 800b814:	2100      	movs	r1, #0
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f002 fe83 	bl	800e522 <USBD_LL_Transmit>

  return USBD_OK;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b082      	sub	sp, #8
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2205      	movs	r2, #5
 800b832:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b836:	2300      	movs	r3, #0
 800b838:	2200      	movs	r2, #0
 800b83a:	2100      	movs	r1, #0
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f002 fe91 	bl	800e564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	4603      	mov	r3, r0
 800b854:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b856:	79fb      	ldrb	r3, [r7, #7]
 800b858:	4a08      	ldr	r2, [pc, #32]	; (800b87c <disk_status+0x30>)
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	4413      	add	r3, r2
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	79fa      	ldrb	r2, [r7, #7]
 800b864:	4905      	ldr	r1, [pc, #20]	; (800b87c <disk_status+0x30>)
 800b866:	440a      	add	r2, r1
 800b868:	7a12      	ldrb	r2, [r2, #8]
 800b86a:	4610      	mov	r0, r2
 800b86c:	4798      	blx	r3
 800b86e:	4603      	mov	r3, r0
 800b870:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b872:	7bfb      	ldrb	r3, [r7, #15]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	2000318c 	.word	0x2000318c

0800b880 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	4603      	mov	r3, r0
 800b888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b88a:	2300      	movs	r3, #0
 800b88c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b88e:	79fb      	ldrb	r3, [r7, #7]
 800b890:	4a0d      	ldr	r2, [pc, #52]	; (800b8c8 <disk_initialize+0x48>)
 800b892:	5cd3      	ldrb	r3, [r2, r3]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d111      	bne.n	800b8bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	4a0b      	ldr	r2, [pc, #44]	; (800b8c8 <disk_initialize+0x48>)
 800b89c:	2101      	movs	r1, #1
 800b89e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b8a0:	79fb      	ldrb	r3, [r7, #7]
 800b8a2:	4a09      	ldr	r2, [pc, #36]	; (800b8c8 <disk_initialize+0x48>)
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	79fa      	ldrb	r2, [r7, #7]
 800b8ae:	4906      	ldr	r1, [pc, #24]	; (800b8c8 <disk_initialize+0x48>)
 800b8b0:	440a      	add	r2, r1
 800b8b2:	7a12      	ldrb	r2, [r2, #8]
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	4798      	blx	r3
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	2000318c 	.word	0x2000318c

0800b8cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b8cc:	b590      	push	{r4, r7, lr}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60b9      	str	r1, [r7, #8]
 800b8d4:	607a      	str	r2, [r7, #4]
 800b8d6:	603b      	str	r3, [r7, #0]
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
 800b8de:	4a0a      	ldr	r2, [pc, #40]	; (800b908 <disk_read+0x3c>)
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	689c      	ldr	r4, [r3, #8]
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ea:	4a07      	ldr	r2, [pc, #28]	; (800b908 <disk_read+0x3c>)
 800b8ec:	4413      	add	r3, r2
 800b8ee:	7a18      	ldrb	r0, [r3, #8]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	68b9      	ldr	r1, [r7, #8]
 800b8f6:	47a0      	blx	r4
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	371c      	adds	r7, #28
 800b902:	46bd      	mov	sp, r7
 800b904:	bd90      	pop	{r4, r7, pc}
 800b906:	bf00      	nop
 800b908:	2000318c 	.word	0x2000318c

0800b90c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b90c:	b590      	push	{r4, r7, lr}
 800b90e:	b087      	sub	sp, #28
 800b910:	af00      	add	r7, sp, #0
 800b912:	60b9      	str	r1, [r7, #8]
 800b914:	607a      	str	r2, [r7, #4]
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	4603      	mov	r3, r0
 800b91a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	4a0a      	ldr	r2, [pc, #40]	; (800b948 <disk_write+0x3c>)
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4413      	add	r3, r2
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	68dc      	ldr	r4, [r3, #12]
 800b928:	7bfb      	ldrb	r3, [r7, #15]
 800b92a:	4a07      	ldr	r2, [pc, #28]	; (800b948 <disk_write+0x3c>)
 800b92c:	4413      	add	r3, r2
 800b92e:	7a18      	ldrb	r0, [r3, #8]
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	47a0      	blx	r4
 800b938:	4603      	mov	r3, r0
 800b93a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	371c      	adds	r7, #28
 800b942:	46bd      	mov	sp, r7
 800b944:	bd90      	pop	{r4, r7, pc}
 800b946:	bf00      	nop
 800b948:	2000318c 	.word	0x2000318c

0800b94c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	603a      	str	r2, [r7, #0]
 800b956:	71fb      	strb	r3, [r7, #7]
 800b958:	460b      	mov	r3, r1
 800b95a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b95c:	79fb      	ldrb	r3, [r7, #7]
 800b95e:	4a09      	ldr	r2, [pc, #36]	; (800b984 <disk_ioctl+0x38>)
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	79fa      	ldrb	r2, [r7, #7]
 800b96a:	4906      	ldr	r1, [pc, #24]	; (800b984 <disk_ioctl+0x38>)
 800b96c:	440a      	add	r2, r1
 800b96e:	7a10      	ldrb	r0, [r2, #8]
 800b970:	79b9      	ldrb	r1, [r7, #6]
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	4798      	blx	r3
 800b976:	4603      	mov	r3, r0
 800b978:	73fb      	strb	r3, [r7, #15]
  return res;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	2000318c 	.word	0x2000318c

0800b988 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	3301      	adds	r3, #1
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b998:	89fb      	ldrh	r3, [r7, #14]
 800b99a:	021b      	lsls	r3, r3, #8
 800b99c:	b21a      	sxth	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	b21b      	sxth	r3, r3
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	b21b      	sxth	r3, r3
 800b9a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b9aa:	89fb      	ldrh	r3, [r7, #14]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3303      	adds	r3, #3
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	021b      	lsls	r3, r3, #8
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	3202      	adds	r2, #2
 800b9d0:	7812      	ldrb	r2, [r2, #0]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	021b      	lsls	r3, r3, #8
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	3201      	adds	r2, #1
 800b9de:	7812      	ldrb	r2, [r2, #0]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	021b      	lsls	r3, r3, #8
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	7812      	ldrb	r2, [r2, #0]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]
	return rv;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3714      	adds	r7, #20
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b083      	sub	sp, #12
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	460b      	mov	r3, r1
 800ba08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	1c5a      	adds	r2, r3, #1
 800ba0e:	607a      	str	r2, [r7, #4]
 800ba10:	887a      	ldrh	r2, [r7, #2]
 800ba12:	b2d2      	uxtb	r2, r2
 800ba14:	701a      	strb	r2, [r3, #0]
 800ba16:	887b      	ldrh	r3, [r7, #2]
 800ba18:	0a1b      	lsrs	r3, r3, #8
 800ba1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	607a      	str	r2, [r7, #4]
 800ba22:	887a      	ldrh	r2, [r7, #2]
 800ba24:	b2d2      	uxtb	r2, r2
 800ba26:	701a      	strb	r2, [r3, #0]
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	683a      	ldr	r2, [r7, #0]
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	701a      	strb	r2, [r3, #0]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	0a1b      	lsrs	r3, r3, #8
 800ba4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	607a      	str	r2, [r7, #4]
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	b2d2      	uxtb	r2, r2
 800ba5a:	701a      	strb	r2, [r3, #0]
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	0a1b      	lsrs	r3, r3, #8
 800ba60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	607a      	str	r2, [r7, #4]
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	b2d2      	uxtb	r2, r2
 800ba6c:	701a      	strb	r2, [r3, #0]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	0a1b      	lsrs	r3, r3, #8
 800ba72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	1c5a      	adds	r2, r3, #1
 800ba78:	607a      	str	r2, [r7, #4]
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	b2d2      	uxtb	r2, r2
 800ba7e:	701a      	strb	r2, [r3, #0]
}
 800ba80:	bf00      	nop
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00d      	beq.n	800bac2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	1c53      	adds	r3, r2, #1
 800baaa:	613b      	str	r3, [r7, #16]
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	1c59      	adds	r1, r3, #1
 800bab0:	6179      	str	r1, [r7, #20]
 800bab2:	7812      	ldrb	r2, [r2, #0]
 800bab4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3b01      	subs	r3, #1
 800baba:	607b      	str	r3, [r7, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1f1      	bne.n	800baa6 <mem_cpy+0x1a>
	}
}
 800bac2:	bf00      	nop
 800bac4:	371c      	adds	r7, #28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bace:	b480      	push	{r7}
 800bad0:	b087      	sub	sp, #28
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	617a      	str	r2, [r7, #20]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	b2d2      	uxtb	r2, r2
 800bae8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	3b01      	subs	r3, #1
 800baee:	607b      	str	r3, [r7, #4]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1f3      	bne.n	800bade <mem_set+0x10>
}
 800baf6:	bf00      	nop
 800baf8:	bf00      	nop
 800bafa:	371c      	adds	r7, #28
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bb04:	b480      	push	{r7}
 800bb06:	b089      	sub	sp, #36	; 0x24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	61fb      	str	r3, [r7, #28]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	61fa      	str	r2, [r7, #28]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	4619      	mov	r1, r3
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	61ba      	str	r2, [r7, #24]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	1acb      	subs	r3, r1, r3
 800bb30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	3b01      	subs	r3, #1
 800bb36:	607b      	str	r3, [r7, #4]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <mem_cmp+0x40>
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d0eb      	beq.n	800bb1c <mem_cmp+0x18>

	return r;
 800bb44:	697b      	ldr	r3, [r7, #20]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3724      	adds	r7, #36	; 0x24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bb52:	b480      	push	{r7}
 800bb54:	b083      	sub	sp, #12
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bb5c:	e002      	b.n	800bb64 <chk_chr+0x12>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3301      	adds	r3, #1
 800bb62:	607b      	str	r3, [r7, #4]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d005      	beq.n	800bb78 <chk_chr+0x26>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	461a      	mov	r2, r3
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d1f2      	bne.n	800bb5e <chk_chr+0xc>
	return *str;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb92:	2300      	movs	r3, #0
 800bb94:	60bb      	str	r3, [r7, #8]
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	e029      	b.n	800bbf0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bb9c:	4a27      	ldr	r2, [pc, #156]	; (800bc3c <chk_lock+0xb4>)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	011b      	lsls	r3, r3, #4
 800bba2:	4413      	add	r3, r2
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d01d      	beq.n	800bbe6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bbaa:	4a24      	ldr	r2, [pc, #144]	; (800bc3c <chk_lock+0xb4>)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	011b      	lsls	r3, r3, #4
 800bbb0:	4413      	add	r3, r2
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d116      	bne.n	800bbea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bbbc:	4a1f      	ldr	r2, [pc, #124]	; (800bc3c <chk_lock+0xb4>)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	011b      	lsls	r3, r3, #4
 800bbc2:	4413      	add	r3, r2
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d10c      	bne.n	800bbea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bbd0:	4a1a      	ldr	r2, [pc, #104]	; (800bc3c <chk_lock+0xb4>)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	011b      	lsls	r3, r3, #4
 800bbd6:	4413      	add	r3, r2
 800bbd8:	3308      	adds	r3, #8
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d102      	bne.n	800bbea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bbe4:	e007      	b.n	800bbf6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3301      	adds	r3, #1
 800bbee:	60fb      	str	r3, [r7, #12]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d9d2      	bls.n	800bb9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d109      	bne.n	800bc10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d102      	bne.n	800bc08 <chk_lock+0x80>
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d101      	bne.n	800bc0c <chk_lock+0x84>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e010      	b.n	800bc2e <chk_lock+0xa6>
 800bc0c:	2312      	movs	r3, #18
 800bc0e:	e00e      	b.n	800bc2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d108      	bne.n	800bc28 <chk_lock+0xa0>
 800bc16:	4a09      	ldr	r2, [pc, #36]	; (800bc3c <chk_lock+0xb4>)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	011b      	lsls	r3, r3, #4
 800bc1c:	4413      	add	r3, r2
 800bc1e:	330c      	adds	r3, #12
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc26:	d101      	bne.n	800bc2c <chk_lock+0xa4>
 800bc28:	2310      	movs	r3, #16
 800bc2a:	e000      	b.n	800bc2e <chk_lock+0xa6>
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3714      	adds	r7, #20
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	2000316c 	.word	0x2000316c

0800bc40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc46:	2300      	movs	r3, #0
 800bc48:	607b      	str	r3, [r7, #4]
 800bc4a:	e002      	b.n	800bc52 <enq_lock+0x12>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d806      	bhi.n	800bc66 <enq_lock+0x26>
 800bc58:	4a09      	ldr	r2, [pc, #36]	; (800bc80 <enq_lock+0x40>)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	011b      	lsls	r3, r3, #4
 800bc5e:	4413      	add	r3, r2
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1f2      	bne.n	800bc4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	bf14      	ite	ne
 800bc6c:	2301      	movne	r3, #1
 800bc6e:	2300      	moveq	r3, #0
 800bc70:	b2db      	uxtb	r3, r3
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	2000316c 	.word	0x2000316c

0800bc84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	e01f      	b.n	800bcd4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bc94:	4a41      	ldr	r2, [pc, #260]	; (800bd9c <inc_lock+0x118>)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	011b      	lsls	r3, r3, #4
 800bc9a:	4413      	add	r3, r2
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d113      	bne.n	800bcce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bca6:	4a3d      	ldr	r2, [pc, #244]	; (800bd9c <inc_lock+0x118>)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	011b      	lsls	r3, r3, #4
 800bcac:	4413      	add	r3, r2
 800bcae:	3304      	adds	r3, #4
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d109      	bne.n	800bcce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bcba:	4a38      	ldr	r2, [pc, #224]	; (800bd9c <inc_lock+0x118>)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	011b      	lsls	r3, r3, #4
 800bcc0:	4413      	add	r3, r2
 800bcc2:	3308      	adds	r3, #8
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d006      	beq.n	800bcdc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d9dc      	bls.n	800bc94 <inc_lock+0x10>
 800bcda:	e000      	b.n	800bcde <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bcdc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d132      	bne.n	800bd4a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e002      	b.n	800bcf0 <inc_lock+0x6c>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	3301      	adds	r3, #1
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d806      	bhi.n	800bd04 <inc_lock+0x80>
 800bcf6:	4a29      	ldr	r2, [pc, #164]	; (800bd9c <inc_lock+0x118>)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	4413      	add	r3, r2
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1f2      	bne.n	800bcea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d101      	bne.n	800bd0e <inc_lock+0x8a>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e040      	b.n	800bd90 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	4922      	ldr	r1, [pc, #136]	; (800bd9c <inc_lock+0x118>)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	011b      	lsls	r3, r3, #4
 800bd18:	440b      	add	r3, r1
 800bd1a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689a      	ldr	r2, [r3, #8]
 800bd20:	491e      	ldr	r1, [pc, #120]	; (800bd9c <inc_lock+0x118>)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	011b      	lsls	r3, r3, #4
 800bd26:	440b      	add	r3, r1
 800bd28:	3304      	adds	r3, #4
 800bd2a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	695a      	ldr	r2, [r3, #20]
 800bd30:	491a      	ldr	r1, [pc, #104]	; (800bd9c <inc_lock+0x118>)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	011b      	lsls	r3, r3, #4
 800bd36:	440b      	add	r3, r1
 800bd38:	3308      	adds	r3, #8
 800bd3a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bd3c:	4a17      	ldr	r2, [pc, #92]	; (800bd9c <inc_lock+0x118>)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	011b      	lsls	r3, r3, #4
 800bd42:	4413      	add	r3, r2
 800bd44:	330c      	adds	r3, #12
 800bd46:	2200      	movs	r2, #0
 800bd48:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d009      	beq.n	800bd64 <inc_lock+0xe0>
 800bd50:	4a12      	ldr	r2, [pc, #72]	; (800bd9c <inc_lock+0x118>)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	011b      	lsls	r3, r3, #4
 800bd56:	4413      	add	r3, r2
 800bd58:	330c      	adds	r3, #12
 800bd5a:	881b      	ldrh	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <inc_lock+0xe0>
 800bd60:	2300      	movs	r3, #0
 800bd62:	e015      	b.n	800bd90 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d108      	bne.n	800bd7c <inc_lock+0xf8>
 800bd6a:	4a0c      	ldr	r2, [pc, #48]	; (800bd9c <inc_lock+0x118>)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	011b      	lsls	r3, r3, #4
 800bd70:	4413      	add	r3, r2
 800bd72:	330c      	adds	r3, #12
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	3301      	adds	r3, #1
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	e001      	b.n	800bd80 <inc_lock+0xfc>
 800bd7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd80:	4906      	ldr	r1, [pc, #24]	; (800bd9c <inc_lock+0x118>)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	011b      	lsls	r3, r3, #4
 800bd86:	440b      	add	r3, r1
 800bd88:	330c      	adds	r3, #12
 800bd8a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	3301      	adds	r3, #1
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	2000316c 	.word	0x2000316c

0800bda0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	607b      	str	r3, [r7, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d825      	bhi.n	800be00 <dec_lock+0x60>
		n = Files[i].ctr;
 800bdb4:	4a17      	ldr	r2, [pc, #92]	; (800be14 <dec_lock+0x74>)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	4413      	add	r3, r2
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bdc2:	89fb      	ldrh	r3, [r7, #14]
 800bdc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc8:	d101      	bne.n	800bdce <dec_lock+0x2e>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bdce:	89fb      	ldrh	r3, [r7, #14]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <dec_lock+0x3a>
 800bdd4:	89fb      	ldrh	r3, [r7, #14]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bdda:	4a0e      	ldr	r2, [pc, #56]	; (800be14 <dec_lock+0x74>)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	011b      	lsls	r3, r3, #4
 800bde0:	4413      	add	r3, r2
 800bde2:	330c      	adds	r3, #12
 800bde4:	89fa      	ldrh	r2, [r7, #14]
 800bde6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bde8:	89fb      	ldrh	r3, [r7, #14]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d105      	bne.n	800bdfa <dec_lock+0x5a>
 800bdee:	4a09      	ldr	r2, [pc, #36]	; (800be14 <dec_lock+0x74>)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	011b      	lsls	r3, r3, #4
 800bdf4:	4413      	add	r3, r2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	737b      	strb	r3, [r7, #13]
 800bdfe:	e001      	b.n	800be04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800be00:	2302      	movs	r3, #2
 800be02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800be04:	7b7b      	ldrb	r3, [r7, #13]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	2000316c 	.word	0x2000316c

0800be18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800be20:	2300      	movs	r3, #0
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	e010      	b.n	800be48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800be26:	4a0d      	ldr	r2, [pc, #52]	; (800be5c <clear_lock+0x44>)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	4413      	add	r3, r2
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	429a      	cmp	r2, r3
 800be34:	d105      	bne.n	800be42 <clear_lock+0x2a>
 800be36:	4a09      	ldr	r2, [pc, #36]	; (800be5c <clear_lock+0x44>)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	4413      	add	r3, r2
 800be3e:	2200      	movs	r2, #0
 800be40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3301      	adds	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d9eb      	bls.n	800be26 <clear_lock+0xe>
	}
}
 800be4e:	bf00      	nop
 800be50:	bf00      	nop
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	2000316c 	.word	0x2000316c

0800be60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800be68:	2300      	movs	r3, #0
 800be6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	78db      	ldrb	r3, [r3, #3]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d034      	beq.n	800bede <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	7858      	ldrb	r0, [r3, #1]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be84:	2301      	movs	r3, #1
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	f7ff fd40 	bl	800b90c <disk_write>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d002      	beq.n	800be98 <sync_window+0x38>
			res = FR_DISK_ERR;
 800be92:	2301      	movs	r3, #1
 800be94:	73fb      	strb	r3, [r7, #15]
 800be96:	e022      	b.n	800bede <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	1ad2      	subs	r2, r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d217      	bcs.n	800bede <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	789b      	ldrb	r3, [r3, #2]
 800beb2:	613b      	str	r3, [r7, #16]
 800beb4:	e010      	b.n	800bed8 <sync_window+0x78>
					wsect += fs->fsize;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	699b      	ldr	r3, [r3, #24]
 800beba:	697a      	ldr	r2, [r7, #20]
 800bebc:	4413      	add	r3, r2
 800bebe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	7858      	ldrb	r0, [r3, #1]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800beca:	2301      	movs	r3, #1
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	f7ff fd1d 	bl	800b90c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	3b01      	subs	r3, #1
 800bed6:	613b      	str	r3, [r7, #16]
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d8eb      	bhi.n	800beb6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bede:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d01b      	beq.n	800bf38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7ff ffad 	bl	800be60 <sync_window>
 800bf06:	4603      	mov	r3, r0
 800bf08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d113      	bne.n	800bf38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7858      	ldrb	r0, [r3, #1]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	f7ff fcd5 	bl	800b8cc <disk_read>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d004      	beq.n	800bf32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bf28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	683a      	ldr	r2, [r7, #0]
 800bf36:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff ff87 	bl	800be60 <sync_window>
 800bf52:	4603      	mov	r3, r0
 800bf54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d158      	bne.n	800c00e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	2b03      	cmp	r3, #3
 800bf62:	d148      	bne.n	800bff6 <sync_fs+0xb2>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	791b      	ldrb	r3, [r3, #4]
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d144      	bne.n	800bff6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3330      	adds	r3, #48	; 0x30
 800bf70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf74:	2100      	movs	r1, #0
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7ff fda9 	bl	800bace <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3330      	adds	r3, #48	; 0x30
 800bf80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf84:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7ff fd38 	bl	800b9fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	3330      	adds	r3, #48	; 0x30
 800bf92:	4921      	ldr	r1, [pc, #132]	; (800c018 <sync_fs+0xd4>)
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7ff fd4d 	bl	800ba34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	3330      	adds	r3, #48	; 0x30
 800bf9e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bfa2:	491e      	ldr	r1, [pc, #120]	; (800c01c <sync_fs+0xd8>)
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7ff fd45 	bl	800ba34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	3330      	adds	r3, #48	; 0x30
 800bfae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	4610      	mov	r0, r2
 800bfba:	f7ff fd3b 	bl	800ba34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3330      	adds	r3, #48	; 0x30
 800bfc2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4610      	mov	r0, r2
 800bfce:	f7ff fd31 	bl	800ba34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	69db      	ldr	r3, [r3, #28]
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	7858      	ldrb	r0, [r3, #1]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfea:	2301      	movs	r3, #1
 800bfec:	f7ff fc8e 	bl	800b90c <disk_write>
			fs->fsi_flag = 0;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	785b      	ldrb	r3, [r3, #1]
 800bffa:	2200      	movs	r2, #0
 800bffc:	2100      	movs	r1, #0
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff fca4 	bl	800b94c <disk_ioctl>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <sync_fs+0xca>
 800c00a:	2301      	movs	r3, #1
 800c00c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	41615252 	.word	0x41615252
 800c01c:	61417272 	.word	0x61417272

0800c020 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	3b02      	subs	r3, #2
 800c02e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	3b02      	subs	r3, #2
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d301      	bcc.n	800c040 <clust2sect+0x20>
 800c03c:	2300      	movs	r3, #0
 800c03e:	e008      	b.n	800c052 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	895b      	ldrh	r3, [r3, #10]
 800c044:	461a      	mov	r2, r3
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	fb03 f202 	mul.w	r2, r3, r2
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c050:	4413      	add	r3, r2
}
 800c052:	4618      	mov	r0, r3
 800c054:	370c      	adds	r7, #12
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b086      	sub	sp, #24
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d904      	bls.n	800c07e <get_fat+0x20>
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	695b      	ldr	r3, [r3, #20]
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d302      	bcc.n	800c084 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c07e:	2301      	movs	r3, #1
 800c080:	617b      	str	r3, [r7, #20]
 800c082:	e08f      	b.n	800c1a4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c088:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d062      	beq.n	800c158 <get_fat+0xfa>
 800c092:	2b03      	cmp	r3, #3
 800c094:	dc7c      	bgt.n	800c190 <get_fat+0x132>
 800c096:	2b01      	cmp	r3, #1
 800c098:	d002      	beq.n	800c0a0 <get_fat+0x42>
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d042      	beq.n	800c124 <get_fat+0xc6>
 800c09e:	e077      	b.n	800c190 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	085b      	lsrs	r3, r3, #1
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	6a1a      	ldr	r2, [r3, #32]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	0a5b      	lsrs	r3, r3, #9
 800c0b6:	4413      	add	r3, r2
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6938      	ldr	r0, [r7, #16]
 800c0bc:	f7ff ff14 	bl	800bee8 <move_window>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d167      	bne.n	800c196 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	60fa      	str	r2, [r7, #12]
 800c0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d0:	693a      	ldr	r2, [r7, #16]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	6a1a      	ldr	r2, [r3, #32]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	0a5b      	lsrs	r3, r3, #9
 800c0e2:	4413      	add	r3, r2
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6938      	ldr	r0, [r7, #16]
 800c0e8:	f7ff fefe 	bl	800bee8 <move_window>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d153      	bne.n	800c19a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c100:	021b      	lsls	r3, r3, #8
 800c102:	461a      	mov	r2, r3
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	4313      	orrs	r3, r2
 800c108:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	2b00      	cmp	r3, #0
 800c112:	d002      	beq.n	800c11a <get_fat+0xbc>
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	091b      	lsrs	r3, r3, #4
 800c118:	e002      	b.n	800c120 <get_fat+0xc2>
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c120:	617b      	str	r3, [r7, #20]
			break;
 800c122:	e03f      	b.n	800c1a4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	6a1a      	ldr	r2, [r3, #32]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	0a1b      	lsrs	r3, r3, #8
 800c12c:	4413      	add	r3, r2
 800c12e:	4619      	mov	r1, r3
 800c130:	6938      	ldr	r0, [r7, #16]
 800c132:	f7ff fed9 	bl	800bee8 <move_window>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d130      	bne.n	800c19e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c14a:	4413      	add	r3, r2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7ff fc1b 	bl	800b988 <ld_word>
 800c152:	4603      	mov	r3, r0
 800c154:	617b      	str	r3, [r7, #20]
			break;
 800c156:	e025      	b.n	800c1a4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	6a1a      	ldr	r2, [r3, #32]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	09db      	lsrs	r3, r3, #7
 800c160:	4413      	add	r3, r2
 800c162:	4619      	mov	r1, r3
 800c164:	6938      	ldr	r0, [r7, #16]
 800c166:	f7ff febf 	bl	800bee8 <move_window>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d118      	bne.n	800c1a2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c17e:	4413      	add	r3, r2
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff fc19 	bl	800b9b8 <ld_dword>
 800c186:	4603      	mov	r3, r0
 800c188:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c18c:	617b      	str	r3, [r7, #20]
			break;
 800c18e:	e009      	b.n	800c1a4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c190:	2301      	movs	r3, #1
 800c192:	617b      	str	r3, [r7, #20]
 800c194:	e006      	b.n	800c1a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c196:	bf00      	nop
 800c198:	e004      	b.n	800c1a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c19a:	bf00      	nop
 800c19c:	e002      	b.n	800c1a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c19e:	bf00      	nop
 800c1a0:	e000      	b.n	800c1a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1a2:	bf00      	nop
		}
	}

	return val;
 800c1a4:	697b      	ldr	r3, [r7, #20]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c1ae:	b590      	push	{r4, r7, lr}
 800c1b0:	b089      	sub	sp, #36	; 0x24
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	60f8      	str	r0, [r7, #12]
 800c1b6:	60b9      	str	r1, [r7, #8]
 800c1b8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	f240 80d9 	bls.w	800c378 <put_fat+0x1ca>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	f080 80d3 	bcs.w	800c378 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	f000 8096 	beq.w	800c308 <put_fat+0x15a>
 800c1dc:	2b03      	cmp	r3, #3
 800c1de:	f300 80cb 	bgt.w	800c378 <put_fat+0x1ca>
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d002      	beq.n	800c1ec <put_fat+0x3e>
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d06e      	beq.n	800c2c8 <put_fat+0x11a>
 800c1ea:	e0c5      	b.n	800c378 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	61bb      	str	r3, [r7, #24]
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	085b      	lsrs	r3, r3, #1
 800c1f4:	69ba      	ldr	r2, [r7, #24]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6a1a      	ldr	r2, [r3, #32]
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	0a5b      	lsrs	r3, r3, #9
 800c202:	4413      	add	r3, r2
 800c204:	4619      	mov	r1, r3
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f7ff fe6e 	bl	800bee8 <move_window>
 800c20c:	4603      	mov	r3, r0
 800c20e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c210:	7ffb      	ldrb	r3, [r7, #31]
 800c212:	2b00      	cmp	r3, #0
 800c214:	f040 80a9 	bne.w	800c36a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	1c59      	adds	r1, r3, #1
 800c222:	61b9      	str	r1, [r7, #24]
 800c224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c228:	4413      	add	r3, r2
 800c22a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00d      	beq.n	800c252 <put_fat+0xa4>
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	b25b      	sxtb	r3, r3
 800c23c:	f003 030f 	and.w	r3, r3, #15
 800c240:	b25a      	sxtb	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	b2db      	uxtb	r3, r3
 800c246:	011b      	lsls	r3, r3, #4
 800c248:	b25b      	sxtb	r3, r3
 800c24a:	4313      	orrs	r3, r2
 800c24c:	b25b      	sxtb	r3, r3
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	e001      	b.n	800c256 <put_fat+0xa8>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	b2db      	uxtb	r3, r3
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2201      	movs	r2, #1
 800c25e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6a1a      	ldr	r2, [r3, #32]
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	0a5b      	lsrs	r3, r3, #9
 800c268:	4413      	add	r3, r2
 800c26a:	4619      	mov	r1, r3
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7ff fe3b 	bl	800bee8 <move_window>
 800c272:	4603      	mov	r3, r0
 800c274:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c276:	7ffb      	ldrb	r3, [r7, #31]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d178      	bne.n	800c36e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c288:	4413      	add	r3, r2
 800c28a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	f003 0301 	and.w	r3, r3, #1
 800c292:	2b00      	cmp	r3, #0
 800c294:	d003      	beq.n	800c29e <put_fat+0xf0>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	091b      	lsrs	r3, r3, #4
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	e00e      	b.n	800c2bc <put_fat+0x10e>
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	b25b      	sxtb	r3, r3
 800c2a4:	f023 030f 	bic.w	r3, r3, #15
 800c2a8:	b25a      	sxtb	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	0a1b      	lsrs	r3, r3, #8
 800c2ae:	b25b      	sxtb	r3, r3
 800c2b0:	f003 030f 	and.w	r3, r3, #15
 800c2b4:	b25b      	sxtb	r3, r3
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	b25b      	sxtb	r3, r3
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	70da      	strb	r2, [r3, #3]
			break;
 800c2c6:	e057      	b.n	800c378 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6a1a      	ldr	r2, [r3, #32]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	0a1b      	lsrs	r3, r3, #8
 800c2d0:	4413      	add	r3, r2
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f7ff fe07 	bl	800bee8 <move_window>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2de:	7ffb      	ldrb	r3, [r7, #31]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d146      	bne.n	800c372 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c2f2:	4413      	add	r3, r2
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	b292      	uxth	r2, r2
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7ff fb7f 	bl	800b9fe <st_word>
			fs->wflag = 1;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2201      	movs	r2, #1
 800c304:	70da      	strb	r2, [r3, #3]
			break;
 800c306:	e037      	b.n	800c378 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6a1a      	ldr	r2, [r3, #32]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	09db      	lsrs	r3, r3, #7
 800c310:	4413      	add	r3, r2
 800c312:	4619      	mov	r1, r3
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f7ff fde7 	bl	800bee8 <move_window>
 800c31a:	4603      	mov	r3, r0
 800c31c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c31e:	7ffb      	ldrb	r3, [r7, #31]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d128      	bne.n	800c376 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c338:	4413      	add	r3, r2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff fb3c 	bl	800b9b8 <ld_dword>
 800c340:	4603      	mov	r3, r0
 800c342:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c346:	4323      	orrs	r3, r4
 800c348:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c358:	4413      	add	r3, r2
 800c35a:	6879      	ldr	r1, [r7, #4]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7ff fb69 	bl	800ba34 <st_dword>
			fs->wflag = 1;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2201      	movs	r2, #1
 800c366:	70da      	strb	r2, [r3, #3]
			break;
 800c368:	e006      	b.n	800c378 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c36a:	bf00      	nop
 800c36c:	e004      	b.n	800c378 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c36e:	bf00      	nop
 800c370:	e002      	b.n	800c378 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c372:	bf00      	nop
 800c374:	e000      	b.n	800c378 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c376:	bf00      	nop
		}
	}
	return res;
 800c378:	7ffb      	ldrb	r3, [r7, #31]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3724      	adds	r7, #36	; 0x24
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd90      	pop	{r4, r7, pc}

0800c382 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b088      	sub	sp, #32
 800c386:	af00      	add	r7, sp, #0
 800c388:	60f8      	str	r0, [r7, #12]
 800c38a:	60b9      	str	r1, [r7, #8]
 800c38c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d904      	bls.n	800c3a8 <remove_chain+0x26>
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d301      	bcc.n	800c3ac <remove_chain+0x2a>
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	e04b      	b.n	800c444 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00c      	beq.n	800c3cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c3b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	69b8      	ldr	r0, [r7, #24]
 800c3ba:	f7ff fef8 	bl	800c1ae <put_fat>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c3c2:	7ffb      	ldrb	r3, [r7, #31]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d001      	beq.n	800c3cc <remove_chain+0x4a>
 800c3c8:	7ffb      	ldrb	r3, [r7, #31]
 800c3ca:	e03b      	b.n	800c444 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c3cc:	68b9      	ldr	r1, [r7, #8]
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f7ff fe45 	bl	800c05e <get_fat>
 800c3d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d031      	beq.n	800c440 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d101      	bne.n	800c3e6 <remove_chain+0x64>
 800c3e2:	2302      	movs	r3, #2
 800c3e4:	e02e      	b.n	800c444 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ec:	d101      	bne.n	800c3f2 <remove_chain+0x70>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e028      	b.n	800c444 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	69b8      	ldr	r0, [r7, #24]
 800c3f8:	f7ff fed9 	bl	800c1ae <put_fat>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c400:	7ffb      	ldrb	r3, [r7, #31]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <remove_chain+0x88>
 800c406:	7ffb      	ldrb	r3, [r7, #31]
 800c408:	e01c      	b.n	800c444 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	691a      	ldr	r2, [r3, #16]
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	3b02      	subs	r3, #2
 800c414:	429a      	cmp	r2, r3
 800c416:	d20b      	bcs.n	800c430 <remove_chain+0xae>
			fs->free_clst++;
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	791b      	ldrb	r3, [r3, #4]
 800c426:	f043 0301 	orr.w	r3, r3, #1
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	695b      	ldr	r3, [r3, #20]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d3c6      	bcc.n	800c3cc <remove_chain+0x4a>
 800c43e:	e000      	b.n	800c442 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c440:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3720      	adds	r7, #32
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10d      	bne.n	800c47e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d004      	beq.n	800c478 <create_chain+0x2c>
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	69ba      	ldr	r2, [r7, #24]
 800c474:	429a      	cmp	r2, r3
 800c476:	d31b      	bcc.n	800c4b0 <create_chain+0x64>
 800c478:	2301      	movs	r3, #1
 800c47a:	61bb      	str	r3, [r7, #24]
 800c47c:	e018      	b.n	800c4b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff fdec 	bl	800c05e <get_fat>
 800c486:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d801      	bhi.n	800c492 <create_chain+0x46>
 800c48e:	2301      	movs	r3, #1
 800c490:	e070      	b.n	800c574 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c498:	d101      	bne.n	800c49e <create_chain+0x52>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	e06a      	b.n	800c574 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d201      	bcs.n	800c4ac <create_chain+0x60>
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	e063      	b.n	800c574 <create_chain+0x128>
		scl = clst;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	69fa      	ldr	r2, [r7, #28]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d307      	bcc.n	800c4d4 <create_chain+0x88>
				ncl = 2;
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c4c8:	69fa      	ldr	r2, [r7, #28]
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d901      	bls.n	800c4d4 <create_chain+0x88>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	e04f      	b.n	800c574 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c4d4:	69f9      	ldr	r1, [r7, #28]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7ff fdc1 	bl	800c05e <get_fat>
 800c4dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00e      	beq.n	800c502 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d003      	beq.n	800c4f2 <create_chain+0xa6>
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4f0:	d101      	bne.n	800c4f6 <create_chain+0xaa>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	e03e      	b.n	800c574 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c4f6:	69fa      	ldr	r2, [r7, #28]
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d1da      	bne.n	800c4b4 <create_chain+0x68>
 800c4fe:	2300      	movs	r3, #0
 800c500:	e038      	b.n	800c574 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c502:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c508:	69f9      	ldr	r1, [r7, #28]
 800c50a:	6938      	ldr	r0, [r7, #16]
 800c50c:	f7ff fe4f 	bl	800c1ae <put_fat>
 800c510:	4603      	mov	r3, r0
 800c512:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d109      	bne.n	800c52e <create_chain+0xe2>
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d006      	beq.n	800c52e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c520:	69fa      	ldr	r2, [r7, #28]
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6938      	ldr	r0, [r7, #16]
 800c526:	f7ff fe42 	bl	800c1ae <put_fat>
 800c52a:	4603      	mov	r3, r0
 800c52c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d116      	bne.n	800c562 <create_chain+0x116>
		fs->last_clst = ncl;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	69fa      	ldr	r2, [r7, #28]
 800c538:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	691a      	ldr	r2, [r3, #16]
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	3b02      	subs	r3, #2
 800c544:	429a      	cmp	r2, r3
 800c546:	d804      	bhi.n	800c552 <create_chain+0x106>
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	1e5a      	subs	r2, r3, #1
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	791b      	ldrb	r3, [r3, #4]
 800c556:	f043 0301 	orr.w	r3, r3, #1
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	711a      	strb	r2, [r3, #4]
 800c560:	e007      	b.n	800c572 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d102      	bne.n	800c56e <create_chain+0x122>
 800c568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c56c:	e000      	b.n	800c570 <create_chain+0x124>
 800c56e:	2301      	movs	r3, #1
 800c570:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c572:	69fb      	ldr	r3, [r7, #28]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3720      	adds	r7, #32
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b087      	sub	sp, #28
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c590:	3304      	adds	r3, #4
 800c592:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	0a5b      	lsrs	r3, r3, #9
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	8952      	ldrh	r2, [r2, #10]
 800c59c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	1d1a      	adds	r2, r3, #4
 800c5a6:	613a      	str	r2, [r7, #16]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <clmt_clust+0x3a>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	e010      	b.n	800c5d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d307      	bcc.n	800c5ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	617b      	str	r3, [r7, #20]
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c5cc:	e7e9      	b.n	800c5a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c5ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	4413      	add	r3, r2
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	371c      	adds	r7, #28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5fa:	d204      	bcs.n	800c606 <dir_sdi+0x22>
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	f003 031f 	and.w	r3, r3, #31
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c606:	2302      	movs	r3, #2
 800c608:	e063      	b.n	800c6d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d106      	bne.n	800c62a <dir_sdi+0x46>
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	2b02      	cmp	r3, #2
 800c622:	d902      	bls.n	800c62a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c628:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10c      	bne.n	800c64a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	095b      	lsrs	r3, r3, #5
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	8912      	ldrh	r2, [r2, #8]
 800c638:	4293      	cmp	r3, r2
 800c63a:	d301      	bcc.n	800c640 <dir_sdi+0x5c>
 800c63c:	2302      	movs	r3, #2
 800c63e:	e048      	b.n	800c6d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	61da      	str	r2, [r3, #28]
 800c648:	e029      	b.n	800c69e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	895b      	ldrh	r3, [r3, #10]
 800c64e:	025b      	lsls	r3, r3, #9
 800c650:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c652:	e019      	b.n	800c688 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6979      	ldr	r1, [r7, #20]
 800c658:	4618      	mov	r0, r3
 800c65a:	f7ff fd00 	bl	800c05e <get_fat>
 800c65e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c666:	d101      	bne.n	800c66c <dir_sdi+0x88>
 800c668:	2301      	movs	r3, #1
 800c66a:	e032      	b.n	800c6d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d904      	bls.n	800c67c <dir_sdi+0x98>
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	695b      	ldr	r3, [r3, #20]
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d301      	bcc.n	800c680 <dir_sdi+0x9c>
 800c67c:	2302      	movs	r3, #2
 800c67e:	e028      	b.n	800c6d2 <dir_sdi+0xee>
			ofs -= csz;
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	1ad3      	subs	r3, r2, r3
 800c686:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c688:	683a      	ldr	r2, [r7, #0]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d2e1      	bcs.n	800c654 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c690:	6979      	ldr	r1, [r7, #20]
 800c692:	6938      	ldr	r0, [r7, #16]
 800c694:	f7ff fcc4 	bl	800c020 <clust2sect>
 800c698:	4602      	mov	r2, r0
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	69db      	ldr	r3, [r3, #28]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d101      	bne.n	800c6b0 <dir_sdi+0xcc>
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	e010      	b.n	800c6d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	69da      	ldr	r2, [r3, #28]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	0a5b      	lsrs	r3, r3, #9
 800c6b8:	441a      	add	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ca:	441a      	add	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b086      	sub	sp, #24
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	3320      	adds	r3, #32
 800c6f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	69db      	ldr	r3, [r3, #28]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d003      	beq.n	800c702 <dir_next+0x28>
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c700:	d301      	bcc.n	800c706 <dir_next+0x2c>
 800c702:	2304      	movs	r3, #4
 800c704:	e0aa      	b.n	800c85c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f040 8098 	bne.w	800c842 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	1c5a      	adds	r2, r3, #1
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10b      	bne.n	800c73c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	095b      	lsrs	r3, r3, #5
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	8912      	ldrh	r2, [r2, #8]
 800c72c:	4293      	cmp	r3, r2
 800c72e:	f0c0 8088 	bcc.w	800c842 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	61da      	str	r2, [r3, #28]
 800c738:	2304      	movs	r3, #4
 800c73a:	e08f      	b.n	800c85c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	0a5b      	lsrs	r3, r3, #9
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	8952      	ldrh	r2, [r2, #10]
 800c744:	3a01      	subs	r2, #1
 800c746:	4013      	ands	r3, r2
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d17a      	bne.n	800c842 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	4619      	mov	r1, r3
 800c754:	4610      	mov	r0, r2
 800c756:	f7ff fc82 	bl	800c05e <get_fat>
 800c75a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d801      	bhi.n	800c766 <dir_next+0x8c>
 800c762:	2302      	movs	r3, #2
 800c764:	e07a      	b.n	800c85c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c76c:	d101      	bne.n	800c772 <dir_next+0x98>
 800c76e:	2301      	movs	r3, #1
 800c770:	e074      	b.n	800c85c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d358      	bcc.n	800c82e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d104      	bne.n	800c78c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	61da      	str	r2, [r3, #28]
 800c788:	2304      	movs	r3, #4
 800c78a:	e067      	b.n	800c85c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	4619      	mov	r1, r3
 800c794:	4610      	mov	r0, r2
 800c796:	f7ff fe59 	bl	800c44c <create_chain>
 800c79a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <dir_next+0xcc>
 800c7a2:	2307      	movs	r3, #7
 800c7a4:	e05a      	b.n	800c85c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d101      	bne.n	800c7b0 <dir_next+0xd6>
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	e055      	b.n	800c85c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7b6:	d101      	bne.n	800c7bc <dir_next+0xe2>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e04f      	b.n	800c85c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f7ff fb4f 	bl	800be60 <sync_window>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <dir_next+0xf2>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e047      	b.n	800c85c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	3330      	adds	r3, #48	; 0x30
 800c7d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7ff f979 	bl	800bace <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c7dc:	2300      	movs	r3, #0
 800c7de:	613b      	str	r3, [r7, #16]
 800c7e0:	6979      	ldr	r1, [r7, #20]
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7ff fc1c 	bl	800c020 <clust2sect>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	62da      	str	r2, [r3, #44]	; 0x2c
 800c7ee:	e012      	b.n	800c816 <dir_next+0x13c>
						fs->wflag = 1;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7ff fb32 	bl	800be60 <sync_window>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <dir_next+0x12c>
 800c802:	2301      	movs	r3, #1
 800c804:	e02a      	b.n	800c85c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	3301      	adds	r3, #1
 800c80a:	613b      	str	r3, [r7, #16]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	62da      	str	r2, [r3, #44]	; 0x2c
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	895b      	ldrh	r3, [r3, #10]
 800c81a:	461a      	mov	r2, r3
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	4293      	cmp	r3, r2
 800c820:	d3e6      	bcc.n	800c7f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	1ad2      	subs	r2, r2, r3
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c834:	6979      	ldr	r1, [r7, #20]
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7ff fbf2 	bl	800c020 <clust2sect>
 800c83c:	4602      	mov	r2, r0
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c854:	441a      	add	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3718      	adds	r7, #24
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c874:	2100      	movs	r1, #0
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7ff feb4 	bl	800c5e4 <dir_sdi>
 800c87c:	4603      	mov	r3, r0
 800c87e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c880:	7dfb      	ldrb	r3, [r7, #23]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d12b      	bne.n	800c8de <dir_alloc+0x7a>
		n = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	4619      	mov	r1, r3
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	f7ff fb29 	bl	800bee8 <move_window>
 800c896:	4603      	mov	r3, r0
 800c898:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d11d      	bne.n	800c8dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a1b      	ldr	r3, [r3, #32]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	2be5      	cmp	r3, #229	; 0xe5
 800c8a8:	d004      	beq.n	800c8b4 <dir_alloc+0x50>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d107      	bne.n	800c8c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	613b      	str	r3, [r7, #16]
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d102      	bne.n	800c8c8 <dir_alloc+0x64>
 800c8c2:	e00c      	b.n	800c8de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c8c8:	2101      	movs	r1, #1
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff ff05 	bl	800c6da <dir_next>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d0d7      	beq.n	800c88a <dir_alloc+0x26>
 800c8da:	e000      	b.n	800c8de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c8dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
 800c8e0:	2b04      	cmp	r3, #4
 800c8e2:	d101      	bne.n	800c8e8 <dir_alloc+0x84>
 800c8e4:	2307      	movs	r3, #7
 800c8e6:	75fb      	strb	r3, [r7, #23]
	return res;
 800c8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3718      	adds	r7, #24
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	331a      	adds	r3, #26
 800c900:	4618      	mov	r0, r3
 800c902:	f7ff f841 	bl	800b988 <ld_word>
 800c906:	4603      	mov	r3, r0
 800c908:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d109      	bne.n	800c926 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	3314      	adds	r3, #20
 800c916:	4618      	mov	r0, r3
 800c918:	f7ff f836 	bl	800b988 <ld_word>
 800c91c:	4603      	mov	r3, r0
 800c91e:	041b      	lsls	r3, r3, #16
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4313      	orrs	r3, r2
 800c924:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c926:	68fb      	ldr	r3, [r7, #12]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	331a      	adds	r3, #26
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	b292      	uxth	r2, r2
 800c944:	4611      	mov	r1, r2
 800c946:	4618      	mov	r0, r3
 800c948:	f7ff f859 	bl	800b9fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	2b03      	cmp	r3, #3
 800c952:	d109      	bne.n	800c968 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	f103 0214 	add.w	r2, r3, #20
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	0c1b      	lsrs	r3, r3, #16
 800c95e:	b29b      	uxth	r3, r3
 800c960:	4619      	mov	r1, r3
 800c962:	4610      	mov	r0, r2
 800c964:	f7ff f84b 	bl	800b9fe <st_word>
	}
}
 800c968:	bf00      	nop
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c97e:	2100      	movs	r1, #0
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff fe2f 	bl	800c5e4 <dir_sdi>
 800c986:	4603      	mov	r3, r0
 800c988:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <dir_find+0x24>
 800c990:	7dfb      	ldrb	r3, [r7, #23]
 800c992:	e03e      	b.n	800ca12 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	69db      	ldr	r3, [r3, #28]
 800c998:	4619      	mov	r1, r3
 800c99a:	6938      	ldr	r0, [r7, #16]
 800c99c:	f7ff faa4 	bl	800bee8 <move_window>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d12f      	bne.n	800ca0a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d102      	bne.n	800c9be <dir_find+0x4e>
 800c9b8:	2304      	movs	r3, #4
 800c9ba:	75fb      	strb	r3, [r7, #23]
 800c9bc:	e028      	b.n	800ca10 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a1b      	ldr	r3, [r3, #32]
 800c9c2:	330b      	adds	r3, #11
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9ca:	b2da      	uxtb	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	330b      	adds	r3, #11
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	f003 0308 	and.w	r3, r3, #8
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10a      	bne.n	800c9f6 <dir_find+0x86>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6a18      	ldr	r0, [r3, #32]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	3324      	adds	r3, #36	; 0x24
 800c9e8:	220b      	movs	r2, #11
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	f7ff f88a 	bl	800bb04 <mem_cmp>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00b      	beq.n	800ca0e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7ff fe6e 	bl	800c6da <dir_next>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d0c5      	beq.n	800c994 <dir_find+0x24>
 800ca08:	e002      	b.n	800ca10 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ca0a:	bf00      	nop
 800ca0c:	e000      	b.n	800ca10 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca0e:	bf00      	nop

	return res;
 800ca10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b084      	sub	sp, #16
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ca28:	2101      	movs	r1, #1
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7ff ff1a 	bl	800c864 <dir_alloc>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d11c      	bne.n	800ca74 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	4619      	mov	r1, r3
 800ca40:	68b8      	ldr	r0, [r7, #8]
 800ca42:	f7ff fa51 	bl	800bee8 <move_window>
 800ca46:	4603      	mov	r3, r0
 800ca48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d111      	bne.n	800ca74 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	2220      	movs	r2, #32
 800ca56:	2100      	movs	r1, #0
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7ff f838 	bl	800bace <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a18      	ldr	r0, [r3, #32]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	3324      	adds	r3, #36	; 0x24
 800ca66:	220b      	movs	r2, #11
 800ca68:	4619      	mov	r1, r3
 800ca6a:	f7ff f80f 	bl	800ba8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	2201      	movs	r2, #1
 800ca72:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	3324      	adds	r3, #36	; 0x24
 800ca94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ca96:	220b      	movs	r2, #11
 800ca98:	2120      	movs	r1, #32
 800ca9a:	68b8      	ldr	r0, [r7, #8]
 800ca9c:	f7ff f817 	bl	800bace <mem_set>
	si = i = 0; ni = 8;
 800caa0:	2300      	movs	r3, #0
 800caa2:	613b      	str	r3, [r7, #16]
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	61fb      	str	r3, [r7, #28]
 800caa8:	2308      	movs	r3, #8
 800caaa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	61fa      	str	r2, [r7, #28]
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	4413      	add	r3, r2
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800caba:	7efb      	ldrb	r3, [r7, #27]
 800cabc:	2b20      	cmp	r3, #32
 800cabe:	d94e      	bls.n	800cb5e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cac0:	7efb      	ldrb	r3, [r7, #27]
 800cac2:	2b2f      	cmp	r3, #47	; 0x2f
 800cac4:	d006      	beq.n	800cad4 <create_name+0x54>
 800cac6:	7efb      	ldrb	r3, [r7, #27]
 800cac8:	2b5c      	cmp	r3, #92	; 0x5c
 800caca:	d110      	bne.n	800caee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cacc:	e002      	b.n	800cad4 <create_name+0x54>
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	3301      	adds	r3, #1
 800cad2:	61fb      	str	r3, [r7, #28]
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	4413      	add	r3, r2
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2b2f      	cmp	r3, #47	; 0x2f
 800cade:	d0f6      	beq.n	800cace <create_name+0x4e>
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	4413      	add	r3, r2
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	2b5c      	cmp	r3, #92	; 0x5c
 800caea:	d0f0      	beq.n	800cace <create_name+0x4e>
			break;
 800caec:	e038      	b.n	800cb60 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800caee:	7efb      	ldrb	r3, [r7, #27]
 800caf0:	2b2e      	cmp	r3, #46	; 0x2e
 800caf2:	d003      	beq.n	800cafc <create_name+0x7c>
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d30c      	bcc.n	800cb16 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2b0b      	cmp	r3, #11
 800cb00:	d002      	beq.n	800cb08 <create_name+0x88>
 800cb02:	7efb      	ldrb	r3, [r7, #27]
 800cb04:	2b2e      	cmp	r3, #46	; 0x2e
 800cb06:	d001      	beq.n	800cb0c <create_name+0x8c>
 800cb08:	2306      	movs	r3, #6
 800cb0a:	e044      	b.n	800cb96 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cb0c:	2308      	movs	r3, #8
 800cb0e:	613b      	str	r3, [r7, #16]
 800cb10:	230b      	movs	r3, #11
 800cb12:	617b      	str	r3, [r7, #20]
			continue;
 800cb14:	e022      	b.n	800cb5c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cb16:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	da04      	bge.n	800cb28 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cb1e:	7efb      	ldrb	r3, [r7, #27]
 800cb20:	3b80      	subs	r3, #128	; 0x80
 800cb22:	4a1f      	ldr	r2, [pc, #124]	; (800cba0 <create_name+0x120>)
 800cb24:	5cd3      	ldrb	r3, [r2, r3]
 800cb26:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cb28:	7efb      	ldrb	r3, [r7, #27]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	481d      	ldr	r0, [pc, #116]	; (800cba4 <create_name+0x124>)
 800cb2e:	f7ff f810 	bl	800bb52 <chk_chr>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d001      	beq.n	800cb3c <create_name+0xbc>
 800cb38:	2306      	movs	r3, #6
 800cb3a:	e02c      	b.n	800cb96 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cb3c:	7efb      	ldrb	r3, [r7, #27]
 800cb3e:	2b60      	cmp	r3, #96	; 0x60
 800cb40:	d905      	bls.n	800cb4e <create_name+0xce>
 800cb42:	7efb      	ldrb	r3, [r7, #27]
 800cb44:	2b7a      	cmp	r3, #122	; 0x7a
 800cb46:	d802      	bhi.n	800cb4e <create_name+0xce>
 800cb48:	7efb      	ldrb	r3, [r7, #27]
 800cb4a:	3b20      	subs	r3, #32
 800cb4c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	1c5a      	adds	r2, r3, #1
 800cb52:	613a      	str	r2, [r7, #16]
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	4413      	add	r3, r2
 800cb58:	7efa      	ldrb	r2, [r7, #27]
 800cb5a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cb5c:	e7a6      	b.n	800caac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb5e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	441a      	add	r2, r3
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <create_name+0xf4>
 800cb70:	2306      	movs	r3, #6
 800cb72:	e010      	b.n	800cb96 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2be5      	cmp	r3, #229	; 0xe5
 800cb7a:	d102      	bne.n	800cb82 <create_name+0x102>
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	2205      	movs	r2, #5
 800cb80:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cb82:	7efb      	ldrb	r3, [r7, #27]
 800cb84:	2b20      	cmp	r3, #32
 800cb86:	d801      	bhi.n	800cb8c <create_name+0x10c>
 800cb88:	2204      	movs	r2, #4
 800cb8a:	e000      	b.n	800cb8e <create_name+0x10e>
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	330b      	adds	r3, #11
 800cb92:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cb94:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3720      	adds	r7, #32
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	0800fc08 	.word	0x0800fc08
 800cba4:	0800fb48 	.word	0x0800fb48

0800cba8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cbbc:	e002      	b.n	800cbc4 <follow_path+0x1c>
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	603b      	str	r3, [r7, #0]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b2f      	cmp	r3, #47	; 0x2f
 800cbca:	d0f8      	beq.n	800cbbe <follow_path+0x16>
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	2b5c      	cmp	r3, #92	; 0x5c
 800cbd2:	d0f4      	beq.n	800cbbe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b1f      	cmp	r3, #31
 800cbe0:	d80a      	bhi.n	800cbf8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2280      	movs	r2, #128	; 0x80
 800cbe6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cbea:	2100      	movs	r1, #0
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff fcf9 	bl	800c5e4 <dir_sdi>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	75fb      	strb	r3, [r7, #23]
 800cbf6:	e043      	b.n	800cc80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cbf8:	463b      	mov	r3, r7
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff ff3f 	bl	800ca80 <create_name>
 800cc02:	4603      	mov	r3, r0
 800cc04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc06:	7dfb      	ldrb	r3, [r7, #23]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d134      	bne.n	800cc76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff feaf 	bl	800c970 <dir_find>
 800cc12:	4603      	mov	r3, r0
 800cc14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00a      	beq.n	800cc3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
 800cc26:	2b04      	cmp	r3, #4
 800cc28:	d127      	bne.n	800cc7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cc2a:	7afb      	ldrb	r3, [r7, #11]
 800cc2c:	f003 0304 	and.w	r3, r3, #4
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d122      	bne.n	800cc7a <follow_path+0xd2>
 800cc34:	2305      	movs	r3, #5
 800cc36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cc38:	e01f      	b.n	800cc7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc3a:	7afb      	ldrb	r3, [r7, #11]
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d11c      	bne.n	800cc7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	799b      	ldrb	r3, [r3, #6]
 800cc48:	f003 0310 	and.w	r3, r3, #16
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d102      	bne.n	800cc56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cc50:	2305      	movs	r3, #5
 800cc52:	75fb      	strb	r3, [r7, #23]
 800cc54:	e014      	b.n	800cc80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc64:	4413      	add	r3, r2
 800cc66:	4619      	mov	r1, r3
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f7ff fe42 	bl	800c8f2 <ld_clust>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc74:	e7c0      	b.n	800cbf8 <follow_path+0x50>
			if (res != FR_OK) break;
 800cc76:	bf00      	nop
 800cc78:	e002      	b.n	800cc80 <follow_path+0xd8>
				break;
 800cc7a:	bf00      	nop
 800cc7c:	e000      	b.n	800cc80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc7e:	bf00      	nop
			}
		}
	}

	return res;
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cc8a:	b480      	push	{r7}
 800cc8c:	b087      	sub	sp, #28
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cc92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d031      	beq.n	800cd04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	e002      	b.n	800ccae <get_ldnumber+0x24>
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	617b      	str	r3, [r7, #20]
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b20      	cmp	r3, #32
 800ccb4:	d903      	bls.n	800ccbe <get_ldnumber+0x34>
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b3a      	cmp	r3, #58	; 0x3a
 800ccbc:	d1f4      	bne.n	800cca8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	2b3a      	cmp	r3, #58	; 0x3a
 800ccc4:	d11c      	bne.n	800cd00 <get_ldnumber+0x76>
			tp = *path;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	1c5a      	adds	r2, r3, #1
 800ccd0:	60fa      	str	r2, [r7, #12]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	3b30      	subs	r3, #48	; 0x30
 800ccd6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2b09      	cmp	r3, #9
 800ccdc:	d80e      	bhi.n	800ccfc <get_ldnumber+0x72>
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d10a      	bne.n	800ccfc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d107      	bne.n	800ccfc <get_ldnumber+0x72>
					vol = (int)i;
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	617b      	str	r3, [r7, #20]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	e002      	b.n	800cd06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd00:	2300      	movs	r3, #0
 800cd02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd04:	693b      	ldr	r3, [r7, #16]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	371c      	adds	r7, #28
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
	...

0800cd14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	70da      	strb	r2, [r3, #3]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd2a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff f8da 	bl	800bee8 <move_window>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <check_fs+0x2a>
 800cd3a:	2304      	movs	r3, #4
 800cd3c:	e038      	b.n	800cdb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3330      	adds	r3, #48	; 0x30
 800cd42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe fe1e 	bl	800b988 <ld_word>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d001      	beq.n	800cd5c <check_fs+0x48>
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e029      	b.n	800cdb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd62:	2be9      	cmp	r3, #233	; 0xe9
 800cd64:	d009      	beq.n	800cd7a <check_fs+0x66>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd6c:	2beb      	cmp	r3, #235	; 0xeb
 800cd6e:	d11e      	bne.n	800cdae <check_fs+0x9a>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cd76:	2b90      	cmp	r3, #144	; 0x90
 800cd78:	d119      	bne.n	800cdae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3330      	adds	r3, #48	; 0x30
 800cd7e:	3336      	adds	r3, #54	; 0x36
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7fe fe19 	bl	800b9b8 <ld_dword>
 800cd86:	4603      	mov	r3, r0
 800cd88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd8c:	4a0a      	ldr	r2, [pc, #40]	; (800cdb8 <check_fs+0xa4>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d101      	bne.n	800cd96 <check_fs+0x82>
 800cd92:	2300      	movs	r3, #0
 800cd94:	e00c      	b.n	800cdb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	3330      	adds	r3, #48	; 0x30
 800cd9a:	3352      	adds	r3, #82	; 0x52
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe fe0b 	bl	800b9b8 <ld_dword>
 800cda2:	4603      	mov	r3, r0
 800cda4:	4a05      	ldr	r2, [pc, #20]	; (800cdbc <check_fs+0xa8>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d101      	bne.n	800cdae <check_fs+0x9a>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	e000      	b.n	800cdb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cdae:	2302      	movs	r3, #2
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	00544146 	.word	0x00544146
 800cdbc:	33544146 	.word	0x33544146

0800cdc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b096      	sub	sp, #88	; 0x58
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f7ff ff58 	bl	800cc8a <get_ldnumber>
 800cdda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	da01      	bge.n	800cde6 <find_volume+0x26>
 800cde2:	230b      	movs	r3, #11
 800cde4:	e22d      	b.n	800d242 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cde6:	4aa1      	ldr	r2, [pc, #644]	; (800d06c <find_volume+0x2ac>)
 800cde8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d101      	bne.n	800cdfa <find_volume+0x3a>
 800cdf6:	230c      	movs	r3, #12
 800cdf8:	e223      	b.n	800d242 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdfe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	f023 0301 	bic.w	r3, r3, #1
 800ce06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ce08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d01a      	beq.n	800ce46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	785b      	ldrb	r3, [r3, #1]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fe fd19 	bl	800b84c <disk_status>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ce20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10c      	bne.n	800ce46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ce2c:	79fb      	ldrb	r3, [r7, #7]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d007      	beq.n	800ce42 <find_volume+0x82>
 800ce32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce36:	f003 0304 	and.w	r3, r3, #4
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ce3e:	230a      	movs	r3, #10
 800ce40:	e1ff      	b.n	800d242 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ce42:	2300      	movs	r3, #0
 800ce44:	e1fd      	b.n	800d242 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce48:	2200      	movs	r2, #0
 800ce4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ce4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	785b      	ldrb	r3, [r3, #1]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fe fd11 	bl	800b880 <disk_initialize>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ce64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ce70:	2303      	movs	r3, #3
 800ce72:	e1e6      	b.n	800d242 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d007      	beq.n	800ce8a <find_volume+0xca>
 800ce7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce7e:	f003 0304 	and.w	r3, r3, #4
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ce86:	230a      	movs	r3, #10
 800ce88:	e1db      	b.n	800d242 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ce8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce92:	f7ff ff3f 	bl	800cd14 <check_fs>
 800ce96:	4603      	mov	r3, r0
 800ce98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ce9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d149      	bne.n	800cf38 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cea4:	2300      	movs	r3, #0
 800cea6:	643b      	str	r3, [r7, #64]	; 0x40
 800cea8:	e01e      	b.n	800cee8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ceaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ceb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceb2:	011b      	lsls	r3, r3, #4
 800ceb4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ceb8:	4413      	add	r3, r2
 800ceba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebe:	3304      	adds	r3, #4
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d006      	beq.n	800ced4 <find_volume+0x114>
 800cec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec8:	3308      	adds	r3, #8
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fe fd74 	bl	800b9b8 <ld_dword>
 800ced0:	4602      	mov	r2, r0
 800ced2:	e000      	b.n	800ced6 <find_volume+0x116>
 800ced4:	2200      	movs	r2, #0
 800ced6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	3358      	adds	r3, #88	; 0x58
 800cedc:	443b      	add	r3, r7
 800cede:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee4:	3301      	adds	r3, #1
 800cee6:	643b      	str	r3, [r7, #64]	; 0x40
 800cee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	d9dd      	bls.n	800ceaa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ceee:	2300      	movs	r3, #0
 800cef0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <find_volume+0x13e>
 800cef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cefa:	3b01      	subs	r3, #1
 800cefc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cefe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	3358      	adds	r3, #88	; 0x58
 800cf04:	443b      	add	r3, r7
 800cf06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cf0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d005      	beq.n	800cf1e <find_volume+0x15e>
 800cf12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf16:	f7ff fefd 	bl	800cd14 <check_fs>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	e000      	b.n	800cf20 <find_volume+0x160>
 800cf1e:	2303      	movs	r3, #3
 800cf20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d905      	bls.n	800cf38 <find_volume+0x178>
 800cf2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf2e:	3301      	adds	r3, #1
 800cf30:	643b      	str	r3, [r7, #64]	; 0x40
 800cf32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf34:	2b03      	cmp	r3, #3
 800cf36:	d9e2      	bls.n	800cefe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cf38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf3c:	2b04      	cmp	r3, #4
 800cf3e:	d101      	bne.n	800cf44 <find_volume+0x184>
 800cf40:	2301      	movs	r3, #1
 800cf42:	e17e      	b.n	800d242 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cf44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d901      	bls.n	800cf50 <find_volume+0x190>
 800cf4c:	230d      	movs	r3, #13
 800cf4e:	e178      	b.n	800d242 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	3330      	adds	r3, #48	; 0x30
 800cf54:	330b      	adds	r3, #11
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fe fd16 	bl	800b988 <ld_word>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf62:	d001      	beq.n	800cf68 <find_volume+0x1a8>
 800cf64:	230d      	movs	r3, #13
 800cf66:	e16c      	b.n	800d242 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6a:	3330      	adds	r3, #48	; 0x30
 800cf6c:	3316      	adds	r3, #22
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe fd0a 	bl	800b988 <ld_word>
 800cf74:	4603      	mov	r3, r0
 800cf76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cf78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d106      	bne.n	800cf8c <find_volume+0x1cc>
 800cf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf80:	3330      	adds	r3, #48	; 0x30
 800cf82:	3324      	adds	r3, #36	; 0x24
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fe fd17 	bl	800b9b8 <ld_dword>
 800cf8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf90:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf94:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	789b      	ldrb	r3, [r3, #2]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d005      	beq.n	800cfb0 <find_volume+0x1f0>
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	789b      	ldrb	r3, [r3, #2]
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d001      	beq.n	800cfb0 <find_volume+0x1f0>
 800cfac:	230d      	movs	r3, #13
 800cfae:	e148      	b.n	800d242 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb2:	789b      	ldrb	r3, [r3, #2]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb8:	fb02 f303 	mul.w	r3, r2, r3
 800cfbc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfc4:	b29a      	uxth	r2, r3
 800cfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfcc:	895b      	ldrh	r3, [r3, #10]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d008      	beq.n	800cfe4 <find_volume+0x224>
 800cfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd4:	895b      	ldrh	r3, [r3, #10]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	895b      	ldrh	r3, [r3, #10]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	4013      	ands	r3, r2
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <find_volume+0x228>
 800cfe4:	230d      	movs	r3, #13
 800cfe6:	e12c      	b.n	800d242 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	3330      	adds	r3, #48	; 0x30
 800cfec:	3311      	adds	r3, #17
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fe fcca 	bl	800b988 <ld_word>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461a      	mov	r2, r3
 800cff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	891b      	ldrh	r3, [r3, #8]
 800d000:	f003 030f 	and.w	r3, r3, #15
 800d004:	b29b      	uxth	r3, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <find_volume+0x24e>
 800d00a:	230d      	movs	r3, #13
 800d00c:	e119      	b.n	800d242 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d010:	3330      	adds	r3, #48	; 0x30
 800d012:	3313      	adds	r3, #19
 800d014:	4618      	mov	r0, r3
 800d016:	f7fe fcb7 	bl	800b988 <ld_word>
 800d01a:	4603      	mov	r3, r0
 800d01c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d020:	2b00      	cmp	r3, #0
 800d022:	d106      	bne.n	800d032 <find_volume+0x272>
 800d024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d026:	3330      	adds	r3, #48	; 0x30
 800d028:	3320      	adds	r3, #32
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe fcc4 	bl	800b9b8 <ld_dword>
 800d030:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d034:	3330      	adds	r3, #48	; 0x30
 800d036:	330e      	adds	r3, #14
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe fca5 	bl	800b988 <ld_word>
 800d03e:	4603      	mov	r3, r0
 800d040:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d042:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d044:	2b00      	cmp	r3, #0
 800d046:	d101      	bne.n	800d04c <find_volume+0x28c>
 800d048:	230d      	movs	r3, #13
 800d04a:	e0fa      	b.n	800d242 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d04c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d050:	4413      	add	r3, r2
 800d052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d054:	8912      	ldrh	r2, [r2, #8]
 800d056:	0912      	lsrs	r2, r2, #4
 800d058:	b292      	uxth	r2, r2
 800d05a:	4413      	add	r3, r2
 800d05c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d05e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d062:	429a      	cmp	r2, r3
 800d064:	d204      	bcs.n	800d070 <find_volume+0x2b0>
 800d066:	230d      	movs	r3, #13
 800d068:	e0eb      	b.n	800d242 <find_volume+0x482>
 800d06a:	bf00      	nop
 800d06c:	20003164 	.word	0x20003164
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d078:	8952      	ldrh	r2, [r2, #10]
 800d07a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d07e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <find_volume+0x2ca>
 800d086:	230d      	movs	r3, #13
 800d088:	e0db      	b.n	800d242 <find_volume+0x482>
		fmt = FS_FAT32;
 800d08a:	2303      	movs	r3, #3
 800d08c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d096:	4293      	cmp	r3, r2
 800d098:	d802      	bhi.n	800d0a0 <find_volume+0x2e0>
 800d09a:	2302      	movs	r3, #2
 800d09c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d802      	bhi.n	800d0b0 <find_volume+0x2f0>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	1c9a      	adds	r2, r3, #2
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0bc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d0be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0c2:	441a      	add	r2, r3
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d0c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0cc:	441a      	add	r2, r3
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d0d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	d11e      	bne.n	800d118 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0dc:	3330      	adds	r3, #48	; 0x30
 800d0de:	332a      	adds	r3, #42	; 0x2a
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fe fc51 	bl	800b988 <ld_word>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <find_volume+0x330>
 800d0ec:	230d      	movs	r3, #13
 800d0ee:	e0a8      	b.n	800d242 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f2:	891b      	ldrh	r3, [r3, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d001      	beq.n	800d0fc <find_volume+0x33c>
 800d0f8:	230d      	movs	r3, #13
 800d0fa:	e0a2      	b.n	800d242 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fe:	3330      	adds	r3, #48	; 0x30
 800d100:	332c      	adds	r3, #44	; 0x2c
 800d102:	4618      	mov	r0, r3
 800d104:	f7fe fc58 	bl	800b9b8 <ld_dword>
 800d108:	4602      	mov	r2, r0
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	647b      	str	r3, [r7, #68]	; 0x44
 800d116:	e01f      	b.n	800d158 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11a:	891b      	ldrh	r3, [r3, #8]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <find_volume+0x364>
 800d120:	230d      	movs	r3, #13
 800d122:	e08e      	b.n	800d242 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d126:	6a1a      	ldr	r2, [r3, #32]
 800d128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d12a:	441a      	add	r2, r3
 800d12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d134:	2b02      	cmp	r3, #2
 800d136:	d103      	bne.n	800d140 <find_volume+0x380>
 800d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13a:	695b      	ldr	r3, [r3, #20]
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	e00a      	b.n	800d156 <find_volume+0x396>
 800d140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d142:	695a      	ldr	r2, [r3, #20]
 800d144:	4613      	mov	r3, r2
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	4413      	add	r3, r2
 800d14a:	085a      	lsrs	r2, r3, #1
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d156:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	699a      	ldr	r2, [r3, #24]
 800d15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d15e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d162:	0a5b      	lsrs	r3, r3, #9
 800d164:	429a      	cmp	r2, r3
 800d166:	d201      	bcs.n	800d16c <find_volume+0x3ac>
 800d168:	230d      	movs	r3, #13
 800d16a:	e06a      	b.n	800d242 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d172:	611a      	str	r2, [r3, #16]
 800d174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d176:	691a      	ldr	r2, [r3, #16]
 800d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	2280      	movs	r2, #128	; 0x80
 800d180:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d182:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d186:	2b03      	cmp	r3, #3
 800d188:	d149      	bne.n	800d21e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18c:	3330      	adds	r3, #48	; 0x30
 800d18e:	3330      	adds	r3, #48	; 0x30
 800d190:	4618      	mov	r0, r3
 800d192:	f7fe fbf9 	bl	800b988 <ld_word>
 800d196:	4603      	mov	r3, r0
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d140      	bne.n	800d21e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d19e:	3301      	adds	r3, #1
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1a4:	f7fe fea0 	bl	800bee8 <move_window>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d137      	bne.n	800d21e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b6:	3330      	adds	r3, #48	; 0x30
 800d1b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe fbe3 	bl	800b988 <ld_word>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d127      	bne.n	800d21e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d0:	3330      	adds	r3, #48	; 0x30
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fbf0 	bl	800b9b8 <ld_dword>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	4a1c      	ldr	r2, [pc, #112]	; (800d24c <find_volume+0x48c>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d11e      	bne.n	800d21e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	3330      	adds	r3, #48	; 0x30
 800d1e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fe fbe5 	bl	800b9b8 <ld_dword>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	4a17      	ldr	r2, [pc, #92]	; (800d250 <find_volume+0x490>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d113      	bne.n	800d21e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f8:	3330      	adds	r3, #48	; 0x30
 800d1fa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fe fbda 	bl	800b9b8 <ld_dword>
 800d204:	4602      	mov	r2, r0
 800d206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d208:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20c:	3330      	adds	r3, #48	; 0x30
 800d20e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d212:	4618      	mov	r0, r3
 800d214:	f7fe fbd0 	bl	800b9b8 <ld_dword>
 800d218:	4602      	mov	r2, r0
 800d21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d224:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d226:	4b0b      	ldr	r3, [pc, #44]	; (800d254 <find_volume+0x494>)
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	3301      	adds	r3, #1
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	4b09      	ldr	r3, [pc, #36]	; (800d254 <find_volume+0x494>)
 800d230:	801a      	strh	r2, [r3, #0]
 800d232:	4b08      	ldr	r3, [pc, #32]	; (800d254 <find_volume+0x494>)
 800d234:	881a      	ldrh	r2, [r3, #0]
 800d236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d238:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d23a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d23c:	f7fe fdec 	bl	800be18 <clear_lock>
#endif
	return FR_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3758      	adds	r7, #88	; 0x58
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	41615252 	.word	0x41615252
 800d250:	61417272 	.word	0x61417272
 800d254:	20003168 	.word	0x20003168

0800d258 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d262:	2309      	movs	r3, #9
 800d264:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01c      	beq.n	800d2a6 <validate+0x4e>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d018      	beq.n	800d2a6 <validate+0x4e>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d013      	beq.n	800d2a6 <validate+0x4e>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	889a      	ldrh	r2, [r3, #4]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	88db      	ldrh	r3, [r3, #6]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d10c      	bne.n	800d2a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	785b      	ldrb	r3, [r3, #1]
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe fada 	bl	800b84c <disk_status>
 800d298:	4603      	mov	r3, r0
 800d29a:	f003 0301 	and.w	r3, r3, #1
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <validate+0x4e>
			res = FR_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d2a6:	7bfb      	ldrb	r3, [r7, #15]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d102      	bne.n	800d2b2 <validate+0x5a>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	e000      	b.n	800d2b4 <validate+0x5c>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	6013      	str	r3, [r2, #0]
	return res;
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d2d6:	f107 0310 	add.w	r3, r7, #16
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7ff fcd5 	bl	800cc8a <get_ldnumber>
 800d2e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	da01      	bge.n	800d2ec <f_mount+0x28>
 800d2e8:	230b      	movs	r3, #11
 800d2ea:	e02b      	b.n	800d344 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d2ec:	4a17      	ldr	r2, [pc, #92]	; (800d34c <f_mount+0x88>)
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d005      	beq.n	800d308 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d2fc:	69b8      	ldr	r0, [r7, #24]
 800d2fe:	f7fe fd8b 	bl	800be18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	2200      	movs	r2, #0
 800d306:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2200      	movs	r2, #0
 800d312:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	490d      	ldr	r1, [pc, #52]	; (800d34c <f_mount+0x88>)
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d002      	beq.n	800d32a <f_mount+0x66>
 800d324:	79fb      	ldrb	r3, [r7, #7]
 800d326:	2b01      	cmp	r3, #1
 800d328:	d001      	beq.n	800d32e <f_mount+0x6a>
 800d32a:	2300      	movs	r3, #0
 800d32c:	e00a      	b.n	800d344 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d32e:	f107 010c 	add.w	r1, r7, #12
 800d332:	f107 0308 	add.w	r3, r7, #8
 800d336:	2200      	movs	r2, #0
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff fd41 	bl	800cdc0 <find_volume>
 800d33e:	4603      	mov	r3, r0
 800d340:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d342:	7dfb      	ldrb	r3, [r7, #23]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3720      	adds	r7, #32
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20003164 	.word	0x20003164

0800d350 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b098      	sub	sp, #96	; 0x60
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	4613      	mov	r3, r2
 800d35c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d101      	bne.n	800d368 <f_open+0x18>
 800d364:	2309      	movs	r3, #9
 800d366:	e1ad      	b.n	800d6c4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d368:	79fb      	ldrb	r3, [r7, #7]
 800d36a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d36e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d370:	79fa      	ldrb	r2, [r7, #7]
 800d372:	f107 0110 	add.w	r1, r7, #16
 800d376:	f107 0308 	add.w	r3, r7, #8
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7ff fd20 	bl	800cdc0 <find_volume>
 800d380:	4603      	mov	r3, r0
 800d382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f040 8191 	bne.w	800d6b2 <f_open+0x362>
		dj.obj.fs = fs;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	f107 0314 	add.w	r3, r7, #20
 800d39a:	4611      	mov	r1, r2
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff fc03 	bl	800cba8 <follow_path>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d3a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d11a      	bne.n	800d3e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d3b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d3b4:	b25b      	sxtb	r3, r3
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	da03      	bge.n	800d3c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d3ba:	2306      	movs	r3, #6
 800d3bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d3c0:	e011      	b.n	800d3e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d3c2:	79fb      	ldrb	r3, [r7, #7]
 800d3c4:	f023 0301 	bic.w	r3, r3, #1
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	bf14      	ite	ne
 800d3cc:	2301      	movne	r3, #1
 800d3ce:	2300      	moveq	r3, #0
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	f107 0314 	add.w	r3, r7, #20
 800d3d8:	4611      	mov	r1, r2
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fbd4 	bl	800bb88 <chk_lock>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d3e6:	79fb      	ldrb	r3, [r7, #7]
 800d3e8:	f003 031c 	and.w	r3, r3, #28
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d07f      	beq.n	800d4f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d3f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d017      	beq.n	800d428 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d3f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3fc:	2b04      	cmp	r3, #4
 800d3fe:	d10e      	bne.n	800d41e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d400:	f7fe fc1e 	bl	800bc40 <enq_lock>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d006      	beq.n	800d418 <f_open+0xc8>
 800d40a:	f107 0314 	add.w	r3, r7, #20
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff fb03 	bl	800ca1a <dir_register>
 800d414:	4603      	mov	r3, r0
 800d416:	e000      	b.n	800d41a <f_open+0xca>
 800d418:	2312      	movs	r3, #18
 800d41a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d41e:	79fb      	ldrb	r3, [r7, #7]
 800d420:	f043 0308 	orr.w	r3, r3, #8
 800d424:	71fb      	strb	r3, [r7, #7]
 800d426:	e010      	b.n	800d44a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d428:	7ebb      	ldrb	r3, [r7, #26]
 800d42a:	f003 0311 	and.w	r3, r3, #17
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <f_open+0xea>
					res = FR_DENIED;
 800d432:	2307      	movs	r3, #7
 800d434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d438:	e007      	b.n	800d44a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d43a:	79fb      	ldrb	r3, [r7, #7]
 800d43c:	f003 0304 	and.w	r3, r3, #4
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <f_open+0xfa>
 800d444:	2308      	movs	r3, #8
 800d446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d44a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d168      	bne.n	800d524 <f_open+0x1d4>
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	f003 0308 	and.w	r3, r3, #8
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d063      	beq.n	800d524 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d45c:	f7fb ffc8 	bl	80093f0 <get_fattime>
 800d460:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d464:	330e      	adds	r3, #14
 800d466:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fe fae3 	bl	800ba34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d470:	3316      	adds	r3, #22
 800d472:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d474:	4618      	mov	r0, r3
 800d476:	f7fe fadd 	bl	800ba34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d47c:	330b      	adds	r3, #11
 800d47e:	2220      	movs	r2, #32
 800d480:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d486:	4611      	mov	r1, r2
 800d488:	4618      	mov	r0, r3
 800d48a:	f7ff fa32 	bl	800c8f2 <ld_clust>
 800d48e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d494:	2200      	movs	r2, #0
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff fa4a 	bl	800c930 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49e:	331c      	adds	r3, #28
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe fac6 	bl	800ba34 <st_dword>
					fs->wflag = 1;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d037      	beq.n	800d524 <f_open+0x1d4>
						dw = fs->winsect;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d4ba:	f107 0314 	add.w	r3, r7, #20
 800d4be:	2200      	movs	r2, #0
 800d4c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fe ff5d 	bl	800c382 <remove_chain>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d4ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d126      	bne.n	800d524 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe fd04 	bl	800bee8 <move_window>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d4ea:	3a01      	subs	r2, #1
 800d4ec:	60da      	str	r2, [r3, #12]
 800d4ee:	e019      	b.n	800d524 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d4f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d115      	bne.n	800d524 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d4f8:	7ebb      	ldrb	r3, [r7, #26]
 800d4fa:	f003 0310 	and.w	r3, r3, #16
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d003      	beq.n	800d50a <f_open+0x1ba>
					res = FR_NO_FILE;
 800d502:	2304      	movs	r3, #4
 800d504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d508:	e00c      	b.n	800d524 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d50a:	79fb      	ldrb	r3, [r7, #7]
 800d50c:	f003 0302 	and.w	r3, r3, #2
 800d510:	2b00      	cmp	r3, #0
 800d512:	d007      	beq.n	800d524 <f_open+0x1d4>
 800d514:	7ebb      	ldrb	r3, [r7, #26]
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d002      	beq.n	800d524 <f_open+0x1d4>
						res = FR_DENIED;
 800d51e:	2307      	movs	r3, #7
 800d520:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d128      	bne.n	800d57e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d52c:	79fb      	ldrb	r3, [r7, #7]
 800d52e:	f003 0308 	and.w	r3, r3, #8
 800d532:	2b00      	cmp	r3, #0
 800d534:	d003      	beq.n	800d53e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d536:	79fb      	ldrb	r3, [r7, #7]
 800d538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d53c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d54c:	79fb      	ldrb	r3, [r7, #7]
 800d54e:	f023 0301 	bic.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	bf14      	ite	ne
 800d556:	2301      	movne	r3, #1
 800d558:	2300      	moveq	r3, #0
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	461a      	mov	r2, r3
 800d55e:	f107 0314 	add.w	r3, r7, #20
 800d562:	4611      	mov	r1, r2
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe fb8d 	bl	800bc84 <inc_lock>
 800d56a:	4602      	mov	r2, r0
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d102      	bne.n	800d57e <f_open+0x22e>
 800d578:	2302      	movs	r3, #2
 800d57a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d57e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d582:	2b00      	cmp	r3, #0
 800d584:	f040 8095 	bne.w	800d6b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d58c:	4611      	mov	r1, r2
 800d58e:	4618      	mov	r0, r3
 800d590:	f7ff f9af 	bl	800c8f2 <ld_clust>
 800d594:	4602      	mov	r2, r0
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59c:	331c      	adds	r3, #28
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fe fa0a 	bl	800b9b8 <ld_dword>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d5b0:	693a      	ldr	r2, [r7, #16]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	88da      	ldrh	r2, [r3, #6]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	79fa      	ldrb	r2, [r7, #7]
 800d5c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3330      	adds	r3, #48	; 0x30
 800d5da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5de:	2100      	movs	r1, #0
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fe fa74 	bl	800bace <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	f003 0320 	and.w	r3, r3, #32
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d060      	beq.n	800d6b2 <f_open+0x362>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d05c      	beq.n	800d6b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	68da      	ldr	r2, [r3, #12]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	895b      	ldrh	r3, [r3, #10]
 800d604:	025b      	lsls	r3, r3, #9
 800d606:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	657b      	str	r3, [r7, #84]	; 0x54
 800d614:	e016      	b.n	800d644 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fe fd1f 	bl	800c05e <get_fat>
 800d620:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d624:	2b01      	cmp	r3, #1
 800d626:	d802      	bhi.n	800d62e <f_open+0x2de>
 800d628:	2302      	movs	r3, #2
 800d62a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d62e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d634:	d102      	bne.n	800d63c <f_open+0x2ec>
 800d636:	2301      	movs	r3, #1
 800d638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d63c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	657b      	str	r3, [r7, #84]	; 0x54
 800d644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d103      	bne.n	800d654 <f_open+0x304>
 800d64c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d650:	429a      	cmp	r2, r3
 800d652:	d8e0      	bhi.n	800d616 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d658:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d65a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d127      	bne.n	800d6b2 <f_open+0x362>
 800d662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d022      	beq.n	800d6b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d670:	4618      	mov	r0, r3
 800d672:	f7fe fcd5 	bl	800c020 <clust2sect>
 800d676:	6478      	str	r0, [r7, #68]	; 0x44
 800d678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d103      	bne.n	800d686 <f_open+0x336>
						res = FR_INT_ERR;
 800d67e:	2302      	movs	r3, #2
 800d680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d684:	e015      	b.n	800d6b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d688:	0a5a      	lsrs	r2, r3, #9
 800d68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d68c:	441a      	add	r2, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	7858      	ldrb	r0, [r3, #1]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6a1a      	ldr	r2, [r3, #32]
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	f7fe f913 	bl	800b8cc <disk_read>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <f_open+0x362>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d6b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d002      	beq.n	800d6c0 <f_open+0x370>
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d6c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3760      	adds	r7, #96	; 0x60
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08c      	sub	sp, #48	; 0x30
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
 800d6d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f107 0210 	add.w	r2, r7, #16
 800d6ea:	4611      	mov	r1, r2
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff fdb3 	bl	800d258 <validate>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d107      	bne.n	800d710 <f_write+0x44>
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	7d5b      	ldrb	r3, [r3, #21]
 800d704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <f_write+0x4a>
 800d710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d714:	e14b      	b.n	800d9ae <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	7d1b      	ldrb	r3, [r3, #20]
 800d71a:	f003 0302 	and.w	r3, r3, #2
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <f_write+0x5a>
 800d722:	2307      	movs	r3, #7
 800d724:	e143      	b.n	800d9ae <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	699a      	ldr	r2, [r3, #24]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	441a      	add	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	699b      	ldr	r3, [r3, #24]
 800d732:	429a      	cmp	r2, r3
 800d734:	f080 812d 	bcs.w	800d992 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	43db      	mvns	r3, r3
 800d73e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d740:	e127      	b.n	800d992 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	699b      	ldr	r3, [r3, #24]
 800d746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f040 80e3 	bne.w	800d916 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	0a5b      	lsrs	r3, r3, #9
 800d756:	693a      	ldr	r2, [r7, #16]
 800d758:	8952      	ldrh	r2, [r2, #10]
 800d75a:	3a01      	subs	r2, #1
 800d75c:	4013      	ands	r3, r2
 800d75e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d143      	bne.n	800d7ee <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10c      	bne.n	800d788 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d776:	2b00      	cmp	r3, #0
 800d778:	d11a      	bne.n	800d7b0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2100      	movs	r1, #0
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fe fe64 	bl	800c44c <create_chain>
 800d784:	62b8      	str	r0, [r7, #40]	; 0x28
 800d786:	e013      	b.n	800d7b0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d007      	beq.n	800d7a0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	4619      	mov	r1, r3
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f7fe fef0 	bl	800c57c <clmt_clust>
 800d79c:	62b8      	str	r0, [r7, #40]	; 0x28
 800d79e:	e007      	b.n	800d7b0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	69db      	ldr	r3, [r3, #28]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	f7fe fe4f 	bl	800c44c <create_chain>
 800d7ae:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f000 80f2 	beq.w	800d99c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d104      	bne.n	800d7c8 <f_write+0xfc>
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	755a      	strb	r2, [r3, #21]
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	e0f2      	b.n	800d9ae <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7ce:	d104      	bne.n	800d7da <f_write+0x10e>
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	755a      	strb	r2, [r3, #21]
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e0e9      	b.n	800d9ae <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7de:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d102      	bne.n	800d7ee <f_write+0x122>
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	7d1b      	ldrb	r3, [r3, #20]
 800d7f2:	b25b      	sxtb	r3, r3
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	da18      	bge.n	800d82a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	7858      	ldrb	r0, [r3, #1]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6a1a      	ldr	r2, [r3, #32]
 800d806:	2301      	movs	r3, #1
 800d808:	f7fe f880 	bl	800b90c <disk_write>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d004      	beq.n	800d81c <f_write+0x150>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2201      	movs	r2, #1
 800d816:	755a      	strb	r2, [r3, #21]
 800d818:	2301      	movs	r3, #1
 800d81a:	e0c8      	b.n	800d9ae <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	7d1b      	ldrb	r3, [r3, #20]
 800d820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d824:	b2da      	uxtb	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d82a:	693a      	ldr	r2, [r7, #16]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	69db      	ldr	r3, [r3, #28]
 800d830:	4619      	mov	r1, r3
 800d832:	4610      	mov	r0, r2
 800d834:	f7fe fbf4 	bl	800c020 <clust2sect>
 800d838:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d104      	bne.n	800d84a <f_write+0x17e>
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2202      	movs	r2, #2
 800d844:	755a      	strb	r2, [r3, #21]
 800d846:	2302      	movs	r3, #2
 800d848:	e0b1      	b.n	800d9ae <f_write+0x2e2>
			sect += csect;
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	4413      	add	r3, r2
 800d850:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	0a5b      	lsrs	r3, r3, #9
 800d856:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d03c      	beq.n	800d8d8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	4413      	add	r3, r2
 800d864:	693a      	ldr	r2, [r7, #16]
 800d866:	8952      	ldrh	r2, [r2, #10]
 800d868:	4293      	cmp	r3, r2
 800d86a:	d905      	bls.n	800d878 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	895b      	ldrh	r3, [r3, #10]
 800d870:	461a      	mov	r2, r3
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	1ad3      	subs	r3, r2, r3
 800d876:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	7858      	ldrb	r0, [r3, #1]
 800d87c:	6a3b      	ldr	r3, [r7, #32]
 800d87e:	697a      	ldr	r2, [r7, #20]
 800d880:	69f9      	ldr	r1, [r7, #28]
 800d882:	f7fe f843 	bl	800b90c <disk_write>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d004      	beq.n	800d896 <f_write+0x1ca>
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2201      	movs	r2, #1
 800d890:	755a      	strb	r2, [r3, #21]
 800d892:	2301      	movs	r3, #1
 800d894:	e08b      	b.n	800d9ae <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6a1a      	ldr	r2, [r3, #32]
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	1ad3      	subs	r3, r2, r3
 800d89e:	6a3a      	ldr	r2, [r7, #32]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d915      	bls.n	800d8d0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6a1a      	ldr	r2, [r3, #32]
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	025b      	lsls	r3, r3, #9
 800d8b4:	69fa      	ldr	r2, [r7, #28]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8bc:	4619      	mov	r1, r3
 800d8be:	f7fe f8e5 	bl	800ba8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	7d1b      	ldrb	r3, [r3, #20]
 800d8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d8d0:	6a3b      	ldr	r3, [r7, #32]
 800d8d2:	025b      	lsls	r3, r3, #9
 800d8d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d8d6:	e03f      	b.n	800d958 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6a1b      	ldr	r3, [r3, #32]
 800d8dc:	697a      	ldr	r2, [r7, #20]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d016      	beq.n	800d910 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	699a      	ldr	r2, [r3, #24]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d210      	bcs.n	800d910 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	7858      	ldrb	r0, [r3, #1]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	f7fd ffe6 	bl	800b8cc <disk_read>
 800d900:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d902:	2b00      	cmp	r3, #0
 800d904:	d004      	beq.n	800d910 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2201      	movs	r2, #1
 800d90a:	755a      	strb	r2, [r3, #21]
 800d90c:	2301      	movs	r3, #1
 800d90e:	e04e      	b.n	800d9ae <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	699b      	ldr	r3, [r3, #24]
 800d91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d91e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d922:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d901      	bls.n	800d930 <f_write+0x264>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	699b      	ldr	r3, [r3, #24]
 800d93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d93e:	4413      	add	r3, r2
 800d940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d942:	69f9      	ldr	r1, [r7, #28]
 800d944:	4618      	mov	r0, r3
 800d946:	f7fe f8a1 	bl	800ba8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	7d1b      	ldrb	r3, [r3, #20]
 800d94e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d952:	b2da      	uxtb	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d958:	69fa      	ldr	r2, [r7, #28]
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95c:	4413      	add	r3, r2
 800d95e:	61fb      	str	r3, [r7, #28]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	699a      	ldr	r2, [r3, #24]
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	441a      	add	r2, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	619a      	str	r2, [r3, #24]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	68da      	ldr	r2, [r3, #12]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	699b      	ldr	r3, [r3, #24]
 800d974:	429a      	cmp	r2, r3
 800d976:	bf38      	it	cc
 800d978:	461a      	movcc	r2, r3
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	60da      	str	r2, [r3, #12]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d984:	441a      	add	r2, r3
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	601a      	str	r2, [r3, #0]
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	f47f aed4 	bne.w	800d742 <f_write+0x76>
 800d99a:	e000      	b.n	800d99e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d99c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	7d1b      	ldrb	r3, [r3, #20]
 800d9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3730      	adds	r7, #48	; 0x30
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b086      	sub	sp, #24
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f107 0208 	add.w	r2, r7, #8
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff fc46 	bl	800d258 <validate>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d9d0:	7dfb      	ldrb	r3, [r7, #23]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d168      	bne.n	800daa8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	7d1b      	ldrb	r3, [r3, #20]
 800d9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d062      	beq.n	800daa8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	7d1b      	ldrb	r3, [r3, #20]
 800d9e6:	b25b      	sxtb	r3, r3
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	da15      	bge.n	800da18 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	7858      	ldrb	r0, [r3, #1]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a1a      	ldr	r2, [r3, #32]
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	f7fd ff86 	bl	800b90c <disk_write>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <f_sync+0x54>
 800da06:	2301      	movs	r3, #1
 800da08:	e04f      	b.n	800daaa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	7d1b      	ldrb	r3, [r3, #20]
 800da0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da12:	b2da      	uxtb	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800da18:	f7fb fcea 	bl	80093f0 <get_fattime>
 800da1c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da24:	4619      	mov	r1, r3
 800da26:	4610      	mov	r0, r2
 800da28:	f7fe fa5e 	bl	800bee8 <move_window>
 800da2c:	4603      	mov	r3, r0
 800da2e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800da30:	7dfb      	ldrb	r3, [r7, #23]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d138      	bne.n	800daa8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da3a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	330b      	adds	r3, #11
 800da40:	781a      	ldrb	r2, [r3, #0]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	330b      	adds	r3, #11
 800da46:	f042 0220 	orr.w	r2, r2, #32
 800da4a:	b2d2      	uxtb	r2, r2
 800da4c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6818      	ldr	r0, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	461a      	mov	r2, r3
 800da58:	68f9      	ldr	r1, [r7, #12]
 800da5a:	f7fe ff69 	bl	800c930 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f103 021c 	add.w	r2, r3, #28
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	4619      	mov	r1, r3
 800da6a:	4610      	mov	r0, r2
 800da6c:	f7fd ffe2 	bl	800ba34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	3316      	adds	r3, #22
 800da74:	6939      	ldr	r1, [r7, #16]
 800da76:	4618      	mov	r0, r3
 800da78:	f7fd ffdc 	bl	800ba34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	3312      	adds	r3, #18
 800da80:	2100      	movs	r1, #0
 800da82:	4618      	mov	r0, r3
 800da84:	f7fd ffbb 	bl	800b9fe <st_word>
					fs->wflag = 1;
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2201      	movs	r2, #1
 800da8c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	4618      	mov	r0, r3
 800da92:	f7fe fa57 	bl	800bf44 <sync_fs>
 800da96:	4603      	mov	r3, r0
 800da98:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	7d1b      	ldrb	r3, [r3, #20]
 800da9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800daa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff ff7b 	bl	800d9b6 <f_sync>
 800dac0:	4603      	mov	r3, r0
 800dac2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d118      	bne.n	800dafc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f107 0208 	add.w	r2, r7, #8
 800dad0:	4611      	mov	r1, r2
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff fbc0 	bl	800d258 <validate>
 800dad8:	4603      	mov	r3, r0
 800dada:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10c      	bne.n	800dafc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe f95a 	bl	800bda0 <dec_lock>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d102      	bne.n	800dafc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
	...

0800db08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800db08:	b480      	push	{r7}
 800db0a:	b087      	sub	sp, #28
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	4613      	mov	r3, r2
 800db14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800db16:	2301      	movs	r3, #1
 800db18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800db1a:	2300      	movs	r3, #0
 800db1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800db1e:	4b1f      	ldr	r3, [pc, #124]	; (800db9c <FATFS_LinkDriverEx+0x94>)
 800db20:	7a5b      	ldrb	r3, [r3, #9]
 800db22:	b2db      	uxtb	r3, r3
 800db24:	2b00      	cmp	r3, #0
 800db26:	d131      	bne.n	800db8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800db28:	4b1c      	ldr	r3, [pc, #112]	; (800db9c <FATFS_LinkDriverEx+0x94>)
 800db2a:	7a5b      	ldrb	r3, [r3, #9]
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	461a      	mov	r2, r3
 800db30:	4b1a      	ldr	r3, [pc, #104]	; (800db9c <FATFS_LinkDriverEx+0x94>)
 800db32:	2100      	movs	r1, #0
 800db34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800db36:	4b19      	ldr	r3, [pc, #100]	; (800db9c <FATFS_LinkDriverEx+0x94>)
 800db38:	7a5b      	ldrb	r3, [r3, #9]
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	4a17      	ldr	r2, [pc, #92]	; (800db9c <FATFS_LinkDriverEx+0x94>)
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	68fa      	ldr	r2, [r7, #12]
 800db44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800db46:	4b15      	ldr	r3, [pc, #84]	; (800db9c <FATFS_LinkDriverEx+0x94>)
 800db48:	7a5b      	ldrb	r3, [r3, #9]
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	461a      	mov	r2, r3
 800db4e:	4b13      	ldr	r3, [pc, #76]	; (800db9c <FATFS_LinkDriverEx+0x94>)
 800db50:	4413      	add	r3, r2
 800db52:	79fa      	ldrb	r2, [r7, #7]
 800db54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db56:	4b11      	ldr	r3, [pc, #68]	; (800db9c <FATFS_LinkDriverEx+0x94>)
 800db58:	7a5b      	ldrb	r3, [r3, #9]
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	b2d1      	uxtb	r1, r2
 800db60:	4a0e      	ldr	r2, [pc, #56]	; (800db9c <FATFS_LinkDriverEx+0x94>)
 800db62:	7251      	strb	r1, [r2, #9]
 800db64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db66:	7dbb      	ldrb	r3, [r7, #22]
 800db68:	3330      	adds	r3, #48	; 0x30
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	3301      	adds	r3, #1
 800db74:	223a      	movs	r2, #58	; 0x3a
 800db76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	3302      	adds	r3, #2
 800db7c:	222f      	movs	r2, #47	; 0x2f
 800db7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	3303      	adds	r3, #3
 800db84:	2200      	movs	r2, #0
 800db86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	371c      	adds	r7, #28
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	2000318c 	.word	0x2000318c

0800dba0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dbaa:	2200      	movs	r2, #0
 800dbac:	6839      	ldr	r1, [r7, #0]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7ff ffaa 	bl	800db08 <FATFS_LinkDriverEx>
 800dbb4:	4603      	mov	r3, r0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
	...

0800dbc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	4912      	ldr	r1, [pc, #72]	; (800dc10 <MX_USB_DEVICE_Init+0x50>)
 800dbc8:	4812      	ldr	r0, [pc, #72]	; (800dc14 <MX_USB_DEVICE_Init+0x54>)
 800dbca:	f7fc fb23 	bl	800a214 <USBD_Init>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dbd4:	f7f3 f8e0 	bl	8000d98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dbd8:	490f      	ldr	r1, [pc, #60]	; (800dc18 <MX_USB_DEVICE_Init+0x58>)
 800dbda:	480e      	ldr	r0, [pc, #56]	; (800dc14 <MX_USB_DEVICE_Init+0x54>)
 800dbdc:	f7fc fb4a 	bl	800a274 <USBD_RegisterClass>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dbe6:	f7f3 f8d7 	bl	8000d98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dbea:	490c      	ldr	r1, [pc, #48]	; (800dc1c <MX_USB_DEVICE_Init+0x5c>)
 800dbec:	4809      	ldr	r0, [pc, #36]	; (800dc14 <MX_USB_DEVICE_Init+0x54>)
 800dbee:	f7fc fa41 	bl	800a074 <USBD_CDC_RegisterInterface>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dbf8:	f7f3 f8ce 	bl	8000d98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dbfc:	4805      	ldr	r0, [pc, #20]	; (800dc14 <MX_USB_DEVICE_Init+0x54>)
 800dbfe:	f7fc fb6f 	bl	800a2e0 <USBD_Start>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dc08:	f7f3 f8c6 	bl	8000d98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dc0c:	bf00      	nop
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	200000ac 	.word	0x200000ac
 800dc14:	20003198 	.word	0x20003198
 800dc18:	20000018 	.word	0x20000018
 800dc1c:	20000098 	.word	0x20000098

0800dc20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dc24:	2200      	movs	r2, #0
 800dc26:	4905      	ldr	r1, [pc, #20]	; (800dc3c <CDC_Init_FS+0x1c>)
 800dc28:	4805      	ldr	r0, [pc, #20]	; (800dc40 <CDC_Init_FS+0x20>)
 800dc2a:	f7fc fa3d 	bl	800a0a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dc2e:	4905      	ldr	r1, [pc, #20]	; (800dc44 <CDC_Init_FS+0x24>)
 800dc30:	4803      	ldr	r0, [pc, #12]	; (800dc40 <CDC_Init_FS+0x20>)
 800dc32:	f7fc fa5b 	bl	800a0ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dc36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	20003c74 	.word	0x20003c74
 800dc40:	20003198 	.word	0x20003198
 800dc44:	20003474 	.word	0x20003474

0800dc48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dc4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	4603      	mov	r3, r0
 800dc60:	6039      	str	r1, [r7, #0]
 800dc62:	71fb      	strb	r3, [r7, #7]
 800dc64:	4613      	mov	r3, r2
 800dc66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	2b23      	cmp	r3, #35	; 0x23
 800dc6c:	d84a      	bhi.n	800dd04 <CDC_Control_FS+0xac>
 800dc6e:	a201      	add	r2, pc, #4	; (adr r2, 800dc74 <CDC_Control_FS+0x1c>)
 800dc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc74:	0800dd05 	.word	0x0800dd05
 800dc78:	0800dd05 	.word	0x0800dd05
 800dc7c:	0800dd05 	.word	0x0800dd05
 800dc80:	0800dd05 	.word	0x0800dd05
 800dc84:	0800dd05 	.word	0x0800dd05
 800dc88:	0800dd05 	.word	0x0800dd05
 800dc8c:	0800dd05 	.word	0x0800dd05
 800dc90:	0800dd05 	.word	0x0800dd05
 800dc94:	0800dd05 	.word	0x0800dd05
 800dc98:	0800dd05 	.word	0x0800dd05
 800dc9c:	0800dd05 	.word	0x0800dd05
 800dca0:	0800dd05 	.word	0x0800dd05
 800dca4:	0800dd05 	.word	0x0800dd05
 800dca8:	0800dd05 	.word	0x0800dd05
 800dcac:	0800dd05 	.word	0x0800dd05
 800dcb0:	0800dd05 	.word	0x0800dd05
 800dcb4:	0800dd05 	.word	0x0800dd05
 800dcb8:	0800dd05 	.word	0x0800dd05
 800dcbc:	0800dd05 	.word	0x0800dd05
 800dcc0:	0800dd05 	.word	0x0800dd05
 800dcc4:	0800dd05 	.word	0x0800dd05
 800dcc8:	0800dd05 	.word	0x0800dd05
 800dccc:	0800dd05 	.word	0x0800dd05
 800dcd0:	0800dd05 	.word	0x0800dd05
 800dcd4:	0800dd05 	.word	0x0800dd05
 800dcd8:	0800dd05 	.word	0x0800dd05
 800dcdc:	0800dd05 	.word	0x0800dd05
 800dce0:	0800dd05 	.word	0x0800dd05
 800dce4:	0800dd05 	.word	0x0800dd05
 800dce8:	0800dd05 	.word	0x0800dd05
 800dcec:	0800dd05 	.word	0x0800dd05
 800dcf0:	0800dd05 	.word	0x0800dd05
 800dcf4:	0800dd05 	.word	0x0800dd05
 800dcf8:	0800dd05 	.word	0x0800dd05
 800dcfc:	0800dd05 	.word	0x0800dd05
 800dd00:	0800dd05 	.word	0x0800dd05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dd04:	bf00      	nop
  }

  return (USBD_OK);
 800dd06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dd1e:	6879      	ldr	r1, [r7, #4]
 800dd20:	4805      	ldr	r0, [pc, #20]	; (800dd38 <CDC_Receive_FS+0x24>)
 800dd22:	f7fc f9e3 	bl	800a0ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dd26:	4804      	ldr	r0, [pc, #16]	; (800dd38 <CDC_Receive_FS+0x24>)
 800dd28:	f7fc fa3e 	bl	800a1a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dd2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	20003198 	.word	0x20003198

0800dd3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	460b      	mov	r3, r1
 800dd46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dd4c:	4b0d      	ldr	r3, [pc, #52]	; (800dd84 <CDC_Transmit_FS+0x48>)
 800dd4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e00b      	b.n	800dd7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd62:	887b      	ldrh	r3, [r7, #2]
 800dd64:	461a      	mov	r2, r3
 800dd66:	6879      	ldr	r1, [r7, #4]
 800dd68:	4806      	ldr	r0, [pc, #24]	; (800dd84 <CDC_Transmit_FS+0x48>)
 800dd6a:	f7fc f99d 	bl	800a0a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd6e:	4805      	ldr	r0, [pc, #20]	; (800dd84 <CDC_Transmit_FS+0x48>)
 800dd70:	f7fc f9da 	bl	800a128 <USBD_CDC_TransmitPacket>
 800dd74:	4603      	mov	r3, r0
 800dd76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	20003198 	.word	0x20003198

0800dd88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	4613      	mov	r3, r2
 800dd94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	371c      	adds	r7, #28
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
	...

0800ddac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	6039      	str	r1, [r7, #0]
 800ddb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2212      	movs	r2, #18
 800ddbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ddbe:	4b03      	ldr	r3, [pc, #12]	; (800ddcc <USBD_FS_DeviceDescriptor+0x20>)
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	200000cc 	.word	0x200000cc

0800ddd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	6039      	str	r1, [r7, #0]
 800ddda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	2204      	movs	r2, #4
 800dde0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dde2:	4b03      	ldr	r3, [pc, #12]	; (800ddf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	200000ec 	.word	0x200000ec

0800ddf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	6039      	str	r1, [r7, #0]
 800ddfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de00:	79fb      	ldrb	r3, [r7, #7]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d105      	bne.n	800de12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	4907      	ldr	r1, [pc, #28]	; (800de28 <USBD_FS_ProductStrDescriptor+0x34>)
 800de0a:	4808      	ldr	r0, [pc, #32]	; (800de2c <USBD_FS_ProductStrDescriptor+0x38>)
 800de0c:	f7fd fc3e 	bl	800b68c <USBD_GetString>
 800de10:	e004      	b.n	800de1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de12:	683a      	ldr	r2, [r7, #0]
 800de14:	4904      	ldr	r1, [pc, #16]	; (800de28 <USBD_FS_ProductStrDescriptor+0x34>)
 800de16:	4805      	ldr	r0, [pc, #20]	; (800de2c <USBD_FS_ProductStrDescriptor+0x38>)
 800de18:	f7fd fc38 	bl	800b68c <USBD_GetString>
  }
  return USBD_StrDesc;
 800de1c:	4b02      	ldr	r3, [pc, #8]	; (800de28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	20004474 	.word	0x20004474
 800de2c:	0800fb8c 	.word	0x0800fb8c

0800de30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	6039      	str	r1, [r7, #0]
 800de3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	4904      	ldr	r1, [pc, #16]	; (800de50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800de40:	4804      	ldr	r0, [pc, #16]	; (800de54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800de42:	f7fd fc23 	bl	800b68c <USBD_GetString>
  return USBD_StrDesc;
 800de46:	4b02      	ldr	r3, [pc, #8]	; (800de50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	20004474 	.word	0x20004474
 800de54:	0800fba4 	.word	0x0800fba4

0800de58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	4603      	mov	r3, r0
 800de60:	6039      	str	r1, [r7, #0]
 800de62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	221a      	movs	r2, #26
 800de68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de6a:	f000 f855 	bl	800df18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800de6e:	4b02      	ldr	r3, [pc, #8]	; (800de78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	200000f0 	.word	0x200000f0

0800de7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	4603      	mov	r3, r0
 800de84:	6039      	str	r1, [r7, #0]
 800de86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de88:	79fb      	ldrb	r3, [r7, #7]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d105      	bne.n	800de9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de8e:	683a      	ldr	r2, [r7, #0]
 800de90:	4907      	ldr	r1, [pc, #28]	; (800deb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de92:	4808      	ldr	r0, [pc, #32]	; (800deb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de94:	f7fd fbfa 	bl	800b68c <USBD_GetString>
 800de98:	e004      	b.n	800dea4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	4904      	ldr	r1, [pc, #16]	; (800deb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de9e:	4805      	ldr	r0, [pc, #20]	; (800deb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dea0:	f7fd fbf4 	bl	800b68c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dea4:	4b02      	ldr	r3, [pc, #8]	; (800deb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	20004474 	.word	0x20004474
 800deb4:	0800fbb8 	.word	0x0800fbb8

0800deb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	6039      	str	r1, [r7, #0]
 800dec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dec4:	79fb      	ldrb	r3, [r7, #7]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d105      	bne.n	800ded6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	4907      	ldr	r1, [pc, #28]	; (800deec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dece:	4808      	ldr	r0, [pc, #32]	; (800def0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ded0:	f7fd fbdc 	bl	800b68c <USBD_GetString>
 800ded4:	e004      	b.n	800dee0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	4904      	ldr	r1, [pc, #16]	; (800deec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800deda:	4805      	ldr	r0, [pc, #20]	; (800def0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dedc:	f7fd fbd6 	bl	800b68c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dee0:	4b02      	ldr	r3, [pc, #8]	; (800deec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	20004474 	.word	0x20004474
 800def0:	0800fbc4 	.word	0x0800fbc4

0800def4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	4603      	mov	r3, r0
 800defc:	6039      	str	r1, [r7, #0]
 800defe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	220c      	movs	r2, #12
 800df04:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800df06:	4b03      	ldr	r3, [pc, #12]	; (800df14 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800df08:	4618      	mov	r0, r3
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	200000e0 	.word	0x200000e0

0800df18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df1e:	4b0f      	ldr	r3, [pc, #60]	; (800df5c <Get_SerialNum+0x44>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df24:	4b0e      	ldr	r3, [pc, #56]	; (800df60 <Get_SerialNum+0x48>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df2a:	4b0e      	ldr	r3, [pc, #56]	; (800df64 <Get_SerialNum+0x4c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	4413      	add	r3, r2
 800df36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d009      	beq.n	800df52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df3e:	2208      	movs	r2, #8
 800df40:	4909      	ldr	r1, [pc, #36]	; (800df68 <Get_SerialNum+0x50>)
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f000 f814 	bl	800df70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df48:	2204      	movs	r2, #4
 800df4a:	4908      	ldr	r1, [pc, #32]	; (800df6c <Get_SerialNum+0x54>)
 800df4c:	68b8      	ldr	r0, [r7, #8]
 800df4e:	f000 f80f 	bl	800df70 <IntToUnicode>
  }
}
 800df52:	bf00      	nop
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	1ff0f420 	.word	0x1ff0f420
 800df60:	1ff0f424 	.word	0x1ff0f424
 800df64:	1ff0f428 	.word	0x1ff0f428
 800df68:	200000f2 	.word	0x200000f2
 800df6c:	20000102 	.word	0x20000102

0800df70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df70:	b480      	push	{r7}
 800df72:	b087      	sub	sp, #28
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	4613      	mov	r3, r2
 800df7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df7e:	2300      	movs	r3, #0
 800df80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df82:	2300      	movs	r3, #0
 800df84:	75fb      	strb	r3, [r7, #23]
 800df86:	e027      	b.n	800dfd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	0f1b      	lsrs	r3, r3, #28
 800df8c:	2b09      	cmp	r3, #9
 800df8e:	d80b      	bhi.n	800dfa8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	0f1b      	lsrs	r3, r3, #28
 800df94:	b2da      	uxtb	r2, r3
 800df96:	7dfb      	ldrb	r3, [r7, #23]
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	4619      	mov	r1, r3
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	440b      	add	r3, r1
 800dfa0:	3230      	adds	r2, #48	; 0x30
 800dfa2:	b2d2      	uxtb	r2, r2
 800dfa4:	701a      	strb	r2, [r3, #0]
 800dfa6:	e00a      	b.n	800dfbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	0f1b      	lsrs	r3, r3, #28
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	7dfb      	ldrb	r3, [r7, #23]
 800dfb0:	005b      	lsls	r3, r3, #1
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	440b      	add	r3, r1
 800dfb8:	3237      	adds	r2, #55	; 0x37
 800dfba:	b2d2      	uxtb	r2, r2
 800dfbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	011b      	lsls	r3, r3, #4
 800dfc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dfc4:	7dfb      	ldrb	r3, [r7, #23]
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	3301      	adds	r3, #1
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	4413      	add	r3, r2
 800dfce:	2200      	movs	r2, #0
 800dfd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	75fb      	strb	r3, [r7, #23]
 800dfd8:	7dfa      	ldrb	r2, [r7, #23]
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d3d3      	bcc.n	800df88 <IntToUnicode+0x18>
  }
}
 800dfe0:	bf00      	nop
 800dfe2:	bf00      	nop
 800dfe4:	371c      	adds	r7, #28
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
	...

0800dff0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b0ae      	sub	sp, #184	; 0xb8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dff8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]
 800e000:	605a      	str	r2, [r3, #4]
 800e002:	609a      	str	r2, [r3, #8]
 800e004:	60da      	str	r2, [r3, #12]
 800e006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e008:	f107 0314 	add.w	r3, r7, #20
 800e00c:	2290      	movs	r2, #144	; 0x90
 800e00e:	2100      	movs	r1, #0
 800e010:	4618      	mov	r0, r3
 800e012:	f000 fd8a 	bl	800eb2a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e01e:	d151      	bne.n	800e0c4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e020:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e024:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e026:	2300      	movs	r3, #0
 800e028:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e02c:	f107 0314 	add.w	r3, r7, #20
 800e030:	4618      	mov	r0, r3
 800e032:	f7f6 fe11 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d001      	beq.n	800e040 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e03c:	f7f2 feac 	bl	8000d98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e040:	4b22      	ldr	r3, [pc, #136]	; (800e0cc <HAL_PCD_MspInit+0xdc>)
 800e042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e044:	4a21      	ldr	r2, [pc, #132]	; (800e0cc <HAL_PCD_MspInit+0xdc>)
 800e046:	f043 0301 	orr.w	r3, r3, #1
 800e04a:	6313      	str	r3, [r2, #48]	; 0x30
 800e04c:	4b1f      	ldr	r3, [pc, #124]	; (800e0cc <HAL_PCD_MspInit+0xdc>)
 800e04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e050:	f003 0301 	and.w	r3, r3, #1
 800e054:	613b      	str	r3, [r7, #16]
 800e056:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e058:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e05c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e060:	2302      	movs	r3, #2
 800e062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e066:	2300      	movs	r3, #0
 800e068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e06c:	2303      	movs	r3, #3
 800e06e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e072:	230a      	movs	r3, #10
 800e074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e078:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e07c:	4619      	mov	r1, r3
 800e07e:	4814      	ldr	r0, [pc, #80]	; (800e0d0 <HAL_PCD_MspInit+0xe0>)
 800e080:	f7f4 fc80 	bl	8002984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e084:	4b11      	ldr	r3, [pc, #68]	; (800e0cc <HAL_PCD_MspInit+0xdc>)
 800e086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e088:	4a10      	ldr	r2, [pc, #64]	; (800e0cc <HAL_PCD_MspInit+0xdc>)
 800e08a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e08e:	6353      	str	r3, [r2, #52]	; 0x34
 800e090:	4b0e      	ldr	r3, [pc, #56]	; (800e0cc <HAL_PCD_MspInit+0xdc>)
 800e092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e098:	60fb      	str	r3, [r7, #12]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	4b0b      	ldr	r3, [pc, #44]	; (800e0cc <HAL_PCD_MspInit+0xdc>)
 800e09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0a0:	4a0a      	ldr	r2, [pc, #40]	; (800e0cc <HAL_PCD_MspInit+0xdc>)
 800e0a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e0a6:	6453      	str	r3, [r2, #68]	; 0x44
 800e0a8:	4b08      	ldr	r3, [pc, #32]	; (800e0cc <HAL_PCD_MspInit+0xdc>)
 800e0aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0b0:	60bb      	str	r3, [r7, #8]
 800e0b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	2043      	movs	r0, #67	; 0x43
 800e0ba:	f7f4 f886 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e0be:	2043      	movs	r0, #67	; 0x43
 800e0c0:	f7f4 f89f 	bl	8002202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e0c4:	bf00      	nop
 800e0c6:	37b8      	adds	r7, #184	; 0xb8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	40023800 	.word	0x40023800
 800e0d0:	40020000 	.word	0x40020000

0800e0d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	f7fc f945 	bl	800a37a <USBD_LL_SetupStage>
}
 800e0f0:	bf00      	nop
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	460b      	mov	r3, r1
 800e102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e10a:	78fa      	ldrb	r2, [r7, #3]
 800e10c:	6879      	ldr	r1, [r7, #4]
 800e10e:	4613      	mov	r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	4413      	add	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	440b      	add	r3, r1
 800e118:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	78fb      	ldrb	r3, [r7, #3]
 800e120:	4619      	mov	r1, r3
 800e122:	f7fc f97f 	bl	800a424 <USBD_LL_DataOutStage>
}
 800e126:	bf00      	nop
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b082      	sub	sp, #8
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	460b      	mov	r3, r1
 800e138:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e140:	78fa      	ldrb	r2, [r7, #3]
 800e142:	6879      	ldr	r1, [r7, #4]
 800e144:	4613      	mov	r3, r2
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	4413      	add	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	440b      	add	r3, r1
 800e14e:	334c      	adds	r3, #76	; 0x4c
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	78fb      	ldrb	r3, [r7, #3]
 800e154:	4619      	mov	r1, r3
 800e156:	f7fc fa18 	bl	800a58a <USBD_LL_DataInStage>
}
 800e15a:	bf00      	nop
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b082      	sub	sp, #8
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e170:	4618      	mov	r0, r3
 800e172:	f7fc fb4c 	bl	800a80e <USBD_LL_SOF>
}
 800e176:	bf00      	nop
 800e178:	3708      	adds	r7, #8
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e17e:	b580      	push	{r7, lr}
 800e180:	b084      	sub	sp, #16
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e186:	2301      	movs	r3, #1
 800e188:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d102      	bne.n	800e198 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e192:	2300      	movs	r3, #0
 800e194:	73fb      	strb	r3, [r7, #15]
 800e196:	e008      	b.n	800e1aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d102      	bne.n	800e1a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	73fb      	strb	r3, [r7, #15]
 800e1a4:	e001      	b.n	800e1aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e1a6:	f7f2 fdf7 	bl	8000d98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e1b0:	7bfa      	ldrb	r2, [r7, #15]
 800e1b2:	4611      	mov	r1, r2
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fc faec 	bl	800a792 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fc fa94 	bl	800a6ee <USBD_LL_Reset>
}
 800e1c6:	bf00      	nop
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
	...

0800e1d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fc fae7 	bl	800a7b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	6812      	ldr	r2, [r2, #0]
 800e1f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1f6:	f043 0301 	orr.w	r3, r3, #1
 800e1fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6a1b      	ldr	r3, [r3, #32]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d005      	beq.n	800e210 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e204:	4b04      	ldr	r3, [pc, #16]	; (800e218 <HAL_PCD_SuspendCallback+0x48>)
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	4a03      	ldr	r2, [pc, #12]	; (800e218 <HAL_PCD_SuspendCallback+0x48>)
 800e20a:	f043 0306 	orr.w	r3, r3, #6
 800e20e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e210:	bf00      	nop
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	e000ed00 	.word	0xe000ed00

0800e21c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fc fad7 	bl	800a7de <USBD_LL_Resume>
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	460b      	mov	r3, r1
 800e242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e24a:	78fa      	ldrb	r2, [r7, #3]
 800e24c:	4611      	mov	r1, r2
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fc fb2f 	bl	800a8b2 <USBD_LL_IsoOUTIncomplete>
}
 800e254:	bf00      	nop
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	460b      	mov	r3, r1
 800e266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e26e:	78fa      	ldrb	r2, [r7, #3]
 800e270:	4611      	mov	r1, r2
 800e272:	4618      	mov	r0, r3
 800e274:	f7fc faeb 	bl	800a84e <USBD_LL_IsoINIncomplete>
}
 800e278:	bf00      	nop
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fc fb41 	bl	800a916 <USBD_LL_DevConnected>
}
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fc fb3e 	bl	800a92c <USBD_LL_DevDisconnected>
}
 800e2b0:	bf00      	nop
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d13c      	bne.n	800e342 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e2c8:	4a20      	ldr	r2, [pc, #128]	; (800e34c <USBD_LL_Init+0x94>)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	4a1e      	ldr	r2, [pc, #120]	; (800e34c <USBD_LL_Init+0x94>)
 800e2d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e2d8:	4b1c      	ldr	r3, [pc, #112]	; (800e34c <USBD_LL_Init+0x94>)
 800e2da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e2de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e2e0:	4b1a      	ldr	r3, [pc, #104]	; (800e34c <USBD_LL_Init+0x94>)
 800e2e2:	2206      	movs	r2, #6
 800e2e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e2e6:	4b19      	ldr	r3, [pc, #100]	; (800e34c <USBD_LL_Init+0x94>)
 800e2e8:	2202      	movs	r2, #2
 800e2ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e2ec:	4b17      	ldr	r3, [pc, #92]	; (800e34c <USBD_LL_Init+0x94>)
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e2f2:	4b16      	ldr	r3, [pc, #88]	; (800e34c <USBD_LL_Init+0x94>)
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e2f8:	4b14      	ldr	r3, [pc, #80]	; (800e34c <USBD_LL_Init+0x94>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e2fe:	4b13      	ldr	r3, [pc, #76]	; (800e34c <USBD_LL_Init+0x94>)
 800e300:	2200      	movs	r2, #0
 800e302:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e304:	4b11      	ldr	r3, [pc, #68]	; (800e34c <USBD_LL_Init+0x94>)
 800e306:	2200      	movs	r2, #0
 800e308:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e30a:	4b10      	ldr	r3, [pc, #64]	; (800e34c <USBD_LL_Init+0x94>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e310:	4b0e      	ldr	r3, [pc, #56]	; (800e34c <USBD_LL_Init+0x94>)
 800e312:	2200      	movs	r2, #0
 800e314:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e316:	480d      	ldr	r0, [pc, #52]	; (800e34c <USBD_LL_Init+0x94>)
 800e318:	f7f4 fd11 	bl	8002d3e <HAL_PCD_Init>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e322:	f7f2 fd39 	bl	8000d98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e326:	2180      	movs	r1, #128	; 0x80
 800e328:	4808      	ldr	r0, [pc, #32]	; (800e34c <USBD_LL_Init+0x94>)
 800e32a:	f7f5 ff8c 	bl	8004246 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e32e:	2240      	movs	r2, #64	; 0x40
 800e330:	2100      	movs	r1, #0
 800e332:	4806      	ldr	r0, [pc, #24]	; (800e34c <USBD_LL_Init+0x94>)
 800e334:	f7f5 ff40 	bl	80041b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e338:	2280      	movs	r2, #128	; 0x80
 800e33a:	2101      	movs	r1, #1
 800e33c:	4803      	ldr	r0, [pc, #12]	; (800e34c <USBD_LL_Init+0x94>)
 800e33e:	f7f5 ff3b 	bl	80041b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e342:	2300      	movs	r3, #0
}
 800e344:	4618      	mov	r0, r3
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20004674 	.word	0x20004674

0800e350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e358:	2300      	movs	r3, #0
 800e35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e35c:	2300      	movs	r3, #0
 800e35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e366:	4618      	mov	r0, r3
 800e368:	f7f4 fe0d 	bl	8002f86 <HAL_PCD_Start>
 800e36c:	4603      	mov	r3, r0
 800e36e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e370:	7bfb      	ldrb	r3, [r7, #15]
 800e372:	4618      	mov	r0, r3
 800e374:	f000 f97e 	bl	800e674 <USBD_Get_USB_Status>
 800e378:	4603      	mov	r3, r0
 800e37a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e37c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}

0800e386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b084      	sub	sp, #16
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
 800e38e:	4608      	mov	r0, r1
 800e390:	4611      	mov	r1, r2
 800e392:	461a      	mov	r2, r3
 800e394:	4603      	mov	r3, r0
 800e396:	70fb      	strb	r3, [r7, #3]
 800e398:	460b      	mov	r3, r1
 800e39a:	70bb      	strb	r3, [r7, #2]
 800e39c:	4613      	mov	r3, r2
 800e39e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e3ae:	78bb      	ldrb	r3, [r7, #2]
 800e3b0:	883a      	ldrh	r2, [r7, #0]
 800e3b2:	78f9      	ldrb	r1, [r7, #3]
 800e3b4:	f7f5 fafa 	bl	80039ac <HAL_PCD_EP_Open>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f000 f958 	bl	800e674 <USBD_Get_USB_Status>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b084      	sub	sp, #16
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
 800e3da:	460b      	mov	r3, r1
 800e3dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3ec:	78fa      	ldrb	r2, [r7, #3]
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7f5 fb43 	bl	8003a7c <HAL_PCD_EP_Close>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3fa:	7bfb      	ldrb	r3, [r7, #15]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f000 f939 	bl	800e674 <USBD_Get_USB_Status>
 800e402:	4603      	mov	r3, r0
 800e404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e406:	7bbb      	ldrb	r3, [r7, #14]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	460b      	mov	r3, r1
 800e41a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e41c:	2300      	movs	r3, #0
 800e41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e420:	2300      	movs	r3, #0
 800e422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e42a:	78fa      	ldrb	r2, [r7, #3]
 800e42c:	4611      	mov	r1, r2
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f5 fc1b 	bl	8003c6a <HAL_PCD_EP_SetStall>
 800e434:	4603      	mov	r3, r0
 800e436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f000 f91a 	bl	800e674 <USBD_Get_USB_Status>
 800e440:	4603      	mov	r3, r0
 800e442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e444:	7bbb      	ldrb	r3, [r7, #14]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b084      	sub	sp, #16
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
 800e456:	460b      	mov	r3, r1
 800e458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e45a:	2300      	movs	r3, #0
 800e45c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e45e:	2300      	movs	r3, #0
 800e460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e468:	78fa      	ldrb	r2, [r7, #3]
 800e46a:	4611      	mov	r1, r2
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7f5 fc60 	bl	8003d32 <HAL_PCD_EP_ClrStall>
 800e472:	4603      	mov	r3, r0
 800e474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e476:	7bfb      	ldrb	r3, [r7, #15]
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 f8fb 	bl	800e674 <USBD_Get_USB_Status>
 800e47e:	4603      	mov	r3, r0
 800e480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e482:	7bbb      	ldrb	r3, [r7, #14]
}
 800e484:	4618      	mov	r0, r3
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e49e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e4a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	da0b      	bge.n	800e4c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e4a8:	78fb      	ldrb	r3, [r7, #3]
 800e4aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4ae:	68f9      	ldr	r1, [r7, #12]
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	00db      	lsls	r3, r3, #3
 800e4b4:	4413      	add	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	440b      	add	r3, r1
 800e4ba:	333e      	adds	r3, #62	; 0x3e
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	e00b      	b.n	800e4d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e4c0:	78fb      	ldrb	r3, [r7, #3]
 800e4c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4c6:	68f9      	ldr	r1, [r7, #12]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	00db      	lsls	r3, r3, #3
 800e4cc:	4413      	add	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	440b      	add	r3, r1
 800e4d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e4d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4fe:	78fa      	ldrb	r2, [r7, #3]
 800e500:	4611      	mov	r1, r2
 800e502:	4618      	mov	r0, r3
 800e504:	f7f5 fa2d 	bl	8003962 <HAL_PCD_SetAddress>
 800e508:	4603      	mov	r3, r0
 800e50a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e50c:	7bfb      	ldrb	r3, [r7, #15]
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 f8b0 	bl	800e674 <USBD_Get_USB_Status>
 800e514:	4603      	mov	r3, r0
 800e516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e518:	7bbb      	ldrb	r3, [r7, #14]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b086      	sub	sp, #24
 800e526:	af00      	add	r7, sp, #0
 800e528:	60f8      	str	r0, [r7, #12]
 800e52a:	607a      	str	r2, [r7, #4]
 800e52c:	603b      	str	r3, [r7, #0]
 800e52e:	460b      	mov	r3, r1
 800e530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e532:	2300      	movs	r3, #0
 800e534:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e536:	2300      	movs	r3, #0
 800e538:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e540:	7af9      	ldrb	r1, [r7, #11]
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	f7f5 fb46 	bl	8003bd6 <HAL_PCD_EP_Transmit>
 800e54a:	4603      	mov	r3, r0
 800e54c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e54e:	7dfb      	ldrb	r3, [r7, #23]
 800e550:	4618      	mov	r0, r3
 800e552:	f000 f88f 	bl	800e674 <USBD_Get_USB_Status>
 800e556:	4603      	mov	r3, r0
 800e558:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e55a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3718      	adds	r7, #24
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	607a      	str	r2, [r7, #4]
 800e56e:	603b      	str	r3, [r7, #0]
 800e570:	460b      	mov	r3, r1
 800e572:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e578:	2300      	movs	r3, #0
 800e57a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e582:	7af9      	ldrb	r1, [r7, #11]
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	f7f5 fac2 	bl	8003b10 <HAL_PCD_EP_Receive>
 800e58c:	4603      	mov	r3, r0
 800e58e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e590:	7dfb      	ldrb	r3, [r7, #23]
 800e592:	4618      	mov	r0, r3
 800e594:	f000 f86e 	bl	800e674 <USBD_Get_USB_Status>
 800e598:	4603      	mov	r3, r0
 800e59a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e59c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3718      	adds	r7, #24
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b082      	sub	sp, #8
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5b8:	78fa      	ldrb	r2, [r7, #3]
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7f5 faf2 	bl	8003ba6 <HAL_PCD_EP_GetRxCount>
 800e5c2:	4603      	mov	r3, r0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e5d8:	78fb      	ldrb	r3, [r7, #3]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d002      	beq.n	800e5e4 <HAL_PCDEx_LPM_Callback+0x18>
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d01f      	beq.n	800e622 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e5e2:	e03b      	b.n	800e65c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a1b      	ldr	r3, [r3, #32]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d007      	beq.n	800e5fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e5ec:	f000 f83c 	bl	800e668 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5f0:	4b1c      	ldr	r3, [pc, #112]	; (800e664 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	4a1b      	ldr	r2, [pc, #108]	; (800e664 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5f6:	f023 0306 	bic.w	r3, r3, #6
 800e5fa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	6812      	ldr	r2, [r2, #0]
 800e60a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e60e:	f023 0301 	bic.w	r3, r3, #1
 800e612:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fc f8df 	bl	800a7de <USBD_LL_Resume>
    break;
 800e620:	e01c      	b.n	800e65c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	6812      	ldr	r2, [r2, #0]
 800e630:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e634:	f043 0301 	orr.w	r3, r3, #1
 800e638:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e640:	4618      	mov	r0, r3
 800e642:	f7fc f8b6 	bl	800a7b2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6a1b      	ldr	r3, [r3, #32]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d005      	beq.n	800e65a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e64e:	4b05      	ldr	r3, [pc, #20]	; (800e664 <HAL_PCDEx_LPM_Callback+0x98>)
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	4a04      	ldr	r2, [pc, #16]	; (800e664 <HAL_PCDEx_LPM_Callback+0x98>)
 800e654:	f043 0306 	orr.w	r3, r3, #6
 800e658:	6113      	str	r3, [r2, #16]
    break;
 800e65a:	bf00      	nop
}
 800e65c:	bf00      	nop
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	e000ed00 	.word	0xe000ed00

0800e668 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e66c:	f7f2 f8c2 	bl	80007f4 <SystemClock_Config>
}
 800e670:	bf00      	nop
 800e672:	bd80      	pop	{r7, pc}

0800e674 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	4603      	mov	r3, r0
 800e67c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e67e:	2300      	movs	r3, #0
 800e680:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	2b03      	cmp	r3, #3
 800e686:	d817      	bhi.n	800e6b8 <USBD_Get_USB_Status+0x44>
 800e688:	a201      	add	r2, pc, #4	; (adr r2, 800e690 <USBD_Get_USB_Status+0x1c>)
 800e68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e68e:	bf00      	nop
 800e690:	0800e6a1 	.word	0x0800e6a1
 800e694:	0800e6a7 	.word	0x0800e6a7
 800e698:	0800e6ad 	.word	0x0800e6ad
 800e69c:	0800e6b3 	.word	0x0800e6b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a4:	e00b      	b.n	800e6be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	73fb      	strb	r3, [r7, #15]
    break;
 800e6aa:	e008      	b.n	800e6be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e6b0:	e005      	b.n	800e6be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	73fb      	strb	r3, [r7, #15]
    break;
 800e6b6:	e002      	b.n	800e6be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e6b8:	2303      	movs	r3, #3
 800e6ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e6bc:	bf00      	nop
  }
  return usb_status;
 800e6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3714      	adds	r7, #20
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <malloc>:
 800e6cc:	4b02      	ldr	r3, [pc, #8]	; (800e6d8 <malloc+0xc>)
 800e6ce:	4601      	mov	r1, r0
 800e6d0:	6818      	ldr	r0, [r3, #0]
 800e6d2:	f000 b82b 	b.w	800e72c <_malloc_r>
 800e6d6:	bf00      	nop
 800e6d8:	20000164 	.word	0x20000164

0800e6dc <free>:
 800e6dc:	4b02      	ldr	r3, [pc, #8]	; (800e6e8 <free+0xc>)
 800e6de:	4601      	mov	r1, r0
 800e6e0:	6818      	ldr	r0, [r3, #0]
 800e6e2:	f000 ba69 	b.w	800ebb8 <_free_r>
 800e6e6:	bf00      	nop
 800e6e8:	20000164 	.word	0x20000164

0800e6ec <sbrk_aligned>:
 800e6ec:	b570      	push	{r4, r5, r6, lr}
 800e6ee:	4e0e      	ldr	r6, [pc, #56]	; (800e728 <sbrk_aligned+0x3c>)
 800e6f0:	460c      	mov	r4, r1
 800e6f2:	6831      	ldr	r1, [r6, #0]
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	b911      	cbnz	r1, 800e6fe <sbrk_aligned+0x12>
 800e6f8:	f000 fa20 	bl	800eb3c <_sbrk_r>
 800e6fc:	6030      	str	r0, [r6, #0]
 800e6fe:	4621      	mov	r1, r4
 800e700:	4628      	mov	r0, r5
 800e702:	f000 fa1b 	bl	800eb3c <_sbrk_r>
 800e706:	1c43      	adds	r3, r0, #1
 800e708:	d00a      	beq.n	800e720 <sbrk_aligned+0x34>
 800e70a:	1cc4      	adds	r4, r0, #3
 800e70c:	f024 0403 	bic.w	r4, r4, #3
 800e710:	42a0      	cmp	r0, r4
 800e712:	d007      	beq.n	800e724 <sbrk_aligned+0x38>
 800e714:	1a21      	subs	r1, r4, r0
 800e716:	4628      	mov	r0, r5
 800e718:	f000 fa10 	bl	800eb3c <_sbrk_r>
 800e71c:	3001      	adds	r0, #1
 800e71e:	d101      	bne.n	800e724 <sbrk_aligned+0x38>
 800e720:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e724:	4620      	mov	r0, r4
 800e726:	bd70      	pop	{r4, r5, r6, pc}
 800e728:	20004b80 	.word	0x20004b80

0800e72c <_malloc_r>:
 800e72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e730:	1ccd      	adds	r5, r1, #3
 800e732:	f025 0503 	bic.w	r5, r5, #3
 800e736:	3508      	adds	r5, #8
 800e738:	2d0c      	cmp	r5, #12
 800e73a:	bf38      	it	cc
 800e73c:	250c      	movcc	r5, #12
 800e73e:	2d00      	cmp	r5, #0
 800e740:	4607      	mov	r7, r0
 800e742:	db01      	blt.n	800e748 <_malloc_r+0x1c>
 800e744:	42a9      	cmp	r1, r5
 800e746:	d905      	bls.n	800e754 <_malloc_r+0x28>
 800e748:	230c      	movs	r3, #12
 800e74a:	603b      	str	r3, [r7, #0]
 800e74c:	2600      	movs	r6, #0
 800e74e:	4630      	mov	r0, r6
 800e750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e754:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e828 <_malloc_r+0xfc>
 800e758:	f000 f89c 	bl	800e894 <__malloc_lock>
 800e75c:	f8d8 3000 	ldr.w	r3, [r8]
 800e760:	461c      	mov	r4, r3
 800e762:	bb5c      	cbnz	r4, 800e7bc <_malloc_r+0x90>
 800e764:	4629      	mov	r1, r5
 800e766:	4638      	mov	r0, r7
 800e768:	f7ff ffc0 	bl	800e6ec <sbrk_aligned>
 800e76c:	1c43      	adds	r3, r0, #1
 800e76e:	4604      	mov	r4, r0
 800e770:	d155      	bne.n	800e81e <_malloc_r+0xf2>
 800e772:	f8d8 4000 	ldr.w	r4, [r8]
 800e776:	4626      	mov	r6, r4
 800e778:	2e00      	cmp	r6, #0
 800e77a:	d145      	bne.n	800e808 <_malloc_r+0xdc>
 800e77c:	2c00      	cmp	r4, #0
 800e77e:	d048      	beq.n	800e812 <_malloc_r+0xe6>
 800e780:	6823      	ldr	r3, [r4, #0]
 800e782:	4631      	mov	r1, r6
 800e784:	4638      	mov	r0, r7
 800e786:	eb04 0903 	add.w	r9, r4, r3
 800e78a:	f000 f9d7 	bl	800eb3c <_sbrk_r>
 800e78e:	4581      	cmp	r9, r0
 800e790:	d13f      	bne.n	800e812 <_malloc_r+0xe6>
 800e792:	6821      	ldr	r1, [r4, #0]
 800e794:	1a6d      	subs	r5, r5, r1
 800e796:	4629      	mov	r1, r5
 800e798:	4638      	mov	r0, r7
 800e79a:	f7ff ffa7 	bl	800e6ec <sbrk_aligned>
 800e79e:	3001      	adds	r0, #1
 800e7a0:	d037      	beq.n	800e812 <_malloc_r+0xe6>
 800e7a2:	6823      	ldr	r3, [r4, #0]
 800e7a4:	442b      	add	r3, r5
 800e7a6:	6023      	str	r3, [r4, #0]
 800e7a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d038      	beq.n	800e822 <_malloc_r+0xf6>
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	42a2      	cmp	r2, r4
 800e7b4:	d12b      	bne.n	800e80e <_malloc_r+0xe2>
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	605a      	str	r2, [r3, #4]
 800e7ba:	e00f      	b.n	800e7dc <_malloc_r+0xb0>
 800e7bc:	6822      	ldr	r2, [r4, #0]
 800e7be:	1b52      	subs	r2, r2, r5
 800e7c0:	d41f      	bmi.n	800e802 <_malloc_r+0xd6>
 800e7c2:	2a0b      	cmp	r2, #11
 800e7c4:	d917      	bls.n	800e7f6 <_malloc_r+0xca>
 800e7c6:	1961      	adds	r1, r4, r5
 800e7c8:	42a3      	cmp	r3, r4
 800e7ca:	6025      	str	r5, [r4, #0]
 800e7cc:	bf18      	it	ne
 800e7ce:	6059      	strne	r1, [r3, #4]
 800e7d0:	6863      	ldr	r3, [r4, #4]
 800e7d2:	bf08      	it	eq
 800e7d4:	f8c8 1000 	streq.w	r1, [r8]
 800e7d8:	5162      	str	r2, [r4, r5]
 800e7da:	604b      	str	r3, [r1, #4]
 800e7dc:	4638      	mov	r0, r7
 800e7de:	f104 060b 	add.w	r6, r4, #11
 800e7e2:	f000 f85d 	bl	800e8a0 <__malloc_unlock>
 800e7e6:	f026 0607 	bic.w	r6, r6, #7
 800e7ea:	1d23      	adds	r3, r4, #4
 800e7ec:	1af2      	subs	r2, r6, r3
 800e7ee:	d0ae      	beq.n	800e74e <_malloc_r+0x22>
 800e7f0:	1b9b      	subs	r3, r3, r6
 800e7f2:	50a3      	str	r3, [r4, r2]
 800e7f4:	e7ab      	b.n	800e74e <_malloc_r+0x22>
 800e7f6:	42a3      	cmp	r3, r4
 800e7f8:	6862      	ldr	r2, [r4, #4]
 800e7fa:	d1dd      	bne.n	800e7b8 <_malloc_r+0x8c>
 800e7fc:	f8c8 2000 	str.w	r2, [r8]
 800e800:	e7ec      	b.n	800e7dc <_malloc_r+0xb0>
 800e802:	4623      	mov	r3, r4
 800e804:	6864      	ldr	r4, [r4, #4]
 800e806:	e7ac      	b.n	800e762 <_malloc_r+0x36>
 800e808:	4634      	mov	r4, r6
 800e80a:	6876      	ldr	r6, [r6, #4]
 800e80c:	e7b4      	b.n	800e778 <_malloc_r+0x4c>
 800e80e:	4613      	mov	r3, r2
 800e810:	e7cc      	b.n	800e7ac <_malloc_r+0x80>
 800e812:	230c      	movs	r3, #12
 800e814:	603b      	str	r3, [r7, #0]
 800e816:	4638      	mov	r0, r7
 800e818:	f000 f842 	bl	800e8a0 <__malloc_unlock>
 800e81c:	e797      	b.n	800e74e <_malloc_r+0x22>
 800e81e:	6025      	str	r5, [r4, #0]
 800e820:	e7dc      	b.n	800e7dc <_malloc_r+0xb0>
 800e822:	605b      	str	r3, [r3, #4]
 800e824:	deff      	udf	#255	; 0xff
 800e826:	bf00      	nop
 800e828:	20004b7c 	.word	0x20004b7c

0800e82c <sniprintf>:
 800e82c:	b40c      	push	{r2, r3}
 800e82e:	b530      	push	{r4, r5, lr}
 800e830:	4b17      	ldr	r3, [pc, #92]	; (800e890 <sniprintf+0x64>)
 800e832:	1e0c      	subs	r4, r1, #0
 800e834:	681d      	ldr	r5, [r3, #0]
 800e836:	b09d      	sub	sp, #116	; 0x74
 800e838:	da08      	bge.n	800e84c <sniprintf+0x20>
 800e83a:	238b      	movs	r3, #139	; 0x8b
 800e83c:	602b      	str	r3, [r5, #0]
 800e83e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e842:	b01d      	add	sp, #116	; 0x74
 800e844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e848:	b002      	add	sp, #8
 800e84a:	4770      	bx	lr
 800e84c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e850:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e854:	bf14      	ite	ne
 800e856:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e85a:	4623      	moveq	r3, r4
 800e85c:	9304      	str	r3, [sp, #16]
 800e85e:	9307      	str	r3, [sp, #28]
 800e860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e864:	9002      	str	r0, [sp, #8]
 800e866:	9006      	str	r0, [sp, #24]
 800e868:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e86c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e86e:	ab21      	add	r3, sp, #132	; 0x84
 800e870:	a902      	add	r1, sp, #8
 800e872:	4628      	mov	r0, r5
 800e874:	9301      	str	r3, [sp, #4]
 800e876:	f000 fa45 	bl	800ed04 <_svfiprintf_r>
 800e87a:	1c43      	adds	r3, r0, #1
 800e87c:	bfbc      	itt	lt
 800e87e:	238b      	movlt	r3, #139	; 0x8b
 800e880:	602b      	strlt	r3, [r5, #0]
 800e882:	2c00      	cmp	r4, #0
 800e884:	d0dd      	beq.n	800e842 <sniprintf+0x16>
 800e886:	9b02      	ldr	r3, [sp, #8]
 800e888:	2200      	movs	r2, #0
 800e88a:	701a      	strb	r2, [r3, #0]
 800e88c:	e7d9      	b.n	800e842 <sniprintf+0x16>
 800e88e:	bf00      	nop
 800e890:	20000164 	.word	0x20000164

0800e894 <__malloc_lock>:
 800e894:	4801      	ldr	r0, [pc, #4]	; (800e89c <__malloc_lock+0x8>)
 800e896:	f000 b98c 	b.w	800ebb2 <__retarget_lock_acquire_recursive>
 800e89a:	bf00      	nop
 800e89c:	20004cc0 	.word	0x20004cc0

0800e8a0 <__malloc_unlock>:
 800e8a0:	4801      	ldr	r0, [pc, #4]	; (800e8a8 <__malloc_unlock+0x8>)
 800e8a2:	f000 b987 	b.w	800ebb4 <__retarget_lock_release_recursive>
 800e8a6:	bf00      	nop
 800e8a8:	20004cc0 	.word	0x20004cc0

0800e8ac <std>:
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	b510      	push	{r4, lr}
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	e9c0 3300 	strd	r3, r3, [r0]
 800e8b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8ba:	6083      	str	r3, [r0, #8]
 800e8bc:	8181      	strh	r1, [r0, #12]
 800e8be:	6643      	str	r3, [r0, #100]	; 0x64
 800e8c0:	81c2      	strh	r2, [r0, #14]
 800e8c2:	6183      	str	r3, [r0, #24]
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	2208      	movs	r2, #8
 800e8c8:	305c      	adds	r0, #92	; 0x5c
 800e8ca:	f000 f92e 	bl	800eb2a <memset>
 800e8ce:	4b0d      	ldr	r3, [pc, #52]	; (800e904 <std+0x58>)
 800e8d0:	6263      	str	r3, [r4, #36]	; 0x24
 800e8d2:	4b0d      	ldr	r3, [pc, #52]	; (800e908 <std+0x5c>)
 800e8d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8d6:	4b0d      	ldr	r3, [pc, #52]	; (800e90c <std+0x60>)
 800e8d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8da:	4b0d      	ldr	r3, [pc, #52]	; (800e910 <std+0x64>)
 800e8dc:	6323      	str	r3, [r4, #48]	; 0x30
 800e8de:	4b0d      	ldr	r3, [pc, #52]	; (800e914 <std+0x68>)
 800e8e0:	6224      	str	r4, [r4, #32]
 800e8e2:	429c      	cmp	r4, r3
 800e8e4:	d006      	beq.n	800e8f4 <std+0x48>
 800e8e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e8ea:	4294      	cmp	r4, r2
 800e8ec:	d002      	beq.n	800e8f4 <std+0x48>
 800e8ee:	33d0      	adds	r3, #208	; 0xd0
 800e8f0:	429c      	cmp	r4, r3
 800e8f2:	d105      	bne.n	800e900 <std+0x54>
 800e8f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8fc:	f000 b958 	b.w	800ebb0 <__retarget_lock_init_recursive>
 800e900:	bd10      	pop	{r4, pc}
 800e902:	bf00      	nop
 800e904:	0800f605 	.word	0x0800f605
 800e908:	0800f627 	.word	0x0800f627
 800e90c:	0800f65f 	.word	0x0800f65f
 800e910:	0800f683 	.word	0x0800f683
 800e914:	20004b84 	.word	0x20004b84

0800e918 <stdio_exit_handler>:
 800e918:	4a02      	ldr	r2, [pc, #8]	; (800e924 <stdio_exit_handler+0xc>)
 800e91a:	4903      	ldr	r1, [pc, #12]	; (800e928 <stdio_exit_handler+0x10>)
 800e91c:	4803      	ldr	r0, [pc, #12]	; (800e92c <stdio_exit_handler+0x14>)
 800e91e:	f000 b869 	b.w	800e9f4 <_fwalk_sglue>
 800e922:	bf00      	nop
 800e924:	2000010c 	.word	0x2000010c
 800e928:	0800f5b5 	.word	0x0800f5b5
 800e92c:	20000118 	.word	0x20000118

0800e930 <cleanup_stdio>:
 800e930:	6841      	ldr	r1, [r0, #4]
 800e932:	4b0c      	ldr	r3, [pc, #48]	; (800e964 <cleanup_stdio+0x34>)
 800e934:	4299      	cmp	r1, r3
 800e936:	b510      	push	{r4, lr}
 800e938:	4604      	mov	r4, r0
 800e93a:	d001      	beq.n	800e940 <cleanup_stdio+0x10>
 800e93c:	f000 fe3a 	bl	800f5b4 <_fflush_r>
 800e940:	68a1      	ldr	r1, [r4, #8]
 800e942:	4b09      	ldr	r3, [pc, #36]	; (800e968 <cleanup_stdio+0x38>)
 800e944:	4299      	cmp	r1, r3
 800e946:	d002      	beq.n	800e94e <cleanup_stdio+0x1e>
 800e948:	4620      	mov	r0, r4
 800e94a:	f000 fe33 	bl	800f5b4 <_fflush_r>
 800e94e:	68e1      	ldr	r1, [r4, #12]
 800e950:	4b06      	ldr	r3, [pc, #24]	; (800e96c <cleanup_stdio+0x3c>)
 800e952:	4299      	cmp	r1, r3
 800e954:	d004      	beq.n	800e960 <cleanup_stdio+0x30>
 800e956:	4620      	mov	r0, r4
 800e958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e95c:	f000 be2a 	b.w	800f5b4 <_fflush_r>
 800e960:	bd10      	pop	{r4, pc}
 800e962:	bf00      	nop
 800e964:	20004b84 	.word	0x20004b84
 800e968:	20004bec 	.word	0x20004bec
 800e96c:	20004c54 	.word	0x20004c54

0800e970 <global_stdio_init.part.0>:
 800e970:	b510      	push	{r4, lr}
 800e972:	4b0b      	ldr	r3, [pc, #44]	; (800e9a0 <global_stdio_init.part.0+0x30>)
 800e974:	4c0b      	ldr	r4, [pc, #44]	; (800e9a4 <global_stdio_init.part.0+0x34>)
 800e976:	4a0c      	ldr	r2, [pc, #48]	; (800e9a8 <global_stdio_init.part.0+0x38>)
 800e978:	601a      	str	r2, [r3, #0]
 800e97a:	4620      	mov	r0, r4
 800e97c:	2200      	movs	r2, #0
 800e97e:	2104      	movs	r1, #4
 800e980:	f7ff ff94 	bl	800e8ac <std>
 800e984:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e988:	2201      	movs	r2, #1
 800e98a:	2109      	movs	r1, #9
 800e98c:	f7ff ff8e 	bl	800e8ac <std>
 800e990:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e994:	2202      	movs	r2, #2
 800e996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e99a:	2112      	movs	r1, #18
 800e99c:	f7ff bf86 	b.w	800e8ac <std>
 800e9a0:	20004cbc 	.word	0x20004cbc
 800e9a4:	20004b84 	.word	0x20004b84
 800e9a8:	0800e919 	.word	0x0800e919

0800e9ac <__sfp_lock_acquire>:
 800e9ac:	4801      	ldr	r0, [pc, #4]	; (800e9b4 <__sfp_lock_acquire+0x8>)
 800e9ae:	f000 b900 	b.w	800ebb2 <__retarget_lock_acquire_recursive>
 800e9b2:	bf00      	nop
 800e9b4:	20004cc1 	.word	0x20004cc1

0800e9b8 <__sfp_lock_release>:
 800e9b8:	4801      	ldr	r0, [pc, #4]	; (800e9c0 <__sfp_lock_release+0x8>)
 800e9ba:	f000 b8fb 	b.w	800ebb4 <__retarget_lock_release_recursive>
 800e9be:	bf00      	nop
 800e9c0:	20004cc1 	.word	0x20004cc1

0800e9c4 <__sinit>:
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	f7ff fff0 	bl	800e9ac <__sfp_lock_acquire>
 800e9cc:	6a23      	ldr	r3, [r4, #32]
 800e9ce:	b11b      	cbz	r3, 800e9d8 <__sinit+0x14>
 800e9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d4:	f7ff bff0 	b.w	800e9b8 <__sfp_lock_release>
 800e9d8:	4b04      	ldr	r3, [pc, #16]	; (800e9ec <__sinit+0x28>)
 800e9da:	6223      	str	r3, [r4, #32]
 800e9dc:	4b04      	ldr	r3, [pc, #16]	; (800e9f0 <__sinit+0x2c>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1f5      	bne.n	800e9d0 <__sinit+0xc>
 800e9e4:	f7ff ffc4 	bl	800e970 <global_stdio_init.part.0>
 800e9e8:	e7f2      	b.n	800e9d0 <__sinit+0xc>
 800e9ea:	bf00      	nop
 800e9ec:	0800e931 	.word	0x0800e931
 800e9f0:	20004cbc 	.word	0x20004cbc

0800e9f4 <_fwalk_sglue>:
 800e9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	4688      	mov	r8, r1
 800e9fc:	4614      	mov	r4, r2
 800e9fe:	2600      	movs	r6, #0
 800ea00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea04:	f1b9 0901 	subs.w	r9, r9, #1
 800ea08:	d505      	bpl.n	800ea16 <_fwalk_sglue+0x22>
 800ea0a:	6824      	ldr	r4, [r4, #0]
 800ea0c:	2c00      	cmp	r4, #0
 800ea0e:	d1f7      	bne.n	800ea00 <_fwalk_sglue+0xc>
 800ea10:	4630      	mov	r0, r6
 800ea12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea16:	89ab      	ldrh	r3, [r5, #12]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d907      	bls.n	800ea2c <_fwalk_sglue+0x38>
 800ea1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea20:	3301      	adds	r3, #1
 800ea22:	d003      	beq.n	800ea2c <_fwalk_sglue+0x38>
 800ea24:	4629      	mov	r1, r5
 800ea26:	4638      	mov	r0, r7
 800ea28:	47c0      	blx	r8
 800ea2a:	4306      	orrs	r6, r0
 800ea2c:	3568      	adds	r5, #104	; 0x68
 800ea2e:	e7e9      	b.n	800ea04 <_fwalk_sglue+0x10>

0800ea30 <iprintf>:
 800ea30:	b40f      	push	{r0, r1, r2, r3}
 800ea32:	b507      	push	{r0, r1, r2, lr}
 800ea34:	4906      	ldr	r1, [pc, #24]	; (800ea50 <iprintf+0x20>)
 800ea36:	ab04      	add	r3, sp, #16
 800ea38:	6808      	ldr	r0, [r1, #0]
 800ea3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea3e:	6881      	ldr	r1, [r0, #8]
 800ea40:	9301      	str	r3, [sp, #4]
 800ea42:	f000 fa87 	bl	800ef54 <_vfiprintf_r>
 800ea46:	b003      	add	sp, #12
 800ea48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea4c:	b004      	add	sp, #16
 800ea4e:	4770      	bx	lr
 800ea50:	20000164 	.word	0x20000164

0800ea54 <_puts_r>:
 800ea54:	6a03      	ldr	r3, [r0, #32]
 800ea56:	b570      	push	{r4, r5, r6, lr}
 800ea58:	6884      	ldr	r4, [r0, #8]
 800ea5a:	4605      	mov	r5, r0
 800ea5c:	460e      	mov	r6, r1
 800ea5e:	b90b      	cbnz	r3, 800ea64 <_puts_r+0x10>
 800ea60:	f7ff ffb0 	bl	800e9c4 <__sinit>
 800ea64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea66:	07db      	lsls	r3, r3, #31
 800ea68:	d405      	bmi.n	800ea76 <_puts_r+0x22>
 800ea6a:	89a3      	ldrh	r3, [r4, #12]
 800ea6c:	0598      	lsls	r0, r3, #22
 800ea6e:	d402      	bmi.n	800ea76 <_puts_r+0x22>
 800ea70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea72:	f000 f89e 	bl	800ebb2 <__retarget_lock_acquire_recursive>
 800ea76:	89a3      	ldrh	r3, [r4, #12]
 800ea78:	0719      	lsls	r1, r3, #28
 800ea7a:	d513      	bpl.n	800eaa4 <_puts_r+0x50>
 800ea7c:	6923      	ldr	r3, [r4, #16]
 800ea7e:	b18b      	cbz	r3, 800eaa4 <_puts_r+0x50>
 800ea80:	3e01      	subs	r6, #1
 800ea82:	68a3      	ldr	r3, [r4, #8]
 800ea84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	60a3      	str	r3, [r4, #8]
 800ea8c:	b9e9      	cbnz	r1, 800eaca <_puts_r+0x76>
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	da2e      	bge.n	800eaf0 <_puts_r+0x9c>
 800ea92:	4622      	mov	r2, r4
 800ea94:	210a      	movs	r1, #10
 800ea96:	4628      	mov	r0, r5
 800ea98:	f000 fe26 	bl	800f6e8 <__swbuf_r>
 800ea9c:	3001      	adds	r0, #1
 800ea9e:	d007      	beq.n	800eab0 <_puts_r+0x5c>
 800eaa0:	250a      	movs	r5, #10
 800eaa2:	e007      	b.n	800eab4 <_puts_r+0x60>
 800eaa4:	4621      	mov	r1, r4
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f000 fe5c 	bl	800f764 <__swsetup_r>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d0e7      	beq.n	800ea80 <_puts_r+0x2c>
 800eab0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800eab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eab6:	07da      	lsls	r2, r3, #31
 800eab8:	d405      	bmi.n	800eac6 <_puts_r+0x72>
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	059b      	lsls	r3, r3, #22
 800eabe:	d402      	bmi.n	800eac6 <_puts_r+0x72>
 800eac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eac2:	f000 f877 	bl	800ebb4 <__retarget_lock_release_recursive>
 800eac6:	4628      	mov	r0, r5
 800eac8:	bd70      	pop	{r4, r5, r6, pc}
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	da04      	bge.n	800ead8 <_puts_r+0x84>
 800eace:	69a2      	ldr	r2, [r4, #24]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	dc06      	bgt.n	800eae2 <_puts_r+0x8e>
 800ead4:	290a      	cmp	r1, #10
 800ead6:	d004      	beq.n	800eae2 <_puts_r+0x8e>
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	1c5a      	adds	r2, r3, #1
 800eadc:	6022      	str	r2, [r4, #0]
 800eade:	7019      	strb	r1, [r3, #0]
 800eae0:	e7cf      	b.n	800ea82 <_puts_r+0x2e>
 800eae2:	4622      	mov	r2, r4
 800eae4:	4628      	mov	r0, r5
 800eae6:	f000 fdff 	bl	800f6e8 <__swbuf_r>
 800eaea:	3001      	adds	r0, #1
 800eaec:	d1c9      	bne.n	800ea82 <_puts_r+0x2e>
 800eaee:	e7df      	b.n	800eab0 <_puts_r+0x5c>
 800eaf0:	6823      	ldr	r3, [r4, #0]
 800eaf2:	250a      	movs	r5, #10
 800eaf4:	1c5a      	adds	r2, r3, #1
 800eaf6:	6022      	str	r2, [r4, #0]
 800eaf8:	701d      	strb	r5, [r3, #0]
 800eafa:	e7db      	b.n	800eab4 <_puts_r+0x60>

0800eafc <puts>:
 800eafc:	4b02      	ldr	r3, [pc, #8]	; (800eb08 <puts+0xc>)
 800eafe:	4601      	mov	r1, r0
 800eb00:	6818      	ldr	r0, [r3, #0]
 800eb02:	f7ff bfa7 	b.w	800ea54 <_puts_r>
 800eb06:	bf00      	nop
 800eb08:	20000164 	.word	0x20000164

0800eb0c <strcat>:
 800eb0c:	b510      	push	{r4, lr}
 800eb0e:	4602      	mov	r2, r0
 800eb10:	7814      	ldrb	r4, [r2, #0]
 800eb12:	4613      	mov	r3, r2
 800eb14:	3201      	adds	r2, #1
 800eb16:	2c00      	cmp	r4, #0
 800eb18:	d1fa      	bne.n	800eb10 <strcat+0x4>
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb24:	2a00      	cmp	r2, #0
 800eb26:	d1f9      	bne.n	800eb1c <strcat+0x10>
 800eb28:	bd10      	pop	{r4, pc}

0800eb2a <memset>:
 800eb2a:	4402      	add	r2, r0
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d100      	bne.n	800eb34 <memset+0xa>
 800eb32:	4770      	bx	lr
 800eb34:	f803 1b01 	strb.w	r1, [r3], #1
 800eb38:	e7f9      	b.n	800eb2e <memset+0x4>
	...

0800eb3c <_sbrk_r>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	4d06      	ldr	r5, [pc, #24]	; (800eb58 <_sbrk_r+0x1c>)
 800eb40:	2300      	movs	r3, #0
 800eb42:	4604      	mov	r4, r0
 800eb44:	4608      	mov	r0, r1
 800eb46:	602b      	str	r3, [r5, #0]
 800eb48:	f7f2 fbde 	bl	8001308 <_sbrk>
 800eb4c:	1c43      	adds	r3, r0, #1
 800eb4e:	d102      	bne.n	800eb56 <_sbrk_r+0x1a>
 800eb50:	682b      	ldr	r3, [r5, #0]
 800eb52:	b103      	cbz	r3, 800eb56 <_sbrk_r+0x1a>
 800eb54:	6023      	str	r3, [r4, #0]
 800eb56:	bd38      	pop	{r3, r4, r5, pc}
 800eb58:	20004cc4 	.word	0x20004cc4

0800eb5c <__errno>:
 800eb5c:	4b01      	ldr	r3, [pc, #4]	; (800eb64 <__errno+0x8>)
 800eb5e:	6818      	ldr	r0, [r3, #0]
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	20000164 	.word	0x20000164

0800eb68 <__libc_init_array>:
 800eb68:	b570      	push	{r4, r5, r6, lr}
 800eb6a:	4d0d      	ldr	r5, [pc, #52]	; (800eba0 <__libc_init_array+0x38>)
 800eb6c:	4c0d      	ldr	r4, [pc, #52]	; (800eba4 <__libc_init_array+0x3c>)
 800eb6e:	1b64      	subs	r4, r4, r5
 800eb70:	10a4      	asrs	r4, r4, #2
 800eb72:	2600      	movs	r6, #0
 800eb74:	42a6      	cmp	r6, r4
 800eb76:	d109      	bne.n	800eb8c <__libc_init_array+0x24>
 800eb78:	4d0b      	ldr	r5, [pc, #44]	; (800eba8 <__libc_init_array+0x40>)
 800eb7a:	4c0c      	ldr	r4, [pc, #48]	; (800ebac <__libc_init_array+0x44>)
 800eb7c:	f000 ff44 	bl	800fa08 <_init>
 800eb80:	1b64      	subs	r4, r4, r5
 800eb82:	10a4      	asrs	r4, r4, #2
 800eb84:	2600      	movs	r6, #0
 800eb86:	42a6      	cmp	r6, r4
 800eb88:	d105      	bne.n	800eb96 <__libc_init_array+0x2e>
 800eb8a:	bd70      	pop	{r4, r5, r6, pc}
 800eb8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb90:	4798      	blx	r3
 800eb92:	3601      	adds	r6, #1
 800eb94:	e7ee      	b.n	800eb74 <__libc_init_array+0xc>
 800eb96:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb9a:	4798      	blx	r3
 800eb9c:	3601      	adds	r6, #1
 800eb9e:	e7f2      	b.n	800eb86 <__libc_init_array+0x1e>
 800eba0:	0800fcc4 	.word	0x0800fcc4
 800eba4:	0800fcc4 	.word	0x0800fcc4
 800eba8:	0800fcc4 	.word	0x0800fcc4
 800ebac:	0800fcc8 	.word	0x0800fcc8

0800ebb0 <__retarget_lock_init_recursive>:
 800ebb0:	4770      	bx	lr

0800ebb2 <__retarget_lock_acquire_recursive>:
 800ebb2:	4770      	bx	lr

0800ebb4 <__retarget_lock_release_recursive>:
 800ebb4:	4770      	bx	lr
	...

0800ebb8 <_free_r>:
 800ebb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebba:	2900      	cmp	r1, #0
 800ebbc:	d044      	beq.n	800ec48 <_free_r+0x90>
 800ebbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebc2:	9001      	str	r0, [sp, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f1a1 0404 	sub.w	r4, r1, #4
 800ebca:	bfb8      	it	lt
 800ebcc:	18e4      	addlt	r4, r4, r3
 800ebce:	f7ff fe61 	bl	800e894 <__malloc_lock>
 800ebd2:	4a1e      	ldr	r2, [pc, #120]	; (800ec4c <_free_r+0x94>)
 800ebd4:	9801      	ldr	r0, [sp, #4]
 800ebd6:	6813      	ldr	r3, [r2, #0]
 800ebd8:	b933      	cbnz	r3, 800ebe8 <_free_r+0x30>
 800ebda:	6063      	str	r3, [r4, #4]
 800ebdc:	6014      	str	r4, [r2, #0]
 800ebde:	b003      	add	sp, #12
 800ebe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebe4:	f7ff be5c 	b.w	800e8a0 <__malloc_unlock>
 800ebe8:	42a3      	cmp	r3, r4
 800ebea:	d908      	bls.n	800ebfe <_free_r+0x46>
 800ebec:	6825      	ldr	r5, [r4, #0]
 800ebee:	1961      	adds	r1, r4, r5
 800ebf0:	428b      	cmp	r3, r1
 800ebf2:	bf01      	itttt	eq
 800ebf4:	6819      	ldreq	r1, [r3, #0]
 800ebf6:	685b      	ldreq	r3, [r3, #4]
 800ebf8:	1949      	addeq	r1, r1, r5
 800ebfa:	6021      	streq	r1, [r4, #0]
 800ebfc:	e7ed      	b.n	800ebda <_free_r+0x22>
 800ebfe:	461a      	mov	r2, r3
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	b10b      	cbz	r3, 800ec08 <_free_r+0x50>
 800ec04:	42a3      	cmp	r3, r4
 800ec06:	d9fa      	bls.n	800ebfe <_free_r+0x46>
 800ec08:	6811      	ldr	r1, [r2, #0]
 800ec0a:	1855      	adds	r5, r2, r1
 800ec0c:	42a5      	cmp	r5, r4
 800ec0e:	d10b      	bne.n	800ec28 <_free_r+0x70>
 800ec10:	6824      	ldr	r4, [r4, #0]
 800ec12:	4421      	add	r1, r4
 800ec14:	1854      	adds	r4, r2, r1
 800ec16:	42a3      	cmp	r3, r4
 800ec18:	6011      	str	r1, [r2, #0]
 800ec1a:	d1e0      	bne.n	800ebde <_free_r+0x26>
 800ec1c:	681c      	ldr	r4, [r3, #0]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	6053      	str	r3, [r2, #4]
 800ec22:	440c      	add	r4, r1
 800ec24:	6014      	str	r4, [r2, #0]
 800ec26:	e7da      	b.n	800ebde <_free_r+0x26>
 800ec28:	d902      	bls.n	800ec30 <_free_r+0x78>
 800ec2a:	230c      	movs	r3, #12
 800ec2c:	6003      	str	r3, [r0, #0]
 800ec2e:	e7d6      	b.n	800ebde <_free_r+0x26>
 800ec30:	6825      	ldr	r5, [r4, #0]
 800ec32:	1961      	adds	r1, r4, r5
 800ec34:	428b      	cmp	r3, r1
 800ec36:	bf04      	itt	eq
 800ec38:	6819      	ldreq	r1, [r3, #0]
 800ec3a:	685b      	ldreq	r3, [r3, #4]
 800ec3c:	6063      	str	r3, [r4, #4]
 800ec3e:	bf04      	itt	eq
 800ec40:	1949      	addeq	r1, r1, r5
 800ec42:	6021      	streq	r1, [r4, #0]
 800ec44:	6054      	str	r4, [r2, #4]
 800ec46:	e7ca      	b.n	800ebde <_free_r+0x26>
 800ec48:	b003      	add	sp, #12
 800ec4a:	bd30      	pop	{r4, r5, pc}
 800ec4c:	20004b7c 	.word	0x20004b7c

0800ec50 <__ssputs_r>:
 800ec50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec54:	688e      	ldr	r6, [r1, #8]
 800ec56:	461f      	mov	r7, r3
 800ec58:	42be      	cmp	r6, r7
 800ec5a:	680b      	ldr	r3, [r1, #0]
 800ec5c:	4682      	mov	sl, r0
 800ec5e:	460c      	mov	r4, r1
 800ec60:	4690      	mov	r8, r2
 800ec62:	d82c      	bhi.n	800ecbe <__ssputs_r+0x6e>
 800ec64:	898a      	ldrh	r2, [r1, #12]
 800ec66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec6a:	d026      	beq.n	800ecba <__ssputs_r+0x6a>
 800ec6c:	6965      	ldr	r5, [r4, #20]
 800ec6e:	6909      	ldr	r1, [r1, #16]
 800ec70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec74:	eba3 0901 	sub.w	r9, r3, r1
 800ec78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec7c:	1c7b      	adds	r3, r7, #1
 800ec7e:	444b      	add	r3, r9
 800ec80:	106d      	asrs	r5, r5, #1
 800ec82:	429d      	cmp	r5, r3
 800ec84:	bf38      	it	cc
 800ec86:	461d      	movcc	r5, r3
 800ec88:	0553      	lsls	r3, r2, #21
 800ec8a:	d527      	bpl.n	800ecdc <__ssputs_r+0x8c>
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	f7ff fd4d 	bl	800e72c <_malloc_r>
 800ec92:	4606      	mov	r6, r0
 800ec94:	b360      	cbz	r0, 800ecf0 <__ssputs_r+0xa0>
 800ec96:	6921      	ldr	r1, [r4, #16]
 800ec98:	464a      	mov	r2, r9
 800ec9a:	f000 fe9f 	bl	800f9dc <memcpy>
 800ec9e:	89a3      	ldrh	r3, [r4, #12]
 800eca0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eca8:	81a3      	strh	r3, [r4, #12]
 800ecaa:	6126      	str	r6, [r4, #16]
 800ecac:	6165      	str	r5, [r4, #20]
 800ecae:	444e      	add	r6, r9
 800ecb0:	eba5 0509 	sub.w	r5, r5, r9
 800ecb4:	6026      	str	r6, [r4, #0]
 800ecb6:	60a5      	str	r5, [r4, #8]
 800ecb8:	463e      	mov	r6, r7
 800ecba:	42be      	cmp	r6, r7
 800ecbc:	d900      	bls.n	800ecc0 <__ssputs_r+0x70>
 800ecbe:	463e      	mov	r6, r7
 800ecc0:	6820      	ldr	r0, [r4, #0]
 800ecc2:	4632      	mov	r2, r6
 800ecc4:	4641      	mov	r1, r8
 800ecc6:	f000 fe07 	bl	800f8d8 <memmove>
 800ecca:	68a3      	ldr	r3, [r4, #8]
 800eccc:	1b9b      	subs	r3, r3, r6
 800ecce:	60a3      	str	r3, [r4, #8]
 800ecd0:	6823      	ldr	r3, [r4, #0]
 800ecd2:	4433      	add	r3, r6
 800ecd4:	6023      	str	r3, [r4, #0]
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecdc:	462a      	mov	r2, r5
 800ecde:	f000 fcd4 	bl	800f68a <_realloc_r>
 800ece2:	4606      	mov	r6, r0
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d1e0      	bne.n	800ecaa <__ssputs_r+0x5a>
 800ece8:	6921      	ldr	r1, [r4, #16]
 800ecea:	4650      	mov	r0, sl
 800ecec:	f7ff ff64 	bl	800ebb8 <_free_r>
 800ecf0:	230c      	movs	r3, #12
 800ecf2:	f8ca 3000 	str.w	r3, [sl]
 800ecf6:	89a3      	ldrh	r3, [r4, #12]
 800ecf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecfc:	81a3      	strh	r3, [r4, #12]
 800ecfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed02:	e7e9      	b.n	800ecd8 <__ssputs_r+0x88>

0800ed04 <_svfiprintf_r>:
 800ed04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed08:	4698      	mov	r8, r3
 800ed0a:	898b      	ldrh	r3, [r1, #12]
 800ed0c:	061b      	lsls	r3, r3, #24
 800ed0e:	b09d      	sub	sp, #116	; 0x74
 800ed10:	4607      	mov	r7, r0
 800ed12:	460d      	mov	r5, r1
 800ed14:	4614      	mov	r4, r2
 800ed16:	d50e      	bpl.n	800ed36 <_svfiprintf_r+0x32>
 800ed18:	690b      	ldr	r3, [r1, #16]
 800ed1a:	b963      	cbnz	r3, 800ed36 <_svfiprintf_r+0x32>
 800ed1c:	2140      	movs	r1, #64	; 0x40
 800ed1e:	f7ff fd05 	bl	800e72c <_malloc_r>
 800ed22:	6028      	str	r0, [r5, #0]
 800ed24:	6128      	str	r0, [r5, #16]
 800ed26:	b920      	cbnz	r0, 800ed32 <_svfiprintf_r+0x2e>
 800ed28:	230c      	movs	r3, #12
 800ed2a:	603b      	str	r3, [r7, #0]
 800ed2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed30:	e0d0      	b.n	800eed4 <_svfiprintf_r+0x1d0>
 800ed32:	2340      	movs	r3, #64	; 0x40
 800ed34:	616b      	str	r3, [r5, #20]
 800ed36:	2300      	movs	r3, #0
 800ed38:	9309      	str	r3, [sp, #36]	; 0x24
 800ed3a:	2320      	movs	r3, #32
 800ed3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed44:	2330      	movs	r3, #48	; 0x30
 800ed46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eeec <_svfiprintf_r+0x1e8>
 800ed4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed4e:	f04f 0901 	mov.w	r9, #1
 800ed52:	4623      	mov	r3, r4
 800ed54:	469a      	mov	sl, r3
 800ed56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed5a:	b10a      	cbz	r2, 800ed60 <_svfiprintf_r+0x5c>
 800ed5c:	2a25      	cmp	r2, #37	; 0x25
 800ed5e:	d1f9      	bne.n	800ed54 <_svfiprintf_r+0x50>
 800ed60:	ebba 0b04 	subs.w	fp, sl, r4
 800ed64:	d00b      	beq.n	800ed7e <_svfiprintf_r+0x7a>
 800ed66:	465b      	mov	r3, fp
 800ed68:	4622      	mov	r2, r4
 800ed6a:	4629      	mov	r1, r5
 800ed6c:	4638      	mov	r0, r7
 800ed6e:	f7ff ff6f 	bl	800ec50 <__ssputs_r>
 800ed72:	3001      	adds	r0, #1
 800ed74:	f000 80a9 	beq.w	800eeca <_svfiprintf_r+0x1c6>
 800ed78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed7a:	445a      	add	r2, fp
 800ed7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ed7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f000 80a1 	beq.w	800eeca <_svfiprintf_r+0x1c6>
 800ed88:	2300      	movs	r3, #0
 800ed8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed92:	f10a 0a01 	add.w	sl, sl, #1
 800ed96:	9304      	str	r3, [sp, #16]
 800ed98:	9307      	str	r3, [sp, #28]
 800ed9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed9e:	931a      	str	r3, [sp, #104]	; 0x68
 800eda0:	4654      	mov	r4, sl
 800eda2:	2205      	movs	r2, #5
 800eda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda8:	4850      	ldr	r0, [pc, #320]	; (800eeec <_svfiprintf_r+0x1e8>)
 800edaa:	f7f1 fa49 	bl	8000240 <memchr>
 800edae:	9a04      	ldr	r2, [sp, #16]
 800edb0:	b9d8      	cbnz	r0, 800edea <_svfiprintf_r+0xe6>
 800edb2:	06d0      	lsls	r0, r2, #27
 800edb4:	bf44      	itt	mi
 800edb6:	2320      	movmi	r3, #32
 800edb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edbc:	0711      	lsls	r1, r2, #28
 800edbe:	bf44      	itt	mi
 800edc0:	232b      	movmi	r3, #43	; 0x2b
 800edc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edc6:	f89a 3000 	ldrb.w	r3, [sl]
 800edca:	2b2a      	cmp	r3, #42	; 0x2a
 800edcc:	d015      	beq.n	800edfa <_svfiprintf_r+0xf6>
 800edce:	9a07      	ldr	r2, [sp, #28]
 800edd0:	4654      	mov	r4, sl
 800edd2:	2000      	movs	r0, #0
 800edd4:	f04f 0c0a 	mov.w	ip, #10
 800edd8:	4621      	mov	r1, r4
 800edda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edde:	3b30      	subs	r3, #48	; 0x30
 800ede0:	2b09      	cmp	r3, #9
 800ede2:	d94d      	bls.n	800ee80 <_svfiprintf_r+0x17c>
 800ede4:	b1b0      	cbz	r0, 800ee14 <_svfiprintf_r+0x110>
 800ede6:	9207      	str	r2, [sp, #28]
 800ede8:	e014      	b.n	800ee14 <_svfiprintf_r+0x110>
 800edea:	eba0 0308 	sub.w	r3, r0, r8
 800edee:	fa09 f303 	lsl.w	r3, r9, r3
 800edf2:	4313      	orrs	r3, r2
 800edf4:	9304      	str	r3, [sp, #16]
 800edf6:	46a2      	mov	sl, r4
 800edf8:	e7d2      	b.n	800eda0 <_svfiprintf_r+0x9c>
 800edfa:	9b03      	ldr	r3, [sp, #12]
 800edfc:	1d19      	adds	r1, r3, #4
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	9103      	str	r1, [sp, #12]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	bfbb      	ittet	lt
 800ee06:	425b      	neglt	r3, r3
 800ee08:	f042 0202 	orrlt.w	r2, r2, #2
 800ee0c:	9307      	strge	r3, [sp, #28]
 800ee0e:	9307      	strlt	r3, [sp, #28]
 800ee10:	bfb8      	it	lt
 800ee12:	9204      	strlt	r2, [sp, #16]
 800ee14:	7823      	ldrb	r3, [r4, #0]
 800ee16:	2b2e      	cmp	r3, #46	; 0x2e
 800ee18:	d10c      	bne.n	800ee34 <_svfiprintf_r+0x130>
 800ee1a:	7863      	ldrb	r3, [r4, #1]
 800ee1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee1e:	d134      	bne.n	800ee8a <_svfiprintf_r+0x186>
 800ee20:	9b03      	ldr	r3, [sp, #12]
 800ee22:	1d1a      	adds	r2, r3, #4
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	9203      	str	r2, [sp, #12]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	bfb8      	it	lt
 800ee2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ee30:	3402      	adds	r4, #2
 800ee32:	9305      	str	r3, [sp, #20]
 800ee34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eefc <_svfiprintf_r+0x1f8>
 800ee38:	7821      	ldrb	r1, [r4, #0]
 800ee3a:	2203      	movs	r2, #3
 800ee3c:	4650      	mov	r0, sl
 800ee3e:	f7f1 f9ff 	bl	8000240 <memchr>
 800ee42:	b138      	cbz	r0, 800ee54 <_svfiprintf_r+0x150>
 800ee44:	9b04      	ldr	r3, [sp, #16]
 800ee46:	eba0 000a 	sub.w	r0, r0, sl
 800ee4a:	2240      	movs	r2, #64	; 0x40
 800ee4c:	4082      	lsls	r2, r0
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	3401      	adds	r4, #1
 800ee52:	9304      	str	r3, [sp, #16]
 800ee54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee58:	4825      	ldr	r0, [pc, #148]	; (800eef0 <_svfiprintf_r+0x1ec>)
 800ee5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee5e:	2206      	movs	r2, #6
 800ee60:	f7f1 f9ee 	bl	8000240 <memchr>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d038      	beq.n	800eeda <_svfiprintf_r+0x1d6>
 800ee68:	4b22      	ldr	r3, [pc, #136]	; (800eef4 <_svfiprintf_r+0x1f0>)
 800ee6a:	bb1b      	cbnz	r3, 800eeb4 <_svfiprintf_r+0x1b0>
 800ee6c:	9b03      	ldr	r3, [sp, #12]
 800ee6e:	3307      	adds	r3, #7
 800ee70:	f023 0307 	bic.w	r3, r3, #7
 800ee74:	3308      	adds	r3, #8
 800ee76:	9303      	str	r3, [sp, #12]
 800ee78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee7a:	4433      	add	r3, r6
 800ee7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee7e:	e768      	b.n	800ed52 <_svfiprintf_r+0x4e>
 800ee80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee84:	460c      	mov	r4, r1
 800ee86:	2001      	movs	r0, #1
 800ee88:	e7a6      	b.n	800edd8 <_svfiprintf_r+0xd4>
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	3401      	adds	r4, #1
 800ee8e:	9305      	str	r3, [sp, #20]
 800ee90:	4619      	mov	r1, r3
 800ee92:	f04f 0c0a 	mov.w	ip, #10
 800ee96:	4620      	mov	r0, r4
 800ee98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee9c:	3a30      	subs	r2, #48	; 0x30
 800ee9e:	2a09      	cmp	r2, #9
 800eea0:	d903      	bls.n	800eeaa <_svfiprintf_r+0x1a6>
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d0c6      	beq.n	800ee34 <_svfiprintf_r+0x130>
 800eea6:	9105      	str	r1, [sp, #20]
 800eea8:	e7c4      	b.n	800ee34 <_svfiprintf_r+0x130>
 800eeaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeae:	4604      	mov	r4, r0
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	e7f0      	b.n	800ee96 <_svfiprintf_r+0x192>
 800eeb4:	ab03      	add	r3, sp, #12
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	462a      	mov	r2, r5
 800eeba:	4b0f      	ldr	r3, [pc, #60]	; (800eef8 <_svfiprintf_r+0x1f4>)
 800eebc:	a904      	add	r1, sp, #16
 800eebe:	4638      	mov	r0, r7
 800eec0:	f3af 8000 	nop.w
 800eec4:	1c42      	adds	r2, r0, #1
 800eec6:	4606      	mov	r6, r0
 800eec8:	d1d6      	bne.n	800ee78 <_svfiprintf_r+0x174>
 800eeca:	89ab      	ldrh	r3, [r5, #12]
 800eecc:	065b      	lsls	r3, r3, #25
 800eece:	f53f af2d 	bmi.w	800ed2c <_svfiprintf_r+0x28>
 800eed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eed4:	b01d      	add	sp, #116	; 0x74
 800eed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeda:	ab03      	add	r3, sp, #12
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	462a      	mov	r2, r5
 800eee0:	4b05      	ldr	r3, [pc, #20]	; (800eef8 <_svfiprintf_r+0x1f4>)
 800eee2:	a904      	add	r1, sp, #16
 800eee4:	4638      	mov	r0, r7
 800eee6:	f000 f9bd 	bl	800f264 <_printf_i>
 800eeea:	e7eb      	b.n	800eec4 <_svfiprintf_r+0x1c0>
 800eeec:	0800fc88 	.word	0x0800fc88
 800eef0:	0800fc92 	.word	0x0800fc92
 800eef4:	00000000 	.word	0x00000000
 800eef8:	0800ec51 	.word	0x0800ec51
 800eefc:	0800fc8e 	.word	0x0800fc8e

0800ef00 <__sfputc_r>:
 800ef00:	6893      	ldr	r3, [r2, #8]
 800ef02:	3b01      	subs	r3, #1
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	b410      	push	{r4}
 800ef08:	6093      	str	r3, [r2, #8]
 800ef0a:	da08      	bge.n	800ef1e <__sfputc_r+0x1e>
 800ef0c:	6994      	ldr	r4, [r2, #24]
 800ef0e:	42a3      	cmp	r3, r4
 800ef10:	db01      	blt.n	800ef16 <__sfputc_r+0x16>
 800ef12:	290a      	cmp	r1, #10
 800ef14:	d103      	bne.n	800ef1e <__sfputc_r+0x1e>
 800ef16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef1a:	f000 bbe5 	b.w	800f6e8 <__swbuf_r>
 800ef1e:	6813      	ldr	r3, [r2, #0]
 800ef20:	1c58      	adds	r0, r3, #1
 800ef22:	6010      	str	r0, [r2, #0]
 800ef24:	7019      	strb	r1, [r3, #0]
 800ef26:	4608      	mov	r0, r1
 800ef28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef2c:	4770      	bx	lr

0800ef2e <__sfputs_r>:
 800ef2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef30:	4606      	mov	r6, r0
 800ef32:	460f      	mov	r7, r1
 800ef34:	4614      	mov	r4, r2
 800ef36:	18d5      	adds	r5, r2, r3
 800ef38:	42ac      	cmp	r4, r5
 800ef3a:	d101      	bne.n	800ef40 <__sfputs_r+0x12>
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	e007      	b.n	800ef50 <__sfputs_r+0x22>
 800ef40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef44:	463a      	mov	r2, r7
 800ef46:	4630      	mov	r0, r6
 800ef48:	f7ff ffda 	bl	800ef00 <__sfputc_r>
 800ef4c:	1c43      	adds	r3, r0, #1
 800ef4e:	d1f3      	bne.n	800ef38 <__sfputs_r+0xa>
 800ef50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef54 <_vfiprintf_r>:
 800ef54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef58:	460d      	mov	r5, r1
 800ef5a:	b09d      	sub	sp, #116	; 0x74
 800ef5c:	4614      	mov	r4, r2
 800ef5e:	4698      	mov	r8, r3
 800ef60:	4606      	mov	r6, r0
 800ef62:	b118      	cbz	r0, 800ef6c <_vfiprintf_r+0x18>
 800ef64:	6a03      	ldr	r3, [r0, #32]
 800ef66:	b90b      	cbnz	r3, 800ef6c <_vfiprintf_r+0x18>
 800ef68:	f7ff fd2c 	bl	800e9c4 <__sinit>
 800ef6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef6e:	07d9      	lsls	r1, r3, #31
 800ef70:	d405      	bmi.n	800ef7e <_vfiprintf_r+0x2a>
 800ef72:	89ab      	ldrh	r3, [r5, #12]
 800ef74:	059a      	lsls	r2, r3, #22
 800ef76:	d402      	bmi.n	800ef7e <_vfiprintf_r+0x2a>
 800ef78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef7a:	f7ff fe1a 	bl	800ebb2 <__retarget_lock_acquire_recursive>
 800ef7e:	89ab      	ldrh	r3, [r5, #12]
 800ef80:	071b      	lsls	r3, r3, #28
 800ef82:	d501      	bpl.n	800ef88 <_vfiprintf_r+0x34>
 800ef84:	692b      	ldr	r3, [r5, #16]
 800ef86:	b99b      	cbnz	r3, 800efb0 <_vfiprintf_r+0x5c>
 800ef88:	4629      	mov	r1, r5
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	f000 fbea 	bl	800f764 <__swsetup_r>
 800ef90:	b170      	cbz	r0, 800efb0 <_vfiprintf_r+0x5c>
 800ef92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef94:	07dc      	lsls	r4, r3, #31
 800ef96:	d504      	bpl.n	800efa2 <_vfiprintf_r+0x4e>
 800ef98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef9c:	b01d      	add	sp, #116	; 0x74
 800ef9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa2:	89ab      	ldrh	r3, [r5, #12]
 800efa4:	0598      	lsls	r0, r3, #22
 800efa6:	d4f7      	bmi.n	800ef98 <_vfiprintf_r+0x44>
 800efa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efaa:	f7ff fe03 	bl	800ebb4 <__retarget_lock_release_recursive>
 800efae:	e7f3      	b.n	800ef98 <_vfiprintf_r+0x44>
 800efb0:	2300      	movs	r3, #0
 800efb2:	9309      	str	r3, [sp, #36]	; 0x24
 800efb4:	2320      	movs	r3, #32
 800efb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efba:	f8cd 800c 	str.w	r8, [sp, #12]
 800efbe:	2330      	movs	r3, #48	; 0x30
 800efc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f174 <_vfiprintf_r+0x220>
 800efc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efc8:	f04f 0901 	mov.w	r9, #1
 800efcc:	4623      	mov	r3, r4
 800efce:	469a      	mov	sl, r3
 800efd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efd4:	b10a      	cbz	r2, 800efda <_vfiprintf_r+0x86>
 800efd6:	2a25      	cmp	r2, #37	; 0x25
 800efd8:	d1f9      	bne.n	800efce <_vfiprintf_r+0x7a>
 800efda:	ebba 0b04 	subs.w	fp, sl, r4
 800efde:	d00b      	beq.n	800eff8 <_vfiprintf_r+0xa4>
 800efe0:	465b      	mov	r3, fp
 800efe2:	4622      	mov	r2, r4
 800efe4:	4629      	mov	r1, r5
 800efe6:	4630      	mov	r0, r6
 800efe8:	f7ff ffa1 	bl	800ef2e <__sfputs_r>
 800efec:	3001      	adds	r0, #1
 800efee:	f000 80a9 	beq.w	800f144 <_vfiprintf_r+0x1f0>
 800eff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eff4:	445a      	add	r2, fp
 800eff6:	9209      	str	r2, [sp, #36]	; 0x24
 800eff8:	f89a 3000 	ldrb.w	r3, [sl]
 800effc:	2b00      	cmp	r3, #0
 800effe:	f000 80a1 	beq.w	800f144 <_vfiprintf_r+0x1f0>
 800f002:	2300      	movs	r3, #0
 800f004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f00c:	f10a 0a01 	add.w	sl, sl, #1
 800f010:	9304      	str	r3, [sp, #16]
 800f012:	9307      	str	r3, [sp, #28]
 800f014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f018:	931a      	str	r3, [sp, #104]	; 0x68
 800f01a:	4654      	mov	r4, sl
 800f01c:	2205      	movs	r2, #5
 800f01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f022:	4854      	ldr	r0, [pc, #336]	; (800f174 <_vfiprintf_r+0x220>)
 800f024:	f7f1 f90c 	bl	8000240 <memchr>
 800f028:	9a04      	ldr	r2, [sp, #16]
 800f02a:	b9d8      	cbnz	r0, 800f064 <_vfiprintf_r+0x110>
 800f02c:	06d1      	lsls	r1, r2, #27
 800f02e:	bf44      	itt	mi
 800f030:	2320      	movmi	r3, #32
 800f032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f036:	0713      	lsls	r3, r2, #28
 800f038:	bf44      	itt	mi
 800f03a:	232b      	movmi	r3, #43	; 0x2b
 800f03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f040:	f89a 3000 	ldrb.w	r3, [sl]
 800f044:	2b2a      	cmp	r3, #42	; 0x2a
 800f046:	d015      	beq.n	800f074 <_vfiprintf_r+0x120>
 800f048:	9a07      	ldr	r2, [sp, #28]
 800f04a:	4654      	mov	r4, sl
 800f04c:	2000      	movs	r0, #0
 800f04e:	f04f 0c0a 	mov.w	ip, #10
 800f052:	4621      	mov	r1, r4
 800f054:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f058:	3b30      	subs	r3, #48	; 0x30
 800f05a:	2b09      	cmp	r3, #9
 800f05c:	d94d      	bls.n	800f0fa <_vfiprintf_r+0x1a6>
 800f05e:	b1b0      	cbz	r0, 800f08e <_vfiprintf_r+0x13a>
 800f060:	9207      	str	r2, [sp, #28]
 800f062:	e014      	b.n	800f08e <_vfiprintf_r+0x13a>
 800f064:	eba0 0308 	sub.w	r3, r0, r8
 800f068:	fa09 f303 	lsl.w	r3, r9, r3
 800f06c:	4313      	orrs	r3, r2
 800f06e:	9304      	str	r3, [sp, #16]
 800f070:	46a2      	mov	sl, r4
 800f072:	e7d2      	b.n	800f01a <_vfiprintf_r+0xc6>
 800f074:	9b03      	ldr	r3, [sp, #12]
 800f076:	1d19      	adds	r1, r3, #4
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	9103      	str	r1, [sp, #12]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	bfbb      	ittet	lt
 800f080:	425b      	neglt	r3, r3
 800f082:	f042 0202 	orrlt.w	r2, r2, #2
 800f086:	9307      	strge	r3, [sp, #28]
 800f088:	9307      	strlt	r3, [sp, #28]
 800f08a:	bfb8      	it	lt
 800f08c:	9204      	strlt	r2, [sp, #16]
 800f08e:	7823      	ldrb	r3, [r4, #0]
 800f090:	2b2e      	cmp	r3, #46	; 0x2e
 800f092:	d10c      	bne.n	800f0ae <_vfiprintf_r+0x15a>
 800f094:	7863      	ldrb	r3, [r4, #1]
 800f096:	2b2a      	cmp	r3, #42	; 0x2a
 800f098:	d134      	bne.n	800f104 <_vfiprintf_r+0x1b0>
 800f09a:	9b03      	ldr	r3, [sp, #12]
 800f09c:	1d1a      	adds	r2, r3, #4
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	9203      	str	r2, [sp, #12]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	bfb8      	it	lt
 800f0a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f0aa:	3402      	adds	r4, #2
 800f0ac:	9305      	str	r3, [sp, #20]
 800f0ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f184 <_vfiprintf_r+0x230>
 800f0b2:	7821      	ldrb	r1, [r4, #0]
 800f0b4:	2203      	movs	r2, #3
 800f0b6:	4650      	mov	r0, sl
 800f0b8:	f7f1 f8c2 	bl	8000240 <memchr>
 800f0bc:	b138      	cbz	r0, 800f0ce <_vfiprintf_r+0x17a>
 800f0be:	9b04      	ldr	r3, [sp, #16]
 800f0c0:	eba0 000a 	sub.w	r0, r0, sl
 800f0c4:	2240      	movs	r2, #64	; 0x40
 800f0c6:	4082      	lsls	r2, r0
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	3401      	adds	r4, #1
 800f0cc:	9304      	str	r3, [sp, #16]
 800f0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0d2:	4829      	ldr	r0, [pc, #164]	; (800f178 <_vfiprintf_r+0x224>)
 800f0d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0d8:	2206      	movs	r2, #6
 800f0da:	f7f1 f8b1 	bl	8000240 <memchr>
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	d03f      	beq.n	800f162 <_vfiprintf_r+0x20e>
 800f0e2:	4b26      	ldr	r3, [pc, #152]	; (800f17c <_vfiprintf_r+0x228>)
 800f0e4:	bb1b      	cbnz	r3, 800f12e <_vfiprintf_r+0x1da>
 800f0e6:	9b03      	ldr	r3, [sp, #12]
 800f0e8:	3307      	adds	r3, #7
 800f0ea:	f023 0307 	bic.w	r3, r3, #7
 800f0ee:	3308      	adds	r3, #8
 800f0f0:	9303      	str	r3, [sp, #12]
 800f0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0f4:	443b      	add	r3, r7
 800f0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f8:	e768      	b.n	800efcc <_vfiprintf_r+0x78>
 800f0fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0fe:	460c      	mov	r4, r1
 800f100:	2001      	movs	r0, #1
 800f102:	e7a6      	b.n	800f052 <_vfiprintf_r+0xfe>
 800f104:	2300      	movs	r3, #0
 800f106:	3401      	adds	r4, #1
 800f108:	9305      	str	r3, [sp, #20]
 800f10a:	4619      	mov	r1, r3
 800f10c:	f04f 0c0a 	mov.w	ip, #10
 800f110:	4620      	mov	r0, r4
 800f112:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f116:	3a30      	subs	r2, #48	; 0x30
 800f118:	2a09      	cmp	r2, #9
 800f11a:	d903      	bls.n	800f124 <_vfiprintf_r+0x1d0>
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d0c6      	beq.n	800f0ae <_vfiprintf_r+0x15a>
 800f120:	9105      	str	r1, [sp, #20]
 800f122:	e7c4      	b.n	800f0ae <_vfiprintf_r+0x15a>
 800f124:	fb0c 2101 	mla	r1, ip, r1, r2
 800f128:	4604      	mov	r4, r0
 800f12a:	2301      	movs	r3, #1
 800f12c:	e7f0      	b.n	800f110 <_vfiprintf_r+0x1bc>
 800f12e:	ab03      	add	r3, sp, #12
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	462a      	mov	r2, r5
 800f134:	4b12      	ldr	r3, [pc, #72]	; (800f180 <_vfiprintf_r+0x22c>)
 800f136:	a904      	add	r1, sp, #16
 800f138:	4630      	mov	r0, r6
 800f13a:	f3af 8000 	nop.w
 800f13e:	4607      	mov	r7, r0
 800f140:	1c78      	adds	r0, r7, #1
 800f142:	d1d6      	bne.n	800f0f2 <_vfiprintf_r+0x19e>
 800f144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f146:	07d9      	lsls	r1, r3, #31
 800f148:	d405      	bmi.n	800f156 <_vfiprintf_r+0x202>
 800f14a:	89ab      	ldrh	r3, [r5, #12]
 800f14c:	059a      	lsls	r2, r3, #22
 800f14e:	d402      	bmi.n	800f156 <_vfiprintf_r+0x202>
 800f150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f152:	f7ff fd2f 	bl	800ebb4 <__retarget_lock_release_recursive>
 800f156:	89ab      	ldrh	r3, [r5, #12]
 800f158:	065b      	lsls	r3, r3, #25
 800f15a:	f53f af1d 	bmi.w	800ef98 <_vfiprintf_r+0x44>
 800f15e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f160:	e71c      	b.n	800ef9c <_vfiprintf_r+0x48>
 800f162:	ab03      	add	r3, sp, #12
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	462a      	mov	r2, r5
 800f168:	4b05      	ldr	r3, [pc, #20]	; (800f180 <_vfiprintf_r+0x22c>)
 800f16a:	a904      	add	r1, sp, #16
 800f16c:	4630      	mov	r0, r6
 800f16e:	f000 f879 	bl	800f264 <_printf_i>
 800f172:	e7e4      	b.n	800f13e <_vfiprintf_r+0x1ea>
 800f174:	0800fc88 	.word	0x0800fc88
 800f178:	0800fc92 	.word	0x0800fc92
 800f17c:	00000000 	.word	0x00000000
 800f180:	0800ef2f 	.word	0x0800ef2f
 800f184:	0800fc8e 	.word	0x0800fc8e

0800f188 <_printf_common>:
 800f188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f18c:	4616      	mov	r6, r2
 800f18e:	4699      	mov	r9, r3
 800f190:	688a      	ldr	r2, [r1, #8]
 800f192:	690b      	ldr	r3, [r1, #16]
 800f194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f198:	4293      	cmp	r3, r2
 800f19a:	bfb8      	it	lt
 800f19c:	4613      	movlt	r3, r2
 800f19e:	6033      	str	r3, [r6, #0]
 800f1a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f1a4:	4607      	mov	r7, r0
 800f1a6:	460c      	mov	r4, r1
 800f1a8:	b10a      	cbz	r2, 800f1ae <_printf_common+0x26>
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	6033      	str	r3, [r6, #0]
 800f1ae:	6823      	ldr	r3, [r4, #0]
 800f1b0:	0699      	lsls	r1, r3, #26
 800f1b2:	bf42      	ittt	mi
 800f1b4:	6833      	ldrmi	r3, [r6, #0]
 800f1b6:	3302      	addmi	r3, #2
 800f1b8:	6033      	strmi	r3, [r6, #0]
 800f1ba:	6825      	ldr	r5, [r4, #0]
 800f1bc:	f015 0506 	ands.w	r5, r5, #6
 800f1c0:	d106      	bne.n	800f1d0 <_printf_common+0x48>
 800f1c2:	f104 0a19 	add.w	sl, r4, #25
 800f1c6:	68e3      	ldr	r3, [r4, #12]
 800f1c8:	6832      	ldr	r2, [r6, #0]
 800f1ca:	1a9b      	subs	r3, r3, r2
 800f1cc:	42ab      	cmp	r3, r5
 800f1ce:	dc26      	bgt.n	800f21e <_printf_common+0x96>
 800f1d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f1d4:	1e13      	subs	r3, r2, #0
 800f1d6:	6822      	ldr	r2, [r4, #0]
 800f1d8:	bf18      	it	ne
 800f1da:	2301      	movne	r3, #1
 800f1dc:	0692      	lsls	r2, r2, #26
 800f1de:	d42b      	bmi.n	800f238 <_printf_common+0xb0>
 800f1e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f1e4:	4649      	mov	r1, r9
 800f1e6:	4638      	mov	r0, r7
 800f1e8:	47c0      	blx	r8
 800f1ea:	3001      	adds	r0, #1
 800f1ec:	d01e      	beq.n	800f22c <_printf_common+0xa4>
 800f1ee:	6823      	ldr	r3, [r4, #0]
 800f1f0:	6922      	ldr	r2, [r4, #16]
 800f1f2:	f003 0306 	and.w	r3, r3, #6
 800f1f6:	2b04      	cmp	r3, #4
 800f1f8:	bf02      	ittt	eq
 800f1fa:	68e5      	ldreq	r5, [r4, #12]
 800f1fc:	6833      	ldreq	r3, [r6, #0]
 800f1fe:	1aed      	subeq	r5, r5, r3
 800f200:	68a3      	ldr	r3, [r4, #8]
 800f202:	bf0c      	ite	eq
 800f204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f208:	2500      	movne	r5, #0
 800f20a:	4293      	cmp	r3, r2
 800f20c:	bfc4      	itt	gt
 800f20e:	1a9b      	subgt	r3, r3, r2
 800f210:	18ed      	addgt	r5, r5, r3
 800f212:	2600      	movs	r6, #0
 800f214:	341a      	adds	r4, #26
 800f216:	42b5      	cmp	r5, r6
 800f218:	d11a      	bne.n	800f250 <_printf_common+0xc8>
 800f21a:	2000      	movs	r0, #0
 800f21c:	e008      	b.n	800f230 <_printf_common+0xa8>
 800f21e:	2301      	movs	r3, #1
 800f220:	4652      	mov	r2, sl
 800f222:	4649      	mov	r1, r9
 800f224:	4638      	mov	r0, r7
 800f226:	47c0      	blx	r8
 800f228:	3001      	adds	r0, #1
 800f22a:	d103      	bne.n	800f234 <_printf_common+0xac>
 800f22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f234:	3501      	adds	r5, #1
 800f236:	e7c6      	b.n	800f1c6 <_printf_common+0x3e>
 800f238:	18e1      	adds	r1, r4, r3
 800f23a:	1c5a      	adds	r2, r3, #1
 800f23c:	2030      	movs	r0, #48	; 0x30
 800f23e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f242:	4422      	add	r2, r4
 800f244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f24c:	3302      	adds	r3, #2
 800f24e:	e7c7      	b.n	800f1e0 <_printf_common+0x58>
 800f250:	2301      	movs	r3, #1
 800f252:	4622      	mov	r2, r4
 800f254:	4649      	mov	r1, r9
 800f256:	4638      	mov	r0, r7
 800f258:	47c0      	blx	r8
 800f25a:	3001      	adds	r0, #1
 800f25c:	d0e6      	beq.n	800f22c <_printf_common+0xa4>
 800f25e:	3601      	adds	r6, #1
 800f260:	e7d9      	b.n	800f216 <_printf_common+0x8e>
	...

0800f264 <_printf_i>:
 800f264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f268:	7e0f      	ldrb	r7, [r1, #24]
 800f26a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f26c:	2f78      	cmp	r7, #120	; 0x78
 800f26e:	4691      	mov	r9, r2
 800f270:	4680      	mov	r8, r0
 800f272:	460c      	mov	r4, r1
 800f274:	469a      	mov	sl, r3
 800f276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f27a:	d807      	bhi.n	800f28c <_printf_i+0x28>
 800f27c:	2f62      	cmp	r7, #98	; 0x62
 800f27e:	d80a      	bhi.n	800f296 <_printf_i+0x32>
 800f280:	2f00      	cmp	r7, #0
 800f282:	f000 80d4 	beq.w	800f42e <_printf_i+0x1ca>
 800f286:	2f58      	cmp	r7, #88	; 0x58
 800f288:	f000 80c0 	beq.w	800f40c <_printf_i+0x1a8>
 800f28c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f294:	e03a      	b.n	800f30c <_printf_i+0xa8>
 800f296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f29a:	2b15      	cmp	r3, #21
 800f29c:	d8f6      	bhi.n	800f28c <_printf_i+0x28>
 800f29e:	a101      	add	r1, pc, #4	; (adr r1, 800f2a4 <_printf_i+0x40>)
 800f2a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2a4:	0800f2fd 	.word	0x0800f2fd
 800f2a8:	0800f311 	.word	0x0800f311
 800f2ac:	0800f28d 	.word	0x0800f28d
 800f2b0:	0800f28d 	.word	0x0800f28d
 800f2b4:	0800f28d 	.word	0x0800f28d
 800f2b8:	0800f28d 	.word	0x0800f28d
 800f2bc:	0800f311 	.word	0x0800f311
 800f2c0:	0800f28d 	.word	0x0800f28d
 800f2c4:	0800f28d 	.word	0x0800f28d
 800f2c8:	0800f28d 	.word	0x0800f28d
 800f2cc:	0800f28d 	.word	0x0800f28d
 800f2d0:	0800f415 	.word	0x0800f415
 800f2d4:	0800f33d 	.word	0x0800f33d
 800f2d8:	0800f3cf 	.word	0x0800f3cf
 800f2dc:	0800f28d 	.word	0x0800f28d
 800f2e0:	0800f28d 	.word	0x0800f28d
 800f2e4:	0800f437 	.word	0x0800f437
 800f2e8:	0800f28d 	.word	0x0800f28d
 800f2ec:	0800f33d 	.word	0x0800f33d
 800f2f0:	0800f28d 	.word	0x0800f28d
 800f2f4:	0800f28d 	.word	0x0800f28d
 800f2f8:	0800f3d7 	.word	0x0800f3d7
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	1d1a      	adds	r2, r3, #4
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	602a      	str	r2, [r5, #0]
 800f304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f30c:	2301      	movs	r3, #1
 800f30e:	e09f      	b.n	800f450 <_printf_i+0x1ec>
 800f310:	6820      	ldr	r0, [r4, #0]
 800f312:	682b      	ldr	r3, [r5, #0]
 800f314:	0607      	lsls	r7, r0, #24
 800f316:	f103 0104 	add.w	r1, r3, #4
 800f31a:	6029      	str	r1, [r5, #0]
 800f31c:	d501      	bpl.n	800f322 <_printf_i+0xbe>
 800f31e:	681e      	ldr	r6, [r3, #0]
 800f320:	e003      	b.n	800f32a <_printf_i+0xc6>
 800f322:	0646      	lsls	r6, r0, #25
 800f324:	d5fb      	bpl.n	800f31e <_printf_i+0xba>
 800f326:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f32a:	2e00      	cmp	r6, #0
 800f32c:	da03      	bge.n	800f336 <_printf_i+0xd2>
 800f32e:	232d      	movs	r3, #45	; 0x2d
 800f330:	4276      	negs	r6, r6
 800f332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f336:	485a      	ldr	r0, [pc, #360]	; (800f4a0 <_printf_i+0x23c>)
 800f338:	230a      	movs	r3, #10
 800f33a:	e012      	b.n	800f362 <_printf_i+0xfe>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	6820      	ldr	r0, [r4, #0]
 800f340:	1d19      	adds	r1, r3, #4
 800f342:	6029      	str	r1, [r5, #0]
 800f344:	0605      	lsls	r5, r0, #24
 800f346:	d501      	bpl.n	800f34c <_printf_i+0xe8>
 800f348:	681e      	ldr	r6, [r3, #0]
 800f34a:	e002      	b.n	800f352 <_printf_i+0xee>
 800f34c:	0641      	lsls	r1, r0, #25
 800f34e:	d5fb      	bpl.n	800f348 <_printf_i+0xe4>
 800f350:	881e      	ldrh	r6, [r3, #0]
 800f352:	4853      	ldr	r0, [pc, #332]	; (800f4a0 <_printf_i+0x23c>)
 800f354:	2f6f      	cmp	r7, #111	; 0x6f
 800f356:	bf0c      	ite	eq
 800f358:	2308      	moveq	r3, #8
 800f35a:	230a      	movne	r3, #10
 800f35c:	2100      	movs	r1, #0
 800f35e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f362:	6865      	ldr	r5, [r4, #4]
 800f364:	60a5      	str	r5, [r4, #8]
 800f366:	2d00      	cmp	r5, #0
 800f368:	bfa2      	ittt	ge
 800f36a:	6821      	ldrge	r1, [r4, #0]
 800f36c:	f021 0104 	bicge.w	r1, r1, #4
 800f370:	6021      	strge	r1, [r4, #0]
 800f372:	b90e      	cbnz	r6, 800f378 <_printf_i+0x114>
 800f374:	2d00      	cmp	r5, #0
 800f376:	d04b      	beq.n	800f410 <_printf_i+0x1ac>
 800f378:	4615      	mov	r5, r2
 800f37a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f37e:	fb03 6711 	mls	r7, r3, r1, r6
 800f382:	5dc7      	ldrb	r7, [r0, r7]
 800f384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f388:	4637      	mov	r7, r6
 800f38a:	42bb      	cmp	r3, r7
 800f38c:	460e      	mov	r6, r1
 800f38e:	d9f4      	bls.n	800f37a <_printf_i+0x116>
 800f390:	2b08      	cmp	r3, #8
 800f392:	d10b      	bne.n	800f3ac <_printf_i+0x148>
 800f394:	6823      	ldr	r3, [r4, #0]
 800f396:	07de      	lsls	r6, r3, #31
 800f398:	d508      	bpl.n	800f3ac <_printf_i+0x148>
 800f39a:	6923      	ldr	r3, [r4, #16]
 800f39c:	6861      	ldr	r1, [r4, #4]
 800f39e:	4299      	cmp	r1, r3
 800f3a0:	bfde      	ittt	le
 800f3a2:	2330      	movle	r3, #48	; 0x30
 800f3a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f3a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f3ac:	1b52      	subs	r2, r2, r5
 800f3ae:	6122      	str	r2, [r4, #16]
 800f3b0:	f8cd a000 	str.w	sl, [sp]
 800f3b4:	464b      	mov	r3, r9
 800f3b6:	aa03      	add	r2, sp, #12
 800f3b8:	4621      	mov	r1, r4
 800f3ba:	4640      	mov	r0, r8
 800f3bc:	f7ff fee4 	bl	800f188 <_printf_common>
 800f3c0:	3001      	adds	r0, #1
 800f3c2:	d14a      	bne.n	800f45a <_printf_i+0x1f6>
 800f3c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3c8:	b004      	add	sp, #16
 800f3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ce:	6823      	ldr	r3, [r4, #0]
 800f3d0:	f043 0320 	orr.w	r3, r3, #32
 800f3d4:	6023      	str	r3, [r4, #0]
 800f3d6:	4833      	ldr	r0, [pc, #204]	; (800f4a4 <_printf_i+0x240>)
 800f3d8:	2778      	movs	r7, #120	; 0x78
 800f3da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f3de:	6823      	ldr	r3, [r4, #0]
 800f3e0:	6829      	ldr	r1, [r5, #0]
 800f3e2:	061f      	lsls	r7, r3, #24
 800f3e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f3e8:	d402      	bmi.n	800f3f0 <_printf_i+0x18c>
 800f3ea:	065f      	lsls	r7, r3, #25
 800f3ec:	bf48      	it	mi
 800f3ee:	b2b6      	uxthmi	r6, r6
 800f3f0:	07df      	lsls	r7, r3, #31
 800f3f2:	bf48      	it	mi
 800f3f4:	f043 0320 	orrmi.w	r3, r3, #32
 800f3f8:	6029      	str	r1, [r5, #0]
 800f3fa:	bf48      	it	mi
 800f3fc:	6023      	strmi	r3, [r4, #0]
 800f3fe:	b91e      	cbnz	r6, 800f408 <_printf_i+0x1a4>
 800f400:	6823      	ldr	r3, [r4, #0]
 800f402:	f023 0320 	bic.w	r3, r3, #32
 800f406:	6023      	str	r3, [r4, #0]
 800f408:	2310      	movs	r3, #16
 800f40a:	e7a7      	b.n	800f35c <_printf_i+0xf8>
 800f40c:	4824      	ldr	r0, [pc, #144]	; (800f4a0 <_printf_i+0x23c>)
 800f40e:	e7e4      	b.n	800f3da <_printf_i+0x176>
 800f410:	4615      	mov	r5, r2
 800f412:	e7bd      	b.n	800f390 <_printf_i+0x12c>
 800f414:	682b      	ldr	r3, [r5, #0]
 800f416:	6826      	ldr	r6, [r4, #0]
 800f418:	6961      	ldr	r1, [r4, #20]
 800f41a:	1d18      	adds	r0, r3, #4
 800f41c:	6028      	str	r0, [r5, #0]
 800f41e:	0635      	lsls	r5, r6, #24
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	d501      	bpl.n	800f428 <_printf_i+0x1c4>
 800f424:	6019      	str	r1, [r3, #0]
 800f426:	e002      	b.n	800f42e <_printf_i+0x1ca>
 800f428:	0670      	lsls	r0, r6, #25
 800f42a:	d5fb      	bpl.n	800f424 <_printf_i+0x1c0>
 800f42c:	8019      	strh	r1, [r3, #0]
 800f42e:	2300      	movs	r3, #0
 800f430:	6123      	str	r3, [r4, #16]
 800f432:	4615      	mov	r5, r2
 800f434:	e7bc      	b.n	800f3b0 <_printf_i+0x14c>
 800f436:	682b      	ldr	r3, [r5, #0]
 800f438:	1d1a      	adds	r2, r3, #4
 800f43a:	602a      	str	r2, [r5, #0]
 800f43c:	681d      	ldr	r5, [r3, #0]
 800f43e:	6862      	ldr	r2, [r4, #4]
 800f440:	2100      	movs	r1, #0
 800f442:	4628      	mov	r0, r5
 800f444:	f7f0 fefc 	bl	8000240 <memchr>
 800f448:	b108      	cbz	r0, 800f44e <_printf_i+0x1ea>
 800f44a:	1b40      	subs	r0, r0, r5
 800f44c:	6060      	str	r0, [r4, #4]
 800f44e:	6863      	ldr	r3, [r4, #4]
 800f450:	6123      	str	r3, [r4, #16]
 800f452:	2300      	movs	r3, #0
 800f454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f458:	e7aa      	b.n	800f3b0 <_printf_i+0x14c>
 800f45a:	6923      	ldr	r3, [r4, #16]
 800f45c:	462a      	mov	r2, r5
 800f45e:	4649      	mov	r1, r9
 800f460:	4640      	mov	r0, r8
 800f462:	47d0      	blx	sl
 800f464:	3001      	adds	r0, #1
 800f466:	d0ad      	beq.n	800f3c4 <_printf_i+0x160>
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	079b      	lsls	r3, r3, #30
 800f46c:	d413      	bmi.n	800f496 <_printf_i+0x232>
 800f46e:	68e0      	ldr	r0, [r4, #12]
 800f470:	9b03      	ldr	r3, [sp, #12]
 800f472:	4298      	cmp	r0, r3
 800f474:	bfb8      	it	lt
 800f476:	4618      	movlt	r0, r3
 800f478:	e7a6      	b.n	800f3c8 <_printf_i+0x164>
 800f47a:	2301      	movs	r3, #1
 800f47c:	4632      	mov	r2, r6
 800f47e:	4649      	mov	r1, r9
 800f480:	4640      	mov	r0, r8
 800f482:	47d0      	blx	sl
 800f484:	3001      	adds	r0, #1
 800f486:	d09d      	beq.n	800f3c4 <_printf_i+0x160>
 800f488:	3501      	adds	r5, #1
 800f48a:	68e3      	ldr	r3, [r4, #12]
 800f48c:	9903      	ldr	r1, [sp, #12]
 800f48e:	1a5b      	subs	r3, r3, r1
 800f490:	42ab      	cmp	r3, r5
 800f492:	dcf2      	bgt.n	800f47a <_printf_i+0x216>
 800f494:	e7eb      	b.n	800f46e <_printf_i+0x20a>
 800f496:	2500      	movs	r5, #0
 800f498:	f104 0619 	add.w	r6, r4, #25
 800f49c:	e7f5      	b.n	800f48a <_printf_i+0x226>
 800f49e:	bf00      	nop
 800f4a0:	0800fc99 	.word	0x0800fc99
 800f4a4:	0800fcaa 	.word	0x0800fcaa

0800f4a8 <__sflush_r>:
 800f4a8:	898a      	ldrh	r2, [r1, #12]
 800f4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ae:	4605      	mov	r5, r0
 800f4b0:	0710      	lsls	r0, r2, #28
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	d458      	bmi.n	800f568 <__sflush_r+0xc0>
 800f4b6:	684b      	ldr	r3, [r1, #4]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	dc05      	bgt.n	800f4c8 <__sflush_r+0x20>
 800f4bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	dc02      	bgt.n	800f4c8 <__sflush_r+0x20>
 800f4c2:	2000      	movs	r0, #0
 800f4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4ca:	2e00      	cmp	r6, #0
 800f4cc:	d0f9      	beq.n	800f4c2 <__sflush_r+0x1a>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4d4:	682f      	ldr	r7, [r5, #0]
 800f4d6:	6a21      	ldr	r1, [r4, #32]
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	d032      	beq.n	800f542 <__sflush_r+0x9a>
 800f4dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	075a      	lsls	r2, r3, #29
 800f4e2:	d505      	bpl.n	800f4f0 <__sflush_r+0x48>
 800f4e4:	6863      	ldr	r3, [r4, #4]
 800f4e6:	1ac0      	subs	r0, r0, r3
 800f4e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4ea:	b10b      	cbz	r3, 800f4f0 <__sflush_r+0x48>
 800f4ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4ee:	1ac0      	subs	r0, r0, r3
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4f6:	6a21      	ldr	r1, [r4, #32]
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	47b0      	blx	r6
 800f4fc:	1c43      	adds	r3, r0, #1
 800f4fe:	89a3      	ldrh	r3, [r4, #12]
 800f500:	d106      	bne.n	800f510 <__sflush_r+0x68>
 800f502:	6829      	ldr	r1, [r5, #0]
 800f504:	291d      	cmp	r1, #29
 800f506:	d82b      	bhi.n	800f560 <__sflush_r+0xb8>
 800f508:	4a29      	ldr	r2, [pc, #164]	; (800f5b0 <__sflush_r+0x108>)
 800f50a:	410a      	asrs	r2, r1
 800f50c:	07d6      	lsls	r6, r2, #31
 800f50e:	d427      	bmi.n	800f560 <__sflush_r+0xb8>
 800f510:	2200      	movs	r2, #0
 800f512:	6062      	str	r2, [r4, #4]
 800f514:	04d9      	lsls	r1, r3, #19
 800f516:	6922      	ldr	r2, [r4, #16]
 800f518:	6022      	str	r2, [r4, #0]
 800f51a:	d504      	bpl.n	800f526 <__sflush_r+0x7e>
 800f51c:	1c42      	adds	r2, r0, #1
 800f51e:	d101      	bne.n	800f524 <__sflush_r+0x7c>
 800f520:	682b      	ldr	r3, [r5, #0]
 800f522:	b903      	cbnz	r3, 800f526 <__sflush_r+0x7e>
 800f524:	6560      	str	r0, [r4, #84]	; 0x54
 800f526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f528:	602f      	str	r7, [r5, #0]
 800f52a:	2900      	cmp	r1, #0
 800f52c:	d0c9      	beq.n	800f4c2 <__sflush_r+0x1a>
 800f52e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f532:	4299      	cmp	r1, r3
 800f534:	d002      	beq.n	800f53c <__sflush_r+0x94>
 800f536:	4628      	mov	r0, r5
 800f538:	f7ff fb3e 	bl	800ebb8 <_free_r>
 800f53c:	2000      	movs	r0, #0
 800f53e:	6360      	str	r0, [r4, #52]	; 0x34
 800f540:	e7c0      	b.n	800f4c4 <__sflush_r+0x1c>
 800f542:	2301      	movs	r3, #1
 800f544:	4628      	mov	r0, r5
 800f546:	47b0      	blx	r6
 800f548:	1c41      	adds	r1, r0, #1
 800f54a:	d1c8      	bne.n	800f4de <__sflush_r+0x36>
 800f54c:	682b      	ldr	r3, [r5, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d0c5      	beq.n	800f4de <__sflush_r+0x36>
 800f552:	2b1d      	cmp	r3, #29
 800f554:	d001      	beq.n	800f55a <__sflush_r+0xb2>
 800f556:	2b16      	cmp	r3, #22
 800f558:	d101      	bne.n	800f55e <__sflush_r+0xb6>
 800f55a:	602f      	str	r7, [r5, #0]
 800f55c:	e7b1      	b.n	800f4c2 <__sflush_r+0x1a>
 800f55e:	89a3      	ldrh	r3, [r4, #12]
 800f560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f564:	81a3      	strh	r3, [r4, #12]
 800f566:	e7ad      	b.n	800f4c4 <__sflush_r+0x1c>
 800f568:	690f      	ldr	r7, [r1, #16]
 800f56a:	2f00      	cmp	r7, #0
 800f56c:	d0a9      	beq.n	800f4c2 <__sflush_r+0x1a>
 800f56e:	0793      	lsls	r3, r2, #30
 800f570:	680e      	ldr	r6, [r1, #0]
 800f572:	bf08      	it	eq
 800f574:	694b      	ldreq	r3, [r1, #20]
 800f576:	600f      	str	r7, [r1, #0]
 800f578:	bf18      	it	ne
 800f57a:	2300      	movne	r3, #0
 800f57c:	eba6 0807 	sub.w	r8, r6, r7
 800f580:	608b      	str	r3, [r1, #8]
 800f582:	f1b8 0f00 	cmp.w	r8, #0
 800f586:	dd9c      	ble.n	800f4c2 <__sflush_r+0x1a>
 800f588:	6a21      	ldr	r1, [r4, #32]
 800f58a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f58c:	4643      	mov	r3, r8
 800f58e:	463a      	mov	r2, r7
 800f590:	4628      	mov	r0, r5
 800f592:	47b0      	blx	r6
 800f594:	2800      	cmp	r0, #0
 800f596:	dc06      	bgt.n	800f5a6 <__sflush_r+0xfe>
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f59e:	81a3      	strh	r3, [r4, #12]
 800f5a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5a4:	e78e      	b.n	800f4c4 <__sflush_r+0x1c>
 800f5a6:	4407      	add	r7, r0
 800f5a8:	eba8 0800 	sub.w	r8, r8, r0
 800f5ac:	e7e9      	b.n	800f582 <__sflush_r+0xda>
 800f5ae:	bf00      	nop
 800f5b0:	dfbffffe 	.word	0xdfbffffe

0800f5b4 <_fflush_r>:
 800f5b4:	b538      	push	{r3, r4, r5, lr}
 800f5b6:	690b      	ldr	r3, [r1, #16]
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	b913      	cbnz	r3, 800f5c4 <_fflush_r+0x10>
 800f5be:	2500      	movs	r5, #0
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	bd38      	pop	{r3, r4, r5, pc}
 800f5c4:	b118      	cbz	r0, 800f5ce <_fflush_r+0x1a>
 800f5c6:	6a03      	ldr	r3, [r0, #32]
 800f5c8:	b90b      	cbnz	r3, 800f5ce <_fflush_r+0x1a>
 800f5ca:	f7ff f9fb 	bl	800e9c4 <__sinit>
 800f5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d0f3      	beq.n	800f5be <_fflush_r+0xa>
 800f5d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5d8:	07d0      	lsls	r0, r2, #31
 800f5da:	d404      	bmi.n	800f5e6 <_fflush_r+0x32>
 800f5dc:	0599      	lsls	r1, r3, #22
 800f5de:	d402      	bmi.n	800f5e6 <_fflush_r+0x32>
 800f5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5e2:	f7ff fae6 	bl	800ebb2 <__retarget_lock_acquire_recursive>
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	4621      	mov	r1, r4
 800f5ea:	f7ff ff5d 	bl	800f4a8 <__sflush_r>
 800f5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5f0:	07da      	lsls	r2, r3, #31
 800f5f2:	4605      	mov	r5, r0
 800f5f4:	d4e4      	bmi.n	800f5c0 <_fflush_r+0xc>
 800f5f6:	89a3      	ldrh	r3, [r4, #12]
 800f5f8:	059b      	lsls	r3, r3, #22
 800f5fa:	d4e1      	bmi.n	800f5c0 <_fflush_r+0xc>
 800f5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5fe:	f7ff fad9 	bl	800ebb4 <__retarget_lock_release_recursive>
 800f602:	e7dd      	b.n	800f5c0 <_fflush_r+0xc>

0800f604 <__sread>:
 800f604:	b510      	push	{r4, lr}
 800f606:	460c      	mov	r4, r1
 800f608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f60c:	f000 f9c2 	bl	800f994 <_read_r>
 800f610:	2800      	cmp	r0, #0
 800f612:	bfab      	itete	ge
 800f614:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f616:	89a3      	ldrhlt	r3, [r4, #12]
 800f618:	181b      	addge	r3, r3, r0
 800f61a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f61e:	bfac      	ite	ge
 800f620:	6563      	strge	r3, [r4, #84]	; 0x54
 800f622:	81a3      	strhlt	r3, [r4, #12]
 800f624:	bd10      	pop	{r4, pc}

0800f626 <__swrite>:
 800f626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62a:	461f      	mov	r7, r3
 800f62c:	898b      	ldrh	r3, [r1, #12]
 800f62e:	05db      	lsls	r3, r3, #23
 800f630:	4605      	mov	r5, r0
 800f632:	460c      	mov	r4, r1
 800f634:	4616      	mov	r6, r2
 800f636:	d505      	bpl.n	800f644 <__swrite+0x1e>
 800f638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f63c:	2302      	movs	r3, #2
 800f63e:	2200      	movs	r2, #0
 800f640:	f000 f996 	bl	800f970 <_lseek_r>
 800f644:	89a3      	ldrh	r3, [r4, #12]
 800f646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f64a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f64e:	81a3      	strh	r3, [r4, #12]
 800f650:	4632      	mov	r2, r6
 800f652:	463b      	mov	r3, r7
 800f654:	4628      	mov	r0, r5
 800f656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f65a:	f000 b9ad 	b.w	800f9b8 <_write_r>

0800f65e <__sseek>:
 800f65e:	b510      	push	{r4, lr}
 800f660:	460c      	mov	r4, r1
 800f662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f666:	f000 f983 	bl	800f970 <_lseek_r>
 800f66a:	1c43      	adds	r3, r0, #1
 800f66c:	89a3      	ldrh	r3, [r4, #12]
 800f66e:	bf15      	itete	ne
 800f670:	6560      	strne	r0, [r4, #84]	; 0x54
 800f672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f67a:	81a3      	strheq	r3, [r4, #12]
 800f67c:	bf18      	it	ne
 800f67e:	81a3      	strhne	r3, [r4, #12]
 800f680:	bd10      	pop	{r4, pc}

0800f682 <__sclose>:
 800f682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f686:	f000 b941 	b.w	800f90c <_close_r>

0800f68a <_realloc_r>:
 800f68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f68e:	4680      	mov	r8, r0
 800f690:	4614      	mov	r4, r2
 800f692:	460e      	mov	r6, r1
 800f694:	b921      	cbnz	r1, 800f6a0 <_realloc_r+0x16>
 800f696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f69a:	4611      	mov	r1, r2
 800f69c:	f7ff b846 	b.w	800e72c <_malloc_r>
 800f6a0:	b92a      	cbnz	r2, 800f6ae <_realloc_r+0x24>
 800f6a2:	f7ff fa89 	bl	800ebb8 <_free_r>
 800f6a6:	4625      	mov	r5, r4
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ae:	f000 f9a3 	bl	800f9f8 <_malloc_usable_size_r>
 800f6b2:	4284      	cmp	r4, r0
 800f6b4:	4607      	mov	r7, r0
 800f6b6:	d802      	bhi.n	800f6be <_realloc_r+0x34>
 800f6b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6bc:	d812      	bhi.n	800f6e4 <_realloc_r+0x5a>
 800f6be:	4621      	mov	r1, r4
 800f6c0:	4640      	mov	r0, r8
 800f6c2:	f7ff f833 	bl	800e72c <_malloc_r>
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d0ed      	beq.n	800f6a8 <_realloc_r+0x1e>
 800f6cc:	42bc      	cmp	r4, r7
 800f6ce:	4622      	mov	r2, r4
 800f6d0:	4631      	mov	r1, r6
 800f6d2:	bf28      	it	cs
 800f6d4:	463a      	movcs	r2, r7
 800f6d6:	f000 f981 	bl	800f9dc <memcpy>
 800f6da:	4631      	mov	r1, r6
 800f6dc:	4640      	mov	r0, r8
 800f6de:	f7ff fa6b 	bl	800ebb8 <_free_r>
 800f6e2:	e7e1      	b.n	800f6a8 <_realloc_r+0x1e>
 800f6e4:	4635      	mov	r5, r6
 800f6e6:	e7df      	b.n	800f6a8 <_realloc_r+0x1e>

0800f6e8 <__swbuf_r>:
 800f6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ea:	460e      	mov	r6, r1
 800f6ec:	4614      	mov	r4, r2
 800f6ee:	4605      	mov	r5, r0
 800f6f0:	b118      	cbz	r0, 800f6fa <__swbuf_r+0x12>
 800f6f2:	6a03      	ldr	r3, [r0, #32]
 800f6f4:	b90b      	cbnz	r3, 800f6fa <__swbuf_r+0x12>
 800f6f6:	f7ff f965 	bl	800e9c4 <__sinit>
 800f6fa:	69a3      	ldr	r3, [r4, #24]
 800f6fc:	60a3      	str	r3, [r4, #8]
 800f6fe:	89a3      	ldrh	r3, [r4, #12]
 800f700:	071a      	lsls	r2, r3, #28
 800f702:	d525      	bpl.n	800f750 <__swbuf_r+0x68>
 800f704:	6923      	ldr	r3, [r4, #16]
 800f706:	b31b      	cbz	r3, 800f750 <__swbuf_r+0x68>
 800f708:	6823      	ldr	r3, [r4, #0]
 800f70a:	6922      	ldr	r2, [r4, #16]
 800f70c:	1a98      	subs	r0, r3, r2
 800f70e:	6963      	ldr	r3, [r4, #20]
 800f710:	b2f6      	uxtb	r6, r6
 800f712:	4283      	cmp	r3, r0
 800f714:	4637      	mov	r7, r6
 800f716:	dc04      	bgt.n	800f722 <__swbuf_r+0x3a>
 800f718:	4621      	mov	r1, r4
 800f71a:	4628      	mov	r0, r5
 800f71c:	f7ff ff4a 	bl	800f5b4 <_fflush_r>
 800f720:	b9e0      	cbnz	r0, 800f75c <__swbuf_r+0x74>
 800f722:	68a3      	ldr	r3, [r4, #8]
 800f724:	3b01      	subs	r3, #1
 800f726:	60a3      	str	r3, [r4, #8]
 800f728:	6823      	ldr	r3, [r4, #0]
 800f72a:	1c5a      	adds	r2, r3, #1
 800f72c:	6022      	str	r2, [r4, #0]
 800f72e:	701e      	strb	r6, [r3, #0]
 800f730:	6962      	ldr	r2, [r4, #20]
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	429a      	cmp	r2, r3
 800f736:	d004      	beq.n	800f742 <__swbuf_r+0x5a>
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	07db      	lsls	r3, r3, #31
 800f73c:	d506      	bpl.n	800f74c <__swbuf_r+0x64>
 800f73e:	2e0a      	cmp	r6, #10
 800f740:	d104      	bne.n	800f74c <__swbuf_r+0x64>
 800f742:	4621      	mov	r1, r4
 800f744:	4628      	mov	r0, r5
 800f746:	f7ff ff35 	bl	800f5b4 <_fflush_r>
 800f74a:	b938      	cbnz	r0, 800f75c <__swbuf_r+0x74>
 800f74c:	4638      	mov	r0, r7
 800f74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f750:	4621      	mov	r1, r4
 800f752:	4628      	mov	r0, r5
 800f754:	f000 f806 	bl	800f764 <__swsetup_r>
 800f758:	2800      	cmp	r0, #0
 800f75a:	d0d5      	beq.n	800f708 <__swbuf_r+0x20>
 800f75c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f760:	e7f4      	b.n	800f74c <__swbuf_r+0x64>
	...

0800f764 <__swsetup_r>:
 800f764:	b538      	push	{r3, r4, r5, lr}
 800f766:	4b2a      	ldr	r3, [pc, #168]	; (800f810 <__swsetup_r+0xac>)
 800f768:	4605      	mov	r5, r0
 800f76a:	6818      	ldr	r0, [r3, #0]
 800f76c:	460c      	mov	r4, r1
 800f76e:	b118      	cbz	r0, 800f778 <__swsetup_r+0x14>
 800f770:	6a03      	ldr	r3, [r0, #32]
 800f772:	b90b      	cbnz	r3, 800f778 <__swsetup_r+0x14>
 800f774:	f7ff f926 	bl	800e9c4 <__sinit>
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f77e:	0718      	lsls	r0, r3, #28
 800f780:	d422      	bmi.n	800f7c8 <__swsetup_r+0x64>
 800f782:	06d9      	lsls	r1, r3, #27
 800f784:	d407      	bmi.n	800f796 <__swsetup_r+0x32>
 800f786:	2309      	movs	r3, #9
 800f788:	602b      	str	r3, [r5, #0]
 800f78a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f78e:	81a3      	strh	r3, [r4, #12]
 800f790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f794:	e034      	b.n	800f800 <__swsetup_r+0x9c>
 800f796:	0758      	lsls	r0, r3, #29
 800f798:	d512      	bpl.n	800f7c0 <__swsetup_r+0x5c>
 800f79a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f79c:	b141      	cbz	r1, 800f7b0 <__swsetup_r+0x4c>
 800f79e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7a2:	4299      	cmp	r1, r3
 800f7a4:	d002      	beq.n	800f7ac <__swsetup_r+0x48>
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f7ff fa06 	bl	800ebb8 <_free_r>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	6363      	str	r3, [r4, #52]	; 0x34
 800f7b0:	89a3      	ldrh	r3, [r4, #12]
 800f7b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7b6:	81a3      	strh	r3, [r4, #12]
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	6063      	str	r3, [r4, #4]
 800f7bc:	6923      	ldr	r3, [r4, #16]
 800f7be:	6023      	str	r3, [r4, #0]
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	f043 0308 	orr.w	r3, r3, #8
 800f7c6:	81a3      	strh	r3, [r4, #12]
 800f7c8:	6923      	ldr	r3, [r4, #16]
 800f7ca:	b94b      	cbnz	r3, 800f7e0 <__swsetup_r+0x7c>
 800f7cc:	89a3      	ldrh	r3, [r4, #12]
 800f7ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7d6:	d003      	beq.n	800f7e0 <__swsetup_r+0x7c>
 800f7d8:	4621      	mov	r1, r4
 800f7da:	4628      	mov	r0, r5
 800f7dc:	f000 f840 	bl	800f860 <__smakebuf_r>
 800f7e0:	89a0      	ldrh	r0, [r4, #12]
 800f7e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7e6:	f010 0301 	ands.w	r3, r0, #1
 800f7ea:	d00a      	beq.n	800f802 <__swsetup_r+0x9e>
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	60a3      	str	r3, [r4, #8]
 800f7f0:	6963      	ldr	r3, [r4, #20]
 800f7f2:	425b      	negs	r3, r3
 800f7f4:	61a3      	str	r3, [r4, #24]
 800f7f6:	6923      	ldr	r3, [r4, #16]
 800f7f8:	b943      	cbnz	r3, 800f80c <__swsetup_r+0xa8>
 800f7fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f7fe:	d1c4      	bne.n	800f78a <__swsetup_r+0x26>
 800f800:	bd38      	pop	{r3, r4, r5, pc}
 800f802:	0781      	lsls	r1, r0, #30
 800f804:	bf58      	it	pl
 800f806:	6963      	ldrpl	r3, [r4, #20]
 800f808:	60a3      	str	r3, [r4, #8]
 800f80a:	e7f4      	b.n	800f7f6 <__swsetup_r+0x92>
 800f80c:	2000      	movs	r0, #0
 800f80e:	e7f7      	b.n	800f800 <__swsetup_r+0x9c>
 800f810:	20000164 	.word	0x20000164

0800f814 <__swhatbuf_r>:
 800f814:	b570      	push	{r4, r5, r6, lr}
 800f816:	460c      	mov	r4, r1
 800f818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f81c:	2900      	cmp	r1, #0
 800f81e:	b096      	sub	sp, #88	; 0x58
 800f820:	4615      	mov	r5, r2
 800f822:	461e      	mov	r6, r3
 800f824:	da0d      	bge.n	800f842 <__swhatbuf_r+0x2e>
 800f826:	89a3      	ldrh	r3, [r4, #12]
 800f828:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f82c:	f04f 0100 	mov.w	r1, #0
 800f830:	bf0c      	ite	eq
 800f832:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f836:	2340      	movne	r3, #64	; 0x40
 800f838:	2000      	movs	r0, #0
 800f83a:	6031      	str	r1, [r6, #0]
 800f83c:	602b      	str	r3, [r5, #0]
 800f83e:	b016      	add	sp, #88	; 0x58
 800f840:	bd70      	pop	{r4, r5, r6, pc}
 800f842:	466a      	mov	r2, sp
 800f844:	f000 f872 	bl	800f92c <_fstat_r>
 800f848:	2800      	cmp	r0, #0
 800f84a:	dbec      	blt.n	800f826 <__swhatbuf_r+0x12>
 800f84c:	9901      	ldr	r1, [sp, #4]
 800f84e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f852:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f856:	4259      	negs	r1, r3
 800f858:	4159      	adcs	r1, r3
 800f85a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f85e:	e7eb      	b.n	800f838 <__swhatbuf_r+0x24>

0800f860 <__smakebuf_r>:
 800f860:	898b      	ldrh	r3, [r1, #12]
 800f862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f864:	079d      	lsls	r5, r3, #30
 800f866:	4606      	mov	r6, r0
 800f868:	460c      	mov	r4, r1
 800f86a:	d507      	bpl.n	800f87c <__smakebuf_r+0x1c>
 800f86c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f870:	6023      	str	r3, [r4, #0]
 800f872:	6123      	str	r3, [r4, #16]
 800f874:	2301      	movs	r3, #1
 800f876:	6163      	str	r3, [r4, #20]
 800f878:	b002      	add	sp, #8
 800f87a:	bd70      	pop	{r4, r5, r6, pc}
 800f87c:	ab01      	add	r3, sp, #4
 800f87e:	466a      	mov	r2, sp
 800f880:	f7ff ffc8 	bl	800f814 <__swhatbuf_r>
 800f884:	9900      	ldr	r1, [sp, #0]
 800f886:	4605      	mov	r5, r0
 800f888:	4630      	mov	r0, r6
 800f88a:	f7fe ff4f 	bl	800e72c <_malloc_r>
 800f88e:	b948      	cbnz	r0, 800f8a4 <__smakebuf_r+0x44>
 800f890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f894:	059a      	lsls	r2, r3, #22
 800f896:	d4ef      	bmi.n	800f878 <__smakebuf_r+0x18>
 800f898:	f023 0303 	bic.w	r3, r3, #3
 800f89c:	f043 0302 	orr.w	r3, r3, #2
 800f8a0:	81a3      	strh	r3, [r4, #12]
 800f8a2:	e7e3      	b.n	800f86c <__smakebuf_r+0xc>
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	6020      	str	r0, [r4, #0]
 800f8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8ac:	81a3      	strh	r3, [r4, #12]
 800f8ae:	9b00      	ldr	r3, [sp, #0]
 800f8b0:	6163      	str	r3, [r4, #20]
 800f8b2:	9b01      	ldr	r3, [sp, #4]
 800f8b4:	6120      	str	r0, [r4, #16]
 800f8b6:	b15b      	cbz	r3, 800f8d0 <__smakebuf_r+0x70>
 800f8b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8bc:	4630      	mov	r0, r6
 800f8be:	f000 f847 	bl	800f950 <_isatty_r>
 800f8c2:	b128      	cbz	r0, 800f8d0 <__smakebuf_r+0x70>
 800f8c4:	89a3      	ldrh	r3, [r4, #12]
 800f8c6:	f023 0303 	bic.w	r3, r3, #3
 800f8ca:	f043 0301 	orr.w	r3, r3, #1
 800f8ce:	81a3      	strh	r3, [r4, #12]
 800f8d0:	89a3      	ldrh	r3, [r4, #12]
 800f8d2:	431d      	orrs	r5, r3
 800f8d4:	81a5      	strh	r5, [r4, #12]
 800f8d6:	e7cf      	b.n	800f878 <__smakebuf_r+0x18>

0800f8d8 <memmove>:
 800f8d8:	4288      	cmp	r0, r1
 800f8da:	b510      	push	{r4, lr}
 800f8dc:	eb01 0402 	add.w	r4, r1, r2
 800f8e0:	d902      	bls.n	800f8e8 <memmove+0x10>
 800f8e2:	4284      	cmp	r4, r0
 800f8e4:	4623      	mov	r3, r4
 800f8e6:	d807      	bhi.n	800f8f8 <memmove+0x20>
 800f8e8:	1e43      	subs	r3, r0, #1
 800f8ea:	42a1      	cmp	r1, r4
 800f8ec:	d008      	beq.n	800f900 <memmove+0x28>
 800f8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f8f6:	e7f8      	b.n	800f8ea <memmove+0x12>
 800f8f8:	4402      	add	r2, r0
 800f8fa:	4601      	mov	r1, r0
 800f8fc:	428a      	cmp	r2, r1
 800f8fe:	d100      	bne.n	800f902 <memmove+0x2a>
 800f900:	bd10      	pop	{r4, pc}
 800f902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f90a:	e7f7      	b.n	800f8fc <memmove+0x24>

0800f90c <_close_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d06      	ldr	r5, [pc, #24]	; (800f928 <_close_r+0x1c>)
 800f910:	2300      	movs	r3, #0
 800f912:	4604      	mov	r4, r0
 800f914:	4608      	mov	r0, r1
 800f916:	602b      	str	r3, [r5, #0]
 800f918:	f7f1 fcc1 	bl	800129e <_close>
 800f91c:	1c43      	adds	r3, r0, #1
 800f91e:	d102      	bne.n	800f926 <_close_r+0x1a>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	b103      	cbz	r3, 800f926 <_close_r+0x1a>
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	20004cc4 	.word	0x20004cc4

0800f92c <_fstat_r>:
 800f92c:	b538      	push	{r3, r4, r5, lr}
 800f92e:	4d07      	ldr	r5, [pc, #28]	; (800f94c <_fstat_r+0x20>)
 800f930:	2300      	movs	r3, #0
 800f932:	4604      	mov	r4, r0
 800f934:	4608      	mov	r0, r1
 800f936:	4611      	mov	r1, r2
 800f938:	602b      	str	r3, [r5, #0]
 800f93a:	f7f1 fcbc 	bl	80012b6 <_fstat>
 800f93e:	1c43      	adds	r3, r0, #1
 800f940:	d102      	bne.n	800f948 <_fstat_r+0x1c>
 800f942:	682b      	ldr	r3, [r5, #0]
 800f944:	b103      	cbz	r3, 800f948 <_fstat_r+0x1c>
 800f946:	6023      	str	r3, [r4, #0]
 800f948:	bd38      	pop	{r3, r4, r5, pc}
 800f94a:	bf00      	nop
 800f94c:	20004cc4 	.word	0x20004cc4

0800f950 <_isatty_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4d06      	ldr	r5, [pc, #24]	; (800f96c <_isatty_r+0x1c>)
 800f954:	2300      	movs	r3, #0
 800f956:	4604      	mov	r4, r0
 800f958:	4608      	mov	r0, r1
 800f95a:	602b      	str	r3, [r5, #0]
 800f95c:	f7f1 fcbb 	bl	80012d6 <_isatty>
 800f960:	1c43      	adds	r3, r0, #1
 800f962:	d102      	bne.n	800f96a <_isatty_r+0x1a>
 800f964:	682b      	ldr	r3, [r5, #0]
 800f966:	b103      	cbz	r3, 800f96a <_isatty_r+0x1a>
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	20004cc4 	.word	0x20004cc4

0800f970 <_lseek_r>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	4d07      	ldr	r5, [pc, #28]	; (800f990 <_lseek_r+0x20>)
 800f974:	4604      	mov	r4, r0
 800f976:	4608      	mov	r0, r1
 800f978:	4611      	mov	r1, r2
 800f97a:	2200      	movs	r2, #0
 800f97c:	602a      	str	r2, [r5, #0]
 800f97e:	461a      	mov	r2, r3
 800f980:	f7f1 fcb4 	bl	80012ec <_lseek>
 800f984:	1c43      	adds	r3, r0, #1
 800f986:	d102      	bne.n	800f98e <_lseek_r+0x1e>
 800f988:	682b      	ldr	r3, [r5, #0]
 800f98a:	b103      	cbz	r3, 800f98e <_lseek_r+0x1e>
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	bd38      	pop	{r3, r4, r5, pc}
 800f990:	20004cc4 	.word	0x20004cc4

0800f994 <_read_r>:
 800f994:	b538      	push	{r3, r4, r5, lr}
 800f996:	4d07      	ldr	r5, [pc, #28]	; (800f9b4 <_read_r+0x20>)
 800f998:	4604      	mov	r4, r0
 800f99a:	4608      	mov	r0, r1
 800f99c:	4611      	mov	r1, r2
 800f99e:	2200      	movs	r2, #0
 800f9a0:	602a      	str	r2, [r5, #0]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	f7f1 fc42 	bl	800122c <_read>
 800f9a8:	1c43      	adds	r3, r0, #1
 800f9aa:	d102      	bne.n	800f9b2 <_read_r+0x1e>
 800f9ac:	682b      	ldr	r3, [r5, #0]
 800f9ae:	b103      	cbz	r3, 800f9b2 <_read_r+0x1e>
 800f9b0:	6023      	str	r3, [r4, #0]
 800f9b2:	bd38      	pop	{r3, r4, r5, pc}
 800f9b4:	20004cc4 	.word	0x20004cc4

0800f9b8 <_write_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	4d07      	ldr	r5, [pc, #28]	; (800f9d8 <_write_r+0x20>)
 800f9bc:	4604      	mov	r4, r0
 800f9be:	4608      	mov	r0, r1
 800f9c0:	4611      	mov	r1, r2
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	602a      	str	r2, [r5, #0]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	f7f1 fc4d 	bl	8001266 <_write>
 800f9cc:	1c43      	adds	r3, r0, #1
 800f9ce:	d102      	bne.n	800f9d6 <_write_r+0x1e>
 800f9d0:	682b      	ldr	r3, [r5, #0]
 800f9d2:	b103      	cbz	r3, 800f9d6 <_write_r+0x1e>
 800f9d4:	6023      	str	r3, [r4, #0]
 800f9d6:	bd38      	pop	{r3, r4, r5, pc}
 800f9d8:	20004cc4 	.word	0x20004cc4

0800f9dc <memcpy>:
 800f9dc:	440a      	add	r2, r1
 800f9de:	4291      	cmp	r1, r2
 800f9e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f9e4:	d100      	bne.n	800f9e8 <memcpy+0xc>
 800f9e6:	4770      	bx	lr
 800f9e8:	b510      	push	{r4, lr}
 800f9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9f2:	4291      	cmp	r1, r2
 800f9f4:	d1f9      	bne.n	800f9ea <memcpy+0xe>
 800f9f6:	bd10      	pop	{r4, pc}

0800f9f8 <_malloc_usable_size_r>:
 800f9f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9fc:	1f18      	subs	r0, r3, #4
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	bfbc      	itt	lt
 800fa02:	580b      	ldrlt	r3, [r1, r0]
 800fa04:	18c0      	addlt	r0, r0, r3
 800fa06:	4770      	bx	lr

0800fa08 <_init>:
 800fa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa0a:	bf00      	nop
 800fa0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa0e:	bc08      	pop	{r3}
 800fa10:	469e      	mov	lr, r3
 800fa12:	4770      	bx	lr

0800fa14 <_fini>:
 800fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa16:	bf00      	nop
 800fa18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa1a:	bc08      	pop	{r3}
 800fa1c:	469e      	mov	lr, r3
 800fa1e:	4770      	bx	lr
