
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ff4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  080121f4  080121f4  000221f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c84  08012c84  0003016c  2**0
                  CONTENTS
  4 .ARM          00000008  08012c84  08012c84  00022c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c8c  08012c8c  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c8c  08012c8c  00022c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c90  08012c90  00022c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08012c94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014d78  2000016c  08012e00  0003016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014ee4  08012e00  00034ee4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003019a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022f61  00000000  00000000  000301dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005141  00000000  00000000  0005313e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  00058280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001568  00000000  00000000  00059e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ed12  00000000  00000000  0005b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000266ce  00000000  00000000  0008a10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010319d  00000000  00000000  000b07d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007df0  00000000  00000000  001b3978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001bb768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000016c 	.word	0x2000016c
 800021c:	00000000 	.word	0x00000000
 8000220:	080121dc 	.word	0x080121dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000170 	.word	0x20000170
 800023c:	080121dc 	.word	0x080121dc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fbbe 	bl	8001d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 fa61 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fbb5 	bl	8000d58 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fb8d 	bl	8000d0c <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 fac3 	bl	8000b7c <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fb37 	bl	8000c68 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fb57 	bl	8000cac <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f00a fc83 	bl	800af08 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00f fec7 	bl	8010394 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000606:	f000 faef 	bl	8000be8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DS1307_Init(&hi2c1);
 800060a:	48ac      	ldr	r0, [pc, #688]	; (80008bc <main+0x2e0>)
 800060c:	f001 faba 	bl	8001b84 <DS1307_Init>
		RESET_STATE,
		POWER_OFF
	} state_t;

	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t byteswritten; /* File write/read counts */
	uint8_t writing_failed = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 800061c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000620:	2b0c      	cmp	r3, #12
 8000622:	f200 820b 	bhi.w	8000a3c <main+0x460>
 8000626:	a201      	add	r2, pc, #4	; (adr r2, 800062c <main+0x50>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	08000661 	.word	0x08000661
 8000630:	080006a9 	.word	0x080006a9
 8000634:	08000725 	.word	0x08000725
 8000638:	080007a5 	.word	0x080007a5
 800063c:	08000a4f 	.word	0x08000a4f
 8000640:	08000a4f 	.word	0x08000a4f
 8000644:	080007e1 	.word	0x080007e1
 8000648:	08000a4f 	.word	0x08000a4f
 800064c:	08000899 	.word	0x08000899
 8000650:	08000a4f 	.word	0x08000a4f
 8000654:	08000919 	.word	0x08000919
 8000658:	080009d3 	.word	0x080009d3
 800065c:	08000a1f 	.word	0x08000a1f
		 * Transition out:
		 * 	If power switch is set to on position -> PERIFPHERAL_INIT
		 * 	else (power switch is set to off) -> POWER_OFF
		 */
		case TURN_ON:
			HAL_GPIO_WritePin(PokManualReset_GPIO_Port, PokManualReset_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	4896      	ldr	r0, [pc, #600]	; (80008c0 <main+0x2e4>)
 8000668:	f003 f80a 	bl	8003680 <HAL_GPIO_WritePin>
			POWER_SWITCH_PIN = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 800066c:	2102      	movs	r1, #2
 800066e:	4895      	ldr	r0, [pc, #596]	; (80008c4 <main+0x2e8>)
 8000670:	f002 ffee 	bl	8003650 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b93      	ldr	r3, [pc, #588]	; (80008c8 <main+0x2ec>)
 800067a:	701a      	strb	r2, [r3, #0]
			POWER_OKAY = HAL_GPIO_ReadPin(PokRESET_GPIO_Port, PokRESET_Pin);
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	488f      	ldr	r0, [pc, #572]	; (80008c0 <main+0x2e4>)
 8000682:	f002 ffe5 	bl	8003650 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b90      	ldr	r3, [pc, #576]	; (80008cc <main+0x2f0>)
 800068c:	701a      	strb	r2, [r3, #0]
			state = POWER_SWITCH_PIN ? PERIPHERAL_INIT : POWER_OFF;
 800068e:	4b8e      	ldr	r3, [pc, #568]	; (80008c8 <main+0x2ec>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <main+0xbe>
 8000696:	2301      	movs	r3, #1
 8000698:	e000      	b.n	800069c <main+0xc0>
 800069a:	230c      	movs	r3, #12
 800069c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			NEW_LOG_FLAG = 0;
 80006a0:	4b8b      	ldr	r3, [pc, #556]	; (80008d0 <main+0x2f4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
			break;
 80006a6:	e1dd      	b.n	8000a64 <main+0x488>
		 * Transition out:
		 * 	Always -> CREATE_LOG_FILE
		 */
		case PERIPHERAL_INIT:
#ifdef VERBOSE_DEBUGGING
			printf("Initializing with %d buffers storing %d messages\r\n", NUM_BUFFERS, CAN_MESSAGES_PER_BUFFER);
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	2104      	movs	r1, #4
 80006ae:	4889      	ldr	r0, [pc, #548]	; (80008d4 <main+0x2f8>)
 80006b0:	f010 fda8 	bl	8011204 <iprintf>
#endif
			// Reset both buffers
			for (int buffer_num = 0; buffer_num < NUM_BUFFERS; buffer_num++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	653b      	str	r3, [r7, #80]	; 0x50
 80006b8:	e010      	b.n	80006dc <main+0x100>
				data_buffer[buffer_num][0] = '\00';
 80006ba:	4a87      	ldr	r2, [pc, #540]	; (80008d8 <main+0x2fc>)
 80006bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006be:	f644 2101 	movw	r1, #18945	; 0x4a01
 80006c2:	fb01 f303 	mul.w	r3, r1, r3
 80006c6:	4413      	add	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
				buffer_fill_level[buffer_num] = 0;
 80006cc:	4a83      	ldr	r2, [pc, #524]	; (80008dc <main+0x300>)
 80006ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006d0:	2100      	movs	r1, #0
 80006d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int buffer_num = 0; buffer_num < NUM_BUFFERS; buffer_num++) {
 80006d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006d8:	3301      	adds	r3, #1
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
 80006dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006de:	2b03      	cmp	r3, #3
 80006e0:	ddeb      	ble.n	80006ba <main+0xde>
			}

			buffer_writing_to = 0;
 80006e2:	4b7f      	ldr	r3, [pc, #508]	; (80008e0 <main+0x304>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
			buffer_reading_from = 0;
 80006e8:	4b7e      	ldr	r3, [pc, #504]	; (80008e4 <main+0x308>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
			CAN_notifications_deactivated = 0;
 80006ee:	4b7e      	ldr	r3, [pc, #504]	; (80008e8 <main+0x30c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]

			CANRX_ERROR_T ERROR_CODE = INIT_PERIPHERALS();
 80006f4:	f000 fc2c 	bl	8000f50 <INIT_PERIPHERALS>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (ERROR_CODE != PERIPHERAL_INIT_SUCCESSFUL) {
 80006fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000702:	2b07      	cmp	r3, #7
 8000704:	d00a      	beq.n	800071c <main+0x140>
				HAL_CAN_Stop(&hcan1);
 8000706:	4879      	ldr	r0, [pc, #484]	; (80008ec <main+0x310>)
 8000708:	f001 fdd8 	bl	80022bc <HAL_CAN_Stop>
				HAL_Delay(1000);
 800070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000710:	f001 fb84 	bl	8001e1c <HAL_Delay>
				state = TURN_ON;
 8000714:	2300      	movs	r3, #0
 8000716:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800071a:	e1a3      	b.n	8000a64 <main+0x488>
			}
			else {
				state = CREATE_LOG_FILE;
 800071c:	2302      	movs	r3, #2
 800071e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 8000722:	e19f      	b.n	8000a64 <main+0x488>
		 * Transition out:
		 * 	Always -> STANDBY
		 */
		case CREATE_LOG_FILE:
#ifdef VERBOSE_DEBUGGING
			printf("Creating new log file...\r\n");
 8000724:	4872      	ldr	r0, [pc, #456]	; (80008f0 <main+0x314>)
 8000726:	f010 fdd3 	bl	80112d0 <puts>
#endif
			if (CREATE_NEW_LOG() != LOG_CREATION_SUCCESSFUL) {
 800072a:	f000 fd25 	bl	8001178 <CREATE_NEW_LOG>
 800072e:	4603      	mov	r3, r0
 8000730:	2b08      	cmp	r3, #8
 8000732:	d003      	beq.n	800073c <main+0x160>
				state = RESET_STATE;
 8000734:	230b      	movs	r3, #11
 8000736:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800073a:	e193      	b.n	8000a64 <main+0x488>
			}
			// Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 800073c:	2102      	movs	r1, #2
 800073e:	486b      	ldr	r0, [pc, #428]	; (80008ec <main+0x310>)
 8000740:	f001 ff3f 	bl	80025c2 <HAL_CAN_ActivateNotification>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <main+0x17c>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
#ifdef VERBOSE_DEBUGGING
				printf("Failed to activate CAN\r\n");
 800074a:	486a      	ldr	r0, [pc, #424]	; (80008f4 <main+0x318>)
 800074c:	f010 fdc0 	bl	80112d0 <puts>
#endif
				state = RESET_STATE;
 8000750:	230b      	movs	r3, #11
 8000752:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8000756:	e185      	b.n	8000a64 <main+0x488>
			}

			// Turn Green LED on (turns Red LED off)
#ifdef VERBOSE_DEBUGGING
			printf("Ready to receive messages!\r\n");
 8000758:	4867      	ldr	r0, [pc, #412]	; (80008f8 <main+0x31c>)
 800075a:	f010 fdb9 	bl	80112d0 <puts>
#endif

			// purge FIFO in case there are old messages
			while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800075e:	e011      	b.n	8000784 <main+0x1a8>
				CAN_RxHeaderTypeDef RxHeader;
				uint8_t rcvd_msg[8];
				if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) {
 8000760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000764:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000768:	2100      	movs	r1, #0
 800076a:	4860      	ldr	r0, [pc, #384]	; (80008ec <main+0x310>)
 800076c:	f001 fdef 	bl	800234e <HAL_CAN_GetRxMessage>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d006      	beq.n	8000784 <main+0x1a8>
#ifdef VERBOSE_DEBUGGING
						printf("Failed to get message despite message existing\r\n");
 8000776:	4861      	ldr	r0, [pc, #388]	; (80008fc <main+0x320>)
 8000778:	f010 fdaa 	bl	80112d0 <puts>
#endif
						state = RESET_STATE;
 800077c:	230b      	movs	r3, #11
 800077e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000782:	e006      	b.n	8000792 <main+0x1b6>
			while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8000784:	2100      	movs	r1, #0
 8000786:	4859      	ldr	r0, [pc, #356]	; (80008ec <main+0x310>)
 8000788:	f001 fef3 	bl	8002572 <HAL_CAN_GetRxFifoFillLevel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1e6      	bne.n	8000760 <main+0x184>
						break;
					}
			}

			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_SET); // Successful LED
 8000792:	2201      	movs	r2, #1
 8000794:	2101      	movs	r1, #1
 8000796:	484b      	ldr	r0, [pc, #300]	; (80008c4 <main+0x2e8>)
 8000798:	f002 ff72 	bl	8003680 <HAL_GPIO_WritePin>

			state = STANDBY;
 800079c:	2303      	movs	r3, #3
 800079e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 80007a2:	e15f      	b.n	8000a64 <main+0x488>
		 * 	If power switch is set to off position or the new file button is clicked -> RESET_STATE
		 * 	Else if the current buffer is filled -> SD_CARD_WRITE
		 * 	Else -> STANDBY
		 */
		case STANDBY:
			 if (!POWER_OKAY || !POWER_SWITCH_PIN || NEW_LOG_FLAG) //Power switch is off or new log file
 80007a4:	4b49      	ldr	r3, [pc, #292]	; (80008cc <main+0x2f0>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d007      	beq.n	80007bc <main+0x1e0>
 80007ac:	4b46      	ldr	r3, [pc, #280]	; (80008c8 <main+0x2ec>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d003      	beq.n	80007bc <main+0x1e0>
 80007b4:	4b46      	ldr	r3, [pc, #280]	; (80008d0 <main+0x2f4>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <main+0x1e8>
				state = RESET_STATE;
 80007bc:	230b      	movs	r3, #11
 80007be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			else if (buffer_fill_level[buffer_reading_from] == CAN_MESSAGES_PER_BUFFER) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 80007c2:	e146      	b.n	8000a52 <main+0x476>
			else if (buffer_fill_level[buffer_reading_from] == CAN_MESSAGES_PER_BUFFER) //Buffer is filled
 80007c4:	4b47      	ldr	r3, [pc, #284]	; (80008e4 <main+0x308>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b44      	ldr	r3, [pc, #272]	; (80008dc <main+0x300>)
 80007cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007d4:	f040 813d 	bne.w	8000a52 <main+0x476>
				state = SD_CARD_WRITE;
 80007d8:	2306      	movs	r3, #6
 80007da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 80007de:	e138      	b.n	8000a52 <main+0x476>
		 *
		 * Transition out:
		 *	Always -> USB_TRANSMIT
		 */
		case SD_CARD_WRITE:
			if ((fresult_rc = f_write(&SDFile, data_buffer[buffer_reading_from], BUFFER_TOTAL_SIZE, (void*) &byteswritten)) != FR_OK || byteswritten == 0) {
 80007e0:	4b40      	ldr	r3, [pc, #256]	; (80008e4 <main+0x308>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	f644 2301 	movw	r3, #18945	; 0x4a01
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	4a3a      	ldr	r2, [pc, #232]	; (80008d8 <main+0x2fc>)
 80007f0:	1899      	adds	r1, r3, r2
 80007f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007f6:	f44f 4294 	mov.w	r2, #18944	; 0x4a00
 80007fa:	4841      	ldr	r0, [pc, #260]	; (8000900 <main+0x324>)
 80007fc:	f00f f94a 	bl	800fa94 <f_write>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b3f      	ldr	r3, [pc, #252]	; (8000904 <main+0x328>)
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <main+0x328>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <main+0x23a>
 8000810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000812:	2b00      	cmp	r3, #0
 8000814:	d124      	bne.n	8000860 <main+0x284>
#ifdef VERBOSE_DEBUGGING
				printf("Writing Failed with rc = %d\r\n", fresult_rc);
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <main+0x328>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	483a      	ldr	r0, [pc, #232]	; (8000908 <main+0x32c>)
 800081e:	f010 fcf1 	bl	8011204 <iprintf>
#endif
				writing_failed++;
 8000822:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000826:	3301      	adds	r3, #1
 8000828:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

				if (writing_failed == 3) {
 800082c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000830:	2b03      	cmp	r3, #3
 8000832:	d106      	bne.n	8000842 <main+0x266>
#ifdef VERBOSE_DEBUGGING
					printf("Writing Failed 3 Consecutive Times. Rebooting...\r\n");
 8000834:	4835      	ldr	r0, [pc, #212]	; (800090c <main+0x330>)
 8000836:	f010 fd4b 	bl	80112d0 <puts>
#endif
					state = RESET_STATE;
 800083a:	230b      	movs	r3, #11
 800083c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					break;
 8000840:	e110      	b.n	8000a64 <main+0x488>
				}

				if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8000842:	2104      	movs	r1, #4
 8000844:	481f      	ldr	r0, [pc, #124]	; (80008c4 <main+0x2e8>)
 8000846:	f002 ff03 	bl	8003650 <HAL_GPIO_ReadPin>
 800084a:	4603      	mov	r3, r0
 800084c:	2b01      	cmp	r3, #1
 800084e:	f000 8102 	beq.w	8000a56 <main+0x47a>
			    {
#ifdef VERBOSE_DEBUGGING
						printf("SD Card Missing.\r\n");
 8000852:	482f      	ldr	r0, [pc, #188]	; (8000910 <main+0x334>)
 8000854:	f010 fd3c 	bl	80112d0 <puts>
#endif
						state = RESET_STATE;
 8000858:	230b      	movs	r3, #11
 800085a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						break;
 800085e:	e101      	b.n	8000a64 <main+0x488>

				break;

			}

			if (buffer_reading_from == NUM_BUFFERS - 1 && (fresult_rc = f_sync(&SDFile)) != FR_OK) {
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <main+0x308>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d110      	bne.n	800088a <main+0x2ae>
 8000868:	4825      	ldr	r0, [pc, #148]	; (8000900 <main+0x324>)
 800086a:	f00f fa88 	bl	800fd7e <f_sync>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <main+0x328>)
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <main+0x328>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d005      	beq.n	800088a <main+0x2ae>
#ifdef VERBOSE_DEBUGGING
				printf("Sync Failed with rc = %d!\r\n", fresult_rc);
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <main+0x328>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4823      	ldr	r0, [pc, #140]	; (8000914 <main+0x338>)
 8000886:	f010 fcbd 	bl	8011204 <iprintf>
#endif
			}

			writing_failed = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			state = USB_TRANSMIT;
 8000890:	2308      	movs	r3, #8
 8000892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 8000896:	e0e5      	b.n	8000a64 <main+0x488>
		 *
		 * Transition out:
		 *	Always -> RESET_BUFFER
		 */
		case USB_TRANSMIT:
			CDC_Transmit_FS((uint8_t *) data_buffer[buffer_reading_from], BUFFER_TOTAL_SIZE);
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <main+0x308>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	f644 2301 	movw	r3, #18945	; 0x4a01
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <main+0x2fc>)
 80008a8:	4413      	add	r3, r2
 80008aa:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00f fe2e 	bl	8010510 <CDC_Transmit_FS>
			state = RESET_BUFFER;
 80008b4:	230a      	movs	r3, #10
 80008b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 80008ba:	e0d3      	b.n	8000a64 <main+0x488>
 80008bc:	200001b0 	.word	0x200001b0
 80008c0:	40021400 	.word	0x40021400
 80008c4:	40021800 	.word	0x40021800
 80008c8:	200004e8 	.word	0x200004e8
 80008cc:	200004ea 	.word	0x200004ea
 80008d0:	200004e9 	.word	0x200004e9
 80008d4:	08012200 	.word	0x08012200
 80008d8:	200004ec 	.word	0x200004ec
 80008dc:	20012cf0 	.word	0x20012cf0
 80008e0:	20012cf8 	.word	0x20012cf8
 80008e4:	20012cf9 	.word	0x20012cf9
 80008e8:	20012cfa 	.word	0x20012cfa
 80008ec:	20000188 	.word	0x20000188
 80008f0:	08012234 	.word	0x08012234
 80008f4:	08012250 	.word	0x08012250
 80008f8:	08012268 	.word	0x08012268
 80008fc:	08012284 	.word	0x08012284
 8000900:	20012f4c 	.word	0x20012f4c
 8000904:	20012cfb 	.word	0x20012cfb
 8000908:	080122b4 	.word	0x080122b4
 800090c:	080122d4 	.word	0x080122d4
 8000910:	08012308 	.word	0x08012308
 8000914:	0801231c 	.word	0x0801231c
		 * Transition out:
		 *	Always -> STANDBY
		 */
		case RESET_BUFFER:
			// Reset buffer that was just sent to SD and USB
			data_buffer[buffer_reading_from][0] = '\00';
 8000918:	4b53      	ldr	r3, [pc, #332]	; (8000a68 <main+0x48c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	4a53      	ldr	r2, [pc, #332]	; (8000a6c <main+0x490>)
 8000920:	f644 2301 	movw	r3, #18945	; 0x4a01
 8000924:	fb01 f303 	mul.w	r3, r1, r3
 8000928:	4413      	add	r3, r2
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[buffer_reading_from] = 0;
 800092e:	4b4e      	ldr	r3, [pc, #312]	; (8000a68 <main+0x48c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	4b4e      	ldr	r3, [pc, #312]	; (8000a70 <main+0x494>)
 8000936:	2100      	movs	r1, #0
 8000938:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			buffer_reading_from = (buffer_reading_from + 1) % NUM_BUFFERS;
 800093c:	4b4a      	ldr	r3, [pc, #296]	; (8000a68 <main+0x48c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	425a      	negs	r2, r3
 8000944:	f003 0303 	and.w	r3, r3, #3
 8000948:	f002 0203 	and.w	r2, r2, #3
 800094c:	bf58      	it	pl
 800094e:	4253      	negpl	r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b45      	ldr	r3, [pc, #276]	; (8000a68 <main+0x48c>)
 8000954:	701a      	strb	r2, [r3, #0]
//			printf("------------------------------------------\r\n");
//			for (int buff_num = 0; buff_num < NUM_BUFFERS; buff_num++) {
//				printf("Buffer[%d]: %d\r\n", buff_num, buffer_fill_level[buff_num]);
//			}

			if (CAN_notifications_deactivated) {
 8000956:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <main+0x498>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d033      	beq.n	80009c6 <main+0x3ea>
#ifdef VERBOSE_DEBUGGING
				printf("Resuming receive...\r\n");
 800095e:	4846      	ldr	r0, [pc, #280]	; (8000a78 <main+0x49c>)
 8000960:	f010 fcb6 	bl	80112d0 <puts>
#endif
				// purge FIFO in case there are old messages
				while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8000964:	e010      	b.n	8000988 <main+0x3ac>
					CAN_RxHeaderTypeDef RxHeader;
					uint8_t rcvd_msg[8];
					if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) {
 8000966:	463b      	mov	r3, r7
 8000968:	f107 0208 	add.w	r2, r7, #8
 800096c:	2100      	movs	r1, #0
 800096e:	4843      	ldr	r0, [pc, #268]	; (8000a7c <main+0x4a0>)
 8000970:	f001 fced 	bl	800234e <HAL_CAN_GetRxMessage>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <main+0x3ac>
#ifdef VERBOSE_DEBUGGING
						printf("Failed to get message despite message existing\r\n");
 800097a:	4841      	ldr	r0, [pc, #260]	; (8000a80 <main+0x4a4>)
 800097c:	f010 fca8 	bl	80112d0 <puts>
#endif
						state = RESET_STATE;
 8000980:	230b      	movs	r3, #11
 8000982:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000986:	e006      	b.n	8000996 <main+0x3ba>
				while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8000988:	2100      	movs	r1, #0
 800098a:	483c      	ldr	r0, [pc, #240]	; (8000a7c <main+0x4a0>)
 800098c:	f001 fdf1 	bl	8002572 <HAL_CAN_GetRxFifoFillLevel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1e7      	bne.n	8000966 <main+0x38a>
						break;
					}
				}

				total_ticks_with_can_deactivated += HAL_GetTick() - tick_when_can_deactivated_last;
 8000996:	f001 fa35 	bl	8001e04 <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <main+0x4a8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1ad2      	subs	r2, r2, r3
 80009a2:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <main+0x4ac>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a37      	ldr	r2, [pc, #220]	; (8000a88 <main+0x4ac>)
 80009aa:	6013      	str	r3, [r2, #0]

#ifdef VERBOSE_DEBUGGING
				printf("Total ticks with CAN notifications deactivated: %ld\r\n", total_ticks_with_can_deactivated);
 80009ac:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <main+0x4ac>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4836      	ldr	r0, [pc, #216]	; (8000a8c <main+0x4b0>)
 80009b4:	f010 fc26 	bl	8011204 <iprintf>
#endif

				CAN_notifications_deactivated = 0;
 80009b8:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <main+0x498>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
				HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80009be:	2102      	movs	r1, #2
 80009c0:	482e      	ldr	r0, [pc, #184]	; (8000a7c <main+0x4a0>)
 80009c2:	f001 fdfe 	bl	80025c2 <HAL_CAN_ActivateNotification>
			}

			byteswritten = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48

			state = STANDBY;
 80009ca:	2303      	movs	r3, #3
 80009cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 80009d0:	e048      	b.n	8000a64 <main+0x488>
		 *	If power switch is in off position -> POWER_OFF
		 *	Else (button was pressed) -> TURN_ON
		 */
		case RESET_STATE:
			// Turn off CAN interrupt
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80009d2:	2102      	movs	r1, #2
 80009d4:	4829      	ldr	r0, [pc, #164]	; (8000a7c <main+0x4a0>)
 80009d6:	f001 fe1a 	bl	800260e <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 80009da:	4828      	ldr	r0, [pc, #160]	; (8000a7c <main+0x4a0>)
 80009dc:	f001 fc6e 	bl	80022bc <HAL_CAN_Stop>

			// Turn Red LED on (Green LED turns off)
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET); //Red LED
 80009e0:	2200      	movs	r2, #0
 80009e2:	2101      	movs	r1, #1
 80009e4:	482a      	ldr	r0, [pc, #168]	; (8000a90 <main+0x4b4>)
 80009e6:	f002 fe4b 	bl	8003680 <HAL_GPIO_WritePin>

			f_close(&SDFile);
 80009ea:	482a      	ldr	r0, [pc, #168]	; (8000a94 <main+0x4b8>)
 80009ec:	f00f fa45 	bl	800fe7a <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2000      	movs	r0, #0
 80009f6:	f00e fe49 	bl	800f68c <f_mount>
			state = TURN_ON; // button was pressed
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

			if (!POWER_OKAY || !POWER_SWITCH_PIN) {
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <main+0x4bc>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <main+0x434>
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <main+0x4c0>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d124      	bne.n	8000a5a <main+0x47e>
				state = POWER_OFF;
 8000a10:	230c      	movs	r3, #12
 8000a12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef VERBOSE_DEBUGGING
				printf("Turning off!\r\n");
 8000a16:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <main+0x4c4>)
 8000a18:	f010 fc5a 	bl	80112d0 <puts>
#endif

			}

			break;
 8000a1c:	e01d      	b.n	8000a5a <main+0x47e>
		 * Transition out:
		 *	If power switch is in the on position -> TURN_ON
		 *	Else -> POWER_OFF
		 */
		case POWER_OFF:
			if (!POWER_OKAY){
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <main+0x4bc>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d01b      	beq.n	8000a5e <main+0x482>
				break;
			}
			if (POWER_SWITCH_PIN) {
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <main+0x4c0>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d019      	beq.n	8000a62 <main+0x486>
				state = TURN_ON;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

#ifdef VERBOSE_DEBUGGING
				printf("\r\nTurning back on!\r\n");
 8000a34:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <main+0x4c8>)
 8000a36:	f010 fc4b 	bl	80112d0 <puts>
#endif
			}
			break;
 8000a3a:	e012      	b.n	8000a62 <main+0x486>

		default:
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin,
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4813      	ldr	r0, [pc, #76]	; (8000a90 <main+0x4b4>)
 8000a42:	f002 fe1d 	bl	8003680 <HAL_GPIO_WritePin>
								GPIO_PIN_RESET); // Red LED

#ifdef VERBOSE_DEBUGGING
			printf("CAN logger in unknown state!\r\n");
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <main+0x4cc>)
 8000a48:	f010 fc42 	bl	80112d0 <puts>
#endif
			break;
 8000a4c:	e00a      	b.n	8000a64 <main+0x488>
			break;
 8000a4e:	bf00      	nop
 8000a50:	e5e4      	b.n	800061c <main+0x40>
			break;
 8000a52:	bf00      	nop
 8000a54:	e5e2      	b.n	800061c <main+0x40>
				break;
 8000a56:	bf00      	nop
 8000a58:	e5e0      	b.n	800061c <main+0x40>
			break;
 8000a5a:	bf00      	nop
 8000a5c:	e5de      	b.n	800061c <main+0x40>
				break;
 8000a5e:	bf00      	nop
 8000a60:	e5dc      	b.n	800061c <main+0x40>
			break;
 8000a62:	bf00      	nop
		switch (state) {
 8000a64:	e5da      	b.n	800061c <main+0x40>
 8000a66:	bf00      	nop
 8000a68:	20012cf9 	.word	0x20012cf9
 8000a6c:	200004ec 	.word	0x200004ec
 8000a70:	20012cf0 	.word	0x20012cf0
 8000a74:	20012cfa 	.word	0x20012cfa
 8000a78:	08012338 	.word	0x08012338
 8000a7c:	20000188 	.word	0x20000188
 8000a80:	08012284 	.word	0x08012284
 8000a84:	20012cfc 	.word	0x20012cfc
 8000a88:	20012d00 	.word	0x20012d00
 8000a8c:	08012350 	.word	0x08012350
 8000a90:	40021800 	.word	0x40021800
 8000a94:	20012f4c 	.word	0x20012f4c
 8000a98:	200004ea 	.word	0x200004ea
 8000a9c:	200004e8 	.word	0x200004e8
 8000aa0:	08012388 	.word	0x08012388
 8000aa4:	08012398 	.word	0x08012398
 8000aa8:	080123ac 	.word	0x080123ac

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	; 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	2234      	movs	r2, #52	; 0x34
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f010 fc1f 	bl	80112fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0xc8>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a27      	ldr	r2, [pc, #156]	; (8000b74 <SystemClock_Config+0xc8>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <SystemClock_Config+0xc8>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <SystemClock_Config+0xcc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000af0:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <SystemClock_Config+0xcc>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <SystemClock_Config+0xcc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b1c:	2360      	movs	r3, #96	; 0x60
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fe19 	bl	8005768 <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b3c:	f000 fc62 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	230f      	movs	r3, #15
 8000b42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2302      	movs	r3, #2
 8000b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f005 f8b1 	bl	8005cc4 <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b68:	f000 fc4c 	bl	8001404 <Error_Handler>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3750      	adds	r7, #80	; 0x50
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000

08000b7c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000b82:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <MX_CAN1_Init+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000b88:	2203      	movs	r2, #3
 8000b8a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000b9a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000b9e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000ba2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ba6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_CAN1_Init+0x64>)
 8000bce:	f001 f949 	bl	8001e64 <HAL_CAN_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000bd8:	f000 fc14 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000188 	.word	0x20000188
 8000be4:	40006400 	.word	0x40006400

08000be8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <MX_I2C1_Init+0x78>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <MX_I2C1_Init+0x7c>)
 8000bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c24:	f002 fd6a 	bl	80036fc <HAL_I2C_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c2e:	f000 fbe9 	bl	8001404 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c36:	f003 fa47 	bl	80040c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 fbe0 	bl	8001404 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c48:	f003 fa89 	bl	800415e <HAL_I2CEx_ConfigDigitalFilter>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c52:	f000 fbd7 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200001b0 	.word	0x200001b0
 8000c60:	40005400 	.word	0x40005400
 8000c64:	00506682 	.word	0x00506682

08000c68 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static HAL_StatusTypeDef MX_SDMMC1_SD_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_SDMMC1_SD_Init+0x3c>)
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <MX_SDMMC1_SD_Init+0x40>)
 8000c70:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_SDMMC1_SD_Init+0x3c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_SDMMC1_SD_Init+0x3c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_SDMMC1_SD_Init+0x3c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_SDMMC1_SD_Init+0x3c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_SDMMC1_SD_Init+0x3c>)
 8000c8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c90:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 3;
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <MX_SDMMC1_SD_Init+0x3c>)
 8000c94:	2203      	movs	r2, #3
 8000c96:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  return HAL_SD_Init(&hsd1);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <MX_SDMMC1_SD_Init+0x3c>)
 8000c9a:	f005 fe61 	bl	8006960 <HAL_SD_Init>
 8000c9e:	4603      	mov	r3, r0
  /* USER CODE END SDMMC1_Init 2 */

}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000204 	.word	0x20000204
 8000ca8:	40012c00 	.word	0x40012c00

08000cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <MX_USART3_UART_Init+0x5c>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cf0:	f007 fa5d 	bl	80081ae <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cfa:	f000 fb83 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000348 	.word	0x20000348
 8000d08:	40004800 	.word	0x40004800

08000d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_DMA_Init+0x48>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <MX_DMA_Init+0x48>)
 8000d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <MX_DMA_Init+0x48>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	203b      	movs	r0, #59	; 0x3b
 8000d30:	f001 ff9f 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d34:	203b      	movs	r0, #59	; 0x3b
 8000d36:	f001 ffb8 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2045      	movs	r0, #69	; 0x45
 8000d40:	f001 ff97 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000d44:	2045      	movs	r0, #69	; 0x45
 8000d46:	f001 ffb0 	bl	8002caa <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b74      	ldr	r3, [pc, #464]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a73      	ldr	r2, [pc, #460]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b71      	ldr	r3, [pc, #452]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	623b      	str	r3, [r7, #32]
 8000d84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	4b6e      	ldr	r3, [pc, #440]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a6d      	ldr	r2, [pc, #436]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9a:	61fb      	str	r3, [r7, #28]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9e:	4b68      	ldr	r3, [pc, #416]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a67      	ldr	r2, [pc, #412]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0320 	and.w	r3, r3, #32
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db6:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a61      	ldr	r2, [pc, #388]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b5f      	ldr	r3, [pc, #380]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	4b5c      	ldr	r3, [pc, #368]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a55      	ldr	r2, [pc, #340]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b50      	ldr	r3, [pc, #320]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a4f      	ldr	r2, [pc, #316]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a49      	ldr	r2, [pc, #292]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <MX_GPIO_Init+0x1e8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PokManualReset_GPIO_Port, PokManualReset_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e34:	4843      	ldr	r0, [pc, #268]	; (8000f44 <MX_GPIO_Init+0x1ec>)
 8000e36:	f002 fc23 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, StatusSignal_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2141      	movs	r1, #65	; 0x41
 8000e3e:	4842      	ldr	r0, [pc, #264]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000e40:	f002 fc1e 	bl	8003680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PokRESET_Pin */
  GPIO_InitStruct.Pin = PokRESET_Pin;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e4a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PokRESET_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	483a      	ldr	r0, [pc, #232]	; (8000f44 <MX_GPIO_Init+0x1ec>)
 8000e5c:	f002 fa4c 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PokManualReset_Pin */
  GPIO_InitStruct.Pin = PokManualReset_Pin;
 8000e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PokManualReset_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4832      	ldr	r0, [pc, #200]	; (8000f44 <MX_GPIO_Init+0x1ec>)
 8000e7a:	f002 fa3d 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : StatusSignal_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = StatusSignal_Pin|USB_PowerSwitchOn_Pin;
 8000e7e:	2341      	movs	r3, #65	; 0x41
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	482c      	ldr	r0, [pc, #176]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000e96:	f002 fa2f 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e9e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	4826      	ldr	r0, [pc, #152]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000eb0:	f002 fa22 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481e      	ldr	r0, [pc, #120]	; (8000f4c <MX_GPIO_Init+0x1f4>)
 8000ed2:	f002 fa11 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000ed6:	2384      	movs	r3, #132	; 0x84
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4817      	ldr	r0, [pc, #92]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000eea:	f002 fa05 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NewLogBtn_Pin */
  GPIO_InitStruct.Pin = NewLogBtn_Pin;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NewLogBtn_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_GPIO_Init+0x1f0>)
 8000f04:	f002 f9f8 	bl	80032f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2007      	movs	r0, #7
 8000f0e:	f001 feb0 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f12:	2007      	movs	r0, #7
 8000f14:	f001 fec9 	bl	8002caa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2009      	movs	r0, #9
 8000f1e:	f001 fea8 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f22:	2009      	movs	r0, #9
 8000f24:	f001 fec1 	bl	8002caa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2028      	movs	r0, #40	; 0x28
 8000f2e:	f001 fea0 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f32:	2028      	movs	r0, #40	; 0x28
 8000f34:	f001 feb9 	bl	8002caa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f38:	bf00      	nop
 8000f3a:	3738      	adds	r7, #56	; 0x38
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40021400 	.word	0x40021400
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	40021000 	.word	0x40021000

08000f50 <INIT_PERIPHERALS>:

/* USER CODE BEGIN 4 */

static CANRX_ERROR_T INIT_PERIPHERALS(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
#ifdef VERBOSE_DEBUGGING
	printf("Initializing Peripherals...\r\n");
 8000f54:	4829      	ldr	r0, [pc, #164]	; (8000ffc <INIT_PERIPHERALS+0xac>)
 8000f56:	f010 f9bb 	bl	80112d0 <puts>
#endif

	 if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4828      	ldr	r0, [pc, #160]	; (8001000 <INIT_PERIPHERALS+0xb0>)
 8000f5e:	f002 fb77 	bl	8003650 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d004      	beq.n	8000f72 <INIT_PERIPHERALS+0x22>
    {
#ifdef VERBOSE_DEBUGGING
		 printf("SD Card Missing.\r\n");
 8000f68:	4826      	ldr	r0, [pc, #152]	; (8001004 <INIT_PERIPHERALS+0xb4>)
 8000f6a:	f010 f9b1 	bl	80112d0 <puts>
#endif
        return SD_CARD_MISSING;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e042      	b.n	8000ff8 <INIT_PERIPHERALS+0xa8>
//	}
//#ifdef VERBOSE_DEBUGGING
//		 printf("DMA Initialization Successful.\r\n");
//#endif

	if (MX_SDMMC1_SD_Init() != HAL_OK) {
 8000f72:	f7ff fe79 	bl	8000c68 <MX_SDMMC1_SD_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d004      	beq.n	8000f86 <INIT_PERIPHERALS+0x36>
#ifdef VERBOSE_DEBUGGING
		 printf("SDMMC Initialization Failed.\r\n");
 8000f7c:	4822      	ldr	r0, [pc, #136]	; (8001008 <INIT_PERIPHERALS+0xb8>)
 8000f7e:	f010 f9a7 	bl	80112d0 <puts>
#endif
		return SDMMC_INIT_FAILED;
 8000f82:	2302      	movs	r3, #2
 8000f84:	e038      	b.n	8000ff8 <INIT_PERIPHERALS+0xa8>
	}
#ifdef VERBOSE_DEBUGGING
		 printf("SDMMC Initialization Successful.\r\n");
 8000f86:	4821      	ldr	r0, [pc, #132]	; (800100c <INIT_PERIPHERALS+0xbc>)
 8000f88:	f010 f9a2 	bl	80112d0 <puts>
#endif

	if (!MX_FATFS_Init()) {
 8000f8c:	f009 ffbc 	bl	800af08 <MX_FATFS_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d104      	bne.n	8000fa0 <INIT_PERIPHERALS+0x50>
#ifdef VERBOSE_DEBUGGING
		 printf("FATFS Initialization Failed.\r\n");
 8000f96:	481e      	ldr	r0, [pc, #120]	; (8001010 <INIT_PERIPHERALS+0xc0>)
 8000f98:	f010 f99a 	bl	80112d0 <puts>
#endif
		return FATFS_INIT_FAILED;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e02b      	b.n	8000ff8 <INIT_PERIPHERALS+0xa8>
	}
#ifdef VERBOSE_DEBUGGING
		 printf("FATFS Initialization Successful.\r\n");
 8000fa0:	481c      	ldr	r0, [pc, #112]	; (8001014 <INIT_PERIPHERALS+0xc4>)
 8000fa2:	f010 f995 	bl	80112d0 <puts>
#endif
	// Initializing CAN
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000fa6:	481c      	ldr	r0, [pc, #112]	; (8001018 <INIT_PERIPHERALS+0xc8>)
 8000fa8:	f001 f944 	bl	8002234 <HAL_CAN_Start>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <INIT_PERIPHERALS+0x6c>
#ifdef VERBOSE_DEBUGGING
		printf("CAN could not start.\r\n");
 8000fb2:	481a      	ldr	r0, [pc, #104]	; (800101c <INIT_PERIPHERALS+0xcc>)
 8000fb4:	f010 f98c 	bl	80112d0 <puts>
#endif
		return HAL_CAN_START_FAILED;
 8000fb8:	2305      	movs	r3, #5
 8000fba:	e01d      	b.n	8000ff8 <INIT_PERIPHERALS+0xa8>
	}
	if (CAN_Filter_Config() != HAL_OK) {
 8000fbc:	f000 f8a8 	bl	8001110 <CAN_Filter_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <INIT_PERIPHERALS+0x80>
#ifdef VERBOSE_DEBUGGING
		printf("CAN filter failed to set.\r\n");
 8000fc6:	4816      	ldr	r0, [pc, #88]	; (8001020 <INIT_PERIPHERALS+0xd0>)
 8000fc8:	f010 f982 	bl	80112d0 <puts>
#endif
		return CAN_FILTER_CONFIG_FAILED;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	e013      	b.n	8000ff8 <INIT_PERIPHERALS+0xa8>
	}
#ifdef VERBOSE_DEBUGGING
	printf("CAN initialization succeeded...\r\n");
 8000fd0:	4814      	ldr	r0, [pc, #80]	; (8001024 <INIT_PERIPHERALS+0xd4>)
 8000fd2:	f010 f97d 	bl	80112d0 <puts>
#endif

	// Mount and Format SD Card
	if (f_mount(&SDFatFS, SDPath, 1) != FR_OK) {
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4913      	ldr	r1, [pc, #76]	; (8001028 <INIT_PERIPHERALS+0xd8>)
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <INIT_PERIPHERALS+0xdc>)
 8000fdc:	f00e fb56 	bl	800f68c <f_mount>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <INIT_PERIPHERALS+0xa0>
#ifdef VERBOSE_DEBUGGING
		printf("Mounting failed!\r\n");
 8000fe6:	4812      	ldr	r0, [pc, #72]	; (8001030 <INIT_PERIPHERALS+0xe0>)
 8000fe8:	f010 f972 	bl	80112d0 <puts>
#endif
		return SD_MOUNTING_FAILED;
 8000fec:	2306      	movs	r3, #6
 8000fee:	e003      	b.n	8000ff8 <INIT_PERIPHERALS+0xa8>
	}
#ifdef VERBOSE_DEBUGGING
		printf("SD Mounting Successful...\r\n");
 8000ff0:	4810      	ldr	r0, [pc, #64]	; (8001034 <INIT_PERIPHERALS+0xe4>)
 8000ff2:	f010 f96d 	bl	80112d0 <puts>
#endif

	return PERIPHERAL_INIT_SUCCESSFUL;
 8000ff6:	2307      	movs	r3, #7
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	080123cc 	.word	0x080123cc
 8001000:	40021800 	.word	0x40021800
 8001004:	08012308 	.word	0x08012308
 8001008:	080123ec 	.word	0x080123ec
 800100c:	0801240c 	.word	0x0801240c
 8001010:	08012430 	.word	0x08012430
 8001014:	08012450 	.word	0x08012450
 8001018:	20000188 	.word	0x20000188
 800101c:	08012474 	.word	0x08012474
 8001020:	0801248c 	.word	0x0801248c
 8001024:	080124a8 	.word	0x080124a8
 8001028:	20012d14 	.word	0x20012d14
 800102c:	20012d18 	.word	0x20012d18
 8001030:	080124cc 	.word	0x080124cc
 8001034:	080124e0 	.word	0x080124e0

08001038 <Get_and_Append_CAN_Message_to_Buffer>:

void Get_and_Append_CAN_Message_to_Buffer() {
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b0a3      	sub	sp, #140	; 0x8c
 800103c:	af0a      	add	r7, sp, #40	; 0x28
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 800103e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001042:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001046:	2100      	movs	r1, #0
 8001048:	482b      	ldr	r0, [pc, #172]	; (80010f8 <Get_and_Append_CAN_Message_to_Buffer+0xc0>)
 800104a:	f001 f980 	bl	800234e <HAL_CAN_GetRxMessage>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
#ifdef VERBOSE_DEBUGGING
		printf("Failed to get CAN message\r\n");
 8001054:	4829      	ldr	r0, [pc, #164]	; (80010fc <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8001056:	f010 f93b 	bl	80112d0 <puts>
#endif
		Error_Handler();
 800105a:	f000 f9d3 	bl	8001404 <Error_Handler>

	// snprintf includes the null terminating string
	char encodedData[ENCODED_CAN_SIZE_BYTES+1];

	// consider writing raw bytes
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 800105e:	f000 fed1 	bl	8001e04 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001066:	60fb      	str	r3, [r7, #12]
			"%010ld#%08lX#%02X%02X%02X%02X%02X%02X%02X%02X\n",
			HAL_GetTick(),
			RxHeader.ExtId,
			rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3],
 8001068:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800106c:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001070:	4604      	mov	r4, r0
			rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3],
 8001072:	f897 003e 	ldrb.w	r0, [r7, #62]	; 0x3e
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001076:	4605      	mov	r5, r0
			rcvd_msg[0], rcvd_msg[1], rcvd_msg[2], rcvd_msg[3],
 8001078:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 800107c:	4606      	mov	r6, r0
			rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 800107e:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001082:	60b8      	str	r0, [r7, #8]
			rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 8001084:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001088:	6078      	str	r0, [r7, #4]
			rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 800108a:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 800108e:	6038      	str	r0, [r7, #0]
			rcvd_msg[4], rcvd_msg[5], rcvd_msg[6], rcvd_msg[7]);
 8001090:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001094:	4603      	mov	r3, r0
 8001096:	f107 0014 	add.w	r0, r7, #20
 800109a:	9308      	str	r3, [sp, #32]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	9307      	str	r3, [sp, #28]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	9306      	str	r3, [sp, #24]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	9305      	str	r3, [sp, #20]
 80010a8:	9604      	str	r6, [sp, #16]
 80010aa:	9503      	str	r5, [sp, #12]
 80010ac:	9402      	str	r4, [sp, #8]
 80010ae:	9101      	str	r1, [sp, #4]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4613      	mov	r3, r2
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 80010b8:	2126      	movs	r1, #38	; 0x26
 80010ba:	f00f ffa1 	bl	8011000 <sniprintf>

	strcat(data_buffer[buffer_writing_to], encodedData);
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <Get_and_Append_CAN_Message_to_Buffer+0xcc>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	f644 2301 	movw	r3, #18945	; 0x4a01
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <Get_and_Append_CAN_Message_to_Buffer+0xd0>)
 80010ce:	4413      	add	r3, r2
 80010d0:	f107 0214 	add.w	r2, r7, #20
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f010 f902 	bl	80112e0 <strcat>
	buffer_fill_level[buffer_writing_to]++;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <Get_and_Append_CAN_Message_to_Buffer+0xcc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 80010e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010e6:	3201      	adds	r2, #1
 80010e8:	b291      	uxth	r1, r2
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 80010ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 80010f0:	bf00      	nop
 80010f2:	3764      	adds	r7, #100	; 0x64
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f8:	20000188 	.word	0x20000188
 80010fc:	080124fc 	.word	0x080124fc
 8001100:	08012518 	.word	0x08012518
 8001104:	20012cf8 	.word	0x20012cf8
 8001108:	200004ec 	.word	0x200004ec
 800110c:	20012cf0 	.word	0x20012cf0

08001110 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 800111a:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8001120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001122:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8001126:	b29b      	uxth	r3, r3
 8001128:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	0a1a      	lsrs	r2, r3, #8
 800112e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001132:	4013      	ands	r3, r2
 8001134:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 800113c:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 800113e:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	0a1a      	lsrs	r2, r3, #8
 8001144:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001158:	2301      	movs	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 800115c:	2301      	movs	r3, #1
 800115e:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <CAN_Filter_Config+0x64>)
 8001166:	f000 ff79 	bl	800205c <HAL_CAN_ConfigFilter>
 800116a:	4603      	mov	r3, r0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3730      	adds	r7, #48	; 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000188 	.word	0x20000188

08001178 <CREATE_NEW_LOG>:
//
//	// After the year 2100, this is off by one day, but we ignore that...
//	return ((prev_year - 1972) / 4) + 1;
//}

static CANRX_ERROR_T CREATE_NEW_LOG(void) {
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b0cb      	sub	sp, #300	; 0x12c
 800117c:	af06      	add	r7, sp, #24

	// Update current date/time info
	uint8_t curr_date = DS1307_GetDate();
 800117e:	f000 fd73 	bl	8001c68 <DS1307_GetDate>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t curr_month = DS1307_GetMonth();
 8001188:	f000 fd7a 	bl	8001c80 <DS1307_GetMonth>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint8_t curr_year = DS1307_GetYear();
 8001192:	f000 fd81 	bl	8001c98 <DS1307_GetYear>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t curr_hour = DS1307_GetHour();
 800119c:	f000 fd9e 	bl	8001cdc <DS1307_GetHour>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	uint8_t curr_minute = DS1307_GetMinute();
 80011a6:	f000 fda8 	bl	8001cfa <DS1307_GetMinute>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
	uint8_t curr_second = DS1307_GetSecond();
 80011b0:	f000 fdaf 	bl	8001d12 <DS1307_GetSecond>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
//
//	// now in milliseconds
//	starting_timestamp_ms = starting_timestamp_sec * 1000 + ((uint64_t) (starting_tick - HAL_GetTick()));

#ifdef VERBOSE_DEBUGGING
	printf("Starting new log at %02d-%02d-20%02dT%02d:%02d:%02dZ\r\n",
 80011ba:	f897 010b 	ldrb.w	r0, [r7, #267]	; 0x10b
 80011be:	f897 410c 	ldrb.w	r4, [r7, #268]	; 0x10c
 80011c2:	f897 510d 	ldrb.w	r5, [r7, #269]	; 0x10d
 80011c6:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80011ca:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 80011ce:	f897 1108 	ldrb.w	r1, [r7, #264]	; 0x108
 80011d2:	9102      	str	r1, [sp, #8]
 80011d4:	9201      	str	r2, [sp, #4]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	462b      	mov	r3, r5
 80011da:	4622      	mov	r2, r4
 80011dc:	4601      	mov	r1, r0
 80011de:	4848      	ldr	r0, [pc, #288]	; (8001300 <CREATE_NEW_LOG+0x188>)
 80011e0:	f010 f810 	bl	8011204 <iprintf>
			curr_year, curr_month, curr_date, curr_hour, curr_minute, curr_second);
#endif
	if (f_stat(data_directory, &fno) != FR_OK) {
 80011e4:	4b47      	ldr	r3, [pc, #284]	; (8001304 <CREATE_NEW_LOG+0x18c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4947      	ldr	r1, [pc, #284]	; (8001308 <CREATE_NEW_LOG+0x190>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00e fe6f 	bl	800fece <f_stat>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d028      	beq.n	8001248 <CREATE_NEW_LOG+0xd0>
#ifdef VERBOSE_DEBUGGING
		printf("/CAN_DATA directory not present attempting to create it...\n\r");
 80011f6:	4845      	ldr	r0, [pc, #276]	; (800130c <CREATE_NEW_LOG+0x194>)
 80011f8:	f010 f804 	bl	8011204 <iprintf>
#endif
		uint8_t RETRY_COUNT = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		while (RETRY_COUNT < DEFAULT_RETRIES) {
 8001202:	e014      	b.n	800122e <CREATE_NEW_LOG+0xb6>
			if (f_mkdir(data_directory) != FR_OK) {
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <CREATE_NEW_LOG+0x18c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f00e fe99 	bl	800ff40 <f_mkdir>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <CREATE_NEW_LOG+0xae>
#ifdef VERBOSE_DEBUGGING
				printf("Failed to create /CAN_DATA Directory. Retrying...\n\r");
 8001214:	483e      	ldr	r0, [pc, #248]	; (8001310 <CREATE_NEW_LOG+0x198>)
 8001216:	f00f fff5 	bl	8011204 <iprintf>
#endif
				RETRY_COUNT++;
 800121a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800121e:	3301      	adds	r3, #1
 8001220:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001224:	e003      	b.n	800122e <CREATE_NEW_LOG+0xb6>
			}
			else {
#ifdef VERBOSE_DEBUGGING
				printf("Successfully created /CAN_DATA Directory\n\r");
 8001226:	483b      	ldr	r0, [pc, #236]	; (8001314 <CREATE_NEW_LOG+0x19c>)
 8001228:	f00f ffec 	bl	8011204 <iprintf>
#endif
				break;
 800122c:	e003      	b.n	8001236 <CREATE_NEW_LOG+0xbe>
		while (RETRY_COUNT < DEFAULT_RETRIES) {
 800122e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001232:	2b02      	cmp	r3, #2
 8001234:	d9e6      	bls.n	8001204 <CREATE_NEW_LOG+0x8c>
			}
		}
		if (RETRY_COUNT == 3) {
 8001236:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800123a:	2b03      	cmp	r3, #3
 800123c:	d104      	bne.n	8001248 <CREATE_NEW_LOG+0xd0>
#ifdef VERBOSE_DEBUGGING
			printf("Unable to create /CAN_DATA Directory\n\r");
 800123e:	4836      	ldr	r0, [pc, #216]	; (8001318 <CREATE_NEW_LOG+0x1a0>)
 8001240:	f00f ffe0 	bl	8011204 <iprintf>
#endif
			return DATA_DIRECTORY_CREATION_UNSUCCESSFUL;
 8001244:	2309      	movs	r3, #9
 8001246:	e055      	b.n	80012f4 <CREATE_NEW_LOG+0x17c>
		}
	}

	// Creating new filename
	TCHAR filename[FILENAME_MAX_BYTES];
	snprintf(filename, FILENAME_MAX_BYTES, "%s/20%02d-%02d-%02dT%02d-%02d-%02dZ.log",
 8001248:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <CREATE_NEW_LOG+0x18c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8001252:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8001256:	f897 110d 	ldrb.w	r1, [r7, #269]	; 0x10d
 800125a:	f897 010a 	ldrb.w	r0, [r7, #266]	; 0x10a
 800125e:	f897 4109 	ldrb.w	r4, [r7, #265]	; 0x109
 8001262:	f897 5108 	ldrb.w	r5, [r7, #264]	; 0x108
 8001266:	f107 0608 	add.w	r6, r7, #8
 800126a:	9505      	str	r5, [sp, #20]
 800126c:	9404      	str	r4, [sp, #16]
 800126e:	9003      	str	r0, [sp, #12]
 8001270:	9102      	str	r1, [sp, #8]
 8001272:	9201      	str	r2, [sp, #4]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a28      	ldr	r2, [pc, #160]	; (800131c <CREATE_NEW_LOG+0x1a4>)
 800127a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127e:	4630      	mov	r0, r6
 8001280:	f00f febe 	bl	8011000 <sniprintf>
			data_directory,
			curr_year, curr_month, curr_date,
			curr_hour, curr_minute, curr_second);

#ifdef VERBOSE_DEBUGGING
	printf("New log name: %s \r\n", filename);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4619      	mov	r1, r3
 800128a:	4825      	ldr	r0, [pc, #148]	; (8001320 <CREATE_NEW_LOG+0x1a8>)
 800128c:	f00f ffba 	bl	8011204 <iprintf>
#endif
	uint8_t RETRY_COUNT = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	while (RETRY_COUNT < DEFAULT_RETRIES) {
 8001296:	e014      	b.n	80012c2 <CREATE_NEW_LOG+0x14a>
		RETRY_COUNT++;
 8001298:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800129c:	3301      	adds	r3, #1
 800129e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	// Open file for writing (Create)
		if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	220a      	movs	r2, #10
 80012a8:	4619      	mov	r1, r3
 80012aa:	481e      	ldr	r0, [pc, #120]	; (8001324 <CREATE_NEW_LOG+0x1ac>)
 80012ac:	f00e fa34 	bl	800f718 <f_open>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00a      	beq.n	80012cc <CREATE_NEW_LOG+0x154>
				!= FR_OK) {
#ifdef VERBOSE_DEBUGGING
			printf("Failed to create new log file: %s. Retrying...!\r\n", filename);
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	4619      	mov	r1, r3
 80012bc:	481a      	ldr	r0, [pc, #104]	; (8001328 <CREATE_NEW_LOG+0x1b0>)
 80012be:	f00f ffa1 	bl	8011204 <iprintf>
	while (RETRY_COUNT < DEFAULT_RETRIES) {
 80012c2:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d9e6      	bls.n	8001298 <CREATE_NEW_LOG+0x120>
 80012ca:	e000      	b.n	80012ce <CREATE_NEW_LOG+0x156>
			// http://elm-chan.org/fsw/ff/doc/utime.html
//			FILINFO date_time_info;
//			date_time_info.fdate = (WORD)(((((WORD) curr_year) + 20) * 512U) | ((WORD) curr_month) * 32U | (WORD) curr_date);
//			date_time_info.ftime = (WORD)(((WORD) curr_hour) * 2048U | ((WORD) curr_minute) * 32U | ((WORD) curr_second) / 2U);
//			f_utime(filename, &date_time_info);
			break;
 80012cc:	bf00      	nop
		}
	}
	if (RETRY_COUNT == 3) {
 80012ce:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d107      	bne.n	80012e6 <CREATE_NEW_LOG+0x16e>
#ifdef VERBOSE_DEBUGGING
		printf("Failed to create new log file: %s\r\n", filename);
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	4813      	ldr	r0, [pc, #76]	; (800132c <CREATE_NEW_LOG+0x1b4>)
 80012de:	f00f ff91 	bl	8011204 <iprintf>
#endif
		return NEW_LOG_FILE_CREATION_FAILED;
 80012e2:	230a      	movs	r3, #10
 80012e4:	e006      	b.n	80012f4 <CREATE_NEW_LOG+0x17c>
	}
#ifdef VERBOSE_DEBUGGING
	printf("Successfully created new log file: %s ...\r\n", filename);
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	4619      	mov	r1, r3
 80012ec:	4810      	ldr	r0, [pc, #64]	; (8001330 <CREATE_NEW_LOG+0x1b8>)
 80012ee:	f00f ff89 	bl	8011204 <iprintf>
#endif
	return LOG_CREATION_SUCCESSFUL;
 80012f2:	2308      	movs	r3, #8
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	bf00      	nop
 8001300:	08012548 	.word	0x08012548
 8001304:	20000000 	.word	0x20000000
 8001308:	200003d0 	.word	0x200003d0
 800130c:	08012580 	.word	0x08012580
 8001310:	080125c0 	.word	0x080125c0
 8001314:	080125f4 	.word	0x080125f4
 8001318:	08012620 	.word	0x08012620
 800131c:	08012648 	.word	0x08012648
 8001320:	08012670 	.word	0x08012670
 8001324:	20012f4c 	.word	0x20012f4c
 8001328:	08012684 	.word	0x08012684
 800132c:	080126b8 	.word	0x080126b8
 8001330:	080126dc 	.word	0x080126dc

08001334 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	if (buffer_fill_level[buffer_writing_to] == (CAN_MESSAGES_PER_BUFFER-1)
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001344:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001348:	f240 12ff 	movw	r2, #511	; 0x1ff
 800134c:	4293      	cmp	r3, r2
 800134e:	d11f      	bne.n	8001390 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
			&& buffer_fill_level[(buffer_writing_to + 1) % NUM_BUFFERS] == CAN_MESSAGES_PER_BUFFER)
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	425a      	negs	r2, r3
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	bf58      	it	pl
 8001362:	4253      	negpl	r3, r2
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800136e:	d10f      	bne.n	8001390 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
	{
#ifdef VERBOSE_DEBUGGING
		printf("\r\nBuffers are full... passing messages\r\n");
 8001370:	4817      	ldr	r0, [pc, #92]	; (80013d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001372:	f00f ffad 	bl	80112d0 <puts>
#endif
		CAN_notifications_deactivated = 1;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800137c:	2102      	movs	r1, #2
 800137e:	4816      	ldr	r0, [pc, #88]	; (80013d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001380:	f001 f945 	bl	800260e <HAL_CAN_DeactivateNotification>

		tick_when_can_deactivated_last = HAL_GetTick();
 8001384:	f000 fd3e 	bl	8001e04 <HAL_GetTick>
 8001388:	4603      	mov	r3, r0
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800138c:	6013      	str	r3, [r2, #0]

		if (buffer_fill_level[buffer_writing_to] == CAN_MESSAGES_PER_BUFFER) {
			buffer_writing_to = (buffer_writing_to + 1) % NUM_BUFFERS;
		}
	}
}
 800138e:	e017      	b.n	80013c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
		Get_and_Append_CAN_Message_to_Buffer();
 8001390:	f7ff fe52 	bl	8001038 <Get_and_Append_CAN_Message_to_Buffer>
		if (buffer_fill_level[buffer_writing_to] == CAN_MESSAGES_PER_BUFFER) {
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800139c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a4:	d10c      	bne.n	80013c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
			buffer_writing_to = (buffer_writing_to + 1) % NUM_BUFFERS;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	425a      	negs	r2, r3
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	bf58      	it	pl
 80013b8:	4253      	negpl	r3, r2
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80013be:	701a      	strb	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20012cf8 	.word	0x20012cf8
 80013cc:	20012cf0 	.word	0x20012cf0
 80013d0:	08012708 	.word	0x08012708
 80013d4:	20012cfa 	.word	0x20012cfa
 80013d8:	20000188 	.word	0x20000188
 80013dc:	20012cfc 	.word	0x20012cfc

080013e0 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80013e8:	1d39      	adds	r1, r7, #4
 80013ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ee:	2201      	movs	r2, #1
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <__io_putchar+0x20>)
 80013f2:	f006 ff2a 	bl	800824a <HAL_UART_Transmit>

	return ch;
 80013f6:	687b      	ldr	r3, [r7, #4]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000348 	.word	0x20000348

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
#ifdef VERBOSE_DEBUGGING
	printf("\r\nError Handler Reached\r\n");
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <Error_Handler+0x1c>)
 800140e:	f00f ff5f 	bl	80112d0 <puts>
#endif
	HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2101      	movs	r1, #1
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <Error_Handler+0x20>)
 8001418:	f002 f932 	bl	8003680 <HAL_GPIO_WritePin>

	while (1) {
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x18>
 800141e:	bf00      	nop
 8001420:	08012730 	.word	0x08012730
 8001424:	40021800 	.word	0x40021800

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_MspInit+0x44>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_MspInit+0x44>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_MspInit+0x44>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x44>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x44>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x44>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <HAL_CAN_MspInit+0x8c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12f      	bne.n	80014f2 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_CAN_MspInit+0x90>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a1a      	ldr	r2, [pc, #104]	; (8001500 <HAL_CAN_MspInit+0x90>)
 8001498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_CAN_MspInit+0x90>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_CAN_MspInit+0x90>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_CAN_MspInit+0x90>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_CAN_MspInit+0x90>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014c2:	2303      	movs	r3, #3
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014d2:	2309      	movs	r3, #9
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <HAL_CAN_MspInit+0x94>)
 80014de:	f001 ff0b 	bl	80032f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2014      	movs	r0, #20
 80014e8:	f001 fbc3 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014ec:	2014      	movs	r0, #20
 80014ee:	f001 fbdc 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40006400 	.word	0x40006400
 8001500:	40023800 	.word	0x40023800
 8001504:	40020c00 	.word	0x40020c00

08001508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0ae      	sub	sp, #184	; 0xb8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2290      	movs	r2, #144	; 0x90
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00f fee8 	bl	80112fe <memset>
  if(hi2c->Instance==I2C1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a22      	ldr	r2, [pc, #136]	; (80015bc <HAL_I2C_MspInit+0xb4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d13c      	bne.n	80015b2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800153c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800153e:	2300      	movs	r3, #0
 8001540:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4618      	mov	r0, r3
 8001548:	f004 fde2 	bl	8006110 <HAL_RCCEx_PeriphCLKConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001552:	f7ff ff57 	bl	8001404 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800156e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001576:	2312      	movs	r3, #18
 8001578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001588:	2304      	movs	r3, #4
 800158a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001592:	4619      	mov	r1, r3
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 8001596:	f001 feaf 	bl	80032f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 80015a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	37b8      	adds	r7, #184	; 0xb8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020400 	.word	0x40020400

080015c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0ae      	sub	sp, #184	; 0xb8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2290      	movs	r2, #144	; 0x90
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00f fe88 	bl	80112fe <memset>
  if(hsd->Instance==SDMMC1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a73      	ldr	r2, [pc, #460]	; (80017c0 <HAL_SD_MspInit+0x1f8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	f040 80de 	bne.w	80017b6 <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80015fa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80015fe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001604:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4618      	mov	r0, r3
 800160e:	f004 fd7f 	bl	8006110 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001618:	f7ff fef4 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800161c:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <HAL_SD_MspInit+0x1fc>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	4a68      	ldr	r2, [pc, #416]	; (80017c4 <HAL_SD_MspInit+0x1fc>)
 8001622:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001626:	6453      	str	r3, [r2, #68]	; 0x44
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_SD_MspInit+0x1fc>)
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001634:	4b63      	ldr	r3, [pc, #396]	; (80017c4 <HAL_SD_MspInit+0x1fc>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4a62      	ldr	r2, [pc, #392]	; (80017c4 <HAL_SD_MspInit+0x1fc>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
 8001640:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <HAL_SD_MspInit+0x1fc>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164c:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <HAL_SD_MspInit+0x1fc>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4a5c      	ldr	r2, [pc, #368]	; (80017c4 <HAL_SD_MspInit+0x1fc>)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	6313      	str	r3, [r2, #48]	; 0x30
 8001658:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <HAL_SD_MspInit+0x1fc>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001664:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800167e:	230c      	movs	r3, #12
 8001680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001688:	4619      	mov	r1, r3
 800168a:	484f      	ldr	r0, [pc, #316]	; (80017c8 <HAL_SD_MspInit+0x200>)
 800168c:	f001 fe34 	bl	80032f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001690:	2304      	movs	r3, #4
 8001692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016a8:	230c      	movs	r3, #12
 80016aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4845      	ldr	r0, [pc, #276]	; (80017cc <HAL_SD_MspInit+0x204>)
 80016b6:	f001 fe1f 	bl	80032f8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016bc:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <HAL_SD_MspInit+0x20c>)
 80016be:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80016c0:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ce:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d4:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016da:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016dc:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ea:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016ee:	2220      	movs	r2, #32
 80016f0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016f8:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <HAL_SD_MspInit+0x208>)
 80016fa:	2204      	movs	r2, #4
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_SD_MspInit+0x208>)
 8001700:	2203      	movs	r2, #3
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <HAL_SD_MspInit+0x208>)
 8001706:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_SD_MspInit+0x208>)
 800170e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001714:	482e      	ldr	r0, [pc, #184]	; (80017d0 <HAL_SD_MspInit+0x208>)
 8001716:	f001 fae3 	bl	8002ce0 <HAL_DMA_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001720:	f7ff fe70 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a2a      	ldr	r2, [pc, #168]	; (80017d0 <HAL_SD_MspInit+0x208>)
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
 800172a:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <HAL_SD_MspInit+0x208>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <HAL_SD_MspInit+0x210>)
 8001732:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <HAL_SD_MspInit+0x214>)
 8001734:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_SD_MspInit+0x210>)
 8001738:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800173c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_SD_MspInit+0x210>)
 8001740:	2240      	movs	r2, #64	; 0x40
 8001742:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_SD_MspInit+0x210>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_SD_MspInit+0x210>)
 800174c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001750:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_SD_MspInit+0x210>)
 8001754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001758:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <HAL_SD_MspInit+0x210>)
 800175c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001760:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_SD_MspInit+0x210>)
 8001764:	2220      	movs	r2, #32
 8001766:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_SD_MspInit+0x210>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_SD_MspInit+0x210>)
 8001770:	2204      	movs	r2, #4
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_SD_MspInit+0x210>)
 8001776:	2203      	movs	r2, #3
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_SD_MspInit+0x210>)
 800177c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_SD_MspInit+0x210>)
 8001784:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800178a:	4813      	ldr	r0, [pc, #76]	; (80017d8 <HAL_SD_MspInit+0x210>)
 800178c:	f001 faa8 	bl	8002ce0 <HAL_DMA_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 8001796:	f7ff fe35 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_SD_MspInit+0x210>)
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_SD_MspInit+0x210>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2031      	movs	r0, #49	; 0x31
 80017ac:	f001 fa61 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80017b0:	2031      	movs	r0, #49	; 0x31
 80017b2:	f001 fa7a 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	37b8      	adds	r7, #184	; 0xb8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40012c00 	.word	0x40012c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	20000288 	.word	0x20000288
 80017d4:	40026458 	.word	0x40026458
 80017d8:	200002e8 	.word	0x200002e8
 80017dc:	400264a0 	.word	0x400264a0

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0ae      	sub	sp, #184	; 0xb8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2290      	movs	r2, #144	; 0x90
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f00f fd7c 	bl	80112fe <memset>
  if(huart->Instance==USART3)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_UART_MspInit+0xb4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d13c      	bne.n	800188a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001814:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001816:	2300      	movs	r3, #0
 8001818:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4618      	mov	r0, r3
 8001820:	f004 fc76 	bl	8006110 <HAL_RCCEx_PeriphCLKConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800182a:	f7ff fdeb 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_UART_MspInit+0xb8>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_UART_MspInit+0xb8>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_UART_MspInit+0xb8>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_UART_MspInit+0xb8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a13      	ldr	r2, [pc, #76]	; (8001898 <HAL_UART_MspInit+0xb8>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_UART_MspInit+0xb8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800185e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001878:	2307      	movs	r3, #7
 800187a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_UART_MspInit+0xbc>)
 8001886:	f001 fd37 	bl	80032f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	37b8      	adds	r7, #184	; 0xb8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40004800 	.word	0x40004800
 8001898:	40023800 	.word	0x40023800
 800189c:	40020c00 	.word	0x40020c00

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 fa76 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	POWER_SWITCH_PIN = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 80018f8:	2102      	movs	r1, #2
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <EXTI1_IRQHandler+0x20>)
 80018fc:	f001 fea8 	bl	8003650 <HAL_GPIO_ReadPin>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <EXTI1_IRQHandler+0x24>)
 8001906:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 8001908:	2002      	movs	r0, #2
 800190a:	f001 fed3 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40021800 	.word	0x40021800
 8001918:	200004e8 	.word	0x200004e8

0800191c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	NEW_LOG_FLAG = 1;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <EXTI3_IRQHandler+0x14>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NewLogBtn_Pin);
 8001926:	2008      	movs	r0, #8
 8001928:	f001 fec4 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200004e9 	.word	0x200004e9

08001934 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <CAN1_RX0_IRQHandler+0x10>)
 800193a:	f000 fe8f 	bl	800265c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000188 	.word	0x20000188

08001948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	POWER_OKAY = HAL_GPIO_ReadPin(PokRESET_GPIO_Port, PokRESET_Pin);
 800194c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <EXTI15_10_IRQHandler+0x24>)
 8001952:	f001 fe7d 	bl	8003650 <HAL_GPIO_ReadPin>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <EXTI15_10_IRQHandler+0x28>)
 800195c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PokRESET_Pin);
 800195e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001962:	f001 fea7 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40021400 	.word	0x40021400
 8001970:	200004ea 	.word	0x200004ea

08001974 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <SDMMC1_IRQHandler+0x10>)
 800197a:	f005 fc0d 	bl	8007198 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000204 	.word	0x20000204

08001988 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA2_Stream3_IRQHandler+0x10>)
 800198e:	f001 fa77 	bl	8002e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000288 	.word	0x20000288

0800199c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <OTG_FS_IRQHandler+0x10>)
 80019a2:	f002 fd6e 	bl	8004482 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20014890 	.word	0x20014890

080019b0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA2_Stream6_IRQHandler+0x10>)
 80019b6:	f001 fa63 	bl	8002e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200002e8 	.word	0x200002e8

080019c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e00a      	b.n	80019ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019d6:	f3af 8000 	nop.w
 80019da:	4601      	mov	r1, r0
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	60ba      	str	r2, [r7, #8]
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf0      	blt.n	80019d6 <_read+0x12>
  }

  return len;
 80019f4:	687b      	ldr	r3, [r7, #4]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e009      	b.n	8001a24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	60ba      	str	r2, [r7, #8]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fce1 	bl	80013e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbf1      	blt.n	8001a10 <_write+0x12>
  }
  return len;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_close>:

int _close(int file)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_isatty>:

int _isatty(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa8:	4a14      	ldr	r2, [pc, #80]	; (8001afc <_sbrk+0x5c>)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <_sbrk+0x60>)
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <_sbrk+0x64>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <_sbrk+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d207      	bcs.n	8001ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad0:	f00f fc2e 	bl	8011330 <__errno>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ade:	e009      	b.n	8001af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <_sbrk+0x64>)
 8001af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20080000 	.word	0x20080000
 8001b00:	00000400 	.word	0x00000400
 8001b04:	20012d04 	.word	0x20012d04
 8001b08:	20014ee8 	.word	0x20014ee8

08001b0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b36:	490e      	ldr	r1, [pc, #56]	; (8001b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b4c:	4c0b      	ldr	r4, [pc, #44]	; (8001b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b5a:	f7ff ffd7 	bl	8001b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f00f fbed 	bl	801133c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7fe fd3b 	bl	80005dc <main>
  bx  lr    
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001b74:	08012c94 	.word	0x08012c94
  ldr r2, =_sbss
 8001b78:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001b7c:	20014ee4 	.word	0x20014ee4

08001b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC_IRQHandler>
	...

08001b84 <DS1307_Init>:

/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <DS1307_Init+0x1c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f806 	bl	8001ba4 <DS1307_SetClockHalt>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20012d08 	.word	0x20012d08

08001ba4 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <DS1307_SetClockHalt+0x14>
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	e000      	b.n	8001bba <DS1307_SetClockHalt+0x16>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f000 f831 	bl	8001c24 <DS1307_GetRegByte>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bca:	b25a      	sxtb	r2, r3
 8001bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 f805 	bl	8001be8 <DS1307_SetRegByte>
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	733b      	strb	r3, [r7, #12]
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <DS1307_SetRegByte+0x38>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	f107 020c 	add.w	r2, r7, #12
 8001c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2302      	movs	r3, #2
 8001c10:	21d0      	movs	r1, #208	; 0xd0
 8001c12:	f001 fe03 	bl	800381c <HAL_I2C_Master_Transmit>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20012d08 	.word	0x20012d08

08001c24 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <DS1307_GetRegByte+0x40>)
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	1dfa      	adds	r2, r7, #7
 8001c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	21d0      	movs	r1, #208	; 0xd0
 8001c3e:	f001 fded 	bl	800381c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <DS1307_GetRegByte+0x40>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	f107 020f 	add.w	r2, r7, #15
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2301      	movs	r3, #1
 8001c52:	21d0      	movs	r1, #208	; 0xd0
 8001c54:	f001 fed6 	bl	8003a04 <HAL_I2C_Master_Receive>
	return val;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20012d08 	.word	0x20012d08

08001c68 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001c6c:	2004      	movs	r0, #4
 8001c6e:	f7ff ffd9 	bl	8001c24 <DS1307_GetRegByte>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f85b 	bl	8001d30 <DS1307_DecodeBCD>
 8001c7a:	4603      	mov	r3, r0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001c84:	2005      	movs	r0, #5
 8001c86:	f7ff ffcd 	bl	8001c24 <DS1307_GetRegByte>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f84f 	bl	8001d30 <DS1307_DecodeBCD>
 8001c92:	4603      	mov	r3, r0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001c9e:	2010      	movs	r0, #16
 8001ca0:	f7ff ffc0 	bl	8001c24 <DS1307_GetRegByte>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	0091      	lsls	r1, r2, #2
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001cbc:	2006      	movs	r0, #6
 8001cbe:	f7ff ffb1 	bl	8001c24 <DS1307_GetRegByte>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f833 	bl	8001d30 <DS1307_DecodeBCD>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b29b      	uxth	r3, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f7ff ff9f 	bl	8001c24 <DS1307_GetRegByte>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f81e 	bl	8001d30 <DS1307_DecodeBCD>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff ff90 	bl	8001c24 <DS1307_GetRegByte>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f812 	bl	8001d30 <DS1307_DecodeBCD>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff ff84 	bl	8001c24 <DS1307_GetRegByte>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 f803 	bl	8001d30 <DS1307_DecodeBCD>
 8001d2a:	4603      	mov	r3, r0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	b2db      	uxtb	r3, r3
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d66:	2003      	movs	r0, #3
 8001d68:	f000 ff78 	bl	8002c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 f805 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d72:	f7ff fb59 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 ff93 	bl	8002cc6 <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db8:	f000 ff5b 	bl	8002c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	2000000c 	.word	0x2000000c
 8001dd8:	20000008 	.word	0x20000008

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	20012d0c 	.word	0x20012d0c

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20012d0c 	.word	0x20012d0c

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000000c 	.word	0x2000000c

08001e64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0ed      	b.n	8002052 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff faf4 	bl	8001470 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e98:	f7ff ffb4 	bl	8001e04 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e9e:	e012      	b.n	8001ec6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea0:	f7ff ffb0 	bl	8001e04 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b0a      	cmp	r3, #10
 8001eac:	d90b      	bls.n	8001ec6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2205      	movs	r2, #5
 8001ebe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0c5      	b.n	8002052 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0e5      	beq.n	8001ea0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0202 	bic.w	r2, r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee4:	f7ff ff8e 	bl	8001e04 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eea:	e012      	b.n	8001f12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eec:	f7ff ff8a 	bl	8001e04 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b0a      	cmp	r3, #10
 8001ef8:	d90b      	bls.n	8001f12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2205      	movs	r2, #5
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e09f      	b.n	8002052 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e5      	bne.n	8001eec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7e1b      	ldrb	r3, [r3, #24]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e007      	b.n	8001f4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7e5b      	ldrb	r3, [r3, #25]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7e9b      	ldrb	r3, [r3, #26]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d108      	bne.n	8001f8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e007      	b.n	8001f9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0220 	bic.w	r2, r2, #32
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7edb      	ldrb	r3, [r3, #27]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d108      	bne.n	8001fb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0210 	bic.w	r2, r2, #16
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	e007      	b.n	8001fc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0210 	orr.w	r2, r2, #16
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7f1b      	ldrb	r3, [r3, #28]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d108      	bne.n	8001fe2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0208 	orr.w	r2, r2, #8
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e007      	b.n	8001ff2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0208 	bic.w	r2, r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7f5b      	ldrb	r3, [r3, #29]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0204 	orr.w	r2, r2, #4
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e007      	b.n	800201c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0204 	bic.w	r2, r2, #4
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	ea42 0103 	orr.w	r1, r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002072:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d003      	beq.n	8002082 <HAL_CAN_ConfigFilter+0x26>
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	2b02      	cmp	r3, #2
 800207e:	f040 80c7 	bne.w	8002210 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a69      	ldr	r2, [pc, #420]	; (800222c <HAL_CAN_ConfigFilter+0x1d0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d001      	beq.n	8002090 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800208c:	4b68      	ldr	r3, [pc, #416]	; (8002230 <HAL_CAN_ConfigFilter+0x1d4>)
 800208e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	4a63      	ldr	r2, [pc, #396]	; (8002230 <HAL_CAN_ConfigFilter+0x1d4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d111      	bne.n	80020cc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	2201      	movs	r2, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d123      	bne.n	800213e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	401a      	ands	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002118:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3248      	adds	r2, #72	; 0x48
 800211e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002132:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002134:	6979      	ldr	r1, [r7, #20]
 8002136:	3348      	adds	r3, #72	; 0x48
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d122      	bne.n	800218c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	431a      	orrs	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002166:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3248      	adds	r2, #72	; 0x48
 800216c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002180:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002182:	6979      	ldr	r1, [r7, #20]
 8002184:	3348      	adds	r3, #72	; 0x48
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d109      	bne.n	80021a8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80021a6:	e007      	b.n	80021b8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021d2:	e007      	b.n	80021e4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d107      	bne.n	80021fc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002202:	f023 0201 	bic.w	r2, r3, #1
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e006      	b.n	800221e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
  }
}
 800221e:	4618      	mov	r0, r3
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40003400 	.word	0x40003400
 8002230:	40006400 	.word	0x40006400

08002234 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d12e      	bne.n	80022a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002260:	f7ff fdd0 	bl	8001e04 <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002266:	e012      	b.n	800228e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002268:	f7ff fdcc 	bl	8001e04 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b0a      	cmp	r3, #10
 8002274:	d90b      	bls.n	800228e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2205      	movs	r2, #5
 8002286:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e012      	b.n	80022b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e5      	bne.n	8002268 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e006      	b.n	80022b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
  }
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d133      	bne.n	8002338 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022e0:	f7ff fd90 	bl	8001e04 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022e6:	e012      	b.n	800230e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022e8:	f7ff fd8c 	bl	8001e04 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b0a      	cmp	r3, #10
 80022f4:	d90b      	bls.n	800230e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2205      	movs	r2, #5
 8002306:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e01b      	b.n	8002346 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0e5      	beq.n	80022e8 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0202 	bic.w	r2, r2, #2
 800232a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e006      	b.n	8002346 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800234e:	b480      	push	{r7}
 8002350:	b087      	sub	sp, #28
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002362:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d003      	beq.n	8002372 <HAL_CAN_GetRxMessage+0x24>
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	2b02      	cmp	r3, #2
 800236e:	f040 80f3 	bne.w	8002558 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10e      	bne.n	8002396 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d116      	bne.n	80023b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0e7      	b.n	8002566 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d107      	bne.n	80023b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d8      	b.n	8002566 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	331b      	adds	r3, #27
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0204 	and.w	r2, r3, #4
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	331b      	adds	r3, #27
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	4413      	add	r3, r2
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0d5b      	lsrs	r3, r3, #21
 80023e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	331b      	adds	r3, #27
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	4413      	add	r3, r2
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	08db      	lsrs	r3, r3, #3
 80023fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	331b      	adds	r3, #27
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	4413      	add	r3, r2
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0202 	and.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	331b      	adds	r3, #27
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	4413      	add	r3, r2
 8002426:	3304      	adds	r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 020f 	and.w	r2, r3, #15
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	331b      	adds	r3, #27
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	3304      	adds	r3, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	b2da      	uxtb	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	331b      	adds	r3, #27
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	3304      	adds	r3, #4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0c1b      	lsrs	r3, r3, #16
 800245c:	b29a      	uxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4413      	add	r3, r2
 800246c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4413      	add	r3, r2
 8002482:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0a1a      	lsrs	r2, r3, #8
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	4413      	add	r3, r2
 800249c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	0c1a      	lsrs	r2, r3, #16
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	3302      	adds	r3, #2
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0e1a      	lsrs	r2, r3, #24
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	3303      	adds	r3, #3
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	3304      	adds	r3, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0a1a      	lsrs	r2, r3, #8
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	3305      	adds	r3, #5
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	4413      	add	r3, r2
 8002502:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0c1a      	lsrs	r2, r3, #16
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	3306      	adds	r3, #6
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	4413      	add	r3, r2
 800251c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	0e1a      	lsrs	r2, r3, #24
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	3307      	adds	r3, #7
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d108      	bne.n	8002544 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0220 	orr.w	r2, r2, #32
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	e007      	b.n	8002554 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0220 	orr.w	r2, r2, #32
 8002552:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e006      	b.n	8002566 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002586:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d002      	beq.n	8002594 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800258e:	7afb      	ldrb	r3, [r7, #11]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d10f      	bne.n	80025b4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e005      	b.n	80025b4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80025b4:	68fb      	ldr	r3, [r7, #12]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d002      	beq.n	80025e0 <HAL_CAN_ActivateNotification+0x1e>
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d109      	bne.n	80025f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6959      	ldr	r1, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e006      	b.n	8002602 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d002      	beq.n	800262c <HAL_CAN_DeactivateNotification+0x1e>
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d10a      	bne.n	8002642 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6959      	ldr	r1, [r3, #20]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	43da      	mvns	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	400a      	ands	r2, r1
 800263c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e006      	b.n	8002650 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
  }
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	; 0x28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d07c      	beq.n	800279c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d023      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f983 	bl	80029ca <HAL_CAN_TxMailbox0CompleteCallback>
 80026c4:	e016      	b.n	80026f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
 80026d8:	e00c      	b.n	80026f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
 80026ec:	e002      	b.n	80026f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f989 	bl	8002a06 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d024      	beq.n	8002748 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002706:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f963 	bl	80029de <HAL_CAN_TxMailbox1CompleteCallback>
 8002718:	e016      	b.n	8002748 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e00c      	b.n	8002748 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	e002      	b.n	8002748 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f969 	bl	8002a1a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d024      	beq.n	800279c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800275a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f943 	bl	80029f2 <HAL_CAN_TxMailbox2CompleteCallback>
 800276c:	e016      	b.n	800279c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	e00c      	b.n	800279c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e002      	b.n	800279c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f949 	bl	8002a2e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00c      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2208      	movs	r2, #8
 80027da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f930 	bl	8002a42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fd9a 	bl	8001334 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00c      	beq.n	8002824 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2210      	movs	r2, #16
 8002822:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2208      	movs	r2, #8
 800283e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f912 	bl	8002a6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8f9 	bl	8002a56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2210      	movs	r2, #16
 800287e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f8fc 	bl	8002a7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2208      	movs	r2, #8
 80028a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8f5 	bl	8002a92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d07b      	beq.n	80029aa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d072      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	f043 0302 	orr.w	r3, r3, #2
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002916:	2b00      	cmp	r3, #0
 8002918:	d043      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03e      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800292a:	2b60      	cmp	r3, #96	; 0x60
 800292c:	d02b      	beq.n	8002986 <HAL_CAN_IRQHandler+0x32a>
 800292e:	2b60      	cmp	r3, #96	; 0x60
 8002930:	d82e      	bhi.n	8002990 <HAL_CAN_IRQHandler+0x334>
 8002932:	2b50      	cmp	r3, #80	; 0x50
 8002934:	d022      	beq.n	800297c <HAL_CAN_IRQHandler+0x320>
 8002936:	2b50      	cmp	r3, #80	; 0x50
 8002938:	d82a      	bhi.n	8002990 <HAL_CAN_IRQHandler+0x334>
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d019      	beq.n	8002972 <HAL_CAN_IRQHandler+0x316>
 800293e:	2b40      	cmp	r3, #64	; 0x40
 8002940:	d826      	bhi.n	8002990 <HAL_CAN_IRQHandler+0x334>
 8002942:	2b30      	cmp	r3, #48	; 0x30
 8002944:	d010      	beq.n	8002968 <HAL_CAN_IRQHandler+0x30c>
 8002946:	2b30      	cmp	r3, #48	; 0x30
 8002948:	d822      	bhi.n	8002990 <HAL_CAN_IRQHandler+0x334>
 800294a:	2b10      	cmp	r3, #16
 800294c:	d002      	beq.n	8002954 <HAL_CAN_IRQHandler+0x2f8>
 800294e:	2b20      	cmp	r3, #32
 8002950:	d005      	beq.n	800295e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002952:	e01d      	b.n	8002990 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	f043 0308 	orr.w	r3, r3, #8
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800295c:	e019      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	f043 0310 	orr.w	r3, r3, #16
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002966:	e014      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f043 0320 	orr.w	r3, r3, #32
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002970:	e00f      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800297a:	e00a      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002984:	e005      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800298e:	e000      	b.n	8002992 <HAL_CAN_IRQHandler+0x336>
            break;
 8002990:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2204      	movs	r2, #4
 80029a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f872 	bl	8002aa6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <__NVIC_SetPriorityGrouping+0x40>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x40>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00
 8002b00:	05fa0000 	.word	0x05fa0000

08002b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__NVIC_GetPriorityGrouping+0x18>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 0307 	and.w	r3, r3, #7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	db0b      	blt.n	8002b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4907      	ldr	r1, [pc, #28]	; (8002b58 <__NVIC_EnableIRQ+0x38>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000e100 	.word	0xe000e100

08002b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db0a      	blt.n	8002b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	490c      	ldr	r1, [pc, #48]	; (8002ba8 <__NVIC_SetPriority+0x4c>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	0112      	lsls	r2, r2, #4
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b84:	e00a      	b.n	8002b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <__NVIC_SetPriority+0x50>)
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	3b04      	subs	r3, #4
 8002b94:	0112      	lsls	r2, r2, #4
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	440b      	add	r3, r1
 8002b9a:	761a      	strb	r2, [r3, #24]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000e100 	.word	0xe000e100
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f1c3 0307 	rsb	r3, r3, #7
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	bf28      	it	cs
 8002bce:	2304      	movcs	r3, #4
 8002bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d902      	bls.n	8002be0 <NVIC_EncodePriority+0x30>
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3b03      	subs	r3, #3
 8002bde:	e000      	b.n	8002be2 <NVIC_EncodePriority+0x32>
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43d9      	mvns	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	4313      	orrs	r3, r2
         );
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c28:	d301      	bcc.n	8002c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00f      	b.n	8002c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <SysTick_Config+0x40>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c36:	210f      	movs	r1, #15
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c3c:	f7ff ff8e 	bl	8002b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <SysTick_Config+0x40>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c46:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <SysTick_Config+0x40>)
 8002c48:	2207      	movs	r2, #7
 8002c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	e000e010 	.word	0xe000e010

08002c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff29 	bl	8002abc <__NVIC_SetPriorityGrouping>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c84:	f7ff ff3e 	bl	8002b04 <__NVIC_GetPriorityGrouping>
 8002c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	6978      	ldr	r0, [r7, #20]
 8002c90:	f7ff ff8e 	bl	8002bb0 <NVIC_EncodePriority>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff5d 	bl	8002b5c <__NVIC_SetPriority>
}
 8002ca2:	bf00      	nop
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff31 	bl	8002b20 <__NVIC_EnableIRQ>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffa2 	bl	8002c18 <SysTick_Config>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cec:	f7ff f88a 	bl	8001e04 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e099      	b.n	8002e30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1c:	e00f      	b.n	8002d3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1e:	f7ff f871 	bl	8001e04 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d908      	bls.n	8002d3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2203      	movs	r2, #3
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e078      	b.n	8002e30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e8      	bne.n	8002d1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <HAL_DMA_Init+0x158>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d107      	bne.n	8002da8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	4313      	orrs	r3, r2
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f023 0307 	bic.w	r3, r3, #7
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d117      	bne.n	8002e02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00e      	beq.n	8002e02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fa0b 	bl	8003200 <DMA_CheckFifoParam>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2240      	movs	r2, #64	; 0x40
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e016      	b.n	8002e30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f9c2 	bl	8003194 <DMA_CalcBaseAndBitshift>
 8002e10:	4603      	mov	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	223f      	movs	r2, #63	; 0x3f
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	e010803f 	.word	0xe010803f

08002e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d004      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00c      	b.n	8002e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002e8c:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_DMA_IRQHandler+0x248>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a8e      	ldr	r2, [pc, #568]	; (80030cc <HAL_DMA_IRQHandler+0x24c>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0a9b      	lsrs	r3, r3, #10
 8002e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	2208      	movs	r2, #8
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01a      	beq.n	8002eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0204 	bic.w	r2, r2, #4
 8002ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	2208      	movs	r2, #8
 8002eda:	409a      	lsls	r2, r3
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	2201      	movs	r2, #1
 8002f10:	409a      	lsls	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	2204      	movs	r2, #4
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	2204      	movs	r2, #4
 8002f46:	409a      	lsls	r2, r3
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d043      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d03c      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d024      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
 8002fae:	e01f      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
 8002fc0:	e016      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0208 	bic.w	r2, r2, #8
 8002fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 808f 	beq.w	8003120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8087 	beq.w	8003120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	2220      	movs	r2, #32
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b05      	cmp	r3, #5
 8003028:	d136      	bne.n	8003098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0216 	bic.w	r2, r2, #22
 8003038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <HAL_DMA_IRQHandler+0x1da>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0208 	bic.w	r2, r2, #8
 8003068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	223f      	movs	r2, #63	; 0x3f
 8003070:	409a      	lsls	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308a:	2b00      	cmp	r3, #0
 800308c:	d07e      	beq.n	800318c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
        }
        return;
 8003096:	e079      	b.n	800318c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01d      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d031      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
 80030c4:	e02c      	b.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
 80030c6:	bf00      	nop
 80030c8:	20000004 	.word	0x20000004
 80030cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d023      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
 80030e0:	e01e      	b.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10f      	bne.n	8003110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0210 	bic.w	r2, r2, #16
 80030fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	2b00      	cmp	r3, #0
 8003126:	d032      	beq.n	800318e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d022      	beq.n	800317a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2205      	movs	r2, #5
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	3301      	adds	r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d307      	bcc.n	8003168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f2      	bne.n	800314c <HAL_DMA_IRQHandler+0x2cc>
 8003166:	e000      	b.n	800316a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
 800318a:	e000      	b.n	800318e <HAL_DMA_IRQHandler+0x30e>
        return;
 800318c:	bf00      	nop
    }
  }
}
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3b10      	subs	r3, #16
 80031a4:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <DMA_CalcBaseAndBitshift+0x60>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <DMA_CalcBaseAndBitshift+0x64>)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d908      	bls.n	80031d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <DMA_CalcBaseAndBitshift+0x68>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	1d1a      	adds	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	659a      	str	r2, [r3, #88]	; 0x58
 80031d2:	e006      	b.n	80031e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <DMA_CalcBaseAndBitshift+0x68>)
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	aaaaaaab 	.word	0xaaaaaaab
 80031f8:	080127f4 	.word	0x080127f4
 80031fc:	fffffc00 	.word	0xfffffc00

08003200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11f      	bne.n	800325a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d856      	bhi.n	80032ce <DMA_CheckFifoParam+0xce>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <DMA_CheckFifoParam+0x28>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	08003239 	.word	0x08003239
 800322c:	0800324b 	.word	0x0800324b
 8003230:	08003239 	.word	0x08003239
 8003234:	080032cf 	.word	0x080032cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d046      	beq.n	80032d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003248:	e043      	b.n	80032d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003252:	d140      	bne.n	80032d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003258:	e03d      	b.n	80032d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003262:	d121      	bne.n	80032a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d837      	bhi.n	80032da <DMA_CheckFifoParam+0xda>
 800326a:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <DMA_CheckFifoParam+0x70>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	08003281 	.word	0x08003281
 8003274:	08003287 	.word	0x08003287
 8003278:	08003281 	.word	0x08003281
 800327c:	08003299 	.word	0x08003299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e030      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d025      	beq.n	80032de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003296:	e022      	b.n	80032de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032a0:	d11f      	bne.n	80032e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032a6:	e01c      	b.n	80032e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d903      	bls.n	80032b6 <DMA_CheckFifoParam+0xb6>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d003      	beq.n	80032bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032b4:	e018      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ba:	e015      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      break;
 80032cc:	e00b      	b.n	80032e6 <DMA_CheckFifoParam+0xe6>
      break;
 80032ce:	bf00      	nop
 80032d0:	e00a      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e008      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e006      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
 80032dc:	e004      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
    }
  } 
  
  return status; 
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop

080032f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	e175      	b.n	8003604 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003318:	2201      	movs	r2, #1
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	429a      	cmp	r2, r3
 8003332:	f040 8164 	bne.w	80035fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d005      	beq.n	800334e <HAL_GPIO_Init+0x56>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d130      	bne.n	80033b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	2203      	movs	r2, #3
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003384:	2201      	movs	r2, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 0201 	and.w	r2, r3, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d017      	beq.n	80033ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d123      	bne.n	8003440 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	08da      	lsrs	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3208      	adds	r2, #8
 8003400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	220f      	movs	r2, #15
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	08da      	lsrs	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3208      	adds	r2, #8
 800343a:	69b9      	ldr	r1, [r7, #24]
 800343c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0203 	and.w	r2, r3, #3
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80be 	beq.w	80035fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003482:	4b66      	ldr	r3, [pc, #408]	; (800361c <HAL_GPIO_Init+0x324>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4a65      	ldr	r2, [pc, #404]	; (800361c <HAL_GPIO_Init+0x324>)
 8003488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800348c:	6453      	str	r3, [r2, #68]	; 0x44
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_GPIO_Init+0x324>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800349a:	4a61      	ldr	r2, [pc, #388]	; (8003620 <HAL_GPIO_Init+0x328>)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a58      	ldr	r2, [pc, #352]	; (8003624 <HAL_GPIO_Init+0x32c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d037      	beq.n	8003536 <HAL_GPIO_Init+0x23e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a57      	ldr	r2, [pc, #348]	; (8003628 <HAL_GPIO_Init+0x330>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d031      	beq.n	8003532 <HAL_GPIO_Init+0x23a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a56      	ldr	r2, [pc, #344]	; (800362c <HAL_GPIO_Init+0x334>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d02b      	beq.n	800352e <HAL_GPIO_Init+0x236>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a55      	ldr	r2, [pc, #340]	; (8003630 <HAL_GPIO_Init+0x338>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d025      	beq.n	800352a <HAL_GPIO_Init+0x232>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a54      	ldr	r2, [pc, #336]	; (8003634 <HAL_GPIO_Init+0x33c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01f      	beq.n	8003526 <HAL_GPIO_Init+0x22e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a53      	ldr	r2, [pc, #332]	; (8003638 <HAL_GPIO_Init+0x340>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d019      	beq.n	8003522 <HAL_GPIO_Init+0x22a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a52      	ldr	r2, [pc, #328]	; (800363c <HAL_GPIO_Init+0x344>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_GPIO_Init+0x226>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a51      	ldr	r2, [pc, #324]	; (8003640 <HAL_GPIO_Init+0x348>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00d      	beq.n	800351a <HAL_GPIO_Init+0x222>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a50      	ldr	r2, [pc, #320]	; (8003644 <HAL_GPIO_Init+0x34c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <HAL_GPIO_Init+0x21e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a4f      	ldr	r2, [pc, #316]	; (8003648 <HAL_GPIO_Init+0x350>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_GPIO_Init+0x21a>
 800350e:	2309      	movs	r3, #9
 8003510:	e012      	b.n	8003538 <HAL_GPIO_Init+0x240>
 8003512:	230a      	movs	r3, #10
 8003514:	e010      	b.n	8003538 <HAL_GPIO_Init+0x240>
 8003516:	2308      	movs	r3, #8
 8003518:	e00e      	b.n	8003538 <HAL_GPIO_Init+0x240>
 800351a:	2307      	movs	r3, #7
 800351c:	e00c      	b.n	8003538 <HAL_GPIO_Init+0x240>
 800351e:	2306      	movs	r3, #6
 8003520:	e00a      	b.n	8003538 <HAL_GPIO_Init+0x240>
 8003522:	2305      	movs	r3, #5
 8003524:	e008      	b.n	8003538 <HAL_GPIO_Init+0x240>
 8003526:	2304      	movs	r3, #4
 8003528:	e006      	b.n	8003538 <HAL_GPIO_Init+0x240>
 800352a:	2303      	movs	r3, #3
 800352c:	e004      	b.n	8003538 <HAL_GPIO_Init+0x240>
 800352e:	2302      	movs	r3, #2
 8003530:	e002      	b.n	8003538 <HAL_GPIO_Init+0x240>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_GPIO_Init+0x240>
 8003536:	2300      	movs	r3, #0
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	f002 0203 	and.w	r2, r2, #3
 800353e:	0092      	lsls	r2, r2, #2
 8003540:	4093      	lsls	r3, r2
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003548:	4935      	ldr	r1, [pc, #212]	; (8003620 <HAL_GPIO_Init+0x328>)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	089b      	lsrs	r3, r3, #2
 800354e:	3302      	adds	r3, #2
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <HAL_GPIO_Init+0x354>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800357a:	4a34      	ldr	r2, [pc, #208]	; (800364c <HAL_GPIO_Init+0x354>)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003580:	4b32      	ldr	r3, [pc, #200]	; (800364c <HAL_GPIO_Init+0x354>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035a4:	4a29      	ldr	r2, [pc, #164]	; (800364c <HAL_GPIO_Init+0x354>)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <HAL_GPIO_Init+0x354>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_GPIO_Init+0x354>)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_GPIO_Init+0x354>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <HAL_GPIO_Init+0x354>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3301      	adds	r3, #1
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b0f      	cmp	r3, #15
 8003608:	f67f ae86 	bls.w	8003318 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3724      	adds	r7, #36	; 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
 8003620:	40013800 	.word	0x40013800
 8003624:	40020000 	.word	0x40020000
 8003628:	40020400 	.word	0x40020400
 800362c:	40020800 	.word	0x40020800
 8003630:	40020c00 	.word	0x40020c00
 8003634:	40021000 	.word	0x40021000
 8003638:	40021400 	.word	0x40021400
 800363c:	40021800 	.word	0x40021800
 8003640:	40021c00 	.word	0x40021c00
 8003644:	40022000 	.word	0x40022000
 8003648:	40022400 	.word	0x40022400
 800364c:	40013c00 	.word	0x40013c00

08003650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	887b      	ldrh	r3, [r7, #2]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e001      	b.n	8003672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800369c:	e003      	b.n	80036a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800369e:	887b      	ldrh	r3, [r7, #2]
 80036a0:	041a      	lsls	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	619a      	str	r2, [r3, #24]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ca:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f806 	bl	80036e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40013c00 	.word	0x40013c00

080036e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e07f      	b.n	800380e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd fef0 	bl	8001508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	; 0x24
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800374c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d107      	bne.n	8003776 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	e006      	b.n	8003784 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003782:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d104      	bne.n	8003796 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003794:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_I2C_Init+0x11c>)
 80037a2:	430b      	orrs	r3, r1
 80037a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69d9      	ldr	r1, [r3, #28]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	02008000 	.word	0x02008000

0800381c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	461a      	mov	r2, r3
 8003828:	460b      	mov	r3, r1
 800382a:	817b      	strh	r3, [r7, #10]
 800382c:	4613      	mov	r3, r2
 800382e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	f040 80da 	bne.w	80039f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_I2C_Master_Transmit+0x30>
 8003848:	2302      	movs	r3, #2
 800384a:	e0d3      	b.n	80039f4 <HAL_I2C_Master_Transmit+0x1d8>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003854:	f7fe fad6 	bl	8001e04 <HAL_GetTick>
 8003858:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2319      	movs	r3, #25
 8003860:	2201      	movs	r2, #1
 8003862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f9e6 	bl	8003c38 <I2C_WaitOnFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e0be      	b.n	80039f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2221      	movs	r2, #33	; 0x21
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2210      	movs	r2, #16
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	893a      	ldrh	r2, [r7, #8]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2bff      	cmp	r3, #255	; 0xff
 80038a6:	d90e      	bls.n	80038c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	22ff      	movs	r2, #255	; 0xff
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	8979      	ldrh	r1, [r7, #10]
 80038b6:	4b51      	ldr	r3, [pc, #324]	; (80039fc <HAL_I2C_Master_Transmit+0x1e0>)
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fbd0 	bl	8004064 <I2C_TransferConfig>
 80038c4:	e06c      	b.n	80039a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	8979      	ldrh	r1, [r7, #10]
 80038d8:	4b48      	ldr	r3, [pc, #288]	; (80039fc <HAL_I2C_Master_Transmit+0x1e0>)
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fbbf 	bl	8004064 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038e6:	e05b      	b.n	80039a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	6a39      	ldr	r1, [r7, #32]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f9e3 	bl	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e07b      	b.n	80039f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d034      	beq.n	80039a0 <HAL_I2C_Master_Transmit+0x184>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	2b00      	cmp	r3, #0
 800393c:	d130      	bne.n	80039a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f975 	bl	8003c38 <I2C_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e04d      	b.n	80039f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2bff      	cmp	r3, #255	; 0xff
 8003960:	d90e      	bls.n	8003980 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	22ff      	movs	r2, #255	; 0xff
 8003966:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	b2da      	uxtb	r2, r3
 800396e:	8979      	ldrh	r1, [r7, #10]
 8003970:	2300      	movs	r3, #0
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fb73 	bl	8004064 <I2C_TransferConfig>
 800397e:	e00f      	b.n	80039a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	b2da      	uxtb	r2, r3
 8003990:	8979      	ldrh	r1, [r7, #10]
 8003992:	2300      	movs	r3, #0
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fb62 	bl	8004064 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d19e      	bne.n	80038e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	6a39      	ldr	r1, [r7, #32]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f9c2 	bl	8003d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e01a      	b.n	80039f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2220      	movs	r2, #32
 80039c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_I2C_Master_Transmit+0x1e4>)
 80039d2:	400b      	ands	r3, r1
 80039d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	80002000 	.word	0x80002000
 8003a00:	fe00e800 	.word	0xfe00e800

08003a04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	460b      	mov	r3, r1
 8003a12:	817b      	strh	r3, [r7, #10]
 8003a14:	4613      	mov	r3, r2
 8003a16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	f040 80db 	bne.w	8003bdc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_I2C_Master_Receive+0x30>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0d4      	b.n	8003bde <HAL_I2C_Master_Receive+0x1da>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a3c:	f7fe f9e2 	bl	8001e04 <HAL_GetTick>
 8003a40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2319      	movs	r3, #25
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f8f2 	bl	8003c38 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0bf      	b.n	8003bde <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2222      	movs	r2, #34	; 0x22
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	893a      	ldrh	r2, [r7, #8]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2bff      	cmp	r3, #255	; 0xff
 8003a8e:	d90e      	bls.n	8003aae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	22ff      	movs	r2, #255	; 0xff
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	8979      	ldrh	r1, [r7, #10]
 8003a9e:	4b52      	ldr	r3, [pc, #328]	; (8003be8 <HAL_I2C_Master_Receive+0x1e4>)
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fadc 	bl	8004064 <I2C_TransferConfig>
 8003aac:	e06d      	b.n	8003b8a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	8979      	ldrh	r1, [r7, #10]
 8003ac0:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <HAL_I2C_Master_Receive+0x1e4>)
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 facb 	bl	8004064 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ace:	e05c      	b.n	8003b8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	6a39      	ldr	r1, [r7, #32]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f96b 	bl	8003db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e07c      	b.n	8003bde <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d034      	beq.n	8003b8a <HAL_I2C_Master_Receive+0x186>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d130      	bne.n	8003b8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f880 	bl	8003c38 <I2C_WaitOnFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e04d      	b.n	8003bde <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2bff      	cmp	r3, #255	; 0xff
 8003b4a:	d90e      	bls.n	8003b6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	22ff      	movs	r2, #255	; 0xff
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	8979      	ldrh	r1, [r7, #10]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fa7e 	bl	8004064 <I2C_TransferConfig>
 8003b68:	e00f      	b.n	8003b8a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	8979      	ldrh	r1, [r7, #10]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fa6d 	bl	8004064 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d19d      	bne.n	8003ad0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	6a39      	ldr	r1, [r7, #32]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f8cd 	bl	8003d38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e01a      	b.n	8003bde <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2220      	movs	r2, #32
 8003bae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <HAL_I2C_Master_Receive+0x1e8>)
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	80002400 	.word	0x80002400
 8003bec:	fe00e800 	.word	0xfe00e800

08003bf0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d103      	bne.n	8003c0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d007      	beq.n	8003c2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	619a      	str	r2, [r3, #24]
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c48:	e022      	b.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c50:	d01e      	beq.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c52:	f7fe f8d7 	bl	8001e04 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d113      	bne.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e00f      	b.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d0cd      	beq.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cc4:	e02c      	b.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f8ea 	bl	8003ea4 <I2C_IsErrorOccurred>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e02a      	b.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce0:	d01e      	beq.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fe f88f 	bl	8001e04 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d113      	bne.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d1cb      	bne.n	8003cc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d44:	e028      	b.n	8003d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f8aa 	bl	8003ea4 <I2C_IsErrorOccurred>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e026      	b.n	8003da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fe f853 	bl	8001e04 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d113      	bne.n	8003d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e007      	b.n	8003da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d1cf      	bne.n	8003d46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dbc:	e064      	b.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f86e 	bl	8003ea4 <I2C_IsErrorOccurred>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e062      	b.n	8003e98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d138      	bne.n	8003e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d105      	bne.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e04e      	b.n	8003e98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d107      	bne.n	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2204      	movs	r2, #4
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
 8003e16:	e002      	b.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2220      	movs	r2, #32
 8003e24:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003e32:	400b      	ands	r3, r1
 8003e34:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e022      	b.n	8003e98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e52:	f7fd ffd7 	bl	8001e04 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10f      	bne.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	f043 0220 	orr.w	r2, r3, #32
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e007      	b.n	8003e98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d193      	bne.n	8003dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	fe00e800 	.word	0xfe00e800

08003ea4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d068      	beq.n	8003fa2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ed8:	e049      	b.n	8003f6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee0:	d045      	beq.n	8003f6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7fd ff8f 	bl	8001e04 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <I2C_IsErrorOccurred+0x54>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d13a      	bne.n	8003f6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1a:	d121      	bne.n	8003f60 <I2C_IsErrorOccurred+0xbc>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f22:	d01d      	beq.n	8003f60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d01a      	beq.n	8003f60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f3a:	f7fd ff63 	bl	8001e04 <HAL_GetTick>
 8003f3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f40:	e00e      	b.n	8003f60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f42:	f7fd ff5f 	bl	8001e04 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b19      	cmp	r3, #25
 8003f4e:	d907      	bls.n	8003f60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	f043 0320 	orr.w	r3, r3, #32
 8003f56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003f5e:	e006      	b.n	8003f6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d1e9      	bne.n	8003f42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d003      	beq.n	8003f84 <I2C_IsErrorOccurred+0xe0>
 8003f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0aa      	beq.n	8003eda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2220      	movs	r2, #32
 8003f92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	f043 0304 	orr.w	r3, r3, #4
 8003f9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f043 0308 	orr.w	r3, r3, #8
 8003fdc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fe6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f043 0302 	orr.w	r3, r3, #2
 8003ffe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004008:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01c      	beq.n	8004052 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7ff fde9 	bl	8003bf0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <I2C_IsErrorOccurred+0x1bc>)
 800402a:	400b      	ands	r3, r1
 800402c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004056:	4618      	mov	r0, r3
 8004058:	3728      	adds	r7, #40	; 0x28
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	fe00e800 	.word	0xfe00e800

08004064 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	4613      	mov	r3, r2
 8004074:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004076:	897b      	ldrh	r3, [r7, #10]
 8004078:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800407c:	7a7b      	ldrb	r3, [r7, #9]
 800407e:	041b      	lsls	r3, r3, #16
 8004080:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004084:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	4313      	orrs	r3, r2
 800408e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004092:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	0d5b      	lsrs	r3, r3, #21
 800409e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040a2:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <I2C_TransferConfig+0x60>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	43db      	mvns	r3, r3
 80040a8:	ea02 0103 	and.w	r1, r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	03ff63ff 	.word	0x03ff63ff

080040c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d138      	bne.n	8004150 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e032      	b.n	8004152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	; 0x24
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800411a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b20      	cmp	r3, #32
 8004172:	d139      	bne.n	80041e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800417e:	2302      	movs	r3, #2
 8004180:	e033      	b.n	80041ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2224      	movs	r2, #36	; 0x24
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e000      	b.n	80041ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
  }
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f8:	b08f      	sub	sp, #60	; 0x3c
 80041fa:	af0a      	add	r7, sp, #40	; 0x28
 80041fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e116      	b.n	8004436 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f00c face 	bl	80107c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2203      	movs	r2, #3
 800422c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f005 fb1d 	bl	8009886 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	687e      	ldr	r6, [r7, #4]
 8004254:	466d      	mov	r5, sp
 8004256:	f106 0410 	add.w	r4, r6, #16
 800425a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800425c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800425e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004262:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004266:	e885 0003 	stmia.w	r5, {r0, r1}
 800426a:	1d33      	adds	r3, r6, #4
 800426c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800426e:	6838      	ldr	r0, [r7, #0]
 8004270:	f005 f9fe 	bl	8009670 <USB_CoreInit>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0d7      	b.n	8004436 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f005 fb0b 	bl	80098a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	e04a      	b.n	800432e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	333d      	adds	r3, #61	; 0x3d
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	333c      	adds	r3, #60	; 0x3c
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	b298      	uxth	r0, r3
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3344      	adds	r3, #68	; 0x44
 80042d4:	4602      	mov	r2, r0
 80042d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	3340      	adds	r3, #64	; 0x40
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3348      	adds	r3, #72	; 0x48
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	334c      	adds	r3, #76	; 0x4c
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3354      	adds	r3, #84	; 0x54
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	3301      	adds	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d3af      	bcc.n	8004298 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	e044      	b.n	80043c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	3301      	adds	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3b5      	bcc.n	800433e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	687e      	ldr	r6, [r7, #4]
 80043da:	466d      	mov	r5, sp
 80043dc:	f106 0410 	add.w	r4, r6, #16
 80043e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80043f0:	1d33      	adds	r3, r6, #4
 80043f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043f4:	6838      	ldr	r0, [r7, #0]
 80043f6:	f005 faa3 	bl	8009940 <USB_DevInit>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e014      	b.n	8004436 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2b01      	cmp	r3, #1
 8004422:	d102      	bne.n	800442a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f001 f97b 	bl	8005720 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f006 fbf1 	bl	800ac16 <USB_DevDisconnect>

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800443e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_PCD_Start+0x16>
 8004450:	2302      	movs	r3, #2
 8004452:	e012      	b.n	800447a <HAL_PCD_Start+0x3c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f005 f9ff 	bl	8009864 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f006 fbb2 	bl	800abd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004482:	b590      	push	{r4, r7, lr}
 8004484:	b08d      	sub	sp, #52	; 0x34
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f006 fc70 	bl	800ad7e <USB_GetMode>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 84b7 	bne.w	8004e14 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f006 fbd4 	bl	800ac58 <USB_ReadInterrupts>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 84ad 	beq.w	8004e12 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f006 fbc1 	bl	800ac58 <USB_ReadInterrupts>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d107      	bne.n	80044f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f002 0202 	and.w	r2, r2, #2
 80044ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f006 fbaf 	bl	800ac58 <USB_ReadInterrupts>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b10      	cmp	r3, #16
 8004502:	d161      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0210 	bic.w	r2, r2, #16
 8004512:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f003 020f 	and.w	r2, r3, #15
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	3304      	adds	r3, #4
 8004532:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	0c5b      	lsrs	r3, r3, #17
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	2b02      	cmp	r3, #2
 800453e:	d124      	bne.n	800458a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d035      	beq.n	80045b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800455a:	b29b      	uxth	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	6a38      	ldr	r0, [r7, #32]
 8004560:	f006 f9e6 	bl	800a930 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004570:	441a      	add	r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	6a1a      	ldr	r2, [r3, #32]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004582:	441a      	add	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
 8004588:	e016      	b.n	80045b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	0c5b      	lsrs	r3, r3, #17
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	2b06      	cmp	r3, #6
 8004594:	d110      	bne.n	80045b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800459c:	2208      	movs	r2, #8
 800459e:	4619      	mov	r1, r3
 80045a0:	6a38      	ldr	r0, [r7, #32]
 80045a2:	f006 f9c5 	bl	800a930 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045b2:	441a      	add	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0210 	orr.w	r2, r2, #16
 80045c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f006 fb43 	bl	800ac58 <USB_ReadInterrupts>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045dc:	f040 80a7 	bne.w	800472e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f006 fb48 	bl	800ac7e <USB_ReadDevAllOutEpInterrupt>
 80045ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80045f0:	e099      	b.n	8004726 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 808e 	beq.w	800471a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f006 fb6c 	bl	800ace6 <USB_ReadDevOutEPInterrupt>
 800460e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	461a      	mov	r2, r3
 8004628:	2301      	movs	r3, #1
 800462a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800462c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fef0 	bl	8005414 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464a:	461a      	mov	r2, r3
 800464c:	2308      	movs	r3, #8
 800464e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 ffc6 	bl	80055e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	461a      	mov	r2, r3
 8004670:	2310      	movs	r3, #16
 8004672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d030      	beq.n	80046e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d109      	bne.n	800469e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800469c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800469e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4413      	add	r3, r2
 80046b0:	3304      	adds	r3, #4
 80046b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	78db      	ldrb	r3, [r3, #3]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d108      	bne.n	80046ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f00c f99f 	bl	8010a0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	461a      	mov	r2, r3
 80046dc:	2302      	movs	r3, #2
 80046de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	461a      	mov	r2, r3
 80046f8:	2320      	movs	r3, #32
 80046fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004718:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	3301      	adds	r3, #1
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	f47f af62 	bne.w	80045f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f006 fa90 	bl	800ac58 <USB_ReadInterrupts>
 8004738:	4603      	mov	r3, r0
 800473a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800473e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004742:	f040 80db 	bne.w	80048fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f006 fab1 	bl	800acb2 <USB_ReadDevAllInEpInterrupt>
 8004750:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004756:	e0cd      	b.n	80048f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80c2 	beq.w	80048e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f006 fad7 	bl	800ad22 <USB_ReadDevInEPInterrupt>
 8004774:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d057      	beq.n	8004830 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	2201      	movs	r2, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	43db      	mvns	r3, r3
 800479a:	69f9      	ldr	r1, [r7, #28]
 800479c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a0:	4013      	ands	r3, r2
 80047a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	461a      	mov	r2, r3
 80047b2:	2301      	movs	r3, #1
 80047b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d132      	bne.n	8004824 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	334c      	adds	r3, #76	; 0x4c
 80047ce:	6819      	ldr	r1, [r3, #0]
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4403      	add	r3, r0
 80047de:	3348      	adds	r3, #72	; 0x48
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4419      	add	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4403      	add	r3, r0
 80047f2:	334c      	adds	r3, #76	; 0x4c
 80047f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d113      	bne.n	8004824 <HAL_PCD_IRQHandler+0x3a2>
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	3354      	adds	r3, #84	; 0x54
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800481c:	461a      	mov	r2, r3
 800481e:	2101      	movs	r1, #1
 8004820:	f006 fae0 	bl	800ade4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4619      	mov	r1, r3
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f00c f869 	bl	8010902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	461a      	mov	r2, r3
 8004848:	2308      	movs	r3, #8
 800484a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	d008      	beq.n	8004868 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004862:	461a      	mov	r2, r3
 8004864:	2310      	movs	r3, #16
 8004866:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	461a      	mov	r2, r3
 8004880:	2340      	movs	r3, #64	; 0x40
 8004882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d023      	beq.n	80048d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800488e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004890:	6a38      	ldr	r0, [r7, #32]
 8004892:	f005 f9b3 	bl	8009bfc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	3338      	adds	r3, #56	; 0x38
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	3304      	adds	r3, #4
 80048a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	78db      	ldrb	r3, [r3, #3]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d108      	bne.n	80048c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f00c f8b6 	bl	8010a30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	461a      	mov	r2, r3
 80048d2:	2302      	movs	r3, #2
 80048d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80048e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fd08 	bl	80052f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	3301      	adds	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f47f af2e 	bne.w	8004758 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f006 f9a9 	bl	800ac58 <USB_ReadInterrupts>
 8004906:	4603      	mov	r3, r0
 8004908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800490c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004910:	d122      	bne.n	8004958 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800492c:	2b01      	cmp	r3, #1
 800492e:	d108      	bne.n	8004942 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004938:	2100      	movs	r1, #0
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f00c fa30 	bl	8010da0 <HAL_PCDEx_LPM_Callback>
 8004940:	e002      	b.n	8004948 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f00c f854 	bl	80109f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f006 f97b 	bl	800ac58 <USB_ReadInterrupts>
 8004962:	4603      	mov	r3, r0
 8004964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496c:	d112      	bne.n	8004994 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d102      	bne.n	8004984 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f00c f810 	bl	80109a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004992:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f006 f95d 	bl	800ac58 <USB_ReadInterrupts>
 800499e:	4603      	mov	r3, r0
 80049a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a8:	d121      	bne.n	80049ee <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80049b8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d111      	bne.n	80049e8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	f003 020f 	and.w	r2, r3, #15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80049de:	2101      	movs	r1, #1
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f00c f9dd 	bl	8010da0 <HAL_PCDEx_LPM_Callback>
 80049e6:	e002      	b.n	80049ee <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f00b ffdb 	bl	80109a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f006 f930 	bl	800ac58 <USB_ReadInterrupts>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a02:	f040 80b7 	bne.w	8004b74 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2110      	movs	r1, #16
 8004a20:	4618      	mov	r0, r3
 8004a22:	f005 f8eb 	bl	8009bfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a26:	2300      	movs	r3, #0
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2a:	e046      	b.n	8004aba <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a3e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ab2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3b3      	bcc.n	8004a2c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ad6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d016      	beq.n	8004b0e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af0:	f043 030b 	orr.w	r3, r3, #11
 8004af4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b06:	f043 030b 	orr.w	r3, r3, #11
 8004b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0c:	e015      	b.n	8004b3a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f242 032b 	movw	r3, #8235	; 0x202b
 8004b22:	4313      	orrs	r3, r2
 8004b24:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b34:	f043 030b 	orr.w	r3, r3, #11
 8004b38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f006 f940 	bl	800ade4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f006 f86d 	bl	800ac58 <USB_ReadInterrupts>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b88:	d124      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f006 f904 	bl	800ad9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f005 f8ac 	bl	8009cf6 <USB_GetDevSpeed>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681c      	ldr	r4, [r3, #0]
 8004baa:	f001 fa7d 	bl	80060a8 <HAL_RCC_GetHCLKFreq>
 8004bae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f004 fdb1 	bl	8009720 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f00b fec7 	bl	8010952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f006 f83d 	bl	800ac58 <USB_ReadInterrupts>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d10a      	bne.n	8004bfe <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f00b fea4 	bl	8010936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f002 0208 	and.w	r2, r2, #8
 8004bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f006 f828 	bl	800ac58 <USB_ReadInterrupts>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b80      	cmp	r3, #128	; 0x80
 8004c10:	d122      	bne.n	8004c58 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c1e:	2301      	movs	r3, #1
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
 8004c22:	e014      	b.n	8004c4e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fb27 	bl	8005296 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d3e5      	bcc.n	8004c24 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f005 fffb 	bl	800ac58 <USB_ReadInterrupts>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c6c:	d13b      	bne.n	8004ce6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c6e:	2301      	movs	r3, #1
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
 8004c72:	e02b      	b.n	8004ccc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	4613      	mov	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3340      	adds	r3, #64	; 0x40
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d115      	bne.n	8004cc6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	da12      	bge.n	8004cc6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	333f      	adds	r3, #63	; 0x3f
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fae8 	bl	8005296 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	3301      	adds	r3, #1
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d3ce      	bcc.n	8004c74 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f005 ffb4 	bl	800ac58 <USB_ReadInterrupts>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cfa:	d155      	bne.n	8004da8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004d00:	e045      	b.n	8004d8e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d12e      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da2b      	bge.n	8004d88 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004d3c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d121      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d48:	4613      	mov	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d84:	6053      	str	r3, [r2, #4]
            break;
 8004d86:	e007      	b.n	8004d98 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3b4      	bcc.n	8004d02 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f005 ff53 	bl	800ac58 <USB_ReadInterrupts>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f00b fe48 	bl	8010a54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f005 ff3d 	bl	800ac58 <USB_ReadInterrupts>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d115      	bne.n	8004e14 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f00b fe38 	bl	8010a70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	e000      	b.n	8004e14 <HAL_PCD_IRQHandler+0x992>
      return;
 8004e12:	bf00      	nop
    }
  }
}
 8004e14:	3734      	adds	r7, #52	; 0x34
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd90      	pop	{r4, r7, pc}

08004e1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_PCD_SetAddress+0x1a>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e013      	b.n	8004e5c <HAL_PCD_SetAddress+0x42>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f005 fe9b 	bl	800ab88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	70fb      	strb	r3, [r7, #3]
 8004e76:	460b      	mov	r3, r1
 8004e78:	803b      	strh	r3, [r7, #0]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	da0f      	bge.n	8004eaa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	f003 020f 	and.w	r2, r3, #15
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	3338      	adds	r3, #56	; 0x38
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	705a      	strb	r2, [r3, #1]
 8004ea8:	e00f      	b.n	8004eca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ed6:	883a      	ldrh	r2, [r7, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	78ba      	ldrb	r2, [r7, #2]
 8004ee0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ef4:	78bb      	ldrb	r3, [r7, #2]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d102      	bne.n	8004f00 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_PCD_EP_Open+0xaa>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e00e      	b.n	8004f2c <HAL_PCD_EP_Open+0xc8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f004 ff0f 	bl	8009d40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da0f      	bge.n	8004f68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	f003 020f 	and.w	r2, r3, #15
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	3338      	adds	r3, #56	; 0x38
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	705a      	strb	r2, [r3, #1]
 8004f66:	e00f      	b.n	8004f88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	f003 020f 	and.w	r2, r3, #15
 8004f6e:	4613      	mov	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3304      	adds	r3, #4
 8004f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_PCD_EP_Close+0x6e>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e00e      	b.n	8004fc0 <HAL_PCD_EP_Close+0x8c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f004 ff4d 	bl	8009e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fd8:	7afb      	ldrb	r3, [r7, #11]
 8004fda:	f003 020f 	and.w	r2, r3, #15
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2200      	movs	r2, #0
 8005002:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2200      	movs	r2, #0
 8005008:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800500a:	7afb      	ldrb	r3, [r7, #11]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d102      	bne.n	8005024 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005024:	7afb      	ldrb	r3, [r7, #11]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6979      	ldr	r1, [r7, #20]
 800503c:	f005 fa34 	bl	800a4a8 <USB_EP0StartXfer>
 8005040:	e008      	b.n	8005054 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	6979      	ldr	r1, [r7, #20]
 8005050:	f004 ffda 	bl	800a008 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	f003 020f 	and.w	r2, r3, #15
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005080:	681b      	ldr	r3, [r3, #0]
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	460b      	mov	r3, r1
 800509c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800509e:	7afb      	ldrb	r3, [r7, #11]
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	3338      	adds	r3, #56	; 0x38
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	3304      	adds	r3, #4
 80050b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2200      	movs	r2, #0
 80050c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2201      	movs	r2, #1
 80050cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ce:	7afb      	ldrb	r3, [r7, #11]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d102      	bne.n	80050e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	6979      	ldr	r1, [r7, #20]
 8005100:	f005 f9d2 	bl	800a4a8 <USB_EP0StartXfer>
 8005104:	e008      	b.n	8005118 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	6979      	ldr	r1, [r7, #20]
 8005114:	f004 ff78 	bl	800a008 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	460b      	mov	r3, r1
 800512c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	f003 020f 	and.w	r2, r3, #15
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	429a      	cmp	r2, r3
 800513a:	d901      	bls.n	8005140 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e050      	b.n	80051e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005144:	2b00      	cmp	r3, #0
 8005146:	da0f      	bge.n	8005168 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	f003 020f 	and.w	r2, r3, #15
 800514e:	4613      	mov	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	3338      	adds	r3, #56	; 0x38
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	4413      	add	r3, r2
 800515c:	3304      	adds	r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2201      	movs	r2, #1
 8005164:	705a      	strb	r2, [r3, #1]
 8005166:	e00d      	b.n	8005184 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4413      	add	r3, r2
 800517a:	3304      	adds	r3, #4
 800517c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_PCD_EP_SetStall+0x82>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e01e      	b.n	80051e2 <HAL_PCD_EP_SetStall+0xc0>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68f9      	ldr	r1, [r7, #12]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f005 fc14 	bl	800a9e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	b2d9      	uxtb	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051d2:	461a      	mov	r2, r3
 80051d4:	f005 fe06 	bl	800ade4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	f003 020f 	and.w	r2, r3, #15
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d901      	bls.n	8005208 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e042      	b.n	800528e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800520c:	2b00      	cmp	r3, #0
 800520e:	da0f      	bge.n	8005230 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	f003 020f 	and.w	r2, r3, #15
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	3338      	adds	r3, #56	; 0x38
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4413      	add	r3, r2
 8005224:	3304      	adds	r3, #4
 8005226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	705a      	strb	r2, [r3, #1]
 800522e:	e00f      	b.n	8005250 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	f003 020f 	and.w	r2, r3, #15
 8005236:	4613      	mov	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4413      	add	r3, r2
 8005246:	3304      	adds	r3, #4
 8005248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_PCD_EP_ClrStall+0x86>
 800526c:	2302      	movs	r3, #2
 800526e:	e00e      	b.n	800528e <HAL_PCD_EP_ClrStall+0xa4>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68f9      	ldr	r1, [r7, #12]
 800527e:	4618      	mov	r0, r3
 8005280:	f005 fc1c 	bl	800aabc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80052a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	da0c      	bge.n	80052c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	f003 020f 	and.w	r2, r3, #15
 80052b0:	4613      	mov	r3, r2
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	3338      	adds	r3, #56	; 0x38
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	3304      	adds	r3, #4
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e00c      	b.n	80052de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	f003 020f 	and.w	r2, r3, #15
 80052ca:	4613      	mov	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	3304      	adds	r3, #4
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f005 fa3b 	bl	800a760 <USB_EPStopXfer>
 80052ea:	4603      	mov	r3, r0
 80052ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80052ee:	7afb      	ldrb	r3, [r7, #11]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	3338      	adds	r3, #56	; 0x38
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	3304      	adds	r3, #4
 800531e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1a      	ldr	r2, [r3, #32]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	429a      	cmp	r2, r3
 800532a:	d901      	bls.n	8005330 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e06c      	b.n	800540a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	429a      	cmp	r2, r3
 8005344:	d902      	bls.n	800534c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	3303      	adds	r3, #3
 8005350:	089b      	lsrs	r3, r3, #2
 8005352:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005354:	e02b      	b.n	80053ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	429a      	cmp	r2, r3
 800536a:	d902      	bls.n	8005372 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3303      	adds	r3, #3
 8005376:	089b      	lsrs	r3, r3, #2
 8005378:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6919      	ldr	r1, [r3, #16]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800538a:	b2db      	uxtb	r3, r3
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	4603      	mov	r3, r0
 8005390:	6978      	ldr	r0, [r7, #20]
 8005392:	f005 fa8f 	bl	800a8b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	441a      	add	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1a      	ldr	r2, [r3, #32]
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	441a      	add	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d809      	bhi.n	80053d8 <PCD_WriteEmptyTxFifo+0xe0>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a1a      	ldr	r2, [r3, #32]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d203      	bcs.n	80053d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1be      	bne.n	8005356 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d811      	bhi.n	8005408 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	2201      	movs	r2, #1
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	6939      	ldr	r1, [r7, #16]
 8005400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005404:	4013      	ands	r3, r2
 8005406:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	333c      	adds	r3, #60	; 0x3c
 800542c:	3304      	adds	r3, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d17b      	bne.n	8005542 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d015      	beq.n	8005480 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4a61      	ldr	r2, [pc, #388]	; (80055dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	f240 80b9 	bls.w	80055d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80b3 	beq.w	80055d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	461a      	mov	r2, r3
 8005478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547c:	6093      	str	r3, [r2, #8]
 800547e:	e0a7      	b.n	80055d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005496:	461a      	mov	r2, r3
 8005498:	2320      	movs	r3, #32
 800549a:	6093      	str	r3, [r2, #8]
 800549c:	e098      	b.n	80055d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 8093 	bne.w	80055d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4a4b      	ldr	r2, [pc, #300]	; (80055dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d90f      	bls.n	80054d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	461a      	mov	r2, r3
 80054ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ce:	6093      	str	r3, [r2, #8]
 80054d0:	e07e      	b.n	80055d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4413      	add	r3, r2
 80054e4:	3304      	adds	r3, #4
 80054e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	0159      	lsls	r1, r3, #5
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	440b      	add	r3, r1
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fe:	1ad2      	subs	r2, r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d114      	bne.n	8005534 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800551c:	461a      	mov	r2, r3
 800551e:	2101      	movs	r1, #1
 8005520:	f005 fc60 	bl	800ade4 <USB_EP0_OutStart>
 8005524:	e006      	b.n	8005534 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	441a      	add	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f00b f9c6 	bl	80108cc <HAL_PCD_DataOutStageCallback>
 8005540:	e046      	b.n	80055d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4a26      	ldr	r2, [pc, #152]	; (80055e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d124      	bne.n	8005594 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	461a      	mov	r2, r3
 8005562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005566:	6093      	str	r3, [r2, #8]
 8005568:	e032      	b.n	80055d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	461a      	mov	r2, r3
 8005582:	2320      	movs	r3, #32
 8005584:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f00b f99d 	bl	80108cc <HAL_PCD_DataOutStageCallback>
 8005592:	e01d      	b.n	80055d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d114      	bne.n	80055c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d108      	bne.n	80055c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055bc:	461a      	mov	r2, r3
 80055be:	2100      	movs	r1, #0
 80055c0:	f005 fc10 	bl	800ade4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f00b f97e 	bl	80108cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	4f54300a 	.word	0x4f54300a
 80055e0:	4f54310a 	.word	0x4f54310a

080055e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	333c      	adds	r3, #60	; 0x3c
 80055fc:	3304      	adds	r3, #4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <PCD_EP_OutSetupPacket_int+0x88>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d90e      	bls.n	8005638 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005620:	2b00      	cmp	r3, #0
 8005622:	d009      	beq.n	8005638 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	461a      	mov	r2, r3
 8005632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005636:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f00b f935 	bl	80108a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a0a      	ldr	r2, [pc, #40]	; (800566c <PCD_EP_OutSetupPacket_int+0x88>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d90c      	bls.n	8005660 <PCD_EP_OutSetupPacket_int+0x7c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d108      	bne.n	8005660 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005658:	461a      	mov	r2, r3
 800565a:	2101      	movs	r1, #1
 800565c:	f005 fbc2 	bl	800ade4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	4f54300a 	.word	0x4f54300a

08005670 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
 800567c:	4613      	mov	r3, r2
 800567e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d107      	bne.n	800569e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800568e:	883b      	ldrh	r3, [r7, #0]
 8005690:	0419      	lsls	r1, r3, #16
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	430a      	orrs	r2, r1
 800569a:	629a      	str	r2, [r3, #40]	; 0x28
 800569c:	e028      	b.n	80056f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
 80056b0:	e00d      	b.n	80056ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	3340      	adds	r3, #64	; 0x40
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	4413      	add	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	3301      	adds	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d3ec      	bcc.n	80056b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80056d8:	883b      	ldrh	r3, [r7, #0]
 80056da:	0418      	lsls	r0, r3, #16
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	4302      	orrs	r2, r0
 80056e8:	3340      	adds	r3, #64	; 0x40
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_PCDEx_ActivateLPM+0x44>)
 8005750:	4313      	orrs	r3, r2
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	10000003 	.word	0x10000003

08005768 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e29b      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8087 	beq.w	800589a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800578c:	4b96      	ldr	r3, [pc, #600]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b04      	cmp	r3, #4
 8005796:	d00c      	beq.n	80057b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005798:	4b93      	ldr	r3, [pc, #588]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d112      	bne.n	80057ca <HAL_RCC_OscConfig+0x62>
 80057a4:	4b90      	ldr	r3, [pc, #576]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057b0:	d10b      	bne.n	80057ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b2:	4b8d      	ldr	r3, [pc, #564]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d06c      	beq.n	8005898 <HAL_RCC_OscConfig+0x130>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d168      	bne.n	8005898 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e275      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d2:	d106      	bne.n	80057e2 <HAL_RCC_OscConfig+0x7a>
 80057d4:	4b84      	ldr	r3, [pc, #528]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a83      	ldr	r2, [pc, #524]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80057da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e02e      	b.n	8005840 <HAL_RCC_OscConfig+0xd8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x9c>
 80057ea:	4b7f      	ldr	r3, [pc, #508]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a7e      	ldr	r2, [pc, #504]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80057f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b7c      	ldr	r3, [pc, #496]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a7b      	ldr	r2, [pc, #492]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80057fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e01d      	b.n	8005840 <HAL_RCC_OscConfig+0xd8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800580c:	d10c      	bne.n	8005828 <HAL_RCC_OscConfig+0xc0>
 800580e:	4b76      	ldr	r3, [pc, #472]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a75      	ldr	r2, [pc, #468]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	4b73      	ldr	r3, [pc, #460]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a72      	ldr	r2, [pc, #456]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e00b      	b.n	8005840 <HAL_RCC_OscConfig+0xd8>
 8005828:	4b6f      	ldr	r3, [pc, #444]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6e      	ldr	r2, [pc, #440]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 800582e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	4b6c      	ldr	r3, [pc, #432]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a6b      	ldr	r2, [pc, #428]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 800583a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d013      	beq.n	8005870 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fc fadc 	bl	8001e04 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005850:	f7fc fad8 	bl	8001e04 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	; 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e229      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005862:	4b61      	ldr	r3, [pc, #388]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0f0      	beq.n	8005850 <HAL_RCC_OscConfig+0xe8>
 800586e:	e014      	b.n	800589a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fc fac8 	bl	8001e04 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fc fac4 	bl	8001e04 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	; 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e215      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800588a:	4b57      	ldr	r3, [pc, #348]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0x110>
 8005896:	e000      	b.n	800589a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d069      	beq.n	800597a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058a6:	4b50      	ldr	r3, [pc, #320]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b2:	4b4d      	ldr	r3, [pc, #308]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d11c      	bne.n	80058f8 <HAL_RCC_OscConfig+0x190>
 80058be:	4b4a      	ldr	r3, [pc, #296]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d116      	bne.n	80058f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ca:	4b47      	ldr	r3, [pc, #284]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_RCC_OscConfig+0x17a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d001      	beq.n	80058e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e1e9      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e2:	4b41      	ldr	r3, [pc, #260]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	493d      	ldr	r1, [pc, #244]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058f6:	e040      	b.n	800597a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d023      	beq.n	8005948 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005900:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a38      	ldr	r2, [pc, #224]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590c:	f7fc fa7a 	bl	8001e04 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005914:	f7fc fa76 	bl	8001e04 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e1c7      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005926:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005932:	4b2d      	ldr	r3, [pc, #180]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	4929      	ldr	r1, [pc, #164]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005942:	4313      	orrs	r3, r2
 8005944:	600b      	str	r3, [r1, #0]
 8005946:	e018      	b.n	800597a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a26      	ldr	r2, [pc, #152]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005954:	f7fc fa56 	bl	8001e04 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800595c:	f7fc fa52 	bl	8001e04 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e1a3      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800596e:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d038      	beq.n	80059f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d019      	beq.n	80059c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800598e:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005992:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599a:	f7fc fa33 	bl	8001e04 <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059a2:	f7fc fa2f 	bl	8001e04 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e180      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80059b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0f0      	beq.n	80059a2 <HAL_RCC_OscConfig+0x23a>
 80059c0:	e01a      	b.n	80059f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80059c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c6:	4a08      	ldr	r2, [pc, #32]	; (80059e8 <HAL_RCC_OscConfig+0x280>)
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ce:	f7fc fa19 	bl	8001e04 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d6:	f7fc fa15 	bl	8001e04 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d903      	bls.n	80059ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e166      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
 80059e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ec:	4b92      	ldr	r3, [pc, #584]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 80059ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1ee      	bne.n	80059d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80a4 	beq.w	8005b4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a06:	4b8c      	ldr	r3, [pc, #560]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10d      	bne.n	8005a2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a12:	4b89      	ldr	r3, [pc, #548]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	4a88      	ldr	r2, [pc, #544]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a1e:	4b86      	ldr	r3, [pc, #536]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a2e:	4b83      	ldr	r3, [pc, #524]	; (8005c3c <HAL_RCC_OscConfig+0x4d4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d118      	bne.n	8005a6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a3a:	4b80      	ldr	r3, [pc, #512]	; (8005c3c <HAL_RCC_OscConfig+0x4d4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a7f      	ldr	r2, [pc, #508]	; (8005c3c <HAL_RCC_OscConfig+0x4d4>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a46:	f7fc f9dd 	bl	8001e04 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4e:	f7fc f9d9 	bl	8001e04 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b64      	cmp	r3, #100	; 0x64
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e12a      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a60:	4b76      	ldr	r3, [pc, #472]	; (8005c3c <HAL_RCC_OscConfig+0x4d4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d106      	bne.n	8005a82 <HAL_RCC_OscConfig+0x31a>
 8005a74:	4b70      	ldr	r3, [pc, #448]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a78:	4a6f      	ldr	r2, [pc, #444]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a80:	e02d      	b.n	8005ade <HAL_RCC_OscConfig+0x376>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10c      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x33c>
 8005a8a:	4b6b      	ldr	r3, [pc, #428]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	4a6a      	ldr	r2, [pc, #424]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	6713      	str	r3, [r2, #112]	; 0x70
 8005a96:	4b68      	ldr	r3, [pc, #416]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9a:	4a67      	ldr	r2, [pc, #412]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa2:	e01c      	b.n	8005ade <HAL_RCC_OscConfig+0x376>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b05      	cmp	r3, #5
 8005aaa:	d10c      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x35e>
 8005aac:	4b62      	ldr	r3, [pc, #392]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	4a61      	ldr	r2, [pc, #388]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005ab2:	f043 0304 	orr.w	r3, r3, #4
 8005ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab8:	4b5f      	ldr	r3, [pc, #380]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	4a5e      	ldr	r2, [pc, #376]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac4:	e00b      	b.n	8005ade <HAL_RCC_OscConfig+0x376>
 8005ac6:	4b5c      	ldr	r3, [pc, #368]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	4a5b      	ldr	r2, [pc, #364]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad2:	4b59      	ldr	r3, [pc, #356]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	4a58      	ldr	r2, [pc, #352]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d015      	beq.n	8005b12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae6:	f7fc f98d 	bl	8001e04 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aec:	e00a      	b.n	8005b04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aee:	f7fc f989 	bl	8001e04 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e0d8      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b04:	4b4c      	ldr	r3, [pc, #304]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ee      	beq.n	8005aee <HAL_RCC_OscConfig+0x386>
 8005b10:	e014      	b.n	8005b3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b12:	f7fc f977 	bl	8001e04 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b18:	e00a      	b.n	8005b30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1a:	f7fc f973 	bl	8001e04 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e0c2      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b30:	4b41      	ldr	r3, [pc, #260]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1ee      	bne.n	8005b1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d105      	bne.n	8005b4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b42:	4b3d      	ldr	r3, [pc, #244]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4a3c      	ldr	r2, [pc, #240]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 80ae 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b58:	4b37      	ldr	r3, [pc, #220]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 030c 	and.w	r3, r3, #12
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d06d      	beq.n	8005c40 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d14b      	bne.n	8005c04 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6c:	4b32      	ldr	r3, [pc, #200]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a31      	ldr	r2, [pc, #196]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fc f944 	bl	8001e04 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b80:	f7fc f940 	bl	8001e04 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e091      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b92:	4b29      	ldr	r3, [pc, #164]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69da      	ldr	r2, [r3, #28]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	019b      	lsls	r3, r3, #6
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	061b      	lsls	r3, r3, #24
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	071b      	lsls	r3, r3, #28
 8005bca:	491b      	ldr	r1, [pc, #108]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd0:	4b19      	ldr	r3, [pc, #100]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bdc:	f7fc f912 	bl	8001e04 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be4:	f7fc f90e 	bl	8001e04 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e05f      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0x47c>
 8005c02:	e057      	b.n	8005cb4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a0b      	ldr	r2, [pc, #44]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fc f8f8 	bl	8001e04 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c18:	f7fc f8f4 	bl	8001e04 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e045      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2a:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <HAL_RCC_OscConfig+0x4d0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x4b0>
 8005c36:	e03d      	b.n	8005cb4 <HAL_RCC_OscConfig+0x54c>
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c40:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <HAL_RCC_OscConfig+0x558>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d030      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d129      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d122      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c70:	4013      	ands	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d119      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	085b      	lsrs	r3, r3, #1
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d10f      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d107      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023800 	.word	0x40023800

08005cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0d0      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cdc:	4b6a      	ldr	r3, [pc, #424]	; (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d910      	bls.n	8005d0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cea:	4b67      	ldr	r3, [pc, #412]	; (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 020f 	bic.w	r2, r3, #15
 8005cf2:	4965      	ldr	r1, [pc, #404]	; (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	4b63      	ldr	r3, [pc, #396]	; (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0b8      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d020      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d24:	4b59      	ldr	r3, [pc, #356]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4a58      	ldr	r2, [pc, #352]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d3c:	4b53      	ldr	r3, [pc, #332]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4a52      	ldr	r2, [pc, #328]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d48:	4b50      	ldr	r3, [pc, #320]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	494d      	ldr	r1, [pc, #308]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d040      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6e:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d115      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07f      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d107      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d86:	4b41      	ldr	r3, [pc, #260]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e073      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d96:	4b3d      	ldr	r3, [pc, #244]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e06b      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005da6:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f023 0203 	bic.w	r2, r3, #3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4936      	ldr	r1, [pc, #216]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db8:	f7fc f824 	bl	8001e04 <HAL_GetTick>
 8005dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc0:	f7fc f820 	bl	8001e04 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e053      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd6:	4b2d      	ldr	r3, [pc, #180]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 020c 	and.w	r2, r3, #12
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d1eb      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005de8:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d210      	bcs.n	8005e18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df6:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f023 020f 	bic.w	r2, r3, #15
 8005dfe:	4922      	ldr	r1, [pc, #136]	; (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e06:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <HAL_RCC_ClockConfig+0x1c4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d001      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e032      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d008      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4916      	ldr	r1, [pc, #88]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	490e      	ldr	r1, [pc, #56]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e56:	f000 f821 	bl	8005e9c <HAL_RCC_GetSysClockFreq>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <HAL_RCC_ClockConfig+0x1c8>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	490a      	ldr	r1, [pc, #40]	; (8005e90 <HAL_RCC_ClockConfig+0x1cc>)
 8005e68:	5ccb      	ldrb	r3, [r1, r3]
 8005e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <HAL_RCC_ClockConfig+0x1d0>)
 8005e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <HAL_RCC_ClockConfig+0x1d4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fb ff80 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40023c00 	.word	0x40023c00
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	080127dc 	.word	0x080127dc
 8005e94:	20000004 	.word	0x20000004
 8005e98:	20000008 	.word	0x20000008

08005e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea0:	b094      	sub	sp, #80	; 0x50
 8005ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eac:	2300      	movs	r3, #0
 8005eae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eb4:	4b79      	ldr	r3, [pc, #484]	; (800609c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 030c 	and.w	r3, r3, #12
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d00d      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x40>
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	f200 80e1 	bhi.w	8006088 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ece:	e0db      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ed0:	4b73      	ldr	r3, [pc, #460]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ed2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ed4:	e0db      	b.n	800608e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ed6:	4b73      	ldr	r3, [pc, #460]	; (80060a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ed8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005eda:	e0d8      	b.n	800608e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005edc:	4b6f      	ldr	r3, [pc, #444]	; (800609c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ee4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ee6:	4b6d      	ldr	r3, [pc, #436]	; (800609c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d063      	beq.n	8005fba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ef2:	4b6a      	ldr	r3, [pc, #424]	; (800609c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	2200      	movs	r2, #0
 8005efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005efc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30
 8005f06:	2300      	movs	r3, #0
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f0e:	4622      	mov	r2, r4
 8005f10:	462b      	mov	r3, r5
 8005f12:	f04f 0000 	mov.w	r0, #0
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	0159      	lsls	r1, r3, #5
 8005f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f20:	0150      	lsls	r0, r2, #5
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4621      	mov	r1, r4
 8005f28:	1a51      	subs	r1, r2, r1
 8005f2a:	6139      	str	r1, [r7, #16]
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f40:	4659      	mov	r1, fp
 8005f42:	018b      	lsls	r3, r1, #6
 8005f44:	4651      	mov	r1, sl
 8005f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f4a:	4651      	mov	r1, sl
 8005f4c:	018a      	lsls	r2, r1, #6
 8005f4e:	4651      	mov	r1, sl
 8005f50:	ebb2 0801 	subs.w	r8, r2, r1
 8005f54:	4659      	mov	r1, fp
 8005f56:	eb63 0901 	sbc.w	r9, r3, r1
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f6e:	4690      	mov	r8, r2
 8005f70:	4699      	mov	r9, r3
 8005f72:	4623      	mov	r3, r4
 8005f74:	eb18 0303 	adds.w	r3, r8, r3
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	462b      	mov	r3, r5
 8005f7c:	eb49 0303 	adc.w	r3, r9, r3
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f8e:	4629      	mov	r1, r5
 8005f90:	024b      	lsls	r3, r1, #9
 8005f92:	4621      	mov	r1, r4
 8005f94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f98:	4621      	mov	r1, r4
 8005f9a:	024a      	lsls	r2, r1, #9
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fac:	f7fa f998 	bl	80002e0 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb8:	e058      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fba:	4b38      	ldr	r3, [pc, #224]	; (800609c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	099b      	lsrs	r3, r3, #6
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fca:	623b      	str	r3, [r7, #32]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	f04f 0000 	mov.w	r0, #0
 8005fdc:	f04f 0100 	mov.w	r1, #0
 8005fe0:	0159      	lsls	r1, r3, #5
 8005fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fe6:	0150      	lsls	r0, r2, #5
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4641      	mov	r1, r8
 8005fee:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006004:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006008:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800600c:	ebb2 040a 	subs.w	r4, r2, sl
 8006010:	eb63 050b 	sbc.w	r5, r3, fp
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	00eb      	lsls	r3, r5, #3
 800601e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006022:	00e2      	lsls	r2, r4, #3
 8006024:	4614      	mov	r4, r2
 8006026:	461d      	mov	r5, r3
 8006028:	4643      	mov	r3, r8
 800602a:	18e3      	adds	r3, r4, r3
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	464b      	mov	r3, r9
 8006030:	eb45 0303 	adc.w	r3, r5, r3
 8006034:	607b      	str	r3, [r7, #4]
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006042:	4629      	mov	r1, r5
 8006044:	028b      	lsls	r3, r1, #10
 8006046:	4621      	mov	r1, r4
 8006048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800604c:	4621      	mov	r1, r4
 800604e:	028a      	lsls	r2, r1, #10
 8006050:	4610      	mov	r0, r2
 8006052:	4619      	mov	r1, r3
 8006054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006056:	2200      	movs	r2, #0
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	61fa      	str	r2, [r7, #28]
 800605c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006060:	f7fa f93e 	bl	80002e0 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4613      	mov	r3, r2
 800606a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_RCC_GetSysClockFreq+0x200>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	3301      	adds	r3, #1
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800607c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800607e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006086:	e002      	b.n	800608e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800608a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800608c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800608e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006090:	4618      	mov	r0, r3
 8006092:	3750      	adds	r7, #80	; 0x50
 8006094:	46bd      	mov	sp, r7
 8006096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800609a:	bf00      	nop
 800609c:	40023800 	.word	0x40023800
 80060a0:	00f42400 	.word	0x00f42400
 80060a4:	007a1200 	.word	0x007a1200

080060a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <HAL_RCC_GetHCLKFreq+0x14>)
 80060ae:	681b      	ldr	r3, [r3, #0]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000004 	.word	0x20000004

080060c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060c4:	f7ff fff0 	bl	80060a8 <HAL_RCC_GetHCLKFreq>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	0a9b      	lsrs	r3, r3, #10
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	4903      	ldr	r1, [pc, #12]	; (80060e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060d6:	5ccb      	ldrb	r3, [r1, r3]
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40023800 	.word	0x40023800
 80060e4:	080127ec 	.word	0x080127ec

080060e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060ec:	f7ff ffdc 	bl	80060a8 <HAL_RCC_GetHCLKFreq>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4b05      	ldr	r3, [pc, #20]	; (8006108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	0b5b      	lsrs	r3, r3, #13
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	4903      	ldr	r1, [pc, #12]	; (800610c <HAL_RCC_GetPCLK2Freq+0x24>)
 80060fe:	5ccb      	ldrb	r3, [r1, r3]
 8006100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006104:	4618      	mov	r0, r3
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40023800 	.word	0x40023800
 800610c:	080127ec 	.word	0x080127ec

08006110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d012      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006138:	4b69      	ldr	r3, [pc, #420]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4a68      	ldr	r2, [pc, #416]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006142:	6093      	str	r3, [r2, #8]
 8006144:	4b66      	ldr	r3, [pc, #408]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614c:	4964      	ldr	r1, [pc, #400]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614e:	4313      	orrs	r3, r2
 8006150:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800615a:	2301      	movs	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d017      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800616a:	4b5d      	ldr	r3, [pc, #372]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	4959      	ldr	r1, [pc, #356]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006188:	d101      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800618a:	2301      	movs	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d017      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061a6:	4b4e      	ldr	r3, [pc, #312]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	494a      	ldr	r1, [pc, #296]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c4:	d101      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80061c6:	2301      	movs	r3, #1
 80061c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80061e2:	2301      	movs	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 808b 	beq.w	800630a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061f4:	4b3a      	ldr	r3, [pc, #232]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	4a39      	ldr	r2, [pc, #228]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fe:	6413      	str	r3, [r2, #64]	; 0x40
 8006200:	4b37      	ldr	r3, [pc, #220]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800620c:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a34      	ldr	r2, [pc, #208]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006218:	f7fb fdf4 	bl	8001e04 <HAL_GetTick>
 800621c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800621e:	e008      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006220:	f7fb fdf0 	bl	8001e04 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b64      	cmp	r3, #100	; 0x64
 800622c:	d901      	bls.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e38f      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006232:	4b2c      	ldr	r3, [pc, #176]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800623e:	4b28      	ldr	r3, [pc, #160]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006246:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d035      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	429a      	cmp	r2, r3
 800625a:	d02e      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800625c:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006264:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006266:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	4a1d      	ldr	r2, [pc, #116]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006272:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	4a1a      	ldr	r2, [pc, #104]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800627e:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006284:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b01      	cmp	r3, #1
 800628e:	d114      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fb fdb8 	bl	8001e04 <HAL_GetTick>
 8006294:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006296:	e00a      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006298:	f7fb fdb4 	bl	8001e04 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e351      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ae:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0ee      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c6:	d111      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062d6:	400b      	ands	r3, r1
 80062d8:	4901      	ldr	r1, [pc, #4]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	608b      	str	r3, [r1, #8]
 80062de:	e00b      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062e0:	40023800 	.word	0x40023800
 80062e4:	40007000 	.word	0x40007000
 80062e8:	0ffffcff 	.word	0x0ffffcff
 80062ec:	4bac      	ldr	r3, [pc, #688]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4aab      	ldr	r2, [pc, #684]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062f6:	6093      	str	r3, [r2, #8]
 80062f8:	4ba9      	ldr	r3, [pc, #676]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006304:	49a6      	ldr	r1, [pc, #664]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006306:	4313      	orrs	r3, r2
 8006308:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006316:	4ba2      	ldr	r3, [pc, #648]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800631c:	4aa0      	ldr	r2, [pc, #640]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800631e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006326:	4b9e      	ldr	r3, [pc, #632]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006328:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	499b      	ldr	r1, [pc, #620]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006344:	4b96      	ldr	r3, [pc, #600]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006352:	4993      	ldr	r1, [pc, #588]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006366:	4b8e      	ldr	r3, [pc, #568]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006374:	498a      	ldr	r1, [pc, #552]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006388:	4b85      	ldr	r3, [pc, #532]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006396:	4982      	ldr	r1, [pc, #520]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063aa:	4b7d      	ldr	r3, [pc, #500]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b8:	4979      	ldr	r1, [pc, #484]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063cc:	4b74      	ldr	r3, [pc, #464]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	f023 0203 	bic.w	r2, r3, #3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	4971      	ldr	r1, [pc, #452]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063ee:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f4:	f023 020c 	bic.w	r2, r3, #12
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fc:	4968      	ldr	r1, [pc, #416]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006410:	4b63      	ldr	r3, [pc, #396]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006416:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641e:	4960      	ldr	r1, [pc, #384]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006432:	4b5b      	ldr	r3, [pc, #364]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006438:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	4957      	ldr	r1, [pc, #348]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006454:	4b52      	ldr	r3, [pc, #328]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	494f      	ldr	r1, [pc, #316]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006476:	4b4a      	ldr	r3, [pc, #296]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006484:	4946      	ldr	r1, [pc, #280]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006498:	4b41      	ldr	r3, [pc, #260]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a6:	493e      	ldr	r1, [pc, #248]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064ba:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c8:	4935      	ldr	r1, [pc, #212]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064dc:	4b30      	ldr	r3, [pc, #192]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ea:	492d      	ldr	r1, [pc, #180]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d011      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064fe:	4b28      	ldr	r3, [pc, #160]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006504:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650c:	4924      	ldr	r1, [pc, #144]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800651c:	d101      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800651e:	2301      	movs	r3, #1
 8006520:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800652e:	2301      	movs	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800653e:	4b18      	ldr	r3, [pc, #96]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006544:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654c:	4914      	ldr	r1, [pc, #80]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006560:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006566:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006570:	490b      	ldr	r1, [pc, #44]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006584:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006594:	4902      	ldr	r1, [pc, #8]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800659c:	e002      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800659e:	bf00      	nop
 80065a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065b0:	4b8a      	ldr	r3, [pc, #552]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c0:	4986      	ldr	r1, [pc, #536]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80065d4:	4b81      	ldr	r3, [pc, #516]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e4:	497d      	ldr	r1, [pc, #500]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d006      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80d6 	beq.w	80067ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006600:	4b76      	ldr	r3, [pc, #472]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a75      	ldr	r2, [pc, #468]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800660a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800660c:	f7fb fbfa 	bl	8001e04 <HAL_GetTick>
 8006610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006614:	f7fb fbf6 	bl	8001e04 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b64      	cmp	r3, #100	; 0x64
 8006620:	d901      	bls.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e195      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006626:	4b6d      	ldr	r3, [pc, #436]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d021      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	2b00      	cmp	r3, #0
 8006644:	d11d      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006646:	4b65      	ldr	r3, [pc, #404]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800664c:	0c1b      	lsrs	r3, r3, #16
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006654:	4b61      	ldr	r3, [pc, #388]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665a:	0e1b      	lsrs	r3, r3, #24
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	019a      	lsls	r2, r3, #6
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	431a      	orrs	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	061b      	lsls	r3, r3, #24
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	071b      	lsls	r3, r3, #28
 800667a:	4958      	ldr	r1, [pc, #352]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d004      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006696:	d00a      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d02e      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ac:	d129      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80066ae:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b4:	0c1b      	lsrs	r3, r3, #16
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066bc:	4b47      	ldr	r3, [pc, #284]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c2:	0f1b      	lsrs	r3, r3, #28
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	019a      	lsls	r2, r3, #6
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	061b      	lsls	r3, r3, #24
 80066dc:	431a      	orrs	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	071b      	lsls	r3, r3, #28
 80066e2:	493e      	ldr	r1, [pc, #248]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066ea:	4b3c      	ldr	r3, [pc, #240]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066f0:	f023 021f 	bic.w	r2, r3, #31
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	3b01      	subs	r3, #1
 80066fa:	4938      	ldr	r1, [pc, #224]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01d      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800670e:	4b33      	ldr	r3, [pc, #204]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006714:	0e1b      	lsrs	r3, r3, #24
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800671c:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800671e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006722:	0f1b      	lsrs	r3, r3, #28
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	019a      	lsls	r2, r3, #6
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	041b      	lsls	r3, r3, #16
 8006736:	431a      	orrs	r2, r3
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	061b      	lsls	r3, r3, #24
 800673c:	431a      	orrs	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	071b      	lsls	r3, r3, #28
 8006742:	4926      	ldr	r1, [pc, #152]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d011      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	019a      	lsls	r2, r3, #6
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	061b      	lsls	r3, r3, #24
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	071b      	lsls	r3, r3, #28
 8006772:	491a      	ldr	r1, [pc, #104]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800677a:	4b18      	ldr	r3, [pc, #96]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a17      	ldr	r2, [pc, #92]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006786:	f7fb fb3d 	bl	8001e04 <HAL_GetTick>
 800678a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800678c:	e008      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800678e:	f7fb fb39 	bl	8001e04 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b64      	cmp	r3, #100	; 0x64
 800679a:	d901      	bls.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e0d8      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067a0:	4b0e      	ldr	r3, [pc, #56]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f0      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	f040 80ce 	bne.w	8006950 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067b4:	4b09      	ldr	r3, [pc, #36]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a08      	ldr	r2, [pc, #32]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c0:	f7fb fb20 	bl	8001e04 <HAL_GetTick>
 80067c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067c6:	e00b      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067c8:	f7fb fb1c 	bl	8001e04 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b64      	cmp	r3, #100	; 0x64
 80067d4:	d904      	bls.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e0bb      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80067da:	bf00      	nop
 80067dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067e0:	4b5e      	ldr	r3, [pc, #376]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ec:	d0ec      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800680a:	2b00      	cmp	r3, #0
 800680c:	d02e      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d12a      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006816:	4b51      	ldr	r3, [pc, #324]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681c:	0c1b      	lsrs	r3, r3, #16
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006824:	4b4d      	ldr	r3, [pc, #308]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682a:	0f1b      	lsrs	r3, r3, #28
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	019a      	lsls	r2, r3, #6
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	041b      	lsls	r3, r3, #16
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	061b      	lsls	r3, r3, #24
 8006844:	431a      	orrs	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	071b      	lsls	r3, r3, #28
 800684a:	4944      	ldr	r1, [pc, #272]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006852:	4b42      	ldr	r3, [pc, #264]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006858:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	3b01      	subs	r3, #1
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	493d      	ldr	r1, [pc, #244]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d022      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800687c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006880:	d11d      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006882:	4b36      	ldr	r3, [pc, #216]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006888:	0e1b      	lsrs	r3, r3, #24
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006890:	4b32      	ldr	r3, [pc, #200]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006896:	0f1b      	lsrs	r3, r3, #28
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	019a      	lsls	r2, r3, #6
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	041b      	lsls	r3, r3, #16
 80068aa:	431a      	orrs	r2, r3
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	061b      	lsls	r3, r3, #24
 80068b0:	431a      	orrs	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	071b      	lsls	r3, r3, #28
 80068b6:	4929      	ldr	r1, [pc, #164]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d028      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068ca:	4b24      	ldr	r3, [pc, #144]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	0e1b      	lsrs	r3, r3, #24
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068d8:	4b20      	ldr	r3, [pc, #128]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068de:	0c1b      	lsrs	r3, r3, #16
 80068e0:	f003 0303 	and.w	r3, r3, #3
 80068e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	019a      	lsls	r2, r3, #6
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	431a      	orrs	r2, r3
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	061b      	lsls	r3, r3, #24
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	071b      	lsls	r3, r3, #28
 80068fe:	4917      	ldr	r1, [pc, #92]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006900:	4313      	orrs	r3, r2
 8006902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006906:	4b15      	ldr	r3, [pc, #84]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800690c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	4911      	ldr	r1, [pc, #68]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800691c:	4b0f      	ldr	r3, [pc, #60]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a0e      	ldr	r2, [pc, #56]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006928:	f7fb fa6c 	bl	8001e04 <HAL_GetTick>
 800692c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800692e:	e008      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006930:	f7fb fa68 	bl	8001e04 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b64      	cmp	r3, #100	; 0x64
 800693c:	d901      	bls.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e007      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800694a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694e:	d1ef      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40023800 	.word	0x40023800

08006960 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e022      	b.n	80069b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d105      	bne.n	800698a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fa fe1f 	bl	80015c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2203      	movs	r2, #3
 800698e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f814 	bl	80069c0 <HAL_SD_InitCard>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e00a      	b.n	80069b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80069c0:	b5b0      	push	{r4, r5, r7, lr}
 80069c2:	b08e      	sub	sp, #56	; 0x38
 80069c4:	af04      	add	r7, sp, #16
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80069d8:	2300      	movs	r3, #0
 80069da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80069dc:	2376      	movs	r3, #118	; 0x76
 80069de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681d      	ldr	r5, [r3, #0]
 80069e4:	466c      	mov	r4, sp
 80069e6:	f107 0314 	add.w	r3, r7, #20
 80069ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80069ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80069f2:	f107 0308 	add.w	r3, r7, #8
 80069f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069f8:	4628      	mov	r0, r5
 80069fa:	f002 f8c3 	bl	8008b84 <SDMMC_Init>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e059      	b.n	8006ac4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a1e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f002 f8f7 	bl	8008c18 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a38:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006a3a:	2002      	movs	r0, #2
 8006a3c:	f7fb f9ee 	bl	8001e1c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 f8ef 	bl	8007c24 <SD_PowerON>
 8006a46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e02e      	b.n	8006ac4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 f80e 	bl	8007a88 <SD_InitCard>
 8006a6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e01b      	b.n	8006ac4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 f951 	bl	8008d3c <SDMMC_CmdBlockLength>
 8006a9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00f      	beq.n	8006ac2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a09      	ldr	r2, [pc, #36]	; (8006acc <HAL_SD_InitCard+0x10c>)
 8006aa8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3728      	adds	r7, #40	; 0x28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bdb0      	pop	{r4, r5, r7, pc}
 8006acc:	004005ff 	.word	0x004005ff

08006ad0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b092      	sub	sp, #72	; 0x48
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006ade:	f7fb f991 	bl	8001e04 <HAL_GetTick>
 8006ae2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d107      	bne.n	8006b02 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e1bd      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	f040 81b0 	bne.w	8006e70 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	441a      	add	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d907      	bls.n	8006b34 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e1a4      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2203      	movs	r2, #3
 8006b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d002      	beq.n	8006b52 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	025b      	lsls	r3, r3, #9
 8006b50:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b56:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	025b      	lsls	r3, r3, #9
 8006b5c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b5e:	2390      	movs	r3, #144	; 0x90
 8006b60:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b62:	2302      	movs	r3, #2
 8006b64:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f107 0214 	add.w	r2, r7, #20
 8006b76:	4611      	mov	r1, r2
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f002 f8b3 	bl	8008ce4 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d90a      	bls.n	8006b9a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2202      	movs	r2, #2
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b90:	4618      	mov	r0, r3
 8006b92:	f002 f917 	bl	8008dc4 <SDMMC_CmdReadMultiBlock>
 8006b96:	6478      	str	r0, [r7, #68]	; 0x44
 8006b98:	e009      	b.n	8006bae <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f002 f8ea 	bl	8008d80 <SDMMC_CmdReadSingleBlock>
 8006bac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d012      	beq.n	8006bda <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a7a      	ldr	r2, [pc, #488]	; (8006da4 <HAL_SD_ReadBlocks+0x2d4>)
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e151      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006bde:	e061      	b.n	8006ca4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d03c      	beq.n	8006c68 <HAL_SD_ReadBlocks+0x198>
 8006bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d039      	beq.n	8006c68 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf8:	e033      	b.n	8006c62 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f001 ffec 	bl	8008bdc <SDMMC_ReadFIFO>
 8006c04:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	3301      	adds	r3, #1
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c16:	3b01      	subs	r3, #1
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c22:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	3301      	adds	r3, #1
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	0c1b      	lsrs	r3, r3, #16
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c42:	3b01      	subs	r3, #1
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	0e1b      	lsrs	r3, r3, #24
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	3301      	adds	r3, #1
 8006c54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c5e:	3301      	adds	r3, #1
 8006c60:	643b      	str	r3, [r7, #64]	; 0x40
 8006c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c64:	2b07      	cmp	r3, #7
 8006c66:	d9c8      	bls.n	8006bfa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c68:	f7fb f8cc 	bl	8001e04 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d902      	bls.n	8006c7e <HAL_SD_ReadBlocks+0x1ae>
 8006c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d112      	bne.n	8006ca4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a48      	ldr	r2, [pc, #288]	; (8006da4 <HAL_SD_ReadBlocks+0x2d4>)
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e0ec      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006caa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d096      	beq.n	8006be0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d022      	beq.n	8006d06 <HAL_SD_ReadBlocks+0x236>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d91f      	bls.n	8006d06 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d01b      	beq.n	8006d06 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f002 f8dc 	bl	8008e90 <SDMMC_CmdStopTransfer>
 8006cd8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d012      	beq.n	8006d06 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a2f      	ldr	r2, [pc, #188]	; (8006da4 <HAL_SD_ReadBlocks+0x2d4>)
 8006ce6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e0bb      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d012      	beq.n	8006d3a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <HAL_SD_ReadBlocks+0x2d4>)
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	f043 0208 	orr.w	r2, r3, #8
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e0a1      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d012      	beq.n	8006d6e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a15      	ldr	r2, [pc, #84]	; (8006da4 <HAL_SD_ReadBlocks+0x2d4>)
 8006d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	f043 0202 	orr.w	r2, r3, #2
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e087      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d064      	beq.n	8006e46 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a08      	ldr	r2, [pc, #32]	; (8006da4 <HAL_SD_ReadBlocks+0x2d4>)
 8006d82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	f043 0220 	orr.w	r2, r3, #32
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e06d      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
 8006da2:	bf00      	nop
 8006da4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 ff15 	bl	8008bdc <SDMMC_ReadFIFO>
 8006db2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	3301      	adds	r3, #1
 8006dec:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df0:	3b01      	subs	r3, #1
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	0e1b      	lsrs	r3, r3, #24
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	3301      	adds	r3, #1
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e06:	3b01      	subs	r3, #1
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e0a:	f7fa fffb 	bl	8001e04 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d902      	bls.n	8006e20 <HAL_SD_ReadBlocks+0x350>
 8006e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d112      	bne.n	8006e46 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a18      	ldr	r2, [pc, #96]	; (8006e88 <HAL_SD_ReadBlocks+0x3b8>)
 8006e26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e01b      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_SD_ReadBlocks+0x38a>
 8006e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1a6      	bne.n	8006da8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e006      	b.n	8006e7e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
  }
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3748      	adds	r7, #72	; 0x48
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	004005ff 	.word	0x004005ff

08006e8c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b092      	sub	sp, #72	; 0x48
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e9a:	f7fa ffb3 	bl	8001e04 <HAL_GetTick>
 8006e9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d107      	bne.n	8006ebe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e165      	b.n	800718a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	f040 8158 	bne.w	800717c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	441a      	add	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d907      	bls.n	8006ef0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e14c      	b.n	800718a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2203      	movs	r2, #3
 8006ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2200      	movs	r2, #0
 8006efe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d002      	beq.n	8006f0e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	025b      	lsls	r3, r3, #9
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f12:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	025b      	lsls	r3, r3, #9
 8006f18:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f1a:	2390      	movs	r3, #144	; 0x90
 8006f1c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006f26:	2301      	movs	r3, #1
 8006f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f107 0218 	add.w	r2, r7, #24
 8006f32:	4611      	mov	r1, r2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 fed5 	bl	8008ce4 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d90a      	bls.n	8006f56 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 ff7d 	bl	8008e4c <SDMMC_CmdWriteMultiBlock>
 8006f52:	6478      	str	r0, [r7, #68]	; 0x44
 8006f54:	e009      	b.n	8006f6a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2210      	movs	r2, #16
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 ff50 	bl	8008e08 <SDMMC_CmdWriteSingleBlock>
 8006f68:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d012      	beq.n	8006f96 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a87      	ldr	r2, [pc, #540]	; (8007194 <HAL_SD_WriteBlocks+0x308>)
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e0f9      	b.n	800718a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006f9a:	e065      	b.n	8007068 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d040      	beq.n	800702c <HAL_SD_WriteBlocks+0x1a0>
 8006faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d03d      	beq.n	800702c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb4:	e037      	b.n	8007026 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	021a      	lsls	r2, r3, #8
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	041a      	lsls	r2, r3, #16
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	3301      	adds	r3, #1
 8006ff0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	061a      	lsls	r2, r3, #24
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007006:	3301      	adds	r3, #1
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800700a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700c:	3b01      	subs	r3, #1
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f107 0214 	add.w	r2, r7, #20
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f001 fdeb 	bl	8008bf6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007022:	3301      	adds	r3, #1
 8007024:	643b      	str	r3, [r7, #64]	; 0x40
 8007026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007028:	2b07      	cmp	r3, #7
 800702a:	d9c4      	bls.n	8006fb6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800702c:	f7fa feea 	bl	8001e04 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007038:	429a      	cmp	r2, r3
 800703a:	d902      	bls.n	8007042 <HAL_SD_WriteBlocks+0x1b6>
 800703c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800703e:	2b00      	cmp	r3, #0
 8007040:	d112      	bne.n	8007068 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a53      	ldr	r2, [pc, #332]	; (8007194 <HAL_SD_WriteBlocks+0x308>)
 8007048:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800704e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007050:	431a      	orrs	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e090      	b.n	800718a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007072:	2b00      	cmp	r3, #0
 8007074:	d092      	beq.n	8006f9c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007080:	2b00      	cmp	r3, #0
 8007082:	d022      	beq.n	80070ca <HAL_SD_WriteBlocks+0x23e>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d91f      	bls.n	80070ca <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708e:	2b03      	cmp	r3, #3
 8007090:	d01b      	beq.n	80070ca <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f001 fefa 	bl	8008e90 <SDMMC_CmdStopTransfer>
 800709c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800709e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d012      	beq.n	80070ca <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a3a      	ldr	r2, [pc, #232]	; (8007194 <HAL_SD_WriteBlocks+0x308>)
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b2:	431a      	orrs	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e05f      	b.n	800718a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d012      	beq.n	80070fe <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <HAL_SD_WriteBlocks+0x308>)
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	f043 0208 	orr.w	r2, r3, #8
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e045      	b.n	800718a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d012      	beq.n	8007132 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a20      	ldr	r2, [pc, #128]	; (8007194 <HAL_SD_WriteBlocks+0x308>)
 8007112:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	f043 0202 	orr.w	r2, r3, #2
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e02b      	b.n	800718a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b00      	cmp	r3, #0
 800713e:	d012      	beq.n	8007166 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a13      	ldr	r2, [pc, #76]	; (8007194 <HAL_SD_WriteBlocks+0x308>)
 8007146:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	f043 0210 	orr.w	r2, r3, #16
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e011      	b.n	800718a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f240 523a 	movw	r2, #1338	; 0x53a
 800716e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	e006      	b.n	800718a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
  }
}
 800718a:	4618      	mov	r0, r3
 800718c:	3748      	adds	r7, #72	; 0x48
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	004005ff 	.word	0x004005ff

08007198 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_SD_IRQHandler+0x2e>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 ff4f 	bl	8008062 <SD_Read_IT>
 80071c4:	e15a      	b.n	800747c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 808d 	beq.w	80072f0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071de:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4b9a      	ldr	r3, [pc, #616]	; (8007454 <HAL_SD_IRQHandler+0x2bc>)
 80071ec:	400b      	ands	r3, r1
 80071ee:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d039      	beq.n	800727e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <HAL_SD_IRQHandler+0x86>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d011      	beq.n	8007242 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f001 fe34 	bl	8008e90 <SDMMC_CmdStopTransfer>
 8007228:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f921 	bl	8007484 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f240 523a 	movw	r2, #1338	; 0x53a
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <HAL_SD_IRQHandler+0xd6>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f003 fefa 	bl	800b068 <HAL_SD_RxCpltCallback>
 8007274:	e102      	b.n	800747c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f003 feec 	bl	800b054 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800727c:	e0fe      	b.n	800747c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 80f9 	beq.w	800747c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d011      	beq.n	80072b8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f001 fdf9 	bl	8008e90 <SDMMC_CmdStopTransfer>
 800729e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d008      	beq.n	80072b8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f8e6 	bl	8007484 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f040 80dc 	bne.w	800747c <HAL_SD_IRQHandler+0x2e4>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f040 80d6 	bne.w	800747c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0208 	bic.w	r2, r2, #8
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f003 feb3 	bl	800b054 <HAL_SD_TxCpltCallback>
}
 80072ee:	e0c5      	b.n	800747c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d008      	beq.n	8007310 <HAL_SD_IRQHandler+0x178>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fefb 	bl	8008104 <SD_Write_IT>
 800730e:	e0b5      	b.n	800747c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 80ae 	beq.w	800747c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	f043 0202 	orr.w	r2, r3, #2
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007340:	f003 0308 	and.w	r3, r3, #8
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	f043 0208 	orr.w	r2, r3, #8
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	f003 0310 	and.w	r3, r3, #16
 8007378:	2b00      	cmp	r3, #0
 800737a:	d005      	beq.n	8007388 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	f043 0210 	orr.w	r2, r3, #16
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007390:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80073a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 fd72 	bl	8008e90 <SDMMC_CmdStopTransfer>
 80073ac:	4602      	mov	r2, r0
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f857 	bl	8007484 <HAL_SD_ErrorCallback>
}
 80073d6:	e051      	b.n	800747c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d04c      	beq.n	800747c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <HAL_SD_IRQHandler+0x25e>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d011      	beq.n	800741a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	4a17      	ldr	r2, [pc, #92]	; (8007458 <HAL_SD_IRQHandler+0x2c0>)
 80073fc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007402:	4618      	mov	r0, r3
 8007404:	f7fb fd1a 	bl	8002e3c <HAL_DMA_Abort_IT>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d036      	beq.n	800747c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	4618      	mov	r0, r3
 8007414:	f000 faca 	bl	80079ac <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007418:	e030      	b.n	800747c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <HAL_SD_IRQHandler+0x296>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d018      	beq.n	8007460 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	4a0a      	ldr	r2, [pc, #40]	; (800745c <HAL_SD_IRQHandler+0x2c4>)
 8007434:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	4618      	mov	r0, r3
 800743c:	f7fb fcfe 	bl	8002e3c <HAL_DMA_Abort_IT>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01a      	beq.n	800747c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fae5 	bl	8007a1a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007450:	e014      	b.n	800747c <HAL_SD_IRQHandler+0x2e4>
 8007452:	bf00      	nop
 8007454:	ffff3ec5 	.word	0xffff3ec5
 8007458:	080079ad 	.word	0x080079ad
 800745c:	08007a1b 	.word	0x08007a1b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f003 fde3 	bl	800b040 <HAL_SD_AbortCallback>
}
 800747a:	e7ff      	b.n	800747c <HAL_SD_IRQHandler+0x2e4>
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a6:	0f9b      	lsrs	r3, r3, #30
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b2:	0e9b      	lsrs	r3, r3, #26
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c4:	0e1b      	lsrs	r3, r3, #24
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	f003 0303 	and.w	r3, r3, #3
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074e2:	0a1b      	lsrs	r3, r3, #8
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f8:	0d1b      	lsrs	r3, r3, #20
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007504:	0c1b      	lsrs	r3, r3, #16
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	b2da      	uxtb	r2, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007516:	0bdb      	lsrs	r3, r3, #15
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	b2da      	uxtb	r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007528:	0b9b      	lsrs	r3, r3, #14
 800752a:	b2db      	uxtb	r3, r3
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	b2da      	uxtb	r2, r3
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800753a:	0b5b      	lsrs	r3, r3, #13
 800753c:	b2db      	uxtb	r3, r3
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	b2da      	uxtb	r2, r3
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800754c:	0b1b      	lsrs	r3, r3, #12
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2200      	movs	r2, #0
 800755e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007564:	2b00      	cmp	r3, #0
 8007566:	d163      	bne.n	8007630 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756c:	009a      	lsls	r2, r3, #2
 800756e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007572:	4013      	ands	r3, r2
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007578:	0f92      	lsrs	r2, r2, #30
 800757a:	431a      	orrs	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007584:	0edb      	lsrs	r3, r3, #27
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	b2da      	uxtb	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007596:	0e1b      	lsrs	r3, r3, #24
 8007598:	b2db      	uxtb	r3, r3
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a8:	0d5b      	lsrs	r3, r3, #21
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ba:	0c9b      	lsrs	r3, r3, #18
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075cc:	0bdb      	lsrs	r3, r3, #15
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	7e1b      	ldrb	r3, [r3, #24]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	3302      	adds	r3, #2
 80075f0:	2201      	movs	r2, #1
 80075f2:	fa02 f303 	lsl.w	r3, r2, r3
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80075fa:	fb03 f202 	mul.w	r2, r3, r2
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	7a1b      	ldrb	r3, [r3, #8]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	2201      	movs	r2, #1
 800760e:	409a      	lsls	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800761c:	0a52      	lsrs	r2, r2, #9
 800761e:	fb03 f202 	mul.w	r2, r3, r2
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800762c:	661a      	str	r2, [r3, #96]	; 0x60
 800762e:	e031      	b.n	8007694 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007634:	2b01      	cmp	r3, #1
 8007636:	d11d      	bne.n	8007674 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800763c:	041b      	lsls	r3, r3, #16
 800763e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007646:	0c1b      	lsrs	r3, r3, #16
 8007648:	431a      	orrs	r2, r3
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	3301      	adds	r3, #1
 8007654:	029a      	lsls	r2, r3, #10
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007668:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	661a      	str	r2, [r3, #96]	; 0x60
 8007672:	e00f      	b.n	8007694 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a58      	ldr	r2, [pc, #352]	; (80077dc <HAL_SD_GetCardCSD+0x344>)
 800767a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e09d      	b.n	80077d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007698:	0b9b      	lsrs	r3, r3, #14
 800769a:	b2db      	uxtb	r3, r3
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076aa:	09db      	lsrs	r3, r3, #7
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076cc:	0fdb      	lsrs	r3, r3, #31
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d8:	0f5b      	lsrs	r3, r3, #29
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 0303 	and.w	r3, r3, #3
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ea:	0e9b      	lsrs	r3, r3, #26
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076fc:	0d9b      	lsrs	r3, r3, #22
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	b2da      	uxtb	r2, r3
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770e:	0d5b      	lsrs	r3, r3, #21
 8007710:	b2db      	uxtb	r3, r3
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	b2da      	uxtb	r2, r3
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772a:	0c1b      	lsrs	r3, r3, #16
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	b2da      	uxtb	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773e:	0bdb      	lsrs	r3, r3, #15
 8007740:	b2db      	uxtb	r3, r3
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	b2da      	uxtb	r2, r3
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007752:	0b9b      	lsrs	r3, r3, #14
 8007754:	b2db      	uxtb	r3, r3
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007766:	0b5b      	lsrs	r3, r3, #13
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	b2da      	uxtb	r2, r3
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777a:	0b1b      	lsrs	r3, r3, #12
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778e:	0a9b      	lsrs	r3, r3, #10
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	b2da      	uxtb	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a2:	0a1b      	lsrs	r3, r3, #8
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	004005ff 	.word	0x004005ff

080077e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007838:	b5b0      	push	{r4, r5, r7, lr}
 800783a:	b08e      	sub	sp, #56	; 0x38
 800783c:	af04      	add	r7, sp, #16
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2203      	movs	r2, #3
 800784c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007854:	2b03      	cmp	r3, #3
 8007856:	d02e      	beq.n	80078b6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785e:	d106      	bne.n	800786e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	639a      	str	r2, [r3, #56]	; 0x38
 800786c:	e029      	b.n	80078c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007874:	d10a      	bne.n	800788c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa8a 	bl	8007d90 <SD_WideBus_Enable>
 800787c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	639a      	str	r2, [r3, #56]	; 0x38
 800788a:	e01a      	b.n	80078c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fac7 	bl	8007e26 <SD_WideBus_Disable>
 8007898:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38
 80078a6:	e00c      	b.n	80078c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38
 80078b4:	e005      	b.n	80078c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a26      	ldr	r2, [pc, #152]	; (8007968 <HAL_SD_ConfigWideBusOperation+0x130>)
 80078d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078e0:	e01f      	b.n	8007922 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681d      	ldr	r5, [r3, #0]
 8007908:	466c      	mov	r4, sp
 800790a:	f107 0314 	add.w	r3, r7, #20
 800790e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007916:	f107 0308 	add.w	r3, r7, #8
 800791a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800791c:	4628      	mov	r0, r5
 800791e:	f001 f931 	bl	8008b84 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fa06 	bl	8008d3c <SDMMC_CmdBlockLength>
 8007930:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00c      	beq.n	8007952 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a0a      	ldr	r2, [pc, #40]	; (8007968 <HAL_SD_ConfigWideBusOperation+0x130>)
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800795a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800795e:	4618      	mov	r0, r3
 8007960:	3728      	adds	r7, #40	; 0x28
 8007962:	46bd      	mov	sp, r7
 8007964:	bdb0      	pop	{r4, r5, r7, pc}
 8007966:	bf00      	nop
 8007968:	004005ff 	.word	0x004005ff

0800796c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007978:	f107 030c 	add.w	r3, r7, #12
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f9de 	bl	8007d40 <SD_SendStatus>
 8007984:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	0a5b      	lsrs	r3, r3, #9
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80079a2:	693b      	ldr	r3, [r7, #16]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f240 523a 	movw	r2, #1338	; 0x53a
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7ff ffd1 	bl	800796c <HAL_SD_GetCardState>
 80079ca:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b06      	cmp	r3, #6
 80079de:	d002      	beq.n	80079e6 <SD_DMATxAbort+0x3a>
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	d10a      	bne.n	80079fc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 fa50 	bl	8008e90 <SDMMC_CmdStopTransfer>
 80079f0:	4602      	mov	r2, r0
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	431a      	orrs	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f003 fb1b 	bl	800b040 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007a0a:	e002      	b.n	8007a12 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff fd39 	bl	8007484 <HAL_SD_ErrorCallback>
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff ff9a 	bl	800796c <HAL_SD_GetCardState>
 8007a38:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b06      	cmp	r3, #6
 8007a4c:	d002      	beq.n	8007a54 <SD_DMARxAbort+0x3a>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b05      	cmp	r3, #5
 8007a52:	d10a      	bne.n	8007a6a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f001 fa19 	bl	8008e90 <SDMMC_CmdStopTransfer>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	431a      	orrs	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d103      	bne.n	8007a7a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f003 fae4 	bl	800b040 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007a78:	e002      	b.n	8007a80 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7ff fd02 	bl	8007484 <HAL_SD_ErrorCallback>
}
 8007a80:	bf00      	nop
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a88:	b5b0      	push	{r4, r5, r7, lr}
 8007a8a:	b094      	sub	sp, #80	; 0x50
 8007a8c:	af04      	add	r7, sp, #16
 8007a8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007a90:	2301      	movs	r3, #1
 8007a92:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f001 f8cb 	bl	8008c34 <SDMMC_GetPowerState>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007aa4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007aa8:	e0b8      	b.n	8007c1c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d02f      	beq.n	8007b12 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 faf5 	bl	80090a6 <SDMMC_CmdSendCID>
 8007abc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <SD_InitCard+0x40>
    {
      return errorstate;
 8007ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac6:	e0a9      	b.n	8007c1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f001 f8f5 	bl	8008cbe <SDMMC_GetResponse>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2104      	movs	r1, #4
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 f8ec 	bl	8008cbe <SDMMC_GetResponse>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2108      	movs	r1, #8
 8007af2:	4618      	mov	r0, r3
 8007af4:	f001 f8e3 	bl	8008cbe <SDMMC_GetResponse>
 8007af8:	4602      	mov	r2, r0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	210c      	movs	r1, #12
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 f8da 	bl	8008cbe <SDMMC_GetResponse>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d00d      	beq.n	8007b36 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f107 020e 	add.w	r2, r7, #14
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f001 fafb 	bl	8009120 <SDMMC_CmdSetRelAdd>
 8007b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <SD_InitCard+0xae>
    {
      return errorstate;
 8007b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b34:	e072      	b.n	8007c1c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d036      	beq.n	8007bac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b3e:	89fb      	ldrh	r3, [r7, #14]
 8007b40:	461a      	mov	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f001 fac5 	bl	80090e2 <SDMMC_CmdSendCSD>
 8007b58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b62:	e05b      	b.n	8007c1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2100      	movs	r1, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 f8a7 	bl	8008cbe <SDMMC_GetResponse>
 8007b70:	4602      	mov	r2, r0
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2104      	movs	r1, #4
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 f89e 	bl	8008cbe <SDMMC_GetResponse>
 8007b82:	4602      	mov	r2, r0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2108      	movs	r1, #8
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 f895 	bl	8008cbe <SDMMC_GetResponse>
 8007b94:	4602      	mov	r2, r0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	210c      	movs	r1, #12
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 f88c 	bl	8008cbe <SDMMC_GetResponse>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2104      	movs	r1, #4
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 f883 	bl	8008cbe <SDMMC_GetResponse>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	0d1a      	lsrs	r2, r3, #20
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007bc0:	f107 0310 	add.w	r3, r7, #16
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff fc66 	bl	8007498 <HAL_SD_GetCardCSD>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bd6:	e021      	b.n	8007c1c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6819      	ldr	r1, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be0:	041b      	lsls	r3, r3, #16
 8007be2:	2200      	movs	r2, #0
 8007be4:	461c      	mov	r4, r3
 8007be6:	4615      	mov	r5, r2
 8007be8:	4622      	mov	r2, r4
 8007bea:	462b      	mov	r3, r5
 8007bec:	4608      	mov	r0, r1
 8007bee:	f001 f971 	bl	8008ed4 <SDMMC_CmdSelDesel>
 8007bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <SD_InitCard+0x176>
  {
    return errorstate;
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfc:	e00e      	b.n	8007c1c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681d      	ldr	r5, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	466c      	mov	r4, sp
 8007c06:	f103 0210 	add.w	r2, r3, #16
 8007c0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c10:	3304      	adds	r3, #4
 8007c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c14:	4628      	mov	r0, r5
 8007c16:	f000 ffb5 	bl	8008b84 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3740      	adds	r7, #64	; 0x40
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bdb0      	pop	{r4, r5, r7, pc}

08007c24 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	2300      	movs	r3, #0
 8007c36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 f96c 	bl	8008f1a <SDMMC_CmdGoIdleState>
 8007c42:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <SD_PowerON+0x2a>
  {
    return errorstate;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	e072      	b.n	8007d34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 f97f 	bl	8008f56 <SDMMC_CmdOperCond>
 8007c58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00d      	beq.n	8007c7c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 f955 	bl	8008f1a <SDMMC_CmdGoIdleState>
 8007c70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d004      	beq.n	8007c82 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	e05b      	b.n	8007d34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d137      	bne.n	8007cfa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2100      	movs	r1, #0
 8007c90:	4618      	mov	r0, r3
 8007c92:	f001 f97f 	bl	8008f94 <SDMMC_CmdAppCommand>
 8007c96:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d02d      	beq.n	8007cfa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ca2:	e047      	b.n	8007d34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 f972 	bl	8008f94 <SDMMC_CmdAppCommand>
 8007cb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <SD_PowerON+0x98>
    {
      return errorstate;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	e03b      	b.n	8007d34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	491e      	ldr	r1, [pc, #120]	; (8007d3c <SD_PowerON+0x118>)
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 f988 	bl	8008fd8 <SDMMC_CmdAppOperCommand>
 8007cc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cd4:	e02e      	b.n	8007d34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 ffee 	bl	8008cbe <SDMMC_GetResponse>
 8007ce2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	0fdb      	lsrs	r3, r3, #31
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <SD_PowerON+0xcc>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <SD_PowerON+0xce>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	613b      	str	r3, [r7, #16]

    count++;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d802      	bhi.n	8007d0a <SD_PowerON+0xe6>
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0cc      	beq.n	8007ca4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d902      	bls.n	8007d1a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d18:	e00c      	b.n	8007d34 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	645a      	str	r2, [r3, #68]	; 0x44
 8007d2a:	e002      	b.n	8007d32 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	c1100000 	.word	0xc1100000

08007d40 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d54:	e018      	b.n	8007d88 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5e:	041b      	lsls	r3, r3, #16
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f001 f9fd 	bl	8009162 <SDMMC_CmdSendStatus>
 8007d68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	e009      	b.n	8007d88 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 ff9f 	bl	8008cbe <SDMMC_GetResponse>
 8007d80:	4602      	mov	r2, r0
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2100      	movs	r1, #0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 ff89 	bl	8008cbe <SDMMC_GetResponse>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007db6:	d102      	bne.n	8007dbe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dbc:	e02f      	b.n	8007e1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007dbe:	f107 030c 	add.w	r3, r7, #12
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f879 	bl	8007ebc <SD_FindSCR>
 8007dca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	e023      	b.n	8007e1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d01c      	beq.n	8007e1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f001 f8d1 	bl	8008f94 <SDMMC_CmdAppCommand>
 8007df2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	e00f      	b.n	8007e1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2102      	movs	r1, #2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 f90b 	bl	8009020 <SDMMC_CmdBusWidth>
 8007e0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	e003      	b.n	8007e1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	e001      	b.n	8007e1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b086      	sub	sp, #24
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	2300      	movs	r3, #0
 8007e34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 ff3e 	bl	8008cbe <SDMMC_GetResponse>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e4c:	d102      	bne.n	8007e54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e52:	e02f      	b.n	8007eb4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e54:	f107 030c 	add.w	r3, r7, #12
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f82e 	bl	8007ebc <SD_FindSCR>
 8007e60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	e023      	b.n	8007eb4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d01c      	beq.n	8007eb0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e7e:	041b      	lsls	r3, r3, #16
 8007e80:	4619      	mov	r1, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	f001 f886 	bl	8008f94 <SDMMC_CmdAppCommand>
 8007e88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	e00f      	b.n	8007eb4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 f8c0 	bl	8009020 <SDMMC_CmdBusWidth>
 8007ea0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	e003      	b.n	8007eb4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007eac:	2300      	movs	r3, #0
 8007eae:	e001      	b.n	8007eb4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007eb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b08f      	sub	sp, #60	; 0x3c
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ec6:	f7f9 ff9d 	bl	8001e04 <HAL_GetTick>
 8007eca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60bb      	str	r3, [r7, #8]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2108      	movs	r1, #8
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 ff2a 	bl	8008d3c <SDMMC_CmdBlockLength>
 8007ee8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	e0b2      	b.n	800805a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	4619      	mov	r1, r3
 8007f00:	4610      	mov	r0, r2
 8007f02:	f001 f847 	bl	8008f94 <SDMMC_CmdAppCommand>
 8007f06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	e0a3      	b.n	800805a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007f18:	2308      	movs	r3, #8
 8007f1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007f1c:	2330      	movs	r3, #48	; 0x30
 8007f1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f20:	2302      	movs	r3, #2
 8007f22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f107 0210 	add.w	r2, r7, #16
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fed4 	bl	8008ce4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 f88f 	bl	8009064 <SDMMC_CmdSendSCR>
 8007f46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d02a      	beq.n	8007fa4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	e083      	b.n	800805a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00f      	beq.n	8007f80 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	f107 0208 	add.w	r2, r7, #8
 8007f6c:	18d4      	adds	r4, r2, r3
 8007f6e:	4608      	mov	r0, r1
 8007f70:	f000 fe34 	bl	8008bdc <SDMMC_ReadFIFO>
 8007f74:	4603      	mov	r3, r0
 8007f76:	6023      	str	r3, [r4, #0]
      index++;
 8007f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f7e:	e006      	b.n	8007f8e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d012      	beq.n	8007fb4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f8e:	f7f9 ff39 	bl	8001e04 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f9c:	d102      	bne.n	8007fa4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fa2:	e05a      	b.n	800805a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007faa:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0cf      	beq.n	8007f52 <SD_FindSCR+0x96>
 8007fb2:	e000      	b.n	8007fb6 <SD_FindSCR+0xfa>
      break;
 8007fb4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2208      	movs	r2, #8
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007fcc:	2308      	movs	r3, #8
 8007fce:	e044      	b.n	800805a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e037      	b.n	800805a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff0:	f003 0320 	and.w	r3, r3, #32
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d005      	beq.n	8008004 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008000:	2320      	movs	r3, #32
 8008002:	e02a      	b.n	800805a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f240 523a 	movw	r2, #1338	; 0x53a
 800800c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	061a      	lsls	r2, r3, #24
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800801a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	0a1b      	lsrs	r3, r3, #8
 8008020:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008024:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	0e1b      	lsrs	r3, r3, #24
 800802a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	601a      	str	r2, [r3, #0]
    scr++;
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	3304      	adds	r3, #4
 8008034:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	061a      	lsls	r2, r3, #24
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008042:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800804c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	0e1b      	lsrs	r3, r3, #24
 8008052:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	373c      	adds	r7, #60	; 0x3c
 800805e:	46bd      	mov	sp, r7
 8008060:	bd90      	pop	{r4, r7, pc}

08008062 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b086      	sub	sp, #24
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d03f      	beq.n	80080fc <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800807c:	2300      	movs	r3, #0
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	e033      	b.n	80080ea <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fda8 	bl	8008bdc <SDMMC_ReadFIFO>
 800808c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	b2da      	uxtb	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3301      	adds	r3, #1
 800809a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	3b01      	subs	r3, #1
 80080a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	0a1b      	lsrs	r3, r3, #8
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	0c1b      	lsrs	r3, r3, #16
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3301      	adds	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	0e1b      	lsrs	r3, r3, #24
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3301      	adds	r3, #1
 80080dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	3301      	adds	r3, #1
 80080e8:	617b      	str	r3, [r7, #20]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b07      	cmp	r3, #7
 80080ee:	d9c8      	bls.n	8008082 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80080fc:	bf00      	nop
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d043      	beq.n	80081a6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	e037      	b.n	8008194 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	60bb      	str	r3, [r7, #8]
      tmp++;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3301      	adds	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	3b01      	subs	r3, #1
 8008134:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	021a      	lsls	r2, r3, #8
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4313      	orrs	r3, r2
 8008140:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	3b01      	subs	r3, #1
 800814c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	041a      	lsls	r2, r3, #16
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4313      	orrs	r3, r2
 8008158:	60bb      	str	r3, [r7, #8]
      tmp++;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	3b01      	subs	r3, #1
 8008164:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	061a      	lsls	r2, r3, #24
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3301      	adds	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	3b01      	subs	r3, #1
 800817c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f107 0208 	add.w	r2, r7, #8
 8008186:	4611      	mov	r1, r2
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fd34 	bl	8008bf6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	3301      	adds	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b07      	cmp	r3, #7
 8008198:	d9c4      	bls.n	8008124 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80081a6:	bf00      	nop
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e040      	b.n	8008242 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d106      	bne.n	80081d6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7f9 fb05 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2224      	movs	r2, #36	; 0x24
 80081da:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 0201 	bic.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f8af 	bl	8008350 <UART_SetConfig>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e022      	b.n	8008242 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fb07 	bl	8008818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008218:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008228:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0201 	orr.w	r2, r2, #1
 8008238:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fb8e 	bl	800895c <UART_CheckIdleState>
 8008240:	4603      	mov	r3, r0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b08a      	sub	sp, #40	; 0x28
 800824e:	af02      	add	r7, sp, #8
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800825e:	2b20      	cmp	r3, #32
 8008260:	d171      	bne.n	8008346 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <HAL_UART_Transmit+0x24>
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e06a      	b.n	8008348 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2221      	movs	r2, #33	; 0x21
 800827e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008280:	f7f9 fdc0 	bl	8001e04 <HAL_GetTick>
 8008284:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	88fa      	ldrh	r2, [r7, #6]
 800828a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829e:	d108      	bne.n	80082b2 <HAL_UART_Transmit+0x68>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	61bb      	str	r3, [r7, #24]
 80082b0:	e003      	b.n	80082ba <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082ba:	e02c      	b.n	8008316 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2200      	movs	r2, #0
 80082c4:	2180      	movs	r1, #128	; 0x80
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fb95 	bl	80089f6 <UART_WaitOnFlagUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e038      	b.n	8008348 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10b      	bne.n	80082f4 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	3302      	adds	r3, #2
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	e007      	b.n	8008304 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	781a      	ldrb	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	3301      	adds	r3, #1
 8008302:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800830a:	b29b      	uxth	r3, r3
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800831c:	b29b      	uxth	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1cc      	bne.n	80082bc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2200      	movs	r2, #0
 800832a:	2140      	movs	r1, #64	; 0x40
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 fb62 	bl	80089f6 <UART_WaitOnFlagUntilTimeout>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e005      	b.n	8008348 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2220      	movs	r2, #32
 8008340:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	e000      	b.n	8008348 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008346:	2302      	movs	r3, #2
  }
}
 8008348:	4618      	mov	r0, r3
 800834a:	3720      	adds	r7, #32
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	431a      	orrs	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4ba6      	ldr	r3, [pc, #664]	; (8008614 <UART_SetConfig+0x2c4>)
 800837c:	4013      	ands	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	6979      	ldr	r1, [r7, #20]
 8008384:	430b      	orrs	r3, r1
 8008386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	430a      	orrs	r2, r1
 80083c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a94      	ldr	r2, [pc, #592]	; (8008618 <UART_SetConfig+0x2c8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d120      	bne.n	800840e <UART_SetConfig+0xbe>
 80083cc:	4b93      	ldr	r3, [pc, #588]	; (800861c <UART_SetConfig+0x2cc>)
 80083ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d816      	bhi.n	8008408 <UART_SetConfig+0xb8>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0x90>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	080083f1 	.word	0x080083f1
 80083e4:	080083fd 	.word	0x080083fd
 80083e8:	080083f7 	.word	0x080083f7
 80083ec:	08008403 	.word	0x08008403
 80083f0:	2301      	movs	r3, #1
 80083f2:	77fb      	strb	r3, [r7, #31]
 80083f4:	e150      	b.n	8008698 <UART_SetConfig+0x348>
 80083f6:	2302      	movs	r3, #2
 80083f8:	77fb      	strb	r3, [r7, #31]
 80083fa:	e14d      	b.n	8008698 <UART_SetConfig+0x348>
 80083fc:	2304      	movs	r3, #4
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e14a      	b.n	8008698 <UART_SetConfig+0x348>
 8008402:	2308      	movs	r3, #8
 8008404:	77fb      	strb	r3, [r7, #31]
 8008406:	e147      	b.n	8008698 <UART_SetConfig+0x348>
 8008408:	2310      	movs	r3, #16
 800840a:	77fb      	strb	r3, [r7, #31]
 800840c:	e144      	b.n	8008698 <UART_SetConfig+0x348>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a83      	ldr	r2, [pc, #524]	; (8008620 <UART_SetConfig+0x2d0>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d132      	bne.n	800847e <UART_SetConfig+0x12e>
 8008418:	4b80      	ldr	r3, [pc, #512]	; (800861c <UART_SetConfig+0x2cc>)
 800841a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841e:	f003 030c 	and.w	r3, r3, #12
 8008422:	2b0c      	cmp	r3, #12
 8008424:	d828      	bhi.n	8008478 <UART_SetConfig+0x128>
 8008426:	a201      	add	r2, pc, #4	; (adr r2, 800842c <UART_SetConfig+0xdc>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	08008461 	.word	0x08008461
 8008430:	08008479 	.word	0x08008479
 8008434:	08008479 	.word	0x08008479
 8008438:	08008479 	.word	0x08008479
 800843c:	0800846d 	.word	0x0800846d
 8008440:	08008479 	.word	0x08008479
 8008444:	08008479 	.word	0x08008479
 8008448:	08008479 	.word	0x08008479
 800844c:	08008467 	.word	0x08008467
 8008450:	08008479 	.word	0x08008479
 8008454:	08008479 	.word	0x08008479
 8008458:	08008479 	.word	0x08008479
 800845c:	08008473 	.word	0x08008473
 8008460:	2300      	movs	r3, #0
 8008462:	77fb      	strb	r3, [r7, #31]
 8008464:	e118      	b.n	8008698 <UART_SetConfig+0x348>
 8008466:	2302      	movs	r3, #2
 8008468:	77fb      	strb	r3, [r7, #31]
 800846a:	e115      	b.n	8008698 <UART_SetConfig+0x348>
 800846c:	2304      	movs	r3, #4
 800846e:	77fb      	strb	r3, [r7, #31]
 8008470:	e112      	b.n	8008698 <UART_SetConfig+0x348>
 8008472:	2308      	movs	r3, #8
 8008474:	77fb      	strb	r3, [r7, #31]
 8008476:	e10f      	b.n	8008698 <UART_SetConfig+0x348>
 8008478:	2310      	movs	r3, #16
 800847a:	77fb      	strb	r3, [r7, #31]
 800847c:	e10c      	b.n	8008698 <UART_SetConfig+0x348>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a68      	ldr	r2, [pc, #416]	; (8008624 <UART_SetConfig+0x2d4>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d120      	bne.n	80084ca <UART_SetConfig+0x17a>
 8008488:	4b64      	ldr	r3, [pc, #400]	; (800861c <UART_SetConfig+0x2cc>)
 800848a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008492:	2b30      	cmp	r3, #48	; 0x30
 8008494:	d013      	beq.n	80084be <UART_SetConfig+0x16e>
 8008496:	2b30      	cmp	r3, #48	; 0x30
 8008498:	d814      	bhi.n	80084c4 <UART_SetConfig+0x174>
 800849a:	2b20      	cmp	r3, #32
 800849c:	d009      	beq.n	80084b2 <UART_SetConfig+0x162>
 800849e:	2b20      	cmp	r3, #32
 80084a0:	d810      	bhi.n	80084c4 <UART_SetConfig+0x174>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <UART_SetConfig+0x15c>
 80084a6:	2b10      	cmp	r3, #16
 80084a8:	d006      	beq.n	80084b8 <UART_SetConfig+0x168>
 80084aa:	e00b      	b.n	80084c4 <UART_SetConfig+0x174>
 80084ac:	2300      	movs	r3, #0
 80084ae:	77fb      	strb	r3, [r7, #31]
 80084b0:	e0f2      	b.n	8008698 <UART_SetConfig+0x348>
 80084b2:	2302      	movs	r3, #2
 80084b4:	77fb      	strb	r3, [r7, #31]
 80084b6:	e0ef      	b.n	8008698 <UART_SetConfig+0x348>
 80084b8:	2304      	movs	r3, #4
 80084ba:	77fb      	strb	r3, [r7, #31]
 80084bc:	e0ec      	b.n	8008698 <UART_SetConfig+0x348>
 80084be:	2308      	movs	r3, #8
 80084c0:	77fb      	strb	r3, [r7, #31]
 80084c2:	e0e9      	b.n	8008698 <UART_SetConfig+0x348>
 80084c4:	2310      	movs	r3, #16
 80084c6:	77fb      	strb	r3, [r7, #31]
 80084c8:	e0e6      	b.n	8008698 <UART_SetConfig+0x348>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a56      	ldr	r2, [pc, #344]	; (8008628 <UART_SetConfig+0x2d8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d120      	bne.n	8008516 <UART_SetConfig+0x1c6>
 80084d4:	4b51      	ldr	r3, [pc, #324]	; (800861c <UART_SetConfig+0x2cc>)
 80084d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084de:	2bc0      	cmp	r3, #192	; 0xc0
 80084e0:	d013      	beq.n	800850a <UART_SetConfig+0x1ba>
 80084e2:	2bc0      	cmp	r3, #192	; 0xc0
 80084e4:	d814      	bhi.n	8008510 <UART_SetConfig+0x1c0>
 80084e6:	2b80      	cmp	r3, #128	; 0x80
 80084e8:	d009      	beq.n	80084fe <UART_SetConfig+0x1ae>
 80084ea:	2b80      	cmp	r3, #128	; 0x80
 80084ec:	d810      	bhi.n	8008510 <UART_SetConfig+0x1c0>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <UART_SetConfig+0x1a8>
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d006      	beq.n	8008504 <UART_SetConfig+0x1b4>
 80084f6:	e00b      	b.n	8008510 <UART_SetConfig+0x1c0>
 80084f8:	2300      	movs	r3, #0
 80084fa:	77fb      	strb	r3, [r7, #31]
 80084fc:	e0cc      	b.n	8008698 <UART_SetConfig+0x348>
 80084fe:	2302      	movs	r3, #2
 8008500:	77fb      	strb	r3, [r7, #31]
 8008502:	e0c9      	b.n	8008698 <UART_SetConfig+0x348>
 8008504:	2304      	movs	r3, #4
 8008506:	77fb      	strb	r3, [r7, #31]
 8008508:	e0c6      	b.n	8008698 <UART_SetConfig+0x348>
 800850a:	2308      	movs	r3, #8
 800850c:	77fb      	strb	r3, [r7, #31]
 800850e:	e0c3      	b.n	8008698 <UART_SetConfig+0x348>
 8008510:	2310      	movs	r3, #16
 8008512:	77fb      	strb	r3, [r7, #31]
 8008514:	e0c0      	b.n	8008698 <UART_SetConfig+0x348>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a44      	ldr	r2, [pc, #272]	; (800862c <UART_SetConfig+0x2dc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d125      	bne.n	800856c <UART_SetConfig+0x21c>
 8008520:	4b3e      	ldr	r3, [pc, #248]	; (800861c <UART_SetConfig+0x2cc>)
 8008522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800852a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800852e:	d017      	beq.n	8008560 <UART_SetConfig+0x210>
 8008530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008534:	d817      	bhi.n	8008566 <UART_SetConfig+0x216>
 8008536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800853a:	d00b      	beq.n	8008554 <UART_SetConfig+0x204>
 800853c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008540:	d811      	bhi.n	8008566 <UART_SetConfig+0x216>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <UART_SetConfig+0x1fe>
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d006      	beq.n	800855a <UART_SetConfig+0x20a>
 800854c:	e00b      	b.n	8008566 <UART_SetConfig+0x216>
 800854e:	2300      	movs	r3, #0
 8008550:	77fb      	strb	r3, [r7, #31]
 8008552:	e0a1      	b.n	8008698 <UART_SetConfig+0x348>
 8008554:	2302      	movs	r3, #2
 8008556:	77fb      	strb	r3, [r7, #31]
 8008558:	e09e      	b.n	8008698 <UART_SetConfig+0x348>
 800855a:	2304      	movs	r3, #4
 800855c:	77fb      	strb	r3, [r7, #31]
 800855e:	e09b      	b.n	8008698 <UART_SetConfig+0x348>
 8008560:	2308      	movs	r3, #8
 8008562:	77fb      	strb	r3, [r7, #31]
 8008564:	e098      	b.n	8008698 <UART_SetConfig+0x348>
 8008566:	2310      	movs	r3, #16
 8008568:	77fb      	strb	r3, [r7, #31]
 800856a:	e095      	b.n	8008698 <UART_SetConfig+0x348>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a2f      	ldr	r2, [pc, #188]	; (8008630 <UART_SetConfig+0x2e0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d125      	bne.n	80085c2 <UART_SetConfig+0x272>
 8008576:	4b29      	ldr	r3, [pc, #164]	; (800861c <UART_SetConfig+0x2cc>)
 8008578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008584:	d017      	beq.n	80085b6 <UART_SetConfig+0x266>
 8008586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800858a:	d817      	bhi.n	80085bc <UART_SetConfig+0x26c>
 800858c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008590:	d00b      	beq.n	80085aa <UART_SetConfig+0x25a>
 8008592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008596:	d811      	bhi.n	80085bc <UART_SetConfig+0x26c>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <UART_SetConfig+0x254>
 800859c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a0:	d006      	beq.n	80085b0 <UART_SetConfig+0x260>
 80085a2:	e00b      	b.n	80085bc <UART_SetConfig+0x26c>
 80085a4:	2301      	movs	r3, #1
 80085a6:	77fb      	strb	r3, [r7, #31]
 80085a8:	e076      	b.n	8008698 <UART_SetConfig+0x348>
 80085aa:	2302      	movs	r3, #2
 80085ac:	77fb      	strb	r3, [r7, #31]
 80085ae:	e073      	b.n	8008698 <UART_SetConfig+0x348>
 80085b0:	2304      	movs	r3, #4
 80085b2:	77fb      	strb	r3, [r7, #31]
 80085b4:	e070      	b.n	8008698 <UART_SetConfig+0x348>
 80085b6:	2308      	movs	r3, #8
 80085b8:	77fb      	strb	r3, [r7, #31]
 80085ba:	e06d      	b.n	8008698 <UART_SetConfig+0x348>
 80085bc:	2310      	movs	r3, #16
 80085be:	77fb      	strb	r3, [r7, #31]
 80085c0:	e06a      	b.n	8008698 <UART_SetConfig+0x348>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a1b      	ldr	r2, [pc, #108]	; (8008634 <UART_SetConfig+0x2e4>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d138      	bne.n	800863e <UART_SetConfig+0x2ee>
 80085cc:	4b13      	ldr	r3, [pc, #76]	; (800861c <UART_SetConfig+0x2cc>)
 80085ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80085d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085da:	d017      	beq.n	800860c <UART_SetConfig+0x2bc>
 80085dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085e0:	d82a      	bhi.n	8008638 <UART_SetConfig+0x2e8>
 80085e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e6:	d00b      	beq.n	8008600 <UART_SetConfig+0x2b0>
 80085e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ec:	d824      	bhi.n	8008638 <UART_SetConfig+0x2e8>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <UART_SetConfig+0x2aa>
 80085f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f6:	d006      	beq.n	8008606 <UART_SetConfig+0x2b6>
 80085f8:	e01e      	b.n	8008638 <UART_SetConfig+0x2e8>
 80085fa:	2300      	movs	r3, #0
 80085fc:	77fb      	strb	r3, [r7, #31]
 80085fe:	e04b      	b.n	8008698 <UART_SetConfig+0x348>
 8008600:	2302      	movs	r3, #2
 8008602:	77fb      	strb	r3, [r7, #31]
 8008604:	e048      	b.n	8008698 <UART_SetConfig+0x348>
 8008606:	2304      	movs	r3, #4
 8008608:	77fb      	strb	r3, [r7, #31]
 800860a:	e045      	b.n	8008698 <UART_SetConfig+0x348>
 800860c:	2308      	movs	r3, #8
 800860e:	77fb      	strb	r3, [r7, #31]
 8008610:	e042      	b.n	8008698 <UART_SetConfig+0x348>
 8008612:	bf00      	nop
 8008614:	efff69f3 	.word	0xefff69f3
 8008618:	40011000 	.word	0x40011000
 800861c:	40023800 	.word	0x40023800
 8008620:	40004400 	.word	0x40004400
 8008624:	40004800 	.word	0x40004800
 8008628:	40004c00 	.word	0x40004c00
 800862c:	40005000 	.word	0x40005000
 8008630:	40011400 	.word	0x40011400
 8008634:	40007800 	.word	0x40007800
 8008638:	2310      	movs	r3, #16
 800863a:	77fb      	strb	r3, [r7, #31]
 800863c:	e02c      	b.n	8008698 <UART_SetConfig+0x348>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a72      	ldr	r2, [pc, #456]	; (800880c <UART_SetConfig+0x4bc>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d125      	bne.n	8008694 <UART_SetConfig+0x344>
 8008648:	4b71      	ldr	r3, [pc, #452]	; (8008810 <UART_SetConfig+0x4c0>)
 800864a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800864e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008652:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008656:	d017      	beq.n	8008688 <UART_SetConfig+0x338>
 8008658:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800865c:	d817      	bhi.n	800868e <UART_SetConfig+0x33e>
 800865e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008662:	d00b      	beq.n	800867c <UART_SetConfig+0x32c>
 8008664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008668:	d811      	bhi.n	800868e <UART_SetConfig+0x33e>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <UART_SetConfig+0x326>
 800866e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008672:	d006      	beq.n	8008682 <UART_SetConfig+0x332>
 8008674:	e00b      	b.n	800868e <UART_SetConfig+0x33e>
 8008676:	2300      	movs	r3, #0
 8008678:	77fb      	strb	r3, [r7, #31]
 800867a:	e00d      	b.n	8008698 <UART_SetConfig+0x348>
 800867c:	2302      	movs	r3, #2
 800867e:	77fb      	strb	r3, [r7, #31]
 8008680:	e00a      	b.n	8008698 <UART_SetConfig+0x348>
 8008682:	2304      	movs	r3, #4
 8008684:	77fb      	strb	r3, [r7, #31]
 8008686:	e007      	b.n	8008698 <UART_SetConfig+0x348>
 8008688:	2308      	movs	r3, #8
 800868a:	77fb      	strb	r3, [r7, #31]
 800868c:	e004      	b.n	8008698 <UART_SetConfig+0x348>
 800868e:	2310      	movs	r3, #16
 8008690:	77fb      	strb	r3, [r7, #31]
 8008692:	e001      	b.n	8008698 <UART_SetConfig+0x348>
 8008694:	2310      	movs	r3, #16
 8008696:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086a0:	d15b      	bne.n	800875a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80086a2:	7ffb      	ldrb	r3, [r7, #31]
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d828      	bhi.n	80086fa <UART_SetConfig+0x3aa>
 80086a8:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <UART_SetConfig+0x360>)
 80086aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ae:	bf00      	nop
 80086b0:	080086d5 	.word	0x080086d5
 80086b4:	080086dd 	.word	0x080086dd
 80086b8:	080086e5 	.word	0x080086e5
 80086bc:	080086fb 	.word	0x080086fb
 80086c0:	080086eb 	.word	0x080086eb
 80086c4:	080086fb 	.word	0x080086fb
 80086c8:	080086fb 	.word	0x080086fb
 80086cc:	080086fb 	.word	0x080086fb
 80086d0:	080086f3 	.word	0x080086f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d4:	f7fd fcf4 	bl	80060c0 <HAL_RCC_GetPCLK1Freq>
 80086d8:	61b8      	str	r0, [r7, #24]
        break;
 80086da:	e013      	b.n	8008704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086dc:	f7fd fd04 	bl	80060e8 <HAL_RCC_GetPCLK2Freq>
 80086e0:	61b8      	str	r0, [r7, #24]
        break;
 80086e2:	e00f      	b.n	8008704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e4:	4b4b      	ldr	r3, [pc, #300]	; (8008814 <UART_SetConfig+0x4c4>)
 80086e6:	61bb      	str	r3, [r7, #24]
        break;
 80086e8:	e00c      	b.n	8008704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ea:	f7fd fbd7 	bl	8005e9c <HAL_RCC_GetSysClockFreq>
 80086ee:	61b8      	str	r0, [r7, #24]
        break;
 80086f0:	e008      	b.n	8008704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f6:	61bb      	str	r3, [r7, #24]
        break;
 80086f8:	e004      	b.n	8008704 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	77bb      	strb	r3, [r7, #30]
        break;
 8008702:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d074      	beq.n	80087f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	005a      	lsls	r2, r3, #1
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	085b      	lsrs	r3, r3, #1
 8008714:	441a      	add	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	fbb2 f3f3 	udiv	r3, r2, r3
 800871e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	2b0f      	cmp	r3, #15
 8008724:	d916      	bls.n	8008754 <UART_SetConfig+0x404>
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800872c:	d212      	bcs.n	8008754 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	b29b      	uxth	r3, r3
 8008732:	f023 030f 	bic.w	r3, r3, #15
 8008736:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	085b      	lsrs	r3, r3, #1
 800873c:	b29b      	uxth	r3, r3
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	b29a      	uxth	r2, r3
 8008744:	89fb      	ldrh	r3, [r7, #14]
 8008746:	4313      	orrs	r3, r2
 8008748:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	89fa      	ldrh	r2, [r7, #14]
 8008750:	60da      	str	r2, [r3, #12]
 8008752:	e04f      	b.n	80087f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	77bb      	strb	r3, [r7, #30]
 8008758:	e04c      	b.n	80087f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800875a:	7ffb      	ldrb	r3, [r7, #31]
 800875c:	2b08      	cmp	r3, #8
 800875e:	d828      	bhi.n	80087b2 <UART_SetConfig+0x462>
 8008760:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <UART_SetConfig+0x418>)
 8008762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008766:	bf00      	nop
 8008768:	0800878d 	.word	0x0800878d
 800876c:	08008795 	.word	0x08008795
 8008770:	0800879d 	.word	0x0800879d
 8008774:	080087b3 	.word	0x080087b3
 8008778:	080087a3 	.word	0x080087a3
 800877c:	080087b3 	.word	0x080087b3
 8008780:	080087b3 	.word	0x080087b3
 8008784:	080087b3 	.word	0x080087b3
 8008788:	080087ab 	.word	0x080087ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800878c:	f7fd fc98 	bl	80060c0 <HAL_RCC_GetPCLK1Freq>
 8008790:	61b8      	str	r0, [r7, #24]
        break;
 8008792:	e013      	b.n	80087bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008794:	f7fd fca8 	bl	80060e8 <HAL_RCC_GetPCLK2Freq>
 8008798:	61b8      	str	r0, [r7, #24]
        break;
 800879a:	e00f      	b.n	80087bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800879c:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <UART_SetConfig+0x4c4>)
 800879e:	61bb      	str	r3, [r7, #24]
        break;
 80087a0:	e00c      	b.n	80087bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087a2:	f7fd fb7b 	bl	8005e9c <HAL_RCC_GetSysClockFreq>
 80087a6:	61b8      	str	r0, [r7, #24]
        break;
 80087a8:	e008      	b.n	80087bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ae:	61bb      	str	r3, [r7, #24]
        break;
 80087b0:	e004      	b.n	80087bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	77bb      	strb	r3, [r7, #30]
        break;
 80087ba:	bf00      	nop
    }

    if (pclk != 0U)
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d018      	beq.n	80087f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	085a      	lsrs	r2, r3, #1
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	441a      	add	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b0f      	cmp	r3, #15
 80087da:	d909      	bls.n	80087f0 <UART_SetConfig+0x4a0>
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e2:	d205      	bcs.n	80087f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	60da      	str	r2, [r3, #12]
 80087ee:	e001      	b.n	80087f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008800:	7fbb      	ldrb	r3, [r7, #30]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3720      	adds	r7, #32
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	40007c00 	.word	0x40007c00
 8008810:	40023800 	.word	0x40023800
 8008814:	00f42400 	.word	0x00f42400

08008818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00a      	beq.n	8008842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00a      	beq.n	8008886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	f003 0310 	and.w	r3, r3, #16
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d01a      	beq.n	800892e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008916:	d10a      	bne.n	800892e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	605a      	str	r2, [r3, #4]
  }
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af02      	add	r7, sp, #8
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800896c:	f7f9 fa4a 	bl	8001e04 <HAL_GetTick>
 8008970:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b08      	cmp	r3, #8
 800897e:	d10e      	bne.n	800899e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f831 	bl	80089f6 <UART_WaitOnFlagUntilTimeout>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e027      	b.n	80089ee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d10e      	bne.n	80089ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f81b 	bl	80089f6 <UART_WaitOnFlagUntilTimeout>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e011      	b.n	80089ee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2220      	movs	r2, #32
 80089ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b09c      	sub	sp, #112	; 0x70
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	603b      	str	r3, [r7, #0]
 8008a02:	4613      	mov	r3, r2
 8008a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a06:	e0a7      	b.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a0e:	f000 80a3 	beq.w	8008b58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a12:	f7f9 f9f7 	bl	8001e04 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d302      	bcc.n	8008a28 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d13f      	bne.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a3c:	667b      	str	r3, [r7, #100]	; 0x64
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e6      	bne.n	8008a28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	663b      	str	r3, [r7, #96]	; 0x60
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e5      	bne.n	8008a5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2220      	movs	r2, #32
 8008a92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e068      	b.n	8008b7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d050      	beq.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac4:	d148      	bne.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ace:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aee:	637b      	str	r3, [r7, #52]	; 0x34
 8008af0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e6      	bne.n	8008ad0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	613b      	str	r3, [r7, #16]
   return(result);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3308      	adds	r3, #8
 8008b20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b22:	623a      	str	r2, [r7, #32]
 8008b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	69f9      	ldr	r1, [r7, #28]
 8008b28:	6a3a      	ldr	r2, [r7, #32]
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e5      	bne.n	8008b02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2220      	movs	r2, #32
 8008b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e010      	b.n	8008b7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	69da      	ldr	r2, [r3, #28]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	4013      	ands	r3, r2
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	bf0c      	ite	eq
 8008b68:	2301      	moveq	r3, #1
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	461a      	mov	r2, r3
 8008b70:	79fb      	ldrb	r3, [r7, #7]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	f43f af48 	beq.w	8008a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3770      	adds	r7, #112	; 0x70
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008b84:	b084      	sub	sp, #16
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	f107 001c 	add.w	r0, r7, #28
 8008b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008b9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008b9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008ba2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008ba6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008baa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008bae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <SDMMC_Init+0x54>)
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	b004      	add	sp, #16
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	ffff8100 	.word	0xffff8100

08008bdc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2203      	movs	r2, #3
 8008c24:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0303 	and.w	r3, r3, #3
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008c74:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008c7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <SDMMC_SendCommand+0x50>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	fffff000 	.word	0xfffff000

08008ca4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	b2db      	uxtb	r3, r3
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b085      	sub	sp, #20
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3314      	adds	r3, #20
 8008ccc:	461a      	mov	r2, r3
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
}  
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d0a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d10:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0

}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d4a:	2310      	movs	r3, #16
 8008d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d4e:	2340      	movs	r3, #64	; 0x40
 8008d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d52:	2300      	movs	r3, #0
 8008d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d5c:	f107 0308 	add.w	r3, r7, #8
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ff74 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6c:	2110      	movs	r1, #16
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa1a 	bl	80091a8 <SDMMC_GetCmdResp1>
 8008d74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d76:	69fb      	ldr	r3, [r7, #28]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3720      	adds	r7, #32
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b088      	sub	sp, #32
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008d8e:	2311      	movs	r3, #17
 8008d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d92:	2340      	movs	r3, #64	; 0x40
 8008d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d96:	2300      	movs	r3, #0
 8008d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff ff52 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db0:	2111      	movs	r1, #17
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f9f8 	bl	80091a8 <SDMMC_GetCmdResp1>
 8008db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dba:	69fb      	ldr	r3, [r7, #28]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008dd2:	2312      	movs	r3, #18
 8008dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dd6:	2340      	movs	r3, #64	; 0x40
 8008dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008de2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de4:	f107 0308 	add.w	r3, r7, #8
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff ff30 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df4:	2112      	movs	r1, #18
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f9d6 	bl	80091a8 <SDMMC_GetCmdResp1>
 8008dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dfe:	69fb      	ldr	r3, [r7, #28]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3720      	adds	r7, #32
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e16:	2318      	movs	r3, #24
 8008e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e1a:	2340      	movs	r3, #64	; 0x40
 8008e1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff ff0e 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e38:	2118      	movs	r1, #24
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f9b4 	bl	80091a8 <SDMMC_GetCmdResp1>
 8008e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e42:	69fb      	ldr	r3, [r7, #28]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008e5a:	2319      	movs	r3, #25
 8008e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e5e:	2340      	movs	r3, #64	; 0x40
 8008e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e62:	2300      	movs	r3, #0
 8008e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e6c:	f107 0308 	add.w	r3, r7, #8
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff feec 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e7c:	2119      	movs	r1, #25
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f992 	bl	80091a8 <SDMMC_GetCmdResp1>
 8008e84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e86:	69fb      	ldr	r3, [r7, #28]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3720      	adds	r7, #32
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008e9c:	230c      	movs	r3, #12
 8008e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ea0:	2340      	movs	r3, #64	; 0x40
 8008ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff fecb 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008eba:	4a05      	ldr	r2, [pc, #20]	; (8008ed0 <SDMMC_CmdStopTransfer+0x40>)
 8008ebc:	210c      	movs	r1, #12
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f972 	bl	80091a8 <SDMMC_GetCmdResp1>
 8008ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ec6:	69fb      	ldr	r3, [r7, #28]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3720      	adds	r7, #32
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	05f5e100 	.word	0x05f5e100

08008ed4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08a      	sub	sp, #40	; 0x28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008ee4:	2307      	movs	r3, #7
 8008ee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ee8:	2340      	movs	r3, #64	; 0x40
 8008eea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eec:	2300      	movs	r3, #0
 8008eee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ef6:	f107 0310 	add.w	r3, r7, #16
 8008efa:	4619      	mov	r1, r3
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff fea7 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f06:	2107      	movs	r1, #7
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f94d 	bl	80091a8 <SDMMC_GetCmdResp1>
 8008f0e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3728      	adds	r7, #40	; 0x28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b088      	sub	sp, #32
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f38:	f107 0308 	add.w	r3, r7, #8
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff fe86 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fb67 	bl	8009618 <SDMMC_GetCmdError>
 8008f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3720      	adds	r7, #32
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b088      	sub	sp, #32
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008f5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008f62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008f64:	2308      	movs	r3, #8
 8008f66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f68:	2340      	movs	r3, #64	; 0x40
 8008f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f76:	f107 0308 	add.w	r3, r7, #8
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7ff fe67 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fafa 	bl	800957c <SDMMC_GetCmdResp7>
 8008f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f8a:	69fb      	ldr	r3, [r7, #28]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3720      	adds	r7, #32
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fa2:	2337      	movs	r3, #55	; 0x37
 8008fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fa6:	2340      	movs	r3, #64	; 0x40
 8008fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008faa:	2300      	movs	r3, #0
 8008fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fb4:	f107 0308 	add.w	r3, r7, #8
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff fe48 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc4:	2137      	movs	r1, #55	; 0x37
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f8ee 	bl	80091a8 <SDMMC_GetCmdResp1>
 8008fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fce:	69fb      	ldr	r3, [r7, #28]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3720      	adds	r7, #32
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	4b0d      	ldr	r3, [pc, #52]	; (800901c <SDMMC_CmdAppOperCommand+0x44>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008fea:	2329      	movs	r3, #41	; 0x29
 8008fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fee:	2340      	movs	r3, #64	; 0x40
 8008ff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ffa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ffc:	f107 0308 	add.w	r3, r7, #8
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff fe24 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fa03 	bl	8009414 <SDMMC_GetCmdResp3>
 800900e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009010:	69fb      	ldr	r3, [r7, #28]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	80100000 	.word	0x80100000

08009020 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b088      	sub	sp, #32
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800902e:	2306      	movs	r3, #6
 8009030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009032:	2340      	movs	r3, #64	; 0x40
 8009034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009036:	2300      	movs	r3, #0
 8009038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800903a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800903e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009040:	f107 0308 	add.w	r3, r7, #8
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7ff fe02 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800904c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009050:	2106      	movs	r1, #6
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f8a8 	bl	80091a8 <SDMMC_GetCmdResp1>
 8009058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800905a:	69fb      	ldr	r3, [r7, #28]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3720      	adds	r7, #32
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009070:	2333      	movs	r3, #51	; 0x33
 8009072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009074:	2340      	movs	r3, #64	; 0x40
 8009076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800907c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff fde1 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800908e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009092:	2133      	movs	r1, #51	; 0x33
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f887 	bl	80091a8 <SDMMC_GetCmdResp1>
 800909a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800909c:	69fb      	ldr	r3, [r7, #28]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3720      	adds	r7, #32
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b088      	sub	sp, #32
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80090b2:	2302      	movs	r3, #2
 80090b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80090b6:	23c0      	movs	r3, #192	; 0xc0
 80090b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090c4:	f107 0308 	add.w	r3, r7, #8
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff fdc0 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f957 	bl	8009384 <SDMMC_GetCmdResp2>
 80090d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090d8:	69fb      	ldr	r3, [r7, #28]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b088      	sub	sp, #32
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80090f0:	2309      	movs	r3, #9
 80090f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80090f4:	23c0      	movs	r3, #192	; 0xc0
 80090f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090f8:	2300      	movs	r3, #0
 80090fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009102:	f107 0308 	add.w	r3, r7, #8
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff fda1 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f938 	bl	8009384 <SDMMC_GetCmdResp2>
 8009114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009116:	69fb      	ldr	r3, [r7, #28]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3720      	adds	r7, #32
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800912e:	2303      	movs	r3, #3
 8009130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009132:	2340      	movs	r3, #64	; 0x40
 8009134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009136:	2300      	movs	r3, #0
 8009138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800913a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800913e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009140:	f107 0308 	add.w	r3, r7, #8
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff fd82 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	2103      	movs	r1, #3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f99d 	bl	8009490 <SDMMC_GetCmdResp6>
 8009156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009158:	69fb      	ldr	r3, [r7, #28]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b088      	sub	sp, #32
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009170:	230d      	movs	r3, #13
 8009172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009174:	2340      	movs	r3, #64	; 0x40
 8009176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800917c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009180:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009182:	f107 0308 	add.w	r3, r7, #8
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff fd61 	bl	8008c50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800918e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009192:	210d      	movs	r1, #13
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f807 	bl	80091a8 <SDMMC_GetCmdResp1>
 800919a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800919c:	69fb      	ldr	r3, [r7, #28]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3720      	adds	r7, #32
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	460b      	mov	r3, r1
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80091b6:	4b70      	ldr	r3, [pc, #448]	; (8009378 <SDMMC_GetCmdResp1+0x1d0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a70      	ldr	r2, [pc, #448]	; (800937c <SDMMC_GetCmdResp1+0x1d4>)
 80091bc:	fba2 2303 	umull	r2, r3, r2, r3
 80091c0:	0a5a      	lsrs	r2, r3, #9
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	fb02 f303 	mul.w	r3, r2, r3
 80091c8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	1e5a      	subs	r2, r3, #1
 80091ce:	61fa      	str	r2, [r7, #28]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091d8:	e0c9      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0ef      	beq.n	80091ca <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1ea      	bne.n	80091ca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d004      	beq.n	800920a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2204      	movs	r2, #4
 8009204:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009206:	2304      	movs	r3, #4
 8009208:	e0b1      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800921c:	2301      	movs	r3, #1
 800921e:	e0a6      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	22c5      	movs	r2, #197	; 0xc5
 8009224:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff fd3c 	bl	8008ca4 <SDMMC_GetCommandResponse>
 800922c:	4603      	mov	r3, r0
 800922e:	461a      	mov	r2, r3
 8009230:	7afb      	ldrb	r3, [r7, #11]
 8009232:	4293      	cmp	r3, r2
 8009234:	d001      	beq.n	800923a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009236:	2301      	movs	r3, #1
 8009238:	e099      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800923a:	2100      	movs	r1, #0
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f7ff fd3e 	bl	8008cbe <SDMMC_GetResponse>
 8009242:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4b4e      	ldr	r3, [pc, #312]	; (8009380 <SDMMC_GetCmdResp1+0x1d8>)
 8009248:	4013      	ands	r3, r2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800924e:	2300      	movs	r3, #0
 8009250:	e08d      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da02      	bge.n	800925e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800925c:	e087      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009268:	2340      	movs	r3, #64	; 0x40
 800926a:	e080      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009276:	2380      	movs	r3, #128	; 0x80
 8009278:	e079      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009288:	e071      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009298:	e069      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80092a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092a8:	e061      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80092b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092b8:	e059      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092c8:	e051      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092d8:	e049      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80092e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80092e8:	e041      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80092f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092f8:	e039      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009308:	e031      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009314:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009318:	e029      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009324:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009328:	e021      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009334:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009338:	e019      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009344:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009348:	e011      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009354:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009358:	e009      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f003 0308 	and.w	r3, r3, #8
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009364:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009368:	e001      	b.n	800936e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800936a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800936e:	4618      	mov	r0, r3
 8009370:	3720      	adds	r7, #32
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20000004 	.word	0x20000004
 800937c:	10624dd3 	.word	0x10624dd3
 8009380:	fdffe008 	.word	0xfdffe008

08009384 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800938c:	4b1f      	ldr	r3, [pc, #124]	; (800940c <SDMMC_GetCmdResp2+0x88>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1f      	ldr	r2, [pc, #124]	; (8009410 <SDMMC_GetCmdResp2+0x8c>)
 8009392:	fba2 2303 	umull	r2, r3, r2, r3
 8009396:	0a5b      	lsrs	r3, r3, #9
 8009398:	f241 3288 	movw	r2, #5000	; 0x1388
 800939c:	fb02 f303 	mul.w	r3, r2, r3
 80093a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	1e5a      	subs	r2, r3, #1
 80093a6:	60fa      	str	r2, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093b0:	e026      	b.n	8009400 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0ef      	beq.n	80093a2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1ea      	bne.n	80093a2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d004      	beq.n	80093e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2204      	movs	r2, #4
 80093dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093de:	2304      	movs	r3, #4
 80093e0:	e00e      	b.n	8009400 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e003      	b.n	8009400 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	22c5      	movs	r2, #197	; 0xc5
 80093fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	20000004 	.word	0x20000004
 8009410:	10624dd3 	.word	0x10624dd3

08009414 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800941c:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <SDMMC_GetCmdResp3+0x74>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a1a      	ldr	r2, [pc, #104]	; (800948c <SDMMC_GetCmdResp3+0x78>)
 8009422:	fba2 2303 	umull	r2, r3, r2, r3
 8009426:	0a5b      	lsrs	r3, r3, #9
 8009428:	f241 3288 	movw	r2, #5000	; 0x1388
 800942c:	fb02 f303 	mul.w	r3, r2, r3
 8009430:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	1e5a      	subs	r2, r3, #1
 8009436:	60fa      	str	r2, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800943c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009440:	e01b      	b.n	800947a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009446:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0ef      	beq.n	8009432 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1ea      	bne.n	8009432 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d004      	beq.n	8009472 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2204      	movs	r2, #4
 800946c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800946e:	2304      	movs	r3, #4
 8009470:	e003      	b.n	800947a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	22c5      	movs	r2, #197	; 0xc5
 8009476:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	20000004 	.word	0x20000004
 800948c:	10624dd3 	.word	0x10624dd3

08009490 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	460b      	mov	r3, r1
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800949e:	4b35      	ldr	r3, [pc, #212]	; (8009574 <SDMMC_GetCmdResp6+0xe4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a35      	ldr	r2, [pc, #212]	; (8009578 <SDMMC_GetCmdResp6+0xe8>)
 80094a4:	fba2 2303 	umull	r2, r3, r2, r3
 80094a8:	0a5b      	lsrs	r3, r3, #9
 80094aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ae:	fb02 f303 	mul.w	r3, r2, r3
 80094b2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	1e5a      	subs	r2, r3, #1
 80094b8:	61fa      	str	r2, [r7, #28]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d102      	bne.n	80094c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094c2:	e052      	b.n	800956a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0ef      	beq.n	80094b4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1ea      	bne.n	80094b4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	f003 0304 	and.w	r3, r3, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d004      	beq.n	80094f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2204      	movs	r2, #4
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094f0:	2304      	movs	r3, #4
 80094f2:	e03a      	b.n	800956a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2201      	movs	r2, #1
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009506:	2301      	movs	r3, #1
 8009508:	e02f      	b.n	800956a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff fbca 	bl	8008ca4 <SDMMC_GetCommandResponse>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	7afb      	ldrb	r3, [r7, #11]
 8009516:	4293      	cmp	r3, r2
 8009518:	d001      	beq.n	800951e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800951a:	2301      	movs	r3, #1
 800951c:	e025      	b.n	800956a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	22c5      	movs	r2, #197	; 0xc5
 8009522:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009524:	2100      	movs	r1, #0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff fbc9 	bl	8008cbe <SDMMC_GetResponse>
 800952c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	0c1b      	lsrs	r3, r3, #16
 800953c:	b29a      	uxth	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009542:	2300      	movs	r3, #0
 8009544:	e011      	b.n	800956a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009554:	e009      	b.n	800956a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009564:	e001      	b.n	800956a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800956a:	4618      	mov	r0, r3
 800956c:	3720      	adds	r7, #32
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20000004 	.word	0x20000004
 8009578:	10624dd3 	.word	0x10624dd3

0800957c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009584:	4b22      	ldr	r3, [pc, #136]	; (8009610 <SDMMC_GetCmdResp7+0x94>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a22      	ldr	r2, [pc, #136]	; (8009614 <SDMMC_GetCmdResp7+0x98>)
 800958a:	fba2 2303 	umull	r2, r3, r2, r3
 800958e:	0a5b      	lsrs	r3, r3, #9
 8009590:	f241 3288 	movw	r2, #5000	; 0x1388
 8009594:	fb02 f303 	mul.w	r3, r2, r3
 8009598:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1e5a      	subs	r2, r3, #1
 800959e:	60fa      	str	r2, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d102      	bne.n	80095aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095a8:	e02c      	b.n	8009604 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0ef      	beq.n	800959a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1ea      	bne.n	800959a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c8:	f003 0304 	and.w	r3, r3, #4
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d004      	beq.n	80095da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2204      	movs	r2, #4
 80095d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095d6:	2304      	movs	r3, #4
 80095d8:	e014      	b.n	8009604 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d004      	beq.n	80095f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e009      	b.n	8009604 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2240      	movs	r2, #64	; 0x40
 8009600:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009602:	2300      	movs	r3, #0
  
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	20000004 	.word	0x20000004
 8009614:	10624dd3 	.word	0x10624dd3

08009618 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009620:	4b11      	ldr	r3, [pc, #68]	; (8009668 <SDMMC_GetCmdError+0x50>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a11      	ldr	r2, [pc, #68]	; (800966c <SDMMC_GetCmdError+0x54>)
 8009626:	fba2 2303 	umull	r2, r3, r2, r3
 800962a:	0a5b      	lsrs	r3, r3, #9
 800962c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009630:	fb02 f303 	mul.w	r3, r2, r3
 8009634:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	1e5a      	subs	r2, r3, #1
 800963a:	60fa      	str	r2, [r7, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009640:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009644:	e009      	b.n	800965a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0f1      	beq.n	8009636 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	22c5      	movs	r2, #197	; 0xc5
 8009656:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	20000004 	.word	0x20000004
 800966c:	10624dd3 	.word	0x10624dd3

08009670 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009670:	b084      	sub	sp, #16
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	f107 001c 	add.w	r0, r7, #28
 800967e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	2b01      	cmp	r3, #1
 8009686:	d120      	bne.n	80096ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	4b20      	ldr	r3, [pc, #128]	; (800971c <USB_CoreInit+0xac>)
 800969a:	4013      	ands	r3, r2
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d105      	bne.n	80096be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 fbee 	bl	800aea0 <USB_CoreReset>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]
 80096c8:	e010      	b.n	80096ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 fbe2 	bl	800aea0 <USB_CoreReset>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d10b      	bne.n	800970a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f043 0206 	orr.w	r2, r3, #6
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f043 0220 	orr.w	r2, r3, #32
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009716:	b004      	add	sp, #16
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	ffbdffbf 	.word	0xffbdffbf

08009720 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	4613      	mov	r3, r2
 800972c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	2b02      	cmp	r3, #2
 8009732:	d165      	bne.n	8009800 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	4a41      	ldr	r2, [pc, #260]	; (800983c <USB_SetTurnaroundTime+0x11c>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d906      	bls.n	800974a <USB_SetTurnaroundTime+0x2a>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4a40      	ldr	r2, [pc, #256]	; (8009840 <USB_SetTurnaroundTime+0x120>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d202      	bcs.n	800974a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009744:	230f      	movs	r3, #15
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	e062      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	4a3c      	ldr	r2, [pc, #240]	; (8009840 <USB_SetTurnaroundTime+0x120>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d306      	bcc.n	8009760 <USB_SetTurnaroundTime+0x40>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4a3b      	ldr	r2, [pc, #236]	; (8009844 <USB_SetTurnaroundTime+0x124>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d202      	bcs.n	8009760 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800975a:	230e      	movs	r3, #14
 800975c:	617b      	str	r3, [r7, #20]
 800975e:	e057      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	4a38      	ldr	r2, [pc, #224]	; (8009844 <USB_SetTurnaroundTime+0x124>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d306      	bcc.n	8009776 <USB_SetTurnaroundTime+0x56>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	4a37      	ldr	r2, [pc, #220]	; (8009848 <USB_SetTurnaroundTime+0x128>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d202      	bcs.n	8009776 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009770:	230d      	movs	r3, #13
 8009772:	617b      	str	r3, [r7, #20]
 8009774:	e04c      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4a33      	ldr	r2, [pc, #204]	; (8009848 <USB_SetTurnaroundTime+0x128>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d306      	bcc.n	800978c <USB_SetTurnaroundTime+0x6c>
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	4a32      	ldr	r2, [pc, #200]	; (800984c <USB_SetTurnaroundTime+0x12c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d802      	bhi.n	800978c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009786:	230c      	movs	r3, #12
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	e041      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	4a2f      	ldr	r2, [pc, #188]	; (800984c <USB_SetTurnaroundTime+0x12c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d906      	bls.n	80097a2 <USB_SetTurnaroundTime+0x82>
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	4a2e      	ldr	r2, [pc, #184]	; (8009850 <USB_SetTurnaroundTime+0x130>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d802      	bhi.n	80097a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800979c:	230b      	movs	r3, #11
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	e036      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	4a2a      	ldr	r2, [pc, #168]	; (8009850 <USB_SetTurnaroundTime+0x130>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d906      	bls.n	80097b8 <USB_SetTurnaroundTime+0x98>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4a29      	ldr	r2, [pc, #164]	; (8009854 <USB_SetTurnaroundTime+0x134>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d802      	bhi.n	80097b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097b2:	230a      	movs	r3, #10
 80097b4:	617b      	str	r3, [r7, #20]
 80097b6:	e02b      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4a26      	ldr	r2, [pc, #152]	; (8009854 <USB_SetTurnaroundTime+0x134>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d906      	bls.n	80097ce <USB_SetTurnaroundTime+0xae>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4a25      	ldr	r2, [pc, #148]	; (8009858 <USB_SetTurnaroundTime+0x138>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d202      	bcs.n	80097ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80097c8:	2309      	movs	r3, #9
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	e020      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	4a21      	ldr	r2, [pc, #132]	; (8009858 <USB_SetTurnaroundTime+0x138>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d306      	bcc.n	80097e4 <USB_SetTurnaroundTime+0xc4>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	4a20      	ldr	r2, [pc, #128]	; (800985c <USB_SetTurnaroundTime+0x13c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d802      	bhi.n	80097e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80097de:	2308      	movs	r3, #8
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	e015      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	4a1d      	ldr	r2, [pc, #116]	; (800985c <USB_SetTurnaroundTime+0x13c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d906      	bls.n	80097fa <USB_SetTurnaroundTime+0xda>
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4a1c      	ldr	r2, [pc, #112]	; (8009860 <USB_SetTurnaroundTime+0x140>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d202      	bcs.n	80097fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80097f4:	2307      	movs	r3, #7
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	e00a      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80097fa:	2306      	movs	r3, #6
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	e007      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009800:	79fb      	ldrb	r3, [r7, #7]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009806:	2309      	movs	r3, #9
 8009808:	617b      	str	r3, [r7, #20]
 800980a:	e001      	b.n	8009810 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800980c:	2309      	movs	r3, #9
 800980e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	029b      	lsls	r3, r3, #10
 8009824:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009828:	431a      	orrs	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	00d8acbf 	.word	0x00d8acbf
 8009840:	00e4e1c0 	.word	0x00e4e1c0
 8009844:	00f42400 	.word	0x00f42400
 8009848:	01067380 	.word	0x01067380
 800984c:	011a499f 	.word	0x011a499f
 8009850:	01312cff 	.word	0x01312cff
 8009854:	014ca43f 	.word	0x014ca43f
 8009858:	016e3600 	.word	0x016e3600
 800985c:	01a6ab1f 	.word	0x01a6ab1f
 8009860:	01e84800 	.word	0x01e84800

08009864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f043 0201 	orr.w	r2, r3, #1
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f023 0201 	bic.w	r2, r3, #1
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d115      	bne.n	80098f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098d6:	2001      	movs	r0, #1
 80098d8:	f7f8 faa0 	bl	8001e1c <HAL_Delay>
      ms++;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3301      	adds	r3, #1
 80098e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f001 fa4b 	bl	800ad7e <USB_GetMode>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d01e      	beq.n	800992c <USB_SetCurrentMode+0x84>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b31      	cmp	r3, #49	; 0x31
 80098f2:	d9f0      	bls.n	80098d6 <USB_SetCurrentMode+0x2e>
 80098f4:	e01a      	b.n	800992c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d115      	bne.n	8009928 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009908:	2001      	movs	r0, #1
 800990a:	f7f8 fa87 	bl	8001e1c <HAL_Delay>
      ms++;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3301      	adds	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 fa32 	bl	800ad7e <USB_GetMode>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <USB_SetCurrentMode+0x84>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b31      	cmp	r3, #49	; 0x31
 8009924:	d9f0      	bls.n	8009908 <USB_SetCurrentMode+0x60>
 8009926:	e001      	b.n	800992c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e005      	b.n	8009938 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b32      	cmp	r3, #50	; 0x32
 8009930:	d101      	bne.n	8009936 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e000      	b.n	8009938 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009940:	b084      	sub	sp, #16
 8009942:	b580      	push	{r7, lr}
 8009944:	b086      	sub	sp, #24
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800994e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800995a:	2300      	movs	r3, #0
 800995c:	613b      	str	r3, [r7, #16]
 800995e:	e009      	b.n	8009974 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	3340      	adds	r3, #64	; 0x40
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	2200      	movs	r2, #0
 800996c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	3301      	adds	r3, #1
 8009972:	613b      	str	r3, [r7, #16]
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	2b0e      	cmp	r3, #14
 8009978:	d9f2      	bls.n	8009960 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800997a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800997c:	2b00      	cmp	r3, #0
 800997e:	d11c      	bne.n	80099ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800998e:	f043 0302 	orr.w	r3, r3, #2
 8009992:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009998:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	e005      	b.n	80099c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099cc:	461a      	mov	r2, r3
 80099ce:	2300      	movs	r3, #0
 80099d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d8:	4619      	mov	r1, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e0:	461a      	mov	r2, r3
 80099e2:	680b      	ldr	r3, [r1, #0]
 80099e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10c      	bne.n	8009a06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d104      	bne.n	80099fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80099f2:	2100      	movs	r1, #0
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f965 	bl	8009cc4 <USB_SetDevSpeed>
 80099fa:	e008      	b.n	8009a0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80099fc:	2101      	movs	r1, #1
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f960 	bl	8009cc4 <USB_SetDevSpeed>
 8009a04:	e003      	b.n	8009a0e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a06:	2103      	movs	r1, #3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f95b 	bl	8009cc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a0e:	2110      	movs	r1, #16
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f8f3 	bl	8009bfc <USB_FlushTxFifo>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f91f 	bl	8009c64 <USB_FlushRxFifo>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a36:	461a      	mov	r2, r3
 8009a38:	2300      	movs	r3, #0
 8009a3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a42:	461a      	mov	r2, r3
 8009a44:	2300      	movs	r3, #0
 8009a46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a4e:	461a      	mov	r2, r3
 8009a50:	2300      	movs	r3, #0
 8009a52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a54:	2300      	movs	r3, #0
 8009a56:	613b      	str	r3, [r7, #16]
 8009a58:	e043      	b.n	8009ae2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a70:	d118      	bne.n	8009aa4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a84:	461a      	mov	r2, r3
 8009a86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	e013      	b.n	8009ab6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	e008      	b.n	8009ab6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ada:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	613b      	str	r3, [r7, #16]
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d3b7      	bcc.n	8009a5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aea:	2300      	movs	r3, #0
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	e043      	b.n	8009b78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b06:	d118      	bne.n	8009b3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	e013      	b.n	8009b4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b30:	461a      	mov	r2, r3
 8009b32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	e008      	b.n	8009b4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b46:	461a      	mov	r2, r3
 8009b48:	2300      	movs	r3, #0
 8009b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b58:	461a      	mov	r2, r3
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	3301      	adds	r3, #1
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d3b7      	bcc.n	8009af0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009ba0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d105      	bne.n	8009bb4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	f043 0210 	orr.w	r2, r3, #16
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	699a      	ldr	r2, [r3, #24]
 8009bb8:	4b0e      	ldr	r3, [pc, #56]	; (8009bf4 <USB_DevInit+0x2b4>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	f043 0208 	orr.w	r2, r3, #8
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d105      	bne.n	8009be4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699a      	ldr	r2, [r3, #24]
 8009bdc:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <USB_DevInit+0x2b8>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bf0:	b004      	add	sp, #16
 8009bf2:	4770      	bx	lr
 8009bf4:	803c3800 	.word	0x803c3800
 8009bf8:	40000004 	.word	0x40000004

08009bfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4a13      	ldr	r2, [pc, #76]	; (8009c60 <USB_FlushTxFifo+0x64>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d901      	bls.n	8009c1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e01b      	b.n	8009c54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	daf2      	bge.n	8009c0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	019b      	lsls	r3, r3, #6
 8009c2c:	f043 0220 	orr.w	r2, r3, #32
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4a08      	ldr	r2, [pc, #32]	; (8009c60 <USB_FlushTxFifo+0x64>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d901      	bls.n	8009c46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e006      	b.n	8009c54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d0f0      	beq.n	8009c34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	00030d40 	.word	0x00030d40

08009c64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4a11      	ldr	r2, [pc, #68]	; (8009cc0 <USB_FlushRxFifo+0x5c>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d901      	bls.n	8009c82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e018      	b.n	8009cb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	daf2      	bge.n	8009c70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2210      	movs	r2, #16
 8009c92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3301      	adds	r3, #1
 8009c98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	4a08      	ldr	r2, [pc, #32]	; (8009cc0 <USB_FlushRxFifo+0x5c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d901      	bls.n	8009ca6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e006      	b.n	8009cb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	f003 0310 	and.w	r3, r3, #16
 8009cae:	2b10      	cmp	r3, #16
 8009cb0:	d0f0      	beq.n	8009c94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	00030d40 	.word	0x00030d40

08009cc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	78fb      	ldrb	r3, [r7, #3]
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b087      	sub	sp, #28
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0306 	and.w	r3, r3, #6
 8009d0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d102      	bne.n	8009d1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009d16:	2300      	movs	r3, #0
 8009d18:	75fb      	strb	r3, [r7, #23]
 8009d1a:	e00a      	b.n	8009d32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d002      	beq.n	8009d28 <USB_GetDevSpeed+0x32>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b06      	cmp	r3, #6
 8009d26:	d102      	bne.n	8009d2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d28:	2302      	movs	r3, #2
 8009d2a:	75fb      	strb	r3, [r7, #23]
 8009d2c:	e001      	b.n	8009d32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009d2e:	230f      	movs	r3, #15
 8009d30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	371c      	adds	r7, #28
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	785b      	ldrb	r3, [r3, #1]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d139      	bne.n	8009dd0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d62:	69da      	ldr	r2, [r3, #28]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	f003 030f 	and.w	r3, r3, #15
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	68f9      	ldr	r1, [r7, #12]
 8009d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d153      	bne.n	8009e3c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	791b      	ldrb	r3, [r3, #4]
 8009dae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009db0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	059b      	lsls	r3, r3, #22
 8009db6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009db8:	431a      	orrs	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	0159      	lsls	r1, r3, #5
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	440b      	add	r3, r1
 8009dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4b20      	ldr	r3, [pc, #128]	; (8009e4c <USB_ActivateEndpoint+0x10c>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	600b      	str	r3, [r1, #0]
 8009dce:	e035      	b.n	8009e3c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd6:	69da      	ldr	r2, [r3, #28]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f003 030f 	and.w	r3, r3, #15
 8009de0:	2101      	movs	r1, #1
 8009de2:	fa01 f303 	lsl.w	r3, r1, r3
 8009de6:	041b      	lsls	r3, r3, #16
 8009de8:	68f9      	ldr	r1, [r7, #12]
 8009dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dee:	4313      	orrs	r3, r2
 8009df0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d119      	bne.n	8009e3c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	791b      	ldrb	r3, [r3, #4]
 8009e22:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e24:	430b      	orrs	r3, r1
 8009e26:	431a      	orrs	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	0159      	lsls	r1, r3, #5
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	440b      	add	r3, r1
 8009e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e34:	4619      	mov	r1, r3
 8009e36:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <USB_ActivateEndpoint+0x10c>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	10008000 	.word	0x10008000

08009e50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	785b      	ldrb	r3, [r3, #1]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d161      	bne.n	8009f30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e82:	d11f      	bne.n	8009ec4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	0151      	lsls	r1, r2, #5
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	440a      	add	r2, r1
 8009e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ea2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	0151      	lsls	r1, r2, #5
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	440a      	add	r2, r1
 8009eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	f003 030f 	and.w	r3, r3, #15
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	43db      	mvns	r3, r3
 8009ede:	68f9      	ldr	r1, [r7, #12]
 8009ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eee:	69da      	ldr	r2, [r3, #28]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	f003 030f 	and.w	r3, r3, #15
 8009ef8:	2101      	movs	r1, #1
 8009efa:	fa01 f303 	lsl.w	r3, r1, r3
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	43db      	mvns	r3, r3
 8009f02:	68f9      	ldr	r1, [r7, #12]
 8009f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f08:	4013      	ands	r3, r2
 8009f0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	0159      	lsls	r1, r3, #5
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	440b      	add	r3, r1
 8009f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f26:	4619      	mov	r1, r3
 8009f28:	4b35      	ldr	r3, [pc, #212]	; (800a000 <USB_DeactivateEndpoint+0x1b0>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	600b      	str	r3, [r1, #0]
 8009f2e:	e060      	b.n	8009ff2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f46:	d11f      	bne.n	8009f88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	0151      	lsls	r1, r2, #5
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	440a      	add	r2, r1
 8009f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	0151      	lsls	r1, r2, #5
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	440a      	add	r2, r1
 8009f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	f003 030f 	and.w	r3, r3, #15
 8009f98:	2101      	movs	r1, #1
 8009f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f9e:	041b      	lsls	r3, r3, #16
 8009fa0:	43db      	mvns	r3, r3
 8009fa2:	68f9      	ldr	r1, [r7, #12]
 8009fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fa8:	4013      	ands	r3, r2
 8009faa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb2:	69da      	ldr	r2, [r3, #28]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	f003 030f 	and.w	r3, r3, #15
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc2:	041b      	lsls	r3, r3, #16
 8009fc4:	43db      	mvns	r3, r3
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fcc:	4013      	ands	r3, r2
 8009fce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	0159      	lsls	r1, r3, #5
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	440b      	add	r3, r1
 8009fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fea:	4619      	mov	r1, r3
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <USB_DeactivateEndpoint+0x1b4>)
 8009fee:	4013      	ands	r3, r2
 8009ff0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	ec337800 	.word	0xec337800
 800a004:	eff37800 	.word	0xeff37800

0800a008 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08a      	sub	sp, #40	; 0x28
 800a00c:	af02      	add	r7, sp, #8
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	785b      	ldrb	r3, [r3, #1]
 800a024:	2b01      	cmp	r3, #1
 800a026:	f040 8163 	bne.w	800a2f0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d132      	bne.n	800a098 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03e:	691a      	ldr	r2, [r3, #16]
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	0159      	lsls	r1, r3, #5
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	440b      	add	r3, r1
 800a048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04c:	4619      	mov	r1, r3
 800a04e:	4ba5      	ldr	r3, [pc, #660]	; (800a2e4 <USB_EPStartXfer+0x2dc>)
 800a050:	4013      	ands	r3, r2
 800a052:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	0151      	lsls	r1, r2, #5
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	440a      	add	r2, r1
 800a06a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a06e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a072:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a080:	691a      	ldr	r2, [r3, #16]
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	0159      	lsls	r1, r3, #5
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	440b      	add	r3, r1
 800a08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08e:	4619      	mov	r1, r3
 800a090:	4b95      	ldr	r3, [pc, #596]	; (800a2e8 <USB_EPStartXfer+0x2e0>)
 800a092:	4013      	ands	r3, r2
 800a094:	610b      	str	r3, [r1, #16]
 800a096:	e074      	b.n	800a182 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a4:	691a      	ldr	r2, [r3, #16]
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	0159      	lsls	r1, r3, #5
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	440b      	add	r3, r1
 800a0ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4b8c      	ldr	r3, [pc, #560]	; (800a2e8 <USB_EPStartXfer+0x2e0>)
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c6:	691a      	ldr	r2, [r3, #16]
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	0159      	lsls	r1, r3, #5
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	440b      	add	r3, r1
 800a0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4b83      	ldr	r3, [pc, #524]	; (800a2e4 <USB_EPStartXfer+0x2dc>)
 800a0d8:	4013      	ands	r3, r2
 800a0da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	6999      	ldr	r1, [r3, #24]
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	440b      	add	r3, r1
 800a0f4:	1e59      	subs	r1, r3, #1
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a100:	4b7a      	ldr	r3, [pc, #488]	; (800a2ec <USB_EPStartXfer+0x2e4>)
 800a102:	400b      	ands	r3, r1
 800a104:	69b9      	ldr	r1, [r7, #24]
 800a106:	0148      	lsls	r0, r1, #5
 800a108:	69f9      	ldr	r1, [r7, #28]
 800a10a:	4401      	add	r1, r0
 800a10c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a110:	4313      	orrs	r3, r2
 800a112:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a120:	691a      	ldr	r2, [r3, #16]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a12a:	69b9      	ldr	r1, [r7, #24]
 800a12c:	0148      	lsls	r0, r1, #5
 800a12e:	69f9      	ldr	r1, [r7, #28]
 800a130:	4401      	add	r1, r0
 800a132:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a136:	4313      	orrs	r3, r2
 800a138:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	791b      	ldrb	r3, [r3, #4]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d11f      	bne.n	800a182 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	015a      	lsls	r2, r3, #5
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	4413      	add	r3, r2
 800a14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	0151      	lsls	r1, r2, #5
 800a154:	69fa      	ldr	r2, [r7, #28]
 800a156:	440a      	add	r2, r1
 800a158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a15c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a160:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a17c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a180:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a182:	79fb      	ldrb	r3, [r7, #7]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d14b      	bne.n	800a220 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d009      	beq.n	800a1a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19c:	461a      	mov	r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	791b      	ldrb	r3, [r3, #4]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d128      	bne.n	800a1fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d110      	bne.n	800a1de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	0151      	lsls	r1, r2, #5
 800a1ce:	69fa      	ldr	r2, [r7, #28]
 800a1d0:	440a      	add	r2, r1
 800a1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1da:	6013      	str	r3, [r2, #0]
 800a1dc:	e00f      	b.n	800a1fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	0151      	lsls	r1, r2, #5
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	440a      	add	r2, r1
 800a1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	4413      	add	r3, r2
 800a206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	69ba      	ldr	r2, [r7, #24]
 800a20e:	0151      	lsls	r1, r2, #5
 800a210:	69fa      	ldr	r2, [r7, #28]
 800a212:	440a      	add	r2, r1
 800a214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a218:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	e137      	b.n	800a490 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	0151      	lsls	r1, r2, #5
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	440a      	add	r2, r1
 800a236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a23a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a23e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	791b      	ldrb	r3, [r3, #4]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d015      	beq.n	800a274 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 811f 	beq.w	800a490 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	f003 030f 	and.w	r3, r3, #15
 800a262:	2101      	movs	r1, #1
 800a264:	fa01 f303 	lsl.w	r3, r1, r3
 800a268:	69f9      	ldr	r1, [r7, #28]
 800a26a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a26e:	4313      	orrs	r3, r2
 800a270:	634b      	str	r3, [r1, #52]	; 0x34
 800a272:	e10d      	b.n	800a490 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a280:	2b00      	cmp	r3, #0
 800a282:	d110      	bne.n	800a2a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	0151      	lsls	r1, r2, #5
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	440a      	add	r2, r1
 800a29a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a29e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	e00f      	b.n	800a2c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	69fa      	ldr	r2, [r7, #28]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	6919      	ldr	r1, [r3, #16]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	781a      	ldrb	r2, [r3, #0]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	b298      	uxth	r0, r3
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	4603      	mov	r3, r0
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 faea 	bl	800a8b4 <USB_WritePacket>
 800a2e0:	e0d6      	b.n	800a490 <USB_EPStartXfer+0x488>
 800a2e2:	bf00      	nop
 800a2e4:	e007ffff 	.word	0xe007ffff
 800a2e8:	fff80000 	.word	0xfff80000
 800a2ec:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fc:	691a      	ldr	r2, [r3, #16]
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	0159      	lsls	r1, r3, #5
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	440b      	add	r3, r1
 800a306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30a:	4619      	mov	r1, r3
 800a30c:	4b63      	ldr	r3, [pc, #396]	; (800a49c <USB_EPStartXfer+0x494>)
 800a30e:	4013      	ands	r3, r2
 800a310:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a31e:	691a      	ldr	r2, [r3, #16]
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	0159      	lsls	r1, r3, #5
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	440b      	add	r3, r1
 800a328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32c:	4619      	mov	r1, r3
 800a32e:	4b5c      	ldr	r3, [pc, #368]	; (800a4a0 <USB_EPStartXfer+0x498>)
 800a330:	4013      	ands	r3, r2
 800a332:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d123      	bne.n	800a384 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a348:	691a      	ldr	r2, [r3, #16]
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a352:	69b9      	ldr	r1, [r7, #24]
 800a354:	0148      	lsls	r0, r1, #5
 800a356:	69f9      	ldr	r1, [r7, #28]
 800a358:	4401      	add	r1, r0
 800a35a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a35e:	4313      	orrs	r3, r2
 800a360:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	440a      	add	r2, r1
 800a378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a37c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a380:	6113      	str	r3, [r2, #16]
 800a382:	e037      	b.n	800a3f4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	4413      	add	r3, r2
 800a38e:	1e5a      	subs	r2, r3, #1
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	fbb2 f3f3 	udiv	r3, r2, r3
 800a398:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	8afa      	ldrh	r2, [r7, #22]
 800a3a0:	fb03 f202 	mul.w	r2, r3, r2
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b4:	691a      	ldr	r2, [r3, #16]
 800a3b6:	8afb      	ldrh	r3, [r7, #22]
 800a3b8:	04d9      	lsls	r1, r3, #19
 800a3ba:	4b3a      	ldr	r3, [pc, #232]	; (800a4a4 <USB_EPStartXfer+0x49c>)
 800a3bc:	400b      	ands	r3, r1
 800a3be:	69b9      	ldr	r1, [r7, #24]
 800a3c0:	0148      	lsls	r0, r1, #5
 800a3c2:	69f9      	ldr	r1, [r7, #28]
 800a3c4:	4401      	add	r1, r0
 800a3c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3da:	691a      	ldr	r2, [r3, #16]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	69db      	ldr	r3, [r3, #28]
 800a3e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3e4:	69b9      	ldr	r1, [r7, #24]
 800a3e6:	0148      	lsls	r0, r1, #5
 800a3e8:	69f9      	ldr	r1, [r7, #28]
 800a3ea:	4401      	add	r1, r0
 800a3ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a3f4:	79fb      	ldrb	r3, [r7, #7]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d10d      	bne.n	800a416 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d009      	beq.n	800a416 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6919      	ldr	r1, [r3, #16]
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a412:	460a      	mov	r2, r1
 800a414:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	791b      	ldrb	r3, [r3, #4]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d128      	bne.n	800a470 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d110      	bne.n	800a450 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	015a      	lsls	r2, r3, #5
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	4413      	add	r3, r2
 800a436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	69ba      	ldr	r2, [r7, #24]
 800a43e:	0151      	lsls	r1, r2, #5
 800a440:	69fa      	ldr	r2, [r7, #28]
 800a442:	440a      	add	r2, r1
 800a444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	e00f      	b.n	800a470 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	0151      	lsls	r1, r2, #5
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	440a      	add	r2, r1
 800a466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a46a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a46e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	0151      	lsls	r1, r2, #5
 800a482:	69fa      	ldr	r2, [r7, #28]
 800a484:	440a      	add	r2, r1
 800a486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a48a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a48e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	fff80000 	.word	0xfff80000
 800a4a0:	e007ffff 	.word	0xe007ffff
 800a4a4:	1ff80000 	.word	0x1ff80000

0800a4a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	785b      	ldrb	r3, [r3, #1]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	f040 80ce 	bne.w	800a666 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d132      	bne.n	800a538 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4de:	691a      	ldr	r2, [r3, #16]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	0159      	lsls	r1, r3, #5
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	440b      	add	r3, r1
 800a4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4b9a      	ldr	r3, [pc, #616]	; (800a758 <USB_EP0StartXfer+0x2b0>)
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	0151      	lsls	r1, r2, #5
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	440a      	add	r2, r1
 800a50a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a50e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a520:	691a      	ldr	r2, [r3, #16]
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	0159      	lsls	r1, r3, #5
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	440b      	add	r3, r1
 800a52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52e:	4619      	mov	r1, r3
 800a530:	4b8a      	ldr	r3, [pc, #552]	; (800a75c <USB_EP0StartXfer+0x2b4>)
 800a532:	4013      	ands	r3, r2
 800a534:	610b      	str	r3, [r1, #16]
 800a536:	e04e      	b.n	800a5d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a544:	691a      	ldr	r2, [r3, #16]
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	0159      	lsls	r1, r3, #5
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	440b      	add	r3, r1
 800a54e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a552:	4619      	mov	r1, r3
 800a554:	4b81      	ldr	r3, [pc, #516]	; (800a75c <USB_EP0StartXfer+0x2b4>)
 800a556:	4013      	ands	r3, r2
 800a558:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a566:	691a      	ldr	r2, [r3, #16]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	0159      	lsls	r1, r3, #5
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	440b      	add	r3, r1
 800a570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a574:	4619      	mov	r1, r3
 800a576:	4b78      	ldr	r3, [pc, #480]	; (800a758 <USB_EP0StartXfer+0x2b0>)
 800a578:	4013      	ands	r3, r2
 800a57a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	699a      	ldr	r2, [r3, #24]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	429a      	cmp	r2, r3
 800a586:	d903      	bls.n	800a590 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	68da      	ldr	r2, [r3, #12]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	0151      	lsls	r1, r2, #5
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	440a      	add	r2, r1
 800a5a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5bc:	691a      	ldr	r2, [r3, #16]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5c6:	6939      	ldr	r1, [r7, #16]
 800a5c8:	0148      	lsls	r0, r1, #5
 800a5ca:	6979      	ldr	r1, [r7, #20]
 800a5cc:	4401      	add	r1, r0
 800a5ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a5d6:	79fb      	ldrb	r3, [r7, #7]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d11e      	bne.n	800a61a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d009      	beq.n	800a5f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	0151      	lsls	r1, r2, #5
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	440a      	add	r2, r1
 800a60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a612:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	e097      	b.n	800a74a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	0151      	lsls	r1, r2, #5
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	440a      	add	r2, r1
 800a630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a634:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a638:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 8083 	beq.w	800a74a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a64a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	f003 030f 	and.w	r3, r3, #15
 800a654:	2101      	movs	r1, #1
 800a656:	fa01 f303 	lsl.w	r3, r1, r3
 800a65a:	6979      	ldr	r1, [r7, #20]
 800a65c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a660:	4313      	orrs	r3, r2
 800a662:	634b      	str	r3, [r1, #52]	; 0x34
 800a664:	e071      	b.n	800a74a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a672:	691a      	ldr	r2, [r3, #16]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	0159      	lsls	r1, r3, #5
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	440b      	add	r3, r1
 800a67c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a680:	4619      	mov	r1, r3
 800a682:	4b36      	ldr	r3, [pc, #216]	; (800a75c <USB_EP0StartXfer+0x2b4>)
 800a684:	4013      	ands	r3, r2
 800a686:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a694:	691a      	ldr	r2, [r3, #16]
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	0159      	lsls	r1, r3, #5
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	440b      	add	r3, r1
 800a69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4b2c      	ldr	r3, [pc, #176]	; (800a758 <USB_EP0StartXfer+0x2b0>)
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	68da      	ldr	r2, [r3, #12]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	0151      	lsls	r1, r2, #5
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	440a      	add	r2, r1
 800a6d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	015a      	lsls	r2, r3, #5
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ee:	691a      	ldr	r2, [r3, #16]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6f8:	6939      	ldr	r1, [r7, #16]
 800a6fa:	0148      	lsls	r0, r1, #5
 800a6fc:	6979      	ldr	r1, [r7, #20]
 800a6fe:	4401      	add	r1, r0
 800a700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a704:	4313      	orrs	r3, r2
 800a706:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d10d      	bne.n	800a72a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	6919      	ldr	r1, [r3, #16]
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a726:	460a      	mov	r2, r1
 800a728:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	4413      	add	r3, r2
 800a732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	0151      	lsls	r1, r2, #5
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	440a      	add	r2, r1
 800a740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a744:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a748:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	371c      	adds	r7, #28
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	e007ffff 	.word	0xe007ffff
 800a75c:	fff80000 	.word	0xfff80000

0800a760 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a76a:	2300      	movs	r3, #0
 800a76c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	785b      	ldrb	r3, [r3, #1]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d14a      	bne.n	800a814 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a796:	f040 8086 	bne.w	800a8a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	7812      	ldrb	r2, [r2, #0]
 800a7ae:	0151      	lsls	r1, r2, #5
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	440a      	add	r2, r1
 800a7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	7812      	ldrb	r2, [r2, #0]
 800a7d2:	0151      	lsls	r1, r2, #5
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	440a      	add	r2, r1
 800a7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f242 7210 	movw	r2, #10000	; 0x2710
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d902      	bls.n	800a7f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	75fb      	strb	r3, [r7, #23]
          break;
 800a7f6:	e056      	b.n	800a8a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	4413      	add	r3, r2
 800a802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a80c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a810:	d0e7      	beq.n	800a7e2 <USB_EPStopXfer+0x82>
 800a812:	e048      	b.n	800a8a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a82c:	d13b      	bne.n	800a8a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	7812      	ldrb	r2, [r2, #0]
 800a842:	0151      	lsls	r1, r2, #5
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	440a      	add	r2, r1
 800a848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a84c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a850:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	7812      	ldrb	r2, [r2, #0]
 800a866:	0151      	lsls	r1, r2, #5
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	440a      	add	r2, r1
 800a86c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a874:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3301      	adds	r3, #1
 800a87a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a882:	4293      	cmp	r3, r2
 800a884:	d902      	bls.n	800a88c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	75fb      	strb	r3, [r7, #23]
          break;
 800a88a:	e00c      	b.n	800a8a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	4413      	add	r3, r2
 800a896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8a4:	d0e7      	beq.n	800a876 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	371c      	adds	r7, #28
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b089      	sub	sp, #36	; 0x24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	4611      	mov	r1, r2
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	71fb      	strb	r3, [r7, #7]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a8d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d123      	bne.n	800a922 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a8da:	88bb      	ldrh	r3, [r7, #4]
 800a8dc:	3303      	adds	r3, #3
 800a8de:	089b      	lsrs	r3, r3, #2
 800a8e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	61bb      	str	r3, [r7, #24]
 800a8e6:	e018      	b.n	800a91a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8e8:	79fb      	ldrb	r3, [r7, #7]
 800a8ea:	031a      	lsls	r2, r3, #12
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	3301      	adds	r3, #1
 800a900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	3301      	adds	r3, #1
 800a906:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	3301      	adds	r3, #1
 800a90c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	3301      	adds	r3, #1
 800a912:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	3301      	adds	r3, #1
 800a918:	61bb      	str	r3, [r7, #24]
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d3e2      	bcc.n	800a8e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3724      	adds	r7, #36	; 0x24
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a930:	b480      	push	{r7}
 800a932:	b08b      	sub	sp, #44	; 0x2c
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	4613      	mov	r3, r2
 800a93c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a946:	88fb      	ldrh	r3, [r7, #6]
 800a948:	089b      	lsrs	r3, r3, #2
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	f003 0303 	and.w	r3, r3, #3
 800a954:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a956:	2300      	movs	r3, #0
 800a958:	623b      	str	r3, [r7, #32]
 800a95a:	e014      	b.n	800a986 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	601a      	str	r2, [r3, #0]
    pDest++;
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	3301      	adds	r3, #1
 800a96c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	3301      	adds	r3, #1
 800a972:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	3301      	adds	r3, #1
 800a978:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	3301      	adds	r3, #1
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	3301      	adds	r3, #1
 800a984:	623b      	str	r3, [r7, #32]
 800a986:	6a3a      	ldr	r2, [r7, #32]
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d3e6      	bcc.n	800a95c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a98e:	8bfb      	ldrh	r3, [r7, #30]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d01e      	beq.n	800a9d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a994:	2300      	movs	r3, #0
 800a996:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f107 0310 	add.w	r3, r7, #16
 800a9a4:	6812      	ldr	r2, [r2, #0]
 800a9a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a9a8:	693a      	ldr	r2, [r7, #16]
 800a9aa:	6a3b      	ldr	r3, [r7, #32]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	701a      	strb	r2, [r3, #0]
      i++;
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a9c6:	8bfb      	ldrh	r3, [r7, #30]
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a9cc:	8bfb      	ldrh	r3, [r7, #30]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1ea      	bne.n	800a9a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	372c      	adds	r7, #44	; 0x2c
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	785b      	ldrb	r3, [r3, #1]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d12c      	bne.n	800aa56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	db12      	blt.n	800aa34 <USB_EPSetStall+0x54>
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00f      	beq.n	800aa34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	0151      	lsls	r1, r2, #5
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	440a      	add	r2, r1
 800aa2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	0151      	lsls	r1, r2, #5
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	440a      	add	r2, r1
 800aa4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	e02b      	b.n	800aaae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	db12      	blt.n	800aa8e <USB_EPSetStall+0xae>
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00f      	beq.n	800aa8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	0151      	lsls	r1, r2, #5
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	440a      	add	r2, r1
 800aa84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	0151      	lsls	r1, r2, #5
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	440a      	add	r2, r1
 800aaa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aaac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d128      	bne.n	800ab2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	0151      	lsls	r1, r2, #5
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	440a      	add	r2, r1
 800aaee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aaf6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	791b      	ldrb	r3, [r3, #4]
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d003      	beq.n	800ab08 <USB_EPClearStall+0x4c>
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	791b      	ldrb	r3, [r3, #4]
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	d138      	bne.n	800ab7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	0151      	lsls	r1, r2, #5
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	440a      	add	r2, r1
 800ab1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	e027      	b.n	800ab7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	0151      	lsls	r1, r2, #5
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	440a      	add	r2, r1
 800ab40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	791b      	ldrb	r3, [r3, #4]
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	d003      	beq.n	800ab5a <USB_EPClearStall+0x9e>
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	791b      	ldrb	r3, [r3, #4]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d10f      	bne.n	800ab7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	015a      	lsls	r2, r3, #5
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	4413      	add	r3, r2
 800ab62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	0151      	lsls	r1, r2, #5
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	440a      	add	r2, r1
 800ab70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aba6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800abaa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	011b      	lsls	r3, r3, #4
 800abb8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800abbc:	68f9      	ldr	r1, [r7, #12]
 800abbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abc2:	4313      	orrs	r3, r2
 800abc4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abee:	f023 0303 	bic.w	r3, r3, #3
 800abf2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac02:	f023 0302 	bic.w	r3, r3, #2
 800ac06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3714      	adds	r7, #20
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b085      	sub	sp, #20
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac30:	f023 0303 	bic.w	r3, r3, #3
 800ac34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac44:	f043 0302 	orr.w	r3, r3, #2
 800ac48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac70:	68fb      	ldr	r3, [r7, #12]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	4013      	ands	r3, r2
 800aca0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	0c1b      	lsrs	r3, r3, #16
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b085      	sub	sp, #20
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	4013      	ands	r3, r2
 800acd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	b29b      	uxth	r3, r3
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b085      	sub	sp, #20
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	460b      	mov	r3, r1
 800acf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800acf6:	78fb      	ldrb	r3, [r7, #3]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	4013      	ands	r3, r2
 800ad12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad14:	68bb      	ldr	r3, [r7, #8]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad22:	b480      	push	{r7}
 800ad24:	b087      	sub	sp, #28
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	f003 030f 	and.w	r3, r3, #15
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad52:	01db      	lsls	r3, r3, #7
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad70:	68bb      	ldr	r3, [r7, #8]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	371c      	adds	r7, #28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	f003 0301 	and.w	r3, r3, #1
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
	...

0800ad9c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb6:	4619      	mov	r1, r3
 800adb8:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <USB_ActivateSetup+0x44>)
 800adba:	4013      	ands	r3, r2
 800adbc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800add0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	fffff800 	.word	0xfffff800

0800ade4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	460b      	mov	r3, r1
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	333c      	adds	r3, #60	; 0x3c
 800adfa:	3304      	adds	r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	4a26      	ldr	r2, [pc, #152]	; (800ae9c <USB_EP0_OutStart+0xb8>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d90a      	bls.n	800ae1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae18:	d101      	bne.n	800ae1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	e037      	b.n	800ae8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae24:	461a      	mov	r2, r3
 800ae26:	2300      	movs	r3, #0
 800ae28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae4c:	f043 0318 	orr.w	r3, r3, #24
 800ae50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ae64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae66:	7afb      	ldrb	r3, [r7, #11]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d10f      	bne.n	800ae8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae72:	461a      	mov	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ae8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	371c      	adds	r7, #28
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	4f54300a 	.word	0x4f54300a

0800aea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4a13      	ldr	r2, [pc, #76]	; (800af04 <USB_CoreReset+0x64>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d901      	bls.n	800aebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e01b      	b.n	800aef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	daf2      	bge.n	800aeac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	f043 0201 	orr.w	r2, r3, #1
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3301      	adds	r3, #1
 800aeda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4a09      	ldr	r2, [pc, #36]	; (800af04 <USB_CoreReset+0x64>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d901      	bls.n	800aee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e006      	b.n	800aef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d0f0      	beq.n	800aed6 <USB_CoreReset+0x36>

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	00030d40 	.word	0x00030d40

0800af08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

uint8_t MX_FATFS_Init(void)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800af0c:	4905      	ldr	r1, [pc, #20]	; (800af24 <MX_FATFS_Init+0x1c>)
 800af0e:	4806      	ldr	r0, [pc, #24]	; (800af28 <MX_FATFS_Init+0x20>)
 800af10:	f005 f96a 	bl	80101e8 <FATFS_LinkDriver>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	4b04      	ldr	r3, [pc, #16]	; (800af2c <MX_FATFS_Init+0x24>)
 800af1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  return retSD;
 800af1c:	4b03      	ldr	r3, [pc, #12]	; (800af2c <MX_FATFS_Init+0x24>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af20:	4618      	mov	r0, r3
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20012d14 	.word	0x20012d14
 800af28:	080127fc 	.word	0x080127fc
 800af2c:	20012d10 	.word	0x20012d10

0800af30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af30:	b480      	push	{r7}
 800af32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af36:	4618      	mov	r0, r3
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af4a:	f000 f8ac 	bl	800b0a6 <BSP_SD_IsDetected>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b01      	cmp	r3, #1
 800af52:	d001      	beq.n	800af58 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800af54:	2302      	movs	r3, #2
 800af56:	e012      	b.n	800af7e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800af58:	480b      	ldr	r0, [pc, #44]	; (800af88 <BSP_SD_Init+0x48>)
 800af5a:	f7fb fd01 	bl	8006960 <HAL_SD_Init>
 800af5e:	4603      	mov	r3, r0
 800af60:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d109      	bne.n	800af7c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800af68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800af6c:	4806      	ldr	r0, [pc, #24]	; (800af88 <BSP_SD_Init+0x48>)
 800af6e:	f7fc fc63 	bl	8007838 <HAL_SD_ConfigWideBusOperation>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af7c:	79fb      	ldrb	r3, [r7, #7]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20000204 	.word	0x20000204

0800af8c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af02      	add	r7, sp, #8
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	68f9      	ldr	r1, [r7, #12]
 800afa8:	4806      	ldr	r0, [pc, #24]	; (800afc4 <BSP_SD_ReadBlocks+0x38>)
 800afaa:	f7fb fd91 	bl	8006ad0 <HAL_SD_ReadBlocks>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	20000204 	.word	0x20000204

0800afc8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af02      	add	r7, sp, #8
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800afd6:	2300      	movs	r3, #0
 800afd8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	68f9      	ldr	r1, [r7, #12]
 800afe4:	4806      	ldr	r0, [pc, #24]	; (800b000 <BSP_SD_WriteBlocks+0x38>)
 800afe6:	f7fb ff51 	bl	8006e8c <HAL_SD_WriteBlocks>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20000204 	.word	0x20000204

0800b004 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b008:	4805      	ldr	r0, [pc, #20]	; (800b020 <BSP_SD_GetCardState+0x1c>)
 800b00a:	f7fc fcaf 	bl	800796c <HAL_SD_GetCardState>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b04      	cmp	r3, #4
 800b012:	bf14      	ite	ne
 800b014:	2301      	movne	r3, #1
 800b016:	2300      	moveq	r3, #0
 800b018:	b2db      	uxtb	r3, r3
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20000204 	.word	0x20000204

0800b024 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4803      	ldr	r0, [pc, #12]	; (800b03c <BSP_SD_GetCardInfo+0x18>)
 800b030:	f7fc fbd6 	bl	80077e0 <HAL_SD_GetCardInfo>
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	20000204 	.word	0x20000204

0800b040 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b048:	f000 f818 	bl	800b07c <BSP_SD_AbortCallback>
}
 800b04c:	bf00      	nop
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b05c:	f000 f815 	bl	800b08a <BSP_SD_WriteCpltCallback>
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b070:	f000 f812 	bl	800b098 <BSP_SD_ReadCpltCallback>
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b07c:	b480      	push	{r7}
 800b07e:	af00      	add	r7, sp, #0

}
 800b080:	bf00      	nop
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800b08a:	b480      	push	{r7}
 800b08c:	af00      	add	r7, sp, #0

}
 800b08e:	bf00      	nop
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0

}
 800b09c:	bf00      	nop
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b082      	sub	sp, #8
 800b0aa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b0b0:	f000 f80c 	bl	800b0cc <BSP_PlatformIsDetected>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b0be:	79fb      	ldrb	r3, [r7, #7]
 800b0c0:	b2db      	uxtb	r3, r3
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800b0d6:	2104      	movs	r1, #4
 800b0d8:	4806      	ldr	r0, [pc, #24]	; (800b0f4 <BSP_PlatformIsDetected+0x28>)
 800b0da:	f7f8 fab9 	bl	8003650 <HAL_GPIO_ReadPin>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d001      	beq.n	800b0e8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b0e8:	79fb      	ldrb	r3, [r7, #7]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	40021800 	.word	0x40021800

0800b0f8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b102:	4b0b      	ldr	r3, [pc, #44]	; (800b130 <SD_CheckStatus+0x38>)
 800b104:	2201      	movs	r2, #1
 800b106:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b108:	f7ff ff7c 	bl	800b004 <BSP_SD_GetCardState>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d107      	bne.n	800b122 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b112:	4b07      	ldr	r3, [pc, #28]	; (800b130 <SD_CheckStatus+0x38>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b2db      	uxtb	r3, r3
 800b118:	f023 0301 	bic.w	r3, r3, #1
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	4b04      	ldr	r3, [pc, #16]	; (800b130 <SD_CheckStatus+0x38>)
 800b120:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b122:	4b03      	ldr	r3, [pc, #12]	; (800b130 <SD_CheckStatus+0x38>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	b2db      	uxtb	r3, r3
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	2000000d 	.word	0x2000000d

0800b134 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <SD_initialize+0x38>)
 800b140:	2201      	movs	r2, #1
 800b142:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b144:	f7ff fefc 	bl	800af40 <BSP_SD_Init>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d107      	bne.n	800b15e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b14e:	79fb      	ldrb	r3, [r7, #7]
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff ffd1 	bl	800b0f8 <SD_CheckStatus>
 800b156:	4603      	mov	r3, r0
 800b158:	461a      	mov	r2, r3
 800b15a:	4b04      	ldr	r3, [pc, #16]	; (800b16c <SD_initialize+0x38>)
 800b15c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b15e:	4b03      	ldr	r3, [pc, #12]	; (800b16c <SD_initialize+0x38>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	b2db      	uxtb	r3, r3
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	2000000d 	.word	0x2000000d

0800b170 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b17a:	79fb      	ldrb	r3, [r7, #7]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff ffbb 	bl	800b0f8 <SD_CheckStatus>
 800b182:	4603      	mov	r3, r0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	4603      	mov	r3, r0
 800b19a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b1a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	68b8      	ldr	r0, [r7, #8]
 800b1aa:	f7ff feef 	bl	800af8c <BSP_SD_ReadBlocks>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d107      	bne.n	800b1c4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b1b4:	bf00      	nop
 800b1b6:	f7ff ff25 	bl	800b004 <BSP_SD_GetCardState>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1fa      	bne.n	800b1b6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3718      	adds	r7, #24
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b086      	sub	sp, #24
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b1e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	6879      	ldr	r1, [r7, #4]
 800b1ea:	68b8      	ldr	r0, [r7, #8]
 800b1ec:	f7ff feec 	bl	800afc8 <BSP_SD_WriteBlocks>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d107      	bne.n	800b206 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b1f6:	bf00      	nop
 800b1f8:	f7ff ff04 	bl	800b004 <BSP_SD_GetCardState>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1fa      	bne.n	800b1f8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b206:	7dfb      	ldrb	r3, [r7, #23]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b08c      	sub	sp, #48	; 0x30
 800b214:	af00      	add	r7, sp, #0
 800b216:	4603      	mov	r3, r0
 800b218:	603a      	str	r2, [r7, #0]
 800b21a:	71fb      	strb	r3, [r7, #7]
 800b21c:	460b      	mov	r3, r1
 800b21e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b226:	4b25      	ldr	r3, [pc, #148]	; (800b2bc <SD_ioctl+0xac>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <SD_ioctl+0x28>
 800b234:	2303      	movs	r3, #3
 800b236:	e03c      	b.n	800b2b2 <SD_ioctl+0xa2>

  switch (cmd)
 800b238:	79bb      	ldrb	r3, [r7, #6]
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d834      	bhi.n	800b2a8 <SD_ioctl+0x98>
 800b23e:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <SD_ioctl+0x34>)
 800b240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b244:	0800b255 	.word	0x0800b255
 800b248:	0800b25d 	.word	0x0800b25d
 800b24c:	0800b275 	.word	0x0800b275
 800b250:	0800b28f 	.word	0x0800b28f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b25a:	e028      	b.n	800b2ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b25c:	f107 030c 	add.w	r3, r7, #12
 800b260:	4618      	mov	r0, r3
 800b262:	f7ff fedf 	bl	800b024 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b272:	e01c      	b.n	800b2ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b274:	f107 030c 	add.w	r3, r7, #12
 800b278:	4618      	mov	r0, r3
 800b27a:	f7ff fed3 	bl	800b024 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	b29a      	uxth	r2, r3
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b28c:	e00f      	b.n	800b2ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b28e:	f107 030c 	add.w	r3, r7, #12
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff fec6 	bl	800b024 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	0a5a      	lsrs	r2, r3, #9
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b2a6:	e002      	b.n	800b2ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b2ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3730      	adds	r7, #48	; 0x30
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	2000000d 	.word	0x2000000d

0800b2c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b2cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b2d0:	f005 fde6 	bl	8010ea0 <malloc>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d109      	bne.n	800b2f2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	32b0      	adds	r2, #176	; 0xb0
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	e0d4      	b.n	800b49c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b2f2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f006 f800 	bl	80112fe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	32b0      	adds	r2, #176	; 0xb0
 800b308:	68f9      	ldr	r1, [r7, #12]
 800b30a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	32b0      	adds	r2, #176	; 0xb0
 800b318:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	7c1b      	ldrb	r3, [r3, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d138      	bne.n	800b39c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b32a:	4b5e      	ldr	r3, [pc, #376]	; (800b4a4 <USBD_CDC_Init+0x1e4>)
 800b32c:	7819      	ldrb	r1, [r3, #0]
 800b32e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b332:	2202      	movs	r2, #2
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f005 fc10 	bl	8010b5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b33a:	4b5a      	ldr	r3, [pc, #360]	; (800b4a4 <USBD_CDC_Init+0x1e4>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	f003 020f 	and.w	r2, r3, #15
 800b342:	6879      	ldr	r1, [r7, #4]
 800b344:	4613      	mov	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	440b      	add	r3, r1
 800b34e:	3324      	adds	r3, #36	; 0x24
 800b350:	2201      	movs	r2, #1
 800b352:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b354:	4b54      	ldr	r3, [pc, #336]	; (800b4a8 <USBD_CDC_Init+0x1e8>)
 800b356:	7819      	ldrb	r1, [r3, #0]
 800b358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b35c:	2202      	movs	r2, #2
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f005 fbfb 	bl	8010b5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b364:	4b50      	ldr	r3, [pc, #320]	; (800b4a8 <USBD_CDC_Init+0x1e8>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	f003 020f 	and.w	r2, r3, #15
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	4613      	mov	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	440b      	add	r3, r1
 800b378:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b37c:	2201      	movs	r2, #1
 800b37e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b380:	4b4a      	ldr	r3, [pc, #296]	; (800b4ac <USBD_CDC_Init+0x1ec>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f003 020f 	and.w	r2, r3, #15
 800b388:	6879      	ldr	r1, [r7, #4]
 800b38a:	4613      	mov	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	440b      	add	r3, r1
 800b394:	3326      	adds	r3, #38	; 0x26
 800b396:	2210      	movs	r2, #16
 800b398:	801a      	strh	r2, [r3, #0]
 800b39a:	e035      	b.n	800b408 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b39c:	4b41      	ldr	r3, [pc, #260]	; (800b4a4 <USBD_CDC_Init+0x1e4>)
 800b39e:	7819      	ldrb	r1, [r3, #0]
 800b3a0:	2340      	movs	r3, #64	; 0x40
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f005 fbd8 	bl	8010b5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b3aa:	4b3e      	ldr	r3, [pc, #248]	; (800b4a4 <USBD_CDC_Init+0x1e4>)
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	f003 020f 	and.w	r2, r3, #15
 800b3b2:	6879      	ldr	r1, [r7, #4]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	440b      	add	r3, r1
 800b3be:	3324      	adds	r3, #36	; 0x24
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b3c4:	4b38      	ldr	r3, [pc, #224]	; (800b4a8 <USBD_CDC_Init+0x1e8>)
 800b3c6:	7819      	ldrb	r1, [r3, #0]
 800b3c8:	2340      	movs	r3, #64	; 0x40
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f005 fbc4 	bl	8010b5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b3d2:	4b35      	ldr	r3, [pc, #212]	; (800b4a8 <USBD_CDC_Init+0x1e8>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	f003 020f 	and.w	r2, r3, #15
 800b3da:	6879      	ldr	r1, [r7, #4]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	440b      	add	r3, r1
 800b3e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b3ee:	4b2f      	ldr	r3, [pc, #188]	; (800b4ac <USBD_CDC_Init+0x1ec>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	f003 020f 	and.w	r2, r3, #15
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	440b      	add	r3, r1
 800b402:	3326      	adds	r3, #38	; 0x26
 800b404:	2210      	movs	r2, #16
 800b406:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b408:	4b28      	ldr	r3, [pc, #160]	; (800b4ac <USBD_CDC_Init+0x1ec>)
 800b40a:	7819      	ldrb	r1, [r3, #0]
 800b40c:	2308      	movs	r3, #8
 800b40e:	2203      	movs	r2, #3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f005 fba2 	bl	8010b5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b416:	4b25      	ldr	r3, [pc, #148]	; (800b4ac <USBD_CDC_Init+0x1ec>)
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	f003 020f 	and.w	r2, r3, #15
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	440b      	add	r3, r1
 800b42a:	3324      	adds	r3, #36	; 0x24
 800b42c:	2201      	movs	r2, #1
 800b42e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	33b0      	adds	r3, #176	; 0xb0
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800b466:	2302      	movs	r3, #2
 800b468:	e018      	b.n	800b49c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	7c1b      	ldrb	r3, [r3, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b472:	4b0d      	ldr	r3, [pc, #52]	; (800b4a8 <USBD_CDC_Init+0x1e8>)
 800b474:	7819      	ldrb	r1, [r3, #0]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b47c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f005 fc59 	bl	8010d38 <USBD_LL_PrepareReceive>
 800b486:	e008      	b.n	800b49a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b488:	4b07      	ldr	r3, [pc, #28]	; (800b4a8 <USBD_CDC_Init+0x1e8>)
 800b48a:	7819      	ldrb	r1, [r3, #0]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b492:	2340      	movs	r3, #64	; 0x40
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f005 fc4f 	bl	8010d38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20000097 	.word	0x20000097
 800b4a8:	20000098 	.word	0x20000098
 800b4ac:	20000099 	.word	0x20000099

0800b4b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b4bc:	4b3a      	ldr	r3, [pc, #232]	; (800b5a8 <USBD_CDC_DeInit+0xf8>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f005 fb6f 	bl	8010ba6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b4c8:	4b37      	ldr	r3, [pc, #220]	; (800b5a8 <USBD_CDC_DeInit+0xf8>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	f003 020f 	and.w	r2, r3, #15
 800b4d0:	6879      	ldr	r1, [r7, #4]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	440b      	add	r3, r1
 800b4dc:	3324      	adds	r3, #36	; 0x24
 800b4de:	2200      	movs	r2, #0
 800b4e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b4e2:	4b32      	ldr	r3, [pc, #200]	; (800b5ac <USBD_CDC_DeInit+0xfc>)
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f005 fb5c 	bl	8010ba6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b4ee:	4b2f      	ldr	r3, [pc, #188]	; (800b5ac <USBD_CDC_DeInit+0xfc>)
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	f003 020f 	and.w	r2, r3, #15
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4413      	add	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	440b      	add	r3, r1
 800b502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b506:	2200      	movs	r2, #0
 800b508:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b50a:	4b29      	ldr	r3, [pc, #164]	; (800b5b0 <USBD_CDC_DeInit+0x100>)
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f005 fb48 	bl	8010ba6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b516:	4b26      	ldr	r3, [pc, #152]	; (800b5b0 <USBD_CDC_DeInit+0x100>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	f003 020f 	and.w	r2, r3, #15
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	4613      	mov	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	440b      	add	r3, r1
 800b52a:	3324      	adds	r3, #36	; 0x24
 800b52c:	2200      	movs	r2, #0
 800b52e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b530:	4b1f      	ldr	r3, [pc, #124]	; (800b5b0 <USBD_CDC_DeInit+0x100>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	f003 020f 	and.w	r2, r3, #15
 800b538:	6879      	ldr	r1, [r7, #4]
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	440b      	add	r3, r1
 800b544:	3326      	adds	r3, #38	; 0x26
 800b546:	2200      	movs	r2, #0
 800b548:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	32b0      	adds	r2, #176	; 0xb0
 800b554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d01f      	beq.n	800b59c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	33b0      	adds	r3, #176	; 0xb0
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	4413      	add	r3, r2
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	32b0      	adds	r2, #176	; 0xb0
 800b57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57e:	4618      	mov	r0, r3
 800b580:	f005 fc96 	bl	8010eb0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	32b0      	adds	r2, #176	; 0xb0
 800b58e:	2100      	movs	r1, #0
 800b590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3708      	adds	r7, #8
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20000097 	.word	0x20000097
 800b5ac:	20000098 	.word	0x20000098
 800b5b0:	20000099 	.word	0x20000099

0800b5b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	32b0      	adds	r2, #176	; 0xb0
 800b5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e0bf      	b.n	800b764 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d050      	beq.n	800b692 <USBD_CDC_Setup+0xde>
 800b5f0:	2b20      	cmp	r3, #32
 800b5f2:	f040 80af 	bne.w	800b754 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	88db      	ldrh	r3, [r3, #6]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d03a      	beq.n	800b674 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	b25b      	sxtb	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	da1b      	bge.n	800b640 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	33b0      	adds	r3, #176	; 0xb0
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b61e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	88d2      	ldrh	r2, [r2, #6]
 800b624:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	88db      	ldrh	r3, [r3, #6]
 800b62a:	2b07      	cmp	r3, #7
 800b62c:	bf28      	it	cs
 800b62e:	2307      	movcs	r3, #7
 800b630:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	89fa      	ldrh	r2, [r7, #14]
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f001 fdad 	bl	800d198 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b63e:	e090      	b.n	800b762 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	785a      	ldrb	r2, [r3, #1]
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	88db      	ldrh	r3, [r3, #6]
 800b64e:	2b3f      	cmp	r3, #63	; 0x3f
 800b650:	d803      	bhi.n	800b65a <USBD_CDC_Setup+0xa6>
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	88db      	ldrh	r3, [r3, #6]
 800b656:	b2da      	uxtb	r2, r3
 800b658:	e000      	b.n	800b65c <USBD_CDC_Setup+0xa8>
 800b65a:	2240      	movs	r2, #64	; 0x40
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b662:	6939      	ldr	r1, [r7, #16]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b66a:	461a      	mov	r2, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 fdbf 	bl	800d1f0 <USBD_CtlPrepareRx>
      break;
 800b672:	e076      	b.n	800b762 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	33b0      	adds	r3, #176	; 0xb0
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	7850      	ldrb	r0, [r2, #1]
 800b68a:	2200      	movs	r2, #0
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	4798      	blx	r3
      break;
 800b690:	e067      	b.n	800b762 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	785b      	ldrb	r3, [r3, #1]
 800b696:	2b0b      	cmp	r3, #11
 800b698:	d851      	bhi.n	800b73e <USBD_CDC_Setup+0x18a>
 800b69a:	a201      	add	r2, pc, #4	; (adr r2, 800b6a0 <USBD_CDC_Setup+0xec>)
 800b69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a0:	0800b6d1 	.word	0x0800b6d1
 800b6a4:	0800b74d 	.word	0x0800b74d
 800b6a8:	0800b73f 	.word	0x0800b73f
 800b6ac:	0800b73f 	.word	0x0800b73f
 800b6b0:	0800b73f 	.word	0x0800b73f
 800b6b4:	0800b73f 	.word	0x0800b73f
 800b6b8:	0800b73f 	.word	0x0800b73f
 800b6bc:	0800b73f 	.word	0x0800b73f
 800b6c0:	0800b73f 	.word	0x0800b73f
 800b6c4:	0800b73f 	.word	0x0800b73f
 800b6c8:	0800b6fb 	.word	0x0800b6fb
 800b6cc:	0800b725 	.word	0x0800b725
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d107      	bne.n	800b6ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b6dc:	f107 030a 	add.w	r3, r7, #10
 800b6e0:	2202      	movs	r2, #2
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f001 fd57 	bl	800d198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6ea:	e032      	b.n	800b752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 fce1 	bl	800d0b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	75fb      	strb	r3, [r7, #23]
          break;
 800b6f8:	e02b      	b.n	800b752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b03      	cmp	r3, #3
 800b704:	d107      	bne.n	800b716 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b706:	f107 030d 	add.w	r3, r7, #13
 800b70a:	2201      	movs	r2, #1
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f001 fd42 	bl	800d198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b714:	e01d      	b.n	800b752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f001 fccc 	bl	800d0b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b71e:	2303      	movs	r3, #3
 800b720:	75fb      	strb	r3, [r7, #23]
          break;
 800b722:	e016      	b.n	800b752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d00f      	beq.n	800b750 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 fcbf 	bl	800d0b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b738:	2303      	movs	r3, #3
 800b73a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b73c:	e008      	b.n	800b750 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 fcb8 	bl	800d0b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b746:	2303      	movs	r3, #3
 800b748:	75fb      	strb	r3, [r7, #23]
          break;
 800b74a:	e002      	b.n	800b752 <USBD_CDC_Setup+0x19e>
          break;
 800b74c:	bf00      	nop
 800b74e:	e008      	b.n	800b762 <USBD_CDC_Setup+0x1ae>
          break;
 800b750:	bf00      	nop
      }
      break;
 800b752:	e006      	b.n	800b762 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f001 fcad 	bl	800d0b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b75c:	2303      	movs	r3, #3
 800b75e:	75fb      	strb	r3, [r7, #23]
      break;
 800b760:	bf00      	nop
  }

  return (uint8_t)ret;
 800b762:	7dfb      	ldrb	r3, [r7, #23]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b77e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	32b0      	adds	r2, #176	; 0xb0
 800b78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b792:	2303      	movs	r3, #3
 800b794:	e065      	b.n	800b862 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	32b0      	adds	r2, #176	; 0xb0
 800b7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b7a6:	78fb      	ldrb	r3, [r7, #3]
 800b7a8:	f003 020f 	and.w	r2, r3, #15
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	440b      	add	r3, r1
 800b7b8:	3318      	adds	r3, #24
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d02f      	beq.n	800b820 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b7c0:	78fb      	ldrb	r3, [r7, #3]
 800b7c2:	f003 020f 	and.w	r2, r3, #15
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4413      	add	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	440b      	add	r3, r1
 800b7d2:	3318      	adds	r3, #24
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	78fb      	ldrb	r3, [r7, #3]
 800b7d8:	f003 010f 	and.w	r1, r3, #15
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	00db      	lsls	r3, r3, #3
 800b7e2:	440b      	add	r3, r1
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4403      	add	r3, r0
 800b7e8:	3348      	adds	r3, #72	; 0x48
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	fbb2 f1f3 	udiv	r1, r2, r3
 800b7f0:	fb01 f303 	mul.w	r3, r1, r3
 800b7f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d112      	bne.n	800b820 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b7fa:	78fb      	ldrb	r3, [r7, #3]
 800b7fc:	f003 020f 	and.w	r2, r3, #15
 800b800:	6879      	ldr	r1, [r7, #4]
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	440b      	add	r3, r1
 800b80c:	3318      	adds	r3, #24
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b812:	78f9      	ldrb	r1, [r7, #3]
 800b814:	2300      	movs	r3, #0
 800b816:	2200      	movs	r2, #0
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f005 fa6c 	bl	8010cf6 <USBD_LL_Transmit>
 800b81e:	e01f      	b.n	800b860 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2200      	movs	r2, #0
 800b824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	33b0      	adds	r3, #176	; 0xb0
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d010      	beq.n	800b860 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	33b0      	adds	r3, #176	; 0xb0
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	4413      	add	r3, r2
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b85c:	78fa      	ldrb	r2, [r7, #3]
 800b85e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b084      	sub	sp, #16
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	460b      	mov	r3, r1
 800b874:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	32b0      	adds	r2, #176	; 0xb0
 800b880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b884:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	32b0      	adds	r2, #176	; 0xb0
 800b890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b898:	2303      	movs	r3, #3
 800b89a:	e01a      	b.n	800b8d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b89c:	78fb      	ldrb	r3, [r7, #3]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f005 fa6a 	bl	8010d7a <USBD_LL_GetRxDataSize>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	33b0      	adds	r3, #176	; 0xb0
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4413      	add	r3, r2
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	32b0      	adds	r2, #176	; 0xb0
 800b8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e025      	b.n	800b948 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	33b0      	adds	r3, #176	; 0xb0
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01a      	beq.n	800b946 <USBD_CDC_EP0_RxReady+0x6c>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b916:	2bff      	cmp	r3, #255	; 0xff
 800b918:	d015      	beq.n	800b946 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	33b0      	adds	r3, #176	; 0xb0
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b932:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b93a:	b292      	uxth	r2, r2
 800b93c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	22ff      	movs	r2, #255	; 0xff
 800b942:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b958:	2182      	movs	r1, #130	; 0x82
 800b95a:	4818      	ldr	r0, [pc, #96]	; (800b9bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b95c:	f000 fd49 	bl	800c3f2 <USBD_GetEpDesc>
 800b960:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b962:	2101      	movs	r1, #1
 800b964:	4815      	ldr	r0, [pc, #84]	; (800b9bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b966:	f000 fd44 	bl	800c3f2 <USBD_GetEpDesc>
 800b96a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b96c:	2181      	movs	r1, #129	; 0x81
 800b96e:	4813      	ldr	r0, [pc, #76]	; (800b9bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b970:	f000 fd3f 	bl	800c3f2 <USBD_GetEpDesc>
 800b974:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2210      	movs	r2, #16
 800b980:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d006      	beq.n	800b996 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b990:	711a      	strb	r2, [r3, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d006      	beq.n	800b9aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9a4:	711a      	strb	r2, [r3, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2243      	movs	r2, #67	; 0x43
 800b9ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b9b0:	4b02      	ldr	r3, [pc, #8]	; (800b9bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3718      	adds	r7, #24
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20000054 	.word	0x20000054

0800b9c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b9c8:	2182      	movs	r1, #130	; 0x82
 800b9ca:	4818      	ldr	r0, [pc, #96]	; (800ba2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9cc:	f000 fd11 	bl	800c3f2 <USBD_GetEpDesc>
 800b9d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	4815      	ldr	r0, [pc, #84]	; (800ba2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9d6:	f000 fd0c 	bl	800c3f2 <USBD_GetEpDesc>
 800b9da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b9dc:	2181      	movs	r1, #129	; 0x81
 800b9de:	4813      	ldr	r0, [pc, #76]	; (800ba2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9e0:	f000 fd07 	bl	800c3f2 <USBD_GetEpDesc>
 800b9e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	2210      	movs	r2, #16
 800b9f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d006      	beq.n	800ba06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	711a      	strb	r2, [r3, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f042 0202 	orr.w	r2, r2, #2
 800ba04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d006      	beq.n	800ba1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	711a      	strb	r2, [r3, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f042 0202 	orr.w	r2, r2, #2
 800ba18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2243      	movs	r2, #67	; 0x43
 800ba1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba20:	4b02      	ldr	r3, [pc, #8]	; (800ba2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20000054 	.word	0x20000054

0800ba30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ba38:	2182      	movs	r1, #130	; 0x82
 800ba3a:	4818      	ldr	r0, [pc, #96]	; (800ba9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba3c:	f000 fcd9 	bl	800c3f2 <USBD_GetEpDesc>
 800ba40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ba42:	2101      	movs	r1, #1
 800ba44:	4815      	ldr	r0, [pc, #84]	; (800ba9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba46:	f000 fcd4 	bl	800c3f2 <USBD_GetEpDesc>
 800ba4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ba4c:	2181      	movs	r1, #129	; 0x81
 800ba4e:	4813      	ldr	r0, [pc, #76]	; (800ba9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba50:	f000 fccf 	bl	800c3f2 <USBD_GetEpDesc>
 800ba54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d002      	beq.n	800ba62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2210      	movs	r2, #16
 800ba60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d006      	beq.n	800ba76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba70:	711a      	strb	r2, [r3, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d006      	beq.n	800ba8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba84:	711a      	strb	r2, [r3, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2243      	movs	r2, #67	; 0x43
 800ba8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba90:	4b02      	ldr	r3, [pc, #8]	; (800ba9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3718      	adds	r7, #24
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000054 	.word	0x20000054

0800baa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	220a      	movs	r2, #10
 800baac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800baae:	4b03      	ldr	r3, [pc, #12]	; (800babc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	20000010 	.word	0x20000010

0800bac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e009      	b.n	800bae8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	33b0      	adds	r3, #176	; 0xb0
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b087      	sub	sp, #28
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	32b0      	adds	r2, #176	; 0xb0
 800bb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bb16:	2303      	movs	r3, #3
 800bb18:	e008      	b.n	800bb2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	371c      	adds	r7, #28
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	32b0      	adds	r2, #176	; 0xb0
 800bb4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	e004      	b.n	800bb66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
	...

0800bb74 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	32b0      	adds	r2, #176	; 0xb0
 800bb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bb96:	2303      	movs	r3, #3
 800bb98:	e025      	b.n	800bbe6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d11f      	bne.n	800bbe4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bbac:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <USBD_CDC_TransmitPacket+0x7c>)
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	f003 020f 	and.w	r2, r3, #15
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4403      	add	r3, r0
 800bbc6:	3318      	adds	r3, #24
 800bbc8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bbca:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <USBD_CDC_TransmitPacket+0x7c>)
 800bbcc:	7819      	ldrb	r1, [r3, #0]
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f005 f88b 	bl	8010cf6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20000097 	.word	0x20000097

0800bbf4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	32b0      	adds	r2, #176	; 0xb0
 800bc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	32b0      	adds	r2, #176	; 0xb0
 800bc16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d101      	bne.n	800bc22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	e018      	b.n	800bc54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	7c1b      	ldrb	r3, [r3, #16]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10a      	bne.n	800bc40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc2a:	4b0c      	ldr	r3, [pc, #48]	; (800bc5c <USBD_CDC_ReceivePacket+0x68>)
 800bc2c:	7819      	ldrb	r1, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f005 f87d 	bl	8010d38 <USBD_LL_PrepareReceive>
 800bc3e:	e008      	b.n	800bc52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc40:	4b06      	ldr	r3, [pc, #24]	; (800bc5c <USBD_CDC_ReceivePacket+0x68>)
 800bc42:	7819      	ldrb	r1, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc4a:	2340      	movs	r3, #64	; 0x40
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f005 f873 	bl	8010d38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	20000098 	.word	0x20000098

0800bc60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc74:	2303      	movs	r3, #3
 800bc76:	e01f      	b.n	800bcb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2201      	movs	r2, #1
 800bca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	79fa      	ldrb	r2, [r7, #7]
 800bcaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f004 feed 	bl	8010a8c <USBD_LL_Init>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e025      	b.n	800bd24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	32ae      	adds	r2, #174	; 0xae
 800bcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00f      	beq.n	800bd14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	32ae      	adds	r2, #174	; 0xae
 800bcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	f107 020e 	add.w	r2, r7, #14
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4798      	blx	r3
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f004 fef5 	bl	8010b24 <USBD_LL_Start>
 800bd3a:	4603      	mov	r3, r0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d009      	beq.n	800bd88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	78fa      	ldrb	r2, [r7, #3]
 800bd7e:	4611      	mov	r1, r2
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	4798      	blx	r3
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	78fa      	ldrb	r2, [r7, #3]
 800bdac:	4611      	mov	r1, r2
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	4798      	blx	r3
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d001      	beq.n	800bdbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b084      	sub	sp, #16
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bdd6:	6839      	ldr	r1, [r7, #0]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f001 f932 	bl	800d042 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2201      	movs	r2, #1
 800bde2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bdec:	461a      	mov	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bdfa:	f003 031f 	and.w	r3, r3, #31
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d01a      	beq.n	800be38 <USBD_LL_SetupStage+0x72>
 800be02:	2b02      	cmp	r3, #2
 800be04:	d822      	bhi.n	800be4c <USBD_LL_SetupStage+0x86>
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <USBD_LL_SetupStage+0x4a>
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d00a      	beq.n	800be24 <USBD_LL_SetupStage+0x5e>
 800be0e:	e01d      	b.n	800be4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fb5f 	bl	800c4dc <USBD_StdDevReq>
 800be1e:	4603      	mov	r3, r0
 800be20:	73fb      	strb	r3, [r7, #15]
      break;
 800be22:	e020      	b.n	800be66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fbc7 	bl	800c5c0 <USBD_StdItfReq>
 800be32:	4603      	mov	r3, r0
 800be34:	73fb      	strb	r3, [r7, #15]
      break;
 800be36:	e016      	b.n	800be66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fc29 	bl	800c698 <USBD_StdEPReq>
 800be46:	4603      	mov	r3, r0
 800be48:	73fb      	strb	r3, [r7, #15]
      break;
 800be4a:	e00c      	b.n	800be66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be56:	b2db      	uxtb	r3, r3
 800be58:	4619      	mov	r1, r3
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f004 fec2 	bl	8010be4 <USBD_LL_StallEP>
 800be60:	4603      	mov	r3, r0
 800be62:	73fb      	strb	r3, [r7, #15]
      break;
 800be64:	bf00      	nop
  }

  return ret;
 800be66:	7bfb      	ldrb	r3, [r7, #15]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	460b      	mov	r3, r1
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800be82:	7afb      	ldrb	r3, [r7, #11]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d16e      	bne.n	800bf66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800be8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be96:	2b03      	cmp	r3, #3
 800be98:	f040 8098 	bne.w	800bfcc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	689a      	ldr	r2, [r3, #8]
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d913      	bls.n	800bed0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	689a      	ldr	r2, [r3, #8]
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	1ad2      	subs	r2, r2, r3
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	68da      	ldr	r2, [r3, #12]
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	4293      	cmp	r3, r2
 800bec0:	bf28      	it	cs
 800bec2:	4613      	movcs	r3, r2
 800bec4:	461a      	mov	r2, r3
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f001 f9ae 	bl	800d22a <USBD_CtlContinueRx>
 800bece:	e07d      	b.n	800bfcc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bed6:	f003 031f 	and.w	r3, r3, #31
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d014      	beq.n	800bf08 <USBD_LL_DataOutStage+0x98>
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d81d      	bhi.n	800bf1e <USBD_LL_DataOutStage+0xae>
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d002      	beq.n	800beec <USBD_LL_DataOutStage+0x7c>
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d003      	beq.n	800bef2 <USBD_LL_DataOutStage+0x82>
 800beea:	e018      	b.n	800bf1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	75bb      	strb	r3, [r7, #22]
            break;
 800bef0:	e018      	b.n	800bf24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	4619      	mov	r1, r3
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f000 fa5e 	bl	800c3be <USBD_CoreFindIF>
 800bf02:	4603      	mov	r3, r0
 800bf04:	75bb      	strb	r3, [r7, #22]
            break;
 800bf06:	e00d      	b.n	800bf24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	4619      	mov	r1, r3
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f000 fa60 	bl	800c3d8 <USBD_CoreFindEP>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	75bb      	strb	r3, [r7, #22]
            break;
 800bf1c:	e002      	b.n	800bf24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	75bb      	strb	r3, [r7, #22]
            break;
 800bf22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bf24:	7dbb      	ldrb	r3, [r7, #22]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d119      	bne.n	800bf5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d113      	bne.n	800bf5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bf36:	7dba      	ldrb	r2, [r7, #22]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	32ae      	adds	r2, #174	; 0xae
 800bf3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00b      	beq.n	800bf5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bf46:	7dba      	ldrb	r2, [r7, #22]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bf4e:	7dba      	ldrb	r2, [r7, #22]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	32ae      	adds	r2, #174	; 0xae
 800bf54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f001 f974 	bl	800d24c <USBD_CtlSendStatus>
 800bf64:	e032      	b.n	800bfcc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bf66:	7afb      	ldrb	r3, [r7, #11]
 800bf68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	4619      	mov	r1, r3
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f000 fa31 	bl	800c3d8 <USBD_CoreFindEP>
 800bf76:	4603      	mov	r3, r0
 800bf78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf7a:	7dbb      	ldrb	r3, [r7, #22]
 800bf7c:	2bff      	cmp	r3, #255	; 0xff
 800bf7e:	d025      	beq.n	800bfcc <USBD_LL_DataOutStage+0x15c>
 800bf80:	7dbb      	ldrb	r3, [r7, #22]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d122      	bne.n	800bfcc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	d117      	bne.n	800bfc2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bf92:	7dba      	ldrb	r2, [r7, #22]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	32ae      	adds	r2, #174	; 0xae
 800bf98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf9c:	699b      	ldr	r3, [r3, #24]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00f      	beq.n	800bfc2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bfa2:	7dba      	ldrb	r2, [r7, #22]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bfaa:	7dba      	ldrb	r2, [r7, #22]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	32ae      	adds	r2, #174	; 0xae
 800bfb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	7afa      	ldrb	r2, [r7, #11]
 800bfb8:	4611      	mov	r1, r2
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	4798      	blx	r3
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bfc2:	7dfb      	ldrb	r3, [r7, #23]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bfc8:	7dfb      	ldrb	r3, [r7, #23]
 800bfca:	e000      	b.n	800bfce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b086      	sub	sp, #24
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	607a      	str	r2, [r7, #4]
 800bfe2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bfe4:	7afb      	ldrb	r3, [r7, #11]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d16f      	bne.n	800c0ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3314      	adds	r3, #20
 800bfee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d15a      	bne.n	800c0b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	689a      	ldr	r2, [r3, #8]
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	429a      	cmp	r2, r3
 800c004:	d914      	bls.n	800c030 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	689a      	ldr	r2, [r3, #8]
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	461a      	mov	r2, r3
 800c01a:	6879      	ldr	r1, [r7, #4]
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f001 f8d6 	bl	800d1ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c022:	2300      	movs	r3, #0
 800c024:	2200      	movs	r2, #0
 800c026:	2100      	movs	r1, #0
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f004 fe85 	bl	8010d38 <USBD_LL_PrepareReceive>
 800c02e:	e03f      	b.n	800c0b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	68da      	ldr	r2, [r3, #12]
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d11c      	bne.n	800c076 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	685a      	ldr	r2, [r3, #4]
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c044:	429a      	cmp	r2, r3
 800c046:	d316      	bcc.n	800c076 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c052:	429a      	cmp	r2, r3
 800c054:	d20f      	bcs.n	800c076 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c056:	2200      	movs	r2, #0
 800c058:	2100      	movs	r1, #0
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f001 f8b7 	bl	800d1ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c068:	2300      	movs	r3, #0
 800c06a:	2200      	movs	r2, #0
 800c06c:	2100      	movs	r1, #0
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f004 fe62 	bl	8010d38 <USBD_LL_PrepareReceive>
 800c074:	e01c      	b.n	800c0b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d10f      	bne.n	800c0a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d009      	beq.n	800c0a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0a2:	2180      	movs	r1, #128	; 0x80
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f004 fd9d 	bl	8010be4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f001 f8e1 	bl	800d272 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d03a      	beq.n	800c130 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f7ff fe42 	bl	800bd44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c0c8:	e032      	b.n	800c130 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c0ca:	7afb      	ldrb	r3, [r7, #11]
 800c0cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f000 f97f 	bl	800c3d8 <USBD_CoreFindEP>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0de:	7dfb      	ldrb	r3, [r7, #23]
 800c0e0:	2bff      	cmp	r3, #255	; 0xff
 800c0e2:	d025      	beq.n	800c130 <USBD_LL_DataInStage+0x15a>
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d122      	bne.n	800c130 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b03      	cmp	r3, #3
 800c0f4:	d11c      	bne.n	800c130 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c0f6:	7dfa      	ldrb	r2, [r7, #23]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	32ae      	adds	r2, #174	; 0xae
 800c0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d014      	beq.n	800c130 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c106:	7dfa      	ldrb	r2, [r7, #23]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c10e:	7dfa      	ldrb	r2, [r7, #23]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	32ae      	adds	r2, #174	; 0xae
 800c114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	7afa      	ldrb	r2, [r7, #11]
 800c11c:	4611      	mov	r1, r2
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	4798      	blx	r3
 800c122:	4603      	mov	r3, r0
 800c124:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c126:	7dbb      	ldrb	r3, [r7, #22]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c12c:	7dbb      	ldrb	r3, [r7, #22]
 800c12e:	e000      	b.n	800c132 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2201      	movs	r2, #1
 800c14a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c172:	2b00      	cmp	r3, #0
 800c174:	d014      	beq.n	800c1a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00e      	beq.n	800c1a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	6852      	ldr	r2, [r2, #4]
 800c18e:	b2d2      	uxtb	r2, r2
 800c190:	4611      	mov	r1, r2
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	4798      	blx	r3
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c19c:	2303      	movs	r3, #3
 800c19e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1a0:	2340      	movs	r3, #64	; 0x40
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f004 fcd7 	bl	8010b5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2240      	movs	r2, #64	; 0x40
 800c1b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1bc:	2340      	movs	r3, #64	; 0x40
 800c1be:	2200      	movs	r2, #0
 800c1c0:	2180      	movs	r1, #128	; 0x80
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f004 fcc9 	bl	8010b5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2240      	movs	r2, #64	; 0x40
 800c1d2:	621a      	str	r2, [r3, #32]

  return ret;
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	78fa      	ldrb	r2, [r7, #3]
 800c1ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	370c      	adds	r7, #12
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c1fe:	b480      	push	{r7}
 800c200:	b083      	sub	sp, #12
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2204      	movs	r2, #4
 800c218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c22a:	b480      	push	{r7}
 800c22c:	b083      	sub	sp, #12
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d106      	bne.n	800c24c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c244:	b2da      	uxtb	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b082      	sub	sp, #8
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d110      	bne.n	800c290 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00b      	beq.n	800c290 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27e:	69db      	ldr	r3, [r3, #28]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d005      	beq.n	800c290 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c28a:	69db      	ldr	r3, [r3, #28]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b082      	sub	sp, #8
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	32ae      	adds	r2, #174	; 0xae
 800c2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d101      	bne.n	800c2bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c2b8:	2303      	movs	r3, #3
 800c2ba:	e01c      	b.n	800c2f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	2b03      	cmp	r3, #3
 800c2c6:	d115      	bne.n	800c2f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	32ae      	adds	r2, #174	; 0xae
 800c2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d6:	6a1b      	ldr	r3, [r3, #32]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	32ae      	adds	r2, #174	; 0xae
 800c2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ea:	6a1b      	ldr	r3, [r3, #32]
 800c2ec:	78fa      	ldrb	r2, [r7, #3]
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	460b      	mov	r3, r1
 800c308:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	32ae      	adds	r2, #174	; 0xae
 800c314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d101      	bne.n	800c320 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e01c      	b.n	800c35a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c326:	b2db      	uxtb	r3, r3
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d115      	bne.n	800c358 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	32ae      	adds	r2, #174	; 0xae
 800c336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00b      	beq.n	800c358 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	32ae      	adds	r2, #174	; 0xae
 800c34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c350:	78fa      	ldrb	r2, [r7, #3]
 800c352:	4611      	mov	r1, r2
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c362:	b480      	push	{r7}
 800c364:	b083      	sub	sp, #12
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00e      	beq.n	800c3b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	6852      	ldr	r2, [r2, #4]
 800c3a2:	b2d2      	uxtb	r2, r2
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c3be:	b480      	push	{r7}
 800c3c0:	b083      	sub	sp, #12
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c3ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c3e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b086      	sub	sp, #24
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c406:	2300      	movs	r3, #0
 800c408:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	885b      	ldrh	r3, [r3, #2]
 800c40e:	b29a      	uxth	r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	b29b      	uxth	r3, r3
 800c416:	429a      	cmp	r2, r3
 800c418:	d920      	bls.n	800c45c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c422:	e013      	b.n	800c44c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c424:	f107 030a 	add.w	r3, r7, #10
 800c428:	4619      	mov	r1, r3
 800c42a:	6978      	ldr	r0, [r7, #20]
 800c42c:	f000 f81b 	bl	800c466 <USBD_GetNextDesc>
 800c430:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	785b      	ldrb	r3, [r3, #1]
 800c436:	2b05      	cmp	r3, #5
 800c438:	d108      	bne.n	800c44c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	789b      	ldrb	r3, [r3, #2]
 800c442:	78fa      	ldrb	r2, [r7, #3]
 800c444:	429a      	cmp	r2, r3
 800c446:	d008      	beq.n	800c45a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c448:	2300      	movs	r3, #0
 800c44a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	885b      	ldrh	r3, [r3, #2]
 800c450:	b29a      	uxth	r2, r3
 800c452:	897b      	ldrh	r3, [r7, #10]
 800c454:	429a      	cmp	r2, r3
 800c456:	d8e5      	bhi.n	800c424 <USBD_GetEpDesc+0x32>
 800c458:	e000      	b.n	800c45c <USBD_GetEpDesc+0x6a>
          break;
 800c45a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c45c:	693b      	ldr	r3, [r7, #16]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c466:	b480      	push	{r7}
 800c468:	b085      	sub	sp, #20
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	881a      	ldrh	r2, [r3, #0]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	4413      	add	r3, r2
 800c480:	b29a      	uxth	r2, r3
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	461a      	mov	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4413      	add	r3, r2
 800c490:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c492:	68fb      	ldr	r3, [r7, #12]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b087      	sub	sp, #28
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c4be:	8a3b      	ldrh	r3, [r7, #16]
 800c4c0:	021b      	lsls	r3, r3, #8
 800c4c2:	b21a      	sxth	r2, r3
 800c4c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	b21b      	sxth	r3, r3
 800c4cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c4ce:	89fb      	ldrh	r3, [r7, #14]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	371c      	adds	r7, #28
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4f2:	2b40      	cmp	r3, #64	; 0x40
 800c4f4:	d005      	beq.n	800c502 <USBD_StdDevReq+0x26>
 800c4f6:	2b40      	cmp	r3, #64	; 0x40
 800c4f8:	d857      	bhi.n	800c5aa <USBD_StdDevReq+0xce>
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00f      	beq.n	800c51e <USBD_StdDevReq+0x42>
 800c4fe:	2b20      	cmp	r3, #32
 800c500:	d153      	bne.n	800c5aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	32ae      	adds	r2, #174	; 0xae
 800c50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	6839      	ldr	r1, [r7, #0]
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	4798      	blx	r3
 800c518:	4603      	mov	r3, r0
 800c51a:	73fb      	strb	r3, [r7, #15]
      break;
 800c51c:	e04a      	b.n	800c5b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	785b      	ldrb	r3, [r3, #1]
 800c522:	2b09      	cmp	r3, #9
 800c524:	d83b      	bhi.n	800c59e <USBD_StdDevReq+0xc2>
 800c526:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <USBD_StdDevReq+0x50>)
 800c528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52c:	0800c581 	.word	0x0800c581
 800c530:	0800c595 	.word	0x0800c595
 800c534:	0800c59f 	.word	0x0800c59f
 800c538:	0800c58b 	.word	0x0800c58b
 800c53c:	0800c59f 	.word	0x0800c59f
 800c540:	0800c55f 	.word	0x0800c55f
 800c544:	0800c555 	.word	0x0800c555
 800c548:	0800c59f 	.word	0x0800c59f
 800c54c:	0800c577 	.word	0x0800c577
 800c550:	0800c569 	.word	0x0800c569
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c554:	6839      	ldr	r1, [r7, #0]
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fa3c 	bl	800c9d4 <USBD_GetDescriptor>
          break;
 800c55c:	e024      	b.n	800c5a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c55e:	6839      	ldr	r1, [r7, #0]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 fbcb 	bl	800ccfc <USBD_SetAddress>
          break;
 800c566:	e01f      	b.n	800c5a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fc0a 	bl	800cd84 <USBD_SetConfig>
 800c570:	4603      	mov	r3, r0
 800c572:	73fb      	strb	r3, [r7, #15]
          break;
 800c574:	e018      	b.n	800c5a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fcad 	bl	800ced8 <USBD_GetConfig>
          break;
 800c57e:	e013      	b.n	800c5a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fcde 	bl	800cf44 <USBD_GetStatus>
          break;
 800c588:	e00e      	b.n	800c5a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fd0d 	bl	800cfac <USBD_SetFeature>
          break;
 800c592:	e009      	b.n	800c5a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fd31 	bl	800cffe <USBD_ClrFeature>
          break;
 800c59c:	e004      	b.n	800c5a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fd88 	bl	800d0b6 <USBD_CtlError>
          break;
 800c5a6:	bf00      	nop
      }
      break;
 800c5a8:	e004      	b.n	800c5b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 fd82 	bl	800d0b6 <USBD_CtlError>
      break;
 800c5b2:	bf00      	nop
  }

  return ret;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop

0800c5c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5d6:	2b40      	cmp	r3, #64	; 0x40
 800c5d8:	d005      	beq.n	800c5e6 <USBD_StdItfReq+0x26>
 800c5da:	2b40      	cmp	r3, #64	; 0x40
 800c5dc:	d852      	bhi.n	800c684 <USBD_StdItfReq+0xc4>
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <USBD_StdItfReq+0x26>
 800c5e2:	2b20      	cmp	r3, #32
 800c5e4:	d14e      	bne.n	800c684 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d840      	bhi.n	800c676 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	889b      	ldrh	r3, [r3, #4]
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d836      	bhi.n	800c66c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	889b      	ldrh	r3, [r3, #4]
 800c602:	b2db      	uxtb	r3, r3
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff fed9 	bl	800c3be <USBD_CoreFindIF>
 800c60c:	4603      	mov	r3, r0
 800c60e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c610:	7bbb      	ldrb	r3, [r7, #14]
 800c612:	2bff      	cmp	r3, #255	; 0xff
 800c614:	d01d      	beq.n	800c652 <USBD_StdItfReq+0x92>
 800c616:	7bbb      	ldrb	r3, [r7, #14]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d11a      	bne.n	800c652 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c61c:	7bba      	ldrb	r2, [r7, #14]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	32ae      	adds	r2, #174	; 0xae
 800c622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00f      	beq.n	800c64c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c62c:	7bba      	ldrb	r2, [r7, #14]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c634:	7bba      	ldrb	r2, [r7, #14]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	32ae      	adds	r2, #174	; 0xae
 800c63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	4798      	blx	r3
 800c646:	4603      	mov	r3, r0
 800c648:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c64a:	e004      	b.n	800c656 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c64c:	2303      	movs	r3, #3
 800c64e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c650:	e001      	b.n	800c656 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c652:	2303      	movs	r3, #3
 800c654:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	88db      	ldrh	r3, [r3, #6]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d110      	bne.n	800c680 <USBD_StdItfReq+0xc0>
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10d      	bne.n	800c680 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fdf1 	bl	800d24c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c66a:	e009      	b.n	800c680 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fd21 	bl	800d0b6 <USBD_CtlError>
          break;
 800c674:	e004      	b.n	800c680 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c676:	6839      	ldr	r1, [r7, #0]
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 fd1c 	bl	800d0b6 <USBD_CtlError>
          break;
 800c67e:	e000      	b.n	800c682 <USBD_StdItfReq+0xc2>
          break;
 800c680:	bf00      	nop
      }
      break;
 800c682:	e004      	b.n	800c68e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fd15 	bl	800d0b6 <USBD_CtlError>
      break;
 800c68c:	bf00      	nop
  }

  return ret;
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	889b      	ldrh	r3, [r3, #4]
 800c6aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6b4:	2b40      	cmp	r3, #64	; 0x40
 800c6b6:	d007      	beq.n	800c6c8 <USBD_StdEPReq+0x30>
 800c6b8:	2b40      	cmp	r3, #64	; 0x40
 800c6ba:	f200 817f 	bhi.w	800c9bc <USBD_StdEPReq+0x324>
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d02a      	beq.n	800c718 <USBD_StdEPReq+0x80>
 800c6c2:	2b20      	cmp	r3, #32
 800c6c4:	f040 817a 	bne.w	800c9bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f7ff fe83 	bl	800c3d8 <USBD_CoreFindEP>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6d6:	7b7b      	ldrb	r3, [r7, #13]
 800c6d8:	2bff      	cmp	r3, #255	; 0xff
 800c6da:	f000 8174 	beq.w	800c9c6 <USBD_StdEPReq+0x32e>
 800c6de:	7b7b      	ldrb	r3, [r7, #13]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f040 8170 	bne.w	800c9c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c6e6:	7b7a      	ldrb	r2, [r7, #13]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c6ee:	7b7a      	ldrb	r2, [r7, #13]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	32ae      	adds	r2, #174	; 0xae
 800c6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f000 8163 	beq.w	800c9c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c700:	7b7a      	ldrb	r2, [r7, #13]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	32ae      	adds	r2, #174	; 0xae
 800c706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	4798      	blx	r3
 800c712:	4603      	mov	r3, r0
 800c714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c716:	e156      	b.n	800c9c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	785b      	ldrb	r3, [r3, #1]
 800c71c:	2b03      	cmp	r3, #3
 800c71e:	d008      	beq.n	800c732 <USBD_StdEPReq+0x9a>
 800c720:	2b03      	cmp	r3, #3
 800c722:	f300 8145 	bgt.w	800c9b0 <USBD_StdEPReq+0x318>
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 809b 	beq.w	800c862 <USBD_StdEPReq+0x1ca>
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d03c      	beq.n	800c7aa <USBD_StdEPReq+0x112>
 800c730:	e13e      	b.n	800c9b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	2b02      	cmp	r3, #2
 800c73c:	d002      	beq.n	800c744 <USBD_StdEPReq+0xac>
 800c73e:	2b03      	cmp	r3, #3
 800c740:	d016      	beq.n	800c770 <USBD_StdEPReq+0xd8>
 800c742:	e02c      	b.n	800c79e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c744:	7bbb      	ldrb	r3, [r7, #14]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00d      	beq.n	800c766 <USBD_StdEPReq+0xce>
 800c74a:	7bbb      	ldrb	r3, [r7, #14]
 800c74c:	2b80      	cmp	r3, #128	; 0x80
 800c74e:	d00a      	beq.n	800c766 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c750:	7bbb      	ldrb	r3, [r7, #14]
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f004 fa45 	bl	8010be4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c75a:	2180      	movs	r1, #128	; 0x80
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f004 fa41 	bl	8010be4 <USBD_LL_StallEP>
 800c762:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c764:	e020      	b.n	800c7a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 fca4 	bl	800d0b6 <USBD_CtlError>
              break;
 800c76e:	e01b      	b.n	800c7a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	885b      	ldrh	r3, [r3, #2]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10e      	bne.n	800c796 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c778:	7bbb      	ldrb	r3, [r7, #14]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00b      	beq.n	800c796 <USBD_StdEPReq+0xfe>
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
 800c780:	2b80      	cmp	r3, #128	; 0x80
 800c782:	d008      	beq.n	800c796 <USBD_StdEPReq+0xfe>
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	88db      	ldrh	r3, [r3, #6]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d104      	bne.n	800c796 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c78c:	7bbb      	ldrb	r3, [r7, #14]
 800c78e:	4619      	mov	r1, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f004 fa27 	bl	8010be4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fd58 	bl	800d24c <USBD_CtlSendStatus>

              break;
 800c79c:	e004      	b.n	800c7a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c79e:	6839      	ldr	r1, [r7, #0]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fc88 	bl	800d0b6 <USBD_CtlError>
              break;
 800c7a6:	bf00      	nop
          }
          break;
 800c7a8:	e107      	b.n	800c9ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d002      	beq.n	800c7bc <USBD_StdEPReq+0x124>
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	d016      	beq.n	800c7e8 <USBD_StdEPReq+0x150>
 800c7ba:	e04b      	b.n	800c854 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7bc:	7bbb      	ldrb	r3, [r7, #14]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00d      	beq.n	800c7de <USBD_StdEPReq+0x146>
 800c7c2:	7bbb      	ldrb	r3, [r7, #14]
 800c7c4:	2b80      	cmp	r3, #128	; 0x80
 800c7c6:	d00a      	beq.n	800c7de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7c8:	7bbb      	ldrb	r3, [r7, #14]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f004 fa09 	bl	8010be4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7d2:	2180      	movs	r1, #128	; 0x80
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f004 fa05 	bl	8010be4 <USBD_LL_StallEP>
 800c7da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c7dc:	e040      	b.n	800c860 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c7de:	6839      	ldr	r1, [r7, #0]
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fc68 	bl	800d0b6 <USBD_CtlError>
              break;
 800c7e6:	e03b      	b.n	800c860 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	885b      	ldrh	r3, [r3, #2]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d136      	bne.n	800c85e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d004      	beq.n	800c804 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7fa:	7bbb      	ldrb	r3, [r7, #14]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f004 fa0f 	bl	8010c22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fd21 	bl	800d24c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c80a:	7bbb      	ldrb	r3, [r7, #14]
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7ff fde2 	bl	800c3d8 <USBD_CoreFindEP>
 800c814:	4603      	mov	r3, r0
 800c816:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c818:	7b7b      	ldrb	r3, [r7, #13]
 800c81a:	2bff      	cmp	r3, #255	; 0xff
 800c81c:	d01f      	beq.n	800c85e <USBD_StdEPReq+0x1c6>
 800c81e:	7b7b      	ldrb	r3, [r7, #13]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d11c      	bne.n	800c85e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c824:	7b7a      	ldrb	r2, [r7, #13]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c82c:	7b7a      	ldrb	r2, [r7, #13]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	32ae      	adds	r2, #174	; 0xae
 800c832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d010      	beq.n	800c85e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c83c:	7b7a      	ldrb	r2, [r7, #13]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	32ae      	adds	r2, #174	; 0xae
 800c842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	4798      	blx	r3
 800c84e:	4603      	mov	r3, r0
 800c850:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c852:	e004      	b.n	800c85e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fc2d 	bl	800d0b6 <USBD_CtlError>
              break;
 800c85c:	e000      	b.n	800c860 <USBD_StdEPReq+0x1c8>
              break;
 800c85e:	bf00      	nop
          }
          break;
 800c860:	e0ab      	b.n	800c9ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d002      	beq.n	800c874 <USBD_StdEPReq+0x1dc>
 800c86e:	2b03      	cmp	r3, #3
 800c870:	d032      	beq.n	800c8d8 <USBD_StdEPReq+0x240>
 800c872:	e097      	b.n	800c9a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c874:	7bbb      	ldrb	r3, [r7, #14]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d007      	beq.n	800c88a <USBD_StdEPReq+0x1f2>
 800c87a:	7bbb      	ldrb	r3, [r7, #14]
 800c87c:	2b80      	cmp	r3, #128	; 0x80
 800c87e:	d004      	beq.n	800c88a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c880:	6839      	ldr	r1, [r7, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fc17 	bl	800d0b6 <USBD_CtlError>
                break;
 800c888:	e091      	b.n	800c9ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c88a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	da0b      	bge.n	800c8aa <USBD_StdEPReq+0x212>
 800c892:	7bbb      	ldrb	r3, [r7, #14]
 800c894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c898:	4613      	mov	r3, r2
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4413      	add	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	3310      	adds	r3, #16
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	e00b      	b.n	800c8c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4413      	add	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	4413      	add	r3, r2
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fc61 	bl	800d198 <USBD_CtlSendData>
              break;
 800c8d6:	e06a      	b.n	800c9ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c8d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	da11      	bge.n	800c904 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c8e0:	7bbb      	ldrb	r3, [r7, #14]
 800c8e2:	f003 020f 	and.w	r2, r3, #15
 800c8e6:	6879      	ldr	r1, [r7, #4]
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4413      	add	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	440b      	add	r3, r1
 800c8f2:	3324      	adds	r3, #36	; 0x24
 800c8f4:	881b      	ldrh	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d117      	bne.n	800c92a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fbda 	bl	800d0b6 <USBD_CtlError>
                  break;
 800c902:	e054      	b.n	800c9ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	f003 020f 	and.w	r2, r3, #15
 800c90a:	6879      	ldr	r1, [r7, #4]
 800c90c:	4613      	mov	r3, r2
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	4413      	add	r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	440b      	add	r3, r1
 800c916:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c91a:	881b      	ldrh	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d104      	bne.n	800c92a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fbc7 	bl	800d0b6 <USBD_CtlError>
                  break;
 800c928:	e041      	b.n	800c9ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c92a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	da0b      	bge.n	800c94a <USBD_StdEPReq+0x2b2>
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c938:	4613      	mov	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	4413      	add	r3, r2
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	3310      	adds	r3, #16
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	4413      	add	r3, r2
 800c946:	3304      	adds	r3, #4
 800c948:	e00b      	b.n	800c962 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c94a:	7bbb      	ldrb	r3, [r7, #14]
 800c94c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c950:	4613      	mov	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	4413      	add	r3, r2
 800c960:	3304      	adds	r3, #4
 800c962:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c964:	7bbb      	ldrb	r3, [r7, #14]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d002      	beq.n	800c970 <USBD_StdEPReq+0x2d8>
 800c96a:	7bbb      	ldrb	r3, [r7, #14]
 800c96c:	2b80      	cmp	r3, #128	; 0x80
 800c96e:	d103      	bne.n	800c978 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
 800c976:	e00e      	b.n	800c996 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	4619      	mov	r1, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f004 f96f 	bl	8010c60 <USBD_LL_IsStallEP>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d003      	beq.n	800c990 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2201      	movs	r2, #1
 800c98c:	601a      	str	r2, [r3, #0]
 800c98e:	e002      	b.n	800c996 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2202      	movs	r2, #2
 800c99a:	4619      	mov	r1, r3
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fbfb 	bl	800d198 <USBD_CtlSendData>
              break;
 800c9a2:	e004      	b.n	800c9ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c9a4:	6839      	ldr	r1, [r7, #0]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fb85 	bl	800d0b6 <USBD_CtlError>
              break;
 800c9ac:	bf00      	nop
          }
          break;
 800c9ae:	e004      	b.n	800c9ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fb7f 	bl	800d0b6 <USBD_CtlError>
          break;
 800c9b8:	bf00      	nop
      }
      break;
 800c9ba:	e005      	b.n	800c9c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c9bc:	6839      	ldr	r1, [r7, #0]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 fb79 	bl	800d0b6 <USBD_CtlError>
      break;
 800c9c4:	e000      	b.n	800c9c8 <USBD_StdEPReq+0x330>
      break;
 800c9c6:	bf00      	nop
  }

  return ret;
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
	...

0800c9d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	885b      	ldrh	r3, [r3, #2]
 800c9ee:	0a1b      	lsrs	r3, r3, #8
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	2b0e      	cmp	r3, #14
 800c9f6:	f200 8152 	bhi.w	800cc9e <USBD_GetDescriptor+0x2ca>
 800c9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ca00 <USBD_GetDescriptor+0x2c>)
 800c9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca00:	0800ca71 	.word	0x0800ca71
 800ca04:	0800ca89 	.word	0x0800ca89
 800ca08:	0800cac9 	.word	0x0800cac9
 800ca0c:	0800cc9f 	.word	0x0800cc9f
 800ca10:	0800cc9f 	.word	0x0800cc9f
 800ca14:	0800cc3f 	.word	0x0800cc3f
 800ca18:	0800cc6b 	.word	0x0800cc6b
 800ca1c:	0800cc9f 	.word	0x0800cc9f
 800ca20:	0800cc9f 	.word	0x0800cc9f
 800ca24:	0800cc9f 	.word	0x0800cc9f
 800ca28:	0800cc9f 	.word	0x0800cc9f
 800ca2c:	0800cc9f 	.word	0x0800cc9f
 800ca30:	0800cc9f 	.word	0x0800cc9f
 800ca34:	0800cc9f 	.word	0x0800cc9f
 800ca38:	0800ca3d 	.word	0x0800ca3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca42:	69db      	ldr	r3, [r3, #28]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00b      	beq.n	800ca60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca4e:	69db      	ldr	r3, [r3, #28]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	7c12      	ldrb	r2, [r2, #16]
 800ca54:	f107 0108 	add.w	r1, r7, #8
 800ca58:	4610      	mov	r0, r2
 800ca5a:	4798      	blx	r3
 800ca5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca5e:	e126      	b.n	800ccae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fb27 	bl	800d0b6 <USBD_CtlError>
        err++;
 800ca68:	7afb      	ldrb	r3, [r7, #11]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	72fb      	strb	r3, [r7, #11]
      break;
 800ca6e:	e11e      	b.n	800ccae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	7c12      	ldrb	r2, [r2, #16]
 800ca7c:	f107 0108 	add.w	r1, r7, #8
 800ca80:	4610      	mov	r0, r2
 800ca82:	4798      	blx	r3
 800ca84:	60f8      	str	r0, [r7, #12]
      break;
 800ca86:	e112      	b.n	800ccae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	7c1b      	ldrb	r3, [r3, #16]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10d      	bne.n	800caac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca98:	f107 0208 	add.w	r2, r7, #8
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	4798      	blx	r3
 800caa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3301      	adds	r3, #1
 800caa6:	2202      	movs	r2, #2
 800caa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800caaa:	e100      	b.n	800ccae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab4:	f107 0208 	add.w	r2, r7, #8
 800cab8:	4610      	mov	r0, r2
 800caba:	4798      	blx	r3
 800cabc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3301      	adds	r3, #1
 800cac2:	2202      	movs	r2, #2
 800cac4:	701a      	strb	r2, [r3, #0]
      break;
 800cac6:	e0f2      	b.n	800ccae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	885b      	ldrh	r3, [r3, #2]
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	2b05      	cmp	r3, #5
 800cad0:	f200 80ac 	bhi.w	800cc2c <USBD_GetDescriptor+0x258>
 800cad4:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <USBD_GetDescriptor+0x108>)
 800cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cada:	bf00      	nop
 800cadc:	0800caf5 	.word	0x0800caf5
 800cae0:	0800cb29 	.word	0x0800cb29
 800cae4:	0800cb5d 	.word	0x0800cb5d
 800cae8:	0800cb91 	.word	0x0800cb91
 800caec:	0800cbc5 	.word	0x0800cbc5
 800caf0:	0800cbf9 	.word	0x0800cbf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00b      	beq.n	800cb18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	7c12      	ldrb	r2, [r2, #16]
 800cb0c:	f107 0108 	add.w	r1, r7, #8
 800cb10:	4610      	mov	r0, r2
 800cb12:	4798      	blx	r3
 800cb14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb16:	e091      	b.n	800cc3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 facb 	bl	800d0b6 <USBD_CtlError>
            err++;
 800cb20:	7afb      	ldrb	r3, [r7, #11]
 800cb22:	3301      	adds	r3, #1
 800cb24:	72fb      	strb	r3, [r7, #11]
          break;
 800cb26:	e089      	b.n	800cc3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00b      	beq.n	800cb4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	7c12      	ldrb	r2, [r2, #16]
 800cb40:	f107 0108 	add.w	r1, r7, #8
 800cb44:	4610      	mov	r0, r2
 800cb46:	4798      	blx	r3
 800cb48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb4a:	e077      	b.n	800cc3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb4c:	6839      	ldr	r1, [r7, #0]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fab1 	bl	800d0b6 <USBD_CtlError>
            err++;
 800cb54:	7afb      	ldrb	r3, [r7, #11]
 800cb56:	3301      	adds	r3, #1
 800cb58:	72fb      	strb	r3, [r7, #11]
          break;
 800cb5a:	e06f      	b.n	800cc3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00b      	beq.n	800cb80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	7c12      	ldrb	r2, [r2, #16]
 800cb74:	f107 0108 	add.w	r1, r7, #8
 800cb78:	4610      	mov	r0, r2
 800cb7a:	4798      	blx	r3
 800cb7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb7e:	e05d      	b.n	800cc3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fa97 	bl	800d0b6 <USBD_CtlError>
            err++;
 800cb88:	7afb      	ldrb	r3, [r7, #11]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb8e:	e055      	b.n	800cc3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb96:	691b      	ldr	r3, [r3, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00b      	beq.n	800cbb4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	7c12      	ldrb	r2, [r2, #16]
 800cba8:	f107 0108 	add.w	r1, r7, #8
 800cbac:	4610      	mov	r0, r2
 800cbae:	4798      	blx	r3
 800cbb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbb2:	e043      	b.n	800cc3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cbb4:	6839      	ldr	r1, [r7, #0]
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fa7d 	bl	800d0b6 <USBD_CtlError>
            err++;
 800cbbc:	7afb      	ldrb	r3, [r7, #11]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	72fb      	strb	r3, [r7, #11]
          break;
 800cbc2:	e03b      	b.n	800cc3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbca:	695b      	ldr	r3, [r3, #20]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00b      	beq.n	800cbe8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbd6:	695b      	ldr	r3, [r3, #20]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	7c12      	ldrb	r2, [r2, #16]
 800cbdc:	f107 0108 	add.w	r1, r7, #8
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	4798      	blx	r3
 800cbe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbe6:	e029      	b.n	800cc3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fa63 	bl	800d0b6 <USBD_CtlError>
            err++;
 800cbf0:	7afb      	ldrb	r3, [r7, #11]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	72fb      	strb	r3, [r7, #11]
          break;
 800cbf6:	e021      	b.n	800cc3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbfe:	699b      	ldr	r3, [r3, #24]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00b      	beq.n	800cc1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	7c12      	ldrb	r2, [r2, #16]
 800cc10:	f107 0108 	add.w	r1, r7, #8
 800cc14:	4610      	mov	r0, r2
 800cc16:	4798      	blx	r3
 800cc18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc1a:	e00f      	b.n	800cc3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc1c:	6839      	ldr	r1, [r7, #0]
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fa49 	bl	800d0b6 <USBD_CtlError>
            err++;
 800cc24:	7afb      	ldrb	r3, [r7, #11]
 800cc26:	3301      	adds	r3, #1
 800cc28:	72fb      	strb	r3, [r7, #11]
          break;
 800cc2a:	e007      	b.n	800cc3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fa41 	bl	800d0b6 <USBD_CtlError>
          err++;
 800cc34:	7afb      	ldrb	r3, [r7, #11]
 800cc36:	3301      	adds	r3, #1
 800cc38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cc3a:	bf00      	nop
      }
      break;
 800cc3c:	e037      	b.n	800ccae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	7c1b      	ldrb	r3, [r3, #16]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d109      	bne.n	800cc5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc4e:	f107 0208 	add.w	r2, r7, #8
 800cc52:	4610      	mov	r0, r2
 800cc54:	4798      	blx	r3
 800cc56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc58:	e029      	b.n	800ccae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fa2a 	bl	800d0b6 <USBD_CtlError>
        err++;
 800cc62:	7afb      	ldrb	r3, [r7, #11]
 800cc64:	3301      	adds	r3, #1
 800cc66:	72fb      	strb	r3, [r7, #11]
      break;
 800cc68:	e021      	b.n	800ccae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	7c1b      	ldrb	r3, [r3, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10d      	bne.n	800cc8e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc7a:	f107 0208 	add.w	r2, r7, #8
 800cc7e:	4610      	mov	r0, r2
 800cc80:	4798      	blx	r3
 800cc82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	3301      	adds	r3, #1
 800cc88:	2207      	movs	r2, #7
 800cc8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc8c:	e00f      	b.n	800ccae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fa10 	bl	800d0b6 <USBD_CtlError>
        err++;
 800cc96:	7afb      	ldrb	r3, [r7, #11]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	72fb      	strb	r3, [r7, #11]
      break;
 800cc9c:	e007      	b.n	800ccae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cc9e:	6839      	ldr	r1, [r7, #0]
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fa08 	bl	800d0b6 <USBD_CtlError>
      err++;
 800cca6:	7afb      	ldrb	r3, [r7, #11]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	72fb      	strb	r3, [r7, #11]
      break;
 800ccac:	bf00      	nop
  }

  if (err != 0U)
 800ccae:	7afb      	ldrb	r3, [r7, #11]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d11e      	bne.n	800ccf2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	88db      	ldrh	r3, [r3, #6]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d016      	beq.n	800ccea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ccbc:	893b      	ldrh	r3, [r7, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00e      	beq.n	800cce0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	88da      	ldrh	r2, [r3, #6]
 800ccc6:	893b      	ldrh	r3, [r7, #8]
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	bf28      	it	cs
 800cccc:	4613      	movcs	r3, r2
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ccd2:	893b      	ldrh	r3, [r7, #8]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	68f9      	ldr	r1, [r7, #12]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 fa5d 	bl	800d198 <USBD_CtlSendData>
 800ccde:	e009      	b.n	800ccf4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f9e7 	bl	800d0b6 <USBD_CtlError>
 800cce8:	e004      	b.n	800ccf4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 faae 	bl	800d24c <USBD_CtlSendStatus>
 800ccf0:	e000      	b.n	800ccf4 <USBD_GetDescriptor+0x320>
    return;
 800ccf2:	bf00      	nop
  }
}
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop

0800ccfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	889b      	ldrh	r3, [r3, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d131      	bne.n	800cd72 <USBD_SetAddress+0x76>
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	88db      	ldrh	r3, [r3, #6]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d12d      	bne.n	800cd72 <USBD_SetAddress+0x76>
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	885b      	ldrh	r3, [r3, #2]
 800cd1a:	2b7f      	cmp	r3, #127	; 0x7f
 800cd1c:	d829      	bhi.n	800cd72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	885b      	ldrh	r3, [r3, #2]
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	d104      	bne.n	800cd40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cd36:	6839      	ldr	r1, [r7, #0]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 f9bc 	bl	800d0b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd3e:	e01d      	b.n	800cd7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	7bfa      	ldrb	r2, [r7, #15]
 800cd44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f003 ffb3 	bl	8010cb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 fa7a 	bl	800d24c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d004      	beq.n	800cd68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2202      	movs	r2, #2
 800cd62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd66:	e009      	b.n	800cd7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd70:	e004      	b.n	800cd7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cd72:	6839      	ldr	r1, [r7, #0]
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f99e 	bl	800d0b6 <USBD_CtlError>
  }
}
 800cd7a:	bf00      	nop
 800cd7c:	bf00      	nop
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	885b      	ldrh	r3, [r3, #2]
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	4b4e      	ldr	r3, [pc, #312]	; (800ced4 <USBD_SetConfig+0x150>)
 800cd9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cd9c:	4b4d      	ldr	r3, [pc, #308]	; (800ced4 <USBD_SetConfig+0x150>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d905      	bls.n	800cdb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f985 	bl	800d0b6 <USBD_CtlError>
    return USBD_FAIL;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e08c      	b.n	800ceca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d002      	beq.n	800cdc2 <USBD_SetConfig+0x3e>
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d029      	beq.n	800ce14 <USBD_SetConfig+0x90>
 800cdc0:	e075      	b.n	800ceae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cdc2:	4b44      	ldr	r3, [pc, #272]	; (800ced4 <USBD_SetConfig+0x150>)
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d020      	beq.n	800ce0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cdca:	4b42      	ldr	r3, [pc, #264]	; (800ced4 <USBD_SetConfig+0x150>)
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdd4:	4b3f      	ldr	r3, [pc, #252]	; (800ced4 <USBD_SetConfig+0x150>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7fe ffbd 	bl	800bd5a <USBD_SetClassConfig>
 800cde0:	4603      	mov	r3, r0
 800cde2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d008      	beq.n	800cdfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cdea:	6839      	ldr	r1, [r7, #0]
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 f962 	bl	800d0b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cdfa:	e065      	b.n	800cec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 fa25 	bl	800d24c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2203      	movs	r2, #3
 800ce06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ce0a:	e05d      	b.n	800cec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 fa1d 	bl	800d24c <USBD_CtlSendStatus>
      break;
 800ce12:	e059      	b.n	800cec8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ce14:	4b2f      	ldr	r3, [pc, #188]	; (800ced4 <USBD_SetConfig+0x150>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d112      	bne.n	800ce42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2202      	movs	r2, #2
 800ce20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ce24:	4b2b      	ldr	r3, [pc, #172]	; (800ced4 <USBD_SetConfig+0x150>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce2e:	4b29      	ldr	r3, [pc, #164]	; (800ced4 <USBD_SetConfig+0x150>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	4619      	mov	r1, r3
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f7fe ffac 	bl	800bd92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fa06 	bl	800d24c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ce40:	e042      	b.n	800cec8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ce42:	4b24      	ldr	r3, [pc, #144]	; (800ced4 <USBD_SetConfig+0x150>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	461a      	mov	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d02a      	beq.n	800cea6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	4619      	mov	r1, r3
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7fe ff9a 	bl	800bd92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ce5e:	4b1d      	ldr	r3, [pc, #116]	; (800ced4 <USBD_SetConfig+0x150>)
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce68:	4b1a      	ldr	r3, [pc, #104]	; (800ced4 <USBD_SetConfig+0x150>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7fe ff73 	bl	800bd5a <USBD_SetClassConfig>
 800ce74:	4603      	mov	r3, r0
 800ce76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00f      	beq.n	800ce9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f918 	bl	800d0b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7fe ff7f 	bl	800bd92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2202      	movs	r2, #2
 800ce98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ce9c:	e014      	b.n	800cec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 f9d4 	bl	800d24c <USBD_CtlSendStatus>
      break;
 800cea4:	e010      	b.n	800cec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 f9d0 	bl	800d24c <USBD_CtlSendStatus>
      break;
 800ceac:	e00c      	b.n	800cec8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f900 	bl	800d0b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ceb6:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <USBD_SetConfig+0x150>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7fe ff68 	bl	800bd92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cec2:	2303      	movs	r3, #3
 800cec4:	73fb      	strb	r3, [r7, #15]
      break;
 800cec6:	bf00      	nop
  }

  return ret;
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	2001317c 	.word	0x2001317c

0800ced8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	88db      	ldrh	r3, [r3, #6]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d004      	beq.n	800cef4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ceea:	6839      	ldr	r1, [r7, #0]
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f8e2 	bl	800d0b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cef2:	e023      	b.n	800cf3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	dc02      	bgt.n	800cf06 <USBD_GetConfig+0x2e>
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	dc03      	bgt.n	800cf0c <USBD_GetConfig+0x34>
 800cf04:	e015      	b.n	800cf32 <USBD_GetConfig+0x5a>
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	d00b      	beq.n	800cf22 <USBD_GetConfig+0x4a>
 800cf0a:	e012      	b.n	800cf32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3308      	adds	r3, #8
 800cf16:	2201      	movs	r2, #1
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f93c 	bl	800d198 <USBD_CtlSendData>
        break;
 800cf20:	e00c      	b.n	800cf3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	3304      	adds	r3, #4
 800cf26:	2201      	movs	r2, #1
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 f934 	bl	800d198 <USBD_CtlSendData>
        break;
 800cf30:	e004      	b.n	800cf3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cf32:	6839      	ldr	r1, [r7, #0]
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f8be 	bl	800d0b6 <USBD_CtlError>
        break;
 800cf3a:	bf00      	nop
}
 800cf3c:	bf00      	nop
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	3b01      	subs	r3, #1
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d81e      	bhi.n	800cf9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	88db      	ldrh	r3, [r3, #6]
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d004      	beq.n	800cf6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 f8a5 	bl	800d0b6 <USBD_CtlError>
        break;
 800cf6c:	e01a      	b.n	800cfa4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d005      	beq.n	800cf8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	f043 0202 	orr.w	r2, r3, #2
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	330c      	adds	r3, #12
 800cf8e:	2202      	movs	r2, #2
 800cf90:	4619      	mov	r1, r3
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f900 	bl	800d198 <USBD_CtlSendData>
      break;
 800cf98:	e004      	b.n	800cfa4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cf9a:	6839      	ldr	r1, [r7, #0]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f88a 	bl	800d0b6 <USBD_CtlError>
      break;
 800cfa2:	bf00      	nop
  }
}
 800cfa4:	bf00      	nop
 800cfa6:	3708      	adds	r7, #8
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	885b      	ldrh	r3, [r3, #2]
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d107      	bne.n	800cfce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 f940 	bl	800d24c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cfcc:	e013      	b.n	800cff6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	885b      	ldrh	r3, [r3, #2]
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d10b      	bne.n	800cfee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	889b      	ldrh	r3, [r3, #4]
 800cfda:	0a1b      	lsrs	r3, r3, #8
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f930 	bl	800d24c <USBD_CtlSendStatus>
}
 800cfec:	e003      	b.n	800cff6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cfee:	6839      	ldr	r1, [r7, #0]
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f860 	bl	800d0b6 <USBD_CtlError>
}
 800cff6:	bf00      	nop
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b082      	sub	sp, #8
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	3b01      	subs	r3, #1
 800d012:	2b02      	cmp	r3, #2
 800d014:	d80b      	bhi.n	800d02e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	885b      	ldrh	r3, [r3, #2]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d10c      	bne.n	800d038 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f910 	bl	800d24c <USBD_CtlSendStatus>
      }
      break;
 800d02c:	e004      	b.n	800d038 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f840 	bl	800d0b6 <USBD_CtlError>
      break;
 800d036:	e000      	b.n	800d03a <USBD_ClrFeature+0x3c>
      break;
 800d038:	bf00      	nop
  }
}
 800d03a:	bf00      	nop
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	781a      	ldrb	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3301      	adds	r3, #1
 800d05c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	781a      	ldrb	r2, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3301      	adds	r3, #1
 800d06a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f7ff fa17 	bl	800c4a0 <SWAPBYTE>
 800d072:	4603      	mov	r3, r0
 800d074:	461a      	mov	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3301      	adds	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3301      	adds	r3, #1
 800d084:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f7ff fa0a 	bl	800c4a0 <SWAPBYTE>
 800d08c:	4603      	mov	r3, r0
 800d08e:	461a      	mov	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3301      	adds	r3, #1
 800d098:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3301      	adds	r3, #1
 800d09e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f7ff f9fd 	bl	800c4a0 <SWAPBYTE>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	80da      	strh	r2, [r3, #6]
}
 800d0ae:	bf00      	nop
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b082      	sub	sp, #8
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
 800d0be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0c0:	2180      	movs	r1, #128	; 0x80
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f003 fd8e 	bl	8010be4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f003 fd8a 	bl	8010be4 <USBD_LL_StallEP>
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d036      	beq.n	800d15c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d0f2:	6938      	ldr	r0, [r7, #16]
 800d0f4:	f000 f836 	bl	800d164 <USBD_GetLen>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	005b      	lsls	r3, r3, #1
 800d100:	b29a      	uxth	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d106:	7dfb      	ldrb	r3, [r7, #23]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	4413      	add	r3, r2
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	7812      	ldrb	r2, [r2, #0]
 800d110:	701a      	strb	r2, [r3, #0]
  idx++;
 800d112:	7dfb      	ldrb	r3, [r7, #23]
 800d114:	3301      	adds	r3, #1
 800d116:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d118:	7dfb      	ldrb	r3, [r7, #23]
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	4413      	add	r3, r2
 800d11e:	2203      	movs	r2, #3
 800d120:	701a      	strb	r2, [r3, #0]
  idx++;
 800d122:	7dfb      	ldrb	r3, [r7, #23]
 800d124:	3301      	adds	r3, #1
 800d126:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d128:	e013      	b.n	800d152 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d12a:	7dfb      	ldrb	r3, [r7, #23]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	4413      	add	r3, r2
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	7812      	ldrb	r2, [r2, #0]
 800d134:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	3301      	adds	r3, #1
 800d13a:	613b      	str	r3, [r7, #16]
    idx++;
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
 800d13e:	3301      	adds	r3, #1
 800d140:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d142:	7dfb      	ldrb	r3, [r7, #23]
 800d144:	68ba      	ldr	r2, [r7, #8]
 800d146:	4413      	add	r3, r2
 800d148:	2200      	movs	r2, #0
 800d14a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d14c:	7dfb      	ldrb	r3, [r7, #23]
 800d14e:	3301      	adds	r3, #1
 800d150:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1e7      	bne.n	800d12a <USBD_GetString+0x52>
 800d15a:	e000      	b.n	800d15e <USBD_GetString+0x86>
    return;
 800d15c:	bf00      	nop
  }
}
 800d15e:	3718      	adds	r7, #24
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d174:	e005      	b.n	800d182 <USBD_GetLen+0x1e>
  {
    len++;
 800d176:	7bfb      	ldrb	r3, [r7, #15]
 800d178:	3301      	adds	r3, #1
 800d17a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	3301      	adds	r3, #1
 800d180:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d1f5      	bne.n	800d176 <USBD_GetLen+0x12>
  }

  return len;
 800d18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	2100      	movs	r1, #0
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f003 fd99 	bl	8010cf6 <USBD_LL_Transmit>

  return USBD_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	2100      	movs	r1, #0
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f003 fd88 	bl	8010cf6 <USBD_LL_Transmit>

  return USBD_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2203      	movs	r2, #3
 800d200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	2100      	movs	r1, #0
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f003 fd8c 	bl	8010d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b084      	sub	sp, #16
 800d22e:	af00      	add	r7, sp, #0
 800d230:	60f8      	str	r0, [r7, #12]
 800d232:	60b9      	str	r1, [r7, #8]
 800d234:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68ba      	ldr	r2, [r7, #8]
 800d23a:	2100      	movs	r1, #0
 800d23c:	68f8      	ldr	r0, [r7, #12]
 800d23e:	f003 fd7b 	bl	8010d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2204      	movs	r2, #4
 800d258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d25c:	2300      	movs	r3, #0
 800d25e:	2200      	movs	r2, #0
 800d260:	2100      	movs	r1, #0
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f003 fd47 	bl	8010cf6 <USBD_LL_Transmit>

  return USBD_OK;
 800d268:	2300      	movs	r3, #0
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b082      	sub	sp, #8
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2205      	movs	r2, #5
 800d27e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d282:	2300      	movs	r3, #0
 800d284:	2200      	movs	r2, #0
 800d286:	2100      	movs	r1, #0
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f003 fd55 	bl	8010d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	4a08      	ldr	r2, [pc, #32]	; (800d2c8 <disk_status+0x30>)
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	79fa      	ldrb	r2, [r7, #7]
 800d2b0:	4905      	ldr	r1, [pc, #20]	; (800d2c8 <disk_status+0x30>)
 800d2b2:	440a      	add	r2, r1
 800d2b4:	7a12      	ldrb	r2, [r2, #8]
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	4798      	blx	r3
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	200133a8 	.word	0x200133a8

0800d2cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d2da:	79fb      	ldrb	r3, [r7, #7]
 800d2dc:	4a0d      	ldr	r2, [pc, #52]	; (800d314 <disk_initialize+0x48>)
 800d2de:	5cd3      	ldrb	r3, [r2, r3]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d111      	bne.n	800d308 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d2e4:	79fb      	ldrb	r3, [r7, #7]
 800d2e6:	4a0b      	ldr	r2, [pc, #44]	; (800d314 <disk_initialize+0x48>)
 800d2e8:	2101      	movs	r1, #1
 800d2ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	4a09      	ldr	r2, [pc, #36]	; (800d314 <disk_initialize+0x48>)
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	4413      	add	r3, r2
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	79fa      	ldrb	r2, [r7, #7]
 800d2fa:	4906      	ldr	r1, [pc, #24]	; (800d314 <disk_initialize+0x48>)
 800d2fc:	440a      	add	r2, r1
 800d2fe:	7a12      	ldrb	r2, [r2, #8]
 800d300:	4610      	mov	r0, r2
 800d302:	4798      	blx	r3
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d308:	7bfb      	ldrb	r3, [r7, #15]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	200133a8 	.word	0x200133a8

0800d318 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d318:	b590      	push	{r4, r7, lr}
 800d31a:	b087      	sub	sp, #28
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60b9      	str	r1, [r7, #8]
 800d320:	607a      	str	r2, [r7, #4]
 800d322:	603b      	str	r3, [r7, #0]
 800d324:	4603      	mov	r3, r0
 800d326:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d328:	7bfb      	ldrb	r3, [r7, #15]
 800d32a:	4a0a      	ldr	r2, [pc, #40]	; (800d354 <disk_read+0x3c>)
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4413      	add	r3, r2
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	689c      	ldr	r4, [r3, #8]
 800d334:	7bfb      	ldrb	r3, [r7, #15]
 800d336:	4a07      	ldr	r2, [pc, #28]	; (800d354 <disk_read+0x3c>)
 800d338:	4413      	add	r3, r2
 800d33a:	7a18      	ldrb	r0, [r3, #8]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	68b9      	ldr	r1, [r7, #8]
 800d342:	47a0      	blx	r4
 800d344:	4603      	mov	r3, r0
 800d346:	75fb      	strb	r3, [r7, #23]
  return res;
 800d348:	7dfb      	ldrb	r3, [r7, #23]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	371c      	adds	r7, #28
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd90      	pop	{r4, r7, pc}
 800d352:	bf00      	nop
 800d354:	200133a8 	.word	0x200133a8

0800d358 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d358:	b590      	push	{r4, r7, lr}
 800d35a:	b087      	sub	sp, #28
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60b9      	str	r1, [r7, #8]
 800d360:	607a      	str	r2, [r7, #4]
 800d362:	603b      	str	r3, [r7, #0]
 800d364:	4603      	mov	r3, r0
 800d366:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	4a0a      	ldr	r2, [pc, #40]	; (800d394 <disk_write+0x3c>)
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	68dc      	ldr	r4, [r3, #12]
 800d374:	7bfb      	ldrb	r3, [r7, #15]
 800d376:	4a07      	ldr	r2, [pc, #28]	; (800d394 <disk_write+0x3c>)
 800d378:	4413      	add	r3, r2
 800d37a:	7a18      	ldrb	r0, [r3, #8]
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	68b9      	ldr	r1, [r7, #8]
 800d382:	47a0      	blx	r4
 800d384:	4603      	mov	r3, r0
 800d386:	75fb      	strb	r3, [r7, #23]
  return res;
 800d388:	7dfb      	ldrb	r3, [r7, #23]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	371c      	adds	r7, #28
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd90      	pop	{r4, r7, pc}
 800d392:	bf00      	nop
 800d394:	200133a8 	.word	0x200133a8

0800d398 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	4603      	mov	r3, r0
 800d3a0:	603a      	str	r2, [r7, #0]
 800d3a2:	71fb      	strb	r3, [r7, #7]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d3a8:	79fb      	ldrb	r3, [r7, #7]
 800d3aa:	4a09      	ldr	r2, [pc, #36]	; (800d3d0 <disk_ioctl+0x38>)
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4413      	add	r3, r2
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	79fa      	ldrb	r2, [r7, #7]
 800d3b6:	4906      	ldr	r1, [pc, #24]	; (800d3d0 <disk_ioctl+0x38>)
 800d3b8:	440a      	add	r2, r1
 800d3ba:	7a10      	ldrb	r0, [r2, #8]
 800d3bc:	79b9      	ldrb	r1, [r7, #6]
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	4798      	blx	r3
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	73fb      	strb	r3, [r7, #15]
  return res;
 800d3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	200133a8 	.word	0x200133a8

0800d3d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d3e4:	89fb      	ldrh	r3, [r7, #14]
 800d3e6:	021b      	lsls	r3, r3, #8
 800d3e8:	b21a      	sxth	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	b21b      	sxth	r3, r3
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	b21b      	sxth	r3, r3
 800d3f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d3f6:	89fb      	ldrh	r3, [r7, #14]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3714      	adds	r7, #20
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	3303      	adds	r3, #3
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	021b      	lsls	r3, r3, #8
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	3202      	adds	r2, #2
 800d41c:	7812      	ldrb	r2, [r2, #0]
 800d41e:	4313      	orrs	r3, r2
 800d420:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	021b      	lsls	r3, r3, #8
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	3201      	adds	r2, #1
 800d42a:	7812      	ldrb	r2, [r2, #0]
 800d42c:	4313      	orrs	r3, r2
 800d42e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	021b      	lsls	r3, r3, #8
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	7812      	ldrb	r2, [r2, #0]
 800d438:	4313      	orrs	r3, r2
 800d43a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d43c:	68fb      	ldr	r3, [r7, #12]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3714      	adds	r7, #20
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr

0800d44a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d44a:	b480      	push	{r7}
 800d44c:	b083      	sub	sp, #12
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	460b      	mov	r3, r1
 800d454:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	1c5a      	adds	r2, r3, #1
 800d45a:	607a      	str	r2, [r7, #4]
 800d45c:	887a      	ldrh	r2, [r7, #2]
 800d45e:	b2d2      	uxtb	r2, r2
 800d460:	701a      	strb	r2, [r3, #0]
 800d462:	887b      	ldrh	r3, [r7, #2]
 800d464:	0a1b      	lsrs	r3, r3, #8
 800d466:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	607a      	str	r2, [r7, #4]
 800d46e:	887a      	ldrh	r2, [r7, #2]
 800d470:	b2d2      	uxtb	r2, r2
 800d472:	701a      	strb	r2, [r3, #0]
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	607a      	str	r2, [r7, #4]
 800d490:	683a      	ldr	r2, [r7, #0]
 800d492:	b2d2      	uxtb	r2, r2
 800d494:	701a      	strb	r2, [r3, #0]
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	0a1b      	lsrs	r3, r3, #8
 800d49a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	1c5a      	adds	r2, r3, #1
 800d4a0:	607a      	str	r2, [r7, #4]
 800d4a2:	683a      	ldr	r2, [r7, #0]
 800d4a4:	b2d2      	uxtb	r2, r2
 800d4a6:	701a      	strb	r2, [r3, #0]
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	0a1b      	lsrs	r3, r3, #8
 800d4ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	1c5a      	adds	r2, r3, #1
 800d4b2:	607a      	str	r2, [r7, #4]
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	b2d2      	uxtb	r2, r2
 800d4b8:	701a      	strb	r2, [r3, #0]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	0a1b      	lsrs	r3, r3, #8
 800d4be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	607a      	str	r2, [r7, #4]
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	b2d2      	uxtb	r2, r2
 800d4ca:	701a      	strb	r2, [r3, #0]
}
 800d4cc:	bf00      	nop
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d4d8:	b480      	push	{r7}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00d      	beq.n	800d50e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d4f2:	693a      	ldr	r2, [r7, #16]
 800d4f4:	1c53      	adds	r3, r2, #1
 800d4f6:	613b      	str	r3, [r7, #16]
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	1c59      	adds	r1, r3, #1
 800d4fc:	6179      	str	r1, [r7, #20]
 800d4fe:	7812      	ldrb	r2, [r2, #0]
 800d500:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	3b01      	subs	r3, #1
 800d506:	607b      	str	r3, [r7, #4]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1f1      	bne.n	800d4f2 <mem_cpy+0x1a>
	}
}
 800d50e:	bf00      	nop
 800d510:	371c      	adds	r7, #28
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr

0800d51a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d51a:	b480      	push	{r7}
 800d51c:	b087      	sub	sp, #28
 800d51e:	af00      	add	r7, sp, #0
 800d520:	60f8      	str	r0, [r7, #12]
 800d522:	60b9      	str	r1, [r7, #8]
 800d524:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	1c5a      	adds	r2, r3, #1
 800d52e:	617a      	str	r2, [r7, #20]
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	b2d2      	uxtb	r2, r2
 800d534:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3b01      	subs	r3, #1
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1f3      	bne.n	800d52a <mem_set+0x10>
}
 800d542:	bf00      	nop
 800d544:	bf00      	nop
 800d546:	371c      	adds	r7, #28
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d550:	b480      	push	{r7}
 800d552:	b089      	sub	sp, #36	; 0x24
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	61fb      	str	r3, [r7, #28]
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d564:	2300      	movs	r3, #0
 800d566:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	1c5a      	adds	r2, r3, #1
 800d56c:	61fa      	str	r2, [r7, #28]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	4619      	mov	r1, r3
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	1c5a      	adds	r2, r3, #1
 800d576:	61ba      	str	r2, [r7, #24]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	1acb      	subs	r3, r1, r3
 800d57c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	3b01      	subs	r3, #1
 800d582:	607b      	str	r3, [r7, #4]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <mem_cmp+0x40>
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d0eb      	beq.n	800d568 <mem_cmp+0x18>

	return r;
 800d590:	697b      	ldr	r3, [r7, #20]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3724      	adds	r7, #36	; 0x24
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr

0800d59e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d59e:	b480      	push	{r7}
 800d5a0:	b083      	sub	sp, #12
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
 800d5a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d5a8:	e002      	b.n	800d5b0 <chk_chr+0x12>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	607b      	str	r3, [r7, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d005      	beq.n	800d5c4 <chk_chr+0x26>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	461a      	mov	r2, r3
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d1f2      	bne.n	800d5aa <chk_chr+0xc>
	return *str;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5de:	2300      	movs	r3, #0
 800d5e0:	60bb      	str	r3, [r7, #8]
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	60fb      	str	r3, [r7, #12]
 800d5e6:	e029      	b.n	800d63c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d5e8:	4a27      	ldr	r2, [pc, #156]	; (800d688 <chk_lock+0xb4>)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	011b      	lsls	r3, r3, #4
 800d5ee:	4413      	add	r3, r2
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d01d      	beq.n	800d632 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5f6:	4a24      	ldr	r2, [pc, #144]	; (800d688 <chk_lock+0xb4>)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	011b      	lsls	r3, r3, #4
 800d5fc:	4413      	add	r3, r2
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d116      	bne.n	800d636 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d608:	4a1f      	ldr	r2, [pc, #124]	; (800d688 <chk_lock+0xb4>)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	011b      	lsls	r3, r3, #4
 800d60e:	4413      	add	r3, r2
 800d610:	3304      	adds	r3, #4
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d618:	429a      	cmp	r2, r3
 800d61a:	d10c      	bne.n	800d636 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d61c:	4a1a      	ldr	r2, [pc, #104]	; (800d688 <chk_lock+0xb4>)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	011b      	lsls	r3, r3, #4
 800d622:	4413      	add	r3, r2
 800d624:	3308      	adds	r3, #8
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d102      	bne.n	800d636 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d630:	e007      	b.n	800d642 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d632:	2301      	movs	r3, #1
 800d634:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	3301      	adds	r3, #1
 800d63a:	60fb      	str	r3, [r7, #12]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d9d2      	bls.n	800d5e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b02      	cmp	r3, #2
 800d646:	d109      	bne.n	800d65c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d102      	bne.n	800d654 <chk_lock+0x80>
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	2b02      	cmp	r3, #2
 800d652:	d101      	bne.n	800d658 <chk_lock+0x84>
 800d654:	2300      	movs	r3, #0
 800d656:	e010      	b.n	800d67a <chk_lock+0xa6>
 800d658:	2312      	movs	r3, #18
 800d65a:	e00e      	b.n	800d67a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d108      	bne.n	800d674 <chk_lock+0xa0>
 800d662:	4a09      	ldr	r2, [pc, #36]	; (800d688 <chk_lock+0xb4>)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	011b      	lsls	r3, r3, #4
 800d668:	4413      	add	r3, r2
 800d66a:	330c      	adds	r3, #12
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d672:	d101      	bne.n	800d678 <chk_lock+0xa4>
 800d674:	2310      	movs	r3, #16
 800d676:	e000      	b.n	800d67a <chk_lock+0xa6>
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3714      	adds	r7, #20
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	20013188 	.word	0x20013188

0800d68c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d692:	2300      	movs	r3, #0
 800d694:	607b      	str	r3, [r7, #4]
 800d696:	e002      	b.n	800d69e <enq_lock+0x12>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	3301      	adds	r3, #1
 800d69c:	607b      	str	r3, [r7, #4]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d806      	bhi.n	800d6b2 <enq_lock+0x26>
 800d6a4:	4a09      	ldr	r2, [pc, #36]	; (800d6cc <enq_lock+0x40>)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	011b      	lsls	r3, r3, #4
 800d6aa:	4413      	add	r3, r2
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1f2      	bne.n	800d698 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	bf14      	ite	ne
 800d6b8:	2301      	movne	r3, #1
 800d6ba:	2300      	moveq	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	20013188 	.word	0x20013188

0800d6d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]
 800d6de:	e01f      	b.n	800d720 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d6e0:	4a41      	ldr	r2, [pc, #260]	; (800d7e8 <inc_lock+0x118>)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	011b      	lsls	r3, r3, #4
 800d6e6:	4413      	add	r3, r2
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d113      	bne.n	800d71a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d6f2:	4a3d      	ldr	r2, [pc, #244]	; (800d7e8 <inc_lock+0x118>)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	011b      	lsls	r3, r3, #4
 800d6f8:	4413      	add	r3, r2
 800d6fa:	3304      	adds	r3, #4
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d702:	429a      	cmp	r2, r3
 800d704:	d109      	bne.n	800d71a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d706:	4a38      	ldr	r2, [pc, #224]	; (800d7e8 <inc_lock+0x118>)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	011b      	lsls	r3, r3, #4
 800d70c:	4413      	add	r3, r2
 800d70e:	3308      	adds	r3, #8
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d716:	429a      	cmp	r2, r3
 800d718:	d006      	beq.n	800d728 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	3301      	adds	r3, #1
 800d71e:	60fb      	str	r3, [r7, #12]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d9dc      	bls.n	800d6e0 <inc_lock+0x10>
 800d726:	e000      	b.n	800d72a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d728:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	d132      	bne.n	800d796 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d730:	2300      	movs	r3, #0
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	e002      	b.n	800d73c <inc_lock+0x6c>
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	3301      	adds	r3, #1
 800d73a:	60fb      	str	r3, [r7, #12]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d806      	bhi.n	800d750 <inc_lock+0x80>
 800d742:	4a29      	ldr	r2, [pc, #164]	; (800d7e8 <inc_lock+0x118>)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	011b      	lsls	r3, r3, #4
 800d748:	4413      	add	r3, r2
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1f2      	bne.n	800d736 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2b02      	cmp	r3, #2
 800d754:	d101      	bne.n	800d75a <inc_lock+0x8a>
 800d756:	2300      	movs	r3, #0
 800d758:	e040      	b.n	800d7dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	4922      	ldr	r1, [pc, #136]	; (800d7e8 <inc_lock+0x118>)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	011b      	lsls	r3, r3, #4
 800d764:	440b      	add	r3, r1
 800d766:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	689a      	ldr	r2, [r3, #8]
 800d76c:	491e      	ldr	r1, [pc, #120]	; (800d7e8 <inc_lock+0x118>)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	011b      	lsls	r3, r3, #4
 800d772:	440b      	add	r3, r1
 800d774:	3304      	adds	r3, #4
 800d776:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	695a      	ldr	r2, [r3, #20]
 800d77c:	491a      	ldr	r1, [pc, #104]	; (800d7e8 <inc_lock+0x118>)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	011b      	lsls	r3, r3, #4
 800d782:	440b      	add	r3, r1
 800d784:	3308      	adds	r3, #8
 800d786:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d788:	4a17      	ldr	r2, [pc, #92]	; (800d7e8 <inc_lock+0x118>)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	011b      	lsls	r3, r3, #4
 800d78e:	4413      	add	r3, r2
 800d790:	330c      	adds	r3, #12
 800d792:	2200      	movs	r2, #0
 800d794:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d009      	beq.n	800d7b0 <inc_lock+0xe0>
 800d79c:	4a12      	ldr	r2, [pc, #72]	; (800d7e8 <inc_lock+0x118>)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	4413      	add	r3, r2
 800d7a4:	330c      	adds	r3, #12
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d001      	beq.n	800d7b0 <inc_lock+0xe0>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e015      	b.n	800d7dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d108      	bne.n	800d7c8 <inc_lock+0xf8>
 800d7b6:	4a0c      	ldr	r2, [pc, #48]	; (800d7e8 <inc_lock+0x118>)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	011b      	lsls	r3, r3, #4
 800d7bc:	4413      	add	r3, r2
 800d7be:	330c      	adds	r3, #12
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	e001      	b.n	800d7cc <inc_lock+0xfc>
 800d7c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7cc:	4906      	ldr	r1, [pc, #24]	; (800d7e8 <inc_lock+0x118>)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	440b      	add	r3, r1
 800d7d4:	330c      	adds	r3, #12
 800d7d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	3301      	adds	r3, #1
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	20013188 	.word	0x20013188

0800d7ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	607b      	str	r3, [r7, #4]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d825      	bhi.n	800d84c <dec_lock+0x60>
		n = Files[i].ctr;
 800d800:	4a17      	ldr	r2, [pc, #92]	; (800d860 <dec_lock+0x74>)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	011b      	lsls	r3, r3, #4
 800d806:	4413      	add	r3, r2
 800d808:	330c      	adds	r3, #12
 800d80a:	881b      	ldrh	r3, [r3, #0]
 800d80c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d80e:	89fb      	ldrh	r3, [r7, #14]
 800d810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d814:	d101      	bne.n	800d81a <dec_lock+0x2e>
 800d816:	2300      	movs	r3, #0
 800d818:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d81a:	89fb      	ldrh	r3, [r7, #14]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d002      	beq.n	800d826 <dec_lock+0x3a>
 800d820:	89fb      	ldrh	r3, [r7, #14]
 800d822:	3b01      	subs	r3, #1
 800d824:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d826:	4a0e      	ldr	r2, [pc, #56]	; (800d860 <dec_lock+0x74>)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	011b      	lsls	r3, r3, #4
 800d82c:	4413      	add	r3, r2
 800d82e:	330c      	adds	r3, #12
 800d830:	89fa      	ldrh	r2, [r7, #14]
 800d832:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d834:	89fb      	ldrh	r3, [r7, #14]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d105      	bne.n	800d846 <dec_lock+0x5a>
 800d83a:	4a09      	ldr	r2, [pc, #36]	; (800d860 <dec_lock+0x74>)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	011b      	lsls	r3, r3, #4
 800d840:	4413      	add	r3, r2
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d846:	2300      	movs	r3, #0
 800d848:	737b      	strb	r3, [r7, #13]
 800d84a:	e001      	b.n	800d850 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d84c:	2302      	movs	r3, #2
 800d84e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d850:	7b7b      	ldrb	r3, [r7, #13]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	20013188 	.word	0x20013188

0800d864 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d86c:	2300      	movs	r3, #0
 800d86e:	60fb      	str	r3, [r7, #12]
 800d870:	e010      	b.n	800d894 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d872:	4a0d      	ldr	r2, [pc, #52]	; (800d8a8 <clear_lock+0x44>)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	011b      	lsls	r3, r3, #4
 800d878:	4413      	add	r3, r2
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d105      	bne.n	800d88e <clear_lock+0x2a>
 800d882:	4a09      	ldr	r2, [pc, #36]	; (800d8a8 <clear_lock+0x44>)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	011b      	lsls	r3, r3, #4
 800d888:	4413      	add	r3, r2
 800d88a:	2200      	movs	r2, #0
 800d88c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3301      	adds	r3, #1
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d9eb      	bls.n	800d872 <clear_lock+0xe>
	}
}
 800d89a:	bf00      	nop
 800d89c:	bf00      	nop
 800d89e:	3714      	adds	r7, #20
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	20013188 	.word	0x20013188

0800d8ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	78db      	ldrb	r3, [r3, #3]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d034      	beq.n	800d92a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	7858      	ldrb	r0, [r3, #1]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	697a      	ldr	r2, [r7, #20]
 800d8d4:	f7ff fd40 	bl	800d358 <disk_write>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d002      	beq.n	800d8e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	73fb      	strb	r3, [r7, #15]
 800d8e2:	e022      	b.n	800d92a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ee:	697a      	ldr	r2, [r7, #20]
 800d8f0:	1ad2      	subs	r2, r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	69db      	ldr	r3, [r3, #28]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d217      	bcs.n	800d92a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	789b      	ldrb	r3, [r3, #2]
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	e010      	b.n	800d924 <sync_window+0x78>
					wsect += fs->fsize;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	69db      	ldr	r3, [r3, #28]
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	4413      	add	r3, r2
 800d90a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	7858      	ldrb	r0, [r3, #1]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d916:	2301      	movs	r3, #1
 800d918:	697a      	ldr	r2, [r7, #20]
 800d91a:	f7ff fd1d 	bl	800d358 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	3b01      	subs	r3, #1
 800d922:	613b      	str	r3, [r7, #16]
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	2b01      	cmp	r3, #1
 800d928:	d8eb      	bhi.n	800d902 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3718      	adds	r7, #24
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d01b      	beq.n	800d984 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f7ff ffad 	bl	800d8ac <sync_window>
 800d952:	4603      	mov	r3, r0
 800d954:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d956:	7bfb      	ldrb	r3, [r7, #15]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d113      	bne.n	800d984 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	7858      	ldrb	r0, [r3, #1]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d966:	2301      	movs	r3, #1
 800d968:	683a      	ldr	r2, [r7, #0]
 800d96a:	f7ff fcd5 	bl	800d318 <disk_read>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d004      	beq.n	800d97e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d978:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	683a      	ldr	r2, [r7, #0]
 800d982:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d984:	7bfb      	ldrb	r3, [r7, #15]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7ff ff87 	bl	800d8ac <sync_window>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d9a2:	7bfb      	ldrb	r3, [r7, #15]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d158      	bne.n	800da5a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d148      	bne.n	800da42 <sync_fs+0xb2>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	791b      	ldrb	r3, [r3, #4]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d144      	bne.n	800da42 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	3334      	adds	r3, #52	; 0x34
 800d9bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7ff fda9 	bl	800d51a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	3334      	adds	r3, #52	; 0x34
 800d9cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9d0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7ff fd38 	bl	800d44a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	3334      	adds	r3, #52	; 0x34
 800d9de:	4921      	ldr	r1, [pc, #132]	; (800da64 <sync_fs+0xd4>)
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7ff fd4d 	bl	800d480 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	3334      	adds	r3, #52	; 0x34
 800d9ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9ee:	491e      	ldr	r1, [pc, #120]	; (800da68 <sync_fs+0xd8>)
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7ff fd45 	bl	800d480 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	3334      	adds	r3, #52	; 0x34
 800d9fa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	695b      	ldr	r3, [r3, #20]
 800da02:	4619      	mov	r1, r3
 800da04:	4610      	mov	r0, r2
 800da06:	f7ff fd3b 	bl	800d480 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	3334      	adds	r3, #52	; 0x34
 800da0e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	4619      	mov	r1, r3
 800da18:	4610      	mov	r0, r2
 800da1a:	f7ff fd31 	bl	800d480 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6a1b      	ldr	r3, [r3, #32]
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	7858      	ldrb	r0, [r3, #1]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da36:	2301      	movs	r3, #1
 800da38:	f7ff fc8e 	bl	800d358 <disk_write>
			fs->fsi_flag = 0;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	785b      	ldrb	r3, [r3, #1]
 800da46:	2200      	movs	r2, #0
 800da48:	2100      	movs	r1, #0
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff fca4 	bl	800d398 <disk_ioctl>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d001      	beq.n	800da5a <sync_fs+0xca>
 800da56:	2301      	movs	r3, #1
 800da58:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	41615252 	.word	0x41615252
 800da68:	61417272 	.word	0x61417272

0800da6c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	3b02      	subs	r3, #2
 800da7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	3b02      	subs	r3, #2
 800da82:	683a      	ldr	r2, [r7, #0]
 800da84:	429a      	cmp	r2, r3
 800da86:	d301      	bcc.n	800da8c <clust2sect+0x20>
 800da88:	2300      	movs	r3, #0
 800da8a:	e008      	b.n	800da9e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	895b      	ldrh	r3, [r3, #10]
 800da90:	461a      	mov	r2, r3
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	fb03 f202 	mul.w	r2, r3, r2
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9c:	4413      	add	r3, r2
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	370c      	adds	r7, #12
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr

0800daaa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b086      	sub	sp, #24
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d904      	bls.n	800daca <get_fat+0x20>
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	699b      	ldr	r3, [r3, #24]
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d302      	bcc.n	800dad0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800daca:	2301      	movs	r3, #1
 800dacc:	617b      	str	r3, [r7, #20]
 800dace:	e08f      	b.n	800dbf0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dad4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d062      	beq.n	800dba4 <get_fat+0xfa>
 800dade:	2b03      	cmp	r3, #3
 800dae0:	dc7c      	bgt.n	800dbdc <get_fat+0x132>
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d002      	beq.n	800daec <get_fat+0x42>
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d042      	beq.n	800db70 <get_fat+0xc6>
 800daea:	e077      	b.n	800dbdc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	60fb      	str	r3, [r7, #12]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	085b      	lsrs	r3, r3, #1
 800daf4:	68fa      	ldr	r2, [r7, #12]
 800daf6:	4413      	add	r3, r2
 800daf8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	0a5b      	lsrs	r3, r3, #9
 800db02:	4413      	add	r3, r2
 800db04:	4619      	mov	r1, r3
 800db06:	6938      	ldr	r0, [r7, #16]
 800db08:	f7ff ff14 	bl	800d934 <move_window>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d167      	bne.n	800dbe2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	60fa      	str	r2, [r7, #12]
 800db18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	4413      	add	r3, r2
 800db20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db24:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	0a5b      	lsrs	r3, r3, #9
 800db2e:	4413      	add	r3, r2
 800db30:	4619      	mov	r1, r3
 800db32:	6938      	ldr	r0, [r7, #16]
 800db34:	f7ff fefe 	bl	800d934 <move_window>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d153      	bne.n	800dbe6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	4413      	add	r3, r2
 800db48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db4c:	021b      	lsls	r3, r3, #8
 800db4e:	461a      	mov	r2, r3
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	4313      	orrs	r3, r2
 800db54:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	f003 0301 	and.w	r3, r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <get_fat+0xbc>
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	091b      	lsrs	r3, r3, #4
 800db64:	e002      	b.n	800db6c <get_fat+0xc2>
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db6c:	617b      	str	r3, [r7, #20]
			break;
 800db6e:	e03f      	b.n	800dbf0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	0a1b      	lsrs	r3, r3, #8
 800db78:	4413      	add	r3, r2
 800db7a:	4619      	mov	r1, r3
 800db7c:	6938      	ldr	r0, [r7, #16]
 800db7e:	f7ff fed9 	bl	800d934 <move_window>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d130      	bne.n	800dbea <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	005b      	lsls	r3, r3, #1
 800db92:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800db96:	4413      	add	r3, r2
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff fc1b 	bl	800d3d4 <ld_word>
 800db9e:	4603      	mov	r3, r0
 800dba0:	617b      	str	r3, [r7, #20]
			break;
 800dba2:	e025      	b.n	800dbf0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	09db      	lsrs	r3, r3, #7
 800dbac:	4413      	add	r3, r2
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6938      	ldr	r0, [r7, #16]
 800dbb2:	f7ff febf 	bl	800d934 <move_window>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d118      	bne.n	800dbee <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dbca:	4413      	add	r3, r2
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7ff fc19 	bl	800d404 <ld_dword>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dbd8:	617b      	str	r3, [r7, #20]
			break;
 800dbda:	e009      	b.n	800dbf0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dbdc:	2301      	movs	r3, #1
 800dbde:	617b      	str	r3, [r7, #20]
 800dbe0:	e006      	b.n	800dbf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbe2:	bf00      	nop
 800dbe4:	e004      	b.n	800dbf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbe6:	bf00      	nop
 800dbe8:	e002      	b.n	800dbf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbea:	bf00      	nop
 800dbec:	e000      	b.n	800dbf0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbee:	bf00      	nop
		}
	}

	return val;
 800dbf0:	697b      	ldr	r3, [r7, #20]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3718      	adds	r7, #24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dbfa:	b590      	push	{r4, r7, lr}
 800dbfc:	b089      	sub	sp, #36	; 0x24
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	60f8      	str	r0, [r7, #12]
 800dc02:	60b9      	str	r1, [r7, #8]
 800dc04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dc06:	2302      	movs	r3, #2
 800dc08:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	f240 80d9 	bls.w	800ddc4 <put_fat+0x1ca>
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	699b      	ldr	r3, [r3, #24]
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	f080 80d3 	bcs.w	800ddc4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	f000 8096 	beq.w	800dd54 <put_fat+0x15a>
 800dc28:	2b03      	cmp	r3, #3
 800dc2a:	f300 80cb 	bgt.w	800ddc4 <put_fat+0x1ca>
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d002      	beq.n	800dc38 <put_fat+0x3e>
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d06e      	beq.n	800dd14 <put_fat+0x11a>
 800dc36:	e0c5      	b.n	800ddc4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	61bb      	str	r3, [r7, #24]
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	085b      	lsrs	r3, r3, #1
 800dc40:	69ba      	ldr	r2, [r7, #24]
 800dc42:	4413      	add	r3, r2
 800dc44:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	0a5b      	lsrs	r3, r3, #9
 800dc4e:	4413      	add	r3, r2
 800dc50:	4619      	mov	r1, r3
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	f7ff fe6e 	bl	800d934 <move_window>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc5c:	7ffb      	ldrb	r3, [r7, #31]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f040 80a9 	bne.w	800ddb6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	1c59      	adds	r1, r3, #1
 800dc6e:	61b9      	str	r1, [r7, #24]
 800dc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc74:	4413      	add	r3, r2
 800dc76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	f003 0301 	and.w	r3, r3, #1
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00d      	beq.n	800dc9e <put_fat+0xa4>
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	b25b      	sxtb	r3, r3
 800dc88:	f003 030f 	and.w	r3, r3, #15
 800dc8c:	b25a      	sxtb	r2, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	011b      	lsls	r3, r3, #4
 800dc94:	b25b      	sxtb	r3, r3
 800dc96:	4313      	orrs	r3, r2
 800dc98:	b25b      	sxtb	r3, r3
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	e001      	b.n	800dca2 <put_fat+0xa8>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	697a      	ldr	r2, [r7, #20]
 800dca4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2201      	movs	r2, #1
 800dcaa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	0a5b      	lsrs	r3, r3, #9
 800dcb4:	4413      	add	r3, r2
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f7ff fe3b 	bl	800d934 <move_window>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcc2:	7ffb      	ldrb	r3, [r7, #31]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d178      	bne.n	800ddba <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcd4:	4413      	add	r3, r2
 800dcd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <put_fat+0xf0>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	091b      	lsrs	r3, r3, #4
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	e00e      	b.n	800dd08 <put_fat+0x10e>
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	b25b      	sxtb	r3, r3
 800dcf0:	f023 030f 	bic.w	r3, r3, #15
 800dcf4:	b25a      	sxtb	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	0a1b      	lsrs	r3, r3, #8
 800dcfa:	b25b      	sxtb	r3, r3
 800dcfc:	f003 030f 	and.w	r3, r3, #15
 800dd00:	b25b      	sxtb	r3, r3
 800dd02:	4313      	orrs	r3, r2
 800dd04:	b25b      	sxtb	r3, r3
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	697a      	ldr	r2, [r7, #20]
 800dd0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	70da      	strb	r2, [r3, #3]
			break;
 800dd12:	e057      	b.n	800ddc4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	0a1b      	lsrs	r3, r3, #8
 800dd1c:	4413      	add	r3, r2
 800dd1e:	4619      	mov	r1, r3
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f7ff fe07 	bl	800d934 <move_window>
 800dd26:	4603      	mov	r3, r0
 800dd28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd2a:	7ffb      	ldrb	r3, [r7, #31]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d146      	bne.n	800ddbe <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	005b      	lsls	r3, r3, #1
 800dd3a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dd3e:	4413      	add	r3, r2
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	b292      	uxth	r2, r2
 800dd44:	4611      	mov	r1, r2
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7ff fb7f 	bl	800d44a <st_word>
			fs->wflag = 1;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	70da      	strb	r2, [r3, #3]
			break;
 800dd52:	e037      	b.n	800ddc4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	09db      	lsrs	r3, r3, #7
 800dd5c:	4413      	add	r3, r2
 800dd5e:	4619      	mov	r1, r3
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f7ff fde7 	bl	800d934 <move_window>
 800dd66:	4603      	mov	r3, r0
 800dd68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd6a:	7ffb      	ldrb	r3, [r7, #31]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d128      	bne.n	800ddc2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd84:	4413      	add	r3, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7ff fb3c 	bl	800d404 <ld_dword>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dd92:	4323      	orrs	r3, r4
 800dd94:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dda4:	4413      	add	r3, r2
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7ff fb69 	bl	800d480 <st_dword>
			fs->wflag = 1;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	70da      	strb	r2, [r3, #3]
			break;
 800ddb4:	e006      	b.n	800ddc4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ddb6:	bf00      	nop
 800ddb8:	e004      	b.n	800ddc4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ddba:	bf00      	nop
 800ddbc:	e002      	b.n	800ddc4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ddbe:	bf00      	nop
 800ddc0:	e000      	b.n	800ddc4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ddc2:	bf00      	nop
		}
	}
	return res;
 800ddc4:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3724      	adds	r7, #36	; 0x24
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd90      	pop	{r4, r7, pc}

0800ddce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b088      	sub	sp, #32
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	60f8      	str	r0, [r7, #12]
 800ddd6:	60b9      	str	r1, [r7, #8]
 800ddd8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ddda:	2300      	movs	r3, #0
 800dddc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	d904      	bls.n	800ddf4 <remove_chain+0x26>
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	699b      	ldr	r3, [r3, #24]
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d301      	bcc.n	800ddf8 <remove_chain+0x2a>
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	e04b      	b.n	800de90 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00c      	beq.n	800de18 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ddfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	69b8      	ldr	r0, [r7, #24]
 800de06:	f7ff fef8 	bl	800dbfa <put_fat>
 800de0a:	4603      	mov	r3, r0
 800de0c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800de0e:	7ffb      	ldrb	r3, [r7, #31]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <remove_chain+0x4a>
 800de14:	7ffb      	ldrb	r3, [r7, #31]
 800de16:	e03b      	b.n	800de90 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800de18:	68b9      	ldr	r1, [r7, #8]
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f7ff fe45 	bl	800daaa <get_fat>
 800de20:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d031      	beq.n	800de8c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d101      	bne.n	800de32 <remove_chain+0x64>
 800de2e:	2302      	movs	r3, #2
 800de30:	e02e      	b.n	800de90 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de38:	d101      	bne.n	800de3e <remove_chain+0x70>
 800de3a:	2301      	movs	r3, #1
 800de3c:	e028      	b.n	800de90 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800de3e:	2200      	movs	r2, #0
 800de40:	68b9      	ldr	r1, [r7, #8]
 800de42:	69b8      	ldr	r0, [r7, #24]
 800de44:	f7ff fed9 	bl	800dbfa <put_fat>
 800de48:	4603      	mov	r3, r0
 800de4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800de4c:	7ffb      	ldrb	r3, [r7, #31]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <remove_chain+0x88>
 800de52:	7ffb      	ldrb	r3, [r7, #31]
 800de54:	e01c      	b.n	800de90 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	695a      	ldr	r2, [r3, #20]
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	3b02      	subs	r3, #2
 800de60:	429a      	cmp	r2, r3
 800de62:	d20b      	bcs.n	800de7c <remove_chain+0xae>
			fs->free_clst++;
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	1c5a      	adds	r2, r3, #1
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	791b      	ldrb	r3, [r3, #4]
 800de72:	f043 0301 	orr.w	r3, r3, #1
 800de76:	b2da      	uxtb	r2, r3
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	699b      	ldr	r3, [r3, #24]
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	429a      	cmp	r2, r3
 800de88:	d3c6      	bcc.n	800de18 <remove_chain+0x4a>
 800de8a:	e000      	b.n	800de8e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800de8c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800de8e:	2300      	movs	r3, #0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3720      	adds	r7, #32
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d10d      	bne.n	800deca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	691b      	ldr	r3, [r3, #16]
 800deb2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d004      	beq.n	800dec4 <create_chain+0x2c>
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	69ba      	ldr	r2, [r7, #24]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d31b      	bcc.n	800defc <create_chain+0x64>
 800dec4:	2301      	movs	r3, #1
 800dec6:	61bb      	str	r3, [r7, #24]
 800dec8:	e018      	b.n	800defc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff fdec 	bl	800daaa <get_fat>
 800ded2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d801      	bhi.n	800dede <create_chain+0x46>
 800deda:	2301      	movs	r3, #1
 800dedc:	e070      	b.n	800dfc0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dee4:	d101      	bne.n	800deea <create_chain+0x52>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	e06a      	b.n	800dfc0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	699b      	ldr	r3, [r3, #24]
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	429a      	cmp	r2, r3
 800def2:	d201      	bcs.n	800def8 <create_chain+0x60>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	e063      	b.n	800dfc0 <create_chain+0x128>
		scl = clst;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	3301      	adds	r3, #1
 800df04:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	699b      	ldr	r3, [r3, #24]
 800df0a:	69fa      	ldr	r2, [r7, #28]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d307      	bcc.n	800df20 <create_chain+0x88>
				ncl = 2;
 800df10:	2302      	movs	r3, #2
 800df12:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800df14:	69fa      	ldr	r2, [r7, #28]
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d901      	bls.n	800df20 <create_chain+0x88>
 800df1c:	2300      	movs	r3, #0
 800df1e:	e04f      	b.n	800dfc0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800df20:	69f9      	ldr	r1, [r7, #28]
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7ff fdc1 	bl	800daaa <get_fat>
 800df28:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00e      	beq.n	800df4e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d003      	beq.n	800df3e <create_chain+0xa6>
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df3c:	d101      	bne.n	800df42 <create_chain+0xaa>
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	e03e      	b.n	800dfc0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800df42:	69fa      	ldr	r2, [r7, #28]
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	429a      	cmp	r2, r3
 800df48:	d1da      	bne.n	800df00 <create_chain+0x68>
 800df4a:	2300      	movs	r3, #0
 800df4c:	e038      	b.n	800dfc0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800df4e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800df50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df54:	69f9      	ldr	r1, [r7, #28]
 800df56:	6938      	ldr	r0, [r7, #16]
 800df58:	f7ff fe4f 	bl	800dbfa <put_fat>
 800df5c:	4603      	mov	r3, r0
 800df5e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800df60:	7dfb      	ldrb	r3, [r7, #23]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d109      	bne.n	800df7a <create_chain+0xe2>
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d006      	beq.n	800df7a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800df6c:	69fa      	ldr	r2, [r7, #28]
 800df6e:	6839      	ldr	r1, [r7, #0]
 800df70:	6938      	ldr	r0, [r7, #16]
 800df72:	f7ff fe42 	bl	800dbfa <put_fat>
 800df76:	4603      	mov	r3, r0
 800df78:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800df7a:	7dfb      	ldrb	r3, [r7, #23]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d116      	bne.n	800dfae <create_chain+0x116>
		fs->last_clst = ncl;
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	69fa      	ldr	r2, [r7, #28]
 800df84:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	695a      	ldr	r2, [r3, #20]
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	699b      	ldr	r3, [r3, #24]
 800df8e:	3b02      	subs	r3, #2
 800df90:	429a      	cmp	r2, r3
 800df92:	d804      	bhi.n	800df9e <create_chain+0x106>
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	695b      	ldr	r3, [r3, #20]
 800df98:	1e5a      	subs	r2, r3, #1
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	791b      	ldrb	r3, [r3, #4]
 800dfa2:	f043 0301 	orr.w	r3, r3, #1
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	711a      	strb	r2, [r3, #4]
 800dfac:	e007      	b.n	800dfbe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dfae:	7dfb      	ldrb	r3, [r7, #23]
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d102      	bne.n	800dfba <create_chain+0x122>
 800dfb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfb8:	e000      	b.n	800dfbc <create_chain+0x124>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dfbe:	69fb      	ldr	r3, [r7, #28]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3720      	adds	r7, #32
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b087      	sub	sp, #28
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfdc:	3304      	adds	r3, #4
 800dfde:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	0a5b      	lsrs	r3, r3, #9
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	8952      	ldrh	r2, [r2, #10]
 800dfe8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	1d1a      	adds	r2, r3, #4
 800dff2:	613a      	str	r2, [r7, #16]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d101      	bne.n	800e002 <clmt_clust+0x3a>
 800dffe:	2300      	movs	r3, #0
 800e000:	e010      	b.n	800e024 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	429a      	cmp	r2, r3
 800e008:	d307      	bcc.n	800e01a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e00a:	697a      	ldr	r2, [r7, #20]
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	617b      	str	r3, [r7, #20]
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	3304      	adds	r3, #4
 800e016:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e018:	e7e9      	b.n	800dfee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e01a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	4413      	add	r3, r2
}
 800e024:	4618      	mov	r0, r3
 800e026:	371c      	adds	r7, #28
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e046:	d204      	bcs.n	800e052 <dir_sdi+0x22>
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	f003 031f 	and.w	r3, r3, #31
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d001      	beq.n	800e056 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e052:	2302      	movs	r3, #2
 800e054:	e063      	b.n	800e11e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d106      	bne.n	800e076 <dir_sdi+0x46>
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	2b02      	cmp	r3, #2
 800e06e:	d902      	bls.n	800e076 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e074:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10c      	bne.n	800e096 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	095b      	lsrs	r3, r3, #5
 800e080:	693a      	ldr	r2, [r7, #16]
 800e082:	8912      	ldrh	r2, [r2, #8]
 800e084:	4293      	cmp	r3, r2
 800e086:	d301      	bcc.n	800e08c <dir_sdi+0x5c>
 800e088:	2302      	movs	r3, #2
 800e08a:	e048      	b.n	800e11e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	61da      	str	r2, [r3, #28]
 800e094:	e029      	b.n	800e0ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	895b      	ldrh	r3, [r3, #10]
 800e09a:	025b      	lsls	r3, r3, #9
 800e09c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e09e:	e019      	b.n	800e0d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6979      	ldr	r1, [r7, #20]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7ff fd00 	bl	800daaa <get_fat>
 800e0aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0b2:	d101      	bne.n	800e0b8 <dir_sdi+0x88>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e032      	b.n	800e11e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d904      	bls.n	800e0c8 <dir_sdi+0x98>
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	699b      	ldr	r3, [r3, #24]
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d301      	bcc.n	800e0cc <dir_sdi+0x9c>
 800e0c8:	2302      	movs	r3, #2
 800e0ca:	e028      	b.n	800e11e <dir_sdi+0xee>
			ofs -= csz;
 800e0cc:	683a      	ldr	r2, [r7, #0]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e0d4:	683a      	ldr	r2, [r7, #0]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d2e1      	bcs.n	800e0a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e0dc:	6979      	ldr	r1, [r7, #20]
 800e0de:	6938      	ldr	r0, [r7, #16]
 800e0e0:	f7ff fcc4 	bl	800da6c <clust2sect>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	697a      	ldr	r2, [r7, #20]
 800e0ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	69db      	ldr	r3, [r3, #28]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d101      	bne.n	800e0fc <dir_sdi+0xcc>
 800e0f8:	2302      	movs	r3, #2
 800e0fa:	e010      	b.n	800e11e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	69da      	ldr	r2, [r3, #28]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	0a5b      	lsrs	r3, r3, #9
 800e104:	441a      	add	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e116:	441a      	add	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3718      	adds	r7, #24
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b086      	sub	sp, #24
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
 800e12e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	695b      	ldr	r3, [r3, #20]
 800e13a:	3320      	adds	r3, #32
 800e13c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	69db      	ldr	r3, [r3, #28]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d003      	beq.n	800e14e <dir_next+0x28>
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e14c:	d301      	bcc.n	800e152 <dir_next+0x2c>
 800e14e:	2304      	movs	r3, #4
 800e150:	e0aa      	b.n	800e2a8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f040 8098 	bne.w	800e28e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	69db      	ldr	r3, [r3, #28]
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	699b      	ldr	r3, [r3, #24]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10b      	bne.n	800e188 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	095b      	lsrs	r3, r3, #5
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	8912      	ldrh	r2, [r2, #8]
 800e178:	4293      	cmp	r3, r2
 800e17a:	f0c0 8088 	bcc.w	800e28e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	61da      	str	r2, [r3, #28]
 800e184:	2304      	movs	r3, #4
 800e186:	e08f      	b.n	800e2a8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	0a5b      	lsrs	r3, r3, #9
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	8952      	ldrh	r2, [r2, #10]
 800e190:	3a01      	subs	r2, #1
 800e192:	4013      	ands	r3, r2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d17a      	bne.n	800e28e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	699b      	ldr	r3, [r3, #24]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	f7ff fc82 	bl	800daaa <get_fat>
 800e1a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d801      	bhi.n	800e1b2 <dir_next+0x8c>
 800e1ae:	2302      	movs	r3, #2
 800e1b0:	e07a      	b.n	800e2a8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1b8:	d101      	bne.n	800e1be <dir_next+0x98>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e074      	b.n	800e2a8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	699b      	ldr	r3, [r3, #24]
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d358      	bcc.n	800e27a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d104      	bne.n	800e1d8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	61da      	str	r2, [r3, #28]
 800e1d4:	2304      	movs	r3, #4
 800e1d6:	e067      	b.n	800e2a8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	699b      	ldr	r3, [r3, #24]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	f7ff fe59 	bl	800de98 <create_chain>
 800e1e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d101      	bne.n	800e1f2 <dir_next+0xcc>
 800e1ee:	2307      	movs	r3, #7
 800e1f0:	e05a      	b.n	800e2a8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d101      	bne.n	800e1fc <dir_next+0xd6>
 800e1f8:	2302      	movs	r3, #2
 800e1fa:	e055      	b.n	800e2a8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e202:	d101      	bne.n	800e208 <dir_next+0xe2>
 800e204:	2301      	movs	r3, #1
 800e206:	e04f      	b.n	800e2a8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f7ff fb4f 	bl	800d8ac <sync_window>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d001      	beq.n	800e218 <dir_next+0xf2>
 800e214:	2301      	movs	r3, #1
 800e216:	e047      	b.n	800e2a8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	3334      	adds	r3, #52	; 0x34
 800e21c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e220:	2100      	movs	r1, #0
 800e222:	4618      	mov	r0, r3
 800e224:	f7ff f979 	bl	800d51a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e228:	2300      	movs	r3, #0
 800e22a:	613b      	str	r3, [r7, #16]
 800e22c:	6979      	ldr	r1, [r7, #20]
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f7ff fc1c 	bl	800da6c <clust2sect>
 800e234:	4602      	mov	r2, r0
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	631a      	str	r2, [r3, #48]	; 0x30
 800e23a:	e012      	b.n	800e262 <dir_next+0x13c>
						fs->wflag = 1;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2201      	movs	r2, #1
 800e240:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f7ff fb32 	bl	800d8ac <sync_window>
 800e248:	4603      	mov	r3, r0
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <dir_next+0x12c>
 800e24e:	2301      	movs	r3, #1
 800e250:	e02a      	b.n	800e2a8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	3301      	adds	r3, #1
 800e256:	613b      	str	r3, [r7, #16]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	631a      	str	r2, [r3, #48]	; 0x30
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	895b      	ldrh	r3, [r3, #10]
 800e266:	461a      	mov	r2, r3
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d3e6      	bcc.n	800e23c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	1ad2      	subs	r2, r2, r3
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	697a      	ldr	r2, [r7, #20]
 800e27e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e280:	6979      	ldr	r1, [r7, #20]
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f7ff fbf2 	bl	800da6c <clust2sect>
 800e288:	4602      	mov	r2, r0
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	68ba      	ldr	r2, [r7, #8]
 800e292:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2a0:	441a      	add	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7ff feb4 	bl	800e030 <dir_sdi>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e2cc:	7dfb      	ldrb	r3, [r7, #23]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d12b      	bne.n	800e32a <dir_alloc+0x7a>
		n = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	69db      	ldr	r3, [r3, #28]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	f7ff fb29 	bl	800d934 <move_window>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d11d      	bne.n	800e328 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6a1b      	ldr	r3, [r3, #32]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	2be5      	cmp	r3, #229	; 0xe5
 800e2f4:	d004      	beq.n	800e300 <dir_alloc+0x50>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6a1b      	ldr	r3, [r3, #32]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d107      	bne.n	800e310 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	3301      	adds	r3, #1
 800e304:	613b      	str	r3, [r7, #16]
 800e306:	693a      	ldr	r2, [r7, #16]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d102      	bne.n	800e314 <dir_alloc+0x64>
 800e30e:	e00c      	b.n	800e32a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e310:	2300      	movs	r3, #0
 800e312:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e314:	2101      	movs	r1, #1
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f7ff ff05 	bl	800e126 <dir_next>
 800e31c:	4603      	mov	r3, r0
 800e31e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e320:	7dfb      	ldrb	r3, [r7, #23]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d0d7      	beq.n	800e2d6 <dir_alloc+0x26>
 800e326:	e000      	b.n	800e32a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e328:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	2b04      	cmp	r3, #4
 800e32e:	d101      	bne.n	800e334 <dir_alloc+0x84>
 800e330:	2307      	movs	r3, #7
 800e332:	75fb      	strb	r3, [r7, #23]
	return res;
 800e334:	7dfb      	ldrb	r3, [r7, #23]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3718      	adds	r7, #24
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b084      	sub	sp, #16
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	331a      	adds	r3, #26
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff f841 	bl	800d3d4 <ld_word>
 800e352:	4603      	mov	r3, r0
 800e354:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	2b03      	cmp	r3, #3
 800e35c:	d109      	bne.n	800e372 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	3314      	adds	r3, #20
 800e362:	4618      	mov	r0, r3
 800e364:	f7ff f836 	bl	800d3d4 <ld_word>
 800e368:	4603      	mov	r3, r0
 800e36a:	041b      	lsls	r3, r3, #16
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	4313      	orrs	r3, r2
 800e370:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e372:	68fb      	ldr	r3, [r7, #12]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3710      	adds	r7, #16
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	331a      	adds	r3, #26
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	b292      	uxth	r2, r2
 800e390:	4611      	mov	r1, r2
 800e392:	4618      	mov	r0, r3
 800e394:	f7ff f859 	bl	800d44a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	d109      	bne.n	800e3b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	f103 0214 	add.w	r2, r3, #20
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	0c1b      	lsrs	r3, r3, #16
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	4610      	mov	r0, r2
 800e3b0:	f7ff f84b 	bl	800d44a <st_word>
	}
}
 800e3b4:	bf00      	nop
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e3bc:	b590      	push	{r4, r7, lr}
 800e3be:	b087      	sub	sp, #28
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	331a      	adds	r3, #26
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7ff f802 	bl	800d3d4 <ld_word>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d001      	beq.n	800e3da <cmp_lfn+0x1e>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e059      	b.n	800e48e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3e2:	1e5a      	subs	r2, r3, #1
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	005b      	lsls	r3, r3, #1
 800e3e8:	4413      	add	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	4413      	add	r3, r2
 800e3ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	81fb      	strh	r3, [r7, #14]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	613b      	str	r3, [r7, #16]
 800e3f8:	e033      	b.n	800e462 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e3fa:	4a27      	ldr	r2, [pc, #156]	; (800e498 <cmp_lfn+0xdc>)
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	4413      	add	r3, r2
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	461a      	mov	r2, r3
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	4413      	add	r3, r2
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fe ffe3 	bl	800d3d4 <ld_word>
 800e40e:	4603      	mov	r3, r0
 800e410:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e412:	89fb      	ldrh	r3, [r7, #14]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d01a      	beq.n	800e44e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	2bfe      	cmp	r3, #254	; 0xfe
 800e41c:	d812      	bhi.n	800e444 <cmp_lfn+0x88>
 800e41e:	89bb      	ldrh	r3, [r7, #12]
 800e420:	4618      	mov	r0, r3
 800e422:	f001 ff2d 	bl	8010280 <ff_wtoupper>
 800e426:	4603      	mov	r3, r0
 800e428:	461c      	mov	r4, r3
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	1c5a      	adds	r2, r3, #1
 800e42e:	617a      	str	r2, [r7, #20]
 800e430:	005b      	lsls	r3, r3, #1
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	4413      	add	r3, r2
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	4618      	mov	r0, r3
 800e43a:	f001 ff21 	bl	8010280 <ff_wtoupper>
 800e43e:	4603      	mov	r3, r0
 800e440:	429c      	cmp	r4, r3
 800e442:	d001      	beq.n	800e448 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e444:	2300      	movs	r3, #0
 800e446:	e022      	b.n	800e48e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e448:	89bb      	ldrh	r3, [r7, #12]
 800e44a:	81fb      	strh	r3, [r7, #14]
 800e44c:	e006      	b.n	800e45c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e44e:	89bb      	ldrh	r3, [r7, #12]
 800e450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e454:	4293      	cmp	r3, r2
 800e456:	d001      	beq.n	800e45c <cmp_lfn+0xa0>
 800e458:	2300      	movs	r3, #0
 800e45a:	e018      	b.n	800e48e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	3301      	adds	r3, #1
 800e460:	613b      	str	r3, [r7, #16]
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	2b0c      	cmp	r3, #12
 800e466:	d9c8      	bls.n	800e3fa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00b      	beq.n	800e48c <cmp_lfn+0xd0>
 800e474:	89fb      	ldrh	r3, [r7, #14]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d008      	beq.n	800e48c <cmp_lfn+0xd0>
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	005b      	lsls	r3, r3, #1
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	4413      	add	r3, r2
 800e482:	881b      	ldrh	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <cmp_lfn+0xd0>
 800e488:	2300      	movs	r3, #0
 800e48a:	e000      	b.n	800e48e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e48c:	2301      	movs	r3, #1
}
 800e48e:	4618      	mov	r0, r3
 800e490:	371c      	adds	r7, #28
 800e492:	46bd      	mov	sp, r7
 800e494:	bd90      	pop	{r4, r7, pc}
 800e496:	bf00      	nop
 800e498:	08012890 	.word	0x08012890

0800e49c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	4611      	mov	r1, r2
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	460b      	mov	r3, r1
 800e4ac:	71fb      	strb	r3, [r7, #7]
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	330d      	adds	r3, #13
 800e4b6:	79ba      	ldrb	r2, [r7, #6]
 800e4b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	330b      	adds	r3, #11
 800e4be:	220f      	movs	r2, #15
 800e4c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	330c      	adds	r3, #12
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	331a      	adds	r3, #26
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7fe ffba 	bl	800d44a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e4d6:	79fb      	ldrb	r3, [r7, #7]
 800e4d8:	1e5a      	subs	r2, r3, #1
 800e4da:	4613      	mov	r3, r2
 800e4dc:	005b      	lsls	r3, r3, #1
 800e4de:	4413      	add	r3, r2
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	4413      	add	r3, r2
 800e4e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	82fb      	strh	r3, [r7, #22]
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e4ee:	8afb      	ldrh	r3, [r7, #22]
 800e4f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d007      	beq.n	800e508 <put_lfn+0x6c>
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	61fa      	str	r2, [r7, #28]
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	4413      	add	r3, r2
 800e504:	881b      	ldrh	r3, [r3, #0]
 800e506:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e508:	4a17      	ldr	r2, [pc, #92]	; (800e568 <put_lfn+0xcc>)
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	4413      	add	r3, r2
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	461a      	mov	r2, r3
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	4413      	add	r3, r2
 800e516:	8afa      	ldrh	r2, [r7, #22]
 800e518:	4611      	mov	r1, r2
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fe ff95 	bl	800d44a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e520:	8afb      	ldrh	r3, [r7, #22]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d102      	bne.n	800e52c <put_lfn+0x90>
 800e526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e52a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e52c:	69bb      	ldr	r3, [r7, #24]
 800e52e:	3301      	adds	r3, #1
 800e530:	61bb      	str	r3, [r7, #24]
 800e532:	69bb      	ldr	r3, [r7, #24]
 800e534:	2b0c      	cmp	r3, #12
 800e536:	d9da      	bls.n	800e4ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e538:	8afb      	ldrh	r3, [r7, #22]
 800e53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e53e:	4293      	cmp	r3, r2
 800e540:	d006      	beq.n	800e550 <put_lfn+0xb4>
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	005b      	lsls	r3, r3, #1
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	4413      	add	r3, r2
 800e54a:	881b      	ldrh	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d103      	bne.n	800e558 <put_lfn+0xbc>
 800e550:	79fb      	ldrb	r3, [r7, #7]
 800e552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e556:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	79fa      	ldrb	r2, [r7, #7]
 800e55c:	701a      	strb	r2, [r3, #0]
}
 800e55e:	bf00      	nop
 800e560:	3720      	adds	r7, #32
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	08012890 	.word	0x08012890

0800e56c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b08c      	sub	sp, #48	; 0x30
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
 800e578:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e57a:	220b      	movs	r2, #11
 800e57c:	68b9      	ldr	r1, [r7, #8]
 800e57e:	68f8      	ldr	r0, [r7, #12]
 800e580:	f7fe ffaa 	bl	800d4d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	2b05      	cmp	r3, #5
 800e588:	d929      	bls.n	800e5de <gen_numname+0x72>
		sr = seq;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e58e:	e020      	b.n	800e5d2 <gen_numname+0x66>
			wc = *lfn++;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	1c9a      	adds	r2, r3, #2
 800e594:	607a      	str	r2, [r7, #4]
 800e596:	881b      	ldrh	r3, [r3, #0]
 800e598:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e59a:	2300      	movs	r3, #0
 800e59c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e59e:	e015      	b.n	800e5cc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	005a      	lsls	r2, r3, #1
 800e5a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5a6:	f003 0301 	and.w	r3, r3, #1
 800e5aa:	4413      	add	r3, r2
 800e5ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e5ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5b0:	085b      	lsrs	r3, r3, #1
 800e5b2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d003      	beq.n	800e5c6 <gen_numname+0x5a>
 800e5be:	69fa      	ldr	r2, [r7, #28]
 800e5c0:	4b30      	ldr	r3, [pc, #192]	; (800e684 <gen_numname+0x118>)
 800e5c2:	4053      	eors	r3, r2
 800e5c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ce:	2b0f      	cmp	r3, #15
 800e5d0:	d9e6      	bls.n	800e5a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	881b      	ldrh	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1da      	bne.n	800e590 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e5de:	2307      	movs	r3, #7
 800e5e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	f003 030f 	and.w	r3, r3, #15
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	3330      	adds	r3, #48	; 0x30
 800e5ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e5f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5f6:	2b39      	cmp	r3, #57	; 0x39
 800e5f8:	d904      	bls.n	800e604 <gen_numname+0x98>
 800e5fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5fe:	3307      	adds	r3, #7
 800e600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e606:	1e5a      	subs	r2, r3, #1
 800e608:	62ba      	str	r2, [r7, #40]	; 0x28
 800e60a:	3330      	adds	r3, #48	; 0x30
 800e60c:	443b      	add	r3, r7
 800e60e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e612:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	091b      	lsrs	r3, r3, #4
 800e61a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1df      	bne.n	800e5e2 <gen_numname+0x76>
	ns[i] = '~';
 800e622:	f107 0214 	add.w	r2, r7, #20
 800e626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e628:	4413      	add	r3, r2
 800e62a:	227e      	movs	r2, #126	; 0x7e
 800e62c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e62e:	2300      	movs	r3, #0
 800e630:	627b      	str	r3, [r7, #36]	; 0x24
 800e632:	e002      	b.n	800e63a <gen_numname+0xce>
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	3301      	adds	r3, #1
 800e638:	627b      	str	r3, [r7, #36]	; 0x24
 800e63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63e:	429a      	cmp	r2, r3
 800e640:	d205      	bcs.n	800e64e <gen_numname+0xe2>
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	4413      	add	r3, r2
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	2b20      	cmp	r3, #32
 800e64c:	d1f2      	bne.n	800e634 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e650:	2b07      	cmp	r3, #7
 800e652:	d807      	bhi.n	800e664 <gen_numname+0xf8>
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	1c5a      	adds	r2, r3, #1
 800e658:	62ba      	str	r2, [r7, #40]	; 0x28
 800e65a:	3330      	adds	r3, #48	; 0x30
 800e65c:	443b      	add	r3, r7
 800e65e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e662:	e000      	b.n	800e666 <gen_numname+0xfa>
 800e664:	2120      	movs	r1, #32
 800e666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e668:	1c5a      	adds	r2, r3, #1
 800e66a:	627a      	str	r2, [r7, #36]	; 0x24
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	4413      	add	r3, r2
 800e670:	460a      	mov	r2, r1
 800e672:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e676:	2b07      	cmp	r3, #7
 800e678:	d9e9      	bls.n	800e64e <gen_numname+0xe2>
}
 800e67a:	bf00      	nop
 800e67c:	bf00      	nop
 800e67e:	3730      	adds	r7, #48	; 0x30
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	00011021 	.word	0x00011021

0800e688 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e688:	b480      	push	{r7}
 800e68a:	b085      	sub	sp, #20
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e694:	230b      	movs	r3, #11
 800e696:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e698:	7bfb      	ldrb	r3, [r7, #15]
 800e69a:	b2da      	uxtb	r2, r3
 800e69c:	0852      	lsrs	r2, r2, #1
 800e69e:	01db      	lsls	r3, r3, #7
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	1c59      	adds	r1, r3, #1
 800e6a8:	6079      	str	r1, [r7, #4]
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	60bb      	str	r3, [r7, #8]
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1ed      	bne.n	800e698 <sum_sfn+0x10>
	return sum;
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr

0800e6ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b086      	sub	sp, #24
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e6d8:	2100      	movs	r1, #0
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7ff fca8 	bl	800e030 <dir_sdi>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e6e4:	7dfb      	ldrb	r3, [r7, #23]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d001      	beq.n	800e6ee <dir_find+0x24>
 800e6ea:	7dfb      	ldrb	r3, [r7, #23]
 800e6ec:	e0a9      	b.n	800e842 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e6ee:	23ff      	movs	r3, #255	; 0xff
 800e6f0:	753b      	strb	r3, [r7, #20]
 800e6f2:	7d3b      	ldrb	r3, [r7, #20]
 800e6f4:	757b      	strb	r3, [r7, #21]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	69db      	ldr	r3, [r3, #28]
 800e702:	4619      	mov	r1, r3
 800e704:	6938      	ldr	r0, [r7, #16]
 800e706:	f7ff f915 	bl	800d934 <move_window>
 800e70a:	4603      	mov	r3, r0
 800e70c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e70e:	7dfb      	ldrb	r3, [r7, #23]
 800e710:	2b00      	cmp	r3, #0
 800e712:	f040 8090 	bne.w	800e836 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a1b      	ldr	r3, [r3, #32]
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e71e:	7dbb      	ldrb	r3, [r7, #22]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d102      	bne.n	800e72a <dir_find+0x60>
 800e724:	2304      	movs	r3, #4
 800e726:	75fb      	strb	r3, [r7, #23]
 800e728:	e08a      	b.n	800e840 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	330b      	adds	r3, #11
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e736:	73fb      	strb	r3, [r7, #15]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	7bfa      	ldrb	r2, [r7, #15]
 800e73c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e73e:	7dbb      	ldrb	r3, [r7, #22]
 800e740:	2be5      	cmp	r3, #229	; 0xe5
 800e742:	d007      	beq.n	800e754 <dir_find+0x8a>
 800e744:	7bfb      	ldrb	r3, [r7, #15]
 800e746:	f003 0308 	and.w	r3, r3, #8
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d009      	beq.n	800e762 <dir_find+0x98>
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
 800e750:	2b0f      	cmp	r3, #15
 800e752:	d006      	beq.n	800e762 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e754:	23ff      	movs	r3, #255	; 0xff
 800e756:	757b      	strb	r3, [r7, #21]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e75e:	631a      	str	r2, [r3, #48]	; 0x30
 800e760:	e05e      	b.n	800e820 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e762:	7bfb      	ldrb	r3, [r7, #15]
 800e764:	2b0f      	cmp	r3, #15
 800e766:	d136      	bne.n	800e7d6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e772:	2b00      	cmp	r3, #0
 800e774:	d154      	bne.n	800e820 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e776:	7dbb      	ldrb	r3, [r7, #22]
 800e778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00d      	beq.n	800e79c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a1b      	ldr	r3, [r3, #32]
 800e784:	7b5b      	ldrb	r3, [r3, #13]
 800e786:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e788:	7dbb      	ldrb	r3, [r7, #22]
 800e78a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e78e:	75bb      	strb	r3, [r7, #22]
 800e790:	7dbb      	ldrb	r3, [r7, #22]
 800e792:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	695a      	ldr	r2, [r3, #20]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e79c:	7dba      	ldrb	r2, [r7, #22]
 800e79e:	7d7b      	ldrb	r3, [r7, #21]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d115      	bne.n	800e7d0 <dir_find+0x106>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6a1b      	ldr	r3, [r3, #32]
 800e7a8:	330d      	adds	r3, #13
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	7d3a      	ldrb	r2, [r7, #20]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d10e      	bne.n	800e7d0 <dir_find+0x106>
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	68da      	ldr	r2, [r3, #12]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	4610      	mov	r0, r2
 800e7be:	f7ff fdfd 	bl	800e3bc <cmp_lfn>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d003      	beq.n	800e7d0 <dir_find+0x106>
 800e7c8:	7d7b      	ldrb	r3, [r7, #21]
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	e000      	b.n	800e7d2 <dir_find+0x108>
 800e7d0:	23ff      	movs	r3, #255	; 0xff
 800e7d2:	757b      	strb	r3, [r7, #21]
 800e7d4:	e024      	b.n	800e820 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e7d6:	7d7b      	ldrb	r3, [r7, #21]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d109      	bne.n	800e7f0 <dir_find+0x126>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6a1b      	ldr	r3, [r3, #32]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7ff ff51 	bl	800e688 <sum_sfn>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	7d3b      	ldrb	r3, [r7, #20]
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d024      	beq.n	800e83a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10a      	bne.n	800e814 <dir_find+0x14a>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6a18      	ldr	r0, [r3, #32]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	3324      	adds	r3, #36	; 0x24
 800e806:	220b      	movs	r2, #11
 800e808:	4619      	mov	r1, r3
 800e80a:	f7fe fea1 	bl	800d550 <mem_cmp>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d014      	beq.n	800e83e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e814:	23ff      	movs	r3, #255	; 0xff
 800e816:	757b      	strb	r3, [r7, #21]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e81e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e820:	2100      	movs	r1, #0
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7ff fc7f 	bl	800e126 <dir_next>
 800e828:	4603      	mov	r3, r0
 800e82a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f43f af65 	beq.w	800e6fe <dir_find+0x34>
 800e834:	e004      	b.n	800e840 <dir_find+0x176>
		if (res != FR_OK) break;
 800e836:	bf00      	nop
 800e838:	e002      	b.n	800e840 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e83a:	bf00      	nop
 800e83c:	e000      	b.n	800e840 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e83e:	bf00      	nop

	return res;
 800e840:	7dfb      	ldrb	r3, [r7, #23]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3718      	adds	r7, #24
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
	...

0800e84c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b08c      	sub	sp, #48	; 0x30
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e860:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d001      	beq.n	800e86c <dir_register+0x20>
 800e868:	2306      	movs	r3, #6
 800e86a:	e0e0      	b.n	800ea2e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e86c:	2300      	movs	r3, #0
 800e86e:	627b      	str	r3, [r7, #36]	; 0x24
 800e870:	e002      	b.n	800e878 <dir_register+0x2c>
 800e872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e874:	3301      	adds	r3, #1
 800e876:	627b      	str	r3, [r7, #36]	; 0x24
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	68da      	ldr	r2, [r3, #12]
 800e87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	4413      	add	r3, r2
 800e882:	881b      	ldrh	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1f4      	bne.n	800e872 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e88e:	f107 030c 	add.w	r3, r7, #12
 800e892:	220c      	movs	r2, #12
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe fe1f 	bl	800d4d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e89a:	7dfb      	ldrb	r3, [r7, #23]
 800e89c:	f003 0301 	and.w	r3, r3, #1
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d032      	beq.n	800e90a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2240      	movs	r2, #64	; 0x40
 800e8a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8b0:	e016      	b.n	800e8e0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	68da      	ldr	r2, [r3, #12]
 800e8bc:	f107 010c 	add.w	r1, r7, #12
 800e8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c2:	f7ff fe53 	bl	800e56c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f7ff feff 	bl	800e6ca <dir_find>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d106      	bne.n	800e8e8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	3301      	adds	r3, #1
 800e8de:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e2:	2b63      	cmp	r3, #99	; 0x63
 800e8e4:	d9e5      	bls.n	800e8b2 <dir_register+0x66>
 800e8e6:	e000      	b.n	800e8ea <dir_register+0x9e>
			if (res != FR_OK) break;
 800e8e8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ec:	2b64      	cmp	r3, #100	; 0x64
 800e8ee:	d101      	bne.n	800e8f4 <dir_register+0xa8>
 800e8f0:	2307      	movs	r3, #7
 800e8f2:	e09c      	b.n	800ea2e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e8f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8f8:	2b04      	cmp	r3, #4
 800e8fa:	d002      	beq.n	800e902 <dir_register+0xb6>
 800e8fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e900:	e095      	b.n	800ea2e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e902:	7dfa      	ldrb	r2, [r7, #23]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e90a:	7dfb      	ldrb	r3, [r7, #23]
 800e90c:	f003 0302 	and.w	r3, r3, #2
 800e910:	2b00      	cmp	r3, #0
 800e912:	d007      	beq.n	800e924 <dir_register+0xd8>
 800e914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e916:	330c      	adds	r3, #12
 800e918:	4a47      	ldr	r2, [pc, #284]	; (800ea38 <dir_register+0x1ec>)
 800e91a:	fba2 2303 	umull	r2, r3, r2, r3
 800e91e:	089b      	lsrs	r3, r3, #2
 800e920:	3301      	adds	r3, #1
 800e922:	e000      	b.n	800e926 <dir_register+0xda>
 800e924:	2301      	movs	r3, #1
 800e926:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e928:	6a39      	ldr	r1, [r7, #32]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7ff fcc0 	bl	800e2b0 <dir_alloc>
 800e930:	4603      	mov	r3, r0
 800e932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d148      	bne.n	800e9d0 <dir_register+0x184>
 800e93e:	6a3b      	ldr	r3, [r7, #32]
 800e940:	3b01      	subs	r3, #1
 800e942:	623b      	str	r3, [r7, #32]
 800e944:	6a3b      	ldr	r3, [r7, #32]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d042      	beq.n	800e9d0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	695a      	ldr	r2, [r3, #20]
 800e94e:	6a3b      	ldr	r3, [r7, #32]
 800e950:	015b      	lsls	r3, r3, #5
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	4619      	mov	r1, r3
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7ff fb6a 	bl	800e030 <dir_sdi>
 800e95c:	4603      	mov	r3, r0
 800e95e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e966:	2b00      	cmp	r3, #0
 800e968:	d132      	bne.n	800e9d0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	3324      	adds	r3, #36	; 0x24
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff fe8a 	bl	800e688 <sum_sfn>
 800e974:	4603      	mov	r3, r0
 800e976:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	69db      	ldr	r3, [r3, #28]
 800e97c:	4619      	mov	r1, r3
 800e97e:	69f8      	ldr	r0, [r7, #28]
 800e980:	f7fe ffd8 	bl	800d934 <move_window>
 800e984:	4603      	mov	r3, r0
 800e986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e98a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d11d      	bne.n	800e9ce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	68d8      	ldr	r0, [r3, #12]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6a19      	ldr	r1, [r3, #32]
 800e99a:	6a3b      	ldr	r3, [r7, #32]
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	7efb      	ldrb	r3, [r7, #27]
 800e9a0:	f7ff fd7c 	bl	800e49c <put_lfn>
				fs->wflag = 1;
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f7ff fbba 	bl	800e126 <dir_next>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e9b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d107      	bne.n	800e9d0 <dir_register+0x184>
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	623b      	str	r3, [r7, #32]
 800e9c6:	6a3b      	ldr	r3, [r7, #32]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1d5      	bne.n	800e978 <dir_register+0x12c>
 800e9cc:	e000      	b.n	800e9d0 <dir_register+0x184>
				if (res != FR_OK) break;
 800e9ce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e9d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d128      	bne.n	800ea2a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	69db      	ldr	r3, [r3, #28]
 800e9dc:	4619      	mov	r1, r3
 800e9de:	69f8      	ldr	r0, [r7, #28]
 800e9e0:	f7fe ffa8 	bl	800d934 <move_window>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e9ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d11b      	bne.n	800ea2a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6a1b      	ldr	r3, [r3, #32]
 800e9f6:	2220      	movs	r2, #32
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fe fd8d 	bl	800d51a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a18      	ldr	r0, [r3, #32]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3324      	adds	r3, #36	; 0x24
 800ea08:	220b      	movs	r2, #11
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	f7fe fd64 	bl	800d4d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6a1b      	ldr	r3, [r3, #32]
 800ea1a:	330c      	adds	r3, #12
 800ea1c:	f002 0218 	and.w	r2, r2, #24
 800ea20:	b2d2      	uxtb	r2, r2
 800ea22:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	2201      	movs	r2, #1
 800ea28:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ea2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3730      	adds	r7, #48	; 0x30
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	4ec4ec4f 	.word	0x4ec4ec4f

0800ea3c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b088      	sub	sp, #32
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	69db      	ldr	r3, [r3, #28]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f000 80c9 	beq.w	800ebee <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea64:	d032      	beq.n	800eacc <get_fileinfo+0x90>
			i = j = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	61bb      	str	r3, [r7, #24]
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ea6e:	e01b      	b.n	800eaa8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ea70:	89fb      	ldrh	r3, [r7, #14]
 800ea72:	2100      	movs	r1, #0
 800ea74:	4618      	mov	r0, r3
 800ea76:	f001 fbc7 	bl	8010208 <ff_convert>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ea7e:	89fb      	ldrh	r3, [r7, #14]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d102      	bne.n	800ea8a <get_fileinfo+0x4e>
 800ea84:	2300      	movs	r3, #0
 800ea86:	61fb      	str	r3, [r7, #28]
 800ea88:	e01a      	b.n	800eac0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	2bfe      	cmp	r3, #254	; 0xfe
 800ea8e:	d902      	bls.n	800ea96 <get_fileinfo+0x5a>
 800ea90:	2300      	movs	r3, #0
 800ea92:	61fb      	str	r3, [r7, #28]
 800ea94:	e014      	b.n	800eac0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	1c5a      	adds	r2, r3, #1
 800ea9a:	61fa      	str	r2, [r7, #28]
 800ea9c:	89fa      	ldrh	r2, [r7, #14]
 800ea9e:	b2d1      	uxtb	r1, r2
 800eaa0:	683a      	ldr	r2, [r7, #0]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	460a      	mov	r2, r1
 800eaa6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	68da      	ldr	r2, [r3, #12]
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	1c59      	adds	r1, r3, #1
 800eab0:	61b9      	str	r1, [r7, #24]
 800eab2:	005b      	lsls	r3, r3, #1
 800eab4:	4413      	add	r3, r2
 800eab6:	881b      	ldrh	r3, [r3, #0]
 800eab8:	81fb      	strh	r3, [r7, #14]
 800eaba:	89fb      	ldrh	r3, [r7, #14]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1d7      	bne.n	800ea70 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800eac0:	683a      	ldr	r2, [r7, #0]
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	4413      	add	r3, r2
 800eac6:	3316      	adds	r3, #22
 800eac8:	2200      	movs	r2, #0
 800eaca:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800eacc:	2300      	movs	r3, #0
 800eace:	61bb      	str	r3, [r7, #24]
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	4413      	add	r3, r2
 800eada:	3316      	adds	r3, #22
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800eae0:	e04c      	b.n	800eb7c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a1a      	ldr	r2, [r3, #32]
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	1c59      	adds	r1, r3, #1
 800eaea:	61f9      	str	r1, [r7, #28]
 800eaec:	4413      	add	r3, r2
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800eaf2:	7dfb      	ldrb	r3, [r7, #23]
 800eaf4:	2b20      	cmp	r3, #32
 800eaf6:	d100      	bne.n	800eafa <get_fileinfo+0xbe>
 800eaf8:	e040      	b.n	800eb7c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800eafa:	7dfb      	ldrb	r3, [r7, #23]
 800eafc:	2b05      	cmp	r3, #5
 800eafe:	d101      	bne.n	800eb04 <get_fileinfo+0xc8>
 800eb00:	23e5      	movs	r3, #229	; 0xe5
 800eb02:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2b09      	cmp	r3, #9
 800eb08:	d10f      	bne.n	800eb2a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800eb0a:	89bb      	ldrh	r3, [r7, #12]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d105      	bne.n	800eb1c <get_fileinfo+0xe0>
 800eb10:	683a      	ldr	r2, [r7, #0]
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	4413      	add	r3, r2
 800eb16:	3316      	adds	r3, #22
 800eb18:	222e      	movs	r2, #46	; 0x2e
 800eb1a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800eb1c:	69bb      	ldr	r3, [r7, #24]
 800eb1e:	1c5a      	adds	r2, r3, #1
 800eb20:	61ba      	str	r2, [r7, #24]
 800eb22:	683a      	ldr	r2, [r7, #0]
 800eb24:	4413      	add	r3, r2
 800eb26:	222e      	movs	r2, #46	; 0x2e
 800eb28:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	69bb      	ldr	r3, [r7, #24]
 800eb2e:	4413      	add	r3, r2
 800eb30:	3309      	adds	r3, #9
 800eb32:	7dfa      	ldrb	r2, [r7, #23]
 800eb34:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800eb36:	89bb      	ldrh	r3, [r7, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d11c      	bne.n	800eb76 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800eb3c:	7dfb      	ldrb	r3, [r7, #23]
 800eb3e:	2b40      	cmp	r3, #64	; 0x40
 800eb40:	d913      	bls.n	800eb6a <get_fileinfo+0x12e>
 800eb42:	7dfb      	ldrb	r3, [r7, #23]
 800eb44:	2b5a      	cmp	r3, #90	; 0x5a
 800eb46:	d810      	bhi.n	800eb6a <get_fileinfo+0x12e>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6a1b      	ldr	r3, [r3, #32]
 800eb4c:	330c      	adds	r3, #12
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	461a      	mov	r2, r3
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	2b08      	cmp	r3, #8
 800eb56:	d901      	bls.n	800eb5c <get_fileinfo+0x120>
 800eb58:	2310      	movs	r3, #16
 800eb5a:	e000      	b.n	800eb5e <get_fileinfo+0x122>
 800eb5c:	2308      	movs	r3, #8
 800eb5e:	4013      	ands	r3, r2
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800eb64:	7dfb      	ldrb	r3, [r7, #23]
 800eb66:	3320      	adds	r3, #32
 800eb68:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800eb6a:	683a      	ldr	r2, [r7, #0]
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	4413      	add	r3, r2
 800eb70:	3316      	adds	r3, #22
 800eb72:	7dfa      	ldrb	r2, [r7, #23]
 800eb74:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	2b0a      	cmp	r3, #10
 800eb80:	d9af      	bls.n	800eae2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800eb82:	89bb      	ldrh	r3, [r7, #12]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10d      	bne.n	800eba4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800eb88:	683a      	ldr	r2, [r7, #0]
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	3316      	adds	r3, #22
 800eb90:	2200      	movs	r2, #0
 800eb92:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6a1b      	ldr	r3, [r3, #32]
 800eb98:	330c      	adds	r3, #12
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d101      	bne.n	800eba4 <get_fileinfo+0x168>
 800eba0:	2300      	movs	r3, #0
 800eba2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800eba4:	683a      	ldr	r2, [r7, #0]
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	4413      	add	r3, r2
 800ebaa:	3309      	adds	r3, #9
 800ebac:	2200      	movs	r2, #0
 800ebae:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6a1b      	ldr	r3, [r3, #32]
 800ebb4:	7ada      	ldrb	r2, [r3, #11]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6a1b      	ldr	r3, [r3, #32]
 800ebbe:	331c      	adds	r3, #28
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fe fc1f 	bl	800d404 <ld_dword>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6a1b      	ldr	r3, [r3, #32]
 800ebd0:	3316      	adds	r3, #22
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe fc16 	bl	800d404 <ld_dword>
 800ebd8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	80da      	strh	r2, [r3, #6]
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	0c1b      	lsrs	r3, r3, #16
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	809a      	strh	r2, [r3, #4]
 800ebec:	e000      	b.n	800ebf0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ebee:	bf00      	nop
}
 800ebf0:	3720      	adds	r7, #32
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b08a      	sub	sp, #40	; 0x28
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	613b      	str	r3, [r7, #16]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	60fb      	str	r3, [r7, #12]
 800ec10:	2300      	movs	r3, #0
 800ec12:	617b      	str	r3, [r7, #20]
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	61ba      	str	r2, [r7, #24]
 800ec1e:	693a      	ldr	r2, [r7, #16]
 800ec20:	4413      	add	r3, r2
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ec26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec28:	2b1f      	cmp	r3, #31
 800ec2a:	d940      	bls.n	800ecae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ec2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec2e:	2b2f      	cmp	r3, #47	; 0x2f
 800ec30:	d006      	beq.n	800ec40 <create_name+0x48>
 800ec32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec34:	2b5c      	cmp	r3, #92	; 0x5c
 800ec36:	d110      	bne.n	800ec5a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ec38:	e002      	b.n	800ec40 <create_name+0x48>
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	61bb      	str	r3, [r7, #24]
 800ec40:	693a      	ldr	r2, [r7, #16]
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	4413      	add	r3, r2
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	2b2f      	cmp	r3, #47	; 0x2f
 800ec4a:	d0f6      	beq.n	800ec3a <create_name+0x42>
 800ec4c:	693a      	ldr	r2, [r7, #16]
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	4413      	add	r3, r2
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b5c      	cmp	r3, #92	; 0x5c
 800ec56:	d0f0      	beq.n	800ec3a <create_name+0x42>
			break;
 800ec58:	e02a      	b.n	800ecb0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	2bfe      	cmp	r3, #254	; 0xfe
 800ec5e:	d901      	bls.n	800ec64 <create_name+0x6c>
 800ec60:	2306      	movs	r3, #6
 800ec62:	e17d      	b.n	800ef60 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ec64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ec6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec6c:	2101      	movs	r1, #1
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f001 faca 	bl	8010208 <ff_convert>
 800ec74:	4603      	mov	r3, r0
 800ec76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ec78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d101      	bne.n	800ec82 <create_name+0x8a>
 800ec7e:	2306      	movs	r3, #6
 800ec80:	e16e      	b.n	800ef60 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ec82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec84:	2b7f      	cmp	r3, #127	; 0x7f
 800ec86:	d809      	bhi.n	800ec9c <create_name+0xa4>
 800ec88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	488d      	ldr	r0, [pc, #564]	; (800eec4 <create_name+0x2cc>)
 800ec8e:	f7fe fc86 	bl	800d59e <chk_chr>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d001      	beq.n	800ec9c <create_name+0xa4>
 800ec98:	2306      	movs	r3, #6
 800ec9a:	e161      	b.n	800ef60 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	1c5a      	adds	r2, r3, #1
 800eca0:	617a      	str	r2, [r7, #20]
 800eca2:	005b      	lsls	r3, r3, #1
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	4413      	add	r3, r2
 800eca8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ecaa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ecac:	e7b4      	b.n	800ec18 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ecae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ecb0:	693a      	ldr	r2, [r7, #16]
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	441a      	add	r2, r3
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ecba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecbc:	2b1f      	cmp	r3, #31
 800ecbe:	d801      	bhi.n	800ecc4 <create_name+0xcc>
 800ecc0:	2304      	movs	r3, #4
 800ecc2:	e000      	b.n	800ecc6 <create_name+0xce>
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ecca:	e011      	b.n	800ecf0 <create_name+0xf8>
		w = lfn[di - 1];
 800eccc:	697a      	ldr	r2, [r7, #20]
 800ecce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ecd2:	4413      	add	r3, r2
 800ecd4:	005b      	lsls	r3, r3, #1
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	4413      	add	r3, r2
 800ecda:	881b      	ldrh	r3, [r3, #0]
 800ecdc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ecde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ece0:	2b20      	cmp	r3, #32
 800ece2:	d002      	beq.n	800ecea <create_name+0xf2>
 800ece4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ece6:	2b2e      	cmp	r3, #46	; 0x2e
 800ece8:	d106      	bne.n	800ecf8 <create_name+0x100>
		di--;
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1ea      	bne.n	800eccc <create_name+0xd4>
 800ecf6:	e000      	b.n	800ecfa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ecf8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	005b      	lsls	r3, r3, #1
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	4413      	add	r3, r2
 800ed02:	2200      	movs	r2, #0
 800ed04:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d101      	bne.n	800ed10 <create_name+0x118>
 800ed0c:	2306      	movs	r3, #6
 800ed0e:	e127      	b.n	800ef60 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	3324      	adds	r3, #36	; 0x24
 800ed14:	220b      	movs	r2, #11
 800ed16:	2120      	movs	r1, #32
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fe fbfe 	bl	800d51a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ed1e:	2300      	movs	r3, #0
 800ed20:	61bb      	str	r3, [r7, #24]
 800ed22:	e002      	b.n	800ed2a <create_name+0x132>
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	3301      	adds	r3, #1
 800ed28:	61bb      	str	r3, [r7, #24]
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	4413      	add	r3, r2
 800ed32:	881b      	ldrh	r3, [r3, #0]
 800ed34:	2b20      	cmp	r3, #32
 800ed36:	d0f5      	beq.n	800ed24 <create_name+0x12c>
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	68fa      	ldr	r2, [r7, #12]
 800ed3e:	4413      	add	r3, r2
 800ed40:	881b      	ldrh	r3, [r3, #0]
 800ed42:	2b2e      	cmp	r3, #46	; 0x2e
 800ed44:	d0ee      	beq.n	800ed24 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d009      	beq.n	800ed60 <create_name+0x168>
 800ed4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed50:	f043 0303 	orr.w	r3, r3, #3
 800ed54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ed58:	e002      	b.n	800ed60 <create_name+0x168>
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	617b      	str	r3, [r7, #20]
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d009      	beq.n	800ed7a <create_name+0x182>
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ed6c:	4413      	add	r3, r2
 800ed6e:	005b      	lsls	r3, r3, #1
 800ed70:	68fa      	ldr	r2, [r7, #12]
 800ed72:	4413      	add	r3, r2
 800ed74:	881b      	ldrh	r3, [r3, #0]
 800ed76:	2b2e      	cmp	r3, #46	; 0x2e
 800ed78:	d1ef      	bne.n	800ed5a <create_name+0x162>

	i = b = 0; ni = 8;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed80:	2300      	movs	r3, #0
 800ed82:	623b      	str	r3, [r7, #32]
 800ed84:	2308      	movs	r3, #8
 800ed86:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	1c5a      	adds	r2, r3, #1
 800ed8c:	61ba      	str	r2, [r7, #24]
 800ed8e:	005b      	lsls	r3, r3, #1
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	4413      	add	r3, r2
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ed98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f000 8090 	beq.w	800eec0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800eda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda2:	2b20      	cmp	r3, #32
 800eda4:	d006      	beq.n	800edb4 <create_name+0x1bc>
 800eda6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda8:	2b2e      	cmp	r3, #46	; 0x2e
 800edaa:	d10a      	bne.n	800edc2 <create_name+0x1ca>
 800edac:	69ba      	ldr	r2, [r7, #24]
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d006      	beq.n	800edc2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800edb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edb8:	f043 0303 	orr.w	r3, r3, #3
 800edbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edc0:	e07d      	b.n	800eebe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800edc2:	6a3a      	ldr	r2, [r7, #32]
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d203      	bcs.n	800edd2 <create_name+0x1da>
 800edca:	69ba      	ldr	r2, [r7, #24]
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d123      	bne.n	800ee1a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	2b0b      	cmp	r3, #11
 800edd6:	d106      	bne.n	800ede6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800edd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eddc:	f043 0303 	orr.w	r3, r3, #3
 800ede0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ede4:	e075      	b.n	800eed2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ede6:	69ba      	ldr	r2, [r7, #24]
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	429a      	cmp	r2, r3
 800edec:	d005      	beq.n	800edfa <create_name+0x202>
 800edee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edf2:	f043 0303 	orr.w	r3, r3, #3
 800edf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800edfa:	69ba      	ldr	r2, [r7, #24]
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d866      	bhi.n	800eed0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	61bb      	str	r3, [r7, #24]
 800ee06:	2308      	movs	r3, #8
 800ee08:	623b      	str	r3, [r7, #32]
 800ee0a:	230b      	movs	r3, #11
 800ee0c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ee0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee18:	e051      	b.n	800eebe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ee1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee1c:	2b7f      	cmp	r3, #127	; 0x7f
 800ee1e:	d914      	bls.n	800ee4a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ee20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee22:	2100      	movs	r1, #0
 800ee24:	4618      	mov	r0, r3
 800ee26:	f001 f9ef 	bl	8010208 <ff_convert>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ee2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d004      	beq.n	800ee3e <create_name+0x246>
 800ee34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee36:	3b80      	subs	r3, #128	; 0x80
 800ee38:	4a23      	ldr	r2, [pc, #140]	; (800eec8 <create_name+0x2d0>)
 800ee3a:	5cd3      	ldrb	r3, [r2, r3]
 800ee3c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ee3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee42:	f043 0302 	orr.w	r3, r3, #2
 800ee46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ee4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d007      	beq.n	800ee60 <create_name+0x268>
 800ee50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee52:	4619      	mov	r1, r3
 800ee54:	481d      	ldr	r0, [pc, #116]	; (800eecc <create_name+0x2d4>)
 800ee56:	f7fe fba2 	bl	800d59e <chk_chr>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d008      	beq.n	800ee72 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ee60:	235f      	movs	r3, #95	; 0x5f
 800ee62:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ee64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee68:	f043 0303 	orr.w	r3, r3, #3
 800ee6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee70:	e01b      	b.n	800eeaa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ee72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee74:	2b40      	cmp	r3, #64	; 0x40
 800ee76:	d909      	bls.n	800ee8c <create_name+0x294>
 800ee78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee7a:	2b5a      	cmp	r3, #90	; 0x5a
 800ee7c:	d806      	bhi.n	800ee8c <create_name+0x294>
					b |= 2;
 800ee7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee82:	f043 0302 	orr.w	r3, r3, #2
 800ee86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee8a:	e00e      	b.n	800eeaa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ee8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee8e:	2b60      	cmp	r3, #96	; 0x60
 800ee90:	d90b      	bls.n	800eeaa <create_name+0x2b2>
 800ee92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee94:	2b7a      	cmp	r3, #122	; 0x7a
 800ee96:	d808      	bhi.n	800eeaa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ee98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee9c:	f043 0301 	orr.w	r3, r3, #1
 800eea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eea6:	3b20      	subs	r3, #32
 800eea8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	1c5a      	adds	r2, r3, #1
 800eeae:	623a      	str	r2, [r7, #32]
 800eeb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eeb2:	b2d1      	uxtb	r1, r2
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	460a      	mov	r2, r1
 800eeba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800eebe:	e763      	b.n	800ed88 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800eec0:	bf00      	nop
 800eec2:	e006      	b.n	800eed2 <create_name+0x2da>
 800eec4:	0801274c 	.word	0x0801274c
 800eec8:	08012810 	.word	0x08012810
 800eecc:	08012758 	.word	0x08012758
			if (si > di) break;			/* No extension */
 800eed0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eed8:	2be5      	cmp	r3, #229	; 0xe5
 800eeda:	d103      	bne.n	800eee4 <create_name+0x2ec>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2205      	movs	r2, #5
 800eee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	2b08      	cmp	r3, #8
 800eee8:	d104      	bne.n	800eef4 <create_name+0x2fc>
 800eeea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800eef4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eef8:	f003 030c 	and.w	r3, r3, #12
 800eefc:	2b0c      	cmp	r3, #12
 800eefe:	d005      	beq.n	800ef0c <create_name+0x314>
 800ef00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef04:	f003 0303 	and.w	r3, r3, #3
 800ef08:	2b03      	cmp	r3, #3
 800ef0a:	d105      	bne.n	800ef18 <create_name+0x320>
 800ef0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef10:	f043 0302 	orr.w	r3, r3, #2
 800ef14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ef18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef1c:	f003 0302 	and.w	r3, r3, #2
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d117      	bne.n	800ef54 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ef24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef28:	f003 0303 	and.w	r3, r3, #3
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d105      	bne.n	800ef3c <create_name+0x344>
 800ef30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef34:	f043 0310 	orr.w	r3, r3, #16
 800ef38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ef3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef40:	f003 030c 	and.w	r3, r3, #12
 800ef44:	2b04      	cmp	r3, #4
 800ef46:	d105      	bne.n	800ef54 <create_name+0x35c>
 800ef48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef4c:	f043 0308 	orr.w	r3, r3, #8
 800ef50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ef5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ef5e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3728      	adds	r7, #40	; 0x28
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b086      	sub	sp, #24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef7c:	e002      	b.n	800ef84 <follow_path+0x1c>
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	3301      	adds	r3, #1
 800ef82:	603b      	str	r3, [r7, #0]
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	2b2f      	cmp	r3, #47	; 0x2f
 800ef8a:	d0f8      	beq.n	800ef7e <follow_path+0x16>
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	2b5c      	cmp	r3, #92	; 0x5c
 800ef92:	d0f4      	beq.n	800ef7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	2200      	movs	r2, #0
 800ef98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	2b1f      	cmp	r3, #31
 800efa0:	d80a      	bhi.n	800efb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2280      	movs	r2, #128	; 0x80
 800efa6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800efaa:	2100      	movs	r1, #0
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7ff f83f 	bl	800e030 <dir_sdi>
 800efb2:	4603      	mov	r3, r0
 800efb4:	75fb      	strb	r3, [r7, #23]
 800efb6:	e043      	b.n	800f040 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800efb8:	463b      	mov	r3, r7
 800efba:	4619      	mov	r1, r3
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f7ff fe1b 	bl	800ebf8 <create_name>
 800efc2:	4603      	mov	r3, r0
 800efc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800efc6:	7dfb      	ldrb	r3, [r7, #23]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d134      	bne.n	800f036 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7ff fb7c 	bl	800e6ca <dir_find>
 800efd2:	4603      	mov	r3, r0
 800efd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800efdc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800efde:	7dfb      	ldrb	r3, [r7, #23]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00a      	beq.n	800effa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800efe4:	7dfb      	ldrb	r3, [r7, #23]
 800efe6:	2b04      	cmp	r3, #4
 800efe8:	d127      	bne.n	800f03a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800efea:	7afb      	ldrb	r3, [r7, #11]
 800efec:	f003 0304 	and.w	r3, r3, #4
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d122      	bne.n	800f03a <follow_path+0xd2>
 800eff4:	2305      	movs	r3, #5
 800eff6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eff8:	e01f      	b.n	800f03a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800effa:	7afb      	ldrb	r3, [r7, #11]
 800effc:	f003 0304 	and.w	r3, r3, #4
 800f000:	2b00      	cmp	r3, #0
 800f002:	d11c      	bne.n	800f03e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	799b      	ldrb	r3, [r3, #6]
 800f008:	f003 0310 	and.w	r3, r3, #16
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d102      	bne.n	800f016 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f010:	2305      	movs	r3, #5
 800f012:	75fb      	strb	r3, [r7, #23]
 800f014:	e014      	b.n	800f040 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	695b      	ldr	r3, [r3, #20]
 800f020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f024:	4413      	add	r3, r2
 800f026:	4619      	mov	r1, r3
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f7ff f988 	bl	800e33e <ld_clust>
 800f02e:	4602      	mov	r2, r0
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f034:	e7c0      	b.n	800efb8 <follow_path+0x50>
			if (res != FR_OK) break;
 800f036:	bf00      	nop
 800f038:	e002      	b.n	800f040 <follow_path+0xd8>
				break;
 800f03a:	bf00      	nop
 800f03c:	e000      	b.n	800f040 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f03e:	bf00      	nop
			}
		}
	}

	return res;
 800f040:	7dfb      	ldrb	r3, [r7, #23]
}
 800f042:	4618      	mov	r0, r3
 800f044:	3718      	adds	r7, #24
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}

0800f04a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f04a:	b480      	push	{r7}
 800f04c:	b087      	sub	sp, #28
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f056:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d031      	beq.n	800f0c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	617b      	str	r3, [r7, #20]
 800f066:	e002      	b.n	800f06e <get_ldnumber+0x24>
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	3301      	adds	r3, #1
 800f06c:	617b      	str	r3, [r7, #20]
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	2b1f      	cmp	r3, #31
 800f074:	d903      	bls.n	800f07e <get_ldnumber+0x34>
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	2b3a      	cmp	r3, #58	; 0x3a
 800f07c:	d1f4      	bne.n	800f068 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	2b3a      	cmp	r3, #58	; 0x3a
 800f084:	d11c      	bne.n	800f0c0 <get_ldnumber+0x76>
			tp = *path;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	1c5a      	adds	r2, r3, #1
 800f090:	60fa      	str	r2, [r7, #12]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	3b30      	subs	r3, #48	; 0x30
 800f096:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	2b09      	cmp	r3, #9
 800f09c:	d80e      	bhi.n	800f0bc <get_ldnumber+0x72>
 800f09e:	68fa      	ldr	r2, [r7, #12]
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d10a      	bne.n	800f0bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d107      	bne.n	800f0bc <get_ldnumber+0x72>
					vol = (int)i;
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	617b      	str	r3, [r7, #20]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	e002      	b.n	800f0c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f0c4:	693b      	ldr	r3, [r7, #16]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	371c      	adds	r7, #28
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
	...

0800f0d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	70da      	strb	r2, [r3, #3]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f0ec:	6839      	ldr	r1, [r7, #0]
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7fe fc20 	bl	800d934 <move_window>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <check_fs+0x2a>
 800f0fa:	2304      	movs	r3, #4
 800f0fc:	e038      	b.n	800f170 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	3334      	adds	r3, #52	; 0x34
 800f102:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f106:	4618      	mov	r0, r3
 800f108:	f7fe f964 	bl	800d3d4 <ld_word>
 800f10c:	4603      	mov	r3, r0
 800f10e:	461a      	mov	r2, r3
 800f110:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f114:	429a      	cmp	r2, r3
 800f116:	d001      	beq.n	800f11c <check_fs+0x48>
 800f118:	2303      	movs	r3, #3
 800f11a:	e029      	b.n	800f170 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f122:	2be9      	cmp	r3, #233	; 0xe9
 800f124:	d009      	beq.n	800f13a <check_fs+0x66>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f12c:	2beb      	cmp	r3, #235	; 0xeb
 800f12e:	d11e      	bne.n	800f16e <check_fs+0x9a>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f136:	2b90      	cmp	r3, #144	; 0x90
 800f138:	d119      	bne.n	800f16e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	3334      	adds	r3, #52	; 0x34
 800f13e:	3336      	adds	r3, #54	; 0x36
 800f140:	4618      	mov	r0, r3
 800f142:	f7fe f95f 	bl	800d404 <ld_dword>
 800f146:	4603      	mov	r3, r0
 800f148:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f14c:	4a0a      	ldr	r2, [pc, #40]	; (800f178 <check_fs+0xa4>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d101      	bne.n	800f156 <check_fs+0x82>
 800f152:	2300      	movs	r3, #0
 800f154:	e00c      	b.n	800f170 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	3334      	adds	r3, #52	; 0x34
 800f15a:	3352      	adds	r3, #82	; 0x52
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7fe f951 	bl	800d404 <ld_dword>
 800f162:	4603      	mov	r3, r0
 800f164:	4a05      	ldr	r2, [pc, #20]	; (800f17c <check_fs+0xa8>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d101      	bne.n	800f16e <check_fs+0x9a>
 800f16a:	2300      	movs	r3, #0
 800f16c:	e000      	b.n	800f170 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f16e:	2302      	movs	r3, #2
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	00544146 	.word	0x00544146
 800f17c:	33544146 	.word	0x33544146

0800f180 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b096      	sub	sp, #88	; 0x58
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	4613      	mov	r3, r2
 800f18c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	2200      	movs	r2, #0
 800f192:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7ff ff58 	bl	800f04a <get_ldnumber>
 800f19a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	da01      	bge.n	800f1a6 <find_volume+0x26>
 800f1a2:	230b      	movs	r3, #11
 800f1a4:	e230      	b.n	800f608 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f1a6:	4aa1      	ldr	r2, [pc, #644]	; (800f42c <find_volume+0x2ac>)
 800f1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <find_volume+0x3a>
 800f1b6:	230c      	movs	r3, #12
 800f1b8:	e226      	b.n	800f608 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f1c0:	79fb      	ldrb	r3, [r7, #7]
 800f1c2:	f023 0301 	bic.w	r3, r3, #1
 800f1c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d01a      	beq.n	800f206 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d2:	785b      	ldrb	r3, [r3, #1]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fe f85f 	bl	800d298 <disk_status>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f1e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1e4:	f003 0301 	and.w	r3, r3, #1
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d10c      	bne.n	800f206 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f1ec:	79fb      	ldrb	r3, [r7, #7]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d007      	beq.n	800f202 <find_volume+0x82>
 800f1f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1f6:	f003 0304 	and.w	r3, r3, #4
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f1fe:	230a      	movs	r3, #10
 800f200:	e202      	b.n	800f608 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800f202:	2300      	movs	r3, #0
 800f204:	e200      	b.n	800f608 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f208:	2200      	movs	r2, #0
 800f20a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f216:	785b      	ldrb	r3, [r3, #1]
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fe f857 	bl	800d2cc <disk_initialize>
 800f21e:	4603      	mov	r3, r0
 800f220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f224:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f228:	f003 0301 	and.w	r3, r3, #1
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f230:	2303      	movs	r3, #3
 800f232:	e1e9      	b.n	800f608 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f234:	79fb      	ldrb	r3, [r7, #7]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d007      	beq.n	800f24a <find_volume+0xca>
 800f23a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f23e:	f003 0304 	and.w	r3, r3, #4
 800f242:	2b00      	cmp	r3, #0
 800f244:	d001      	beq.n	800f24a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f246:	230a      	movs	r3, #10
 800f248:	e1de      	b.n	800f608 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f24a:	2300      	movs	r3, #0
 800f24c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f24e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f250:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f252:	f7ff ff3f 	bl	800f0d4 <check_fs>
 800f256:	4603      	mov	r3, r0
 800f258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f25c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f260:	2b02      	cmp	r3, #2
 800f262:	d149      	bne.n	800f2f8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f264:	2300      	movs	r3, #0
 800f266:	643b      	str	r3, [r7, #64]	; 0x40
 800f268:	e01e      	b.n	800f2a8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f272:	011b      	lsls	r3, r3, #4
 800f274:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f278:	4413      	add	r3, r2
 800f27a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27e:	3304      	adds	r3, #4
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d006      	beq.n	800f294 <find_volume+0x114>
 800f286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f288:	3308      	adds	r3, #8
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fe f8ba 	bl	800d404 <ld_dword>
 800f290:	4602      	mov	r2, r0
 800f292:	e000      	b.n	800f296 <find_volume+0x116>
 800f294:	2200      	movs	r2, #0
 800f296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	3358      	adds	r3, #88	; 0x58
 800f29c:	443b      	add	r3, r7
 800f29e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	643b      	str	r3, [r7, #64]	; 0x40
 800f2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2aa:	2b03      	cmp	r3, #3
 800f2ac:	d9dd      	bls.n	800f26a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d002      	beq.n	800f2be <find_volume+0x13e>
 800f2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	3358      	adds	r3, #88	; 0x58
 800f2c4:	443b      	add	r3, r7
 800f2c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f2ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f2cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d005      	beq.n	800f2de <find_volume+0x15e>
 800f2d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2d6:	f7ff fefd 	bl	800f0d4 <check_fs>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	e000      	b.n	800f2e0 <find_volume+0x160>
 800f2de:	2303      	movs	r3, #3
 800f2e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f2e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d905      	bls.n	800f2f8 <find_volume+0x178>
 800f2ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	643b      	str	r3, [r7, #64]	; 0x40
 800f2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2f4:	2b03      	cmp	r3, #3
 800f2f6:	d9e2      	bls.n	800f2be <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f2f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2fc:	2b04      	cmp	r3, #4
 800f2fe:	d101      	bne.n	800f304 <find_volume+0x184>
 800f300:	2301      	movs	r3, #1
 800f302:	e181      	b.n	800f608 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f304:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d901      	bls.n	800f310 <find_volume+0x190>
 800f30c:	230d      	movs	r3, #13
 800f30e:	e17b      	b.n	800f608 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f312:	3334      	adds	r3, #52	; 0x34
 800f314:	330b      	adds	r3, #11
 800f316:	4618      	mov	r0, r3
 800f318:	f7fe f85c 	bl	800d3d4 <ld_word>
 800f31c:	4603      	mov	r3, r0
 800f31e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f322:	d001      	beq.n	800f328 <find_volume+0x1a8>
 800f324:	230d      	movs	r3, #13
 800f326:	e16f      	b.n	800f608 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f32a:	3334      	adds	r3, #52	; 0x34
 800f32c:	3316      	adds	r3, #22
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fe f850 	bl	800d3d4 <ld_word>
 800f334:	4603      	mov	r3, r0
 800f336:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d106      	bne.n	800f34c <find_volume+0x1cc>
 800f33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f340:	3334      	adds	r3, #52	; 0x34
 800f342:	3324      	adds	r3, #36	; 0x24
 800f344:	4618      	mov	r0, r3
 800f346:	f7fe f85d 	bl	800d404 <ld_dword>
 800f34a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f350:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f354:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	789b      	ldrb	r3, [r3, #2]
 800f360:	2b01      	cmp	r3, #1
 800f362:	d005      	beq.n	800f370 <find_volume+0x1f0>
 800f364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f366:	789b      	ldrb	r3, [r3, #2]
 800f368:	2b02      	cmp	r3, #2
 800f36a:	d001      	beq.n	800f370 <find_volume+0x1f0>
 800f36c:	230d      	movs	r3, #13
 800f36e:	e14b      	b.n	800f608 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f372:	789b      	ldrb	r3, [r3, #2]
 800f374:	461a      	mov	r2, r3
 800f376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f378:	fb02 f303 	mul.w	r3, r2, r3
 800f37c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f384:	b29a      	uxth	r2, r3
 800f386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f388:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38c:	895b      	ldrh	r3, [r3, #10]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d008      	beq.n	800f3a4 <find_volume+0x224>
 800f392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f394:	895b      	ldrh	r3, [r3, #10]
 800f396:	461a      	mov	r2, r3
 800f398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39a:	895b      	ldrh	r3, [r3, #10]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	4013      	ands	r3, r2
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <find_volume+0x228>
 800f3a4:	230d      	movs	r3, #13
 800f3a6:	e12f      	b.n	800f608 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3aa:	3334      	adds	r3, #52	; 0x34
 800f3ac:	3311      	adds	r3, #17
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fe f810 	bl	800d3d4 <ld_word>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3be:	891b      	ldrh	r3, [r3, #8]
 800f3c0:	f003 030f 	and.w	r3, r3, #15
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <find_volume+0x24e>
 800f3ca:	230d      	movs	r3, #13
 800f3cc:	e11c      	b.n	800f608 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d0:	3334      	adds	r3, #52	; 0x34
 800f3d2:	3313      	adds	r3, #19
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fd fffd 	bl	800d3d4 <ld_word>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d106      	bne.n	800f3f2 <find_volume+0x272>
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e6:	3334      	adds	r3, #52	; 0x34
 800f3e8:	3320      	adds	r3, #32
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fe f80a 	bl	800d404 <ld_dword>
 800f3f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	3334      	adds	r3, #52	; 0x34
 800f3f6:	330e      	adds	r3, #14
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fd ffeb 	bl	800d3d4 <ld_word>
 800f3fe:	4603      	mov	r3, r0
 800f400:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f402:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f404:	2b00      	cmp	r3, #0
 800f406:	d101      	bne.n	800f40c <find_volume+0x28c>
 800f408:	230d      	movs	r3, #13
 800f40a:	e0fd      	b.n	800f608 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f40c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f410:	4413      	add	r3, r2
 800f412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f414:	8912      	ldrh	r2, [r2, #8]
 800f416:	0912      	lsrs	r2, r2, #4
 800f418:	b292      	uxth	r2, r2
 800f41a:	4413      	add	r3, r2
 800f41c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f41e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f422:	429a      	cmp	r2, r3
 800f424:	d204      	bcs.n	800f430 <find_volume+0x2b0>
 800f426:	230d      	movs	r3, #13
 800f428:	e0ee      	b.n	800f608 <find_volume+0x488>
 800f42a:	bf00      	nop
 800f42c:	20013180 	.word	0x20013180
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f438:	8952      	ldrh	r2, [r2, #10]
 800f43a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f43e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	2b00      	cmp	r3, #0
 800f444:	d101      	bne.n	800f44a <find_volume+0x2ca>
 800f446:	230d      	movs	r3, #13
 800f448:	e0de      	b.n	800f608 <find_volume+0x488>
		fmt = FS_FAT32;
 800f44a:	2303      	movs	r3, #3
 800f44c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f456:	4293      	cmp	r3, r2
 800f458:	d802      	bhi.n	800f460 <find_volume+0x2e0>
 800f45a:	2302      	movs	r3, #2
 800f45c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f466:	4293      	cmp	r3, r2
 800f468:	d802      	bhi.n	800f470 <find_volume+0x2f0>
 800f46a:	2301      	movs	r3, #1
 800f46c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f472:	1c9a      	adds	r2, r3, #2
 800f474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f476:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f47c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f47e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f482:	441a      	add	r2, r3
 800f484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f486:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f488:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48c:	441a      	add	r2, r3
 800f48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f490:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f492:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f496:	2b03      	cmp	r3, #3
 800f498:	d11e      	bne.n	800f4d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49c:	3334      	adds	r3, #52	; 0x34
 800f49e:	332a      	adds	r3, #42	; 0x2a
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fd ff97 	bl	800d3d4 <ld_word>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d001      	beq.n	800f4b0 <find_volume+0x330>
 800f4ac:	230d      	movs	r3, #13
 800f4ae:	e0ab      	b.n	800f608 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b2:	891b      	ldrh	r3, [r3, #8]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d001      	beq.n	800f4bc <find_volume+0x33c>
 800f4b8:	230d      	movs	r3, #13
 800f4ba:	e0a5      	b.n	800f608 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4be:	3334      	adds	r3, #52	; 0x34
 800f4c0:	332c      	adds	r3, #44	; 0x2c
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fd ff9e 	bl	800d404 <ld_dword>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d0:	699b      	ldr	r3, [r3, #24]
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	647b      	str	r3, [r7, #68]	; 0x44
 800f4d6:	e01f      	b.n	800f518 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4da:	891b      	ldrh	r3, [r3, #8]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d101      	bne.n	800f4e4 <find_volume+0x364>
 800f4e0:	230d      	movs	r3, #13
 800f4e2:	e091      	b.n	800f608 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4ea:	441a      	add	r2, r3
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f4f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d103      	bne.n	800f500 <find_volume+0x380>
 800f4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fa:	699b      	ldr	r3, [r3, #24]
 800f4fc:	005b      	lsls	r3, r3, #1
 800f4fe:	e00a      	b.n	800f516 <find_volume+0x396>
 800f500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f502:	699a      	ldr	r2, [r3, #24]
 800f504:	4613      	mov	r3, r2
 800f506:	005b      	lsls	r3, r3, #1
 800f508:	4413      	add	r3, r2
 800f50a:	085a      	lsrs	r2, r3, #1
 800f50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	f003 0301 	and.w	r3, r3, #1
 800f514:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f516:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51a:	69da      	ldr	r2, [r3, #28]
 800f51c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f51e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f522:	0a5b      	lsrs	r3, r3, #9
 800f524:	429a      	cmp	r2, r3
 800f526:	d201      	bcs.n	800f52c <find_volume+0x3ac>
 800f528:	230d      	movs	r3, #13
 800f52a:	e06d      	b.n	800f608 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f532:	615a      	str	r2, [r3, #20]
 800f534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f536:	695a      	ldr	r2, [r3, #20]
 800f538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53e:	2280      	movs	r2, #128	; 0x80
 800f540:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f542:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f546:	2b03      	cmp	r3, #3
 800f548:	d149      	bne.n	800f5de <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54c:	3334      	adds	r3, #52	; 0x34
 800f54e:	3330      	adds	r3, #48	; 0x30
 800f550:	4618      	mov	r0, r3
 800f552:	f7fd ff3f 	bl	800d3d4 <ld_word>
 800f556:	4603      	mov	r3, r0
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d140      	bne.n	800f5de <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f55c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f55e:	3301      	adds	r3, #1
 800f560:	4619      	mov	r1, r3
 800f562:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f564:	f7fe f9e6 	bl	800d934 <move_window>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d137      	bne.n	800f5de <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f570:	2200      	movs	r2, #0
 800f572:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f576:	3334      	adds	r3, #52	; 0x34
 800f578:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fd ff29 	bl	800d3d4 <ld_word>
 800f582:	4603      	mov	r3, r0
 800f584:	461a      	mov	r2, r3
 800f586:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d127      	bne.n	800f5de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f590:	3334      	adds	r3, #52	; 0x34
 800f592:	4618      	mov	r0, r3
 800f594:	f7fd ff36 	bl	800d404 <ld_dword>
 800f598:	4603      	mov	r3, r0
 800f59a:	4a1d      	ldr	r2, [pc, #116]	; (800f610 <find_volume+0x490>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d11e      	bne.n	800f5de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a2:	3334      	adds	r3, #52	; 0x34
 800f5a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fd ff2b 	bl	800d404 <ld_dword>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	4a18      	ldr	r2, [pc, #96]	; (800f614 <find_volume+0x494>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d113      	bne.n	800f5de <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b8:	3334      	adds	r3, #52	; 0x34
 800f5ba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fd ff20 	bl	800d404 <ld_dword>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5cc:	3334      	adds	r3, #52	; 0x34
 800f5ce:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fd ff16 	bl	800d404 <ld_dword>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5dc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f5e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f5e6:	4b0c      	ldr	r3, [pc, #48]	; (800f618 <find_volume+0x498>)
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	4b0a      	ldr	r3, [pc, #40]	; (800f618 <find_volume+0x498>)
 800f5f0:	801a      	strh	r2, [r3, #0]
 800f5f2:	4b09      	ldr	r3, [pc, #36]	; (800f618 <find_volume+0x498>)
 800f5f4:	881a      	ldrh	r2, [r3, #0]
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fc:	4a07      	ldr	r2, [pc, #28]	; (800f61c <find_volume+0x49c>)
 800f5fe:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f602:	f7fe f92f 	bl	800d864 <clear_lock>
#endif
	return FR_OK;
 800f606:	2300      	movs	r3, #0
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3758      	adds	r7, #88	; 0x58
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	41615252 	.word	0x41615252
 800f614:	61417272 	.word	0x61417272
 800f618:	20013184 	.word	0x20013184
 800f61c:	200131a8 	.word	0x200131a8

0800f620 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f62a:	2309      	movs	r3, #9
 800f62c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d01c      	beq.n	800f66e <validate+0x4e>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d018      	beq.n	800f66e <validate+0x4e>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d013      	beq.n	800f66e <validate+0x4e>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	889a      	ldrh	r2, [r3, #4]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	88db      	ldrh	r3, [r3, #6]
 800f650:	429a      	cmp	r2, r3
 800f652:	d10c      	bne.n	800f66e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	785b      	ldrb	r3, [r3, #1]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fd fe1c 	bl	800d298 <disk_status>
 800f660:	4603      	mov	r3, r0
 800f662:	f003 0301 	and.w	r3, r3, #1
 800f666:	2b00      	cmp	r3, #0
 800f668:	d101      	bne.n	800f66e <validate+0x4e>
			res = FR_OK;
 800f66a:	2300      	movs	r3, #0
 800f66c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f66e:	7bfb      	ldrb	r3, [r7, #15]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d102      	bne.n	800f67a <validate+0x5a>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	e000      	b.n	800f67c <validate+0x5c>
 800f67a:	2300      	movs	r3, #0
 800f67c:	683a      	ldr	r2, [r7, #0]
 800f67e:	6013      	str	r3, [r2, #0]
	return res;
 800f680:	7bfb      	ldrb	r3, [r7, #15]
}
 800f682:	4618      	mov	r0, r3
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
	...

0800f68c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b088      	sub	sp, #32
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	4613      	mov	r3, r2
 800f698:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f69e:	f107 0310 	add.w	r3, r7, #16
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7ff fcd1 	bl	800f04a <get_ldnumber>
 800f6a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	da01      	bge.n	800f6b4 <f_mount+0x28>
 800f6b0:	230b      	movs	r3, #11
 800f6b2:	e02b      	b.n	800f70c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f6b4:	4a17      	ldr	r2, [pc, #92]	; (800f714 <f_mount+0x88>)
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d005      	beq.n	800f6d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f6c4:	69b8      	ldr	r0, [r7, #24]
 800f6c6:	f7fe f8cd 	bl	800d864 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d002      	beq.n	800f6dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f6dc:	68fa      	ldr	r2, [r7, #12]
 800f6de:	490d      	ldr	r1, [pc, #52]	; (800f714 <f_mount+0x88>)
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d002      	beq.n	800f6f2 <f_mount+0x66>
 800f6ec:	79fb      	ldrb	r3, [r7, #7]
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d001      	beq.n	800f6f6 <f_mount+0x6a>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	e00a      	b.n	800f70c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f6f6:	f107 010c 	add.w	r1, r7, #12
 800f6fa:	f107 0308 	add.w	r3, r7, #8
 800f6fe:	2200      	movs	r2, #0
 800f700:	4618      	mov	r0, r3
 800f702:	f7ff fd3d 	bl	800f180 <find_volume>
 800f706:	4603      	mov	r3, r0
 800f708:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f70a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3720      	adds	r7, #32
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}
 800f714:	20013180 	.word	0x20013180

0800f718 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b09a      	sub	sp, #104	; 0x68
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	4613      	mov	r3, r2
 800f724:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d101      	bne.n	800f730 <f_open+0x18>
 800f72c:	2309      	movs	r3, #9
 800f72e:	e1ad      	b.n	800fa8c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f730:	79fb      	ldrb	r3, [r7, #7]
 800f732:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f736:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f738:	79fa      	ldrb	r2, [r7, #7]
 800f73a:	f107 0114 	add.w	r1, r7, #20
 800f73e:	f107 0308 	add.w	r3, r7, #8
 800f742:	4618      	mov	r0, r3
 800f744:	f7ff fd1c 	bl	800f180 <find_volume>
 800f748:	4603      	mov	r3, r0
 800f74a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f74e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f752:	2b00      	cmp	r3, #0
 800f754:	f040 8191 	bne.w	800fa7a <f_open+0x362>
		dj.obj.fs = fs;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	f107 0318 	add.w	r3, r7, #24
 800f762:	4611      	mov	r1, r2
 800f764:	4618      	mov	r0, r3
 800f766:	f7ff fbff 	bl	800ef68 <follow_path>
 800f76a:	4603      	mov	r3, r0
 800f76c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f770:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f774:	2b00      	cmp	r3, #0
 800f776:	d11a      	bne.n	800f7ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f778:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f77c:	b25b      	sxtb	r3, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	da03      	bge.n	800f78a <f_open+0x72>
				res = FR_INVALID_NAME;
 800f782:	2306      	movs	r3, #6
 800f784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f788:	e011      	b.n	800f7ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f78a:	79fb      	ldrb	r3, [r7, #7]
 800f78c:	f023 0301 	bic.w	r3, r3, #1
 800f790:	2b00      	cmp	r3, #0
 800f792:	bf14      	ite	ne
 800f794:	2301      	movne	r3, #1
 800f796:	2300      	moveq	r3, #0
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	461a      	mov	r2, r3
 800f79c:	f107 0318 	add.w	r3, r7, #24
 800f7a0:	4611      	mov	r1, r2
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fd ff16 	bl	800d5d4 <chk_lock>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f7ae:	79fb      	ldrb	r3, [r7, #7]
 800f7b0:	f003 031c 	and.w	r3, r3, #28
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d07f      	beq.n	800f8b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f7b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d017      	beq.n	800f7f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f7c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7c4:	2b04      	cmp	r3, #4
 800f7c6:	d10e      	bne.n	800f7e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f7c8:	f7fd ff60 	bl	800d68c <enq_lock>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d006      	beq.n	800f7e0 <f_open+0xc8>
 800f7d2:	f107 0318 	add.w	r3, r7, #24
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7ff f838 	bl	800e84c <dir_register>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	e000      	b.n	800f7e2 <f_open+0xca>
 800f7e0:	2312      	movs	r3, #18
 800f7e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f7e6:	79fb      	ldrb	r3, [r7, #7]
 800f7e8:	f043 0308 	orr.w	r3, r3, #8
 800f7ec:	71fb      	strb	r3, [r7, #7]
 800f7ee:	e010      	b.n	800f812 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f7f0:	7fbb      	ldrb	r3, [r7, #30]
 800f7f2:	f003 0311 	and.w	r3, r3, #17
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d003      	beq.n	800f802 <f_open+0xea>
					res = FR_DENIED;
 800f7fa:	2307      	movs	r3, #7
 800f7fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f800:	e007      	b.n	800f812 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f802:	79fb      	ldrb	r3, [r7, #7]
 800f804:	f003 0304 	and.w	r3, r3, #4
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d002      	beq.n	800f812 <f_open+0xfa>
 800f80c:	2308      	movs	r3, #8
 800f80e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f812:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f816:	2b00      	cmp	r3, #0
 800f818:	d168      	bne.n	800f8ec <f_open+0x1d4>
 800f81a:	79fb      	ldrb	r3, [r7, #7]
 800f81c:	f003 0308 	and.w	r3, r3, #8
 800f820:	2b00      	cmp	r3, #0
 800f822:	d063      	beq.n	800f8ec <f_open+0x1d4>
				dw = GET_FATTIME();
 800f824:	f7fb fb84 	bl	800af30 <get_fattime>
 800f828:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	330e      	adds	r3, #14
 800f82e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f830:	4618      	mov	r0, r3
 800f832:	f7fd fe25 	bl	800d480 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f838:	3316      	adds	r3, #22
 800f83a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7fd fe1f 	bl	800d480 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f844:	330b      	adds	r3, #11
 800f846:	2220      	movs	r2, #32
 800f848:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f84e:	4611      	mov	r1, r2
 800f850:	4618      	mov	r0, r3
 800f852:	f7fe fd74 	bl	800e33e <ld_clust>
 800f856:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f85c:	2200      	movs	r2, #0
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fe fd8c 	bl	800e37c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f866:	331c      	adds	r3, #28
 800f868:	2100      	movs	r1, #0
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fd fe08 	bl	800d480 <st_dword>
					fs->wflag = 1;
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	2201      	movs	r2, #1
 800f874:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d037      	beq.n	800f8ec <f_open+0x1d4>
						dw = fs->winsect;
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f880:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f882:	f107 0318 	add.w	r3, r7, #24
 800f886:	2200      	movs	r2, #0
 800f888:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fe fa9f 	bl	800ddce <remove_chain>
 800f890:	4603      	mov	r3, r0
 800f892:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f896:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d126      	bne.n	800f8ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fe f846 	bl	800d934 <move_window>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8b2:	3a01      	subs	r2, #1
 800f8b4:	611a      	str	r2, [r3, #16]
 800f8b6:	e019      	b.n	800f8ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f8b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d115      	bne.n	800f8ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f8c0:	7fbb      	ldrb	r3, [r7, #30]
 800f8c2:	f003 0310 	and.w	r3, r3, #16
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d003      	beq.n	800f8d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f8ca:	2304      	movs	r3, #4
 800f8cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f8d0:	e00c      	b.n	800f8ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f8d2:	79fb      	ldrb	r3, [r7, #7]
 800f8d4:	f003 0302 	and.w	r3, r3, #2
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d007      	beq.n	800f8ec <f_open+0x1d4>
 800f8dc:	7fbb      	ldrb	r3, [r7, #30]
 800f8de:	f003 0301 	and.w	r3, r3, #1
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d002      	beq.n	800f8ec <f_open+0x1d4>
						res = FR_DENIED;
 800f8e6:	2307      	movs	r3, #7
 800f8e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f8ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d128      	bne.n	800f946 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f8f4:	79fb      	ldrb	r3, [r7, #7]
 800f8f6:	f003 0308 	and.w	r3, r3, #8
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d003      	beq.n	800f906 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f8fe:	79fb      	ldrb	r3, [r7, #7]
 800f900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f904:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f90e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f914:	79fb      	ldrb	r3, [r7, #7]
 800f916:	f023 0301 	bic.w	r3, r3, #1
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	bf14      	ite	ne
 800f91e:	2301      	movne	r3, #1
 800f920:	2300      	moveq	r3, #0
 800f922:	b2db      	uxtb	r3, r3
 800f924:	461a      	mov	r2, r3
 800f926:	f107 0318 	add.w	r3, r7, #24
 800f92a:	4611      	mov	r1, r2
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fd fecf 	bl	800d6d0 <inc_lock>
 800f932:	4602      	mov	r2, r0
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	691b      	ldr	r3, [r3, #16]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d102      	bne.n	800f946 <f_open+0x22e>
 800f940:	2302      	movs	r3, #2
 800f942:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f946:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f040 8095 	bne.w	800fa7a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f954:	4611      	mov	r1, r2
 800f956:	4618      	mov	r0, r3
 800f958:	f7fe fcf1 	bl	800e33e <ld_clust>
 800f95c:	4602      	mov	r2, r0
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	331c      	adds	r3, #28
 800f966:	4618      	mov	r0, r3
 800f968:	f7fd fd4c 	bl	800d404 <ld_dword>
 800f96c:	4602      	mov	r2, r0
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2200      	movs	r2, #0
 800f976:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f978:	697a      	ldr	r2, [r7, #20]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	88da      	ldrh	r2, [r3, #6]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	79fa      	ldrb	r2, [r7, #7]
 800f98a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2200      	movs	r2, #0
 800f996:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2200      	movs	r2, #0
 800f99c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	3330      	adds	r3, #48	; 0x30
 800f9a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fd fdb6 	bl	800d51a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f9ae:	79fb      	ldrb	r3, [r7, #7]
 800f9b0:	f003 0320 	and.w	r3, r3, #32
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d060      	beq.n	800fa7a <f_open+0x362>
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d05c      	beq.n	800fa7a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	68da      	ldr	r2, [r3, #12]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	895b      	ldrh	r3, [r3, #10]
 800f9cc:	025b      	lsls	r3, r3, #9
 800f9ce:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9dc:	e016      	b.n	800fa0c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fe f861 	bl	800daaa <get_fat>
 800f9e8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d802      	bhi.n	800f9f6 <f_open+0x2de>
 800f9f0:	2302      	movs	r3, #2
 800f9f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f9f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9fc:	d102      	bne.n	800fa04 <f_open+0x2ec>
 800f9fe:	2301      	movs	r3, #1
 800fa00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa08:	1ad3      	subs	r3, r2, r3
 800fa0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d103      	bne.n	800fa1c <f_open+0x304>
 800fa14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d8e0      	bhi.n	800f9de <f_open+0x2c6>
				}
				fp->clust = clst;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fa22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d127      	bne.n	800fa7a <f_open+0x362>
 800fa2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d022      	beq.n	800fa7a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fe f817 	bl	800da6c <clust2sect>
 800fa3e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fa40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d103      	bne.n	800fa4e <f_open+0x336>
						res = FR_INT_ERR;
 800fa46:	2302      	movs	r3, #2
 800fa48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fa4c:	e015      	b.n	800fa7a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa50:	0a5a      	lsrs	r2, r3, #9
 800fa52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa54:	441a      	add	r2, r3
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	7858      	ldrb	r0, [r3, #1]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	6a1a      	ldr	r2, [r3, #32]
 800fa68:	2301      	movs	r3, #1
 800fa6a:	f7fd fc55 	bl	800d318 <disk_read>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d002      	beq.n	800fa7a <f_open+0x362>
 800fa74:	2301      	movs	r3, #1
 800fa76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fa7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <f_open+0x370>
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2200      	movs	r2, #0
 800fa86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fa88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3768      	adds	r7, #104	; 0x68
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b08c      	sub	sp, #48	; 0x30
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
 800faa0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	2200      	movs	r2, #0
 800faaa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f107 0210 	add.w	r2, r7, #16
 800fab2:	4611      	mov	r1, r2
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7ff fdb3 	bl	800f620 <validate>
 800faba:	4603      	mov	r3, r0
 800fabc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d107      	bne.n	800fad8 <f_write+0x44>
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	7d5b      	ldrb	r3, [r3, #21]
 800facc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d002      	beq.n	800fade <f_write+0x4a>
 800fad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fadc:	e14b      	b.n	800fd76 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	7d1b      	ldrb	r3, [r3, #20]
 800fae2:	f003 0302 	and.w	r3, r3, #2
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d101      	bne.n	800faee <f_write+0x5a>
 800faea:	2307      	movs	r3, #7
 800faec:	e143      	b.n	800fd76 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	699a      	ldr	r2, [r3, #24]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	441a      	add	r2, r3
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	699b      	ldr	r3, [r3, #24]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	f080 812d 	bcs.w	800fd5a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	699b      	ldr	r3, [r3, #24]
 800fb04:	43db      	mvns	r3, r3
 800fb06:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fb08:	e127      	b.n	800fd5a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	699b      	ldr	r3, [r3, #24]
 800fb0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f040 80e3 	bne.w	800fcde <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	699b      	ldr	r3, [r3, #24]
 800fb1c:	0a5b      	lsrs	r3, r3, #9
 800fb1e:	693a      	ldr	r2, [r7, #16]
 800fb20:	8952      	ldrh	r2, [r2, #10]
 800fb22:	3a01      	subs	r2, #1
 800fb24:	4013      	ands	r3, r2
 800fb26:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fb28:	69bb      	ldr	r3, [r7, #24]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d143      	bne.n	800fbb6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	699b      	ldr	r3, [r3, #24]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d10c      	bne.n	800fb50 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	689b      	ldr	r3, [r3, #8]
 800fb3a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d11a      	bne.n	800fb78 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2100      	movs	r1, #0
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fe f9a6 	bl	800de98 <create_chain>
 800fb4c:	62b8      	str	r0, [r7, #40]	; 0x28
 800fb4e:	e013      	b.n	800fb78 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d007      	beq.n	800fb68 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	699b      	ldr	r3, [r3, #24]
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f7fe fa32 	bl	800dfc8 <clmt_clust>
 800fb64:	62b8      	str	r0, [r7, #40]	; 0x28
 800fb66:	e007      	b.n	800fb78 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	69db      	ldr	r3, [r3, #28]
 800fb6e:	4619      	mov	r1, r3
 800fb70:	4610      	mov	r0, r2
 800fb72:	f7fe f991 	bl	800de98 <create_chain>
 800fb76:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f000 80f2 	beq.w	800fd64 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d104      	bne.n	800fb90 <f_write+0xfc>
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2202      	movs	r2, #2
 800fb8a:	755a      	strb	r2, [r3, #21]
 800fb8c:	2302      	movs	r3, #2
 800fb8e:	e0f2      	b.n	800fd76 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb96:	d104      	bne.n	800fba2 <f_write+0x10e>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	755a      	strb	r2, [r3, #21]
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e0e9      	b.n	800fd76 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fba6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d102      	bne.n	800fbb6 <f_write+0x122>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbb4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	7d1b      	ldrb	r3, [r3, #20]
 800fbba:	b25b      	sxtb	r3, r3
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	da18      	bge.n	800fbf2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	7858      	ldrb	r0, [r3, #1]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	6a1a      	ldr	r2, [r3, #32]
 800fbce:	2301      	movs	r3, #1
 800fbd0:	f7fd fbc2 	bl	800d358 <disk_write>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d004      	beq.n	800fbe4 <f_write+0x150>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	755a      	strb	r2, [r3, #21]
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	e0c8      	b.n	800fd76 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	7d1b      	ldrb	r3, [r3, #20]
 800fbe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbec:	b2da      	uxtb	r2, r3
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fbf2:	693a      	ldr	r2, [r7, #16]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	69db      	ldr	r3, [r3, #28]
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	f7fd ff36 	bl	800da6c <clust2sect>
 800fc00:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d104      	bne.n	800fc12 <f_write+0x17e>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2202      	movs	r2, #2
 800fc0c:	755a      	strb	r2, [r3, #21]
 800fc0e:	2302      	movs	r3, #2
 800fc10:	e0b1      	b.n	800fd76 <f_write+0x2e2>
			sect += csect;
 800fc12:	697a      	ldr	r2, [r7, #20]
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	4413      	add	r3, r2
 800fc18:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	0a5b      	lsrs	r3, r3, #9
 800fc1e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d03c      	beq.n	800fca0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fc26:	69ba      	ldr	r2, [r7, #24]
 800fc28:	6a3b      	ldr	r3, [r7, #32]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	8952      	ldrh	r2, [r2, #10]
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d905      	bls.n	800fc40 <f_write+0x1ac>
					cc = fs->csize - csect;
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	895b      	ldrh	r3, [r3, #10]
 800fc38:	461a      	mov	r2, r3
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	1ad3      	subs	r3, r2, r3
 800fc3e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	7858      	ldrb	r0, [r3, #1]
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	697a      	ldr	r2, [r7, #20]
 800fc48:	69f9      	ldr	r1, [r7, #28]
 800fc4a:	f7fd fb85 	bl	800d358 <disk_write>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d004      	beq.n	800fc5e <f_write+0x1ca>
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2201      	movs	r2, #1
 800fc58:	755a      	strb	r2, [r3, #21]
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e08b      	b.n	800fd76 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6a1a      	ldr	r2, [r3, #32]
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	1ad3      	subs	r3, r2, r3
 800fc66:	6a3a      	ldr	r2, [r7, #32]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d915      	bls.n	800fc98 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6a1a      	ldr	r2, [r3, #32]
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	025b      	lsls	r3, r3, #9
 800fc7c:	69fa      	ldr	r2, [r7, #28]
 800fc7e:	4413      	add	r3, r2
 800fc80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc84:	4619      	mov	r1, r3
 800fc86:	f7fd fc27 	bl	800d4d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	7d1b      	ldrb	r3, [r3, #20]
 800fc8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc92:	b2da      	uxtb	r2, r3
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fc98:	6a3b      	ldr	r3, [r7, #32]
 800fc9a:	025b      	lsls	r3, r3, #9
 800fc9c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fc9e:	e03f      	b.n	800fd20 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6a1b      	ldr	r3, [r3, #32]
 800fca4:	697a      	ldr	r2, [r7, #20]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d016      	beq.n	800fcd8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	699a      	ldr	r2, [r3, #24]
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d210      	bcs.n	800fcd8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	7858      	ldrb	r0, [r3, #1]
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	697a      	ldr	r2, [r7, #20]
 800fcc4:	f7fd fb28 	bl	800d318 <disk_read>
 800fcc8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d004      	beq.n	800fcd8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	755a      	strb	r2, [r3, #21]
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	e04e      	b.n	800fd76 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	697a      	ldr	r2, [r7, #20]
 800fcdc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	699b      	ldr	r3, [r3, #24]
 800fce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fce6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fcea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fcec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d901      	bls.n	800fcf8 <f_write+0x264>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	699b      	ldr	r3, [r3, #24]
 800fd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd06:	4413      	add	r3, r2
 800fd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd0a:	69f9      	ldr	r1, [r7, #28]
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fd fbe3 	bl	800d4d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	7d1b      	ldrb	r3, [r3, #20]
 800fd16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fd1a:	b2da      	uxtb	r2, r3
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fd20:	69fa      	ldr	r2, [r7, #28]
 800fd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd24:	4413      	add	r3, r2
 800fd26:	61fb      	str	r3, [r7, #28]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	699a      	ldr	r2, [r3, #24]
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2e:	441a      	add	r2, r3
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	619a      	str	r2, [r3, #24]
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	68da      	ldr	r2, [r3, #12]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	699b      	ldr	r3, [r3, #24]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	bf38      	it	cc
 800fd40:	461a      	movcc	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	60da      	str	r2, [r3, #12]
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	441a      	add	r2, r3
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	601a      	str	r2, [r3, #0]
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f47f aed4 	bne.w	800fb0a <f_write+0x76>
 800fd62:	e000      	b.n	800fd66 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fd64:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	7d1b      	ldrb	r3, [r3, #20]
 800fd6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd6e:	b2da      	uxtb	r2, r3
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fd74:	2300      	movs	r3, #0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3730      	adds	r7, #48	; 0x30
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b086      	sub	sp, #24
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f107 0208 	add.w	r2, r7, #8
 800fd8c:	4611      	mov	r1, r2
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7ff fc46 	bl	800f620 <validate>
 800fd94:	4603      	mov	r3, r0
 800fd96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fd98:	7dfb      	ldrb	r3, [r7, #23]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d168      	bne.n	800fe70 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	7d1b      	ldrb	r3, [r3, #20]
 800fda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d062      	beq.n	800fe70 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	7d1b      	ldrb	r3, [r3, #20]
 800fdae:	b25b      	sxtb	r3, r3
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	da15      	bge.n	800fde0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	7858      	ldrb	r0, [r3, #1]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6a1a      	ldr	r2, [r3, #32]
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	f7fd fac8 	bl	800d358 <disk_write>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d001      	beq.n	800fdd2 <f_sync+0x54>
 800fdce:	2301      	movs	r3, #1
 800fdd0:	e04f      	b.n	800fe72 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	7d1b      	ldrb	r3, [r3, #20]
 800fdd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdda:	b2da      	uxtb	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fde0:	f7fb f8a6 	bl	800af30 <get_fattime>
 800fde4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fde6:	68ba      	ldr	r2, [r7, #8]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdec:	4619      	mov	r1, r3
 800fdee:	4610      	mov	r0, r2
 800fdf0:	f7fd fda0 	bl	800d934 <move_window>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d138      	bne.n	800fe70 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe02:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	330b      	adds	r3, #11
 800fe08:	781a      	ldrb	r2, [r3, #0]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	330b      	adds	r3, #11
 800fe0e:	f042 0220 	orr.w	r2, r2, #32
 800fe12:	b2d2      	uxtb	r2, r2
 800fe14:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6818      	ldr	r0, [r3, #0]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	689b      	ldr	r3, [r3, #8]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	68f9      	ldr	r1, [r7, #12]
 800fe22:	f7fe faab 	bl	800e37c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f103 021c 	add.w	r2, r3, #28
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	68db      	ldr	r3, [r3, #12]
 800fe30:	4619      	mov	r1, r3
 800fe32:	4610      	mov	r0, r2
 800fe34:	f7fd fb24 	bl	800d480 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	3316      	adds	r3, #22
 800fe3c:	6939      	ldr	r1, [r7, #16]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fd fb1e 	bl	800d480 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	3312      	adds	r3, #18
 800fe48:	2100      	movs	r1, #0
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fd fafd 	bl	800d44a <st_word>
					fs->wflag = 1;
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	2201      	movs	r2, #1
 800fe54:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fd fd99 	bl	800d990 <sync_fs>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	7d1b      	ldrb	r3, [r3, #20]
 800fe66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe6a:	b2da      	uxtb	r2, r3
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fe70:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3718      	adds	r7, #24
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fe7a:	b580      	push	{r7, lr}
 800fe7c:	b084      	sub	sp, #16
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f7ff ff7b 	bl	800fd7e <f_sync>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fe8c:	7bfb      	ldrb	r3, [r7, #15]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d118      	bne.n	800fec4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f107 0208 	add.w	r2, r7, #8
 800fe98:	4611      	mov	r1, r2
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7ff fbc0 	bl	800f620 <validate>
 800fea0:	4603      	mov	r3, r0
 800fea2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fea4:	7bfb      	ldrb	r3, [r7, #15]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d10c      	bne.n	800fec4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fd fc9c 	bl	800d7ec <dec_lock>
 800feb4:	4603      	mov	r3, r0
 800feb6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800feb8:	7bfb      	ldrb	r3, [r7, #15]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d102      	bne.n	800fec4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3710      	adds	r7, #16
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}

0800fece <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fece:	b580      	push	{r7, lr}
 800fed0:	b090      	sub	sp, #64	; 0x40
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
 800fed6:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800fed8:	f107 0108 	add.w	r1, r7, #8
 800fedc:	1d3b      	adds	r3, r7, #4
 800fede:	2200      	movs	r2, #0
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7ff f94d 	bl	800f180 <find_volume>
 800fee6:	4603      	mov	r3, r0
 800fee8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800feec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d11f      	bne.n	800ff34 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	f107 0308 	add.w	r3, r7, #8
 800fefa:	4611      	mov	r1, r2
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7ff f833 	bl	800ef68 <follow_path>
 800ff02:	4603      	mov	r3, r0
 800ff04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800ff08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d111      	bne.n	800ff34 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ff10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff14:	b25b      	sxtb	r3, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	da03      	bge.n	800ff22 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ff1a:	2306      	movs	r3, #6
 800ff1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ff20:	e008      	b.n	800ff34 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d005      	beq.n	800ff34 <f_stat+0x66>
 800ff28:	f107 0308 	add.w	r3, r7, #8
 800ff2c:	6839      	ldr	r1, [r7, #0]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fe fd84 	bl	800ea3c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ff34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3740      	adds	r7, #64	; 0x40
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b098      	sub	sp, #96	; 0x60
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ff48:	f107 010c 	add.w	r1, r7, #12
 800ff4c:	1d3b      	adds	r3, r7, #4
 800ff4e:	2202      	movs	r2, #2
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7ff f915 	bl	800f180 <find_volume>
 800ff56:	4603      	mov	r3, r0
 800ff58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800ff60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f040 80ec 	bne.w	8010142 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	f107 0310 	add.w	r3, r7, #16
 800ff70:	4611      	mov	r1, r2
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fe fff8 	bl	800ef68 <follow_path>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ff7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d102      	bne.n	800ff8c <f_mkdir+0x4c>
 800ff86:	2308      	movs	r3, #8
 800ff88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ff8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff90:	2b04      	cmp	r3, #4
 800ff92:	f040 80d6 	bne.w	8010142 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ff96:	f107 0310 	add.w	r3, r7, #16
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fd ff7b 	bl	800de98 <create_chain>
 800ffa2:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	895b      	ldrh	r3, [r3, #10]
 800ffa8:	025b      	lsls	r3, r3, #9
 800ffaa:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800ffac:	2300      	movs	r3, #0
 800ffae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ffb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d102      	bne.n	800ffbe <f_mkdir+0x7e>
 800ffb8:	2307      	movs	r3, #7
 800ffba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800ffbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d102      	bne.n	800ffca <f_mkdir+0x8a>
 800ffc4:	2302      	movs	r3, #2
 800ffc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ffca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffd0:	d102      	bne.n	800ffd8 <f_mkdir+0x98>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ffd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d106      	bne.n	800ffee <f_mkdir+0xae>
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fd fc62 	bl	800d8ac <sync_window>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800ffee:	f7fa ff9f 	bl	800af30 <get_fattime>
 800fff2:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800fff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d16a      	bne.n	80100d2 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010000:	4618      	mov	r0, r3
 8010002:	f7fd fd33 	bl	800da6c <clust2sect>
 8010006:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	3334      	adds	r3, #52	; 0x34
 801000c:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 801000e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010012:	2100      	movs	r1, #0
 8010014:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010016:	f7fd fa80 	bl	800d51a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801001a:	220b      	movs	r2, #11
 801001c:	2120      	movs	r1, #32
 801001e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010020:	f7fd fa7b 	bl	800d51a <mem_set>
					dir[DIR_Name] = '.';
 8010024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010026:	222e      	movs	r2, #46	; 0x2e
 8010028:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801002a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801002c:	330b      	adds	r3, #11
 801002e:	2210      	movs	r2, #16
 8010030:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010034:	3316      	adds	r3, #22
 8010036:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010038:	4618      	mov	r0, r3
 801003a:	f7fd fa21 	bl	800d480 <st_dword>
					st_clust(fs, dir, dcl);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010044:	4618      	mov	r0, r3
 8010046:	f7fe f999 	bl	800e37c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801004a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801004c:	3320      	adds	r3, #32
 801004e:	2220      	movs	r2, #32
 8010050:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010052:	4618      	mov	r0, r3
 8010054:	f7fd fa40 	bl	800d4d8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801005a:	3321      	adds	r3, #33	; 0x21
 801005c:	222e      	movs	r2, #46	; 0x2e
 801005e:	701a      	strb	r2, [r3, #0]
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	2b03      	cmp	r3, #3
 801006a:	d106      	bne.n	801007a <f_mkdir+0x13a>
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010072:	429a      	cmp	r2, r3
 8010074:	d101      	bne.n	801007a <f_mkdir+0x13a>
 8010076:	2300      	movs	r3, #0
 8010078:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 801007a:	68f8      	ldr	r0, [r7, #12]
 801007c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801007e:	3320      	adds	r3, #32
 8010080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010082:	4619      	mov	r1, r3
 8010084:	f7fe f97a 	bl	800e37c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	895b      	ldrh	r3, [r3, #10]
 801008c:	65bb      	str	r3, [r7, #88]	; 0x58
 801008e:	e01b      	b.n	80100c8 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8010090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	657a      	str	r2, [r7, #84]	; 0x54
 8010096:	68fa      	ldr	r2, [r7, #12]
 8010098:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2201      	movs	r2, #1
 801009e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fd fc02 	bl	800d8ac <sync_window>
 80100a8:	4603      	mov	r3, r0
 80100aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 80100ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10c      	bne.n	80100d0 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 80100b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80100ba:	2100      	movs	r1, #0
 80100bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80100be:	f7fd fa2c 	bl	800d51a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80100c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100c4:	3b01      	subs	r3, #1
 80100c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80100c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1e0      	bne.n	8010090 <f_mkdir+0x150>
 80100ce:	e000      	b.n	80100d2 <f_mkdir+0x192>
					if (res != FR_OK) break;
 80100d0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80100d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d107      	bne.n	80100ea <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80100da:	f107 0310 	add.w	r3, r7, #16
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe fbb4 	bl	800e84c <dir_register>
 80100e4:	4603      	mov	r3, r0
 80100e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 80100ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d120      	bne.n	8010134 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80100f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f4:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80100f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100f8:	3316      	adds	r3, #22
 80100fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fd f9bf 	bl	800d480 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010108:	4618      	mov	r0, r3
 801010a:	f7fe f937 	bl	800e37c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801010e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010110:	330b      	adds	r3, #11
 8010112:	2210      	movs	r2, #16
 8010114:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2201      	movs	r2, #1
 801011a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801011c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010120:	2b00      	cmp	r3, #0
 8010122:	d10e      	bne.n	8010142 <f_mkdir+0x202>
					res = sync_fs(fs);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	4618      	mov	r0, r3
 8010128:	f7fd fc32 	bl	800d990 <sync_fs>
 801012c:	4603      	mov	r3, r0
 801012e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010132:	e006      	b.n	8010142 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8010134:	f107 0310 	add.w	r3, r7, #16
 8010138:	2200      	movs	r2, #0
 801013a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801013c:	4618      	mov	r0, r3
 801013e:	f7fd fe46 	bl	800ddce <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010146:	4618      	mov	r0, r3
 8010148:	3760      	adds	r7, #96	; 0x60
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
	...

08010150 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010150:	b480      	push	{r7}
 8010152:	b087      	sub	sp, #28
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	4613      	mov	r3, r2
 801015c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801015e:	2301      	movs	r3, #1
 8010160:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010162:	2300      	movs	r3, #0
 8010164:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010166:	4b1f      	ldr	r3, [pc, #124]	; (80101e4 <FATFS_LinkDriverEx+0x94>)
 8010168:	7a5b      	ldrb	r3, [r3, #9]
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b00      	cmp	r3, #0
 801016e:	d131      	bne.n	80101d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010170:	4b1c      	ldr	r3, [pc, #112]	; (80101e4 <FATFS_LinkDriverEx+0x94>)
 8010172:	7a5b      	ldrb	r3, [r3, #9]
 8010174:	b2db      	uxtb	r3, r3
 8010176:	461a      	mov	r2, r3
 8010178:	4b1a      	ldr	r3, [pc, #104]	; (80101e4 <FATFS_LinkDriverEx+0x94>)
 801017a:	2100      	movs	r1, #0
 801017c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801017e:	4b19      	ldr	r3, [pc, #100]	; (80101e4 <FATFS_LinkDriverEx+0x94>)
 8010180:	7a5b      	ldrb	r3, [r3, #9]
 8010182:	b2db      	uxtb	r3, r3
 8010184:	4a17      	ldr	r2, [pc, #92]	; (80101e4 <FATFS_LinkDriverEx+0x94>)
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	4413      	add	r3, r2
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801018e:	4b15      	ldr	r3, [pc, #84]	; (80101e4 <FATFS_LinkDriverEx+0x94>)
 8010190:	7a5b      	ldrb	r3, [r3, #9]
 8010192:	b2db      	uxtb	r3, r3
 8010194:	461a      	mov	r2, r3
 8010196:	4b13      	ldr	r3, [pc, #76]	; (80101e4 <FATFS_LinkDriverEx+0x94>)
 8010198:	4413      	add	r3, r2
 801019a:	79fa      	ldrb	r2, [r7, #7]
 801019c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801019e:	4b11      	ldr	r3, [pc, #68]	; (80101e4 <FATFS_LinkDriverEx+0x94>)
 80101a0:	7a5b      	ldrb	r3, [r3, #9]
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	1c5a      	adds	r2, r3, #1
 80101a6:	b2d1      	uxtb	r1, r2
 80101a8:	4a0e      	ldr	r2, [pc, #56]	; (80101e4 <FATFS_LinkDriverEx+0x94>)
 80101aa:	7251      	strb	r1, [r2, #9]
 80101ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80101ae:	7dbb      	ldrb	r3, [r7, #22]
 80101b0:	3330      	adds	r3, #48	; 0x30
 80101b2:	b2da      	uxtb	r2, r3
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	3301      	adds	r3, #1
 80101bc:	223a      	movs	r2, #58	; 0x3a
 80101be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	3302      	adds	r3, #2
 80101c4:	222f      	movs	r2, #47	; 0x2f
 80101c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	3303      	adds	r3, #3
 80101cc:	2200      	movs	r2, #0
 80101ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80101d0:	2300      	movs	r3, #0
 80101d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80101d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	371c      	adds	r7, #28
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	200133a8 	.word	0x200133a8

080101e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80101f2:	2200      	movs	r2, #0
 80101f4:	6839      	ldr	r1, [r7, #0]
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f7ff ffaa 	bl	8010150 <FATFS_LinkDriverEx>
 80101fc:	4603      	mov	r3, r0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
	...

08010208 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	4603      	mov	r3, r0
 8010210:	6039      	str	r1, [r7, #0]
 8010212:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010214:	88fb      	ldrh	r3, [r7, #6]
 8010216:	2b7f      	cmp	r3, #127	; 0x7f
 8010218:	d802      	bhi.n	8010220 <ff_convert+0x18>
		c = chr;
 801021a:	88fb      	ldrh	r3, [r7, #6]
 801021c:	81fb      	strh	r3, [r7, #14]
 801021e:	e025      	b.n	801026c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00b      	beq.n	801023e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010226:	88fb      	ldrh	r3, [r7, #6]
 8010228:	2bff      	cmp	r3, #255	; 0xff
 801022a:	d805      	bhi.n	8010238 <ff_convert+0x30>
 801022c:	88fb      	ldrh	r3, [r7, #6]
 801022e:	3b80      	subs	r3, #128	; 0x80
 8010230:	4a12      	ldr	r2, [pc, #72]	; (801027c <ff_convert+0x74>)
 8010232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010236:	e000      	b.n	801023a <ff_convert+0x32>
 8010238:	2300      	movs	r3, #0
 801023a:	81fb      	strh	r3, [r7, #14]
 801023c:	e016      	b.n	801026c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801023e:	2300      	movs	r3, #0
 8010240:	81fb      	strh	r3, [r7, #14]
 8010242:	e009      	b.n	8010258 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010244:	89fb      	ldrh	r3, [r7, #14]
 8010246:	4a0d      	ldr	r2, [pc, #52]	; (801027c <ff_convert+0x74>)
 8010248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801024c:	88fa      	ldrh	r2, [r7, #6]
 801024e:	429a      	cmp	r2, r3
 8010250:	d006      	beq.n	8010260 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010252:	89fb      	ldrh	r3, [r7, #14]
 8010254:	3301      	adds	r3, #1
 8010256:	81fb      	strh	r3, [r7, #14]
 8010258:	89fb      	ldrh	r3, [r7, #14]
 801025a:	2b7f      	cmp	r3, #127	; 0x7f
 801025c:	d9f2      	bls.n	8010244 <ff_convert+0x3c>
 801025e:	e000      	b.n	8010262 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010260:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010262:	89fb      	ldrh	r3, [r7, #14]
 8010264:	3380      	adds	r3, #128	; 0x80
 8010266:	b29b      	uxth	r3, r3
 8010268:	b2db      	uxtb	r3, r3
 801026a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801026c:	89fb      	ldrh	r3, [r7, #14]
}
 801026e:	4618      	mov	r0, r3
 8010270:	3714      	adds	r7, #20
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr
 801027a:	bf00      	nop
 801027c:	080128a0 	.word	0x080128a0

08010280 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010280:	b480      	push	{r7}
 8010282:	b087      	sub	sp, #28
 8010284:	af00      	add	r7, sp, #0
 8010286:	4603      	mov	r3, r0
 8010288:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801028a:	88fb      	ldrh	r3, [r7, #6]
 801028c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010290:	d201      	bcs.n	8010296 <ff_wtoupper+0x16>
 8010292:	4b3e      	ldr	r3, [pc, #248]	; (801038c <ff_wtoupper+0x10c>)
 8010294:	e000      	b.n	8010298 <ff_wtoupper+0x18>
 8010296:	4b3e      	ldr	r3, [pc, #248]	; (8010390 <ff_wtoupper+0x110>)
 8010298:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	1c9a      	adds	r2, r3, #2
 801029e:	617a      	str	r2, [r7, #20]
 80102a0:	881b      	ldrh	r3, [r3, #0]
 80102a2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80102a4:	8a7b      	ldrh	r3, [r7, #18]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d068      	beq.n	801037c <ff_wtoupper+0xfc>
 80102aa:	88fa      	ldrh	r2, [r7, #6]
 80102ac:	8a7b      	ldrh	r3, [r7, #18]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d364      	bcc.n	801037c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	1c9a      	adds	r2, r3, #2
 80102b6:	617a      	str	r2, [r7, #20]
 80102b8:	881b      	ldrh	r3, [r3, #0]
 80102ba:	823b      	strh	r3, [r7, #16]
 80102bc:	8a3b      	ldrh	r3, [r7, #16]
 80102be:	0a1b      	lsrs	r3, r3, #8
 80102c0:	81fb      	strh	r3, [r7, #14]
 80102c2:	8a3b      	ldrh	r3, [r7, #16]
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80102c8:	88fa      	ldrh	r2, [r7, #6]
 80102ca:	8a79      	ldrh	r1, [r7, #18]
 80102cc:	8a3b      	ldrh	r3, [r7, #16]
 80102ce:	440b      	add	r3, r1
 80102d0:	429a      	cmp	r2, r3
 80102d2:	da49      	bge.n	8010368 <ff_wtoupper+0xe8>
			switch (cmd) {
 80102d4:	89fb      	ldrh	r3, [r7, #14]
 80102d6:	2b08      	cmp	r3, #8
 80102d8:	d84f      	bhi.n	801037a <ff_wtoupper+0xfa>
 80102da:	a201      	add	r2, pc, #4	; (adr r2, 80102e0 <ff_wtoupper+0x60>)
 80102dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e0:	08010305 	.word	0x08010305
 80102e4:	08010317 	.word	0x08010317
 80102e8:	0801032d 	.word	0x0801032d
 80102ec:	08010335 	.word	0x08010335
 80102f0:	0801033d 	.word	0x0801033d
 80102f4:	08010345 	.word	0x08010345
 80102f8:	0801034d 	.word	0x0801034d
 80102fc:	08010355 	.word	0x08010355
 8010300:	0801035d 	.word	0x0801035d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010304:	88fa      	ldrh	r2, [r7, #6]
 8010306:	8a7b      	ldrh	r3, [r7, #18]
 8010308:	1ad3      	subs	r3, r2, r3
 801030a:	005b      	lsls	r3, r3, #1
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	4413      	add	r3, r2
 8010310:	881b      	ldrh	r3, [r3, #0]
 8010312:	80fb      	strh	r3, [r7, #6]
 8010314:	e027      	b.n	8010366 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010316:	88fa      	ldrh	r2, [r7, #6]
 8010318:	8a7b      	ldrh	r3, [r7, #18]
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	b29b      	uxth	r3, r3
 801031e:	f003 0301 	and.w	r3, r3, #1
 8010322:	b29b      	uxth	r3, r3
 8010324:	88fa      	ldrh	r2, [r7, #6]
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	80fb      	strh	r3, [r7, #6]
 801032a:	e01c      	b.n	8010366 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801032c:	88fb      	ldrh	r3, [r7, #6]
 801032e:	3b10      	subs	r3, #16
 8010330:	80fb      	strh	r3, [r7, #6]
 8010332:	e018      	b.n	8010366 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010334:	88fb      	ldrh	r3, [r7, #6]
 8010336:	3b20      	subs	r3, #32
 8010338:	80fb      	strh	r3, [r7, #6]
 801033a:	e014      	b.n	8010366 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801033c:	88fb      	ldrh	r3, [r7, #6]
 801033e:	3b30      	subs	r3, #48	; 0x30
 8010340:	80fb      	strh	r3, [r7, #6]
 8010342:	e010      	b.n	8010366 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010344:	88fb      	ldrh	r3, [r7, #6]
 8010346:	3b1a      	subs	r3, #26
 8010348:	80fb      	strh	r3, [r7, #6]
 801034a:	e00c      	b.n	8010366 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801034c:	88fb      	ldrh	r3, [r7, #6]
 801034e:	3308      	adds	r3, #8
 8010350:	80fb      	strh	r3, [r7, #6]
 8010352:	e008      	b.n	8010366 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010354:	88fb      	ldrh	r3, [r7, #6]
 8010356:	3b50      	subs	r3, #80	; 0x50
 8010358:	80fb      	strh	r3, [r7, #6]
 801035a:	e004      	b.n	8010366 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801035c:	88fb      	ldrh	r3, [r7, #6]
 801035e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010362:	80fb      	strh	r3, [r7, #6]
 8010364:	bf00      	nop
			}
			break;
 8010366:	e008      	b.n	801037a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010368:	89fb      	ldrh	r3, [r7, #14]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d195      	bne.n	801029a <ff_wtoupper+0x1a>
 801036e:	8a3b      	ldrh	r3, [r7, #16]
 8010370:	005b      	lsls	r3, r3, #1
 8010372:	697a      	ldr	r2, [r7, #20]
 8010374:	4413      	add	r3, r2
 8010376:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010378:	e78f      	b.n	801029a <ff_wtoupper+0x1a>
			break;
 801037a:	bf00      	nop
	}

	return chr;
 801037c:	88fb      	ldrh	r3, [r7, #6]
}
 801037e:	4618      	mov	r0, r3
 8010380:	371c      	adds	r7, #28
 8010382:	46bd      	mov	sp, r7
 8010384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010388:	4770      	bx	lr
 801038a:	bf00      	nop
 801038c:	080129a0 	.word	0x080129a0
 8010390:	08012b94 	.word	0x08012b94

08010394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010398:	2200      	movs	r2, #0
 801039a:	4912      	ldr	r1, [pc, #72]	; (80103e4 <MX_USB_DEVICE_Init+0x50>)
 801039c:	4812      	ldr	r0, [pc, #72]	; (80103e8 <MX_USB_DEVICE_Init+0x54>)
 801039e:	f7fb fc5f 	bl	800bc60 <USBD_Init>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d001      	beq.n	80103ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80103a8:	f7f1 f82c 	bl	8001404 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80103ac:	490f      	ldr	r1, [pc, #60]	; (80103ec <MX_USB_DEVICE_Init+0x58>)
 80103ae:	480e      	ldr	r0, [pc, #56]	; (80103e8 <MX_USB_DEVICE_Init+0x54>)
 80103b0:	f7fb fc86 	bl	800bcc0 <USBD_RegisterClass>
 80103b4:	4603      	mov	r3, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d001      	beq.n	80103be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80103ba:	f7f1 f823 	bl	8001404 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80103be:	490c      	ldr	r1, [pc, #48]	; (80103f0 <MX_USB_DEVICE_Init+0x5c>)
 80103c0:	4809      	ldr	r0, [pc, #36]	; (80103e8 <MX_USB_DEVICE_Init+0x54>)
 80103c2:	f7fb fb7d 	bl	800bac0 <USBD_CDC_RegisterInterface>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d001      	beq.n	80103d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80103cc:	f7f1 f81a 	bl	8001404 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80103d0:	4805      	ldr	r0, [pc, #20]	; (80103e8 <MX_USB_DEVICE_Init+0x54>)
 80103d2:	f7fb fcab 	bl	800bd2c <USBD_Start>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d001      	beq.n	80103e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80103dc:	f7f1 f812 	bl	8001404 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80103e0:	bf00      	nop
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	200000b0 	.word	0x200000b0
 80103e8:	200133b4 	.word	0x200133b4
 80103ec:	2000001c 	.word	0x2000001c
 80103f0:	2000009c 	.word	0x2000009c

080103f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80103f8:	2200      	movs	r2, #0
 80103fa:	4905      	ldr	r1, [pc, #20]	; (8010410 <CDC_Init_FS+0x1c>)
 80103fc:	4805      	ldr	r0, [pc, #20]	; (8010414 <CDC_Init_FS+0x20>)
 80103fe:	f7fb fb79 	bl	800baf4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010402:	4905      	ldr	r1, [pc, #20]	; (8010418 <CDC_Init_FS+0x24>)
 8010404:	4803      	ldr	r0, [pc, #12]	; (8010414 <CDC_Init_FS+0x20>)
 8010406:	f7fb fb97 	bl	800bb38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801040a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801040c:	4618      	mov	r0, r3
 801040e:	bd80      	pop	{r7, pc}
 8010410:	20013e90 	.word	0x20013e90
 8010414:	200133b4 	.word	0x200133b4
 8010418:	20013690 	.word	0x20013690

0801041c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801041c:	b480      	push	{r7}
 801041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010420:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010422:	4618      	mov	r0, r3
 8010424:	46bd      	mov	sp, r7
 8010426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042a:	4770      	bx	lr

0801042c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	4603      	mov	r3, r0
 8010434:	6039      	str	r1, [r7, #0]
 8010436:	71fb      	strb	r3, [r7, #7]
 8010438:	4613      	mov	r3, r2
 801043a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801043c:	79fb      	ldrb	r3, [r7, #7]
 801043e:	2b23      	cmp	r3, #35	; 0x23
 8010440:	d84a      	bhi.n	80104d8 <CDC_Control_FS+0xac>
 8010442:	a201      	add	r2, pc, #4	; (adr r2, 8010448 <CDC_Control_FS+0x1c>)
 8010444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010448:	080104d9 	.word	0x080104d9
 801044c:	080104d9 	.word	0x080104d9
 8010450:	080104d9 	.word	0x080104d9
 8010454:	080104d9 	.word	0x080104d9
 8010458:	080104d9 	.word	0x080104d9
 801045c:	080104d9 	.word	0x080104d9
 8010460:	080104d9 	.word	0x080104d9
 8010464:	080104d9 	.word	0x080104d9
 8010468:	080104d9 	.word	0x080104d9
 801046c:	080104d9 	.word	0x080104d9
 8010470:	080104d9 	.word	0x080104d9
 8010474:	080104d9 	.word	0x080104d9
 8010478:	080104d9 	.word	0x080104d9
 801047c:	080104d9 	.word	0x080104d9
 8010480:	080104d9 	.word	0x080104d9
 8010484:	080104d9 	.word	0x080104d9
 8010488:	080104d9 	.word	0x080104d9
 801048c:	080104d9 	.word	0x080104d9
 8010490:	080104d9 	.word	0x080104d9
 8010494:	080104d9 	.word	0x080104d9
 8010498:	080104d9 	.word	0x080104d9
 801049c:	080104d9 	.word	0x080104d9
 80104a0:	080104d9 	.word	0x080104d9
 80104a4:	080104d9 	.word	0x080104d9
 80104a8:	080104d9 	.word	0x080104d9
 80104ac:	080104d9 	.word	0x080104d9
 80104b0:	080104d9 	.word	0x080104d9
 80104b4:	080104d9 	.word	0x080104d9
 80104b8:	080104d9 	.word	0x080104d9
 80104bc:	080104d9 	.word	0x080104d9
 80104c0:	080104d9 	.word	0x080104d9
 80104c4:	080104d9 	.word	0x080104d9
 80104c8:	080104d9 	.word	0x080104d9
 80104cc:	080104d9 	.word	0x080104d9
 80104d0:	080104d9 	.word	0x080104d9
 80104d4:	080104d9 	.word	0x080104d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80104d8:	bf00      	nop
  }

  return (USBD_OK);
 80104da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80104dc:	4618      	mov	r0, r3
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80104f2:	6879      	ldr	r1, [r7, #4]
 80104f4:	4805      	ldr	r0, [pc, #20]	; (801050c <CDC_Receive_FS+0x24>)
 80104f6:	f7fb fb1f 	bl	800bb38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80104fa:	4804      	ldr	r0, [pc, #16]	; (801050c <CDC_Receive_FS+0x24>)
 80104fc:	f7fb fb7a 	bl	800bbf4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010500:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010502:	4618      	mov	r0, r3
 8010504:	3708      	adds	r7, #8
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}
 801050a:	bf00      	nop
 801050c:	200133b4 	.word	0x200133b4

08010510 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	460b      	mov	r3, r1
 801051a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010520:	4b0d      	ldr	r3, [pc, #52]	; (8010558 <CDC_Transmit_FS+0x48>)
 8010522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010526:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801052e:	2b00      	cmp	r3, #0
 8010530:	d001      	beq.n	8010536 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010532:	2301      	movs	r3, #1
 8010534:	e00b      	b.n	801054e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010536:	887b      	ldrh	r3, [r7, #2]
 8010538:	461a      	mov	r2, r3
 801053a:	6879      	ldr	r1, [r7, #4]
 801053c:	4806      	ldr	r0, [pc, #24]	; (8010558 <CDC_Transmit_FS+0x48>)
 801053e:	f7fb fad9 	bl	800baf4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010542:	4805      	ldr	r0, [pc, #20]	; (8010558 <CDC_Transmit_FS+0x48>)
 8010544:	f7fb fb16 	bl	800bb74 <USBD_CDC_TransmitPacket>
 8010548:	4603      	mov	r3, r0
 801054a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801054c:	7bfb      	ldrb	r3, [r7, #15]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3710      	adds	r7, #16
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	200133b4 	.word	0x200133b4

0801055c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801055c:	b480      	push	{r7}
 801055e:	b087      	sub	sp, #28
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	4613      	mov	r3, r2
 8010568:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801056a:	2300      	movs	r3, #0
 801056c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801056e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010572:	4618      	mov	r0, r3
 8010574:	371c      	adds	r7, #28
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr
	...

08010580 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	4603      	mov	r3, r0
 8010588:	6039      	str	r1, [r7, #0]
 801058a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	2212      	movs	r2, #18
 8010590:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010592:	4b03      	ldr	r3, [pc, #12]	; (80105a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010594:	4618      	mov	r0, r3
 8010596:	370c      	adds	r7, #12
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr
 80105a0:	200000d0 	.word	0x200000d0

080105a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	4603      	mov	r3, r0
 80105ac:	6039      	str	r1, [r7, #0]
 80105ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	2204      	movs	r2, #4
 80105b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80105b6:	4b03      	ldr	r3, [pc, #12]	; (80105c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	370c      	adds	r7, #12
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr
 80105c4:	200000f0 	.word	0x200000f0

080105c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	4603      	mov	r3, r0
 80105d0:	6039      	str	r1, [r7, #0]
 80105d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80105d4:	79fb      	ldrb	r3, [r7, #7]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d105      	bne.n	80105e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	4907      	ldr	r1, [pc, #28]	; (80105fc <USBD_FS_ProductStrDescriptor+0x34>)
 80105de:	4808      	ldr	r0, [pc, #32]	; (8010600 <USBD_FS_ProductStrDescriptor+0x38>)
 80105e0:	f7fc fd7a 	bl	800d0d8 <USBD_GetString>
 80105e4:	e004      	b.n	80105f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80105e6:	683a      	ldr	r2, [r7, #0]
 80105e8:	4904      	ldr	r1, [pc, #16]	; (80105fc <USBD_FS_ProductStrDescriptor+0x34>)
 80105ea:	4805      	ldr	r0, [pc, #20]	; (8010600 <USBD_FS_ProductStrDescriptor+0x38>)
 80105ec:	f7fc fd74 	bl	800d0d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80105f0:	4b02      	ldr	r3, [pc, #8]	; (80105fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	20014690 	.word	0x20014690
 8010600:	08012794 	.word	0x08012794

08010604 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	4603      	mov	r3, r0
 801060c:	6039      	str	r1, [r7, #0]
 801060e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010610:	683a      	ldr	r2, [r7, #0]
 8010612:	4904      	ldr	r1, [pc, #16]	; (8010624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010614:	4804      	ldr	r0, [pc, #16]	; (8010628 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010616:	f7fc fd5f 	bl	800d0d8 <USBD_GetString>
  return USBD_StrDesc;
 801061a:	4b02      	ldr	r3, [pc, #8]	; (8010624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801061c:	4618      	mov	r0, r3
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	20014690 	.word	0x20014690
 8010628:	080127ac 	.word	0x080127ac

0801062c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	4603      	mov	r3, r0
 8010634:	6039      	str	r1, [r7, #0]
 8010636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	221a      	movs	r2, #26
 801063c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801063e:	f000 f855 	bl	80106ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010642:	4b02      	ldr	r3, [pc, #8]	; (801064c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	200000f4 	.word	0x200000f4

08010650 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	4603      	mov	r3, r0
 8010658:	6039      	str	r1, [r7, #0]
 801065a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801065c:	79fb      	ldrb	r3, [r7, #7]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d105      	bne.n	801066e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	4907      	ldr	r1, [pc, #28]	; (8010684 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010666:	4808      	ldr	r0, [pc, #32]	; (8010688 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010668:	f7fc fd36 	bl	800d0d8 <USBD_GetString>
 801066c:	e004      	b.n	8010678 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	4904      	ldr	r1, [pc, #16]	; (8010684 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010672:	4805      	ldr	r0, [pc, #20]	; (8010688 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010674:	f7fc fd30 	bl	800d0d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010678:	4b02      	ldr	r3, [pc, #8]	; (8010684 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801067a:	4618      	mov	r0, r3
 801067c:	3708      	adds	r7, #8
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	20014690 	.word	0x20014690
 8010688:	080127c0 	.word	0x080127c0

0801068c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	4603      	mov	r3, r0
 8010694:	6039      	str	r1, [r7, #0]
 8010696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010698:	79fb      	ldrb	r3, [r7, #7]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d105      	bne.n	80106aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801069e:	683a      	ldr	r2, [r7, #0]
 80106a0:	4907      	ldr	r1, [pc, #28]	; (80106c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80106a2:	4808      	ldr	r0, [pc, #32]	; (80106c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80106a4:	f7fc fd18 	bl	800d0d8 <USBD_GetString>
 80106a8:	e004      	b.n	80106b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80106aa:	683a      	ldr	r2, [r7, #0]
 80106ac:	4904      	ldr	r1, [pc, #16]	; (80106c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80106ae:	4805      	ldr	r0, [pc, #20]	; (80106c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80106b0:	f7fc fd12 	bl	800d0d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80106b4:	4b02      	ldr	r3, [pc, #8]	; (80106c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3708      	adds	r7, #8
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	20014690 	.word	0x20014690
 80106c4:	080127cc 	.word	0x080127cc

080106c8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	4603      	mov	r3, r0
 80106d0:	6039      	str	r1, [r7, #0]
 80106d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	220c      	movs	r2, #12
 80106d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80106da:	4b03      	ldr	r3, [pc, #12]	; (80106e8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80106dc:	4618      	mov	r0, r3
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	200000e4 	.word	0x200000e4

080106ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80106f2:	4b0f      	ldr	r3, [pc, #60]	; (8010730 <Get_SerialNum+0x44>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80106f8:	4b0e      	ldr	r3, [pc, #56]	; (8010734 <Get_SerialNum+0x48>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80106fe:	4b0e      	ldr	r3, [pc, #56]	; (8010738 <Get_SerialNum+0x4c>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010704:	68fa      	ldr	r2, [r7, #12]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	4413      	add	r3, r2
 801070a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d009      	beq.n	8010726 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010712:	2208      	movs	r2, #8
 8010714:	4909      	ldr	r1, [pc, #36]	; (801073c <Get_SerialNum+0x50>)
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	f000 f814 	bl	8010744 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801071c:	2204      	movs	r2, #4
 801071e:	4908      	ldr	r1, [pc, #32]	; (8010740 <Get_SerialNum+0x54>)
 8010720:	68b8      	ldr	r0, [r7, #8]
 8010722:	f000 f80f 	bl	8010744 <IntToUnicode>
  }
}
 8010726:	bf00      	nop
 8010728:	3710      	adds	r7, #16
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	1ff0f420 	.word	0x1ff0f420
 8010734:	1ff0f424 	.word	0x1ff0f424
 8010738:	1ff0f428 	.word	0x1ff0f428
 801073c:	200000f6 	.word	0x200000f6
 8010740:	20000106 	.word	0x20000106

08010744 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010744:	b480      	push	{r7}
 8010746:	b087      	sub	sp, #28
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	4613      	mov	r3, r2
 8010750:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010752:	2300      	movs	r3, #0
 8010754:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010756:	2300      	movs	r3, #0
 8010758:	75fb      	strb	r3, [r7, #23]
 801075a:	e027      	b.n	80107ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	0f1b      	lsrs	r3, r3, #28
 8010760:	2b09      	cmp	r3, #9
 8010762:	d80b      	bhi.n	801077c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	0f1b      	lsrs	r3, r3, #28
 8010768:	b2da      	uxtb	r2, r3
 801076a:	7dfb      	ldrb	r3, [r7, #23]
 801076c:	005b      	lsls	r3, r3, #1
 801076e:	4619      	mov	r1, r3
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	440b      	add	r3, r1
 8010774:	3230      	adds	r2, #48	; 0x30
 8010776:	b2d2      	uxtb	r2, r2
 8010778:	701a      	strb	r2, [r3, #0]
 801077a:	e00a      	b.n	8010792 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	0f1b      	lsrs	r3, r3, #28
 8010780:	b2da      	uxtb	r2, r3
 8010782:	7dfb      	ldrb	r3, [r7, #23]
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	4619      	mov	r1, r3
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	440b      	add	r3, r1
 801078c:	3237      	adds	r2, #55	; 0x37
 801078e:	b2d2      	uxtb	r2, r2
 8010790:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	011b      	lsls	r3, r3, #4
 8010796:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010798:	7dfb      	ldrb	r3, [r7, #23]
 801079a:	005b      	lsls	r3, r3, #1
 801079c:	3301      	adds	r3, #1
 801079e:	68ba      	ldr	r2, [r7, #8]
 80107a0:	4413      	add	r3, r2
 80107a2:	2200      	movs	r2, #0
 80107a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80107a6:	7dfb      	ldrb	r3, [r7, #23]
 80107a8:	3301      	adds	r3, #1
 80107aa:	75fb      	strb	r3, [r7, #23]
 80107ac:	7dfa      	ldrb	r2, [r7, #23]
 80107ae:	79fb      	ldrb	r3, [r7, #7]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d3d3      	bcc.n	801075c <IntToUnicode+0x18>
  }
}
 80107b4:	bf00      	nop
 80107b6:	bf00      	nop
 80107b8:	371c      	adds	r7, #28
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr
	...

080107c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b0ae      	sub	sp, #184	; 0xb8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80107d0:	2200      	movs	r2, #0
 80107d2:	601a      	str	r2, [r3, #0]
 80107d4:	605a      	str	r2, [r3, #4]
 80107d6:	609a      	str	r2, [r3, #8]
 80107d8:	60da      	str	r2, [r3, #12]
 80107da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80107dc:	f107 0314 	add.w	r3, r7, #20
 80107e0:	2290      	movs	r2, #144	; 0x90
 80107e2:	2100      	movs	r1, #0
 80107e4:	4618      	mov	r0, r3
 80107e6:	f000 fd8a 	bl	80112fe <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80107f2:	d151      	bne.n	8010898 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80107f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80107f8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80107fa:	2300      	movs	r3, #0
 80107fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010800:	f107 0314 	add.w	r3, r7, #20
 8010804:	4618      	mov	r0, r3
 8010806:	f7f5 fc83 	bl	8006110 <HAL_RCCEx_PeriphCLKConfig>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	d001      	beq.n	8010814 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010810:	f7f0 fdf8 	bl	8001404 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010814:	4b22      	ldr	r3, [pc, #136]	; (80108a0 <HAL_PCD_MspInit+0xdc>)
 8010816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010818:	4a21      	ldr	r2, [pc, #132]	; (80108a0 <HAL_PCD_MspInit+0xdc>)
 801081a:	f043 0301 	orr.w	r3, r3, #1
 801081e:	6313      	str	r3, [r2, #48]	; 0x30
 8010820:	4b1f      	ldr	r3, [pc, #124]	; (80108a0 <HAL_PCD_MspInit+0xdc>)
 8010822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010824:	f003 0301 	and.w	r3, r3, #1
 8010828:	613b      	str	r3, [r7, #16]
 801082a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801082c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010834:	2302      	movs	r3, #2
 8010836:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801083a:	2300      	movs	r3, #0
 801083c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010840:	2303      	movs	r3, #3
 8010842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010846:	230a      	movs	r3, #10
 8010848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801084c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010850:	4619      	mov	r1, r3
 8010852:	4814      	ldr	r0, [pc, #80]	; (80108a4 <HAL_PCD_MspInit+0xe0>)
 8010854:	f7f2 fd50 	bl	80032f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010858:	4b11      	ldr	r3, [pc, #68]	; (80108a0 <HAL_PCD_MspInit+0xdc>)
 801085a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801085c:	4a10      	ldr	r2, [pc, #64]	; (80108a0 <HAL_PCD_MspInit+0xdc>)
 801085e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010862:	6353      	str	r3, [r2, #52]	; 0x34
 8010864:	4b0e      	ldr	r3, [pc, #56]	; (80108a0 <HAL_PCD_MspInit+0xdc>)
 8010866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801086c:	60fb      	str	r3, [r7, #12]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	4b0b      	ldr	r3, [pc, #44]	; (80108a0 <HAL_PCD_MspInit+0xdc>)
 8010872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010874:	4a0a      	ldr	r2, [pc, #40]	; (80108a0 <HAL_PCD_MspInit+0xdc>)
 8010876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801087a:	6453      	str	r3, [r2, #68]	; 0x44
 801087c:	4b08      	ldr	r3, [pc, #32]	; (80108a0 <HAL_PCD_MspInit+0xdc>)
 801087e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010884:	60bb      	str	r3, [r7, #8]
 8010886:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010888:	2200      	movs	r2, #0
 801088a:	2100      	movs	r1, #0
 801088c:	2043      	movs	r0, #67	; 0x43
 801088e:	f7f2 f9f0 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010892:	2043      	movs	r0, #67	; 0x43
 8010894:	f7f2 fa09 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010898:	bf00      	nop
 801089a:	37b8      	adds	r7, #184	; 0xb8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	40023800 	.word	0x40023800
 80108a4:	40020000 	.word	0x40020000

080108a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80108bc:	4619      	mov	r1, r3
 80108be:	4610      	mov	r0, r2
 80108c0:	f7fb fa81 	bl	800bdc6 <USBD_LL_SetupStage>
}
 80108c4:	bf00      	nop
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	460b      	mov	r3, r1
 80108d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80108de:	78fa      	ldrb	r2, [r7, #3]
 80108e0:	6879      	ldr	r1, [r7, #4]
 80108e2:	4613      	mov	r3, r2
 80108e4:	00db      	lsls	r3, r3, #3
 80108e6:	4413      	add	r3, r2
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	440b      	add	r3, r1
 80108ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	78fb      	ldrb	r3, [r7, #3]
 80108f4:	4619      	mov	r1, r3
 80108f6:	f7fb fabb 	bl	800be70 <USBD_LL_DataOutStage>
}
 80108fa:	bf00      	nop
 80108fc:	3708      	adds	r7, #8
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010902:	b580      	push	{r7, lr}
 8010904:	b082      	sub	sp, #8
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
 801090a:	460b      	mov	r3, r1
 801090c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010914:	78fa      	ldrb	r2, [r7, #3]
 8010916:	6879      	ldr	r1, [r7, #4]
 8010918:	4613      	mov	r3, r2
 801091a:	00db      	lsls	r3, r3, #3
 801091c:	4413      	add	r3, r2
 801091e:	009b      	lsls	r3, r3, #2
 8010920:	440b      	add	r3, r1
 8010922:	334c      	adds	r3, #76	; 0x4c
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	78fb      	ldrb	r3, [r7, #3]
 8010928:	4619      	mov	r1, r3
 801092a:	f7fb fb54 	bl	800bfd6 <USBD_LL_DataInStage>
}
 801092e:	bf00      	nop
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010936:	b580      	push	{r7, lr}
 8010938:	b082      	sub	sp, #8
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010944:	4618      	mov	r0, r3
 8010946:	f7fb fc88 	bl	800c25a <USBD_LL_SOF>
}
 801094a:	bf00      	nop
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b084      	sub	sp, #16
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801095a:	2301      	movs	r3, #1
 801095c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d102      	bne.n	801096c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010966:	2300      	movs	r3, #0
 8010968:	73fb      	strb	r3, [r7, #15]
 801096a:	e008      	b.n	801097e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	2b02      	cmp	r3, #2
 8010972:	d102      	bne.n	801097a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010974:	2301      	movs	r3, #1
 8010976:	73fb      	strb	r3, [r7, #15]
 8010978:	e001      	b.n	801097e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801097a:	f7f0 fd43 	bl	8001404 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010984:	7bfa      	ldrb	r2, [r7, #15]
 8010986:	4611      	mov	r1, r2
 8010988:	4618      	mov	r0, r3
 801098a:	f7fb fc28 	bl	800c1de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010994:	4618      	mov	r0, r3
 8010996:	f7fb fbd0 	bl	800c13a <USBD_LL_Reset>
}
 801099a:	bf00      	nop
 801099c:	3710      	adds	r7, #16
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
	...

080109a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fb fc23 	bl	800c1fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	6812      	ldr	r2, [r2, #0]
 80109c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80109ca:	f043 0301 	orr.w	r3, r3, #1
 80109ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6a1b      	ldr	r3, [r3, #32]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d005      	beq.n	80109e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109d8:	4b04      	ldr	r3, [pc, #16]	; (80109ec <HAL_PCD_SuspendCallback+0x48>)
 80109da:	691b      	ldr	r3, [r3, #16]
 80109dc:	4a03      	ldr	r2, [pc, #12]	; (80109ec <HAL_PCD_SuspendCallback+0x48>)
 80109de:	f043 0306 	orr.w	r3, r3, #6
 80109e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80109e4:	bf00      	nop
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	e000ed00 	.word	0xe000ed00

080109f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fb fc13 	bl	800c22a <USBD_LL_Resume>
}
 8010a04:	bf00      	nop
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	460b      	mov	r3, r1
 8010a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010a1e:	78fa      	ldrb	r2, [r7, #3]
 8010a20:	4611      	mov	r1, r2
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fb fc6b 	bl	800c2fe <USBD_LL_IsoOUTIncomplete>
}
 8010a28:	bf00      	nop
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	460b      	mov	r3, r1
 8010a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010a42:	78fa      	ldrb	r2, [r7, #3]
 8010a44:	4611      	mov	r1, r2
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7fb fc27 	bl	800c29a <USBD_LL_IsoINIncomplete>
}
 8010a4c:	bf00      	nop
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fb fc7d 	bl	800c362 <USBD_LL_DevConnected>
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fb fc7a 	bl	800c378 <USBD_LL_DevDisconnected>
}
 8010a84:	bf00      	nop
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d13c      	bne.n	8010b16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010a9c:	4a20      	ldr	r2, [pc, #128]	; (8010b20 <USBD_LL_Init+0x94>)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	4a1e      	ldr	r2, [pc, #120]	; (8010b20 <USBD_LL_Init+0x94>)
 8010aa8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010aac:	4b1c      	ldr	r3, [pc, #112]	; (8010b20 <USBD_LL_Init+0x94>)
 8010aae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010ab4:	4b1a      	ldr	r3, [pc, #104]	; (8010b20 <USBD_LL_Init+0x94>)
 8010ab6:	2206      	movs	r2, #6
 8010ab8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010aba:	4b19      	ldr	r3, [pc, #100]	; (8010b20 <USBD_LL_Init+0x94>)
 8010abc:	2202      	movs	r2, #2
 8010abe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010ac0:	4b17      	ldr	r3, [pc, #92]	; (8010b20 <USBD_LL_Init+0x94>)
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010ac6:	4b16      	ldr	r3, [pc, #88]	; (8010b20 <USBD_LL_Init+0x94>)
 8010ac8:	2202      	movs	r2, #2
 8010aca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010acc:	4b14      	ldr	r3, [pc, #80]	; (8010b20 <USBD_LL_Init+0x94>)
 8010ace:	2200      	movs	r2, #0
 8010ad0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010ad2:	4b13      	ldr	r3, [pc, #76]	; (8010b20 <USBD_LL_Init+0x94>)
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010ad8:	4b11      	ldr	r3, [pc, #68]	; (8010b20 <USBD_LL_Init+0x94>)
 8010ada:	2200      	movs	r2, #0
 8010adc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010ade:	4b10      	ldr	r3, [pc, #64]	; (8010b20 <USBD_LL_Init+0x94>)
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010ae4:	4b0e      	ldr	r3, [pc, #56]	; (8010b20 <USBD_LL_Init+0x94>)
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010aea:	480d      	ldr	r0, [pc, #52]	; (8010b20 <USBD_LL_Init+0x94>)
 8010aec:	f7f3 fb83 	bl	80041f6 <HAL_PCD_Init>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d001      	beq.n	8010afa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010af6:	f7f0 fc85 	bl	8001404 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010afa:	2180      	movs	r1, #128	; 0x80
 8010afc:	4808      	ldr	r0, [pc, #32]	; (8010b20 <USBD_LL_Init+0x94>)
 8010afe:	f7f4 fdfe 	bl	80056fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010b02:	2240      	movs	r2, #64	; 0x40
 8010b04:	2100      	movs	r1, #0
 8010b06:	4806      	ldr	r0, [pc, #24]	; (8010b20 <USBD_LL_Init+0x94>)
 8010b08:	f7f4 fdb2 	bl	8005670 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010b0c:	2280      	movs	r2, #128	; 0x80
 8010b0e:	2101      	movs	r1, #1
 8010b10:	4803      	ldr	r0, [pc, #12]	; (8010b20 <USBD_LL_Init+0x94>)
 8010b12:	f7f4 fdad 	bl	8005670 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010b16:	2300      	movs	r3, #0
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	20014890 	.word	0x20014890

08010b24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b30:	2300      	movs	r3, #0
 8010b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7f3 fc7f 	bl	800443e <HAL_PCD_Start>
 8010b40:	4603      	mov	r3, r0
 8010b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b44:	7bfb      	ldrb	r3, [r7, #15]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f000 f97e 	bl	8010e48 <USBD_Get_USB_Status>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b084      	sub	sp, #16
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
 8010b62:	4608      	mov	r0, r1
 8010b64:	4611      	mov	r1, r2
 8010b66:	461a      	mov	r2, r3
 8010b68:	4603      	mov	r3, r0
 8010b6a:	70fb      	strb	r3, [r7, #3]
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	70bb      	strb	r3, [r7, #2]
 8010b70:	4613      	mov	r3, r2
 8010b72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b74:	2300      	movs	r3, #0
 8010b76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010b82:	78bb      	ldrb	r3, [r7, #2]
 8010b84:	883a      	ldrh	r2, [r7, #0]
 8010b86:	78f9      	ldrb	r1, [r7, #3]
 8010b88:	f7f4 f96c 	bl	8004e64 <HAL_PCD_EP_Open>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
 8010b92:	4618      	mov	r0, r3
 8010b94:	f000 f958 	bl	8010e48 <USBD_Get_USB_Status>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b084      	sub	sp, #16
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
 8010bae:	460b      	mov	r3, r1
 8010bb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010bc0:	78fa      	ldrb	r2, [r7, #3]
 8010bc2:	4611      	mov	r1, r2
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7f4 f9b5 	bl	8004f34 <HAL_PCD_EP_Close>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bce:	7bfb      	ldrb	r3, [r7, #15]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f000 f939 	bl	8010e48 <USBD_Get_USB_Status>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3710      	adds	r7, #16
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	460b      	mov	r3, r1
 8010bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010bfe:	78fa      	ldrb	r2, [r7, #3]
 8010c00:	4611      	mov	r1, r2
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7f4 fa8d 	bl	8005122 <HAL_PCD_EP_SetStall>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c0c:	7bfb      	ldrb	r3, [r7, #15]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f000 f91a 	bl	8010e48 <USBD_Get_USB_Status>
 8010c14:	4603      	mov	r3, r0
 8010c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b084      	sub	sp, #16
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	460b      	mov	r3, r1
 8010c2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c32:	2300      	movs	r3, #0
 8010c34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c3c:	78fa      	ldrb	r2, [r7, #3]
 8010c3e:	4611      	mov	r1, r2
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7f4 fad2 	bl	80051ea <HAL_PCD_EP_ClrStall>
 8010c46:	4603      	mov	r3, r0
 8010c48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c4a:	7bfb      	ldrb	r3, [r7, #15]
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f000 f8fb 	bl	8010e48 <USBD_Get_USB_Status>
 8010c52:	4603      	mov	r3, r0
 8010c54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3710      	adds	r7, #16
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}

08010c60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b085      	sub	sp, #20
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	da0b      	bge.n	8010c94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010c7c:	78fb      	ldrb	r3, [r7, #3]
 8010c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c82:	68f9      	ldr	r1, [r7, #12]
 8010c84:	4613      	mov	r3, r2
 8010c86:	00db      	lsls	r3, r3, #3
 8010c88:	4413      	add	r3, r2
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	440b      	add	r3, r1
 8010c8e:	333e      	adds	r3, #62	; 0x3e
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	e00b      	b.n	8010cac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010c94:	78fb      	ldrb	r3, [r7, #3]
 8010c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c9a:	68f9      	ldr	r1, [r7, #12]
 8010c9c:	4613      	mov	r3, r2
 8010c9e:	00db      	lsls	r3, r3, #3
 8010ca0:	4413      	add	r3, r2
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	440b      	add	r3, r1
 8010ca6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010caa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3714      	adds	r7, #20
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr

08010cb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010cd2:	78fa      	ldrb	r2, [r7, #3]
 8010cd4:	4611      	mov	r1, r2
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7f4 f89f 	bl	8004e1a <HAL_PCD_SetAddress>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ce0:	7bfb      	ldrb	r3, [r7, #15]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f000 f8b0 	bl	8010e48 <USBD_Get_USB_Status>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3710      	adds	r7, #16
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}

08010cf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010cf6:	b580      	push	{r7, lr}
 8010cf8:	b086      	sub	sp, #24
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	60f8      	str	r0, [r7, #12]
 8010cfe:	607a      	str	r2, [r7, #4]
 8010d00:	603b      	str	r3, [r7, #0]
 8010d02:	460b      	mov	r3, r1
 8010d04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d06:	2300      	movs	r3, #0
 8010d08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010d14:	7af9      	ldrb	r1, [r7, #11]
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	f7f4 f9b8 	bl	800508e <HAL_PCD_EP_Transmit>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d22:	7dfb      	ldrb	r3, [r7, #23]
 8010d24:	4618      	mov	r0, r3
 8010d26:	f000 f88f 	bl	8010e48 <USBD_Get_USB_Status>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3718      	adds	r7, #24
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b086      	sub	sp, #24
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	607a      	str	r2, [r7, #4]
 8010d42:	603b      	str	r3, [r7, #0]
 8010d44:	460b      	mov	r3, r1
 8010d46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010d56:	7af9      	ldrb	r1, [r7, #11]
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	f7f4 f934 	bl	8004fc8 <HAL_PCD_EP_Receive>
 8010d60:	4603      	mov	r3, r0
 8010d62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
 8010d66:	4618      	mov	r0, r3
 8010d68:	f000 f86e 	bl	8010e48 <USBD_Get_USB_Status>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d70:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3718      	adds	r7, #24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b082      	sub	sp, #8
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
 8010d82:	460b      	mov	r3, r1
 8010d84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d8c:	78fa      	ldrb	r2, [r7, #3]
 8010d8e:	4611      	mov	r1, r2
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7f4 f964 	bl	800505e <HAL_PCD_EP_GetRxCount>
 8010d96:	4603      	mov	r3, r0
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010dac:	78fb      	ldrb	r3, [r7, #3]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d002      	beq.n	8010db8 <HAL_PCDEx_LPM_Callback+0x18>
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d01f      	beq.n	8010df6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010db6:	e03b      	b.n	8010e30 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6a1b      	ldr	r3, [r3, #32]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d007      	beq.n	8010dd0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010dc0:	f000 f83c 	bl	8010e3c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010dc4:	4b1c      	ldr	r3, [pc, #112]	; (8010e38 <HAL_PCDEx_LPM_Callback+0x98>)
 8010dc6:	691b      	ldr	r3, [r3, #16]
 8010dc8:	4a1b      	ldr	r2, [pc, #108]	; (8010e38 <HAL_PCDEx_LPM_Callback+0x98>)
 8010dca:	f023 0306 	bic.w	r3, r3, #6
 8010dce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	6812      	ldr	r2, [r2, #0]
 8010dde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010de2:	f023 0301 	bic.w	r3, r3, #1
 8010de6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fb fa1b 	bl	800c22a <USBD_LL_Resume>
    break;
 8010df4:	e01c      	b.n	8010e30 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	687a      	ldr	r2, [r7, #4]
 8010e02:	6812      	ldr	r2, [r2, #0]
 8010e04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e08:	f043 0301 	orr.w	r3, r3, #1
 8010e0c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7fb f9f2 	bl	800c1fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6a1b      	ldr	r3, [r3, #32]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d005      	beq.n	8010e2e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010e22:	4b05      	ldr	r3, [pc, #20]	; (8010e38 <HAL_PCDEx_LPM_Callback+0x98>)
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	4a04      	ldr	r2, [pc, #16]	; (8010e38 <HAL_PCDEx_LPM_Callback+0x98>)
 8010e28:	f043 0306 	orr.w	r3, r3, #6
 8010e2c:	6113      	str	r3, [r2, #16]
    break;
 8010e2e:	bf00      	nop
}
 8010e30:	bf00      	nop
 8010e32:	3708      	adds	r7, #8
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	e000ed00 	.word	0xe000ed00

08010e3c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010e40:	f7ef fe34 	bl	8000aac <SystemClock_Config>
}
 8010e44:	bf00      	nop
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b085      	sub	sp, #20
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	4603      	mov	r3, r0
 8010e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e52:	2300      	movs	r3, #0
 8010e54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e56:	79fb      	ldrb	r3, [r7, #7]
 8010e58:	2b03      	cmp	r3, #3
 8010e5a:	d817      	bhi.n	8010e8c <USBD_Get_USB_Status+0x44>
 8010e5c:	a201      	add	r2, pc, #4	; (adr r2, 8010e64 <USBD_Get_USB_Status+0x1c>)
 8010e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e62:	bf00      	nop
 8010e64:	08010e75 	.word	0x08010e75
 8010e68:	08010e7b 	.word	0x08010e7b
 8010e6c:	08010e81 	.word	0x08010e81
 8010e70:	08010e87 	.word	0x08010e87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010e74:	2300      	movs	r3, #0
 8010e76:	73fb      	strb	r3, [r7, #15]
    break;
 8010e78:	e00b      	b.n	8010e92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e7a:	2303      	movs	r3, #3
 8010e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8010e7e:	e008      	b.n	8010e92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e80:	2301      	movs	r3, #1
 8010e82:	73fb      	strb	r3, [r7, #15]
    break;
 8010e84:	e005      	b.n	8010e92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e86:	2303      	movs	r3, #3
 8010e88:	73fb      	strb	r3, [r7, #15]
    break;
 8010e8a:	e002      	b.n	8010e92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e8c:	2303      	movs	r3, #3
 8010e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e90:	bf00      	nop
  }
  return usb_status;
 8010e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3714      	adds	r7, #20
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <malloc>:
 8010ea0:	4b02      	ldr	r3, [pc, #8]	; (8010eac <malloc+0xc>)
 8010ea2:	4601      	mov	r1, r0
 8010ea4:	6818      	ldr	r0, [r3, #0]
 8010ea6:	f000 b82b 	b.w	8010f00 <_malloc_r>
 8010eaa:	bf00      	nop
 8010eac:	20000168 	.word	0x20000168

08010eb0 <free>:
 8010eb0:	4b02      	ldr	r3, [pc, #8]	; (8010ebc <free+0xc>)
 8010eb2:	4601      	mov	r1, r0
 8010eb4:	6818      	ldr	r0, [r3, #0]
 8010eb6:	f000 ba69 	b.w	801138c <_free_r>
 8010eba:	bf00      	nop
 8010ebc:	20000168 	.word	0x20000168

08010ec0 <sbrk_aligned>:
 8010ec0:	b570      	push	{r4, r5, r6, lr}
 8010ec2:	4e0e      	ldr	r6, [pc, #56]	; (8010efc <sbrk_aligned+0x3c>)
 8010ec4:	460c      	mov	r4, r1
 8010ec6:	6831      	ldr	r1, [r6, #0]
 8010ec8:	4605      	mov	r5, r0
 8010eca:	b911      	cbnz	r1, 8010ed2 <sbrk_aligned+0x12>
 8010ecc:	f000 fa20 	bl	8011310 <_sbrk_r>
 8010ed0:	6030      	str	r0, [r6, #0]
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	f000 fa1b 	bl	8011310 <_sbrk_r>
 8010eda:	1c43      	adds	r3, r0, #1
 8010edc:	d00a      	beq.n	8010ef4 <sbrk_aligned+0x34>
 8010ede:	1cc4      	adds	r4, r0, #3
 8010ee0:	f024 0403 	bic.w	r4, r4, #3
 8010ee4:	42a0      	cmp	r0, r4
 8010ee6:	d007      	beq.n	8010ef8 <sbrk_aligned+0x38>
 8010ee8:	1a21      	subs	r1, r4, r0
 8010eea:	4628      	mov	r0, r5
 8010eec:	f000 fa10 	bl	8011310 <_sbrk_r>
 8010ef0:	3001      	adds	r0, #1
 8010ef2:	d101      	bne.n	8010ef8 <sbrk_aligned+0x38>
 8010ef4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010ef8:	4620      	mov	r0, r4
 8010efa:	bd70      	pop	{r4, r5, r6, pc}
 8010efc:	20014d9c 	.word	0x20014d9c

08010f00 <_malloc_r>:
 8010f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f04:	1ccd      	adds	r5, r1, #3
 8010f06:	f025 0503 	bic.w	r5, r5, #3
 8010f0a:	3508      	adds	r5, #8
 8010f0c:	2d0c      	cmp	r5, #12
 8010f0e:	bf38      	it	cc
 8010f10:	250c      	movcc	r5, #12
 8010f12:	2d00      	cmp	r5, #0
 8010f14:	4607      	mov	r7, r0
 8010f16:	db01      	blt.n	8010f1c <_malloc_r+0x1c>
 8010f18:	42a9      	cmp	r1, r5
 8010f1a:	d905      	bls.n	8010f28 <_malloc_r+0x28>
 8010f1c:	230c      	movs	r3, #12
 8010f1e:	603b      	str	r3, [r7, #0]
 8010f20:	2600      	movs	r6, #0
 8010f22:	4630      	mov	r0, r6
 8010f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010ffc <_malloc_r+0xfc>
 8010f2c:	f000 f89c 	bl	8011068 <__malloc_lock>
 8010f30:	f8d8 3000 	ldr.w	r3, [r8]
 8010f34:	461c      	mov	r4, r3
 8010f36:	bb5c      	cbnz	r4, 8010f90 <_malloc_r+0x90>
 8010f38:	4629      	mov	r1, r5
 8010f3a:	4638      	mov	r0, r7
 8010f3c:	f7ff ffc0 	bl	8010ec0 <sbrk_aligned>
 8010f40:	1c43      	adds	r3, r0, #1
 8010f42:	4604      	mov	r4, r0
 8010f44:	d155      	bne.n	8010ff2 <_malloc_r+0xf2>
 8010f46:	f8d8 4000 	ldr.w	r4, [r8]
 8010f4a:	4626      	mov	r6, r4
 8010f4c:	2e00      	cmp	r6, #0
 8010f4e:	d145      	bne.n	8010fdc <_malloc_r+0xdc>
 8010f50:	2c00      	cmp	r4, #0
 8010f52:	d048      	beq.n	8010fe6 <_malloc_r+0xe6>
 8010f54:	6823      	ldr	r3, [r4, #0]
 8010f56:	4631      	mov	r1, r6
 8010f58:	4638      	mov	r0, r7
 8010f5a:	eb04 0903 	add.w	r9, r4, r3
 8010f5e:	f000 f9d7 	bl	8011310 <_sbrk_r>
 8010f62:	4581      	cmp	r9, r0
 8010f64:	d13f      	bne.n	8010fe6 <_malloc_r+0xe6>
 8010f66:	6821      	ldr	r1, [r4, #0]
 8010f68:	1a6d      	subs	r5, r5, r1
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	4638      	mov	r0, r7
 8010f6e:	f7ff ffa7 	bl	8010ec0 <sbrk_aligned>
 8010f72:	3001      	adds	r0, #1
 8010f74:	d037      	beq.n	8010fe6 <_malloc_r+0xe6>
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	442b      	add	r3, r5
 8010f7a:	6023      	str	r3, [r4, #0]
 8010f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d038      	beq.n	8010ff6 <_malloc_r+0xf6>
 8010f84:	685a      	ldr	r2, [r3, #4]
 8010f86:	42a2      	cmp	r2, r4
 8010f88:	d12b      	bne.n	8010fe2 <_malloc_r+0xe2>
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	605a      	str	r2, [r3, #4]
 8010f8e:	e00f      	b.n	8010fb0 <_malloc_r+0xb0>
 8010f90:	6822      	ldr	r2, [r4, #0]
 8010f92:	1b52      	subs	r2, r2, r5
 8010f94:	d41f      	bmi.n	8010fd6 <_malloc_r+0xd6>
 8010f96:	2a0b      	cmp	r2, #11
 8010f98:	d917      	bls.n	8010fca <_malloc_r+0xca>
 8010f9a:	1961      	adds	r1, r4, r5
 8010f9c:	42a3      	cmp	r3, r4
 8010f9e:	6025      	str	r5, [r4, #0]
 8010fa0:	bf18      	it	ne
 8010fa2:	6059      	strne	r1, [r3, #4]
 8010fa4:	6863      	ldr	r3, [r4, #4]
 8010fa6:	bf08      	it	eq
 8010fa8:	f8c8 1000 	streq.w	r1, [r8]
 8010fac:	5162      	str	r2, [r4, r5]
 8010fae:	604b      	str	r3, [r1, #4]
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	f104 060b 	add.w	r6, r4, #11
 8010fb6:	f000 f85d 	bl	8011074 <__malloc_unlock>
 8010fba:	f026 0607 	bic.w	r6, r6, #7
 8010fbe:	1d23      	adds	r3, r4, #4
 8010fc0:	1af2      	subs	r2, r6, r3
 8010fc2:	d0ae      	beq.n	8010f22 <_malloc_r+0x22>
 8010fc4:	1b9b      	subs	r3, r3, r6
 8010fc6:	50a3      	str	r3, [r4, r2]
 8010fc8:	e7ab      	b.n	8010f22 <_malloc_r+0x22>
 8010fca:	42a3      	cmp	r3, r4
 8010fcc:	6862      	ldr	r2, [r4, #4]
 8010fce:	d1dd      	bne.n	8010f8c <_malloc_r+0x8c>
 8010fd0:	f8c8 2000 	str.w	r2, [r8]
 8010fd4:	e7ec      	b.n	8010fb0 <_malloc_r+0xb0>
 8010fd6:	4623      	mov	r3, r4
 8010fd8:	6864      	ldr	r4, [r4, #4]
 8010fda:	e7ac      	b.n	8010f36 <_malloc_r+0x36>
 8010fdc:	4634      	mov	r4, r6
 8010fde:	6876      	ldr	r6, [r6, #4]
 8010fe0:	e7b4      	b.n	8010f4c <_malloc_r+0x4c>
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	e7cc      	b.n	8010f80 <_malloc_r+0x80>
 8010fe6:	230c      	movs	r3, #12
 8010fe8:	603b      	str	r3, [r7, #0]
 8010fea:	4638      	mov	r0, r7
 8010fec:	f000 f842 	bl	8011074 <__malloc_unlock>
 8010ff0:	e797      	b.n	8010f22 <_malloc_r+0x22>
 8010ff2:	6025      	str	r5, [r4, #0]
 8010ff4:	e7dc      	b.n	8010fb0 <_malloc_r+0xb0>
 8010ff6:	605b      	str	r3, [r3, #4]
 8010ff8:	deff      	udf	#255	; 0xff
 8010ffa:	bf00      	nop
 8010ffc:	20014d98 	.word	0x20014d98

08011000 <sniprintf>:
 8011000:	b40c      	push	{r2, r3}
 8011002:	b530      	push	{r4, r5, lr}
 8011004:	4b17      	ldr	r3, [pc, #92]	; (8011064 <sniprintf+0x64>)
 8011006:	1e0c      	subs	r4, r1, #0
 8011008:	681d      	ldr	r5, [r3, #0]
 801100a:	b09d      	sub	sp, #116	; 0x74
 801100c:	da08      	bge.n	8011020 <sniprintf+0x20>
 801100e:	238b      	movs	r3, #139	; 0x8b
 8011010:	602b      	str	r3, [r5, #0]
 8011012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011016:	b01d      	add	sp, #116	; 0x74
 8011018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801101c:	b002      	add	sp, #8
 801101e:	4770      	bx	lr
 8011020:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011024:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011028:	bf14      	ite	ne
 801102a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801102e:	4623      	moveq	r3, r4
 8011030:	9304      	str	r3, [sp, #16]
 8011032:	9307      	str	r3, [sp, #28]
 8011034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011038:	9002      	str	r0, [sp, #8]
 801103a:	9006      	str	r0, [sp, #24]
 801103c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011040:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011042:	ab21      	add	r3, sp, #132	; 0x84
 8011044:	a902      	add	r1, sp, #8
 8011046:	4628      	mov	r0, r5
 8011048:	9301      	str	r3, [sp, #4]
 801104a:	f000 fa45 	bl	80114d8 <_svfiprintf_r>
 801104e:	1c43      	adds	r3, r0, #1
 8011050:	bfbc      	itt	lt
 8011052:	238b      	movlt	r3, #139	; 0x8b
 8011054:	602b      	strlt	r3, [r5, #0]
 8011056:	2c00      	cmp	r4, #0
 8011058:	d0dd      	beq.n	8011016 <sniprintf+0x16>
 801105a:	9b02      	ldr	r3, [sp, #8]
 801105c:	2200      	movs	r2, #0
 801105e:	701a      	strb	r2, [r3, #0]
 8011060:	e7d9      	b.n	8011016 <sniprintf+0x16>
 8011062:	bf00      	nop
 8011064:	20000168 	.word	0x20000168

08011068 <__malloc_lock>:
 8011068:	4801      	ldr	r0, [pc, #4]	; (8011070 <__malloc_lock+0x8>)
 801106a:	f000 b98c 	b.w	8011386 <__retarget_lock_acquire_recursive>
 801106e:	bf00      	nop
 8011070:	20014edc 	.word	0x20014edc

08011074 <__malloc_unlock>:
 8011074:	4801      	ldr	r0, [pc, #4]	; (801107c <__malloc_unlock+0x8>)
 8011076:	f000 b987 	b.w	8011388 <__retarget_lock_release_recursive>
 801107a:	bf00      	nop
 801107c:	20014edc 	.word	0x20014edc

08011080 <std>:
 8011080:	2300      	movs	r3, #0
 8011082:	b510      	push	{r4, lr}
 8011084:	4604      	mov	r4, r0
 8011086:	e9c0 3300 	strd	r3, r3, [r0]
 801108a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801108e:	6083      	str	r3, [r0, #8]
 8011090:	8181      	strh	r1, [r0, #12]
 8011092:	6643      	str	r3, [r0, #100]	; 0x64
 8011094:	81c2      	strh	r2, [r0, #14]
 8011096:	6183      	str	r3, [r0, #24]
 8011098:	4619      	mov	r1, r3
 801109a:	2208      	movs	r2, #8
 801109c:	305c      	adds	r0, #92	; 0x5c
 801109e:	f000 f92e 	bl	80112fe <memset>
 80110a2:	4b0d      	ldr	r3, [pc, #52]	; (80110d8 <std+0x58>)
 80110a4:	6263      	str	r3, [r4, #36]	; 0x24
 80110a6:	4b0d      	ldr	r3, [pc, #52]	; (80110dc <std+0x5c>)
 80110a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80110aa:	4b0d      	ldr	r3, [pc, #52]	; (80110e0 <std+0x60>)
 80110ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80110ae:	4b0d      	ldr	r3, [pc, #52]	; (80110e4 <std+0x64>)
 80110b0:	6323      	str	r3, [r4, #48]	; 0x30
 80110b2:	4b0d      	ldr	r3, [pc, #52]	; (80110e8 <std+0x68>)
 80110b4:	6224      	str	r4, [r4, #32]
 80110b6:	429c      	cmp	r4, r3
 80110b8:	d006      	beq.n	80110c8 <std+0x48>
 80110ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80110be:	4294      	cmp	r4, r2
 80110c0:	d002      	beq.n	80110c8 <std+0x48>
 80110c2:	33d0      	adds	r3, #208	; 0xd0
 80110c4:	429c      	cmp	r4, r3
 80110c6:	d105      	bne.n	80110d4 <std+0x54>
 80110c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80110cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110d0:	f000 b958 	b.w	8011384 <__retarget_lock_init_recursive>
 80110d4:	bd10      	pop	{r4, pc}
 80110d6:	bf00      	nop
 80110d8:	08011dd9 	.word	0x08011dd9
 80110dc:	08011dfb 	.word	0x08011dfb
 80110e0:	08011e33 	.word	0x08011e33
 80110e4:	08011e57 	.word	0x08011e57
 80110e8:	20014da0 	.word	0x20014da0

080110ec <stdio_exit_handler>:
 80110ec:	4a02      	ldr	r2, [pc, #8]	; (80110f8 <stdio_exit_handler+0xc>)
 80110ee:	4903      	ldr	r1, [pc, #12]	; (80110fc <stdio_exit_handler+0x10>)
 80110f0:	4803      	ldr	r0, [pc, #12]	; (8011100 <stdio_exit_handler+0x14>)
 80110f2:	f000 b869 	b.w	80111c8 <_fwalk_sglue>
 80110f6:	bf00      	nop
 80110f8:	20000110 	.word	0x20000110
 80110fc:	08011d89 	.word	0x08011d89
 8011100:	2000011c 	.word	0x2000011c

08011104 <cleanup_stdio>:
 8011104:	6841      	ldr	r1, [r0, #4]
 8011106:	4b0c      	ldr	r3, [pc, #48]	; (8011138 <cleanup_stdio+0x34>)
 8011108:	4299      	cmp	r1, r3
 801110a:	b510      	push	{r4, lr}
 801110c:	4604      	mov	r4, r0
 801110e:	d001      	beq.n	8011114 <cleanup_stdio+0x10>
 8011110:	f000 fe3a 	bl	8011d88 <_fflush_r>
 8011114:	68a1      	ldr	r1, [r4, #8]
 8011116:	4b09      	ldr	r3, [pc, #36]	; (801113c <cleanup_stdio+0x38>)
 8011118:	4299      	cmp	r1, r3
 801111a:	d002      	beq.n	8011122 <cleanup_stdio+0x1e>
 801111c:	4620      	mov	r0, r4
 801111e:	f000 fe33 	bl	8011d88 <_fflush_r>
 8011122:	68e1      	ldr	r1, [r4, #12]
 8011124:	4b06      	ldr	r3, [pc, #24]	; (8011140 <cleanup_stdio+0x3c>)
 8011126:	4299      	cmp	r1, r3
 8011128:	d004      	beq.n	8011134 <cleanup_stdio+0x30>
 801112a:	4620      	mov	r0, r4
 801112c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011130:	f000 be2a 	b.w	8011d88 <_fflush_r>
 8011134:	bd10      	pop	{r4, pc}
 8011136:	bf00      	nop
 8011138:	20014da0 	.word	0x20014da0
 801113c:	20014e08 	.word	0x20014e08
 8011140:	20014e70 	.word	0x20014e70

08011144 <global_stdio_init.part.0>:
 8011144:	b510      	push	{r4, lr}
 8011146:	4b0b      	ldr	r3, [pc, #44]	; (8011174 <global_stdio_init.part.0+0x30>)
 8011148:	4c0b      	ldr	r4, [pc, #44]	; (8011178 <global_stdio_init.part.0+0x34>)
 801114a:	4a0c      	ldr	r2, [pc, #48]	; (801117c <global_stdio_init.part.0+0x38>)
 801114c:	601a      	str	r2, [r3, #0]
 801114e:	4620      	mov	r0, r4
 8011150:	2200      	movs	r2, #0
 8011152:	2104      	movs	r1, #4
 8011154:	f7ff ff94 	bl	8011080 <std>
 8011158:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801115c:	2201      	movs	r2, #1
 801115e:	2109      	movs	r1, #9
 8011160:	f7ff ff8e 	bl	8011080 <std>
 8011164:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011168:	2202      	movs	r2, #2
 801116a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801116e:	2112      	movs	r1, #18
 8011170:	f7ff bf86 	b.w	8011080 <std>
 8011174:	20014ed8 	.word	0x20014ed8
 8011178:	20014da0 	.word	0x20014da0
 801117c:	080110ed 	.word	0x080110ed

08011180 <__sfp_lock_acquire>:
 8011180:	4801      	ldr	r0, [pc, #4]	; (8011188 <__sfp_lock_acquire+0x8>)
 8011182:	f000 b900 	b.w	8011386 <__retarget_lock_acquire_recursive>
 8011186:	bf00      	nop
 8011188:	20014edd 	.word	0x20014edd

0801118c <__sfp_lock_release>:
 801118c:	4801      	ldr	r0, [pc, #4]	; (8011194 <__sfp_lock_release+0x8>)
 801118e:	f000 b8fb 	b.w	8011388 <__retarget_lock_release_recursive>
 8011192:	bf00      	nop
 8011194:	20014edd 	.word	0x20014edd

08011198 <__sinit>:
 8011198:	b510      	push	{r4, lr}
 801119a:	4604      	mov	r4, r0
 801119c:	f7ff fff0 	bl	8011180 <__sfp_lock_acquire>
 80111a0:	6a23      	ldr	r3, [r4, #32]
 80111a2:	b11b      	cbz	r3, 80111ac <__sinit+0x14>
 80111a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111a8:	f7ff bff0 	b.w	801118c <__sfp_lock_release>
 80111ac:	4b04      	ldr	r3, [pc, #16]	; (80111c0 <__sinit+0x28>)
 80111ae:	6223      	str	r3, [r4, #32]
 80111b0:	4b04      	ldr	r3, [pc, #16]	; (80111c4 <__sinit+0x2c>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1f5      	bne.n	80111a4 <__sinit+0xc>
 80111b8:	f7ff ffc4 	bl	8011144 <global_stdio_init.part.0>
 80111bc:	e7f2      	b.n	80111a4 <__sinit+0xc>
 80111be:	bf00      	nop
 80111c0:	08011105 	.word	0x08011105
 80111c4:	20014ed8 	.word	0x20014ed8

080111c8 <_fwalk_sglue>:
 80111c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111cc:	4607      	mov	r7, r0
 80111ce:	4688      	mov	r8, r1
 80111d0:	4614      	mov	r4, r2
 80111d2:	2600      	movs	r6, #0
 80111d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111d8:	f1b9 0901 	subs.w	r9, r9, #1
 80111dc:	d505      	bpl.n	80111ea <_fwalk_sglue+0x22>
 80111de:	6824      	ldr	r4, [r4, #0]
 80111e0:	2c00      	cmp	r4, #0
 80111e2:	d1f7      	bne.n	80111d4 <_fwalk_sglue+0xc>
 80111e4:	4630      	mov	r0, r6
 80111e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ea:	89ab      	ldrh	r3, [r5, #12]
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d907      	bls.n	8011200 <_fwalk_sglue+0x38>
 80111f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111f4:	3301      	adds	r3, #1
 80111f6:	d003      	beq.n	8011200 <_fwalk_sglue+0x38>
 80111f8:	4629      	mov	r1, r5
 80111fa:	4638      	mov	r0, r7
 80111fc:	47c0      	blx	r8
 80111fe:	4306      	orrs	r6, r0
 8011200:	3568      	adds	r5, #104	; 0x68
 8011202:	e7e9      	b.n	80111d8 <_fwalk_sglue+0x10>

08011204 <iprintf>:
 8011204:	b40f      	push	{r0, r1, r2, r3}
 8011206:	b507      	push	{r0, r1, r2, lr}
 8011208:	4906      	ldr	r1, [pc, #24]	; (8011224 <iprintf+0x20>)
 801120a:	ab04      	add	r3, sp, #16
 801120c:	6808      	ldr	r0, [r1, #0]
 801120e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011212:	6881      	ldr	r1, [r0, #8]
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	f000 fa87 	bl	8011728 <_vfiprintf_r>
 801121a:	b003      	add	sp, #12
 801121c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011220:	b004      	add	sp, #16
 8011222:	4770      	bx	lr
 8011224:	20000168 	.word	0x20000168

08011228 <_puts_r>:
 8011228:	6a03      	ldr	r3, [r0, #32]
 801122a:	b570      	push	{r4, r5, r6, lr}
 801122c:	6884      	ldr	r4, [r0, #8]
 801122e:	4605      	mov	r5, r0
 8011230:	460e      	mov	r6, r1
 8011232:	b90b      	cbnz	r3, 8011238 <_puts_r+0x10>
 8011234:	f7ff ffb0 	bl	8011198 <__sinit>
 8011238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801123a:	07db      	lsls	r3, r3, #31
 801123c:	d405      	bmi.n	801124a <_puts_r+0x22>
 801123e:	89a3      	ldrh	r3, [r4, #12]
 8011240:	0598      	lsls	r0, r3, #22
 8011242:	d402      	bmi.n	801124a <_puts_r+0x22>
 8011244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011246:	f000 f89e 	bl	8011386 <__retarget_lock_acquire_recursive>
 801124a:	89a3      	ldrh	r3, [r4, #12]
 801124c:	0719      	lsls	r1, r3, #28
 801124e:	d513      	bpl.n	8011278 <_puts_r+0x50>
 8011250:	6923      	ldr	r3, [r4, #16]
 8011252:	b18b      	cbz	r3, 8011278 <_puts_r+0x50>
 8011254:	3e01      	subs	r6, #1
 8011256:	68a3      	ldr	r3, [r4, #8]
 8011258:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801125c:	3b01      	subs	r3, #1
 801125e:	60a3      	str	r3, [r4, #8]
 8011260:	b9e9      	cbnz	r1, 801129e <_puts_r+0x76>
 8011262:	2b00      	cmp	r3, #0
 8011264:	da2e      	bge.n	80112c4 <_puts_r+0x9c>
 8011266:	4622      	mov	r2, r4
 8011268:	210a      	movs	r1, #10
 801126a:	4628      	mov	r0, r5
 801126c:	f000 fe26 	bl	8011ebc <__swbuf_r>
 8011270:	3001      	adds	r0, #1
 8011272:	d007      	beq.n	8011284 <_puts_r+0x5c>
 8011274:	250a      	movs	r5, #10
 8011276:	e007      	b.n	8011288 <_puts_r+0x60>
 8011278:	4621      	mov	r1, r4
 801127a:	4628      	mov	r0, r5
 801127c:	f000 fe5c 	bl	8011f38 <__swsetup_r>
 8011280:	2800      	cmp	r0, #0
 8011282:	d0e7      	beq.n	8011254 <_puts_r+0x2c>
 8011284:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801128a:	07da      	lsls	r2, r3, #31
 801128c:	d405      	bmi.n	801129a <_puts_r+0x72>
 801128e:	89a3      	ldrh	r3, [r4, #12]
 8011290:	059b      	lsls	r3, r3, #22
 8011292:	d402      	bmi.n	801129a <_puts_r+0x72>
 8011294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011296:	f000 f877 	bl	8011388 <__retarget_lock_release_recursive>
 801129a:	4628      	mov	r0, r5
 801129c:	bd70      	pop	{r4, r5, r6, pc}
 801129e:	2b00      	cmp	r3, #0
 80112a0:	da04      	bge.n	80112ac <_puts_r+0x84>
 80112a2:	69a2      	ldr	r2, [r4, #24]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	dc06      	bgt.n	80112b6 <_puts_r+0x8e>
 80112a8:	290a      	cmp	r1, #10
 80112aa:	d004      	beq.n	80112b6 <_puts_r+0x8e>
 80112ac:	6823      	ldr	r3, [r4, #0]
 80112ae:	1c5a      	adds	r2, r3, #1
 80112b0:	6022      	str	r2, [r4, #0]
 80112b2:	7019      	strb	r1, [r3, #0]
 80112b4:	e7cf      	b.n	8011256 <_puts_r+0x2e>
 80112b6:	4622      	mov	r2, r4
 80112b8:	4628      	mov	r0, r5
 80112ba:	f000 fdff 	bl	8011ebc <__swbuf_r>
 80112be:	3001      	adds	r0, #1
 80112c0:	d1c9      	bne.n	8011256 <_puts_r+0x2e>
 80112c2:	e7df      	b.n	8011284 <_puts_r+0x5c>
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	250a      	movs	r5, #10
 80112c8:	1c5a      	adds	r2, r3, #1
 80112ca:	6022      	str	r2, [r4, #0]
 80112cc:	701d      	strb	r5, [r3, #0]
 80112ce:	e7db      	b.n	8011288 <_puts_r+0x60>

080112d0 <puts>:
 80112d0:	4b02      	ldr	r3, [pc, #8]	; (80112dc <puts+0xc>)
 80112d2:	4601      	mov	r1, r0
 80112d4:	6818      	ldr	r0, [r3, #0]
 80112d6:	f7ff bfa7 	b.w	8011228 <_puts_r>
 80112da:	bf00      	nop
 80112dc:	20000168 	.word	0x20000168

080112e0 <strcat>:
 80112e0:	b510      	push	{r4, lr}
 80112e2:	4602      	mov	r2, r0
 80112e4:	7814      	ldrb	r4, [r2, #0]
 80112e6:	4613      	mov	r3, r2
 80112e8:	3201      	adds	r2, #1
 80112ea:	2c00      	cmp	r4, #0
 80112ec:	d1fa      	bne.n	80112e4 <strcat+0x4>
 80112ee:	3b01      	subs	r3, #1
 80112f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112f8:	2a00      	cmp	r2, #0
 80112fa:	d1f9      	bne.n	80112f0 <strcat+0x10>
 80112fc:	bd10      	pop	{r4, pc}

080112fe <memset>:
 80112fe:	4402      	add	r2, r0
 8011300:	4603      	mov	r3, r0
 8011302:	4293      	cmp	r3, r2
 8011304:	d100      	bne.n	8011308 <memset+0xa>
 8011306:	4770      	bx	lr
 8011308:	f803 1b01 	strb.w	r1, [r3], #1
 801130c:	e7f9      	b.n	8011302 <memset+0x4>
	...

08011310 <_sbrk_r>:
 8011310:	b538      	push	{r3, r4, r5, lr}
 8011312:	4d06      	ldr	r5, [pc, #24]	; (801132c <_sbrk_r+0x1c>)
 8011314:	2300      	movs	r3, #0
 8011316:	4604      	mov	r4, r0
 8011318:	4608      	mov	r0, r1
 801131a:	602b      	str	r3, [r5, #0]
 801131c:	f7f0 fbc0 	bl	8001aa0 <_sbrk>
 8011320:	1c43      	adds	r3, r0, #1
 8011322:	d102      	bne.n	801132a <_sbrk_r+0x1a>
 8011324:	682b      	ldr	r3, [r5, #0]
 8011326:	b103      	cbz	r3, 801132a <_sbrk_r+0x1a>
 8011328:	6023      	str	r3, [r4, #0]
 801132a:	bd38      	pop	{r3, r4, r5, pc}
 801132c:	20014ee0 	.word	0x20014ee0

08011330 <__errno>:
 8011330:	4b01      	ldr	r3, [pc, #4]	; (8011338 <__errno+0x8>)
 8011332:	6818      	ldr	r0, [r3, #0]
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop
 8011338:	20000168 	.word	0x20000168

0801133c <__libc_init_array>:
 801133c:	b570      	push	{r4, r5, r6, lr}
 801133e:	4d0d      	ldr	r5, [pc, #52]	; (8011374 <__libc_init_array+0x38>)
 8011340:	4c0d      	ldr	r4, [pc, #52]	; (8011378 <__libc_init_array+0x3c>)
 8011342:	1b64      	subs	r4, r4, r5
 8011344:	10a4      	asrs	r4, r4, #2
 8011346:	2600      	movs	r6, #0
 8011348:	42a6      	cmp	r6, r4
 801134a:	d109      	bne.n	8011360 <__libc_init_array+0x24>
 801134c:	4d0b      	ldr	r5, [pc, #44]	; (801137c <__libc_init_array+0x40>)
 801134e:	4c0c      	ldr	r4, [pc, #48]	; (8011380 <__libc_init_array+0x44>)
 8011350:	f000 ff44 	bl	80121dc <_init>
 8011354:	1b64      	subs	r4, r4, r5
 8011356:	10a4      	asrs	r4, r4, #2
 8011358:	2600      	movs	r6, #0
 801135a:	42a6      	cmp	r6, r4
 801135c:	d105      	bne.n	801136a <__libc_init_array+0x2e>
 801135e:	bd70      	pop	{r4, r5, r6, pc}
 8011360:	f855 3b04 	ldr.w	r3, [r5], #4
 8011364:	4798      	blx	r3
 8011366:	3601      	adds	r6, #1
 8011368:	e7ee      	b.n	8011348 <__libc_init_array+0xc>
 801136a:	f855 3b04 	ldr.w	r3, [r5], #4
 801136e:	4798      	blx	r3
 8011370:	3601      	adds	r6, #1
 8011372:	e7f2      	b.n	801135a <__libc_init_array+0x1e>
 8011374:	08012c8c 	.word	0x08012c8c
 8011378:	08012c8c 	.word	0x08012c8c
 801137c:	08012c8c 	.word	0x08012c8c
 8011380:	08012c90 	.word	0x08012c90

08011384 <__retarget_lock_init_recursive>:
 8011384:	4770      	bx	lr

08011386 <__retarget_lock_acquire_recursive>:
 8011386:	4770      	bx	lr

08011388 <__retarget_lock_release_recursive>:
 8011388:	4770      	bx	lr
	...

0801138c <_free_r>:
 801138c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801138e:	2900      	cmp	r1, #0
 8011390:	d044      	beq.n	801141c <_free_r+0x90>
 8011392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011396:	9001      	str	r0, [sp, #4]
 8011398:	2b00      	cmp	r3, #0
 801139a:	f1a1 0404 	sub.w	r4, r1, #4
 801139e:	bfb8      	it	lt
 80113a0:	18e4      	addlt	r4, r4, r3
 80113a2:	f7ff fe61 	bl	8011068 <__malloc_lock>
 80113a6:	4a1e      	ldr	r2, [pc, #120]	; (8011420 <_free_r+0x94>)
 80113a8:	9801      	ldr	r0, [sp, #4]
 80113aa:	6813      	ldr	r3, [r2, #0]
 80113ac:	b933      	cbnz	r3, 80113bc <_free_r+0x30>
 80113ae:	6063      	str	r3, [r4, #4]
 80113b0:	6014      	str	r4, [r2, #0]
 80113b2:	b003      	add	sp, #12
 80113b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113b8:	f7ff be5c 	b.w	8011074 <__malloc_unlock>
 80113bc:	42a3      	cmp	r3, r4
 80113be:	d908      	bls.n	80113d2 <_free_r+0x46>
 80113c0:	6825      	ldr	r5, [r4, #0]
 80113c2:	1961      	adds	r1, r4, r5
 80113c4:	428b      	cmp	r3, r1
 80113c6:	bf01      	itttt	eq
 80113c8:	6819      	ldreq	r1, [r3, #0]
 80113ca:	685b      	ldreq	r3, [r3, #4]
 80113cc:	1949      	addeq	r1, r1, r5
 80113ce:	6021      	streq	r1, [r4, #0]
 80113d0:	e7ed      	b.n	80113ae <_free_r+0x22>
 80113d2:	461a      	mov	r2, r3
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	b10b      	cbz	r3, 80113dc <_free_r+0x50>
 80113d8:	42a3      	cmp	r3, r4
 80113da:	d9fa      	bls.n	80113d2 <_free_r+0x46>
 80113dc:	6811      	ldr	r1, [r2, #0]
 80113de:	1855      	adds	r5, r2, r1
 80113e0:	42a5      	cmp	r5, r4
 80113e2:	d10b      	bne.n	80113fc <_free_r+0x70>
 80113e4:	6824      	ldr	r4, [r4, #0]
 80113e6:	4421      	add	r1, r4
 80113e8:	1854      	adds	r4, r2, r1
 80113ea:	42a3      	cmp	r3, r4
 80113ec:	6011      	str	r1, [r2, #0]
 80113ee:	d1e0      	bne.n	80113b2 <_free_r+0x26>
 80113f0:	681c      	ldr	r4, [r3, #0]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	6053      	str	r3, [r2, #4]
 80113f6:	440c      	add	r4, r1
 80113f8:	6014      	str	r4, [r2, #0]
 80113fa:	e7da      	b.n	80113b2 <_free_r+0x26>
 80113fc:	d902      	bls.n	8011404 <_free_r+0x78>
 80113fe:	230c      	movs	r3, #12
 8011400:	6003      	str	r3, [r0, #0]
 8011402:	e7d6      	b.n	80113b2 <_free_r+0x26>
 8011404:	6825      	ldr	r5, [r4, #0]
 8011406:	1961      	adds	r1, r4, r5
 8011408:	428b      	cmp	r3, r1
 801140a:	bf04      	itt	eq
 801140c:	6819      	ldreq	r1, [r3, #0]
 801140e:	685b      	ldreq	r3, [r3, #4]
 8011410:	6063      	str	r3, [r4, #4]
 8011412:	bf04      	itt	eq
 8011414:	1949      	addeq	r1, r1, r5
 8011416:	6021      	streq	r1, [r4, #0]
 8011418:	6054      	str	r4, [r2, #4]
 801141a:	e7ca      	b.n	80113b2 <_free_r+0x26>
 801141c:	b003      	add	sp, #12
 801141e:	bd30      	pop	{r4, r5, pc}
 8011420:	20014d98 	.word	0x20014d98

08011424 <__ssputs_r>:
 8011424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011428:	688e      	ldr	r6, [r1, #8]
 801142a:	461f      	mov	r7, r3
 801142c:	42be      	cmp	r6, r7
 801142e:	680b      	ldr	r3, [r1, #0]
 8011430:	4682      	mov	sl, r0
 8011432:	460c      	mov	r4, r1
 8011434:	4690      	mov	r8, r2
 8011436:	d82c      	bhi.n	8011492 <__ssputs_r+0x6e>
 8011438:	898a      	ldrh	r2, [r1, #12]
 801143a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801143e:	d026      	beq.n	801148e <__ssputs_r+0x6a>
 8011440:	6965      	ldr	r5, [r4, #20]
 8011442:	6909      	ldr	r1, [r1, #16]
 8011444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011448:	eba3 0901 	sub.w	r9, r3, r1
 801144c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011450:	1c7b      	adds	r3, r7, #1
 8011452:	444b      	add	r3, r9
 8011454:	106d      	asrs	r5, r5, #1
 8011456:	429d      	cmp	r5, r3
 8011458:	bf38      	it	cc
 801145a:	461d      	movcc	r5, r3
 801145c:	0553      	lsls	r3, r2, #21
 801145e:	d527      	bpl.n	80114b0 <__ssputs_r+0x8c>
 8011460:	4629      	mov	r1, r5
 8011462:	f7ff fd4d 	bl	8010f00 <_malloc_r>
 8011466:	4606      	mov	r6, r0
 8011468:	b360      	cbz	r0, 80114c4 <__ssputs_r+0xa0>
 801146a:	6921      	ldr	r1, [r4, #16]
 801146c:	464a      	mov	r2, r9
 801146e:	f000 fe9f 	bl	80121b0 <memcpy>
 8011472:	89a3      	ldrh	r3, [r4, #12]
 8011474:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801147c:	81a3      	strh	r3, [r4, #12]
 801147e:	6126      	str	r6, [r4, #16]
 8011480:	6165      	str	r5, [r4, #20]
 8011482:	444e      	add	r6, r9
 8011484:	eba5 0509 	sub.w	r5, r5, r9
 8011488:	6026      	str	r6, [r4, #0]
 801148a:	60a5      	str	r5, [r4, #8]
 801148c:	463e      	mov	r6, r7
 801148e:	42be      	cmp	r6, r7
 8011490:	d900      	bls.n	8011494 <__ssputs_r+0x70>
 8011492:	463e      	mov	r6, r7
 8011494:	6820      	ldr	r0, [r4, #0]
 8011496:	4632      	mov	r2, r6
 8011498:	4641      	mov	r1, r8
 801149a:	f000 fe07 	bl	80120ac <memmove>
 801149e:	68a3      	ldr	r3, [r4, #8]
 80114a0:	1b9b      	subs	r3, r3, r6
 80114a2:	60a3      	str	r3, [r4, #8]
 80114a4:	6823      	ldr	r3, [r4, #0]
 80114a6:	4433      	add	r3, r6
 80114a8:	6023      	str	r3, [r4, #0]
 80114aa:	2000      	movs	r0, #0
 80114ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114b0:	462a      	mov	r2, r5
 80114b2:	f000 fcd4 	bl	8011e5e <_realloc_r>
 80114b6:	4606      	mov	r6, r0
 80114b8:	2800      	cmp	r0, #0
 80114ba:	d1e0      	bne.n	801147e <__ssputs_r+0x5a>
 80114bc:	6921      	ldr	r1, [r4, #16]
 80114be:	4650      	mov	r0, sl
 80114c0:	f7ff ff64 	bl	801138c <_free_r>
 80114c4:	230c      	movs	r3, #12
 80114c6:	f8ca 3000 	str.w	r3, [sl]
 80114ca:	89a3      	ldrh	r3, [r4, #12]
 80114cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114d0:	81a3      	strh	r3, [r4, #12]
 80114d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114d6:	e7e9      	b.n	80114ac <__ssputs_r+0x88>

080114d8 <_svfiprintf_r>:
 80114d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114dc:	4698      	mov	r8, r3
 80114de:	898b      	ldrh	r3, [r1, #12]
 80114e0:	061b      	lsls	r3, r3, #24
 80114e2:	b09d      	sub	sp, #116	; 0x74
 80114e4:	4607      	mov	r7, r0
 80114e6:	460d      	mov	r5, r1
 80114e8:	4614      	mov	r4, r2
 80114ea:	d50e      	bpl.n	801150a <_svfiprintf_r+0x32>
 80114ec:	690b      	ldr	r3, [r1, #16]
 80114ee:	b963      	cbnz	r3, 801150a <_svfiprintf_r+0x32>
 80114f0:	2140      	movs	r1, #64	; 0x40
 80114f2:	f7ff fd05 	bl	8010f00 <_malloc_r>
 80114f6:	6028      	str	r0, [r5, #0]
 80114f8:	6128      	str	r0, [r5, #16]
 80114fa:	b920      	cbnz	r0, 8011506 <_svfiprintf_r+0x2e>
 80114fc:	230c      	movs	r3, #12
 80114fe:	603b      	str	r3, [r7, #0]
 8011500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011504:	e0d0      	b.n	80116a8 <_svfiprintf_r+0x1d0>
 8011506:	2340      	movs	r3, #64	; 0x40
 8011508:	616b      	str	r3, [r5, #20]
 801150a:	2300      	movs	r3, #0
 801150c:	9309      	str	r3, [sp, #36]	; 0x24
 801150e:	2320      	movs	r3, #32
 8011510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011514:	f8cd 800c 	str.w	r8, [sp, #12]
 8011518:	2330      	movs	r3, #48	; 0x30
 801151a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80116c0 <_svfiprintf_r+0x1e8>
 801151e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011522:	f04f 0901 	mov.w	r9, #1
 8011526:	4623      	mov	r3, r4
 8011528:	469a      	mov	sl, r3
 801152a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801152e:	b10a      	cbz	r2, 8011534 <_svfiprintf_r+0x5c>
 8011530:	2a25      	cmp	r2, #37	; 0x25
 8011532:	d1f9      	bne.n	8011528 <_svfiprintf_r+0x50>
 8011534:	ebba 0b04 	subs.w	fp, sl, r4
 8011538:	d00b      	beq.n	8011552 <_svfiprintf_r+0x7a>
 801153a:	465b      	mov	r3, fp
 801153c:	4622      	mov	r2, r4
 801153e:	4629      	mov	r1, r5
 8011540:	4638      	mov	r0, r7
 8011542:	f7ff ff6f 	bl	8011424 <__ssputs_r>
 8011546:	3001      	adds	r0, #1
 8011548:	f000 80a9 	beq.w	801169e <_svfiprintf_r+0x1c6>
 801154c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801154e:	445a      	add	r2, fp
 8011550:	9209      	str	r2, [sp, #36]	; 0x24
 8011552:	f89a 3000 	ldrb.w	r3, [sl]
 8011556:	2b00      	cmp	r3, #0
 8011558:	f000 80a1 	beq.w	801169e <_svfiprintf_r+0x1c6>
 801155c:	2300      	movs	r3, #0
 801155e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011566:	f10a 0a01 	add.w	sl, sl, #1
 801156a:	9304      	str	r3, [sp, #16]
 801156c:	9307      	str	r3, [sp, #28]
 801156e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011572:	931a      	str	r3, [sp, #104]	; 0x68
 8011574:	4654      	mov	r4, sl
 8011576:	2205      	movs	r2, #5
 8011578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801157c:	4850      	ldr	r0, [pc, #320]	; (80116c0 <_svfiprintf_r+0x1e8>)
 801157e:	f7ee fe5f 	bl	8000240 <memchr>
 8011582:	9a04      	ldr	r2, [sp, #16]
 8011584:	b9d8      	cbnz	r0, 80115be <_svfiprintf_r+0xe6>
 8011586:	06d0      	lsls	r0, r2, #27
 8011588:	bf44      	itt	mi
 801158a:	2320      	movmi	r3, #32
 801158c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011590:	0711      	lsls	r1, r2, #28
 8011592:	bf44      	itt	mi
 8011594:	232b      	movmi	r3, #43	; 0x2b
 8011596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801159a:	f89a 3000 	ldrb.w	r3, [sl]
 801159e:	2b2a      	cmp	r3, #42	; 0x2a
 80115a0:	d015      	beq.n	80115ce <_svfiprintf_r+0xf6>
 80115a2:	9a07      	ldr	r2, [sp, #28]
 80115a4:	4654      	mov	r4, sl
 80115a6:	2000      	movs	r0, #0
 80115a8:	f04f 0c0a 	mov.w	ip, #10
 80115ac:	4621      	mov	r1, r4
 80115ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115b2:	3b30      	subs	r3, #48	; 0x30
 80115b4:	2b09      	cmp	r3, #9
 80115b6:	d94d      	bls.n	8011654 <_svfiprintf_r+0x17c>
 80115b8:	b1b0      	cbz	r0, 80115e8 <_svfiprintf_r+0x110>
 80115ba:	9207      	str	r2, [sp, #28]
 80115bc:	e014      	b.n	80115e8 <_svfiprintf_r+0x110>
 80115be:	eba0 0308 	sub.w	r3, r0, r8
 80115c2:	fa09 f303 	lsl.w	r3, r9, r3
 80115c6:	4313      	orrs	r3, r2
 80115c8:	9304      	str	r3, [sp, #16]
 80115ca:	46a2      	mov	sl, r4
 80115cc:	e7d2      	b.n	8011574 <_svfiprintf_r+0x9c>
 80115ce:	9b03      	ldr	r3, [sp, #12]
 80115d0:	1d19      	adds	r1, r3, #4
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	9103      	str	r1, [sp, #12]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	bfbb      	ittet	lt
 80115da:	425b      	neglt	r3, r3
 80115dc:	f042 0202 	orrlt.w	r2, r2, #2
 80115e0:	9307      	strge	r3, [sp, #28]
 80115e2:	9307      	strlt	r3, [sp, #28]
 80115e4:	bfb8      	it	lt
 80115e6:	9204      	strlt	r2, [sp, #16]
 80115e8:	7823      	ldrb	r3, [r4, #0]
 80115ea:	2b2e      	cmp	r3, #46	; 0x2e
 80115ec:	d10c      	bne.n	8011608 <_svfiprintf_r+0x130>
 80115ee:	7863      	ldrb	r3, [r4, #1]
 80115f0:	2b2a      	cmp	r3, #42	; 0x2a
 80115f2:	d134      	bne.n	801165e <_svfiprintf_r+0x186>
 80115f4:	9b03      	ldr	r3, [sp, #12]
 80115f6:	1d1a      	adds	r2, r3, #4
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	9203      	str	r2, [sp, #12]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	bfb8      	it	lt
 8011600:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011604:	3402      	adds	r4, #2
 8011606:	9305      	str	r3, [sp, #20]
 8011608:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80116d0 <_svfiprintf_r+0x1f8>
 801160c:	7821      	ldrb	r1, [r4, #0]
 801160e:	2203      	movs	r2, #3
 8011610:	4650      	mov	r0, sl
 8011612:	f7ee fe15 	bl	8000240 <memchr>
 8011616:	b138      	cbz	r0, 8011628 <_svfiprintf_r+0x150>
 8011618:	9b04      	ldr	r3, [sp, #16]
 801161a:	eba0 000a 	sub.w	r0, r0, sl
 801161e:	2240      	movs	r2, #64	; 0x40
 8011620:	4082      	lsls	r2, r0
 8011622:	4313      	orrs	r3, r2
 8011624:	3401      	adds	r4, #1
 8011626:	9304      	str	r3, [sp, #16]
 8011628:	f814 1b01 	ldrb.w	r1, [r4], #1
 801162c:	4825      	ldr	r0, [pc, #148]	; (80116c4 <_svfiprintf_r+0x1ec>)
 801162e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011632:	2206      	movs	r2, #6
 8011634:	f7ee fe04 	bl	8000240 <memchr>
 8011638:	2800      	cmp	r0, #0
 801163a:	d038      	beq.n	80116ae <_svfiprintf_r+0x1d6>
 801163c:	4b22      	ldr	r3, [pc, #136]	; (80116c8 <_svfiprintf_r+0x1f0>)
 801163e:	bb1b      	cbnz	r3, 8011688 <_svfiprintf_r+0x1b0>
 8011640:	9b03      	ldr	r3, [sp, #12]
 8011642:	3307      	adds	r3, #7
 8011644:	f023 0307 	bic.w	r3, r3, #7
 8011648:	3308      	adds	r3, #8
 801164a:	9303      	str	r3, [sp, #12]
 801164c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801164e:	4433      	add	r3, r6
 8011650:	9309      	str	r3, [sp, #36]	; 0x24
 8011652:	e768      	b.n	8011526 <_svfiprintf_r+0x4e>
 8011654:	fb0c 3202 	mla	r2, ip, r2, r3
 8011658:	460c      	mov	r4, r1
 801165a:	2001      	movs	r0, #1
 801165c:	e7a6      	b.n	80115ac <_svfiprintf_r+0xd4>
 801165e:	2300      	movs	r3, #0
 8011660:	3401      	adds	r4, #1
 8011662:	9305      	str	r3, [sp, #20]
 8011664:	4619      	mov	r1, r3
 8011666:	f04f 0c0a 	mov.w	ip, #10
 801166a:	4620      	mov	r0, r4
 801166c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011670:	3a30      	subs	r2, #48	; 0x30
 8011672:	2a09      	cmp	r2, #9
 8011674:	d903      	bls.n	801167e <_svfiprintf_r+0x1a6>
 8011676:	2b00      	cmp	r3, #0
 8011678:	d0c6      	beq.n	8011608 <_svfiprintf_r+0x130>
 801167a:	9105      	str	r1, [sp, #20]
 801167c:	e7c4      	b.n	8011608 <_svfiprintf_r+0x130>
 801167e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011682:	4604      	mov	r4, r0
 8011684:	2301      	movs	r3, #1
 8011686:	e7f0      	b.n	801166a <_svfiprintf_r+0x192>
 8011688:	ab03      	add	r3, sp, #12
 801168a:	9300      	str	r3, [sp, #0]
 801168c:	462a      	mov	r2, r5
 801168e:	4b0f      	ldr	r3, [pc, #60]	; (80116cc <_svfiprintf_r+0x1f4>)
 8011690:	a904      	add	r1, sp, #16
 8011692:	4638      	mov	r0, r7
 8011694:	f3af 8000 	nop.w
 8011698:	1c42      	adds	r2, r0, #1
 801169a:	4606      	mov	r6, r0
 801169c:	d1d6      	bne.n	801164c <_svfiprintf_r+0x174>
 801169e:	89ab      	ldrh	r3, [r5, #12]
 80116a0:	065b      	lsls	r3, r3, #25
 80116a2:	f53f af2d 	bmi.w	8011500 <_svfiprintf_r+0x28>
 80116a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116a8:	b01d      	add	sp, #116	; 0x74
 80116aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ae:	ab03      	add	r3, sp, #12
 80116b0:	9300      	str	r3, [sp, #0]
 80116b2:	462a      	mov	r2, r5
 80116b4:	4b05      	ldr	r3, [pc, #20]	; (80116cc <_svfiprintf_r+0x1f4>)
 80116b6:	a904      	add	r1, sp, #16
 80116b8:	4638      	mov	r0, r7
 80116ba:	f000 f9bd 	bl	8011a38 <_printf_i>
 80116be:	e7eb      	b.n	8011698 <_svfiprintf_r+0x1c0>
 80116c0:	08012c50 	.word	0x08012c50
 80116c4:	08012c5a 	.word	0x08012c5a
 80116c8:	00000000 	.word	0x00000000
 80116cc:	08011425 	.word	0x08011425
 80116d0:	08012c56 	.word	0x08012c56

080116d4 <__sfputc_r>:
 80116d4:	6893      	ldr	r3, [r2, #8]
 80116d6:	3b01      	subs	r3, #1
 80116d8:	2b00      	cmp	r3, #0
 80116da:	b410      	push	{r4}
 80116dc:	6093      	str	r3, [r2, #8]
 80116de:	da08      	bge.n	80116f2 <__sfputc_r+0x1e>
 80116e0:	6994      	ldr	r4, [r2, #24]
 80116e2:	42a3      	cmp	r3, r4
 80116e4:	db01      	blt.n	80116ea <__sfputc_r+0x16>
 80116e6:	290a      	cmp	r1, #10
 80116e8:	d103      	bne.n	80116f2 <__sfputc_r+0x1e>
 80116ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116ee:	f000 bbe5 	b.w	8011ebc <__swbuf_r>
 80116f2:	6813      	ldr	r3, [r2, #0]
 80116f4:	1c58      	adds	r0, r3, #1
 80116f6:	6010      	str	r0, [r2, #0]
 80116f8:	7019      	strb	r1, [r3, #0]
 80116fa:	4608      	mov	r0, r1
 80116fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011700:	4770      	bx	lr

08011702 <__sfputs_r>:
 8011702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011704:	4606      	mov	r6, r0
 8011706:	460f      	mov	r7, r1
 8011708:	4614      	mov	r4, r2
 801170a:	18d5      	adds	r5, r2, r3
 801170c:	42ac      	cmp	r4, r5
 801170e:	d101      	bne.n	8011714 <__sfputs_r+0x12>
 8011710:	2000      	movs	r0, #0
 8011712:	e007      	b.n	8011724 <__sfputs_r+0x22>
 8011714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011718:	463a      	mov	r2, r7
 801171a:	4630      	mov	r0, r6
 801171c:	f7ff ffda 	bl	80116d4 <__sfputc_r>
 8011720:	1c43      	adds	r3, r0, #1
 8011722:	d1f3      	bne.n	801170c <__sfputs_r+0xa>
 8011724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011728 <_vfiprintf_r>:
 8011728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801172c:	460d      	mov	r5, r1
 801172e:	b09d      	sub	sp, #116	; 0x74
 8011730:	4614      	mov	r4, r2
 8011732:	4698      	mov	r8, r3
 8011734:	4606      	mov	r6, r0
 8011736:	b118      	cbz	r0, 8011740 <_vfiprintf_r+0x18>
 8011738:	6a03      	ldr	r3, [r0, #32]
 801173a:	b90b      	cbnz	r3, 8011740 <_vfiprintf_r+0x18>
 801173c:	f7ff fd2c 	bl	8011198 <__sinit>
 8011740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011742:	07d9      	lsls	r1, r3, #31
 8011744:	d405      	bmi.n	8011752 <_vfiprintf_r+0x2a>
 8011746:	89ab      	ldrh	r3, [r5, #12]
 8011748:	059a      	lsls	r2, r3, #22
 801174a:	d402      	bmi.n	8011752 <_vfiprintf_r+0x2a>
 801174c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801174e:	f7ff fe1a 	bl	8011386 <__retarget_lock_acquire_recursive>
 8011752:	89ab      	ldrh	r3, [r5, #12]
 8011754:	071b      	lsls	r3, r3, #28
 8011756:	d501      	bpl.n	801175c <_vfiprintf_r+0x34>
 8011758:	692b      	ldr	r3, [r5, #16]
 801175a:	b99b      	cbnz	r3, 8011784 <_vfiprintf_r+0x5c>
 801175c:	4629      	mov	r1, r5
 801175e:	4630      	mov	r0, r6
 8011760:	f000 fbea 	bl	8011f38 <__swsetup_r>
 8011764:	b170      	cbz	r0, 8011784 <_vfiprintf_r+0x5c>
 8011766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011768:	07dc      	lsls	r4, r3, #31
 801176a:	d504      	bpl.n	8011776 <_vfiprintf_r+0x4e>
 801176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011770:	b01d      	add	sp, #116	; 0x74
 8011772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011776:	89ab      	ldrh	r3, [r5, #12]
 8011778:	0598      	lsls	r0, r3, #22
 801177a:	d4f7      	bmi.n	801176c <_vfiprintf_r+0x44>
 801177c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801177e:	f7ff fe03 	bl	8011388 <__retarget_lock_release_recursive>
 8011782:	e7f3      	b.n	801176c <_vfiprintf_r+0x44>
 8011784:	2300      	movs	r3, #0
 8011786:	9309      	str	r3, [sp, #36]	; 0x24
 8011788:	2320      	movs	r3, #32
 801178a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801178e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011792:	2330      	movs	r3, #48	; 0x30
 8011794:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011948 <_vfiprintf_r+0x220>
 8011798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801179c:	f04f 0901 	mov.w	r9, #1
 80117a0:	4623      	mov	r3, r4
 80117a2:	469a      	mov	sl, r3
 80117a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117a8:	b10a      	cbz	r2, 80117ae <_vfiprintf_r+0x86>
 80117aa:	2a25      	cmp	r2, #37	; 0x25
 80117ac:	d1f9      	bne.n	80117a2 <_vfiprintf_r+0x7a>
 80117ae:	ebba 0b04 	subs.w	fp, sl, r4
 80117b2:	d00b      	beq.n	80117cc <_vfiprintf_r+0xa4>
 80117b4:	465b      	mov	r3, fp
 80117b6:	4622      	mov	r2, r4
 80117b8:	4629      	mov	r1, r5
 80117ba:	4630      	mov	r0, r6
 80117bc:	f7ff ffa1 	bl	8011702 <__sfputs_r>
 80117c0:	3001      	adds	r0, #1
 80117c2:	f000 80a9 	beq.w	8011918 <_vfiprintf_r+0x1f0>
 80117c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117c8:	445a      	add	r2, fp
 80117ca:	9209      	str	r2, [sp, #36]	; 0x24
 80117cc:	f89a 3000 	ldrb.w	r3, [sl]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	f000 80a1 	beq.w	8011918 <_vfiprintf_r+0x1f0>
 80117d6:	2300      	movs	r3, #0
 80117d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117e0:	f10a 0a01 	add.w	sl, sl, #1
 80117e4:	9304      	str	r3, [sp, #16]
 80117e6:	9307      	str	r3, [sp, #28]
 80117e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117ec:	931a      	str	r3, [sp, #104]	; 0x68
 80117ee:	4654      	mov	r4, sl
 80117f0:	2205      	movs	r2, #5
 80117f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117f6:	4854      	ldr	r0, [pc, #336]	; (8011948 <_vfiprintf_r+0x220>)
 80117f8:	f7ee fd22 	bl	8000240 <memchr>
 80117fc:	9a04      	ldr	r2, [sp, #16]
 80117fe:	b9d8      	cbnz	r0, 8011838 <_vfiprintf_r+0x110>
 8011800:	06d1      	lsls	r1, r2, #27
 8011802:	bf44      	itt	mi
 8011804:	2320      	movmi	r3, #32
 8011806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801180a:	0713      	lsls	r3, r2, #28
 801180c:	bf44      	itt	mi
 801180e:	232b      	movmi	r3, #43	; 0x2b
 8011810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011814:	f89a 3000 	ldrb.w	r3, [sl]
 8011818:	2b2a      	cmp	r3, #42	; 0x2a
 801181a:	d015      	beq.n	8011848 <_vfiprintf_r+0x120>
 801181c:	9a07      	ldr	r2, [sp, #28]
 801181e:	4654      	mov	r4, sl
 8011820:	2000      	movs	r0, #0
 8011822:	f04f 0c0a 	mov.w	ip, #10
 8011826:	4621      	mov	r1, r4
 8011828:	f811 3b01 	ldrb.w	r3, [r1], #1
 801182c:	3b30      	subs	r3, #48	; 0x30
 801182e:	2b09      	cmp	r3, #9
 8011830:	d94d      	bls.n	80118ce <_vfiprintf_r+0x1a6>
 8011832:	b1b0      	cbz	r0, 8011862 <_vfiprintf_r+0x13a>
 8011834:	9207      	str	r2, [sp, #28]
 8011836:	e014      	b.n	8011862 <_vfiprintf_r+0x13a>
 8011838:	eba0 0308 	sub.w	r3, r0, r8
 801183c:	fa09 f303 	lsl.w	r3, r9, r3
 8011840:	4313      	orrs	r3, r2
 8011842:	9304      	str	r3, [sp, #16]
 8011844:	46a2      	mov	sl, r4
 8011846:	e7d2      	b.n	80117ee <_vfiprintf_r+0xc6>
 8011848:	9b03      	ldr	r3, [sp, #12]
 801184a:	1d19      	adds	r1, r3, #4
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	9103      	str	r1, [sp, #12]
 8011850:	2b00      	cmp	r3, #0
 8011852:	bfbb      	ittet	lt
 8011854:	425b      	neglt	r3, r3
 8011856:	f042 0202 	orrlt.w	r2, r2, #2
 801185a:	9307      	strge	r3, [sp, #28]
 801185c:	9307      	strlt	r3, [sp, #28]
 801185e:	bfb8      	it	lt
 8011860:	9204      	strlt	r2, [sp, #16]
 8011862:	7823      	ldrb	r3, [r4, #0]
 8011864:	2b2e      	cmp	r3, #46	; 0x2e
 8011866:	d10c      	bne.n	8011882 <_vfiprintf_r+0x15a>
 8011868:	7863      	ldrb	r3, [r4, #1]
 801186a:	2b2a      	cmp	r3, #42	; 0x2a
 801186c:	d134      	bne.n	80118d8 <_vfiprintf_r+0x1b0>
 801186e:	9b03      	ldr	r3, [sp, #12]
 8011870:	1d1a      	adds	r2, r3, #4
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	9203      	str	r2, [sp, #12]
 8011876:	2b00      	cmp	r3, #0
 8011878:	bfb8      	it	lt
 801187a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801187e:	3402      	adds	r4, #2
 8011880:	9305      	str	r3, [sp, #20]
 8011882:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011958 <_vfiprintf_r+0x230>
 8011886:	7821      	ldrb	r1, [r4, #0]
 8011888:	2203      	movs	r2, #3
 801188a:	4650      	mov	r0, sl
 801188c:	f7ee fcd8 	bl	8000240 <memchr>
 8011890:	b138      	cbz	r0, 80118a2 <_vfiprintf_r+0x17a>
 8011892:	9b04      	ldr	r3, [sp, #16]
 8011894:	eba0 000a 	sub.w	r0, r0, sl
 8011898:	2240      	movs	r2, #64	; 0x40
 801189a:	4082      	lsls	r2, r0
 801189c:	4313      	orrs	r3, r2
 801189e:	3401      	adds	r4, #1
 80118a0:	9304      	str	r3, [sp, #16]
 80118a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118a6:	4829      	ldr	r0, [pc, #164]	; (801194c <_vfiprintf_r+0x224>)
 80118a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118ac:	2206      	movs	r2, #6
 80118ae:	f7ee fcc7 	bl	8000240 <memchr>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	d03f      	beq.n	8011936 <_vfiprintf_r+0x20e>
 80118b6:	4b26      	ldr	r3, [pc, #152]	; (8011950 <_vfiprintf_r+0x228>)
 80118b8:	bb1b      	cbnz	r3, 8011902 <_vfiprintf_r+0x1da>
 80118ba:	9b03      	ldr	r3, [sp, #12]
 80118bc:	3307      	adds	r3, #7
 80118be:	f023 0307 	bic.w	r3, r3, #7
 80118c2:	3308      	adds	r3, #8
 80118c4:	9303      	str	r3, [sp, #12]
 80118c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118c8:	443b      	add	r3, r7
 80118ca:	9309      	str	r3, [sp, #36]	; 0x24
 80118cc:	e768      	b.n	80117a0 <_vfiprintf_r+0x78>
 80118ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80118d2:	460c      	mov	r4, r1
 80118d4:	2001      	movs	r0, #1
 80118d6:	e7a6      	b.n	8011826 <_vfiprintf_r+0xfe>
 80118d8:	2300      	movs	r3, #0
 80118da:	3401      	adds	r4, #1
 80118dc:	9305      	str	r3, [sp, #20]
 80118de:	4619      	mov	r1, r3
 80118e0:	f04f 0c0a 	mov.w	ip, #10
 80118e4:	4620      	mov	r0, r4
 80118e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118ea:	3a30      	subs	r2, #48	; 0x30
 80118ec:	2a09      	cmp	r2, #9
 80118ee:	d903      	bls.n	80118f8 <_vfiprintf_r+0x1d0>
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d0c6      	beq.n	8011882 <_vfiprintf_r+0x15a>
 80118f4:	9105      	str	r1, [sp, #20]
 80118f6:	e7c4      	b.n	8011882 <_vfiprintf_r+0x15a>
 80118f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80118fc:	4604      	mov	r4, r0
 80118fe:	2301      	movs	r3, #1
 8011900:	e7f0      	b.n	80118e4 <_vfiprintf_r+0x1bc>
 8011902:	ab03      	add	r3, sp, #12
 8011904:	9300      	str	r3, [sp, #0]
 8011906:	462a      	mov	r2, r5
 8011908:	4b12      	ldr	r3, [pc, #72]	; (8011954 <_vfiprintf_r+0x22c>)
 801190a:	a904      	add	r1, sp, #16
 801190c:	4630      	mov	r0, r6
 801190e:	f3af 8000 	nop.w
 8011912:	4607      	mov	r7, r0
 8011914:	1c78      	adds	r0, r7, #1
 8011916:	d1d6      	bne.n	80118c6 <_vfiprintf_r+0x19e>
 8011918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801191a:	07d9      	lsls	r1, r3, #31
 801191c:	d405      	bmi.n	801192a <_vfiprintf_r+0x202>
 801191e:	89ab      	ldrh	r3, [r5, #12]
 8011920:	059a      	lsls	r2, r3, #22
 8011922:	d402      	bmi.n	801192a <_vfiprintf_r+0x202>
 8011924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011926:	f7ff fd2f 	bl	8011388 <__retarget_lock_release_recursive>
 801192a:	89ab      	ldrh	r3, [r5, #12]
 801192c:	065b      	lsls	r3, r3, #25
 801192e:	f53f af1d 	bmi.w	801176c <_vfiprintf_r+0x44>
 8011932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011934:	e71c      	b.n	8011770 <_vfiprintf_r+0x48>
 8011936:	ab03      	add	r3, sp, #12
 8011938:	9300      	str	r3, [sp, #0]
 801193a:	462a      	mov	r2, r5
 801193c:	4b05      	ldr	r3, [pc, #20]	; (8011954 <_vfiprintf_r+0x22c>)
 801193e:	a904      	add	r1, sp, #16
 8011940:	4630      	mov	r0, r6
 8011942:	f000 f879 	bl	8011a38 <_printf_i>
 8011946:	e7e4      	b.n	8011912 <_vfiprintf_r+0x1ea>
 8011948:	08012c50 	.word	0x08012c50
 801194c:	08012c5a 	.word	0x08012c5a
 8011950:	00000000 	.word	0x00000000
 8011954:	08011703 	.word	0x08011703
 8011958:	08012c56 	.word	0x08012c56

0801195c <_printf_common>:
 801195c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011960:	4616      	mov	r6, r2
 8011962:	4699      	mov	r9, r3
 8011964:	688a      	ldr	r2, [r1, #8]
 8011966:	690b      	ldr	r3, [r1, #16]
 8011968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801196c:	4293      	cmp	r3, r2
 801196e:	bfb8      	it	lt
 8011970:	4613      	movlt	r3, r2
 8011972:	6033      	str	r3, [r6, #0]
 8011974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011978:	4607      	mov	r7, r0
 801197a:	460c      	mov	r4, r1
 801197c:	b10a      	cbz	r2, 8011982 <_printf_common+0x26>
 801197e:	3301      	adds	r3, #1
 8011980:	6033      	str	r3, [r6, #0]
 8011982:	6823      	ldr	r3, [r4, #0]
 8011984:	0699      	lsls	r1, r3, #26
 8011986:	bf42      	ittt	mi
 8011988:	6833      	ldrmi	r3, [r6, #0]
 801198a:	3302      	addmi	r3, #2
 801198c:	6033      	strmi	r3, [r6, #0]
 801198e:	6825      	ldr	r5, [r4, #0]
 8011990:	f015 0506 	ands.w	r5, r5, #6
 8011994:	d106      	bne.n	80119a4 <_printf_common+0x48>
 8011996:	f104 0a19 	add.w	sl, r4, #25
 801199a:	68e3      	ldr	r3, [r4, #12]
 801199c:	6832      	ldr	r2, [r6, #0]
 801199e:	1a9b      	subs	r3, r3, r2
 80119a0:	42ab      	cmp	r3, r5
 80119a2:	dc26      	bgt.n	80119f2 <_printf_common+0x96>
 80119a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80119a8:	1e13      	subs	r3, r2, #0
 80119aa:	6822      	ldr	r2, [r4, #0]
 80119ac:	bf18      	it	ne
 80119ae:	2301      	movne	r3, #1
 80119b0:	0692      	lsls	r2, r2, #26
 80119b2:	d42b      	bmi.n	8011a0c <_printf_common+0xb0>
 80119b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80119b8:	4649      	mov	r1, r9
 80119ba:	4638      	mov	r0, r7
 80119bc:	47c0      	blx	r8
 80119be:	3001      	adds	r0, #1
 80119c0:	d01e      	beq.n	8011a00 <_printf_common+0xa4>
 80119c2:	6823      	ldr	r3, [r4, #0]
 80119c4:	6922      	ldr	r2, [r4, #16]
 80119c6:	f003 0306 	and.w	r3, r3, #6
 80119ca:	2b04      	cmp	r3, #4
 80119cc:	bf02      	ittt	eq
 80119ce:	68e5      	ldreq	r5, [r4, #12]
 80119d0:	6833      	ldreq	r3, [r6, #0]
 80119d2:	1aed      	subeq	r5, r5, r3
 80119d4:	68a3      	ldr	r3, [r4, #8]
 80119d6:	bf0c      	ite	eq
 80119d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80119dc:	2500      	movne	r5, #0
 80119de:	4293      	cmp	r3, r2
 80119e0:	bfc4      	itt	gt
 80119e2:	1a9b      	subgt	r3, r3, r2
 80119e4:	18ed      	addgt	r5, r5, r3
 80119e6:	2600      	movs	r6, #0
 80119e8:	341a      	adds	r4, #26
 80119ea:	42b5      	cmp	r5, r6
 80119ec:	d11a      	bne.n	8011a24 <_printf_common+0xc8>
 80119ee:	2000      	movs	r0, #0
 80119f0:	e008      	b.n	8011a04 <_printf_common+0xa8>
 80119f2:	2301      	movs	r3, #1
 80119f4:	4652      	mov	r2, sl
 80119f6:	4649      	mov	r1, r9
 80119f8:	4638      	mov	r0, r7
 80119fa:	47c0      	blx	r8
 80119fc:	3001      	adds	r0, #1
 80119fe:	d103      	bne.n	8011a08 <_printf_common+0xac>
 8011a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a08:	3501      	adds	r5, #1
 8011a0a:	e7c6      	b.n	801199a <_printf_common+0x3e>
 8011a0c:	18e1      	adds	r1, r4, r3
 8011a0e:	1c5a      	adds	r2, r3, #1
 8011a10:	2030      	movs	r0, #48	; 0x30
 8011a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011a16:	4422      	add	r2, r4
 8011a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011a20:	3302      	adds	r3, #2
 8011a22:	e7c7      	b.n	80119b4 <_printf_common+0x58>
 8011a24:	2301      	movs	r3, #1
 8011a26:	4622      	mov	r2, r4
 8011a28:	4649      	mov	r1, r9
 8011a2a:	4638      	mov	r0, r7
 8011a2c:	47c0      	blx	r8
 8011a2e:	3001      	adds	r0, #1
 8011a30:	d0e6      	beq.n	8011a00 <_printf_common+0xa4>
 8011a32:	3601      	adds	r6, #1
 8011a34:	e7d9      	b.n	80119ea <_printf_common+0x8e>
	...

08011a38 <_printf_i>:
 8011a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a3c:	7e0f      	ldrb	r7, [r1, #24]
 8011a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011a40:	2f78      	cmp	r7, #120	; 0x78
 8011a42:	4691      	mov	r9, r2
 8011a44:	4680      	mov	r8, r0
 8011a46:	460c      	mov	r4, r1
 8011a48:	469a      	mov	sl, r3
 8011a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011a4e:	d807      	bhi.n	8011a60 <_printf_i+0x28>
 8011a50:	2f62      	cmp	r7, #98	; 0x62
 8011a52:	d80a      	bhi.n	8011a6a <_printf_i+0x32>
 8011a54:	2f00      	cmp	r7, #0
 8011a56:	f000 80d4 	beq.w	8011c02 <_printf_i+0x1ca>
 8011a5a:	2f58      	cmp	r7, #88	; 0x58
 8011a5c:	f000 80c0 	beq.w	8011be0 <_printf_i+0x1a8>
 8011a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011a68:	e03a      	b.n	8011ae0 <_printf_i+0xa8>
 8011a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011a6e:	2b15      	cmp	r3, #21
 8011a70:	d8f6      	bhi.n	8011a60 <_printf_i+0x28>
 8011a72:	a101      	add	r1, pc, #4	; (adr r1, 8011a78 <_printf_i+0x40>)
 8011a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a78:	08011ad1 	.word	0x08011ad1
 8011a7c:	08011ae5 	.word	0x08011ae5
 8011a80:	08011a61 	.word	0x08011a61
 8011a84:	08011a61 	.word	0x08011a61
 8011a88:	08011a61 	.word	0x08011a61
 8011a8c:	08011a61 	.word	0x08011a61
 8011a90:	08011ae5 	.word	0x08011ae5
 8011a94:	08011a61 	.word	0x08011a61
 8011a98:	08011a61 	.word	0x08011a61
 8011a9c:	08011a61 	.word	0x08011a61
 8011aa0:	08011a61 	.word	0x08011a61
 8011aa4:	08011be9 	.word	0x08011be9
 8011aa8:	08011b11 	.word	0x08011b11
 8011aac:	08011ba3 	.word	0x08011ba3
 8011ab0:	08011a61 	.word	0x08011a61
 8011ab4:	08011a61 	.word	0x08011a61
 8011ab8:	08011c0b 	.word	0x08011c0b
 8011abc:	08011a61 	.word	0x08011a61
 8011ac0:	08011b11 	.word	0x08011b11
 8011ac4:	08011a61 	.word	0x08011a61
 8011ac8:	08011a61 	.word	0x08011a61
 8011acc:	08011bab 	.word	0x08011bab
 8011ad0:	682b      	ldr	r3, [r5, #0]
 8011ad2:	1d1a      	adds	r2, r3, #4
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	602a      	str	r2, [r5, #0]
 8011ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	e09f      	b.n	8011c24 <_printf_i+0x1ec>
 8011ae4:	6820      	ldr	r0, [r4, #0]
 8011ae6:	682b      	ldr	r3, [r5, #0]
 8011ae8:	0607      	lsls	r7, r0, #24
 8011aea:	f103 0104 	add.w	r1, r3, #4
 8011aee:	6029      	str	r1, [r5, #0]
 8011af0:	d501      	bpl.n	8011af6 <_printf_i+0xbe>
 8011af2:	681e      	ldr	r6, [r3, #0]
 8011af4:	e003      	b.n	8011afe <_printf_i+0xc6>
 8011af6:	0646      	lsls	r6, r0, #25
 8011af8:	d5fb      	bpl.n	8011af2 <_printf_i+0xba>
 8011afa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011afe:	2e00      	cmp	r6, #0
 8011b00:	da03      	bge.n	8011b0a <_printf_i+0xd2>
 8011b02:	232d      	movs	r3, #45	; 0x2d
 8011b04:	4276      	negs	r6, r6
 8011b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b0a:	485a      	ldr	r0, [pc, #360]	; (8011c74 <_printf_i+0x23c>)
 8011b0c:	230a      	movs	r3, #10
 8011b0e:	e012      	b.n	8011b36 <_printf_i+0xfe>
 8011b10:	682b      	ldr	r3, [r5, #0]
 8011b12:	6820      	ldr	r0, [r4, #0]
 8011b14:	1d19      	adds	r1, r3, #4
 8011b16:	6029      	str	r1, [r5, #0]
 8011b18:	0605      	lsls	r5, r0, #24
 8011b1a:	d501      	bpl.n	8011b20 <_printf_i+0xe8>
 8011b1c:	681e      	ldr	r6, [r3, #0]
 8011b1e:	e002      	b.n	8011b26 <_printf_i+0xee>
 8011b20:	0641      	lsls	r1, r0, #25
 8011b22:	d5fb      	bpl.n	8011b1c <_printf_i+0xe4>
 8011b24:	881e      	ldrh	r6, [r3, #0]
 8011b26:	4853      	ldr	r0, [pc, #332]	; (8011c74 <_printf_i+0x23c>)
 8011b28:	2f6f      	cmp	r7, #111	; 0x6f
 8011b2a:	bf0c      	ite	eq
 8011b2c:	2308      	moveq	r3, #8
 8011b2e:	230a      	movne	r3, #10
 8011b30:	2100      	movs	r1, #0
 8011b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011b36:	6865      	ldr	r5, [r4, #4]
 8011b38:	60a5      	str	r5, [r4, #8]
 8011b3a:	2d00      	cmp	r5, #0
 8011b3c:	bfa2      	ittt	ge
 8011b3e:	6821      	ldrge	r1, [r4, #0]
 8011b40:	f021 0104 	bicge.w	r1, r1, #4
 8011b44:	6021      	strge	r1, [r4, #0]
 8011b46:	b90e      	cbnz	r6, 8011b4c <_printf_i+0x114>
 8011b48:	2d00      	cmp	r5, #0
 8011b4a:	d04b      	beq.n	8011be4 <_printf_i+0x1ac>
 8011b4c:	4615      	mov	r5, r2
 8011b4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011b52:	fb03 6711 	mls	r7, r3, r1, r6
 8011b56:	5dc7      	ldrb	r7, [r0, r7]
 8011b58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011b5c:	4637      	mov	r7, r6
 8011b5e:	42bb      	cmp	r3, r7
 8011b60:	460e      	mov	r6, r1
 8011b62:	d9f4      	bls.n	8011b4e <_printf_i+0x116>
 8011b64:	2b08      	cmp	r3, #8
 8011b66:	d10b      	bne.n	8011b80 <_printf_i+0x148>
 8011b68:	6823      	ldr	r3, [r4, #0]
 8011b6a:	07de      	lsls	r6, r3, #31
 8011b6c:	d508      	bpl.n	8011b80 <_printf_i+0x148>
 8011b6e:	6923      	ldr	r3, [r4, #16]
 8011b70:	6861      	ldr	r1, [r4, #4]
 8011b72:	4299      	cmp	r1, r3
 8011b74:	bfde      	ittt	le
 8011b76:	2330      	movle	r3, #48	; 0x30
 8011b78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011b7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011b80:	1b52      	subs	r2, r2, r5
 8011b82:	6122      	str	r2, [r4, #16]
 8011b84:	f8cd a000 	str.w	sl, [sp]
 8011b88:	464b      	mov	r3, r9
 8011b8a:	aa03      	add	r2, sp, #12
 8011b8c:	4621      	mov	r1, r4
 8011b8e:	4640      	mov	r0, r8
 8011b90:	f7ff fee4 	bl	801195c <_printf_common>
 8011b94:	3001      	adds	r0, #1
 8011b96:	d14a      	bne.n	8011c2e <_printf_i+0x1f6>
 8011b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b9c:	b004      	add	sp, #16
 8011b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ba2:	6823      	ldr	r3, [r4, #0]
 8011ba4:	f043 0320 	orr.w	r3, r3, #32
 8011ba8:	6023      	str	r3, [r4, #0]
 8011baa:	4833      	ldr	r0, [pc, #204]	; (8011c78 <_printf_i+0x240>)
 8011bac:	2778      	movs	r7, #120	; 0x78
 8011bae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011bb2:	6823      	ldr	r3, [r4, #0]
 8011bb4:	6829      	ldr	r1, [r5, #0]
 8011bb6:	061f      	lsls	r7, r3, #24
 8011bb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8011bbc:	d402      	bmi.n	8011bc4 <_printf_i+0x18c>
 8011bbe:	065f      	lsls	r7, r3, #25
 8011bc0:	bf48      	it	mi
 8011bc2:	b2b6      	uxthmi	r6, r6
 8011bc4:	07df      	lsls	r7, r3, #31
 8011bc6:	bf48      	it	mi
 8011bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8011bcc:	6029      	str	r1, [r5, #0]
 8011bce:	bf48      	it	mi
 8011bd0:	6023      	strmi	r3, [r4, #0]
 8011bd2:	b91e      	cbnz	r6, 8011bdc <_printf_i+0x1a4>
 8011bd4:	6823      	ldr	r3, [r4, #0]
 8011bd6:	f023 0320 	bic.w	r3, r3, #32
 8011bda:	6023      	str	r3, [r4, #0]
 8011bdc:	2310      	movs	r3, #16
 8011bde:	e7a7      	b.n	8011b30 <_printf_i+0xf8>
 8011be0:	4824      	ldr	r0, [pc, #144]	; (8011c74 <_printf_i+0x23c>)
 8011be2:	e7e4      	b.n	8011bae <_printf_i+0x176>
 8011be4:	4615      	mov	r5, r2
 8011be6:	e7bd      	b.n	8011b64 <_printf_i+0x12c>
 8011be8:	682b      	ldr	r3, [r5, #0]
 8011bea:	6826      	ldr	r6, [r4, #0]
 8011bec:	6961      	ldr	r1, [r4, #20]
 8011bee:	1d18      	adds	r0, r3, #4
 8011bf0:	6028      	str	r0, [r5, #0]
 8011bf2:	0635      	lsls	r5, r6, #24
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	d501      	bpl.n	8011bfc <_printf_i+0x1c4>
 8011bf8:	6019      	str	r1, [r3, #0]
 8011bfa:	e002      	b.n	8011c02 <_printf_i+0x1ca>
 8011bfc:	0670      	lsls	r0, r6, #25
 8011bfe:	d5fb      	bpl.n	8011bf8 <_printf_i+0x1c0>
 8011c00:	8019      	strh	r1, [r3, #0]
 8011c02:	2300      	movs	r3, #0
 8011c04:	6123      	str	r3, [r4, #16]
 8011c06:	4615      	mov	r5, r2
 8011c08:	e7bc      	b.n	8011b84 <_printf_i+0x14c>
 8011c0a:	682b      	ldr	r3, [r5, #0]
 8011c0c:	1d1a      	adds	r2, r3, #4
 8011c0e:	602a      	str	r2, [r5, #0]
 8011c10:	681d      	ldr	r5, [r3, #0]
 8011c12:	6862      	ldr	r2, [r4, #4]
 8011c14:	2100      	movs	r1, #0
 8011c16:	4628      	mov	r0, r5
 8011c18:	f7ee fb12 	bl	8000240 <memchr>
 8011c1c:	b108      	cbz	r0, 8011c22 <_printf_i+0x1ea>
 8011c1e:	1b40      	subs	r0, r0, r5
 8011c20:	6060      	str	r0, [r4, #4]
 8011c22:	6863      	ldr	r3, [r4, #4]
 8011c24:	6123      	str	r3, [r4, #16]
 8011c26:	2300      	movs	r3, #0
 8011c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c2c:	e7aa      	b.n	8011b84 <_printf_i+0x14c>
 8011c2e:	6923      	ldr	r3, [r4, #16]
 8011c30:	462a      	mov	r2, r5
 8011c32:	4649      	mov	r1, r9
 8011c34:	4640      	mov	r0, r8
 8011c36:	47d0      	blx	sl
 8011c38:	3001      	adds	r0, #1
 8011c3a:	d0ad      	beq.n	8011b98 <_printf_i+0x160>
 8011c3c:	6823      	ldr	r3, [r4, #0]
 8011c3e:	079b      	lsls	r3, r3, #30
 8011c40:	d413      	bmi.n	8011c6a <_printf_i+0x232>
 8011c42:	68e0      	ldr	r0, [r4, #12]
 8011c44:	9b03      	ldr	r3, [sp, #12]
 8011c46:	4298      	cmp	r0, r3
 8011c48:	bfb8      	it	lt
 8011c4a:	4618      	movlt	r0, r3
 8011c4c:	e7a6      	b.n	8011b9c <_printf_i+0x164>
 8011c4e:	2301      	movs	r3, #1
 8011c50:	4632      	mov	r2, r6
 8011c52:	4649      	mov	r1, r9
 8011c54:	4640      	mov	r0, r8
 8011c56:	47d0      	blx	sl
 8011c58:	3001      	adds	r0, #1
 8011c5a:	d09d      	beq.n	8011b98 <_printf_i+0x160>
 8011c5c:	3501      	adds	r5, #1
 8011c5e:	68e3      	ldr	r3, [r4, #12]
 8011c60:	9903      	ldr	r1, [sp, #12]
 8011c62:	1a5b      	subs	r3, r3, r1
 8011c64:	42ab      	cmp	r3, r5
 8011c66:	dcf2      	bgt.n	8011c4e <_printf_i+0x216>
 8011c68:	e7eb      	b.n	8011c42 <_printf_i+0x20a>
 8011c6a:	2500      	movs	r5, #0
 8011c6c:	f104 0619 	add.w	r6, r4, #25
 8011c70:	e7f5      	b.n	8011c5e <_printf_i+0x226>
 8011c72:	bf00      	nop
 8011c74:	08012c61 	.word	0x08012c61
 8011c78:	08012c72 	.word	0x08012c72

08011c7c <__sflush_r>:
 8011c7c:	898a      	ldrh	r2, [r1, #12]
 8011c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c82:	4605      	mov	r5, r0
 8011c84:	0710      	lsls	r0, r2, #28
 8011c86:	460c      	mov	r4, r1
 8011c88:	d458      	bmi.n	8011d3c <__sflush_r+0xc0>
 8011c8a:	684b      	ldr	r3, [r1, #4]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	dc05      	bgt.n	8011c9c <__sflush_r+0x20>
 8011c90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	dc02      	bgt.n	8011c9c <__sflush_r+0x20>
 8011c96:	2000      	movs	r0, #0
 8011c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c9e:	2e00      	cmp	r6, #0
 8011ca0:	d0f9      	beq.n	8011c96 <__sflush_r+0x1a>
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ca8:	682f      	ldr	r7, [r5, #0]
 8011caa:	6a21      	ldr	r1, [r4, #32]
 8011cac:	602b      	str	r3, [r5, #0]
 8011cae:	d032      	beq.n	8011d16 <__sflush_r+0x9a>
 8011cb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011cb2:	89a3      	ldrh	r3, [r4, #12]
 8011cb4:	075a      	lsls	r2, r3, #29
 8011cb6:	d505      	bpl.n	8011cc4 <__sflush_r+0x48>
 8011cb8:	6863      	ldr	r3, [r4, #4]
 8011cba:	1ac0      	subs	r0, r0, r3
 8011cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011cbe:	b10b      	cbz	r3, 8011cc4 <__sflush_r+0x48>
 8011cc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011cc2:	1ac0      	subs	r0, r0, r3
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	4602      	mov	r2, r0
 8011cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cca:	6a21      	ldr	r1, [r4, #32]
 8011ccc:	4628      	mov	r0, r5
 8011cce:	47b0      	blx	r6
 8011cd0:	1c43      	adds	r3, r0, #1
 8011cd2:	89a3      	ldrh	r3, [r4, #12]
 8011cd4:	d106      	bne.n	8011ce4 <__sflush_r+0x68>
 8011cd6:	6829      	ldr	r1, [r5, #0]
 8011cd8:	291d      	cmp	r1, #29
 8011cda:	d82b      	bhi.n	8011d34 <__sflush_r+0xb8>
 8011cdc:	4a29      	ldr	r2, [pc, #164]	; (8011d84 <__sflush_r+0x108>)
 8011cde:	410a      	asrs	r2, r1
 8011ce0:	07d6      	lsls	r6, r2, #31
 8011ce2:	d427      	bmi.n	8011d34 <__sflush_r+0xb8>
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	6062      	str	r2, [r4, #4]
 8011ce8:	04d9      	lsls	r1, r3, #19
 8011cea:	6922      	ldr	r2, [r4, #16]
 8011cec:	6022      	str	r2, [r4, #0]
 8011cee:	d504      	bpl.n	8011cfa <__sflush_r+0x7e>
 8011cf0:	1c42      	adds	r2, r0, #1
 8011cf2:	d101      	bne.n	8011cf8 <__sflush_r+0x7c>
 8011cf4:	682b      	ldr	r3, [r5, #0]
 8011cf6:	b903      	cbnz	r3, 8011cfa <__sflush_r+0x7e>
 8011cf8:	6560      	str	r0, [r4, #84]	; 0x54
 8011cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cfc:	602f      	str	r7, [r5, #0]
 8011cfe:	2900      	cmp	r1, #0
 8011d00:	d0c9      	beq.n	8011c96 <__sflush_r+0x1a>
 8011d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d06:	4299      	cmp	r1, r3
 8011d08:	d002      	beq.n	8011d10 <__sflush_r+0x94>
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	f7ff fb3e 	bl	801138c <_free_r>
 8011d10:	2000      	movs	r0, #0
 8011d12:	6360      	str	r0, [r4, #52]	; 0x34
 8011d14:	e7c0      	b.n	8011c98 <__sflush_r+0x1c>
 8011d16:	2301      	movs	r3, #1
 8011d18:	4628      	mov	r0, r5
 8011d1a:	47b0      	blx	r6
 8011d1c:	1c41      	adds	r1, r0, #1
 8011d1e:	d1c8      	bne.n	8011cb2 <__sflush_r+0x36>
 8011d20:	682b      	ldr	r3, [r5, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d0c5      	beq.n	8011cb2 <__sflush_r+0x36>
 8011d26:	2b1d      	cmp	r3, #29
 8011d28:	d001      	beq.n	8011d2e <__sflush_r+0xb2>
 8011d2a:	2b16      	cmp	r3, #22
 8011d2c:	d101      	bne.n	8011d32 <__sflush_r+0xb6>
 8011d2e:	602f      	str	r7, [r5, #0]
 8011d30:	e7b1      	b.n	8011c96 <__sflush_r+0x1a>
 8011d32:	89a3      	ldrh	r3, [r4, #12]
 8011d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d38:	81a3      	strh	r3, [r4, #12]
 8011d3a:	e7ad      	b.n	8011c98 <__sflush_r+0x1c>
 8011d3c:	690f      	ldr	r7, [r1, #16]
 8011d3e:	2f00      	cmp	r7, #0
 8011d40:	d0a9      	beq.n	8011c96 <__sflush_r+0x1a>
 8011d42:	0793      	lsls	r3, r2, #30
 8011d44:	680e      	ldr	r6, [r1, #0]
 8011d46:	bf08      	it	eq
 8011d48:	694b      	ldreq	r3, [r1, #20]
 8011d4a:	600f      	str	r7, [r1, #0]
 8011d4c:	bf18      	it	ne
 8011d4e:	2300      	movne	r3, #0
 8011d50:	eba6 0807 	sub.w	r8, r6, r7
 8011d54:	608b      	str	r3, [r1, #8]
 8011d56:	f1b8 0f00 	cmp.w	r8, #0
 8011d5a:	dd9c      	ble.n	8011c96 <__sflush_r+0x1a>
 8011d5c:	6a21      	ldr	r1, [r4, #32]
 8011d5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d60:	4643      	mov	r3, r8
 8011d62:	463a      	mov	r2, r7
 8011d64:	4628      	mov	r0, r5
 8011d66:	47b0      	blx	r6
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	dc06      	bgt.n	8011d7a <__sflush_r+0xfe>
 8011d6c:	89a3      	ldrh	r3, [r4, #12]
 8011d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d72:	81a3      	strh	r3, [r4, #12]
 8011d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d78:	e78e      	b.n	8011c98 <__sflush_r+0x1c>
 8011d7a:	4407      	add	r7, r0
 8011d7c:	eba8 0800 	sub.w	r8, r8, r0
 8011d80:	e7e9      	b.n	8011d56 <__sflush_r+0xda>
 8011d82:	bf00      	nop
 8011d84:	dfbffffe 	.word	0xdfbffffe

08011d88 <_fflush_r>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	690b      	ldr	r3, [r1, #16]
 8011d8c:	4605      	mov	r5, r0
 8011d8e:	460c      	mov	r4, r1
 8011d90:	b913      	cbnz	r3, 8011d98 <_fflush_r+0x10>
 8011d92:	2500      	movs	r5, #0
 8011d94:	4628      	mov	r0, r5
 8011d96:	bd38      	pop	{r3, r4, r5, pc}
 8011d98:	b118      	cbz	r0, 8011da2 <_fflush_r+0x1a>
 8011d9a:	6a03      	ldr	r3, [r0, #32]
 8011d9c:	b90b      	cbnz	r3, 8011da2 <_fflush_r+0x1a>
 8011d9e:	f7ff f9fb 	bl	8011198 <__sinit>
 8011da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d0f3      	beq.n	8011d92 <_fflush_r+0xa>
 8011daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011dac:	07d0      	lsls	r0, r2, #31
 8011dae:	d404      	bmi.n	8011dba <_fflush_r+0x32>
 8011db0:	0599      	lsls	r1, r3, #22
 8011db2:	d402      	bmi.n	8011dba <_fflush_r+0x32>
 8011db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011db6:	f7ff fae6 	bl	8011386 <__retarget_lock_acquire_recursive>
 8011dba:	4628      	mov	r0, r5
 8011dbc:	4621      	mov	r1, r4
 8011dbe:	f7ff ff5d 	bl	8011c7c <__sflush_r>
 8011dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011dc4:	07da      	lsls	r2, r3, #31
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	d4e4      	bmi.n	8011d94 <_fflush_r+0xc>
 8011dca:	89a3      	ldrh	r3, [r4, #12]
 8011dcc:	059b      	lsls	r3, r3, #22
 8011dce:	d4e1      	bmi.n	8011d94 <_fflush_r+0xc>
 8011dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dd2:	f7ff fad9 	bl	8011388 <__retarget_lock_release_recursive>
 8011dd6:	e7dd      	b.n	8011d94 <_fflush_r+0xc>

08011dd8 <__sread>:
 8011dd8:	b510      	push	{r4, lr}
 8011dda:	460c      	mov	r4, r1
 8011ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011de0:	f000 f9c2 	bl	8012168 <_read_r>
 8011de4:	2800      	cmp	r0, #0
 8011de6:	bfab      	itete	ge
 8011de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011dea:	89a3      	ldrhlt	r3, [r4, #12]
 8011dec:	181b      	addge	r3, r3, r0
 8011dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011df2:	bfac      	ite	ge
 8011df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011df6:	81a3      	strhlt	r3, [r4, #12]
 8011df8:	bd10      	pop	{r4, pc}

08011dfa <__swrite>:
 8011dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dfe:	461f      	mov	r7, r3
 8011e00:	898b      	ldrh	r3, [r1, #12]
 8011e02:	05db      	lsls	r3, r3, #23
 8011e04:	4605      	mov	r5, r0
 8011e06:	460c      	mov	r4, r1
 8011e08:	4616      	mov	r6, r2
 8011e0a:	d505      	bpl.n	8011e18 <__swrite+0x1e>
 8011e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e10:	2302      	movs	r3, #2
 8011e12:	2200      	movs	r2, #0
 8011e14:	f000 f996 	bl	8012144 <_lseek_r>
 8011e18:	89a3      	ldrh	r3, [r4, #12]
 8011e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e22:	81a3      	strh	r3, [r4, #12]
 8011e24:	4632      	mov	r2, r6
 8011e26:	463b      	mov	r3, r7
 8011e28:	4628      	mov	r0, r5
 8011e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2e:	f000 b9ad 	b.w	801218c <_write_r>

08011e32 <__sseek>:
 8011e32:	b510      	push	{r4, lr}
 8011e34:	460c      	mov	r4, r1
 8011e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e3a:	f000 f983 	bl	8012144 <_lseek_r>
 8011e3e:	1c43      	adds	r3, r0, #1
 8011e40:	89a3      	ldrh	r3, [r4, #12]
 8011e42:	bf15      	itete	ne
 8011e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8011e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011e4e:	81a3      	strheq	r3, [r4, #12]
 8011e50:	bf18      	it	ne
 8011e52:	81a3      	strhne	r3, [r4, #12]
 8011e54:	bd10      	pop	{r4, pc}

08011e56 <__sclose>:
 8011e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e5a:	f000 b941 	b.w	80120e0 <_close_r>

08011e5e <_realloc_r>:
 8011e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e62:	4680      	mov	r8, r0
 8011e64:	4614      	mov	r4, r2
 8011e66:	460e      	mov	r6, r1
 8011e68:	b921      	cbnz	r1, 8011e74 <_realloc_r+0x16>
 8011e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e6e:	4611      	mov	r1, r2
 8011e70:	f7ff b846 	b.w	8010f00 <_malloc_r>
 8011e74:	b92a      	cbnz	r2, 8011e82 <_realloc_r+0x24>
 8011e76:	f7ff fa89 	bl	801138c <_free_r>
 8011e7a:	4625      	mov	r5, r4
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e82:	f000 f9a3 	bl	80121cc <_malloc_usable_size_r>
 8011e86:	4284      	cmp	r4, r0
 8011e88:	4607      	mov	r7, r0
 8011e8a:	d802      	bhi.n	8011e92 <_realloc_r+0x34>
 8011e8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e90:	d812      	bhi.n	8011eb8 <_realloc_r+0x5a>
 8011e92:	4621      	mov	r1, r4
 8011e94:	4640      	mov	r0, r8
 8011e96:	f7ff f833 	bl	8010f00 <_malloc_r>
 8011e9a:	4605      	mov	r5, r0
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d0ed      	beq.n	8011e7c <_realloc_r+0x1e>
 8011ea0:	42bc      	cmp	r4, r7
 8011ea2:	4622      	mov	r2, r4
 8011ea4:	4631      	mov	r1, r6
 8011ea6:	bf28      	it	cs
 8011ea8:	463a      	movcs	r2, r7
 8011eaa:	f000 f981 	bl	80121b0 <memcpy>
 8011eae:	4631      	mov	r1, r6
 8011eb0:	4640      	mov	r0, r8
 8011eb2:	f7ff fa6b 	bl	801138c <_free_r>
 8011eb6:	e7e1      	b.n	8011e7c <_realloc_r+0x1e>
 8011eb8:	4635      	mov	r5, r6
 8011eba:	e7df      	b.n	8011e7c <_realloc_r+0x1e>

08011ebc <__swbuf_r>:
 8011ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ebe:	460e      	mov	r6, r1
 8011ec0:	4614      	mov	r4, r2
 8011ec2:	4605      	mov	r5, r0
 8011ec4:	b118      	cbz	r0, 8011ece <__swbuf_r+0x12>
 8011ec6:	6a03      	ldr	r3, [r0, #32]
 8011ec8:	b90b      	cbnz	r3, 8011ece <__swbuf_r+0x12>
 8011eca:	f7ff f965 	bl	8011198 <__sinit>
 8011ece:	69a3      	ldr	r3, [r4, #24]
 8011ed0:	60a3      	str	r3, [r4, #8]
 8011ed2:	89a3      	ldrh	r3, [r4, #12]
 8011ed4:	071a      	lsls	r2, r3, #28
 8011ed6:	d525      	bpl.n	8011f24 <__swbuf_r+0x68>
 8011ed8:	6923      	ldr	r3, [r4, #16]
 8011eda:	b31b      	cbz	r3, 8011f24 <__swbuf_r+0x68>
 8011edc:	6823      	ldr	r3, [r4, #0]
 8011ede:	6922      	ldr	r2, [r4, #16]
 8011ee0:	1a98      	subs	r0, r3, r2
 8011ee2:	6963      	ldr	r3, [r4, #20]
 8011ee4:	b2f6      	uxtb	r6, r6
 8011ee6:	4283      	cmp	r3, r0
 8011ee8:	4637      	mov	r7, r6
 8011eea:	dc04      	bgt.n	8011ef6 <__swbuf_r+0x3a>
 8011eec:	4621      	mov	r1, r4
 8011eee:	4628      	mov	r0, r5
 8011ef0:	f7ff ff4a 	bl	8011d88 <_fflush_r>
 8011ef4:	b9e0      	cbnz	r0, 8011f30 <__swbuf_r+0x74>
 8011ef6:	68a3      	ldr	r3, [r4, #8]
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	60a3      	str	r3, [r4, #8]
 8011efc:	6823      	ldr	r3, [r4, #0]
 8011efe:	1c5a      	adds	r2, r3, #1
 8011f00:	6022      	str	r2, [r4, #0]
 8011f02:	701e      	strb	r6, [r3, #0]
 8011f04:	6962      	ldr	r2, [r4, #20]
 8011f06:	1c43      	adds	r3, r0, #1
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d004      	beq.n	8011f16 <__swbuf_r+0x5a>
 8011f0c:	89a3      	ldrh	r3, [r4, #12]
 8011f0e:	07db      	lsls	r3, r3, #31
 8011f10:	d506      	bpl.n	8011f20 <__swbuf_r+0x64>
 8011f12:	2e0a      	cmp	r6, #10
 8011f14:	d104      	bne.n	8011f20 <__swbuf_r+0x64>
 8011f16:	4621      	mov	r1, r4
 8011f18:	4628      	mov	r0, r5
 8011f1a:	f7ff ff35 	bl	8011d88 <_fflush_r>
 8011f1e:	b938      	cbnz	r0, 8011f30 <__swbuf_r+0x74>
 8011f20:	4638      	mov	r0, r7
 8011f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f24:	4621      	mov	r1, r4
 8011f26:	4628      	mov	r0, r5
 8011f28:	f000 f806 	bl	8011f38 <__swsetup_r>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d0d5      	beq.n	8011edc <__swbuf_r+0x20>
 8011f30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011f34:	e7f4      	b.n	8011f20 <__swbuf_r+0x64>
	...

08011f38 <__swsetup_r>:
 8011f38:	b538      	push	{r3, r4, r5, lr}
 8011f3a:	4b2a      	ldr	r3, [pc, #168]	; (8011fe4 <__swsetup_r+0xac>)
 8011f3c:	4605      	mov	r5, r0
 8011f3e:	6818      	ldr	r0, [r3, #0]
 8011f40:	460c      	mov	r4, r1
 8011f42:	b118      	cbz	r0, 8011f4c <__swsetup_r+0x14>
 8011f44:	6a03      	ldr	r3, [r0, #32]
 8011f46:	b90b      	cbnz	r3, 8011f4c <__swsetup_r+0x14>
 8011f48:	f7ff f926 	bl	8011198 <__sinit>
 8011f4c:	89a3      	ldrh	r3, [r4, #12]
 8011f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011f52:	0718      	lsls	r0, r3, #28
 8011f54:	d422      	bmi.n	8011f9c <__swsetup_r+0x64>
 8011f56:	06d9      	lsls	r1, r3, #27
 8011f58:	d407      	bmi.n	8011f6a <__swsetup_r+0x32>
 8011f5a:	2309      	movs	r3, #9
 8011f5c:	602b      	str	r3, [r5, #0]
 8011f5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011f62:	81a3      	strh	r3, [r4, #12]
 8011f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f68:	e034      	b.n	8011fd4 <__swsetup_r+0x9c>
 8011f6a:	0758      	lsls	r0, r3, #29
 8011f6c:	d512      	bpl.n	8011f94 <__swsetup_r+0x5c>
 8011f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f70:	b141      	cbz	r1, 8011f84 <__swsetup_r+0x4c>
 8011f72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f76:	4299      	cmp	r1, r3
 8011f78:	d002      	beq.n	8011f80 <__swsetup_r+0x48>
 8011f7a:	4628      	mov	r0, r5
 8011f7c:	f7ff fa06 	bl	801138c <_free_r>
 8011f80:	2300      	movs	r3, #0
 8011f82:	6363      	str	r3, [r4, #52]	; 0x34
 8011f84:	89a3      	ldrh	r3, [r4, #12]
 8011f86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011f8a:	81a3      	strh	r3, [r4, #12]
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	6063      	str	r3, [r4, #4]
 8011f90:	6923      	ldr	r3, [r4, #16]
 8011f92:	6023      	str	r3, [r4, #0]
 8011f94:	89a3      	ldrh	r3, [r4, #12]
 8011f96:	f043 0308 	orr.w	r3, r3, #8
 8011f9a:	81a3      	strh	r3, [r4, #12]
 8011f9c:	6923      	ldr	r3, [r4, #16]
 8011f9e:	b94b      	cbnz	r3, 8011fb4 <__swsetup_r+0x7c>
 8011fa0:	89a3      	ldrh	r3, [r4, #12]
 8011fa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011faa:	d003      	beq.n	8011fb4 <__swsetup_r+0x7c>
 8011fac:	4621      	mov	r1, r4
 8011fae:	4628      	mov	r0, r5
 8011fb0:	f000 f840 	bl	8012034 <__smakebuf_r>
 8011fb4:	89a0      	ldrh	r0, [r4, #12]
 8011fb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011fba:	f010 0301 	ands.w	r3, r0, #1
 8011fbe:	d00a      	beq.n	8011fd6 <__swsetup_r+0x9e>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	60a3      	str	r3, [r4, #8]
 8011fc4:	6963      	ldr	r3, [r4, #20]
 8011fc6:	425b      	negs	r3, r3
 8011fc8:	61a3      	str	r3, [r4, #24]
 8011fca:	6923      	ldr	r3, [r4, #16]
 8011fcc:	b943      	cbnz	r3, 8011fe0 <__swsetup_r+0xa8>
 8011fce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011fd2:	d1c4      	bne.n	8011f5e <__swsetup_r+0x26>
 8011fd4:	bd38      	pop	{r3, r4, r5, pc}
 8011fd6:	0781      	lsls	r1, r0, #30
 8011fd8:	bf58      	it	pl
 8011fda:	6963      	ldrpl	r3, [r4, #20]
 8011fdc:	60a3      	str	r3, [r4, #8]
 8011fde:	e7f4      	b.n	8011fca <__swsetup_r+0x92>
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	e7f7      	b.n	8011fd4 <__swsetup_r+0x9c>
 8011fe4:	20000168 	.word	0x20000168

08011fe8 <__swhatbuf_r>:
 8011fe8:	b570      	push	{r4, r5, r6, lr}
 8011fea:	460c      	mov	r4, r1
 8011fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ff0:	2900      	cmp	r1, #0
 8011ff2:	b096      	sub	sp, #88	; 0x58
 8011ff4:	4615      	mov	r5, r2
 8011ff6:	461e      	mov	r6, r3
 8011ff8:	da0d      	bge.n	8012016 <__swhatbuf_r+0x2e>
 8011ffa:	89a3      	ldrh	r3, [r4, #12]
 8011ffc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012000:	f04f 0100 	mov.w	r1, #0
 8012004:	bf0c      	ite	eq
 8012006:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801200a:	2340      	movne	r3, #64	; 0x40
 801200c:	2000      	movs	r0, #0
 801200e:	6031      	str	r1, [r6, #0]
 8012010:	602b      	str	r3, [r5, #0]
 8012012:	b016      	add	sp, #88	; 0x58
 8012014:	bd70      	pop	{r4, r5, r6, pc}
 8012016:	466a      	mov	r2, sp
 8012018:	f000 f872 	bl	8012100 <_fstat_r>
 801201c:	2800      	cmp	r0, #0
 801201e:	dbec      	blt.n	8011ffa <__swhatbuf_r+0x12>
 8012020:	9901      	ldr	r1, [sp, #4]
 8012022:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012026:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801202a:	4259      	negs	r1, r3
 801202c:	4159      	adcs	r1, r3
 801202e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012032:	e7eb      	b.n	801200c <__swhatbuf_r+0x24>

08012034 <__smakebuf_r>:
 8012034:	898b      	ldrh	r3, [r1, #12]
 8012036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012038:	079d      	lsls	r5, r3, #30
 801203a:	4606      	mov	r6, r0
 801203c:	460c      	mov	r4, r1
 801203e:	d507      	bpl.n	8012050 <__smakebuf_r+0x1c>
 8012040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012044:	6023      	str	r3, [r4, #0]
 8012046:	6123      	str	r3, [r4, #16]
 8012048:	2301      	movs	r3, #1
 801204a:	6163      	str	r3, [r4, #20]
 801204c:	b002      	add	sp, #8
 801204e:	bd70      	pop	{r4, r5, r6, pc}
 8012050:	ab01      	add	r3, sp, #4
 8012052:	466a      	mov	r2, sp
 8012054:	f7ff ffc8 	bl	8011fe8 <__swhatbuf_r>
 8012058:	9900      	ldr	r1, [sp, #0]
 801205a:	4605      	mov	r5, r0
 801205c:	4630      	mov	r0, r6
 801205e:	f7fe ff4f 	bl	8010f00 <_malloc_r>
 8012062:	b948      	cbnz	r0, 8012078 <__smakebuf_r+0x44>
 8012064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012068:	059a      	lsls	r2, r3, #22
 801206a:	d4ef      	bmi.n	801204c <__smakebuf_r+0x18>
 801206c:	f023 0303 	bic.w	r3, r3, #3
 8012070:	f043 0302 	orr.w	r3, r3, #2
 8012074:	81a3      	strh	r3, [r4, #12]
 8012076:	e7e3      	b.n	8012040 <__smakebuf_r+0xc>
 8012078:	89a3      	ldrh	r3, [r4, #12]
 801207a:	6020      	str	r0, [r4, #0]
 801207c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012080:	81a3      	strh	r3, [r4, #12]
 8012082:	9b00      	ldr	r3, [sp, #0]
 8012084:	6163      	str	r3, [r4, #20]
 8012086:	9b01      	ldr	r3, [sp, #4]
 8012088:	6120      	str	r0, [r4, #16]
 801208a:	b15b      	cbz	r3, 80120a4 <__smakebuf_r+0x70>
 801208c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012090:	4630      	mov	r0, r6
 8012092:	f000 f847 	bl	8012124 <_isatty_r>
 8012096:	b128      	cbz	r0, 80120a4 <__smakebuf_r+0x70>
 8012098:	89a3      	ldrh	r3, [r4, #12]
 801209a:	f023 0303 	bic.w	r3, r3, #3
 801209e:	f043 0301 	orr.w	r3, r3, #1
 80120a2:	81a3      	strh	r3, [r4, #12]
 80120a4:	89a3      	ldrh	r3, [r4, #12]
 80120a6:	431d      	orrs	r5, r3
 80120a8:	81a5      	strh	r5, [r4, #12]
 80120aa:	e7cf      	b.n	801204c <__smakebuf_r+0x18>

080120ac <memmove>:
 80120ac:	4288      	cmp	r0, r1
 80120ae:	b510      	push	{r4, lr}
 80120b0:	eb01 0402 	add.w	r4, r1, r2
 80120b4:	d902      	bls.n	80120bc <memmove+0x10>
 80120b6:	4284      	cmp	r4, r0
 80120b8:	4623      	mov	r3, r4
 80120ba:	d807      	bhi.n	80120cc <memmove+0x20>
 80120bc:	1e43      	subs	r3, r0, #1
 80120be:	42a1      	cmp	r1, r4
 80120c0:	d008      	beq.n	80120d4 <memmove+0x28>
 80120c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80120ca:	e7f8      	b.n	80120be <memmove+0x12>
 80120cc:	4402      	add	r2, r0
 80120ce:	4601      	mov	r1, r0
 80120d0:	428a      	cmp	r2, r1
 80120d2:	d100      	bne.n	80120d6 <memmove+0x2a>
 80120d4:	bd10      	pop	{r4, pc}
 80120d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120de:	e7f7      	b.n	80120d0 <memmove+0x24>

080120e0 <_close_r>:
 80120e0:	b538      	push	{r3, r4, r5, lr}
 80120e2:	4d06      	ldr	r5, [pc, #24]	; (80120fc <_close_r+0x1c>)
 80120e4:	2300      	movs	r3, #0
 80120e6:	4604      	mov	r4, r0
 80120e8:	4608      	mov	r0, r1
 80120ea:	602b      	str	r3, [r5, #0]
 80120ec:	f7ef fca3 	bl	8001a36 <_close>
 80120f0:	1c43      	adds	r3, r0, #1
 80120f2:	d102      	bne.n	80120fa <_close_r+0x1a>
 80120f4:	682b      	ldr	r3, [r5, #0]
 80120f6:	b103      	cbz	r3, 80120fa <_close_r+0x1a>
 80120f8:	6023      	str	r3, [r4, #0]
 80120fa:	bd38      	pop	{r3, r4, r5, pc}
 80120fc:	20014ee0 	.word	0x20014ee0

08012100 <_fstat_r>:
 8012100:	b538      	push	{r3, r4, r5, lr}
 8012102:	4d07      	ldr	r5, [pc, #28]	; (8012120 <_fstat_r+0x20>)
 8012104:	2300      	movs	r3, #0
 8012106:	4604      	mov	r4, r0
 8012108:	4608      	mov	r0, r1
 801210a:	4611      	mov	r1, r2
 801210c:	602b      	str	r3, [r5, #0]
 801210e:	f7ef fc9e 	bl	8001a4e <_fstat>
 8012112:	1c43      	adds	r3, r0, #1
 8012114:	d102      	bne.n	801211c <_fstat_r+0x1c>
 8012116:	682b      	ldr	r3, [r5, #0]
 8012118:	b103      	cbz	r3, 801211c <_fstat_r+0x1c>
 801211a:	6023      	str	r3, [r4, #0]
 801211c:	bd38      	pop	{r3, r4, r5, pc}
 801211e:	bf00      	nop
 8012120:	20014ee0 	.word	0x20014ee0

08012124 <_isatty_r>:
 8012124:	b538      	push	{r3, r4, r5, lr}
 8012126:	4d06      	ldr	r5, [pc, #24]	; (8012140 <_isatty_r+0x1c>)
 8012128:	2300      	movs	r3, #0
 801212a:	4604      	mov	r4, r0
 801212c:	4608      	mov	r0, r1
 801212e:	602b      	str	r3, [r5, #0]
 8012130:	f7ef fc9d 	bl	8001a6e <_isatty>
 8012134:	1c43      	adds	r3, r0, #1
 8012136:	d102      	bne.n	801213e <_isatty_r+0x1a>
 8012138:	682b      	ldr	r3, [r5, #0]
 801213a:	b103      	cbz	r3, 801213e <_isatty_r+0x1a>
 801213c:	6023      	str	r3, [r4, #0]
 801213e:	bd38      	pop	{r3, r4, r5, pc}
 8012140:	20014ee0 	.word	0x20014ee0

08012144 <_lseek_r>:
 8012144:	b538      	push	{r3, r4, r5, lr}
 8012146:	4d07      	ldr	r5, [pc, #28]	; (8012164 <_lseek_r+0x20>)
 8012148:	4604      	mov	r4, r0
 801214a:	4608      	mov	r0, r1
 801214c:	4611      	mov	r1, r2
 801214e:	2200      	movs	r2, #0
 8012150:	602a      	str	r2, [r5, #0]
 8012152:	461a      	mov	r2, r3
 8012154:	f7ef fc96 	bl	8001a84 <_lseek>
 8012158:	1c43      	adds	r3, r0, #1
 801215a:	d102      	bne.n	8012162 <_lseek_r+0x1e>
 801215c:	682b      	ldr	r3, [r5, #0]
 801215e:	b103      	cbz	r3, 8012162 <_lseek_r+0x1e>
 8012160:	6023      	str	r3, [r4, #0]
 8012162:	bd38      	pop	{r3, r4, r5, pc}
 8012164:	20014ee0 	.word	0x20014ee0

08012168 <_read_r>:
 8012168:	b538      	push	{r3, r4, r5, lr}
 801216a:	4d07      	ldr	r5, [pc, #28]	; (8012188 <_read_r+0x20>)
 801216c:	4604      	mov	r4, r0
 801216e:	4608      	mov	r0, r1
 8012170:	4611      	mov	r1, r2
 8012172:	2200      	movs	r2, #0
 8012174:	602a      	str	r2, [r5, #0]
 8012176:	461a      	mov	r2, r3
 8012178:	f7ef fc24 	bl	80019c4 <_read>
 801217c:	1c43      	adds	r3, r0, #1
 801217e:	d102      	bne.n	8012186 <_read_r+0x1e>
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	b103      	cbz	r3, 8012186 <_read_r+0x1e>
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	20014ee0 	.word	0x20014ee0

0801218c <_write_r>:
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	4d07      	ldr	r5, [pc, #28]	; (80121ac <_write_r+0x20>)
 8012190:	4604      	mov	r4, r0
 8012192:	4608      	mov	r0, r1
 8012194:	4611      	mov	r1, r2
 8012196:	2200      	movs	r2, #0
 8012198:	602a      	str	r2, [r5, #0]
 801219a:	461a      	mov	r2, r3
 801219c:	f7ef fc2f 	bl	80019fe <_write>
 80121a0:	1c43      	adds	r3, r0, #1
 80121a2:	d102      	bne.n	80121aa <_write_r+0x1e>
 80121a4:	682b      	ldr	r3, [r5, #0]
 80121a6:	b103      	cbz	r3, 80121aa <_write_r+0x1e>
 80121a8:	6023      	str	r3, [r4, #0]
 80121aa:	bd38      	pop	{r3, r4, r5, pc}
 80121ac:	20014ee0 	.word	0x20014ee0

080121b0 <memcpy>:
 80121b0:	440a      	add	r2, r1
 80121b2:	4291      	cmp	r1, r2
 80121b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80121b8:	d100      	bne.n	80121bc <memcpy+0xc>
 80121ba:	4770      	bx	lr
 80121bc:	b510      	push	{r4, lr}
 80121be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121c6:	4291      	cmp	r1, r2
 80121c8:	d1f9      	bne.n	80121be <memcpy+0xe>
 80121ca:	bd10      	pop	{r4, pc}

080121cc <_malloc_usable_size_r>:
 80121cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121d0:	1f18      	subs	r0, r3, #4
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	bfbc      	itt	lt
 80121d6:	580b      	ldrlt	r3, [r1, r0]
 80121d8:	18c0      	addlt	r0, r0, r3
 80121da:	4770      	bx	lr

080121dc <_init>:
 80121dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121de:	bf00      	nop
 80121e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121e2:	bc08      	pop	{r3}
 80121e4:	469e      	mov	lr, r3
 80121e6:	4770      	bx	lr

080121e8 <_fini>:
 80121e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ea:	bf00      	nop
 80121ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ee:	bc08      	pop	{r3}
 80121f0:	469e      	mov	lr, r3
 80121f2:	4770      	bx	lr
