
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011484  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08011684  08011684  00021684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ee4  08011ee4  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  08011ee4  08011ee4  00021ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011eec  08011eec  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011eec  08011eec  00021eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ef0  08011ef0  00021ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08011ef4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000446c  20000168  0801205c  00030168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045d4  0801205c  000345d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022e0f  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005193  00000000  00000000  00052fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  00058180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001567  00000000  00000000  00059d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e885  00000000  00000000  0005b2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002663f  00000000  00000000  00089b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101f4f  00000000  00000000  000b01bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007df4  00000000  00000000  001b210c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001b9f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	0801166c 	.word	0x0801166c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	0801166c 	.word	0x0801166c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b0cb      	sub	sp, #300	; 0x12c
 80005e0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fa7c 	bl	8001ade <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 fa91 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fbe9 	bl	8000dc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fbc1 	bl	8000d74 <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 faf3 	bl	8000bdc <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fb67 	bl	8000cc8 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fb8b 	bl	8000d14 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f00a f871 	bl	800a6e4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00f f90f 	bl	800f824 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000606:	f000 fb1f 	bl	8000c48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DS1307_Init(&hi2c1);
 800060a:	48bd      	ldr	r0, [pc, #756]	; (8000900 <main+0x324>)
 800060c:	f001 f978 	bl	8001900 <DS1307_Init>
		RESET_STATE,
		POWER_OFF
	} state_t;

	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint32_t byteswritten; /* File write/read counts */
	uint32_t buffer_emptyings = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t total_size = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8000622:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000626:	2b0c      	cmp	r3, #12
 8000628:	f200 823c 	bhi.w	8000aa4 <main+0x4c8>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <main+0x58>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000669 	.word	0x08000669
 8000638:	080006a1 	.word	0x080006a1
 800063c:	0800072d 	.word	0x0800072d
 8000640:	08000859 	.word	0x08000859
 8000644:	08000ab9 	.word	0x08000ab9
 8000648:	08000ab9 	.word	0x08000ab9
 800064c:	08000883 	.word	0x08000883
 8000650:	08000ab9 	.word	0x08000ab9
 8000654:	080008cf 	.word	0x080008cf
 8000658:	08000ab9 	.word	0x08000ab9
 800065c:	0800098d 	.word	0x0800098d
 8000660:	08000a1d 	.word	0x08000a1d
 8000664:	08000a79 	.word	0x08000a79
		 * Transition out:
		 * 	If power switch is set to on position -> PERIFPHERAL_INIT
		 * 	else (power switch is set to off) -> POWER_OFF
		 */
		case TURN_ON:
			MX_DMA_Init();
 8000668:	f000 fb84 	bl	8000d74 <MX_DMA_Init>
			MX_SDMMC1_SD_Init();
 800066c:	f000 fb2c 	bl	8000cc8 <MX_SDMMC1_SD_Init>
			MX_FATFS_Init();
 8000670:	f00a f838 	bl	800a6e4 <MX_FATFS_Init>
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000678:	48a2      	ldr	r0, [pc, #648]	; (8000904 <main+0x328>)
 800067a:	f002 ff19 	bl	80034b0 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4ba1      	ldr	r3, [pc, #644]	; (8000908 <main+0x32c>)
 8000684:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 8000686:	4ba0      	ldr	r3, [pc, #640]	; (8000908 <main+0x32c>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <main+0xb6>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <main+0xb8>
 8000692:	230c      	movs	r3, #12
 8000694:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			NEW_LOG_FLAG = 0;
 8000698:	4b9c      	ldr	r3, [pc, #624]	; (800090c <main+0x330>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e210      	b.n	8000ac2 <main+0x4e6>
		 * Transition out:
		 * 	Always -> CREATE_LOG_FILE
		 */
		case PERIPHERAL_INIT:
			// Reset both buffers
			data_buffer[0][0] = '\00';
 80006a0:	4b9b      	ldr	r3, [pc, #620]	; (8000910 <main+0x334>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
			data_buffer[1][0] = '\00';
 80006a6:	4b9a      	ldr	r3, [pc, #616]	; (8000910 <main+0x334>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	2200      	movs	r2, #0
 80006ae:	715a      	strb	r2, [r3, #5]
			buffer_fill_level[0] = 0;
 80006b0:	4b98      	ldr	r3, [pc, #608]	; (8000914 <main+0x338>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[1] = 0;
 80006b6:	4b97      	ldr	r3, [pc, #604]	; (8000914 <main+0x338>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	705a      	strb	r2, [r3, #1]
			current_buffer = 0;
 80006bc:	4b96      	ldr	r3, [pc, #600]	; (8000918 <main+0x33c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

			// Turn Red LED on (Green turns off)
			printf("Initializing Peripherals...\r\n");
 80006c2:	4896      	ldr	r0, [pc, #600]	; (800091c <main+0x340>)
 80006c4:	f010 f84c 	bl	8010760 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4894      	ldr	r0, [pc, #592]	; (8000920 <main+0x344>)
 80006d0:	f002 ff06 	bl	80034e0 <HAL_GPIO_WritePin>

			// Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80006d4:	4893      	ldr	r0, [pc, #588]	; (8000924 <main+0x348>)
 80006d6:	f001 fc6b 	bl	8001fb0 <HAL_CAN_Start>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <main+0x10e>
				printf("CAN could not start.\r\n");
 80006e0:	4891      	ldr	r0, [pc, #580]	; (8000928 <main+0x34c>)
 80006e2:	f010 f83d 	bl	8010760 <puts>
				Error_Handler();
 80006e6:	f000 fd5f 	bl	80011a8 <Error_Handler>
			}
			if (CAN_Filter_Config() != HAL_OK) {
 80006ea:	f000 fce3 	bl	80010b4 <CAN_Filter_Config>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <main+0x122>
				printf("CAN filter failed to set.\r\n");
 80006f4:	488d      	ldr	r0, [pc, #564]	; (800092c <main+0x350>)
 80006f6:	f010 f833 	bl	8010760 <puts>
				Error_Handler();
 80006fa:	f000 fd55 	bl	80011a8 <Error_Handler>
			}
			printf("CAN initialization succeeded...\r\n");
 80006fe:	488c      	ldr	r0, [pc, #560]	; (8000930 <main+0x354>)
 8000700:	f010 f82e 	bl	8010760 <puts>

			// Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 8000704:	2200      	movs	r2, #0
 8000706:	498b      	ldr	r1, [pc, #556]	; (8000934 <main+0x358>)
 8000708:	488b      	ldr	r0, [pc, #556]	; (8000938 <main+0x35c>)
 800070a:	f00e fb47 	bl	800ed9c <f_mount>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d004      	beq.n	800071e <main+0x142>
				printf("Mounting failed!\r\n");
 8000714:	4889      	ldr	r0, [pc, #548]	; (800093c <main+0x360>)
 8000716:	f010 f823 	bl	8010760 <puts>
				Error_Handler();
 800071a:	f000 fd45 	bl	80011a8 <Error_Handler>
			}

			printf("SD initialization succeeded...\r\n");
 800071e:	4888      	ldr	r0, [pc, #544]	; (8000940 <main+0x364>)
 8000720:	f010 f81e 	bl	8010760 <puts>

			state = CREATE_LOG_FILE;
 8000724:	2302      	movs	r3, #2
 8000726:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 800072a:	e1ca      	b.n	8000ac2 <main+0x4e6>
		 *
		 * Transition out:
		 * 	Always -> STANDBY
		 */
		case CREATE_LOG_FILE:
			printf("Creating new log file...\r\n");
 800072c:	4885      	ldr	r0, [pc, #532]	; (8000944 <main+0x368>)
 800072e:	f010 f817 	bl	8010760 <puts>

			// Update current date/time info
			curr_date = DS1307_GetDate();
 8000732:	f001 f957 	bl	80019e4 <DS1307_GetDate>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b83      	ldr	r3, [pc, #524]	; (8000948 <main+0x36c>)
 800073c:	701a      	strb	r2, [r3, #0]
			curr_month = DS1307_GetMonth();
 800073e:	f001 f95d 	bl	80019fc <DS1307_GetMonth>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b81      	ldr	r3, [pc, #516]	; (800094c <main+0x370>)
 8000748:	701a      	strb	r2, [r3, #0]
			curr_year = DS1307_GetYear();
 800074a:	f001 f963 	bl	8001a14 <DS1307_GetYear>
 800074e:	4603      	mov	r3, r0
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b7f      	ldr	r3, [pc, #508]	; (8000950 <main+0x374>)
 8000754:	701a      	strb	r2, [r3, #0]
			curr_hour = DS1307_GetHour();
 8000756:	f001 f97f 	bl	8001a58 <DS1307_GetHour>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	4b7d      	ldr	r3, [pc, #500]	; (8000954 <main+0x378>)
 8000760:	701a      	strb	r2, [r3, #0]
			curr_minute = DS1307_GetMinute();
 8000762:	f001 f988 	bl	8001a76 <DS1307_GetMinute>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b7b      	ldr	r3, [pc, #492]	; (8000958 <main+0x37c>)
 800076c:	701a      	strb	r2, [r3, #0]
			curr_second = DS1307_GetSecond();
 800076e:	f001 f98e 	bl	8001a8e <DS1307_GetSecond>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b79      	ldr	r3, [pc, #484]	; (800095c <main+0x380>)
 8000778:	701a      	strb	r2, [r3, #0]
			starting_tick = HAL_GetTick();
 800077a:	f001 fa01 	bl	8001b80 <HAL_GetTick>
 800077e:	4603      	mov	r3, r0
 8000780:	4a77      	ldr	r2, [pc, #476]	; (8000960 <main+0x384>)
 8000782:	6013      	str	r3, [r2, #0]
			printf("%02d/%02d/20%02d %02d:%02d:%02d\r\n",
 8000784:	4b71      	ldr	r3, [pc, #452]	; (800094c <main+0x370>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	4b6f      	ldr	r3, [pc, #444]	; (8000948 <main+0x36c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461c      	mov	r4, r3
 8000790:	4b6f      	ldr	r3, [pc, #444]	; (8000950 <main+0x374>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461d      	mov	r5, r3
 8000796:	4b6f      	ldr	r3, [pc, #444]	; (8000954 <main+0x378>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	4b6e      	ldr	r3, [pc, #440]	; (8000958 <main+0x37c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4b6e      	ldr	r3, [pc, #440]	; (800095c <main+0x380>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	9302      	str	r3, [sp, #8]
 80007a8:	9101      	str	r1, [sp, #4]
 80007aa:	9200      	str	r2, [sp, #0]
 80007ac:	462b      	mov	r3, r5
 80007ae:	4622      	mov	r2, r4
 80007b0:	4601      	mov	r1, r0
 80007b2:	486c      	ldr	r0, [pc, #432]	; (8000964 <main+0x388>)
 80007b4:	f00f ff6e 	bl	8010694 <iprintf>
					curr_month, curr_date, curr_year, curr_hour, curr_minute, curr_second);

			// Creating new filename
			TCHAR filename[FILENAME_MAX_BYTES];
			snprintf(filename, FILENAME_MAX_BYTES, "/CAN_DATA/%02d-%02d-20%02d_(%02dh-%02dm-%02ds).log",
 80007b8:	4b64      	ldr	r3, [pc, #400]	; (800094c <main+0x370>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461e      	mov	r6, r3
 80007be:	4b62      	ldr	r3, [pc, #392]	; (8000948 <main+0x36c>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b62      	ldr	r3, [pc, #392]	; (8000950 <main+0x374>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4b62      	ldr	r3, [pc, #392]	; (8000954 <main+0x378>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461c      	mov	r4, r3
 80007d0:	4b5e      	ldr	r3, [pc, #376]	; (800094c <main+0x370>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461d      	mov	r5, r3
 80007d6:	4b61      	ldr	r3, [pc, #388]	; (800095c <main+0x380>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4638      	mov	r0, r7
 80007dc:	9304      	str	r3, [sp, #16]
 80007de:	9503      	str	r5, [sp, #12]
 80007e0:	9402      	str	r4, [sp, #8]
 80007e2:	9101      	str	r1, [sp, #4]
 80007e4:	9200      	str	r2, [sp, #0]
 80007e6:	4633      	mov	r3, r6
 80007e8:	4a5f      	ldr	r2, [pc, #380]	; (8000968 <main+0x38c>)
 80007ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ee:	f00f fe4f 	bl	8010490 <sniprintf>
					curr_month, curr_date, curr_year,
					curr_hour, curr_month, curr_second);

			printf("New log name: %s ", filename);
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	485d      	ldr	r0, [pc, #372]	; (800096c <main+0x390>)
 80007f8:	f00f ff4c 	bl	8010694 <iprintf>

			// Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 80007fc:	463b      	mov	r3, r7
 80007fe:	220a      	movs	r2, #10
 8000800:	4619      	mov	r1, r3
 8000802:	485b      	ldr	r0, [pc, #364]	; (8000970 <main+0x394>)
 8000804:	f00e fb10 	bl	800ee28 <f_open>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d006      	beq.n	800081c <main+0x240>
					!= FR_OK) {
				printf("Failed to create new log file: %s ...!\r\n", filename);
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4858      	ldr	r0, [pc, #352]	; (8000974 <main+0x398>)
 8000814:	f00f ff3e 	bl	8010694 <iprintf>
				Error_Handler();
 8000818:	f000 fcc6 	bl	80011a8 <Error_Handler>
			}
			printf("Successfully created new log file: %s ...\r\n", filename);
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4855      	ldr	r0, [pc, #340]	; (8000978 <main+0x39c>)
 8000822:	f00f ff37 	bl	8010694 <iprintf>

			// Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 8000826:	2102      	movs	r1, #2
 8000828:	483e      	ldr	r0, [pc, #248]	; (8000924 <main+0x348>)
 800082a:	f001 fd60 	bl	80022ee <HAL_CAN_ActivateNotification>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d004      	beq.n	800083e <main+0x262>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
				printf("Failed to activate CAN\r\n");
 8000834:	4851      	ldr	r0, [pc, #324]	; (800097c <main+0x3a0>)
 8000836:	f00f ff93 	bl	8010760 <puts>
				Error_Handler();
 800083a:	f000 fcb5 	bl	80011a8 <Error_Handler>
			}

			// Turn Green LED on (turns Red LED off)
			printf("Ready to receive messages!\r\n");
 800083e:	4850      	ldr	r0, [pc, #320]	; (8000980 <main+0x3a4>)
 8000840:	f00f ff8e 	bl	8010760 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET); // Successful LED
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084a:	4835      	ldr	r0, [pc, #212]	; (8000920 <main+0x344>)
 800084c:	f002 fe48 	bl	80034e0 <HAL_GPIO_WritePin>

			state = STANDBY;
 8000850:	2303      	movs	r3, #3
 8000852:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000856:	e134      	b.n	8000ac2 <main+0x4e6>
		 * 	If power switch is set to off position or the new file button is clicked -> RESET_STATE
		 * 	Else if the current buffer is filled -> SD_CARD_WRITE
		 * 	Else -> STANDBY
		 */
		case STANDBY:
			if (!POWER_STATE || NEW_LOG_FLAG) //Power switch is off or new log file
 8000858:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <main+0x32c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d003      	beq.n	8000868 <main+0x28c>
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <main+0x330>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <main+0x294>
				state = RESET_STATE;
 8000868:	230b      	movs	r3, #11
 800086a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			else if (is_buffer_filled) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 800086e:	e125      	b.n	8000abc <main+0x4e0>
			else if (is_buffer_filled) //Buffer is filled
 8000870:	4b44      	ldr	r3, [pc, #272]	; (8000984 <main+0x3a8>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	f000 8121 	beq.w	8000abc <main+0x4e0>
				state = SD_CARD_WRITE;
 800087a:	2306      	movs	r3, #6
 800087c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000880:	e11c      	b.n	8000abc <main+0x4e0>
		 *
		 * Transition out:
		 *	Always -> USB_TRANSMIT
		 */
		case SD_CARD_WRITE:
			if (f_write(&SDFile, data_buffer[!current_buffer], BUFFER_TOTAL_SIZE, (void*) &byteswritten) != FR_OK || byteswritten == 0) {
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <main+0x33c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf0c      	ite	eq
 800088a:	2301      	moveq	r3, #1
 800088c:	2300      	movne	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	4613      	mov	r3, r2
 8000894:	029b      	lsls	r3, r3, #10
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <main+0x334>)
 800089e:	1899      	adds	r1, r3, r2
 80008a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80008a4:	f241 0204 	movw	r2, #4100	; 0x1004
 80008a8:	4831      	ldr	r0, [pc, #196]	; (8000970 <main+0x394>)
 80008aa:	f00e fc7b 	bl	800f1a4 <f_write>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d103      	bne.n	80008bc <main+0x2e0>
 80008b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <main+0x2ea>
				printf("Writing Failed!\r\n");
 80008bc:	4832      	ldr	r0, [pc, #200]	; (8000988 <main+0x3ac>)
 80008be:	f00f ff4f 	bl	8010760 <puts>
				Error_Handler();
 80008c2:	f000 fc71 	bl	80011a8 <Error_Handler>
			}

			state = USB_TRANSMIT;
 80008c6:	2308      	movs	r3, #8
 80008c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 80008cc:	e0f9      	b.n	8000ac2 <main+0x4e6>
		 *
		 * Transition out:
		 *	Always -> RESET_BUFFER
		 */
		case USB_TRANSMIT:
			CDC_Transmit_FS(data_buffer[!current_buffer], BUFFER_TOTAL_SIZE);
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <main+0x33c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf0c      	ite	eq
 80008d6:	2301      	moveq	r3, #1
 80008d8:	2300      	movne	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	4613      	mov	r3, r2
 80008e0:	029b      	lsls	r3, r3, #10
 80008e2:	4413      	add	r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	4a09      	ldr	r2, [pc, #36]	; (8000910 <main+0x334>)
 80008ea:	4413      	add	r3, r2
 80008ec:	f241 0104 	movw	r1, #4100	; 0x1004
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00f f855 	bl	800f9a0 <CDC_Transmit_FS>
			state = RESET_BUFFER;
 80008f6:	230a      	movs	r3, #10
 80008f8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 80008fc:	e0e1      	b.n	8000ac2 <main+0x4e6>
 80008fe:	bf00      	nop
 8000900:	200001ac 	.word	0x200001ac
 8000904:	40021000 	.word	0x40021000
 8000908:	200003cc 	.word	0x200003cc
 800090c:	200003cd 	.word	0x200003cd
 8000910:	200003d0 	.word	0x200003d0
 8000914:	200023dc 	.word	0x200023dc
 8000918:	200023de 	.word	0x200023de
 800091c:	08011684 	.word	0x08011684
 8000920:	40021400 	.word	0x40021400
 8000924:	20000184 	.word	0x20000184
 8000928:	080116a4 	.word	0x080116a4
 800092c:	080116bc 	.word	0x080116bc
 8000930:	080116d8 	.word	0x080116d8
 8000934:	200023fc 	.word	0x200023fc
 8000938:	20002400 	.word	0x20002400
 800093c:	080116fc 	.word	0x080116fc
 8000940:	08011710 	.word	0x08011710
 8000944:	08011730 	.word	0x08011730
 8000948:	200023e0 	.word	0x200023e0
 800094c:	200023e1 	.word	0x200023e1
 8000950:	200023e2 	.word	0x200023e2
 8000954:	200023e3 	.word	0x200023e3
 8000958:	200023e4 	.word	0x200023e4
 800095c:	200023e5 	.word	0x200023e5
 8000960:	200023e8 	.word	0x200023e8
 8000964:	0801174c 	.word	0x0801174c
 8000968:	08011770 	.word	0x08011770
 800096c:	080117a4 	.word	0x080117a4
 8000970:	20002634 	.word	0x20002634
 8000974:	080117b8 	.word	0x080117b8
 8000978:	080117e4 	.word	0x080117e4
 800097c:	08011810 	.word	0x08011810
 8000980:	08011828 	.word	0x08011828
 8000984:	200023df 	.word	0x200023df
 8000988:	08011844 	.word	0x08011844
		 * Transition out:
		 *	Always -> STANDBY
		 */
		case RESET_BUFFER:
			// bookkeeping information (just for debugging)
			buffer_emptyings++;
 800098c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000990:	3301      	adds	r3, #1
 8000992:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			total_size += byteswritten;
 8000996:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800099a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800099e:	4413      	add	r3, r2
 80009a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			printf("emptied buffer %d\r\n", !current_buffer);
 80009a4:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <main+0x4e8>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bf0c      	ite	eq
 80009ac:	2301      	moveq	r3, #1
 80009ae:	2300      	movne	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	4844      	ldr	r0, [pc, #272]	; (8000ac8 <main+0x4ec>)
 80009b6:	f00f fe6d 	bl	8010694 <iprintf>
			printf("buffers emptied: %ld\r\n", buffer_emptyings);
 80009ba:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80009be:	4843      	ldr	r0, [pc, #268]	; (8000acc <main+0x4f0>)
 80009c0:	f00f fe68 	bl	8010694 <iprintf>
			printf("Wrote buffer sizeof: %ld\r\n", byteswritten);
 80009c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80009c8:	4619      	mov	r1, r3
 80009ca:	4841      	ldr	r0, [pc, #260]	; (8000ad0 <main+0x4f4>)
 80009cc:	f00f fe62 	bl	8010694 <iprintf>

			// Reset buffer that was just sent to SD and USB
			data_buffer[!current_buffer][0] = '\00';
 80009d0:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <main+0x4e8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf0c      	ite	eq
 80009d8:	2301      	moveq	r3, #1
 80009da:	2300      	movne	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	493c      	ldr	r1, [pc, #240]	; (8000ad4 <main+0x4f8>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	029b      	lsls	r3, r3, #10
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[!current_buffer] = 0;
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <main+0x4e8>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf0c      	ite	eq
 80009fa:	2301      	moveq	r3, #1
 80009fc:	2300      	movne	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <main+0x4fc>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	5499      	strb	r1, [r3, r2]
			is_buffer_filled = 0;
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <main+0x500>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]

			byteswritten = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

			state = STANDBY;
 8000a14:	2303      	movs	r3, #3
 8000a16:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000a1a:	e052      	b.n	8000ac2 <main+0x4e6>
		 * Transition out:
		 *	Always -> POWER_OFF
		 */
		case RESET_STATE:
			// Turn off CAN interrupt
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4830      	ldr	r0, [pc, #192]	; (8000ae0 <main+0x504>)
 8000a20:	f001 fc8b 	bl	800233a <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 8000a24:	482e      	ldr	r0, [pc, #184]	; (8000ae0 <main+0x504>)
 8000a26:	f001 fb07 	bl	8002038 <HAL_CAN_Stop>

			// Turn Red LED on (Green LED turns off)
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a30:	482c      	ldr	r0, [pc, #176]	; (8000ae4 <main+0x508>)
 8000a32:	f002 fd55 	bl	80034e0 <HAL_GPIO_WritePin>

			// Debugging information
			printf("total sizeof: %ld\r\n", total_size);
 8000a36:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8000a3a:	482b      	ldr	r0, [pc, #172]	; (8000ae8 <main+0x50c>)
 8000a3c:	f00f fe2a 	bl	8010694 <iprintf>
			total_size = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			buffer_emptyings = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			printf("Unmounting SD Card!\r\n");
 8000a4c:	4827      	ldr	r0, [pc, #156]	; (8000aec <main+0x510>)
 8000a4e:	f00f fe87 	bl	8010760 <puts>
			f_close(&SDFile);
 8000a52:	4827      	ldr	r0, [pc, #156]	; (8000af0 <main+0x514>)
 8000a54:	f00e fd99 	bl	800f58a <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f00e f99d 	bl	800ed9c <f_mount>

			if (!POWER_STATE)
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <main+0x518>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <main+0x494>
				printf("Turning off!\r\n");
 8000a6a:	4823      	ldr	r0, [pc, #140]	; (8000af8 <main+0x51c>)
 8000a6c:	f00f fe78 	bl	8010760 <puts>
			state = POWER_OFF;
 8000a70:	230c      	movs	r3, #12
 8000a72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			break;
 8000a76:	e024      	b.n	8000ac2 <main+0x4e6>
		 * Transition out:
		 *	If power switch is in the on position -> TURN_ON
		 *	Else -> POWER_OFF
		 */
		case POWER_OFF:
			if (POWER_STATE) {
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <main+0x518>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d01f      	beq.n	8000ac0 <main+0x4e4>
				// Button was pressed
				if (NEW_LOG_FLAG) {
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <main+0x520>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <main+0x4ba>
					NEW_LOG_FLAG = 0;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <main+0x520>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
					printf("\r\nResetting and starting new log file! \r\n");
 8000a8e:	481c      	ldr	r0, [pc, #112]	; (8000b00 <main+0x524>)
 8000a90:	f00f fe66 	bl	8010760 <puts>
 8000a94:	e002      	b.n	8000a9c <main+0x4c0>
				}
				// Button was not pressed
				else {
					printf("\r\nTurning back on!\r\n");
 8000a96:	481b      	ldr	r0, [pc, #108]	; (8000b04 <main+0x528>)
 8000a98:	f00f fe62 	bl	8010760 <puts>
				}
				state = TURN_ON;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			}
			break;
 8000aa2:	e00d      	b.n	8000ac0 <main+0x4e4>

		default:
			printf("CAN logger in unknown state!\r\n");
 8000aa4:	4818      	ldr	r0, [pc, #96]	; (8000b08 <main+0x52c>)
 8000aa6:	f00f fe5b 	bl	8010760 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <main+0x508>)
 8000ab2:	f002 fd15 	bl	80034e0 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); // Red LED
			break;
 8000ab6:	e004      	b.n	8000ac2 <main+0x4e6>
			break;
 8000ab8:	bf00      	nop
 8000aba:	e5b2      	b.n	8000622 <main+0x46>
			break;
 8000abc:	bf00      	nop
 8000abe:	e5b0      	b.n	8000622 <main+0x46>
			break;
 8000ac0:	bf00      	nop
		switch (state) {
 8000ac2:	e5ae      	b.n	8000622 <main+0x46>
 8000ac4:	200023de 	.word	0x200023de
 8000ac8:	08011858 	.word	0x08011858
 8000acc:	0801186c 	.word	0x0801186c
 8000ad0:	08011884 	.word	0x08011884
 8000ad4:	200003d0 	.word	0x200003d0
 8000ad8:	200023dc 	.word	0x200023dc
 8000adc:	200023df 	.word	0x200023df
 8000ae0:	20000184 	.word	0x20000184
 8000ae4:	40021400 	.word	0x40021400
 8000ae8:	080118a0 	.word	0x080118a0
 8000aec:	080118b4 	.word	0x080118b4
 8000af0:	20002634 	.word	0x20002634
 8000af4:	200003cc 	.word	0x200003cc
 8000af8:	080118cc 	.word	0x080118cc
 8000afc:	200003cd 	.word	0x200003cd
 8000b00:	080118dc 	.word	0x080118dc
 8000b04:	08011908 	.word	0x08011908
 8000b08:	0801191c 	.word	0x0801191c

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	; 0x50
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2234      	movs	r2, #52	; 0x34
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00f fe37 	bl	801078e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <SystemClock_Config+0xc8>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <SystemClock_Config+0xc8>)
 8000b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <SystemClock_Config+0xc8>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b7c:	2360      	movs	r3, #96	; 0x60
 8000b7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b80:	2304      	movs	r3, #4
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b84:	2304      	movs	r3, #4
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 fd19 	bl	80055c8 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b9c:	f000 fb04 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 ffb1 	bl	8005b24 <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bc8:	f000 faee 	bl	80011a8 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3750      	adds	r7, #80	; 0x50
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000

08000bdc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <MX_CAN1_Init+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000be8:	2203      	movs	r2, #3
 8000bea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000bfa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bfe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000c02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c06:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_CAN1_Init+0x64>)
 8000c2e:	f000 ffd7 	bl	8001be0 <HAL_CAN_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c38:	f000 fab6 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000184 	.word	0x20000184
 8000c44:	40006400 	.word	0x40006400

08000c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <MX_I2C1_Init+0x78>)
 8000c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <MX_I2C1_Init+0x7c>)
 8000c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c82:	480e      	ldr	r0, [pc, #56]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c84:	f002 fc6a 	bl	800355c <HAL_I2C_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c8e:	f000 fa8b 	bl	80011a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c92:	2100      	movs	r1, #0
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000c96:	f003 f947 	bl	8003f28 <HAL_I2CEx_ConfigAnalogFilter>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ca0:	f000 fa82 	bl	80011a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_I2C1_Init+0x74>)
 8000ca8:	f003 f989 	bl	8003fbe <HAL_I2CEx_ConfigDigitalFilter>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cb2:	f000 fa79 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001ac 	.word	0x200001ac
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	00506682 	.word	0x00506682

08000cc8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_SDMMC1_SD_Init+0x44>)
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <MX_SDMMC1_SD_Init+0x48>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_SDMMC1_SD_Init+0x44>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_SDMMC1_SD_Init+0x44>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_SDMMC1_SD_Init+0x44>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_SDMMC1_SD_Init+0x44>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_SDMMC1_SD_Init+0x44>)
 8000cec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf0:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_SDMMC1_SD_Init+0x44>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_SDMMC1_SD_Init+0x44>)
 8000cfa:	f005 fd61 	bl	80067c0 <HAL_SD_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000d04:	f000 fa50 	bl	80011a8 <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000200 	.word	0x20000200
 8000d10:	40012c00 	.word	0x40012c00

08000d14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d1a:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <MX_USART3_UART_Init+0x5c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USART3_UART_Init+0x58>)
 8000d58:	f006 fe5a 	bl	8007a10 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d62:	f000 fa21 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000344 	.word	0x20000344
 8000d70:	40004800 	.word	0x40004800

08000d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_DMA_Init+0x48>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <MX_DMA_Init+0x48>)
 8000d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <MX_DMA_Init+0x48>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	203b      	movs	r0, #59	; 0x3b
 8000d98:	f001 fe01 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d9c:	203b      	movs	r0, #59	; 0x3b
 8000d9e:	f001 fe1a 	bl	80029d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2045      	movs	r0, #69	; 0x45
 8000da8:	f001 fdf9 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000dac:	2045      	movs	r0, #69	; 0x45
 8000dae:	f001 fe12 	bl	80029d6 <HAL_NVIC_EnableIRQ>

}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	; 0x38
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b73      	ldr	r3, [pc, #460]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a72      	ldr	r2, [pc, #456]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b70      	ldr	r3, [pc, #448]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dee:	4b6d      	ldr	r3, [pc, #436]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a6c      	ldr	r2, [pc, #432]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b6a      	ldr	r3, [pc, #424]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e06:	4b67      	ldr	r3, [pc, #412]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a66      	ldr	r2, [pc, #408]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e0c:	f043 0320 	orr.w	r3, r3, #32
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b64      	ldr	r3, [pc, #400]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0320 	and.w	r3, r3, #32
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	4b61      	ldr	r3, [pc, #388]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a60      	ldr	r2, [pc, #384]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b5e      	ldr	r3, [pc, #376]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4b5b      	ldr	r3, [pc, #364]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a5a      	ldr	r2, [pc, #360]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4e:	4b55      	ldr	r3, [pc, #340]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a54      	ldr	r2, [pc, #336]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b52      	ldr	r3, [pc, #328]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b4f      	ldr	r3, [pc, #316]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a4e      	ldr	r2, [pc, #312]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <MX_GPIO_Init+0x1e4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9c:	4842      	ldr	r0, [pc, #264]	; (8000fa8 <MX_GPIO_Init+0x1e8>)
 8000e9e:	f002 fb1f 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2140      	movs	r1, #64	; 0x40
 8000ea6:	4841      	ldr	r0, [pc, #260]	; (8000fac <MX_GPIO_Init+0x1ec>)
 8000ea8:	f002 fb1a 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	483f      	ldr	r0, [pc, #252]	; (8000fb0 <MX_GPIO_Init+0x1f0>)
 8000eb2:	f002 fb15 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4836      	ldr	r0, [pc, #216]	; (8000fa8 <MX_GPIO_Init+0x1e8>)
 8000ed0:	f002 f942 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : NewLogBtn_Pin */
  GPIO_InitStruct.Pin = NewLogBtn_Pin;
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NewLogBtn_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4832      	ldr	r0, [pc, #200]	; (8000fb4 <MX_GPIO_Init+0x1f4>)
 8000eea:	f002 f935 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f00:	2306      	movs	r3, #6
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	482a      	ldr	r0, [pc, #168]	; (8000fb4 <MX_GPIO_Init+0x1f4>)
 8000f0c:	f002 f924 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000f10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f16:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4823      	ldr	r0, [pc, #140]	; (8000fb4 <MX_GPIO_Init+0x1f4>)
 8000f28:	f002 f916 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000f2c:	2384      	movs	r3, #132	; 0x84
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481b      	ldr	r0, [pc, #108]	; (8000fac <MX_GPIO_Init+0x1ec>)
 8000f40:	f002 f90a 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f44:	2340      	movs	r3, #64	; 0x40
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4814      	ldr	r0, [pc, #80]	; (8000fac <MX_GPIO_Init+0x1ec>)
 8000f5c:	f002 f8fc 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <MX_GPIO_Init+0x1f0>)
 8000f78:	f002 f8ee 	bl	8003158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2017      	movs	r0, #23
 8000f82:	f001 fd0c 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f86:	2017      	movs	r0, #23
 8000f88:	f001 fd25 	bl	80029d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2028      	movs	r0, #40	; 0x28
 8000f92:	f001 fd04 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f96:	2028      	movs	r0, #40	; 0x28
 8000f98:	f001 fd1d 	bl	80029d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3738      	adds	r7, #56	; 0x38
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40021400 	.word	0x40021400
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	b09d      	sub	sp, #116	; 0x74
 8000fbc:	af06      	add	r7, sp, #24
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8000fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4833      	ldr	r0, [pc, #204]	; (8001098 <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8000fca:	f001 f87e 	bl	80020ca <HAL_CAN_GetRxMessage>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
		printf("Failed to get CAN message\r\n");
 8000fd4:	4831      	ldr	r0, [pc, #196]	; (800109c <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000fd6:	f00f fbc3 	bl	8010760 <puts>
		Error_Handler();
 8000fda:	f000 f8e5 	bl	80011a8 <Error_Handler>
	}

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000fde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000ff4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001002:	b29b      	uxth	r3, r3
 8001004:	4413      	add	r3, r2
 8001006:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 800100a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800100e:	b29b      	uxth	r3, r3
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b29a      	uxth	r2, r3
 8001014:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001018:	b29b      	uxth	r3, r3
 800101a:	4413      	add	r3, r2
 800101c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8001020:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001024:	b29b      	uxth	r3, r3
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b29a      	uxth	r2, r3
 800102a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800102e:	b29b      	uxth	r3, r3
 8001030:	4413      	add	r3, r2
 8001032:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	char encodedData[ENCODED_CAN_SIZE_BYTES];

	// consider writing raw bytes
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001036:	f000 fda3 	bl	8001b80 <HAL_GetTick>
 800103a:	4606      	mov	r6, r0
 800103c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800103e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001042:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8001046:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 800104a:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 800104e:	463d      	mov	r5, r7
 8001050:	9404      	str	r4, [sp, #16]
 8001052:	9003      	str	r0, [sp, #12]
 8001054:	9102      	str	r1, [sp, #8]
 8001056:	9201      	str	r2, [sp, #4]
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4633      	mov	r3, r6
 800105c:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <Get_and_Append_CAN_Message_to_Buffer+0xe8>)
 800105e:	212a      	movs	r1, #42	; 0x2a
 8001060:	4628      	mov	r0, r5
 8001062:	f00f fa15 	bl	8010490 <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(current_buffer ? data_buffer[1] : data_buffer[0], encodedData);
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <Get_and_Append_CAN_Message_to_Buffer+0xba>
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8001070:	e000      	b.n	8001074 <Get_and_Append_CAN_Message_to_Buffer+0xbc>
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 8001074:	463a      	mov	r2, r7
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f00f fb79 	bl	8010770 <strcat>
	buffer_fill_level[current_buffer]++;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8001084:	5cd2      	ldrb	r2, [r2, r3]
 8001086:	3201      	adds	r2, #1
 8001088:	b2d1      	uxtb	r1, r2
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 800108c:	54d1      	strb	r1, [r2, r3]
}
 800108e:	bf00      	nop
 8001090:	375c      	adds	r7, #92	; 0x5c
 8001092:	46bd      	mov	sp, r7
 8001094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001096:	bf00      	nop
 8001098:	20000184 	.word	0x20000184
 800109c:	0801193c 	.word	0x0801193c
 80010a0:	08011958 	.word	0x08011958
 80010a4:	200023de 	.word	0x200023de
 80010a8:	200013d5 	.word	0x200013d5
 80010ac:	200003d0 	.word	0x200003d0
 80010b0:	200023dc 	.word	0x200023dc

080010b4 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 80010be:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 80010c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 80010ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d0:	0a1a      	lsrs	r2, r3, #8
 80010d2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010d6:	4013      	ands	r3, r2
 80010d8:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 80010da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010dc:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 80010e0:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 80010e2:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 80010e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e6:	0a1a      	lsrs	r2, r3, #8
 80010e8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8001100:	2301      	movs	r3, #1
 8001102:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <CAN_Filter_Config+0x64>)
 800110a:	f000 fe65 	bl	8001dd8 <HAL_CAN_ConfigFilter>
 800110e:	4603      	mov	r3, r0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3730      	adds	r7, #48	; 0x30
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000184 	.word	0x20000184

0800111c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if (buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d108      	bne.n	800113e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			&& buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800112e:	785b      	ldrb	r3, [r3, #1]
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d104      	bne.n	800113e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		printf("Buffers are full\r\n");
 8001134:	4810      	ldr	r0, [pc, #64]	; (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001136:	f00f fb13 	bl	8010760 <puts>
		Error_Handler();
 800113a:	f000 f835 	bl	80011a8 <Error_Handler>
	}

	Get_and_Append_CAN_Message_to_Buffer();
 800113e:	f7ff ff3b 	bl	8000fb8 <Get_and_Append_CAN_Message_to_Buffer>

	if (buffer_fill_level[current_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800114a:	5c9b      	ldrb	r3, [r3, r2]
 800114c:	2b64      	cmp	r3, #100	; 0x64
 800114e:	d10c      	bne.n	800116a <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		is_buffer_filled = 1;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
		current_buffer = !current_buffer;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001168:	701a      	strb	r2, [r3, #0]
	}
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200023dc 	.word	0x200023dc
 8001178:	0801197c 	.word	0x0801197c
 800117c:	200023de 	.word	0x200023de
 8001180:	200023df 	.word	0x200023df

08001184 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 800118c:	1d39      	adds	r1, r7, #4
 800118e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001192:	2201      	movs	r2, #1
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <__io_putchar+0x20>)
 8001196:	f006 fc89 	bl	8007aac <HAL_UART_Transmit>

	return ch;
 800119a:	687b      	ldr	r3, [r7, #4]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000344 	.word	0x20000344

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <Error_Handler+0x1c>)
 80011b2:	f00f fad5 	bl	8010760 <puts>
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <Error_Handler+0x20>)
 80011be:	f002 f98f 	bl	80034e0 <HAL_GPIO_WritePin>

	while (1) {
 80011c2:	e7fe      	b.n	80011c2 <Error_Handler+0x1a>
 80011c4:	08011990 	.word	0x08011990
 80011c8:	40021400 	.word	0x40021400

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_MspInit+0x44>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_MspInit+0x44>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_MspInit+0x44>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_MspInit+0x44>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_MspInit+0x44>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_MspInit+0x44>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800

08001214 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_CAN_MspInit+0x8c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12f      	bne.n	8001296 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_CAN_MspInit+0x90>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_CAN_MspInit+0x90>)
 800123c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_CAN_MspInit+0x90>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_CAN_MspInit+0x90>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <HAL_CAN_MspInit+0x90>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_CAN_MspInit+0x90>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001266:	2303      	movs	r3, #3
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001276:	2309      	movs	r3, #9
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <HAL_CAN_MspInit+0x94>)
 8001282:	f001 ff69 	bl	8003158 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2014      	movs	r0, #20
 800128c:	f001 fb87 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001290:	2014      	movs	r0, #20
 8001292:	f001 fba0 	bl	80029d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40006400 	.word	0x40006400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020c00 	.word	0x40020c00

080012ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0ae      	sub	sp, #184	; 0xb8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2290      	movs	r2, #144	; 0x90
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00f fa5e 	bl	801078e <memset>
  if(hi2c->Instance==I2C1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_I2C_MspInit+0xb4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d13c      	bne.n	8001356 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 fe40 	bl	8005f70 <HAL_RCCEx_PeriphCLKConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012f6:	f7ff ff57 	bl	80011a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131a:	2312      	movs	r3, #18
 800131c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132c:	2304      	movs	r3, #4
 800132e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001336:	4619      	mov	r1, r3
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <HAL_I2C_MspInit+0xbc>)
 800133a:	f001 ff0d 	bl	8003158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 8001344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001356:	bf00      	nop
 8001358:	37b8      	adds	r7, #184	; 0xb8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40005400 	.word	0x40005400
 8001364:	40023800 	.word	0x40023800
 8001368:	40020400 	.word	0x40020400

0800136c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0ae      	sub	sp, #184	; 0xb8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2290      	movs	r2, #144	; 0x90
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f00f f9fe 	bl	801078e <memset>
  if(hsd->Instance==SDMMC1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a73      	ldr	r2, [pc, #460]	; (8001564 <HAL_SD_MspInit+0x1f8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	f040 80de 	bne.w	800155a <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800139e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80013a2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80013a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fddd 	bl	8005f70 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80013bc:	f7ff fef4 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013c0:	4b69      	ldr	r3, [pc, #420]	; (8001568 <HAL_SD_MspInit+0x1fc>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	4a68      	ldr	r2, [pc, #416]	; (8001568 <HAL_SD_MspInit+0x1fc>)
 80013c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ca:	6453      	str	r3, [r2, #68]	; 0x44
 80013cc:	4b66      	ldr	r3, [pc, #408]	; (8001568 <HAL_SD_MspInit+0x1fc>)
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_SD_MspInit+0x1fc>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a62      	ldr	r2, [pc, #392]	; (8001568 <HAL_SD_MspInit+0x1fc>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b60      	ldr	r3, [pc, #384]	; (8001568 <HAL_SD_MspInit+0x1fc>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <HAL_SD_MspInit+0x1fc>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a5c      	ldr	r2, [pc, #368]	; (8001568 <HAL_SD_MspInit+0x1fc>)
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b5a      	ldr	r3, [pc, #360]	; (8001568 <HAL_SD_MspInit+0x1fc>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001408:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800140c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001422:	230c      	movs	r3, #12
 8001424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800142c:	4619      	mov	r1, r3
 800142e:	484f      	ldr	r0, [pc, #316]	; (800156c <HAL_SD_MspInit+0x200>)
 8001430:	f001 fe92 	bl	8003158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001434:	2304      	movs	r3, #4
 8001436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800144c:	230c      	movs	r3, #12
 800144e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001456:	4619      	mov	r1, r3
 8001458:	4845      	ldr	r0, [pc, #276]	; (8001570 <HAL_SD_MspInit+0x204>)
 800145a:	f001 fe7d 	bl	8003158 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800145e:	4b45      	ldr	r3, [pc, #276]	; (8001574 <HAL_SD_MspInit+0x208>)
 8001460:	4a45      	ldr	r2, [pc, #276]	; (8001578 <HAL_SD_MspInit+0x20c>)
 8001462:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <HAL_SD_MspInit+0x208>)
 8001466:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800146a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800146c:	4b41      	ldr	r3, [pc, #260]	; (8001574 <HAL_SD_MspInit+0x208>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b40      	ldr	r3, [pc, #256]	; (8001574 <HAL_SD_MspInit+0x208>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <HAL_SD_MspInit+0x208>)
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001480:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <HAL_SD_MspInit+0x208>)
 8001482:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001486:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001488:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <HAL_SD_MspInit+0x208>)
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_SD_MspInit+0x208>)
 8001492:	2220      	movs	r2, #32
 8001494:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <HAL_SD_MspInit+0x208>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_SD_MspInit+0x208>)
 800149e:	2204      	movs	r2, #4
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014a2:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_SD_MspInit+0x208>)
 80014a4:	2203      	movs	r2, #3
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_SD_MspInit+0x208>)
 80014aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014b0:	4b30      	ldr	r3, [pc, #192]	; (8001574 <HAL_SD_MspInit+0x208>)
 80014b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014b8:	482e      	ldr	r0, [pc, #184]	; (8001574 <HAL_SD_MspInit+0x208>)
 80014ba:	f001 faa7 	bl	8002a0c <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80014c4:	f7ff fe70 	bl	80011a8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a2a      	ldr	r2, [pc, #168]	; (8001574 <HAL_SD_MspInit+0x208>)
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40
 80014ce:	4a29      	ldr	r2, [pc, #164]	; (8001574 <HAL_SD_MspInit+0x208>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <HAL_SD_MspInit+0x210>)
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <HAL_SD_MspInit+0x214>)
 80014d8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_SD_MspInit+0x210>)
 80014dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_SD_MspInit+0x210>)
 80014e4:	2240      	movs	r2, #64	; 0x40
 80014e6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_SD_MspInit+0x210>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_SD_MspInit+0x210>)
 80014f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_SD_MspInit+0x210>)
 80014f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014fc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_SD_MspInit+0x210>)
 8001500:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001504:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_SD_MspInit+0x210>)
 8001508:	2220      	movs	r2, #32
 800150a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_SD_MspInit+0x210>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_SD_MspInit+0x210>)
 8001514:	2204      	movs	r2, #4
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_SD_MspInit+0x210>)
 800151a:	2203      	movs	r2, #3
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_SD_MspInit+0x210>)
 8001520:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_SD_MspInit+0x210>)
 8001528:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800152e:	4813      	ldr	r0, [pc, #76]	; (800157c <HAL_SD_MspInit+0x210>)
 8001530:	f001 fa6c 	bl	8002a0c <HAL_DMA_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800153a:	f7ff fe35 	bl	80011a8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_SD_MspInit+0x210>)
 8001542:	63da      	str	r2, [r3, #60]	; 0x3c
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_SD_MspInit+0x210>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2031      	movs	r0, #49	; 0x31
 8001550:	f001 fa25 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001554:	2031      	movs	r0, #49	; 0x31
 8001556:	f001 fa3e 	bl	80029d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800155a:	bf00      	nop
 800155c:	37b8      	adds	r7, #184	; 0xb8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40012c00 	.word	0x40012c00
 8001568:	40023800 	.word	0x40023800
 800156c:	40020800 	.word	0x40020800
 8001570:	40020c00 	.word	0x40020c00
 8001574:	20000284 	.word	0x20000284
 8001578:	40026458 	.word	0x40026458
 800157c:	200002e4 	.word	0x200002e4
 8001580:	400264a0 	.word	0x400264a0

08001584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0ae      	sub	sp, #184	; 0xb8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2290      	movs	r2, #144	; 0x90
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00f f8f2 	bl	801078e <memset>
  if(huart->Instance==USART3)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a22      	ldr	r2, [pc, #136]	; (8001638 <HAL_UART_MspInit+0xb4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d13c      	bne.n	800162e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 fcd4 	bl	8005f70 <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ce:	f7ff fdeb 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_UART_MspInit+0xb8>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_UART_MspInit+0xb8>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_UART_MspInit+0xb8>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_UART_MspInit+0xb8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a13      	ldr	r2, [pc, #76]	; (800163c <HAL_UART_MspInit+0xb8>)
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_UART_MspInit+0xb8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001602:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800161c:	2307      	movs	r3, #7
 800161e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001622:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <HAL_UART_MspInit+0xbc>)
 800162a:	f001 fd95 	bl	8003158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	37b8      	adds	r7, #184	; 0xb8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40004800 	.word	0x40004800
 800163c:	40023800 	.word	0x40023800
 8001640:	40020c00 	.word	0x40020c00

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f000 fa62 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <CAN1_RX0_IRQHandler+0x10>)
 800169e:	f000 fe73 	bl	8002388 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000184 	.word	0x20000184

080016ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	NEW_LOG_FLAG = 1;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <EXTI9_5_IRQHandler+0x14>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NewLogBtn_Pin);
 80016b6:	2080      	movs	r0, #128	; 0x80
 80016b8:	f001 ff2c 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200003cd 	.word	0x200003cd

080016c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	// Debouncing?
//	HAL_Delay(100);
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 80016c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016cc:	4806      	ldr	r0, [pc, #24]	; (80016e8 <EXTI15_10_IRQHandler+0x24>)
 80016ce:	f001 feef 	bl	80034b0 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <EXTI15_10_IRQHandler+0x28>)
 80016d8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 80016da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016de:	f001 ff19 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	200003cc 	.word	0x200003cc

080016f0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <SDMMC1_IRQHandler+0x10>)
 80016f6:	f005 fae3 	bl	8006cc0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000200 	.word	0x20000200

08001704 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <DMA2_Stream3_IRQHandler+0x10>)
 800170a:	f001 faaf 	bl	8002c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000284 	.word	0x20000284

08001718 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <OTG_FS_IRQHandler+0x10>)
 800171e:	f002 fde0 	bl	80042e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20003f80 	.word	0x20003f80

0800172c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA2_Stream6_IRQHandler+0x10>)
 8001732:	f001 fa9b 	bl	8002c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200002e4 	.word	0x200002e4

08001740 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
  }

  return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e009      	b.n	80017a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fcf5 	bl	8001184 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf1      	blt.n	800178c <_write+0x12>
  }
  return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_close>:

int _close(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017da:	605a      	str	r2, [r3, #4]
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_isatty>:

int _isatty(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f00e ffb8 	bl	80107c0 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20080000 	.word	0x20080000
 800187c:	00000400 	.word	0x00000400
 8001880:	200023ec 	.word	0x200023ec
 8001884:	200045d8 	.word	0x200045d8

08001888 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c8:	4c0b      	ldr	r4, [pc, #44]	; (80018f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018d6:	f7ff ffd7 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f00e ff77 	bl	80107cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7fe fe7d 	bl	80005dc <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80018f0:	08011ef4 	.word	0x08011ef4
  ldr r2, =_sbss
 80018f4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80018f8:	200045d4 	.word	0x200045d4

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <DS1307_Init+0x1c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f806 	bl	8001920 <DS1307_SetClockHalt>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200023f0 	.word	0x200023f0

08001920 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <DS1307_SetClockHalt+0x14>
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	e000      	b.n	8001936 <DS1307_SetClockHalt+0x16>
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8001938:	2000      	movs	r0, #0
 800193a:	f000 f831 	bl	80019a0 <DS1307_GetRegByte>
 800193e:	4603      	mov	r3, r0
 8001940:	b25b      	sxtb	r3, r3
 8001942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001946:	b25a      	sxtb	r2, r3
 8001948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194c:	4313      	orrs	r3, r2
 800194e:	b25b      	sxtb	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4619      	mov	r1, r3
 8001954:	2000      	movs	r0, #0
 8001956:	f000 f805 	bl	8001964 <DS1307_SetRegByte>
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af02      	add	r7, sp, #8
 800196a:	4603      	mov	r3, r0
 800196c:	460a      	mov	r2, r1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	4613      	mov	r3, r2
 8001972:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	733b      	strb	r3, [r7, #12]
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <DS1307_SetRegByte+0x38>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f107 020c 	add.w	r2, r7, #12
 8001984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2302      	movs	r3, #2
 800198c:	21d0      	movs	r1, #208	; 0xd0
 800198e:	f001 fe75 	bl	800367c <HAL_I2C_Master_Transmit>
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200023f0 	.word	0x200023f0

080019a0 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <DS1307_GetRegByte+0x40>)
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	1dfa      	adds	r2, r7, #7
 80019b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	21d0      	movs	r1, #208	; 0xd0
 80019ba:	f001 fe5f 	bl	800367c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <DS1307_GetRegByte+0x40>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f107 020f 	add.w	r2, r7, #15
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	21d0      	movs	r1, #208	; 0xd0
 80019d0:	f001 ff48 	bl	8003864 <HAL_I2C_Master_Receive>
	return val;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200023f0 	.word	0x200023f0

080019e4 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 80019e8:	2004      	movs	r0, #4
 80019ea:	f7ff ffd9 	bl	80019a0 <DS1307_GetRegByte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f85b 	bl	8001aac <DS1307_DecodeBCD>
 80019f6:	4603      	mov	r3, r0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}

080019fc <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001a00:	2005      	movs	r0, #5
 8001a02:	f7ff ffcd 	bl	80019a0 <DS1307_GetRegByte>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f84f 	bl	8001aac <DS1307_DecodeBCD>
 8001a0e:	4603      	mov	r3, r0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001a1a:	2010      	movs	r0, #16
 8001a1c:	f7ff ffc0 	bl	80019a0 <DS1307_GetRegByte>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	0091      	lsls	r1, r2, #2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	460b      	mov	r3, r1
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f7ff ffb1 	bl	80019a0 <DS1307_GetRegByte>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f833 	bl	8001aac <DS1307_DecodeBCD>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b29b      	uxth	r3, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f7ff ff9f 	bl	80019a0 <DS1307_GetRegByte>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f81e 	bl	8001aac <DS1307_DecodeBCD>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f7ff ff90 	bl	80019a0 <DS1307_GetRegByte>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f812 	bl	8001aac <DS1307_DecodeBCD>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff ff84 	bl	80019a0 <DS1307_GetRegByte>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f803 	bl	8001aac <DS1307_DecodeBCD>
 8001aa6:	4603      	mov	r3, r0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2db      	uxtb	r3, r3
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f000 ff50 	bl	8002988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 f805 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aee:	f7ff fb6d 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 ff6b 	bl	80029f2 <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b34:	f000 ff33 	bl	800299e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <HAL_InitTick+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	200023f4 	.word	0x200023f4

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	200023f4 	.word	0x200023f4

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff ffee 	bl	8001b80 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_Delay+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000008 	.word	0x20000008

08001be0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0ed      	b.n	8001dce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fb08 	bl	8001214 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c14:	f7ff ffb4 	bl	8001b80 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c1a:	e012      	b.n	8001c42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c1c:	f7ff ffb0 	bl	8001b80 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	d90b      	bls.n	8001c42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2205      	movs	r2, #5
 8001c3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0c5      	b.n	8001dce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0e5      	beq.n	8001c1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0202 	bic.w	r2, r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c60:	f7ff ff8e 	bl	8001b80 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c66:	e012      	b.n	8001c8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c68:	f7ff ff8a 	bl	8001b80 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b0a      	cmp	r3, #10
 8001c74:	d90b      	bls.n	8001c8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2205      	movs	r2, #5
 8001c86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e09f      	b.n	8001dce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e5      	bne.n	8001c68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d108      	bne.n	8001cb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e007      	b.n	8001cc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7e5b      	ldrb	r3, [r3, #25]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d108      	bne.n	8001ce0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e007      	b.n	8001cf0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e9b      	ldrb	r3, [r3, #26]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d108      	bne.n	8001d0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e007      	b.n	8001d1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0220 	bic.w	r2, r2, #32
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7edb      	ldrb	r3, [r3, #27]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d108      	bne.n	8001d34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0210 	bic.w	r2, r2, #16
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e007      	b.n	8001d44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0210 	orr.w	r2, r2, #16
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7f1b      	ldrb	r3, [r3, #28]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d108      	bne.n	8001d5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e007      	b.n	8001d6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0208 	bic.w	r2, r2, #8
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7f5b      	ldrb	r3, [r3, #29]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0204 	orr.w	r2, r2, #4
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e007      	b.n	8001d98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0204 	bic.w	r2, r2, #4
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	ea42 0103 	orr.w	r1, r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d003      	beq.n	8001dfe <HAL_CAN_ConfigFilter+0x26>
 8001df6:	7cfb      	ldrb	r3, [r7, #19]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	f040 80c7 	bne.w	8001f8c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a69      	ldr	r2, [pc, #420]	; (8001fa8 <HAL_CAN_ConfigFilter+0x1d0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d001      	beq.n	8001e0c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001e08:	4b68      	ldr	r3, [pc, #416]	; (8001fac <HAL_CAN_ConfigFilter+0x1d4>)
 8001e0a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_CAN_ConfigFilter+0x1d4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e2a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	431a      	orrs	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	2201      	movs	r2, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d123      	bne.n	8001eba <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3248      	adds	r2, #72	; 0x48
 8001e9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eb0:	6979      	ldr	r1, [r7, #20]
 8001eb2:	3348      	adds	r3, #72	; 0x48
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d122      	bne.n	8001f08 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ee2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3248      	adds	r2, #72	; 0x48
 8001ee8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001efc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001efe:	6979      	ldr	r1, [r7, #20]
 8001f00:	3348      	adds	r3, #72	; 0x48
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f22:	e007      	b.n	8001f34 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f4e:	e007      	b.n	8001f60 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d107      	bne.n	8001f78 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f7e:	f023 0201 	bic.w	r2, r3, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e006      	b.n	8001f9a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40003400 	.word	0x40003400
 8001fac:	40006400 	.word	0x40006400

08001fb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d12e      	bne.n	8002022 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff fdd0 	bl	8001b80 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fe2:	e012      	b.n	800200a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fe4:	f7ff fdcc 	bl	8001b80 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b0a      	cmp	r3, #10
 8001ff0:	d90b      	bls.n	800200a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2205      	movs	r2, #5
 8002002:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e012      	b.n	8002030 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e5      	bne.n	8001fe4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e006      	b.n	8002030 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d133      	bne.n	80020b4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800205c:	f7ff fd90 	bl	8001b80 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002062:	e012      	b.n	800208a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002064:	f7ff fd8c 	bl	8001b80 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b0a      	cmp	r3, #10
 8002070:	d90b      	bls.n	800208a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2205      	movs	r2, #5
 8002082:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e01b      	b.n	80020c2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0e5      	beq.n	8002064 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0202 	bic.w	r2, r2, #2
 80020a6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e006      	b.n	80020c2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020ca:	b480      	push	{r7}
 80020cc:	b087      	sub	sp, #28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d003      	beq.n	80020ee <HAL_CAN_GetRxMessage+0x24>
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	f040 80f3 	bne.w	80022d4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10e      	bne.n	8002112 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d116      	bne.n	8002130 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0e7      	b.n	80022e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0d8      	b.n	80022e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	331b      	adds	r3, #27
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4413      	add	r3, r2
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0204 	and.w	r2, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	331b      	adds	r3, #27
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0d5b      	lsrs	r3, r3, #21
 800215e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e00b      	b.n	8002180 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	331b      	adds	r3, #27
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	4413      	add	r3, r2
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	331b      	adds	r3, #27
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	4413      	add	r3, r2
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0202 	and.w	r2, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	331b      	adds	r3, #27
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	331b      	adds	r3, #27
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	331b      	adds	r3, #27
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	4413      	add	r3, r2
 80021d2:	3304      	adds	r3, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0a1a      	lsrs	r2, r3, #8
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0c1a      	lsrs	r2, r3, #16
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3302      	adds	r3, #2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e1a      	lsrs	r2, r3, #24
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3303      	adds	r3, #3
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	4413      	add	r3, r2
 800224c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	3304      	adds	r3, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	4413      	add	r3, r2
 8002264:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0a1a      	lsrs	r2, r3, #8
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	3305      	adds	r3, #5
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	4413      	add	r3, r2
 800227e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0c1a      	lsrs	r2, r3, #16
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	3306      	adds	r3, #6
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4413      	add	r3, r2
 8002298:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0e1a      	lsrs	r2, r3, #24
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	3307      	adds	r3, #7
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0220 	orr.w	r2, r2, #32
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	e007      	b.n	80022d0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e006      	b.n	80022e2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d002      	beq.n	800230c <HAL_CAN_ActivateNotification+0x1e>
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d109      	bne.n	8002320 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6959      	ldr	r1, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	e006      	b.n	800232e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d002      	beq.n	8002358 <HAL_CAN_DeactivateNotification+0x1e>
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d10a      	bne.n	800236e <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6959      	ldr	r1, [r3, #20]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	43da      	mvns	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	400a      	ands	r2, r1
 8002368:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e006      	b.n	800237c <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d07c      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d023      	beq.n	8002420 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f983 	bl	80026f6 <HAL_CAN_TxMailbox0CompleteCallback>
 80023f0:	e016      	b.n	8002420 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
 8002404:	e00c      	b.n	8002420 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
 8002418:	e002      	b.n	8002420 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f989 	bl	8002732 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d024      	beq.n	8002474 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002432:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f963 	bl	800270a <HAL_CAN_TxMailbox1CompleteCallback>
 8002444:	e016      	b.n	8002474 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
 8002458:	e00c      	b.n	8002474 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002460:	2b00      	cmp	r3, #0
 8002462:	d004      	beq.n	800246e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
 800246c:	e002      	b.n	8002474 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f969 	bl	8002746 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d024      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002486:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f943 	bl	800271e <HAL_CAN_TxMailbox2CompleteCallback>
 8002498:	e016      	b.n	80024c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	e00c      	b.n	80024c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	e002      	b.n	80024c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f949 	bl	800275a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2210      	movs	r2, #16
 80024ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2208      	movs	r2, #8
 8002506:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f930 	bl	800276e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fdf8 	bl	800111c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00c      	beq.n	8002550 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002546:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2210      	movs	r2, #16
 800254e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2208      	movs	r2, #8
 800256a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f912 	bl	8002796 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8f9 	bl	8002782 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2210      	movs	r2, #16
 80025aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f8fc 	bl	80027aa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2208      	movs	r2, #8
 80025cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8f5 	bl	80027be <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d07b      	beq.n	80026d6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d072      	beq.n	80026ce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d008      	beq.n	8002604 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002642:	2b00      	cmp	r3, #0
 8002644:	d043      	beq.n	80026ce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800264c:	2b00      	cmp	r3, #0
 800264e:	d03e      	beq.n	80026ce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002656:	2b60      	cmp	r3, #96	; 0x60
 8002658:	d02b      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x32a>
 800265a:	2b60      	cmp	r3, #96	; 0x60
 800265c:	d82e      	bhi.n	80026bc <HAL_CAN_IRQHandler+0x334>
 800265e:	2b50      	cmp	r3, #80	; 0x50
 8002660:	d022      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x320>
 8002662:	2b50      	cmp	r3, #80	; 0x50
 8002664:	d82a      	bhi.n	80026bc <HAL_CAN_IRQHandler+0x334>
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d019      	beq.n	800269e <HAL_CAN_IRQHandler+0x316>
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d826      	bhi.n	80026bc <HAL_CAN_IRQHandler+0x334>
 800266e:	2b30      	cmp	r3, #48	; 0x30
 8002670:	d010      	beq.n	8002694 <HAL_CAN_IRQHandler+0x30c>
 8002672:	2b30      	cmp	r3, #48	; 0x30
 8002674:	d822      	bhi.n	80026bc <HAL_CAN_IRQHandler+0x334>
 8002676:	2b10      	cmp	r3, #16
 8002678:	d002      	beq.n	8002680 <HAL_CAN_IRQHandler+0x2f8>
 800267a:	2b20      	cmp	r3, #32
 800267c:	d005      	beq.n	800268a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800267e:	e01d      	b.n	80026bc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002688:	e019      	b.n	80026be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f043 0310 	orr.w	r3, r3, #16
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002692:	e014      	b.n	80026be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	f043 0320 	orr.w	r3, r3, #32
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800269c:	e00f      	b.n	80026be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026a6:	e00a      	b.n	80026be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026b0:	e005      	b.n	80026be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026ba:	e000      	b.n	80026be <HAL_CAN_IRQHandler+0x336>
            break;
 80026bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2204      	movs	r2, #4
 80026d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f872 	bl	80027d2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <__NVIC_SetPriorityGrouping+0x40>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <__NVIC_SetPriorityGrouping+0x44>)
 8002812:	4313      	orrs	r3, r2
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	; (8002828 <__NVIC_SetPriorityGrouping+0x40>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00
 800282c:	05fa0000 	.word	0x05fa0000

08002830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <__NVIC_GetPriorityGrouping+0x18>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0307 	and.w	r3, r3, #7
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	2b00      	cmp	r3, #0
 800285c:	db0b      	blt.n	8002876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	4907      	ldr	r1, [pc, #28]	; (8002884 <__NVIC_EnableIRQ+0x38>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2001      	movs	r0, #1
 800286e:	fa00 f202 	lsl.w	r2, r0, r2
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	; (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002954:	d301      	bcc.n	800295a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002956:	2301      	movs	r3, #1
 8002958:	e00f      	b.n	800297a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <SysTick_Config+0x40>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002962:	210f      	movs	r1, #15
 8002964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002968:	f7ff ff8e 	bl	8002888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <SysTick_Config+0x40>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <SysTick_Config+0x40>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff29 	bl	80027e8 <__NVIC_SetPriorityGrouping>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b0:	f7ff ff3e 	bl	8002830 <__NVIC_GetPriorityGrouping>
 80029b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f7ff ff8e 	bl	80028dc <NVIC_EncodePriority>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff5d 	bl	8002888 <__NVIC_SetPriority>
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff31 	bl	800284c <__NVIC_EnableIRQ>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ffa2 	bl	8002944 <SysTick_Config>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a18:	f7ff f8b2 	bl	8001b80 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e099      	b.n	8002b5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a48:	e00f      	b.n	8002a6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4a:	f7ff f899 	bl	8001b80 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d908      	bls.n	8002a6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2203      	movs	r2, #3
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e078      	b.n	8002b5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e8      	bne.n	8002a4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_DMA_Init+0x158>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d107      	bne.n	8002ad4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4313      	orrs	r3, r2
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 0307 	bic.w	r3, r3, #7
 8002aea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d117      	bne.n	8002b2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00e      	beq.n	8002b2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 faa5 	bl	8003060 <DMA_CheckFifoParam>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2240      	movs	r2, #64	; 0x40
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e016      	b.n	8002b5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa5c 	bl	8002ff4 <DMA_CalcBaseAndBitshift>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	223f      	movs	r2, #63	; 0x3f
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	e010803f 	.word	0xe010803f

08002b68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_DMA_Start_IT+0x26>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e048      	b.n	8002c20 <HAL_DMA_Start_IT+0xb8>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d137      	bne.n	8002c12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f9ee 	bl	8002f98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	223f      	movs	r2, #63	; 0x3f
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0216 	orr.w	r2, r2, #22
 8002bd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002be6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0208 	orr.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e005      	b.n	8002c1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d004      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00c      	b.n	8002c60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2205      	movs	r2, #5
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c78:	4b8e      	ldr	r3, [pc, #568]	; (8002eb4 <HAL_DMA_IRQHandler+0x248>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a8e      	ldr	r2, [pc, #568]	; (8002eb8 <HAL_DMA_IRQHandler+0x24c>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	0a9b      	lsrs	r3, r3, #10
 8002c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	2208      	movs	r2, #8
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01a      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0204 	bic.w	r2, r2, #4
 8002cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	2201      	movs	r2, #1
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	f043 0202 	orr.w	r2, r3, #2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	2204      	movs	r2, #4
 8002d14:	409a      	lsls	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d012      	beq.n	8002d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00b      	beq.n	8002d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	2204      	movs	r2, #4
 8002d32:	409a      	lsls	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	f043 0204 	orr.w	r2, r3, #4
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	2210      	movs	r2, #16
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d043      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d03c      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	2210      	movs	r2, #16
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d018      	beq.n	8002dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d024      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
 8002d9a:	e01f      	b.n	8002ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
 8002dac:	e016      	b.n	8002ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0208 	bic.w	r2, r2, #8
 8002dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	2220      	movs	r2, #32
 8002de2:	409a      	lsls	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 808f 	beq.w	8002f0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8087 	beq.w	8002f0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	2220      	movs	r2, #32
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d136      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0216 	bic.w	r2, r2, #22
 8002e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <HAL_DMA_IRQHandler+0x1da>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0208 	bic.w	r2, r2, #8
 8002e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	223f      	movs	r2, #63	; 0x3f
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d07e      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
        }
        return;
 8002e82:	e079      	b.n	8002f78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01d      	beq.n	8002ece <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d031      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
 8002eb0:	e02c      	b.n	8002f0c <HAL_DMA_IRQHandler+0x2a0>
 8002eb2:	bf00      	nop
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d023      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
 8002ecc:	e01e      	b.n	8002f0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10f      	bne.n	8002efc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0210 	bic.w	r2, r2, #16
 8002eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d032      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d022      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2205      	movs	r2, #5
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d307      	bcc.n	8002f54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f2      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x2cc>
 8002f52:	e000      	b.n	8002f56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
 8002f76:	e000      	b.n	8002f7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f78:	bf00      	nop
    }
  }
}
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b40      	cmp	r3, #64	; 0x40
 8002fc4:	d108      	bne.n	8002fd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fd6:	e007      	b.n	8002fe8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	3b10      	subs	r3, #16
 8003004:	4a13      	ldr	r2, [pc, #76]	; (8003054 <DMA_CalcBaseAndBitshift+0x60>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <DMA_CalcBaseAndBitshift+0x64>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d908      	bls.n	8003034 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <DMA_CalcBaseAndBitshift+0x68>)
 800302a:	4013      	ands	r3, r2
 800302c:	1d1a      	adds	r2, r3, #4
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	659a      	str	r2, [r3, #88]	; 0x58
 8003032:	e006      	b.n	8003042 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <DMA_CalcBaseAndBitshift+0x68>)
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	aaaaaaab 	.word	0xaaaaaaab
 8003058:	08011a54 	.word	0x08011a54
 800305c:	fffffc00 	.word	0xfffffc00

08003060 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11f      	bne.n	80030ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d856      	bhi.n	800312e <DMA_CheckFifoParam+0xce>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <DMA_CheckFifoParam+0x28>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	08003099 	.word	0x08003099
 800308c:	080030ab 	.word	0x080030ab
 8003090:	08003099 	.word	0x08003099
 8003094:	0800312f 	.word	0x0800312f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d046      	beq.n	8003132 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e043      	b.n	8003132 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b2:	d140      	bne.n	8003136 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b8:	e03d      	b.n	8003136 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c2:	d121      	bne.n	8003108 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d837      	bhi.n	800313a <DMA_CheckFifoParam+0xda>
 80030ca:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <DMA_CheckFifoParam+0x70>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030e7 	.word	0x080030e7
 80030d8:	080030e1 	.word	0x080030e1
 80030dc:	080030f9 	.word	0x080030f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      break;
 80030e4:	e030      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d025      	beq.n	800313e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f6:	e022      	b.n	800313e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003100:	d11f      	bne.n	8003142 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003106:	e01c      	b.n	8003142 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d903      	bls.n	8003116 <DMA_CheckFifoParam+0xb6>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d003      	beq.n	800311c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003114:	e018      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
      break;
 800311a:	e015      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e00b      	b.n	8003146 <DMA_CheckFifoParam+0xe6>
      break;
 800312e:	bf00      	nop
 8003130:	e00a      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
 8003134:	e008      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
 8003138:	e006      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e004      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e002      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;   
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
    }
  } 
  
  return status; 
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop

08003158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	e175      	b.n	8003464 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003178:	2201      	movs	r2, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	429a      	cmp	r2, r3
 8003192:	f040 8164 	bne.w	800345e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d005      	beq.n	80031ae <HAL_GPIO_Init+0x56>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d130      	bne.n	8003210 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2203      	movs	r2, #3
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e4:	2201      	movs	r2, #1
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 0201 	and.w	r2, r3, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b03      	cmp	r3, #3
 800321a:	d017      	beq.n	800324c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d123      	bne.n	80032a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	08da      	lsrs	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3208      	adds	r2, #8
 8003260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	220f      	movs	r2, #15
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	08da      	lsrs	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3208      	adds	r2, #8
 800329a:	69b9      	ldr	r1, [r7, #24]
 800329c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0203 	and.w	r2, r3, #3
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80be 	beq.w	800345e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e2:	4b66      	ldr	r3, [pc, #408]	; (800347c <HAL_GPIO_Init+0x324>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a65      	ldr	r2, [pc, #404]	; (800347c <HAL_GPIO_Init+0x324>)
 80032e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b63      	ldr	r3, [pc, #396]	; (800347c <HAL_GPIO_Init+0x324>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032fa:	4a61      	ldr	r2, [pc, #388]	; (8003480 <HAL_GPIO_Init+0x328>)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	220f      	movs	r2, #15
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_GPIO_Init+0x32c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d037      	beq.n	8003396 <HAL_GPIO_Init+0x23e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a57      	ldr	r2, [pc, #348]	; (8003488 <HAL_GPIO_Init+0x330>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d031      	beq.n	8003392 <HAL_GPIO_Init+0x23a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a56      	ldr	r2, [pc, #344]	; (800348c <HAL_GPIO_Init+0x334>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d02b      	beq.n	800338e <HAL_GPIO_Init+0x236>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a55      	ldr	r2, [pc, #340]	; (8003490 <HAL_GPIO_Init+0x338>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d025      	beq.n	800338a <HAL_GPIO_Init+0x232>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a54      	ldr	r2, [pc, #336]	; (8003494 <HAL_GPIO_Init+0x33c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01f      	beq.n	8003386 <HAL_GPIO_Init+0x22e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a53      	ldr	r2, [pc, #332]	; (8003498 <HAL_GPIO_Init+0x340>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d019      	beq.n	8003382 <HAL_GPIO_Init+0x22a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_GPIO_Init+0x344>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_GPIO_Init+0x226>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a51      	ldr	r2, [pc, #324]	; (80034a0 <HAL_GPIO_Init+0x348>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00d      	beq.n	800337a <HAL_GPIO_Init+0x222>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a50      	ldr	r2, [pc, #320]	; (80034a4 <HAL_GPIO_Init+0x34c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <HAL_GPIO_Init+0x21e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4f      	ldr	r2, [pc, #316]	; (80034a8 <HAL_GPIO_Init+0x350>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_GPIO_Init+0x21a>
 800336e:	2309      	movs	r3, #9
 8003370:	e012      	b.n	8003398 <HAL_GPIO_Init+0x240>
 8003372:	230a      	movs	r3, #10
 8003374:	e010      	b.n	8003398 <HAL_GPIO_Init+0x240>
 8003376:	2308      	movs	r3, #8
 8003378:	e00e      	b.n	8003398 <HAL_GPIO_Init+0x240>
 800337a:	2307      	movs	r3, #7
 800337c:	e00c      	b.n	8003398 <HAL_GPIO_Init+0x240>
 800337e:	2306      	movs	r3, #6
 8003380:	e00a      	b.n	8003398 <HAL_GPIO_Init+0x240>
 8003382:	2305      	movs	r3, #5
 8003384:	e008      	b.n	8003398 <HAL_GPIO_Init+0x240>
 8003386:	2304      	movs	r3, #4
 8003388:	e006      	b.n	8003398 <HAL_GPIO_Init+0x240>
 800338a:	2303      	movs	r3, #3
 800338c:	e004      	b.n	8003398 <HAL_GPIO_Init+0x240>
 800338e:	2302      	movs	r3, #2
 8003390:	e002      	b.n	8003398 <HAL_GPIO_Init+0x240>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_GPIO_Init+0x240>
 8003396:	2300      	movs	r3, #0
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	f002 0203 	and.w	r2, r2, #3
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	4093      	lsls	r3, r2
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033a8:	4935      	ldr	r1, [pc, #212]	; (8003480 <HAL_GPIO_Init+0x328>)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	3302      	adds	r3, #2
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033b6:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <HAL_GPIO_Init+0x354>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033da:	4a34      	ldr	r2, [pc, #208]	; (80034ac <HAL_GPIO_Init+0x354>)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <HAL_GPIO_Init+0x354>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003404:	4a29      	ldr	r2, [pc, #164]	; (80034ac <HAL_GPIO_Init+0x354>)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800340a:	4b28      	ldr	r3, [pc, #160]	; (80034ac <HAL_GPIO_Init+0x354>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800342e:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <HAL_GPIO_Init+0x354>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003434:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <HAL_GPIO_Init+0x354>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <HAL_GPIO_Init+0x354>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3301      	adds	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b0f      	cmp	r3, #15
 8003468:	f67f ae86 	bls.w	8003178 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40013800 	.word	0x40013800
 8003484:	40020000 	.word	0x40020000
 8003488:	40020400 	.word	0x40020400
 800348c:	40020800 	.word	0x40020800
 8003490:	40020c00 	.word	0x40020c00
 8003494:	40021000 	.word	0x40021000
 8003498:	40021400 	.word	0x40021400
 800349c:	40021800 	.word	0x40021800
 80034a0:	40021c00 	.word	0x40021c00
 80034a4:	40022000 	.word	0x40022000
 80034a8:	40022400 	.word	0x40022400
 80034ac:	40013c00 	.word	0x40013c00

080034b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	887b      	ldrh	r3, [r7, #2]
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e001      	b.n	80034d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
 80034ec:	4613      	mov	r3, r2
 80034ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f0:	787b      	ldrb	r3, [r7, #1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034fc:	e003      	b.n	8003506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034fe:	887b      	ldrh	r3, [r7, #2]
 8003500:	041a      	lsls	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	619a      	str	r2, [r3, #24]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f806 	bl	8003544 <HAL_GPIO_EXTI_Callback>
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e07f      	b.n	800366e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fe92 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2224      	movs	r2, #36	; 0x24
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d107      	bne.n	80035d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e006      	b.n	80035e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d104      	bne.n	80035f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_I2C_Init+0x11c>)
 8003602:	430b      	orrs	r3, r1
 8003604:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003614:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69d9      	ldr	r1, [r3, #28]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	02008000 	.word	0x02008000

0800367c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	461a      	mov	r2, r3
 8003688:	460b      	mov	r3, r1
 800368a:	817b      	strh	r3, [r7, #10]
 800368c:	4613      	mov	r3, r2
 800368e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	f040 80da 	bne.w	8003852 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_I2C_Master_Transmit+0x30>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0d3      	b.n	8003854 <HAL_I2C_Master_Transmit+0x1d8>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036b4:	f7fe fa64 	bl	8001b80 <HAL_GetTick>
 80036b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2319      	movs	r3, #25
 80036c0:	2201      	movs	r2, #1
 80036c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f9e6 	bl	8003a98 <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0be      	b.n	8003854 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2221      	movs	r2, #33	; 0x21
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2210      	movs	r2, #16
 80036e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	893a      	ldrh	r2, [r7, #8]
 80036f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	2bff      	cmp	r3, #255	; 0xff
 8003706:	d90e      	bls.n	8003726 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	22ff      	movs	r2, #255	; 0xff
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	b2da      	uxtb	r2, r3
 8003714:	8979      	ldrh	r1, [r7, #10]
 8003716:	4b51      	ldr	r3, [pc, #324]	; (800385c <HAL_I2C_Master_Transmit+0x1e0>)
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fbd0 	bl	8003ec4 <I2C_TransferConfig>
 8003724:	e06c      	b.n	8003800 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	b2da      	uxtb	r2, r3
 8003736:	8979      	ldrh	r1, [r7, #10]
 8003738:	4b48      	ldr	r3, [pc, #288]	; (800385c <HAL_I2C_Master_Transmit+0x1e0>)
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fbbf 	bl	8003ec4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003746:	e05b      	b.n	8003800 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	6a39      	ldr	r1, [r7, #32]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f9e3 	bl	8003b18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e07b      	b.n	8003854 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d034      	beq.n	8003800 <HAL_I2C_Master_Transmit+0x184>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	2b00      	cmp	r3, #0
 800379c:	d130      	bne.n	8003800 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2180      	movs	r1, #128	; 0x80
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f975 	bl	8003a98 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e04d      	b.n	8003854 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2bff      	cmp	r3, #255	; 0xff
 80037c0:	d90e      	bls.n	80037e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fb73 	bl	8003ec4 <I2C_TransferConfig>
 80037de:	e00f      	b.n	8003800 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	8979      	ldrh	r1, [r7, #10]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fb62 	bl	8003ec4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d19e      	bne.n	8003748 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	6a39      	ldr	r1, [r7, #32]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f9c2 	bl	8003b98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e01a      	b.n	8003854 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2220      	movs	r2, #32
 8003824:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_I2C_Master_Transmit+0x1e4>)
 8003832:	400b      	ands	r3, r1
 8003834:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
  }
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	80002000 	.word	0x80002000
 8003860:	fe00e800 	.word	0xfe00e800

08003864 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	461a      	mov	r2, r3
 8003870:	460b      	mov	r3, r1
 8003872:	817b      	strh	r3, [r7, #10]
 8003874:	4613      	mov	r3, r2
 8003876:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b20      	cmp	r3, #32
 8003882:	f040 80db 	bne.w	8003a3c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_I2C_Master_Receive+0x30>
 8003890:	2302      	movs	r3, #2
 8003892:	e0d4      	b.n	8003a3e <HAL_I2C_Master_Receive+0x1da>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800389c:	f7fe f970 	bl	8001b80 <HAL_GetTick>
 80038a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2319      	movs	r3, #25
 80038a8:	2201      	movs	r2, #1
 80038aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f8f2 	bl	8003a98 <I2C_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e0bf      	b.n	8003a3e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2222      	movs	r2, #34	; 0x22
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2210      	movs	r2, #16
 80038ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	893a      	ldrh	r2, [r7, #8]
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2bff      	cmp	r3, #255	; 0xff
 80038ee:	d90e      	bls.n	800390e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	22ff      	movs	r2, #255	; 0xff
 80038f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	8979      	ldrh	r1, [r7, #10]
 80038fe:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <HAL_I2C_Master_Receive+0x1e4>)
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fadc 	bl	8003ec4 <I2C_TransferConfig>
 800390c:	e06d      	b.n	80039ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	b2da      	uxtb	r2, r3
 800391e:	8979      	ldrh	r1, [r7, #10]
 8003920:	4b49      	ldr	r3, [pc, #292]	; (8003a48 <HAL_I2C_Master_Receive+0x1e4>)
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 facb 	bl	8003ec4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800392e:	e05c      	b.n	80039ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	6a39      	ldr	r1, [r7, #32]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f96b 	bl	8003c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e07c      	b.n	8003a3e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d034      	beq.n	80039ea <HAL_I2C_Master_Receive+0x186>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	d130      	bne.n	80039ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	2200      	movs	r2, #0
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f880 	bl	8003a98 <I2C_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e04d      	b.n	8003a3e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2bff      	cmp	r3, #255	; 0xff
 80039aa:	d90e      	bls.n	80039ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	22ff      	movs	r2, #255	; 0xff
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fa7e 	bl	8003ec4 <I2C_TransferConfig>
 80039c8:	e00f      	b.n	80039ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	8979      	ldrh	r1, [r7, #10]
 80039dc:	2300      	movs	r3, #0
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fa6d 	bl	8003ec4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d19d      	bne.n	8003930 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	6a39      	ldr	r1, [r7, #32]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f8cd 	bl	8003b98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e01a      	b.n	8003a3e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <HAL_I2C_Master_Receive+0x1e8>)
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	80002400 	.word	0x80002400
 8003a4c:	fe00e800 	.word	0xfe00e800

08003a50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d103      	bne.n	8003a6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d007      	beq.n	8003a8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	619a      	str	r2, [r3, #24]
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa8:	e022      	b.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab0:	d01e      	beq.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7fe f865 	bl	8001b80 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d113      	bne.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	f043 0220 	orr.w	r2, r3, #32
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e00f      	b.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4013      	ands	r3, r2
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d0cd      	beq.n	8003aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b24:	e02c      	b.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f8ea 	bl	8003d04 <I2C_IsErrorOccurred>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e02a      	b.n	8003b90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b40:	d01e      	beq.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b42:	f7fe f81d 	bl	8001b80 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d113      	bne.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e007      	b.n	8003b90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d1cb      	bne.n	8003b26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba4:	e028      	b.n	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f8aa 	bl	8003d04 <I2C_IsErrorOccurred>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e026      	b.n	8003c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7fd ffe1 	bl	8001b80 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d113      	bne.n	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e007      	b.n	8003c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d1cf      	bne.n	8003ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c1c:	e064      	b.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f86e 	bl	8003d04 <I2C_IsErrorOccurred>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e062      	b.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d138      	bne.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d105      	bne.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e04e      	b.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d107      	bne.n	8003c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2210      	movs	r2, #16
 8003c6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2204      	movs	r2, #4
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
 8003c76:	e002      	b.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2220      	movs	r2, #32
 8003c84:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003c92:	400b      	ands	r3, r1
 8003c94:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e022      	b.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7fd ff65 	bl	8001b80 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10f      	bne.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e007      	b.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d193      	bne.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	fe00e800 	.word	0xfe00e800

08003d04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d068      	beq.n	8003e02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2210      	movs	r2, #16
 8003d36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d38:	e049      	b.n	8003dce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d40:	d045      	beq.n	8003dce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fd ff1d 	bl	8001b80 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <I2C_IsErrorOccurred+0x54>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d13a      	bne.n	8003dce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7a:	d121      	bne.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d82:	d01d      	beq.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d01a      	beq.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d9a:	f7fd fef1 	bl	8001b80 <HAL_GetTick>
 8003d9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da0:	e00e      	b.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003da2:	f7fd feed 	bl	8001b80 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b19      	cmp	r3, #25
 8003dae:	d907      	bls.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f043 0320 	orr.w	r3, r3, #32
 8003db6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003dbe:	e006      	b.n	8003dce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d1e9      	bne.n	8003da2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d003      	beq.n	8003de4 <I2C_IsErrorOccurred+0xe0>
 8003ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0aa      	beq.n	8003d3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2220      	movs	r2, #32
 8003df2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	f043 0304 	orr.w	r3, r3, #4
 8003dfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f043 0308 	orr.w	r3, r3, #8
 8003e3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01c      	beq.n	8003eb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f7ff fde9 	bl	8003a50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <I2C_IsErrorOccurred+0x1bc>)
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3728      	adds	r7, #40	; 0x28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	fe00e800 	.word	0xfe00e800

08003ec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	817b      	strh	r3, [r7, #10]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ed6:	897b      	ldrh	r3, [r7, #10]
 8003ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003edc:	7a7b      	ldrb	r3, [r7, #9]
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ee4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	0d5b      	lsrs	r3, r3, #21
 8003efe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <I2C_TransferConfig+0x60>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	43db      	mvns	r3, r3
 8003f08:	ea02 0103 	and.w	r1, r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	03ff63ff 	.word	0x03ff63ff

08003f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d138      	bne.n	8003fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e032      	b.n	8003fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2224      	movs	r2, #36	; 0x24
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d139      	bne.n	8004048 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e033      	b.n	800404a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2224      	movs	r2, #36	; 0x24
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0201 	bic.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004010:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004058:	b08f      	sub	sp, #60	; 0x3c
 800405a:	af0a      	add	r7, sp, #40	; 0x28
 800405c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e116      	b.n	8004296 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f00b fde6 	bl	800fc54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2203      	movs	r2, #3
 800408c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f004 ffdb 	bl	8009062 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	687e      	ldr	r6, [r7, #4]
 80040b4:	466d      	mov	r5, sp
 80040b6:	f106 0410 	add.w	r4, r6, #16
 80040ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80040ca:	1d33      	adds	r3, r6, #4
 80040cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ce:	6838      	ldr	r0, [r7, #0]
 80040d0:	f004 febc 	bl	8008e4c <USB_CoreInit>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0d7      	b.n	8004296 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f004 ffc9 	bl	8009084 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	e04a      	b.n	800418e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	333d      	adds	r3, #61	; 0x3d
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	333c      	adds	r3, #60	; 0x3c
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	b298      	uxth	r0, r3
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	3344      	adds	r3, #68	; 0x44
 8004134:	4602      	mov	r2, r0
 8004136:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	3340      	adds	r3, #64	; 0x40
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	3348      	adds	r3, #72	; 0x48
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	334c      	adds	r3, #76	; 0x4c
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004174:	7bfa      	ldrb	r2, [r7, #15]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	3354      	adds	r3, #84	; 0x54
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	3301      	adds	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	429a      	cmp	r2, r3
 8004196:	d3af      	bcc.n	80040f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
 800419c:	e044      	b.n	8004228 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041b4:	7bfa      	ldrb	r2, [r7, #15]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041c6:	7bfa      	ldrb	r2, [r7, #15]
 80041c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041ca:	7bfa      	ldrb	r2, [r7, #15]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	3301      	adds	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	429a      	cmp	r2, r3
 8004230:	d3b5      	bcc.n	800419e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	687e      	ldr	r6, [r7, #4]
 800423a:	466d      	mov	r5, sp
 800423c:	f106 0410 	add.w	r4, r6, #16
 8004240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800424c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004250:	1d33      	adds	r3, r6, #4
 8004252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004254:	6838      	ldr	r0, [r7, #0]
 8004256:	f004 ff61 	bl	800911c <USB_DevInit>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e014      	b.n	8004296 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2b01      	cmp	r3, #1
 8004282:	d102      	bne.n	800428a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f001 f97b 	bl	8005580 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f006 f8af 	bl	800a3f2 <USB_DevDisconnect>

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800429e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_PCD_Start+0x16>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e012      	b.n	80042da <HAL_PCD_Start+0x3c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f004 febd 	bl	8009040 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f006 f870 	bl	800a3b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042e2:	b590      	push	{r4, r7, lr}
 80042e4:	b08d      	sub	sp, #52	; 0x34
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f006 f92e 	bl	800a55a <USB_GetMode>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 84b7 	bne.w	8004c74 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f006 f892 	bl	800a434 <USB_ReadInterrupts>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 84ad 	beq.w	8004c72 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f006 f87f 	bl	800a434 <USB_ReadInterrupts>
 8004336:	4603      	mov	r3, r0
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d107      	bne.n	8004350 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f002 0202 	and.w	r2, r2, #2
 800434e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f006 f86d 	bl	800a434 <USB_ReadInterrupts>
 800435a:	4603      	mov	r3, r0
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b10      	cmp	r3, #16
 8004362:	d161      	bne.n	8004428 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0210 	bic.w	r2, r2, #16
 8004372:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f003 020f 	and.w	r2, r3, #15
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4413      	add	r3, r2
 8004390:	3304      	adds	r3, #4
 8004392:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	0c5b      	lsrs	r3, r3, #17
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	2b02      	cmp	r3, #2
 800439e:	d124      	bne.n	80043ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d035      	beq.n	8004418 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	091b      	lsrs	r3, r3, #4
 80043b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	6a38      	ldr	r0, [r7, #32]
 80043c0:	f005 fea4 	bl	800a10c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	091b      	lsrs	r3, r3, #4
 80043cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d0:	441a      	add	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e2:	441a      	add	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	621a      	str	r2, [r3, #32]
 80043e8:	e016      	b.n	8004418 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	0c5b      	lsrs	r3, r3, #17
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d110      	bne.n	8004418 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043fc:	2208      	movs	r2, #8
 80043fe:	4619      	mov	r1, r3
 8004400:	6a38      	ldr	r0, [r7, #32]
 8004402:	f005 fe83 	bl	800a10c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004412:	441a      	add	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0210 	orr.w	r2, r2, #16
 8004426:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f006 f801 	bl	800a434 <USB_ReadInterrupts>
 8004432:	4603      	mov	r3, r0
 8004434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004438:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800443c:	f040 80a7 	bne.w	800458e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f006 f806 	bl	800a45a <USB_ReadDevAllOutEpInterrupt>
 800444e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004450:	e099      	b.n	8004586 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 808e 	beq.w	800457a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	4611      	mov	r1, r2
 8004468:	4618      	mov	r0, r3
 800446a:	f006 f82a 	bl	800a4c2 <USB_ReadDevOutEPInterrupt>
 800446e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00c      	beq.n	8004494 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	461a      	mov	r2, r3
 8004488:	2301      	movs	r3, #1
 800448a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800448c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fef0 	bl	8005274 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	461a      	mov	r2, r3
 80044ac:	2308      	movs	r3, #8
 80044ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 ffc6 	bl	8005444 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	461a      	mov	r2, r3
 80044d0:	2310      	movs	r3, #16
 80044d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d030      	beq.n	8004540 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d109      	bne.n	80044fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	4413      	add	r3, r2
 8004510:	3304      	adds	r3, #4
 8004512:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	78db      	ldrb	r3, [r3, #3]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d108      	bne.n	800452e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2200      	movs	r2, #0
 8004520:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	b2db      	uxtb	r3, r3
 8004526:	4619      	mov	r1, r3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f00b fcb7 	bl	800fe9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	461a      	mov	r2, r3
 800453c:	2302      	movs	r3, #2
 800453e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	461a      	mov	r2, r3
 8004558:	2320      	movs	r3, #32
 800455a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004572:	461a      	mov	r2, r3
 8004574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004578:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	3301      	adds	r3, #1
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	2b00      	cmp	r3, #0
 800458a:	f47f af62 	bne.w	8004452 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f005 ff4e 	bl	800a434 <USB_ReadInterrupts>
 8004598:	4603      	mov	r3, r0
 800459a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045a2:	f040 80db 	bne.w	800475c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f005 ff6f 	bl	800a48e <USB_ReadDevAllInEpInterrupt>
 80045b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045b6:	e0cd      	b.n	8004754 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80c2 	beq.w	8004748 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f005 ff95 	bl	800a4fe <USB_ReadDevInEPInterrupt>
 80045d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d057      	beq.n	8004690 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	2201      	movs	r2, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69f9      	ldr	r1, [r7, #28]
 80045fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004600:	4013      	ands	r3, r2
 8004602:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	461a      	mov	r2, r3
 8004612:	2301      	movs	r3, #1
 8004614:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d132      	bne.n	8004684 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	4613      	mov	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	334c      	adds	r3, #76	; 0x4c
 800462e:	6819      	ldr	r1, [r3, #0]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4403      	add	r3, r0
 800463e:	3348      	adds	r3, #72	; 0x48
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4419      	add	r1, r3
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4403      	add	r3, r0
 8004652:	334c      	adds	r3, #76	; 0x4c
 8004654:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d113      	bne.n	8004684 <HAL_PCD_IRQHandler+0x3a2>
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	3354      	adds	r3, #84	; 0x54
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d108      	bne.n	8004684 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800467c:	461a      	mov	r2, r3
 800467e:	2101      	movs	r1, #1
 8004680:	f005 ff9e 	bl	800a5c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	b2db      	uxtb	r3, r3
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f00b fb81 	bl	800fd92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	461a      	mov	r2, r3
 80046a8:	2308      	movs	r3, #8
 80046aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	461a      	mov	r2, r3
 80046c4:	2310      	movs	r3, #16
 80046c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046de:	461a      	mov	r2, r3
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d023      	beq.n	8004736 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f0:	6a38      	ldr	r0, [r7, #32]
 80046f2:	f004 fe71 	bl	80093d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	3338      	adds	r3, #56	; 0x38
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	3304      	adds	r3, #4
 8004708:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	78db      	ldrb	r3, [r3, #3]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d108      	bne.n	8004724 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2200      	movs	r2, #0
 8004716:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	b2db      	uxtb	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f00b fbce 	bl	800fec0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	461a      	mov	r2, r3
 8004732:	2302      	movs	r3, #2
 8004734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fd08 	bl	8005158 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	3301      	adds	r3, #1
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	f47f af2e 	bne.w	80045b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f005 fe67 	bl	800a434 <USB_ReadInterrupts>
 8004766:	4603      	mov	r3, r0
 8004768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800476c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004770:	d122      	bne.n	80047b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004780:	f023 0301 	bic.w	r3, r3, #1
 8004784:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800478c:	2b01      	cmp	r3, #1
 800478e:	d108      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004798:	2100      	movs	r1, #0
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f00b fd48 	bl	8010230 <HAL_PCDEx_LPM_Callback>
 80047a0:	e002      	b.n	80047a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f00b fb6c 	bl	800fe80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f005 fe39 	bl	800a434 <USB_ReadInterrupts>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047cc:	d112      	bne.n	80047f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d102      	bne.n	80047e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f00b fb28 	bl	800fe34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f005 fe1b 	bl	800a434 <USB_ReadInterrupts>
 80047fe:	4603      	mov	r3, r0
 8004800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004808:	d121      	bne.n	800484e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004818:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d111      	bne.n	8004848 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	f003 020f 	and.w	r2, r3, #15
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800483e:	2101      	movs	r1, #1
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f00b fcf5 	bl	8010230 <HAL_PCDEx_LPM_Callback>
 8004846:	e002      	b.n	800484e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f00b faf3 	bl	800fe34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f005 fdee 	bl	800a434 <USB_ReadInterrupts>
 8004858:	4603      	mov	r3, r0
 800485a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	f040 80b7 	bne.w	80049d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2110      	movs	r1, #16
 8004880:	4618      	mov	r0, r3
 8004882:	f004 fda9 	bl	80093d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004886:	2300      	movs	r3, #0
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488a:	e046      	b.n	800491a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	461a      	mov	r2, r3
 800489a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800489e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	461a      	mov	r2, r3
 80048ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	440a      	add	r2, r1
 800490a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004912:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	3301      	adds	r3, #1
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004920:	429a      	cmp	r2, r3
 8004922:	d3b3      	bcc.n	800488c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004932:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004936:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	2b00      	cmp	r3, #0
 800493e:	d016      	beq.n	800496e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004950:	f043 030b 	orr.w	r3, r3, #11
 8004954:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004966:	f043 030b 	orr.w	r3, r3, #11
 800496a:	6453      	str	r3, [r2, #68]	; 0x44
 800496c:	e015      	b.n	800499a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497c:	4619      	mov	r1, r3
 800497e:	f242 032b 	movw	r3, #8235	; 0x202b
 8004982:	4313      	orrs	r3, r2
 8004984:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004994:	f043 030b 	orr.w	r3, r3, #11
 8004998:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049be:	461a      	mov	r2, r3
 80049c0:	f005 fdfe 	bl	800a5c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80049d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f005 fd2b 	bl	800a434 <USB_ReadInterrupts>
 80049de:	4603      	mov	r3, r0
 80049e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d124      	bne.n	8004a34 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f005 fdc2 	bl	800a578 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f004 fd6a 	bl	80094d2 <USB_GetDevSpeed>
 80049fe:	4603      	mov	r3, r0
 8004a00:	461a      	mov	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681c      	ldr	r4, [r3, #0]
 8004a0a:	f001 fa7d 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 8004a0e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f004 fa6f 	bl	8008efc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f00b f9df 	bl	800fde2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004a32:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f005 fcfb 	bl	800a434 <USB_ReadInterrupts>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d10a      	bne.n	8004a5e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f00b f9bc 	bl	800fdc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f002 0208 	and.w	r2, r2, #8
 8004a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f005 fce6 	bl	800a434 <USB_ReadInterrupts>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b80      	cmp	r3, #128	; 0x80
 8004a70:	d122      	bne.n	8004ab8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a7e:	2301      	movs	r3, #1
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
 8004a82:	e014      	b.n	8004aae <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a88:	4613      	mov	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fb27 	bl	80050f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	3301      	adds	r3, #1
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d3e5      	bcc.n	8004a84 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f005 fcb9 	bl	800a434 <USB_ReadInterrupts>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004acc:	d13b      	bne.n	8004b46 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ace:	2301      	movs	r3, #1
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad2:	e02b      	b.n	8004b2c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae8:	4613      	mov	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	3340      	adds	r3, #64	; 0x40
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d115      	bne.n	8004b26 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004afa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	da12      	bge.n	8004b26 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	333f      	adds	r3, #63	; 0x3f
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fae8 	bl	80050f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	3301      	adds	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d3ce      	bcc.n	8004ad4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f005 fc72 	bl	800a434 <USB_ReadInterrupts>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b5a:	d155      	bne.n	8004c08 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b60:	e045      	b.n	8004bee <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	4613      	mov	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d12e      	bne.n	8004be8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	da2b      	bge.n	8004be8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004b9c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d121      	bne.n	8004be8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba8:	4613      	mov	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be4:	6053      	str	r3, [r2, #4]
            break;
 8004be6:	e007      	b.n	8004bf8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	3301      	adds	r3, #1
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d3b4      	bcc.n	8004b62 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f005 fc11 	bl	800a434 <USB_ReadInterrupts>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d10a      	bne.n	8004c34 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f00b f960 	bl	800fee4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f005 fbfb 	bl	800a434 <USB_ReadInterrupts>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d115      	bne.n	8004c74 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f00b f950 	bl	800ff00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	605a      	str	r2, [r3, #4]
 8004c70:	e000      	b.n	8004c74 <HAL_PCD_IRQHandler+0x992>
      return;
 8004c72:	bf00      	nop
    }
  }
}
 8004c74:	3734      	adds	r7, #52	; 0x34
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd90      	pop	{r4, r7, pc}

08004c7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_PCD_SetAddress+0x1a>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e013      	b.n	8004cbc <HAL_PCD_SetAddress+0x42>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f005 fb59 	bl	800a364 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	4608      	mov	r0, r1
 8004cce:	4611      	mov	r1, r2
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	70fb      	strb	r3, [r7, #3]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	803b      	strh	r3, [r7, #0]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	da0f      	bge.n	8004d0a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	f003 020f 	and.w	r2, r3, #15
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	3338      	adds	r3, #56	; 0x38
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3304      	adds	r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	705a      	strb	r2, [r3, #1]
 8004d08:	e00f      	b.n	8004d2a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	f003 020f 	and.w	r2, r3, #15
 8004d10:	4613      	mov	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4413      	add	r3, r2
 8004d20:	3304      	adds	r3, #4
 8004d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d36:	883a      	ldrh	r2, [r7, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	78ba      	ldrb	r2, [r7, #2]
 8004d40:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d54:	78bb      	ldrb	r3, [r7, #2]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d102      	bne.n	8004d60 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_PCD_EP_Open+0xaa>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e00e      	b.n	8004d8c <HAL_PCD_EP_Open+0xc8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68f9      	ldr	r1, [r7, #12]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f004 fbcd 	bl	800951c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	da0f      	bge.n	8004dc8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	f003 020f 	and.w	r2, r3, #15
 8004dae:	4613      	mov	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	3338      	adds	r3, #56	; 0x38
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	705a      	strb	r2, [r3, #1]
 8004dc6:	e00f      	b.n	8004de8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	f003 020f 	and.w	r2, r3, #15
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	3304      	adds	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_PCD_EP_Close+0x6e>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e00e      	b.n	8004e20 <HAL_PCD_EP_Close+0x8c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68f9      	ldr	r1, [r7, #12]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f004 fc0b 	bl	800962c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	607a      	str	r2, [r7, #4]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	460b      	mov	r3, r1
 8004e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e38:	7afb      	ldrb	r3, [r7, #11]
 8004e3a:	f003 020f 	and.w	r2, r3, #15
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3304      	adds	r3, #4
 8004e50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d102      	bne.n	8004e84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e84:	7afb      	ldrb	r3, [r7, #11]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6979      	ldr	r1, [r7, #20]
 8004e9c:	f004 fef2 	bl	8009c84 <USB_EP0StartXfer>
 8004ea0:	e008      	b.n	8004eb4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	f004 fc98 	bl	80097e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 020f 	and.w	r2, r3, #15
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004ee0:	681b      	ldr	r3, [r3, #0]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	460b      	mov	r3, r1
 8004efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efe:	7afb      	ldrb	r3, [r7, #11]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	3338      	adds	r3, #56	; 0x38
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	3304      	adds	r3, #4
 8004f14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d102      	bne.n	8004f48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f48:	7afb      	ldrb	r3, [r7, #11]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	f004 fe90 	bl	8009c84 <USB_EP0StartXfer>
 8004f64:	e008      	b.n	8004f78 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	6979      	ldr	r1, [r7, #20]
 8004f74:	f004 fc36 	bl	80097e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d901      	bls.n	8004fa0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e050      	b.n	8005042 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da0f      	bge.n	8004fc8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	f003 020f 	and.w	r2, r3, #15
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	3338      	adds	r3, #56	; 0x38
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	705a      	strb	r2, [r3, #1]
 8004fc6:	e00d      	b.n	8004fe4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	3304      	adds	r3, #4
 8004fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_PCD_EP_SetStall+0x82>
 8005000:	2302      	movs	r3, #2
 8005002:	e01e      	b.n	8005042 <HAL_PCD_EP_SetStall+0xc0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	4618      	mov	r0, r3
 8005014:	f005 f8d2 	bl	800a1bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	b2d9      	uxtb	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005032:	461a      	mov	r2, r3
 8005034:	f005 fac4 	bl	800a5c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d901      	bls.n	8005068 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e042      	b.n	80050ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800506c:	2b00      	cmp	r3, #0
 800506e:	da0f      	bge.n	8005090 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 020f 	and.w	r2, r3, #15
 8005076:	4613      	mov	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	3338      	adds	r3, #56	; 0x38
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4413      	add	r3, r2
 8005084:	3304      	adds	r3, #4
 8005086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	705a      	strb	r2, [r3, #1]
 800508e:	e00f      	b.n	80050b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	f003 020f 	and.w	r2, r3, #15
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	3304      	adds	r3, #4
 80050a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_PCD_EP_ClrStall+0x86>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e00e      	b.n	80050ee <HAL_PCD_EP_ClrStall+0xa4>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68f9      	ldr	r1, [r7, #12]
 80050de:	4618      	mov	r0, r3
 80050e0:	f005 f8da 	bl	800a298 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005106:	2b00      	cmp	r3, #0
 8005108:	da0c      	bge.n	8005124 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	3338      	adds	r3, #56	; 0x38
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	3304      	adds	r3, #4
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e00c      	b.n	800513e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	3304      	adds	r3, #4
 800513c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	4618      	mov	r0, r3
 8005146:	f004 fef9 	bl	8009f3c <USB_EPStopXfer>
 800514a:	4603      	mov	r3, r0
 800514c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800514e:	7afb      	ldrb	r3, [r7, #11]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af02      	add	r7, sp, #8
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	4613      	mov	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	3338      	adds	r3, #56	; 0x38
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	4413      	add	r3, r2
 800517c:	3304      	adds	r3, #4
 800517e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	429a      	cmp	r2, r3
 800518a:	d901      	bls.n	8005190 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e06c      	b.n	800526a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d902      	bls.n	80051ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	3303      	adds	r3, #3
 80051b0:	089b      	lsrs	r3, r3, #2
 80051b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051b4:	e02b      	b.n	800520e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d902      	bls.n	80051d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3303      	adds	r3, #3
 80051d6:	089b      	lsrs	r3, r3, #2
 80051d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6919      	ldr	r1, [r3, #16]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	4603      	mov	r3, r0
 80051f0:	6978      	ldr	r0, [r7, #20]
 80051f2:	f004 ff4d 	bl	800a090 <USB_WritePacket>

    ep->xfer_buff  += len;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	441a      	add	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	441a      	add	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	429a      	cmp	r2, r3
 8005222:	d809      	bhi.n	8005238 <PCD_WriteEmptyTxFifo+0xe0>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800522c:	429a      	cmp	r2, r3
 800522e:	d203      	bcs.n	8005238 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1be      	bne.n	80051b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	429a      	cmp	r2, r3
 8005242:	d811      	bhi.n	8005268 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	2201      	movs	r2, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	43db      	mvns	r3, r3
 800525e:	6939      	ldr	r1, [r7, #16]
 8005260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005264:	4013      	ands	r3, r2
 8005266:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	333c      	adds	r3, #60	; 0x3c
 800528c:	3304      	adds	r3, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d17b      	bne.n	80053a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d015      	beq.n	80052e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4a61      	ldr	r2, [pc, #388]	; (800543c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	f240 80b9 	bls.w	8005430 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80b3 	beq.w	8005430 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	461a      	mov	r2, r3
 80052d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052dc:	6093      	str	r3, [r2, #8]
 80052de:	e0a7      	b.n	8005430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	461a      	mov	r2, r3
 80052f8:	2320      	movs	r3, #32
 80052fa:	6093      	str	r3, [r2, #8]
 80052fc:	e098      	b.n	8005430 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	f040 8093 	bne.w	8005430 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	4a4b      	ldr	r2, [pc, #300]	; (800543c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d90f      	bls.n	8005332 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	461a      	mov	r2, r3
 800532a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532e:	6093      	str	r3, [r2, #8]
 8005330:	e07e      	b.n	8005430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	4613      	mov	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4413      	add	r3, r2
 8005344:	3304      	adds	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	0159      	lsls	r1, r3, #5
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	440b      	add	r3, r1
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d114      	bne.n	8005394 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800537c:	461a      	mov	r2, r3
 800537e:	2101      	movs	r1, #1
 8005380:	f005 f91e 	bl	800a5c0 <USB_EP0_OutStart>
 8005384:	e006      	b.n	8005394 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	441a      	add	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f00a fcde 	bl	800fd5c <HAL_PCD_DataOutStageCallback>
 80053a0:	e046      	b.n	8005430 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	4a26      	ldr	r2, [pc, #152]	; (8005440 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d124      	bne.n	80053f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	461a      	mov	r2, r3
 80053c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c6:	6093      	str	r3, [r2, #8]
 80053c8:	e032      	b.n	8005430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e0:	461a      	mov	r2, r3
 80053e2:	2320      	movs	r3, #32
 80053e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f00a fcb5 	bl	800fd5c <HAL_PCD_DataOutStageCallback>
 80053f2:	e01d      	b.n	8005430 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d114      	bne.n	8005424 <PCD_EP_OutXfrComplete_int+0x1b0>
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	4613      	mov	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d108      	bne.n	8005424 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800541c:	461a      	mov	r2, r3
 800541e:	2100      	movs	r1, #0
 8005420:	f005 f8ce 	bl	800a5c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f00a fc96 	bl	800fd5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	4f54300a 	.word	0x4f54300a
 8005440:	4f54310a 	.word	0x4f54310a

08005444 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	333c      	adds	r3, #60	; 0x3c
 800545c:	3304      	adds	r3, #4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4a15      	ldr	r2, [pc, #84]	; (80054cc <PCD_EP_OutSetupPacket_int+0x88>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d90e      	bls.n	8005498 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005480:	2b00      	cmp	r3, #0
 8005482:	d009      	beq.n	8005498 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	461a      	mov	r2, r3
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f00a fc4d 	bl	800fd38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <PCD_EP_OutSetupPacket_int+0x88>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d90c      	bls.n	80054c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d108      	bne.n	80054c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054b8:	461a      	mov	r2, r3
 80054ba:	2101      	movs	r1, #1
 80054bc:	f005 f880 	bl	800a5c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	4f54300a 	.word	0x4f54300a

080054d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
 80054dc:	4613      	mov	r3, r2
 80054de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d107      	bne.n	80054fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054ee:	883b      	ldrh	r3, [r7, #0]
 80054f0:	0419      	lsls	r1, r3, #16
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
 80054fc:	e028      	b.n	8005550 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4413      	add	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	e00d      	b.n	800552e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	3340      	adds	r3, #64	; 0x40
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	4413      	add	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	3301      	adds	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	7bfa      	ldrb	r2, [r7, #15]
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	3b01      	subs	r3, #1
 8005534:	429a      	cmp	r2, r3
 8005536:	d3ec      	bcc.n	8005512 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005538:	883b      	ldrh	r3, [r7, #0]
 800553a:	0418      	lsls	r0, r3, #16
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6819      	ldr	r1, [r3, #0]
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	3b01      	subs	r3, #1
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	4302      	orrs	r2, r0
 8005548:	3340      	adds	r3, #64	; 0x40
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	460b      	mov	r3, r1
 8005568:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	887a      	ldrh	r2, [r7, #2]
 8005570:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	10000003 	.word	0x10000003

080055c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80055d0:	2300      	movs	r3, #0
 80055d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e29b      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8087 	beq.w	80056fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055ec:	4b96      	ldr	r3, [pc, #600]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 030c 	and.w	r3, r3, #12
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d00c      	beq.n	8005612 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055f8:	4b93      	ldr	r3, [pc, #588]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b08      	cmp	r3, #8
 8005602:	d112      	bne.n	800562a <HAL_RCC_OscConfig+0x62>
 8005604:	4b90      	ldr	r3, [pc, #576]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005610:	d10b      	bne.n	800562a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005612:	4b8d      	ldr	r3, [pc, #564]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d06c      	beq.n	80056f8 <HAL_RCC_OscConfig+0x130>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d168      	bne.n	80056f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e275      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005632:	d106      	bne.n	8005642 <HAL_RCC_OscConfig+0x7a>
 8005634:	4b84      	ldr	r3, [pc, #528]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a83      	ldr	r2, [pc, #524]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	e02e      	b.n	80056a0 <HAL_RCC_OscConfig+0xd8>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <HAL_RCC_OscConfig+0x9c>
 800564a:	4b7f      	ldr	r3, [pc, #508]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7e      	ldr	r2, [pc, #504]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4b7c      	ldr	r3, [pc, #496]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a7b      	ldr	r2, [pc, #492]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 800565c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e01d      	b.n	80056a0 <HAL_RCC_OscConfig+0xd8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0xc0>
 800566e:	4b76      	ldr	r3, [pc, #472]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a75      	ldr	r2, [pc, #468]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b73      	ldr	r3, [pc, #460]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a72      	ldr	r2, [pc, #456]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0xd8>
 8005688:	4b6f      	ldr	r3, [pc, #444]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6e      	ldr	r2, [pc, #440]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 800568e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b6c      	ldr	r3, [pc, #432]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a6b      	ldr	r2, [pc, #428]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 800569a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800569e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fc fa6a 	bl	8001b80 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fc fa66 	bl	8001b80 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e229      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	4b61      	ldr	r3, [pc, #388]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0xe8>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fc fa56 	bl	8001b80 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fc fa52 	bl	8001b80 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	; 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e215      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ea:	4b57      	ldr	r3, [pc, #348]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x110>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d069      	beq.n	80057da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005706:	4b50      	ldr	r3, [pc, #320]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005712:	4b4d      	ldr	r3, [pc, #308]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	2b08      	cmp	r3, #8
 800571c:	d11c      	bne.n	8005758 <HAL_RCC_OscConfig+0x190>
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d116      	bne.n	8005758 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572a:	4b47      	ldr	r3, [pc, #284]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_RCC_OscConfig+0x17a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e1e9      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	4b41      	ldr	r3, [pc, #260]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	493d      	ldr	r1, [pc, #244]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005752:	4313      	orrs	r3, r2
 8005754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005756:	e040      	b.n	80057da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d023      	beq.n	80057a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005760:	4b39      	ldr	r3, [pc, #228]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a38      	ldr	r2, [pc, #224]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fc fa08 	bl	8001b80 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005774:	f7fc fa04 	bl	8001b80 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e1c7      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005786:	4b30      	ldr	r3, [pc, #192]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005792:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4929      	ldr	r1, [pc, #164]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]
 80057a6:	e018      	b.n	80057da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a8:	4b27      	ldr	r3, [pc, #156]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a26      	ldr	r2, [pc, #152]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80057ae:	f023 0301 	bic.w	r3, r3, #1
 80057b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fc f9e4 	bl	8001b80 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057bc:	f7fc f9e0 	bl	8001b80 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e1a3      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ce:	4b1e      	ldr	r3, [pc, #120]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d038      	beq.n	8005858 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d019      	beq.n	8005822 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ee:	4b16      	ldr	r3, [pc, #88]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80057f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f2:	4a15      	ldr	r2, [pc, #84]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fa:	f7fc f9c1 	bl	8001b80 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005802:	f7fc f9bd 	bl	8001b80 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e180      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0f0      	beq.n	8005802 <HAL_RCC_OscConfig+0x23a>
 8005820:	e01a      	b.n	8005858 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005822:	4b09      	ldr	r3, [pc, #36]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005826:	4a08      	ldr	r2, [pc, #32]	; (8005848 <HAL_RCC_OscConfig+0x280>)
 8005828:	f023 0301 	bic.w	r3, r3, #1
 800582c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582e:	f7fc f9a7 	bl	8001b80 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005834:	e00a      	b.n	800584c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005836:	f7fc f9a3 	bl	8001b80 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d903      	bls.n	800584c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e166      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
 8005848:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800584c:	4b92      	ldr	r3, [pc, #584]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 800584e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ee      	bne.n	8005836 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80a4 	beq.w	80059ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005866:	4b8c      	ldr	r3, [pc, #560]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10d      	bne.n	800588e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005872:	4b89      	ldr	r3, [pc, #548]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	4a88      	ldr	r2, [pc, #544]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587c:	6413      	str	r3, [r2, #64]	; 0x40
 800587e:	4b86      	ldr	r3, [pc, #536]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588a:	2301      	movs	r3, #1
 800588c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800588e:	4b83      	ldr	r3, [pc, #524]	; (8005a9c <HAL_RCC_OscConfig+0x4d4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005896:	2b00      	cmp	r3, #0
 8005898:	d118      	bne.n	80058cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800589a:	4b80      	ldr	r3, [pc, #512]	; (8005a9c <HAL_RCC_OscConfig+0x4d4>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7f      	ldr	r2, [pc, #508]	; (8005a9c <HAL_RCC_OscConfig+0x4d4>)
 80058a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a6:	f7fc f96b 	bl	8001b80 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ae:	f7fc f967 	bl	8001b80 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b64      	cmp	r3, #100	; 0x64
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e12a      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c0:	4b76      	ldr	r3, [pc, #472]	; (8005a9c <HAL_RCC_OscConfig+0x4d4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d106      	bne.n	80058e2 <HAL_RCC_OscConfig+0x31a>
 80058d4:	4b70      	ldr	r3, [pc, #448]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	4a6f      	ldr	r2, [pc, #444]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	6713      	str	r3, [r2, #112]	; 0x70
 80058e0:	e02d      	b.n	800593e <HAL_RCC_OscConfig+0x376>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10c      	bne.n	8005904 <HAL_RCC_OscConfig+0x33c>
 80058ea:	4b6b      	ldr	r3, [pc, #428]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	4a6a      	ldr	r2, [pc, #424]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	6713      	str	r3, [r2, #112]	; 0x70
 80058f6:	4b68      	ldr	r3, [pc, #416]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	4a67      	ldr	r2, [pc, #412]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80058fc:	f023 0304 	bic.w	r3, r3, #4
 8005900:	6713      	str	r3, [r2, #112]	; 0x70
 8005902:	e01c      	b.n	800593e <HAL_RCC_OscConfig+0x376>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b05      	cmp	r3, #5
 800590a:	d10c      	bne.n	8005926 <HAL_RCC_OscConfig+0x35e>
 800590c:	4b62      	ldr	r3, [pc, #392]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005910:	4a61      	ldr	r2, [pc, #388]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005912:	f043 0304 	orr.w	r3, r3, #4
 8005916:	6713      	str	r3, [r2, #112]	; 0x70
 8005918:	4b5f      	ldr	r3, [pc, #380]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	4a5e      	ldr	r2, [pc, #376]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	6713      	str	r3, [r2, #112]	; 0x70
 8005924:	e00b      	b.n	800593e <HAL_RCC_OscConfig+0x376>
 8005926:	4b5c      	ldr	r3, [pc, #368]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	4a5b      	ldr	r2, [pc, #364]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	6713      	str	r3, [r2, #112]	; 0x70
 8005932:	4b59      	ldr	r3, [pc, #356]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	4a58      	ldr	r2, [pc, #352]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005938:	f023 0304 	bic.w	r3, r3, #4
 800593c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d015      	beq.n	8005972 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005946:	f7fc f91b 	bl	8001b80 <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594c:	e00a      	b.n	8005964 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594e:	f7fc f917 	bl	8001b80 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	f241 3288 	movw	r2, #5000	; 0x1388
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e0d8      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005964:	4b4c      	ldr	r3, [pc, #304]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0ee      	beq.n	800594e <HAL_RCC_OscConfig+0x386>
 8005970:	e014      	b.n	800599c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005972:	f7fc f905 	bl	8001b80 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005978:	e00a      	b.n	8005990 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597a:	f7fc f901 	bl	8001b80 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	f241 3288 	movw	r2, #5000	; 0x1388
 8005988:	4293      	cmp	r3, r2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e0c2      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005990:	4b41      	ldr	r3, [pc, #260]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ee      	bne.n	800597a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d105      	bne.n	80059ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a2:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	4a3c      	ldr	r2, [pc, #240]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80059a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 80ae 	beq.w	8005b14 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059b8:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 030c 	and.w	r3, r3, #12
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d06d      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d14b      	bne.n	8005a64 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059cc:	4b32      	ldr	r3, [pc, #200]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a31      	ldr	r2, [pc, #196]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80059d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fc f8d2 	bl	8001b80 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fc f8ce 	bl	8001b80 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e091      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	3b01      	subs	r3, #1
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	071b      	lsls	r3, r3, #28
 8005a2a:	491b      	ldr	r1, [pc, #108]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a30:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7fc f8a0 	bl	8001b80 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fc f89c 	bl	8001b80 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e05f      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a56:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0x47c>
 8005a62:	e057      	b.n	8005b14 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a0b      	ldr	r2, [pc, #44]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fc f886 	bl	8001b80 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fc f882 	bl	8001b80 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e045      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8a:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <HAL_RCC_OscConfig+0x4d0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x4b0>
 8005a96:	e03d      	b.n	8005b14 <HAL_RCC_OscConfig+0x54c>
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005aa0:	4b1f      	ldr	r3, [pc, #124]	; (8005b20 <HAL_RCC_OscConfig+0x558>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d030      	beq.n	8005b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d129      	bne.n	8005b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d122      	bne.n	8005b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ad6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d119      	bne.n	8005b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d10f      	bne.n	8005b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d107      	bne.n	8005b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40023800 	.word	0x40023800

08005b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0d0      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b6a      	ldr	r3, [pc, #424]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d910      	bls.n	8005b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4b67      	ldr	r3, [pc, #412]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f023 020f 	bic.w	r2, r3, #15
 8005b52:	4965      	ldr	r1, [pc, #404]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5a:	4b63      	ldr	r3, [pc, #396]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0b8      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d020      	beq.n	8005bba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b84:	4b59      	ldr	r3, [pc, #356]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4a58      	ldr	r2, [pc, #352]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b9c:	4b53      	ldr	r3, [pc, #332]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a52      	ldr	r2, [pc, #328]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ba6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba8:	4b50      	ldr	r3, [pc, #320]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	494d      	ldr	r1, [pc, #308]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d040      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bce:	4b47      	ldr	r3, [pc, #284]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d115      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e07f      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be6:	4b41      	ldr	r3, [pc, #260]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e073      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf6:	4b3d      	ldr	r3, [pc, #244]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e06b      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c06:	4b39      	ldr	r3, [pc, #228]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f023 0203 	bic.w	r2, r3, #3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4936      	ldr	r1, [pc, #216]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c18:	f7fb ffb2 	bl	8001b80 <HAL_GetTick>
 8005c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c20:	f7fb ffae 	bl	8001b80 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e053      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c36:	4b2d      	ldr	r3, [pc, #180]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 020c 	and.w	r2, r3, #12
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d1eb      	bne.n	8005c20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c48:	4b27      	ldr	r3, [pc, #156]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d210      	bcs.n	8005c78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c56:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f023 020f 	bic.w	r2, r3, #15
 8005c5e:	4922      	ldr	r1, [pc, #136]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c66:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e032      	b.n	8005cde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c84:	4b19      	ldr	r3, [pc, #100]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	4916      	ldr	r1, [pc, #88]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ca2:	4b12      	ldr	r3, [pc, #72]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	490e      	ldr	r1, [pc, #56]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cb6:	f000 f821 	bl	8005cfc <HAL_RCC_GetSysClockFreq>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	490a      	ldr	r1, [pc, #40]	; (8005cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8005cc8:	5ccb      	ldrb	r3, [r1, r3]
 8005cca:	fa22 f303 	lsr.w	r3, r2, r3
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8005cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <HAL_RCC_ClockConfig+0x1d4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fb ff0e 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40023c00 	.word	0x40023c00
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	08011a3c 	.word	0x08011a3c
 8005cf4:	20000000 	.word	0x20000000
 8005cf8:	20000004 	.word	0x20000004

08005cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d00:	b094      	sub	sp, #80	; 0x50
 8005d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	647b      	str	r3, [r7, #68]	; 0x44
 8005d08:	2300      	movs	r3, #0
 8005d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d14:	4b79      	ldr	r3, [pc, #484]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 030c 	and.w	r3, r3, #12
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d00d      	beq.n	8005d3c <HAL_RCC_GetSysClockFreq+0x40>
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	f200 80e1 	bhi.w	8005ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0x34>
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d2e:	e0db      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d30:	4b73      	ldr	r3, [pc, #460]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d34:	e0db      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d36:	4b73      	ldr	r3, [pc, #460]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d3a:	e0d8      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d3c:	4b6f      	ldr	r3, [pc, #444]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d44:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d46:	4b6d      	ldr	r3, [pc, #436]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d063      	beq.n	8005e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d52:	4b6a      	ldr	r3, [pc, #424]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	2200      	movs	r2, #0
 8005d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30
 8005d66:	2300      	movs	r3, #0
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f04f 0100 	mov.w	r1, #0
 8005d7a:	0159      	lsls	r1, r3, #5
 8005d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d80:	0150      	lsls	r0, r2, #5
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4621      	mov	r1, r4
 8005d88:	1a51      	subs	r1, r2, r1
 8005d8a:	6139      	str	r1, [r7, #16]
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005da0:	4659      	mov	r1, fp
 8005da2:	018b      	lsls	r3, r1, #6
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005daa:	4651      	mov	r1, sl
 8005dac:	018a      	lsls	r2, r1, #6
 8005dae:	4651      	mov	r1, sl
 8005db0:	ebb2 0801 	subs.w	r8, r2, r1
 8005db4:	4659      	mov	r1, fp
 8005db6:	eb63 0901 	sbc.w	r9, r3, r1
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dce:	4690      	mov	r8, r2
 8005dd0:	4699      	mov	r9, r3
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	eb18 0303 	adds.w	r3, r8, r3
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	462b      	mov	r3, r5
 8005ddc:	eb49 0303 	adc.w	r3, r9, r3
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dee:	4629      	mov	r1, r5
 8005df0:	024b      	lsls	r3, r1, #9
 8005df2:	4621      	mov	r1, r4
 8005df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005df8:	4621      	mov	r1, r4
 8005dfa:	024a      	lsls	r2, r1, #9
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e02:	2200      	movs	r2, #0
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e0c:	f7fa fa68 	bl	80002e0 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4613      	mov	r3, r2
 8005e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e18:	e058      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e1a:	4b38      	ldr	r3, [pc, #224]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	099b      	lsrs	r3, r3, #6
 8005e20:	2200      	movs	r2, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	4611      	mov	r1, r2
 8005e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e2a:	623b      	str	r3, [r7, #32]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	f04f 0000 	mov.w	r0, #0
 8005e3c:	f04f 0100 	mov.w	r1, #0
 8005e40:	0159      	lsls	r1, r3, #5
 8005e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e46:	0150      	lsls	r0, r2, #5
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e52:	4649      	mov	r1, r9
 8005e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e70:	eb63 050b 	sbc.w	r5, r3, fp
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	00eb      	lsls	r3, r5, #3
 8005e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e82:	00e2      	lsls	r2, r4, #3
 8005e84:	4614      	mov	r4, r2
 8005e86:	461d      	mov	r5, r3
 8005e88:	4643      	mov	r3, r8
 8005e8a:	18e3      	adds	r3, r4, r3
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	464b      	mov	r3, r9
 8005e90:	eb45 0303 	adc.w	r3, r5, r3
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	028b      	lsls	r3, r1, #10
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005eac:	4621      	mov	r1, r4
 8005eae:	028a      	lsls	r2, r1, #10
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	61fa      	str	r2, [r7, #28]
 8005ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ec0:	f7fa fa0e 	bl	80002e0 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4613      	mov	r3, r2
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <HAL_RCC_GetSysClockFreq+0x200>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ee6:	e002      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3750      	adds	r7, #80	; 0x50
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800
 8005f00:	00f42400 	.word	0x00f42400
 8005f04:	007a1200 	.word	0x007a1200

08005f08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f0c:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000000 	.word	0x20000000

08005f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f24:	f7ff fff0 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	0a9b      	lsrs	r3, r3, #10
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	4903      	ldr	r1, [pc, #12]	; (8005f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f36:	5ccb      	ldrb	r3, [r1, r3]
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40023800 	.word	0x40023800
 8005f44:	08011a4c 	.word	0x08011a4c

08005f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f4c:	f7ff ffdc 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	0b5b      	lsrs	r3, r3, #13
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4903      	ldr	r1, [pc, #12]	; (8005f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5e:	5ccb      	ldrb	r3, [r1, r3]
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	08011a4c 	.word	0x08011a4c

08005f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d012      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f98:	4b69      	ldr	r3, [pc, #420]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4a68      	ldr	r2, [pc, #416]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005fa2:	6093      	str	r3, [r2, #8]
 8005fa4:	4b66      	ldr	r3, [pc, #408]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fac:	4964      	ldr	r1, [pc, #400]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d017      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fca:	4b5d      	ldr	r3, [pc, #372]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd8:	4959      	ldr	r1, [pc, #356]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe8:	d101      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005fea:	2301      	movs	r3, #1
 8005fec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d017      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006006:	4b4e      	ldr	r3, [pc, #312]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800600c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	494a      	ldr	r1, [pc, #296]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006024:	d101      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006026:	2301      	movs	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006032:	2301      	movs	r3, #1
 8006034:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006042:	2301      	movs	r3, #1
 8006044:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 808b 	beq.w	800616a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006054:	4b3a      	ldr	r3, [pc, #232]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	4a39      	ldr	r2, [pc, #228]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605e:	6413      	str	r3, [r2, #64]	; 0x40
 8006060:	4b37      	ldr	r3, [pc, #220]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800606c:	4b35      	ldr	r3, [pc, #212]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a34      	ldr	r2, [pc, #208]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006078:	f7fb fd82 	bl	8001b80 <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006080:	f7fb fd7e 	bl	8001b80 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e38f      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006092:	4b2c      	ldr	r3, [pc, #176]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800609e:	4b28      	ldr	r3, [pc, #160]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d035      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d02e      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060bc:	4b20      	ldr	r3, [pc, #128]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060c6:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ca:	4a1d      	ldr	r2, [pc, #116]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	4a1a      	ldr	r2, [pc, #104]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80060de:	4a18      	ldr	r2, [pc, #96]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060e4:	4b16      	ldr	r3, [pc, #88]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d114      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f0:	f7fb fd46 	bl	8001b80 <HAL_GetTick>
 80060f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f6:	e00a      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f8:	f7fb fd42 	bl	8001b80 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f241 3288 	movw	r2, #5000	; 0x1388
 8006106:	4293      	cmp	r3, r2
 8006108:	d901      	bls.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e351      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610e:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0ee      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006126:	d111      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006134:	4b04      	ldr	r3, [pc, #16]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006136:	400b      	ands	r3, r1
 8006138:	4901      	ldr	r1, [pc, #4]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613a:	4313      	orrs	r3, r2
 800613c:	608b      	str	r3, [r1, #8]
 800613e:	e00b      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006140:	40023800 	.word	0x40023800
 8006144:	40007000 	.word	0x40007000
 8006148:	0ffffcff 	.word	0x0ffffcff
 800614c:	4bac      	ldr	r3, [pc, #688]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	4aab      	ldr	r2, [pc, #684]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006152:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006156:	6093      	str	r3, [r2, #8]
 8006158:	4ba9      	ldr	r3, [pc, #676]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006164:	49a6      	ldr	r1, [pc, #664]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006166:	4313      	orrs	r3, r2
 8006168:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	2b00      	cmp	r3, #0
 8006174:	d010      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006176:	4ba2      	ldr	r3, [pc, #648]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800617c:	4aa0      	ldr	r2, [pc, #640]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800617e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006182:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006186:	4b9e      	ldr	r3, [pc, #632]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006188:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	499b      	ldr	r1, [pc, #620]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061a4:	4b96      	ldr	r3, [pc, #600]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b2:	4993      	ldr	r1, [pc, #588]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061c6:	4b8e      	ldr	r3, [pc, #568]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d4:	498a      	ldr	r1, [pc, #552]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061e8:	4b85      	ldr	r3, [pc, #532]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f6:	4982      	ldr	r1, [pc, #520]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800620a:	4b7d      	ldr	r3, [pc, #500]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006210:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006218:	4979      	ldr	r1, [pc, #484]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800622c:	4b74      	ldr	r3, [pc, #464]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f023 0203 	bic.w	r2, r3, #3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	4971      	ldr	r1, [pc, #452]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800624e:	4b6c      	ldr	r3, [pc, #432]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	f023 020c 	bic.w	r2, r3, #12
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625c:	4968      	ldr	r1, [pc, #416]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006270:	4b63      	ldr	r3, [pc, #396]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006276:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627e:	4960      	ldr	r1, [pc, #384]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006292:	4b5b      	ldr	r3, [pc, #364]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a0:	4957      	ldr	r1, [pc, #348]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062b4:	4b52      	ldr	r3, [pc, #328]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	494f      	ldr	r1, [pc, #316]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80062d6:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e4:	4946      	ldr	r1, [pc, #280]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80062f8:	4b41      	ldr	r3, [pc, #260]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006306:	493e      	ldr	r1, [pc, #248]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800631a:	4b39      	ldr	r3, [pc, #228]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006328:	4935      	ldr	r1, [pc, #212]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800633c:	4b30      	ldr	r3, [pc, #192]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800634a:	492d      	ldr	r1, [pc, #180]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d011      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800635e:	4b28      	ldr	r3, [pc, #160]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800636c:	4924      	ldr	r1, [pc, #144]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800637c:	d101      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800637e:	2301      	movs	r3, #1
 8006380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800638e:	2301      	movs	r3, #1
 8006390:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800639e:	4b18      	ldr	r3, [pc, #96]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ac:	4914      	ldr	r1, [pc, #80]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d0:	490b      	ldr	r1, [pc, #44]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00f      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f4:	4902      	ldr	r1, [pc, #8]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063fc:	e002      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80063fe:	bf00      	nop
 8006400:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00b      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006410:	4b8a      	ldr	r3, [pc, #552]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006416:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	4986      	ldr	r1, [pc, #536]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006434:	4b81      	ldr	r3, [pc, #516]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800643a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006444:	497d      	ldr	r1, [pc, #500]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d006      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80d6 	beq.w	800660c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006460:	4b76      	ldr	r3, [pc, #472]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a75      	ldr	r2, [pc, #468]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800646a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646c:	f7fb fb88 	bl	8001b80 <HAL_GetTick>
 8006470:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006474:	f7fb fb84 	bl	8001b80 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b64      	cmp	r3, #100	; 0x64
 8006480:	d901      	bls.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e195      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006486:	4b6d      	ldr	r3, [pc, #436]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f0      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d021      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d11d      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064a6:	4b65      	ldr	r3, [pc, #404]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ac:	0c1b      	lsrs	r3, r3, #16
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064b4:	4b61      	ldr	r3, [pc, #388]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ba:	0e1b      	lsrs	r3, r3, #24
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	019a      	lsls	r2, r3, #6
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	041b      	lsls	r3, r3, #16
 80064cc:	431a      	orrs	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	061b      	lsls	r3, r3, #24
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	071b      	lsls	r3, r3, #28
 80064da:	4958      	ldr	r1, [pc, #352]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f6:	d00a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02e      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800650c:	d129      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800650e:	4b4b      	ldr	r3, [pc, #300]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800651c:	4b47      	ldr	r3, [pc, #284]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800651e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006522:	0f1b      	lsrs	r3, r3, #28
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	019a      	lsls	r2, r3, #6
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	061b      	lsls	r3, r3, #24
 800653c:	431a      	orrs	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	071b      	lsls	r3, r3, #28
 8006542:	493e      	ldr	r1, [pc, #248]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800654a:	4b3c      	ldr	r3, [pc, #240]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800654c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006550:	f023 021f 	bic.w	r2, r3, #31
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	3b01      	subs	r3, #1
 800655a:	4938      	ldr	r1, [pc, #224]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01d      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800656e:	4b33      	ldr	r3, [pc, #204]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006574:	0e1b      	lsrs	r3, r3, #24
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800657c:	4b2f      	ldr	r3, [pc, #188]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800657e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006582:	0f1b      	lsrs	r3, r3, #28
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	019a      	lsls	r2, r3, #6
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	041b      	lsls	r3, r3, #16
 8006596:	431a      	orrs	r2, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	061b      	lsls	r3, r3, #24
 800659c:	431a      	orrs	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	071b      	lsls	r3, r3, #28
 80065a2:	4926      	ldr	r1, [pc, #152]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d011      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	019a      	lsls	r2, r3, #6
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	041b      	lsls	r3, r3, #16
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	071b      	lsls	r3, r3, #28
 80065d2:	491a      	ldr	r1, [pc, #104]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065da:	4b18      	ldr	r3, [pc, #96]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e6:	f7fb facb 	bl	8001b80 <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065ec:	e008      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065ee:	f7fb fac7 	bl	8001b80 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b64      	cmp	r3, #100	; 0x64
 80065fa:	d901      	bls.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0d8      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006600:	4b0e      	ldr	r3, [pc, #56]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0f0      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b01      	cmp	r3, #1
 8006610:	f040 80ce 	bne.w	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a08      	ldr	r2, [pc, #32]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800661a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800661e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006620:	f7fb faae 	bl	8001b80 <HAL_GetTick>
 8006624:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006626:	e00b      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006628:	f7fb faaa 	bl	8001b80 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b64      	cmp	r3, #100	; 0x64
 8006634:	d904      	bls.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e0bb      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800663a:	bf00      	nop
 800663c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006640:	4b5e      	ldr	r3, [pc, #376]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664c:	d0ec      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02e      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d12a      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006676:	4b51      	ldr	r3, [pc, #324]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667c:	0c1b      	lsrs	r3, r3, #16
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006684:	4b4d      	ldr	r3, [pc, #308]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	0f1b      	lsrs	r3, r3, #28
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	019a      	lsls	r2, r3, #6
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	041b      	lsls	r3, r3, #16
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	061b      	lsls	r3, r3, #24
 80066a4:	431a      	orrs	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	071b      	lsls	r3, r3, #28
 80066aa:	4944      	ldr	r1, [pc, #272]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066b2:	4b42      	ldr	r3, [pc, #264]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	3b01      	subs	r3, #1
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	493d      	ldr	r1, [pc, #244]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d022      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e0:	d11d      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066e2:	4b36      	ldr	r3, [pc, #216]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	0e1b      	lsrs	r3, r3, #24
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066f0:	4b32      	ldr	r3, [pc, #200]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f6:	0f1b      	lsrs	r3, r3, #28
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	019a      	lsls	r2, r3, #6
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	431a      	orrs	r2, r3
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	061b      	lsls	r3, r3, #24
 8006710:	431a      	orrs	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	071b      	lsls	r3, r3, #28
 8006716:	4929      	ldr	r1, [pc, #164]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d028      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800672a:	4b24      	ldr	r3, [pc, #144]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006730:	0e1b      	lsrs	r3, r3, #24
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006738:	4b20      	ldr	r3, [pc, #128]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673e:	0c1b      	lsrs	r3, r3, #16
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	019a      	lsls	r2, r3, #6
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	431a      	orrs	r2, r3
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	061b      	lsls	r3, r3, #24
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	071b      	lsls	r3, r3, #28
 800675e:	4917      	ldr	r1, [pc, #92]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006766:	4b15      	ldr	r3, [pc, #84]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800676c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	4911      	ldr	r1, [pc, #68]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800677c:	4b0f      	ldr	r3, [pc, #60]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a0e      	ldr	r2, [pc, #56]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006788:	f7fb f9fa 	bl	8001b80 <HAL_GetTick>
 800678c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006790:	f7fb f9f6 	bl	8001b80 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b64      	cmp	r3, #100	; 0x64
 800679c:	d901      	bls.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e007      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067a2:	4b06      	ldr	r3, [pc, #24]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ae:	d1ef      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40023800 	.word	0x40023800

080067c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e022      	b.n	8006818 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d105      	bne.n	80067ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7fa fdc1 	bl	800136c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2203      	movs	r2, #3
 80067ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f814 	bl	8006820 <HAL_SD_InitCard>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e00a      	b.n	8006818 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006820:	b5b0      	push	{r4, r5, r7, lr}
 8006822:	b08e      	sub	sp, #56	; 0x38
 8006824:	af04      	add	r7, sp, #16
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006828:	2300      	movs	r3, #0
 800682a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006838:	2300      	movs	r3, #0
 800683a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800683c:	2376      	movs	r3, #118	; 0x76
 800683e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681d      	ldr	r5, [r3, #0]
 8006844:	466c      	mov	r4, sp
 8006846:	f107 0314 	add.w	r3, r7, #20
 800684a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800684e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006852:	f107 0308 	add.w	r3, r7, #8
 8006856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006858:	4628      	mov	r0, r5
 800685a:	f001 fdc5 	bl	80083e8 <SDMMC_Init>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e059      	b.n	8006924 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800687e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f001 fdf9 	bl	800847c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006898:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800689a:	2002      	movs	r0, #2
 800689c:	f7fb f97c 	bl	8001b98 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 ff59 	bl	8007758 <SD_PowerON>
 80068a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e02e      	b.n	8006924 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fe78 	bl	80075bc <SD_InitCard>
 80068cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e01b      	b.n	8006924 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 fe53 	bl	80085a0 <SDMMC_CmdBlockLength>
 80068fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00f      	beq.n	8006922 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a09      	ldr	r2, [pc, #36]	; (800692c <HAL_SD_InitCard+0x10c>)
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3728      	adds	r7, #40	; 0x28
 8006928:	46bd      	mov	sp, r7
 800692a:	bdb0      	pop	{r4, r5, r7, pc}
 800692c:	004005ff 	.word	0x004005ff

08006930 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08c      	sub	sp, #48	; 0x30
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d107      	bne.n	8006958 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e0c3      	b.n	8006ae0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	f040 80bc 	bne.w	8006ade <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800696c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	441a      	add	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006976:	429a      	cmp	r2, r3
 8006978:	d907      	bls.n	800698a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e0aa      	b.n	8006ae0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2203      	movs	r2, #3
 800698e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2200      	movs	r2, #0
 8006998:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80069a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	4a4e      	ldr	r2, [pc, #312]	; (8006ae8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80069b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	4a4d      	ldr	r2, [pc, #308]	; (8006aec <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80069b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	2200      	movs	r2, #0
 80069c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	2200      	movs	r2, #0
 80069c8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3380      	adds	r3, #128	; 0x80
 80069f0:	4619      	mov	r1, r3
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	025b      	lsls	r3, r3, #9
 80069f8:	089b      	lsrs	r3, r3, #2
 80069fa:	f7fc f8b5 	bl	8002b68 <HAL_DMA_Start_IT>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d017      	beq.n	8006a34 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006a12:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a35      	ldr	r2, [pc, #212]	; (8006af0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e055      	b.n	8006ae0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0208 	orr.w	r2, r2, #8
 8006a42:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d002      	beq.n	8006a52 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	025b      	lsls	r3, r3, #9
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a56:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	025b      	lsls	r3, r3, #9
 8006a5c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006a5e:	2390      	movs	r3, #144	; 0x90
 8006a60:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a62:	2302      	movs	r3, #2
 8006a64:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f107 0210 	add.w	r2, r7, #16
 8006a76:	4611      	mov	r1, r2
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 fd65 	bl	8008548 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d90a      	bls.n	8006a9a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2282      	movs	r2, #130	; 0x82
 8006a88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fdc9 	bl	8008628 <SDMMC_CmdReadMultiBlock>
 8006a96:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a98:	e009      	b.n	8006aae <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2281      	movs	r2, #129	; 0x81
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 fd9c 	bl	80085e4 <SDMMC_CmdReadSingleBlock>
 8006aac:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d012      	beq.n	8006ada <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a0d      	ldr	r2, [pc, #52]	; (8006af0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e002      	b.n	8006ae0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	e000      	b.n	8006ae0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006ade:	2302      	movs	r3, #2
  }
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3730      	adds	r7, #48	; 0x30
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	080073cb 	.word	0x080073cb
 8006aec:	0800743d 	.word	0x0800743d
 8006af0:	004005ff 	.word	0x004005ff

08006af4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08c      	sub	sp, #48	; 0x30
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d107      	bne.n	8006b1c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0c6      	b.n	8006caa <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	f040 80bf 	bne.w	8006ca8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	441a      	add	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d907      	bls.n	8006b4e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e0ad      	b.n	8006caa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2203      	movs	r2, #3
 8006b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 021a 	orr.w	r2, r2, #26
 8006b6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	4a50      	ldr	r2, [pc, #320]	; (8006cb4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006b74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	4a4f      	ldr	r2, [pc, #316]	; (8006cb8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006b7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b82:	2200      	movs	r2, #0
 8006b84:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d002      	beq.n	8006b94 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	025b      	lsls	r3, r3, #9
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d90a      	bls.n	8006bb0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	22a0      	movs	r2, #160	; 0xa0
 8006b9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 fd82 	bl	80086b0 <SDMMC_CmdWriteMultiBlock>
 8006bac:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006bae:	e009      	b.n	8006bc4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2290      	movs	r2, #144	; 0x90
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 fd55 	bl	800866c <SDMMC_CmdWriteSingleBlock>
 8006bc2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d012      	beq.n	8006bf0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a3b      	ldr	r2, [pc, #236]	; (8006cbc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e05c      	b.n	8006caa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0208 	orr.w	r2, r2, #8
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	2240      	movs	r2, #64	; 0x40
 8006c06:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3380      	adds	r3, #128	; 0x80
 8006c30:	461a      	mov	r2, r3
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	025b      	lsls	r3, r3, #9
 8006c36:	089b      	lsrs	r3, r3, #2
 8006c38:	f7fb ff96 	bl	8002b68 <HAL_DMA_Start_IT>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01a      	beq.n	8006c78 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 021a 	bic.w	r2, r2, #26
 8006c50:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a19      	ldr	r2, [pc, #100]	; (8006cbc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e018      	b.n	8006caa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c7c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	025b      	lsls	r3, r3, #9
 8006c82:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c84:	2390      	movs	r3, #144	; 0x90
 8006c86:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f107 0210 	add.w	r2, r7, #16
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f001 fc52 	bl	8008548 <SDMMC_ConfigData>

      return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3730      	adds	r7, #48	; 0x30
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	080073a1 	.word	0x080073a1
 8006cb8:	0800743d 	.word	0x0800743d
 8006cbc:	004005ff 	.word	0x004005ff

08006cc0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_SD_IRQHandler+0x2e>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fdec 	bl	80078c4 <SD_Read_IT>
 8006cec:	e15a      	b.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 808d 	beq.w	8006e18 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b9a      	ldr	r3, [pc, #616]	; (8006f7c <HAL_SD_IRQHandler+0x2bc>)
 8006d14:	400b      	ands	r3, r1
 8006d16:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0201 	bic.w	r2, r2, #1
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d039      	beq.n	8006da6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <HAL_SD_IRQHandler+0x86>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d011      	beq.n	8006d6a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fcd2 	bl	80086f4 <SDMMC_CmdStopTransfer>
 8006d50:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d008      	beq.n	8006d6a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f921 	bl	8006fac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <HAL_SD_IRQHandler+0xd6>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f003 fd3c 	bl	800a814 <HAL_SD_RxCpltCallback>
 8006d9c:	e102      	b.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f003 fd2e 	bl	800a800 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006da4:	e0fe      	b.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80f9 	beq.w	8006fa4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d011      	beq.n	8006de0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 fc97 	bl	80086f4 <SDMMC_CmdStopTransfer>
 8006dc6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d008      	beq.n	8006de0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f8e6 	bl	8006fac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f040 80dc 	bne.w	8006fa4 <HAL_SD_IRQHandler+0x2e4>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f040 80d6 	bne.w	8006fa4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0208 	bic.w	r2, r2, #8
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f003 fcf5 	bl	800a800 <HAL_SD_TxCpltCallback>
}
 8006e16:	e0c5      	b.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <HAL_SD_IRQHandler+0x178>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fd98 	bl	8007966 <SD_Write_IT>
 8006e36:	e0b5      	b.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80ae 	beq.w	8006fa4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5a:	f043 0202 	orr.w	r2, r3, #2
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	f043 0208 	orr.w	r2, r3, #8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	f043 0220 	orr.w	r2, r3, #32
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	f043 0210 	orr.w	r2, r3, #16
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f240 523a 	movw	r2, #1338	; 0x53a
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006ec8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 fc10 	bl	80086f4 <SDMMC_CmdStopTransfer>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f857 	bl	8006fac <HAL_SD_ErrorCallback>
}
 8006efe:	e051      	b.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d04c      	beq.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <HAL_SD_IRQHandler+0x25e>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d011      	beq.n	8006f42 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <HAL_SD_IRQHandler+0x2c0>)
 8006f24:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fb fe7c 	bl	8002c28 <HAL_DMA_Abort_IT>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d036      	beq.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fad0 	bl	80074e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f40:	e030      	b.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <HAL_SD_IRQHandler+0x296>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d018      	beq.n	8006f88 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	4a0a      	ldr	r2, [pc, #40]	; (8006f84 <HAL_SD_IRQHandler+0x2c4>)
 8006f5c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fb fe60 	bl	8002c28 <HAL_DMA_Abort_IT>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d01a      	beq.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 faeb 	bl	800754e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f78:	e014      	b.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
 8006f7a:	bf00      	nop
 8006f7c:	ffff3ec5 	.word	0xffff3ec5
 8006f80:	080074e1 	.word	0x080074e1
 8006f84:	0800754f 	.word	0x0800754f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f003 fc25 	bl	800a7ec <HAL_SD_AbortCallback>
}
 8006fa2:	e7ff      	b.n	8006fa4 <HAL_SD_IRQHandler+0x2e4>
 8006fa4:	bf00      	nop
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fce:	0f9b      	lsrs	r3, r3, #30
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fda:	0e9b      	lsrs	r3, r3, #26
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fec:	0e1b      	lsrs	r3, r3, #24
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	b2da      	uxtb	r2, r3
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b2da      	uxtb	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007016:	b2da      	uxtb	r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007020:	0d1b      	lsrs	r3, r3, #20
 8007022:	b29a      	uxth	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800702c:	0c1b      	lsrs	r3, r3, #16
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	b2da      	uxtb	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800703e:	0bdb      	lsrs	r3, r3, #15
 8007040:	b2db      	uxtb	r3, r3
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007050:	0b9b      	lsrs	r3, r3, #14
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	b2da      	uxtb	r2, r3
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007062:	0b5b      	lsrs	r3, r3, #13
 8007064:	b2db      	uxtb	r3, r3
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	b2da      	uxtb	r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007074:	0b1b      	lsrs	r3, r3, #12
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2200      	movs	r2, #0
 8007086:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708c:	2b00      	cmp	r3, #0
 800708e:	d163      	bne.n	8007158 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007094:	009a      	lsls	r2, r3, #2
 8007096:	f640 73fc 	movw	r3, #4092	; 0xffc
 800709a:	4013      	ands	r3, r2
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80070a0:	0f92      	lsrs	r2, r2, #30
 80070a2:	431a      	orrs	r2, r3
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ac:	0edb      	lsrs	r3, r3, #27
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070be:	0e1b      	lsrs	r3, r3, #24
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d0:	0d5b      	lsrs	r3, r3, #21
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e2:	0c9b      	lsrs	r3, r3, #18
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f4:	0bdb      	lsrs	r3, r3, #15
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	7e1b      	ldrb	r3, [r3, #24]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	3302      	adds	r3, #2
 8007118:	2201      	movs	r2, #1
 800711a:	fa02 f303 	lsl.w	r3, r2, r3
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007122:	fb03 f202 	mul.w	r2, r3, r2
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	7a1b      	ldrb	r3, [r3, #8]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	f003 030f 	and.w	r3, r3, #15
 8007134:	2201      	movs	r2, #1
 8007136:	409a      	lsls	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007144:	0a52      	lsrs	r2, r2, #9
 8007146:	fb03 f202 	mul.w	r2, r3, r2
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007154:	661a      	str	r2, [r3, #96]	; 0x60
 8007156:	e031      	b.n	80071bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	2b01      	cmp	r3, #1
 800715e:	d11d      	bne.n	800719c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007164:	041b      	lsls	r3, r3, #16
 8007166:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716e:	0c1b      	lsrs	r3, r3, #16
 8007170:	431a      	orrs	r2, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	3301      	adds	r3, #1
 800717c:	029a      	lsls	r2, r3, #10
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007190:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	661a      	str	r2, [r3, #96]	; 0x60
 800719a:	e00f      	b.n	80071bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a58      	ldr	r2, [pc, #352]	; (8007304 <HAL_SD_GetCardCSD+0x344>)
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e09d      	b.n	80072f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c0:	0b9b      	lsrs	r3, r3, #14
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d2:	09db      	lsrs	r3, r3, #7
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f4:	0fdb      	lsrs	r3, r3, #31
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007200:	0f5b      	lsrs	r3, r3, #29
 8007202:	b2db      	uxtb	r3, r3
 8007204:	f003 0303 	and.w	r3, r3, #3
 8007208:	b2da      	uxtb	r2, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	0e9b      	lsrs	r3, r3, #26
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	b2da      	uxtb	r2, r3
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	0d9b      	lsrs	r3, r3, #22
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	b2da      	uxtb	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	0d5b      	lsrs	r3, r3, #21
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	b2da      	uxtb	r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	0c1b      	lsrs	r3, r3, #16
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	0bdb      	lsrs	r3, r3, #15
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	b2da      	uxtb	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	0b9b      	lsrs	r3, r3, #14
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	b2da      	uxtb	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	0b5b      	lsrs	r3, r3, #13
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	0b1b      	lsrs	r3, r3, #12
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	0a9b      	lsrs	r3, r3, #10
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	004005ff 	.word	0x004005ff

08007308 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800736c:	f107 030c 	add.w	r3, r7, #12
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa7e 	bl	8007874 <SD_SendStatus>
 8007378:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	0a5b      	lsrs	r3, r3, #9
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007396:	693b      	ldr	r3, [r7, #16]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073dc:	2b82      	cmp	r3, #130	; 0x82
 80073de:	d111      	bne.n	8007404 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 f985 	bl	80086f4 <SDMMC_CmdStopTransfer>
 80073ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d008      	beq.n	8007404 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7ff fdd4 	bl	8006fac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0208 	bic.w	r2, r2, #8
 8007412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f240 523a 	movw	r2, #1338	; 0x53a
 800741c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f003 f9f1 	bl	800a814 <HAL_SD_RxCpltCallback>
#endif
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fb fd98 	bl	8002f80 <HAL_DMA_GetError>
 8007450:	4603      	mov	r3, r0
 8007452:	2b02      	cmp	r3, #2
 8007454:	d03e      	beq.n	80074d4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007464:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d002      	beq.n	8007472 <SD_DMAError+0x36>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d12d      	bne.n	80074ce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a19      	ldr	r2, [pc, #100]	; (80074dc <SD_DMAError+0xa0>)
 8007478:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007488:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007496:	6978      	ldr	r0, [r7, #20]
 8007498:	f7ff ff62 	bl	8007360 <HAL_SD_GetCardState>
 800749c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b06      	cmp	r3, #6
 80074a2:	d002      	beq.n	80074aa <SD_DMAError+0x6e>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d10a      	bne.n	80074c0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 f920 	bl	80086f4 <SDMMC_CmdStopTransfer>
 80074b4:	4602      	mov	r2, r0
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	431a      	orrs	r2, r3
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80074ce:	6978      	ldr	r0, [r7, #20]
 80074d0:	f7ff fd6c 	bl	8006fac <HAL_SD_ErrorCallback>
#endif
  }
}
 80074d4:	bf00      	nop
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	004005ff 	.word	0x004005ff

080074e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff ff31 	bl	8007360 <HAL_SD_GetCardState>
 80074fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b06      	cmp	r3, #6
 8007512:	d002      	beq.n	800751a <SD_DMATxAbort+0x3a>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b05      	cmp	r3, #5
 8007518:	d10a      	bne.n	8007530 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4618      	mov	r0, r3
 8007520:	f001 f8e8 	bl	80086f4 <SDMMC_CmdStopTransfer>
 8007524:	4602      	mov	r2, r0
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	431a      	orrs	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	2b00      	cmp	r3, #0
 8007536:	d103      	bne.n	8007540 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f003 f957 	bl	800a7ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800753e:	e002      	b.n	8007546 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fd33 	bl	8006fac <HAL_SD_ErrorCallback>
}
 8007546:	bf00      	nop
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f240 523a 	movw	r2, #1338	; 0x53a
 8007564:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7ff fefa 	bl	8007360 <HAL_SD_GetCardState>
 800756c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b06      	cmp	r3, #6
 8007580:	d002      	beq.n	8007588 <SD_DMARxAbort+0x3a>
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b05      	cmp	r3, #5
 8007586:	d10a      	bne.n	800759e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4618      	mov	r0, r3
 800758e:	f001 f8b1 	bl	80086f4 <SDMMC_CmdStopTransfer>
 8007592:	4602      	mov	r2, r0
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	431a      	orrs	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d103      	bne.n	80075ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f003 f920 	bl	800a7ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80075ac:	e002      	b.n	80075b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fcfc 	bl	8006fac <HAL_SD_ErrorCallback>
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075bc:	b5b0      	push	{r4, r5, r7, lr}
 80075be:	b094      	sub	sp, #80	; 0x50
 80075c0:	af04      	add	r7, sp, #16
 80075c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80075c4:	2301      	movs	r3, #1
 80075c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 ff63 	bl	8008498 <SDMMC_GetPowerState>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80075dc:	e0b8      	b.n	8007750 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d02f      	beq.n	8007646 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 f94a 	bl	8008884 <SDMMC_CmdSendCID>
 80075f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <SD_InitCard+0x40>
    {
      return errorstate;
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	e0a9      	b.n	8007750 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f000 ff8d 	bl	8008522 <SDMMC_GetResponse>
 8007608:	4602      	mov	r2, r0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2104      	movs	r1, #4
 8007614:	4618      	mov	r0, r3
 8007616:	f000 ff84 	bl	8008522 <SDMMC_GetResponse>
 800761a:	4602      	mov	r2, r0
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2108      	movs	r1, #8
 8007626:	4618      	mov	r0, r3
 8007628:	f000 ff7b 	bl	8008522 <SDMMC_GetResponse>
 800762c:	4602      	mov	r2, r0
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	210c      	movs	r1, #12
 8007638:	4618      	mov	r0, r3
 800763a:	f000 ff72 	bl	8008522 <SDMMC_GetResponse>
 800763e:	4602      	mov	r2, r0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764a:	2b03      	cmp	r3, #3
 800764c:	d00d      	beq.n	800766a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f107 020e 	add.w	r2, r7, #14
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f001 f950 	bl	80088fe <SDMMC_CmdSetRelAdd>
 800765e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <SD_InitCard+0xae>
    {
      return errorstate;
 8007666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007668:	e072      	b.n	8007750 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	2b03      	cmp	r3, #3
 8007670:	d036      	beq.n	80076e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007672:	89fb      	ldrh	r3, [r7, #14]
 8007674:	461a      	mov	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007682:	041b      	lsls	r3, r3, #16
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f001 f91a 	bl	80088c0 <SDMMC_CmdSendCSD>
 800768c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800768e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007696:	e05b      	b.n	8007750 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2100      	movs	r1, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 ff3f 	bl	8008522 <SDMMC_GetResponse>
 80076a4:	4602      	mov	r2, r0
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2104      	movs	r1, #4
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 ff36 	bl	8008522 <SDMMC_GetResponse>
 80076b6:	4602      	mov	r2, r0
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2108      	movs	r1, #8
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 ff2d 	bl	8008522 <SDMMC_GetResponse>
 80076c8:	4602      	mov	r2, r0
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	210c      	movs	r1, #12
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 ff24 	bl	8008522 <SDMMC_GetResponse>
 80076da:	4602      	mov	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2104      	movs	r1, #4
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 ff1b 	bl	8008522 <SDMMC_GetResponse>
 80076ec:	4603      	mov	r3, r0
 80076ee:	0d1a      	lsrs	r2, r3, #20
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80076f4:	f107 0310 	add.w	r3, r7, #16
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff fc60 	bl	8006fc0 <HAL_SD_GetCardCSD>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800770a:	e021      	b.n	8007750 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007714:	041b      	lsls	r3, r3, #16
 8007716:	2200      	movs	r2, #0
 8007718:	461c      	mov	r4, r3
 800771a:	4615      	mov	r5, r2
 800771c:	4622      	mov	r2, r4
 800771e:	462b      	mov	r3, r5
 8007720:	4608      	mov	r0, r1
 8007722:	f001 f809 	bl	8008738 <SDMMC_CmdSelDesel>
 8007726:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <SD_InitCard+0x176>
  {
    return errorstate;
 800772e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007730:	e00e      	b.n	8007750 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681d      	ldr	r5, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	466c      	mov	r4, sp
 800773a:	f103 0210 	add.w	r2, r3, #16
 800773e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007744:	3304      	adds	r3, #4
 8007746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007748:	4628      	mov	r0, r5
 800774a:	f000 fe4d 	bl	80083e8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3740      	adds	r7, #64	; 0x40
 8007754:	46bd      	mov	sp, r7
 8007756:	bdb0      	pop	{r4, r5, r7, pc}

08007758 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f001 f804 	bl	800877e <SDMMC_CmdGoIdleState>
 8007776:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <SD_PowerON+0x2a>
  {
    return errorstate;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	e072      	b.n	8007868 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f001 f817 	bl	80087ba <SDMMC_CmdOperCond>
 800778c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00d      	beq.n	80077b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 ffed 	bl	800877e <SDMMC_CmdGoIdleState>
 80077a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	e05b      	b.n	8007868 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d137      	bne.n	800782e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 f817 	bl	80087f8 <SDMMC_CmdAppCommand>
 80077ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d02d      	beq.n	800782e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077d6:	e047      	b.n	8007868 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2100      	movs	r1, #0
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 f80a 	bl	80087f8 <SDMMC_CmdAppCommand>
 80077e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	e03b      	b.n	8007868 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	491e      	ldr	r1, [pc, #120]	; (8007870 <SD_PowerON+0x118>)
 80077f6:	4618      	mov	r0, r3
 80077f8:	f001 f820 	bl	800883c <SDMMC_CmdAppOperCommand>
 80077fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007804:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007808:	e02e      	b.n	8007868 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2100      	movs	r1, #0
 8007810:	4618      	mov	r0, r3
 8007812:	f000 fe86 	bl	8008522 <SDMMC_GetResponse>
 8007816:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	0fdb      	lsrs	r3, r3, #31
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <SD_PowerON+0xcc>
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <SD_PowerON+0xce>
 8007824:	2300      	movs	r3, #0
 8007826:	613b      	str	r3, [r7, #16]

    count++;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	3301      	adds	r3, #1
 800782c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007834:	4293      	cmp	r3, r2
 8007836:	d802      	bhi.n	800783e <SD_PowerON+0xe6>
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0cc      	beq.n	80077d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007844:	4293      	cmp	r3, r2
 8007846:	d902      	bls.n	800784e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800784c:	e00c      	b.n	8007868 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	645a      	str	r2, [r3, #68]	; 0x44
 800785e:	e002      	b.n	8007866 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	c1100000 	.word	0xc1100000

08007874 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007888:	e018      	b.n	80078bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007892:	041b      	lsls	r3, r3, #16
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f001 f852 	bl	8008940 <SDMMC_CmdSendStatus>
 800789c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	e009      	b.n	80078bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fe37 	bl	8008522 <SDMMC_GetResponse>
 80078b4:	4602      	mov	r2, r0
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d03f      	beq.n	800795e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e033      	b.n	800794c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fda9 	bl	8008440 <SDMMC_ReadFIFO>
 80078ee:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3301      	adds	r3, #1
 80078fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3b01      	subs	r3, #1
 8007902:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	0a1b      	lsrs	r3, r3, #8
 8007908:	b2da      	uxtb	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3301      	adds	r3, #1
 8007912:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	3b01      	subs	r3, #1
 8007918:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	0c1b      	lsrs	r3, r3, #16
 800791e:	b2da      	uxtb	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3301      	adds	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	3b01      	subs	r3, #1
 800792e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	0e1b      	lsrs	r3, r3, #24
 8007934:	b2da      	uxtb	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	701a      	strb	r2, [r3, #0]
      tmp++;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3301      	adds	r3, #1
 800793e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	3b01      	subs	r3, #1
 8007944:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	3301      	adds	r3, #1
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b07      	cmp	r3, #7
 8007950:	d9c8      	bls.n	80078e4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800795e:	bf00      	nop
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b086      	sub	sp, #24
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d043      	beq.n	8007a08 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007980:	2300      	movs	r3, #0
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e037      	b.n	80079f6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3301      	adds	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	3b01      	subs	r3, #1
 8007996:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	021a      	lsls	r2, r3, #8
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3301      	adds	r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	041a      	lsls	r2, r3, #16
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3301      	adds	r3, #1
 80079c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	061a      	lsls	r2, r3, #24
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3301      	adds	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	3b01      	subs	r3, #1
 80079de:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f107 0208 	add.w	r2, r7, #8
 80079e8:	4611      	mov	r1, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fd35 	bl	800845a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	3301      	adds	r3, #1
 80079f4:	617b      	str	r3, [r7, #20]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2b07      	cmp	r3, #7
 80079fa:	d9c4      	bls.n	8007986 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007a08:	bf00      	nop
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e040      	b.n	8007aa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7f9 fda6 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2224      	movs	r2, #36	; 0x24
 8007a3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0201 	bic.w	r2, r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f8b0 	bl	8007bb4 <UART_SetConfig>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e022      	b.n	8007aa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fb08 	bl	800807c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fb8f 	bl	80081c0 <UART_CheckIdleState>
 8007aa2:	4603      	mov	r3, r0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	603b      	str	r3, [r7, #0]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d171      	bne.n	8007ba8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_UART_Transmit+0x24>
 8007aca:	88fb      	ldrh	r3, [r7, #6]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e06a      	b.n	8007baa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2221      	movs	r2, #33	; 0x21
 8007ae0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ae2:	f7fa f84d 	bl	8001b80 <HAL_GetTick>
 8007ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	88fa      	ldrh	r2, [r7, #6]
 8007af4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b00:	d108      	bne.n	8007b14 <HAL_UART_Transmit+0x68>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	61bb      	str	r3, [r7, #24]
 8007b12:	e003      	b.n	8007b1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b1c:	e02c      	b.n	8007b78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2180      	movs	r1, #128	; 0x80
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fb96 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e038      	b.n	8007baa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	3302      	adds	r3, #2
 8007b52:	61bb      	str	r3, [r7, #24]
 8007b54:	e007      	b.n	8007b66 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	781a      	ldrb	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	3301      	adds	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1cc      	bne.n	8007b1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2140      	movs	r1, #64	; 0x40
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fb63 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e005      	b.n	8007baa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e000      	b.n	8007baa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007ba8:	2302      	movs	r3, #2
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4ba6      	ldr	r3, [pc, #664]	; (8007e78 <UART_SetConfig+0x2c4>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6812      	ldr	r2, [r2, #0]
 8007be6:	6979      	ldr	r1, [r7, #20]
 8007be8:	430b      	orrs	r3, r1
 8007bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a94      	ldr	r2, [pc, #592]	; (8007e7c <UART_SetConfig+0x2c8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d120      	bne.n	8007c72 <UART_SetConfig+0xbe>
 8007c30:	4b93      	ldr	r3, [pc, #588]	; (8007e80 <UART_SetConfig+0x2cc>)
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d816      	bhi.n	8007c6c <UART_SetConfig+0xb8>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <UART_SetConfig+0x90>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c55 	.word	0x08007c55
 8007c48:	08007c61 	.word	0x08007c61
 8007c4c:	08007c5b 	.word	0x08007c5b
 8007c50:	08007c67 	.word	0x08007c67
 8007c54:	2301      	movs	r3, #1
 8007c56:	77fb      	strb	r3, [r7, #31]
 8007c58:	e150      	b.n	8007efc <UART_SetConfig+0x348>
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	77fb      	strb	r3, [r7, #31]
 8007c5e:	e14d      	b.n	8007efc <UART_SetConfig+0x348>
 8007c60:	2304      	movs	r3, #4
 8007c62:	77fb      	strb	r3, [r7, #31]
 8007c64:	e14a      	b.n	8007efc <UART_SetConfig+0x348>
 8007c66:	2308      	movs	r3, #8
 8007c68:	77fb      	strb	r3, [r7, #31]
 8007c6a:	e147      	b.n	8007efc <UART_SetConfig+0x348>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	77fb      	strb	r3, [r7, #31]
 8007c70:	e144      	b.n	8007efc <UART_SetConfig+0x348>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a83      	ldr	r2, [pc, #524]	; (8007e84 <UART_SetConfig+0x2d0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d132      	bne.n	8007ce2 <UART_SetConfig+0x12e>
 8007c7c:	4b80      	ldr	r3, [pc, #512]	; (8007e80 <UART_SetConfig+0x2cc>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	f003 030c 	and.w	r3, r3, #12
 8007c86:	2b0c      	cmp	r3, #12
 8007c88:	d828      	bhi.n	8007cdc <UART_SetConfig+0x128>
 8007c8a:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <UART_SetConfig+0xdc>)
 8007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c90:	08007cc5 	.word	0x08007cc5
 8007c94:	08007cdd 	.word	0x08007cdd
 8007c98:	08007cdd 	.word	0x08007cdd
 8007c9c:	08007cdd 	.word	0x08007cdd
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007cdd 	.word	0x08007cdd
 8007ca8:	08007cdd 	.word	0x08007cdd
 8007cac:	08007cdd 	.word	0x08007cdd
 8007cb0:	08007ccb 	.word	0x08007ccb
 8007cb4:	08007cdd 	.word	0x08007cdd
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007cdd 	.word	0x08007cdd
 8007cc0:	08007cd7 	.word	0x08007cd7
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	e118      	b.n	8007efc <UART_SetConfig+0x348>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	77fb      	strb	r3, [r7, #31]
 8007cce:	e115      	b.n	8007efc <UART_SetConfig+0x348>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	77fb      	strb	r3, [r7, #31]
 8007cd4:	e112      	b.n	8007efc <UART_SetConfig+0x348>
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	77fb      	strb	r3, [r7, #31]
 8007cda:	e10f      	b.n	8007efc <UART_SetConfig+0x348>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	77fb      	strb	r3, [r7, #31]
 8007ce0:	e10c      	b.n	8007efc <UART_SetConfig+0x348>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a68      	ldr	r2, [pc, #416]	; (8007e88 <UART_SetConfig+0x2d4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d120      	bne.n	8007d2e <UART_SetConfig+0x17a>
 8007cec:	4b64      	ldr	r3, [pc, #400]	; (8007e80 <UART_SetConfig+0x2cc>)
 8007cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cf6:	2b30      	cmp	r3, #48	; 0x30
 8007cf8:	d013      	beq.n	8007d22 <UART_SetConfig+0x16e>
 8007cfa:	2b30      	cmp	r3, #48	; 0x30
 8007cfc:	d814      	bhi.n	8007d28 <UART_SetConfig+0x174>
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d009      	beq.n	8007d16 <UART_SetConfig+0x162>
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	d810      	bhi.n	8007d28 <UART_SetConfig+0x174>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <UART_SetConfig+0x15c>
 8007d0a:	2b10      	cmp	r3, #16
 8007d0c:	d006      	beq.n	8007d1c <UART_SetConfig+0x168>
 8007d0e:	e00b      	b.n	8007d28 <UART_SetConfig+0x174>
 8007d10:	2300      	movs	r3, #0
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	e0f2      	b.n	8007efc <UART_SetConfig+0x348>
 8007d16:	2302      	movs	r3, #2
 8007d18:	77fb      	strb	r3, [r7, #31]
 8007d1a:	e0ef      	b.n	8007efc <UART_SetConfig+0x348>
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	77fb      	strb	r3, [r7, #31]
 8007d20:	e0ec      	b.n	8007efc <UART_SetConfig+0x348>
 8007d22:	2308      	movs	r3, #8
 8007d24:	77fb      	strb	r3, [r7, #31]
 8007d26:	e0e9      	b.n	8007efc <UART_SetConfig+0x348>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	77fb      	strb	r3, [r7, #31]
 8007d2c:	e0e6      	b.n	8007efc <UART_SetConfig+0x348>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a56      	ldr	r2, [pc, #344]	; (8007e8c <UART_SetConfig+0x2d8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d120      	bne.n	8007d7a <UART_SetConfig+0x1c6>
 8007d38:	4b51      	ldr	r3, [pc, #324]	; (8007e80 <UART_SetConfig+0x2cc>)
 8007d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d42:	2bc0      	cmp	r3, #192	; 0xc0
 8007d44:	d013      	beq.n	8007d6e <UART_SetConfig+0x1ba>
 8007d46:	2bc0      	cmp	r3, #192	; 0xc0
 8007d48:	d814      	bhi.n	8007d74 <UART_SetConfig+0x1c0>
 8007d4a:	2b80      	cmp	r3, #128	; 0x80
 8007d4c:	d009      	beq.n	8007d62 <UART_SetConfig+0x1ae>
 8007d4e:	2b80      	cmp	r3, #128	; 0x80
 8007d50:	d810      	bhi.n	8007d74 <UART_SetConfig+0x1c0>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <UART_SetConfig+0x1a8>
 8007d56:	2b40      	cmp	r3, #64	; 0x40
 8007d58:	d006      	beq.n	8007d68 <UART_SetConfig+0x1b4>
 8007d5a:	e00b      	b.n	8007d74 <UART_SetConfig+0x1c0>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e0cc      	b.n	8007efc <UART_SetConfig+0x348>
 8007d62:	2302      	movs	r3, #2
 8007d64:	77fb      	strb	r3, [r7, #31]
 8007d66:	e0c9      	b.n	8007efc <UART_SetConfig+0x348>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e0c6      	b.n	8007efc <UART_SetConfig+0x348>
 8007d6e:	2308      	movs	r3, #8
 8007d70:	77fb      	strb	r3, [r7, #31]
 8007d72:	e0c3      	b.n	8007efc <UART_SetConfig+0x348>
 8007d74:	2310      	movs	r3, #16
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e0c0      	b.n	8007efc <UART_SetConfig+0x348>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a44      	ldr	r2, [pc, #272]	; (8007e90 <UART_SetConfig+0x2dc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d125      	bne.n	8007dd0 <UART_SetConfig+0x21c>
 8007d84:	4b3e      	ldr	r3, [pc, #248]	; (8007e80 <UART_SetConfig+0x2cc>)
 8007d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d92:	d017      	beq.n	8007dc4 <UART_SetConfig+0x210>
 8007d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d98:	d817      	bhi.n	8007dca <UART_SetConfig+0x216>
 8007d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d9e:	d00b      	beq.n	8007db8 <UART_SetConfig+0x204>
 8007da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da4:	d811      	bhi.n	8007dca <UART_SetConfig+0x216>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <UART_SetConfig+0x1fe>
 8007daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dae:	d006      	beq.n	8007dbe <UART_SetConfig+0x20a>
 8007db0:	e00b      	b.n	8007dca <UART_SetConfig+0x216>
 8007db2:	2300      	movs	r3, #0
 8007db4:	77fb      	strb	r3, [r7, #31]
 8007db6:	e0a1      	b.n	8007efc <UART_SetConfig+0x348>
 8007db8:	2302      	movs	r3, #2
 8007dba:	77fb      	strb	r3, [r7, #31]
 8007dbc:	e09e      	b.n	8007efc <UART_SetConfig+0x348>
 8007dbe:	2304      	movs	r3, #4
 8007dc0:	77fb      	strb	r3, [r7, #31]
 8007dc2:	e09b      	b.n	8007efc <UART_SetConfig+0x348>
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	77fb      	strb	r3, [r7, #31]
 8007dc8:	e098      	b.n	8007efc <UART_SetConfig+0x348>
 8007dca:	2310      	movs	r3, #16
 8007dcc:	77fb      	strb	r3, [r7, #31]
 8007dce:	e095      	b.n	8007efc <UART_SetConfig+0x348>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a2f      	ldr	r2, [pc, #188]	; (8007e94 <UART_SetConfig+0x2e0>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d125      	bne.n	8007e26 <UART_SetConfig+0x272>
 8007dda:	4b29      	ldr	r3, [pc, #164]	; (8007e80 <UART_SetConfig+0x2cc>)
 8007ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007de8:	d017      	beq.n	8007e1a <UART_SetConfig+0x266>
 8007dea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dee:	d817      	bhi.n	8007e20 <UART_SetConfig+0x26c>
 8007df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df4:	d00b      	beq.n	8007e0e <UART_SetConfig+0x25a>
 8007df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dfa:	d811      	bhi.n	8007e20 <UART_SetConfig+0x26c>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <UART_SetConfig+0x254>
 8007e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e04:	d006      	beq.n	8007e14 <UART_SetConfig+0x260>
 8007e06:	e00b      	b.n	8007e20 <UART_SetConfig+0x26c>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	77fb      	strb	r3, [r7, #31]
 8007e0c:	e076      	b.n	8007efc <UART_SetConfig+0x348>
 8007e0e:	2302      	movs	r3, #2
 8007e10:	77fb      	strb	r3, [r7, #31]
 8007e12:	e073      	b.n	8007efc <UART_SetConfig+0x348>
 8007e14:	2304      	movs	r3, #4
 8007e16:	77fb      	strb	r3, [r7, #31]
 8007e18:	e070      	b.n	8007efc <UART_SetConfig+0x348>
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	77fb      	strb	r3, [r7, #31]
 8007e1e:	e06d      	b.n	8007efc <UART_SetConfig+0x348>
 8007e20:	2310      	movs	r3, #16
 8007e22:	77fb      	strb	r3, [r7, #31]
 8007e24:	e06a      	b.n	8007efc <UART_SetConfig+0x348>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1b      	ldr	r2, [pc, #108]	; (8007e98 <UART_SetConfig+0x2e4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d138      	bne.n	8007ea2 <UART_SetConfig+0x2ee>
 8007e30:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <UART_SetConfig+0x2cc>)
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e3e:	d017      	beq.n	8007e70 <UART_SetConfig+0x2bc>
 8007e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e44:	d82a      	bhi.n	8007e9c <UART_SetConfig+0x2e8>
 8007e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e4a:	d00b      	beq.n	8007e64 <UART_SetConfig+0x2b0>
 8007e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e50:	d824      	bhi.n	8007e9c <UART_SetConfig+0x2e8>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <UART_SetConfig+0x2aa>
 8007e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e5a:	d006      	beq.n	8007e6a <UART_SetConfig+0x2b6>
 8007e5c:	e01e      	b.n	8007e9c <UART_SetConfig+0x2e8>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	77fb      	strb	r3, [r7, #31]
 8007e62:	e04b      	b.n	8007efc <UART_SetConfig+0x348>
 8007e64:	2302      	movs	r3, #2
 8007e66:	77fb      	strb	r3, [r7, #31]
 8007e68:	e048      	b.n	8007efc <UART_SetConfig+0x348>
 8007e6a:	2304      	movs	r3, #4
 8007e6c:	77fb      	strb	r3, [r7, #31]
 8007e6e:	e045      	b.n	8007efc <UART_SetConfig+0x348>
 8007e70:	2308      	movs	r3, #8
 8007e72:	77fb      	strb	r3, [r7, #31]
 8007e74:	e042      	b.n	8007efc <UART_SetConfig+0x348>
 8007e76:	bf00      	nop
 8007e78:	efff69f3 	.word	0xefff69f3
 8007e7c:	40011000 	.word	0x40011000
 8007e80:	40023800 	.word	0x40023800
 8007e84:	40004400 	.word	0x40004400
 8007e88:	40004800 	.word	0x40004800
 8007e8c:	40004c00 	.word	0x40004c00
 8007e90:	40005000 	.word	0x40005000
 8007e94:	40011400 	.word	0x40011400
 8007e98:	40007800 	.word	0x40007800
 8007e9c:	2310      	movs	r3, #16
 8007e9e:	77fb      	strb	r3, [r7, #31]
 8007ea0:	e02c      	b.n	8007efc <UART_SetConfig+0x348>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a72      	ldr	r2, [pc, #456]	; (8008070 <UART_SetConfig+0x4bc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d125      	bne.n	8007ef8 <UART_SetConfig+0x344>
 8007eac:	4b71      	ldr	r3, [pc, #452]	; (8008074 <UART_SetConfig+0x4c0>)
 8007eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007eb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007eba:	d017      	beq.n	8007eec <UART_SetConfig+0x338>
 8007ebc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ec0:	d817      	bhi.n	8007ef2 <UART_SetConfig+0x33e>
 8007ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec6:	d00b      	beq.n	8007ee0 <UART_SetConfig+0x32c>
 8007ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ecc:	d811      	bhi.n	8007ef2 <UART_SetConfig+0x33e>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <UART_SetConfig+0x326>
 8007ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ed6:	d006      	beq.n	8007ee6 <UART_SetConfig+0x332>
 8007ed8:	e00b      	b.n	8007ef2 <UART_SetConfig+0x33e>
 8007eda:	2300      	movs	r3, #0
 8007edc:	77fb      	strb	r3, [r7, #31]
 8007ede:	e00d      	b.n	8007efc <UART_SetConfig+0x348>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e00a      	b.n	8007efc <UART_SetConfig+0x348>
 8007ee6:	2304      	movs	r3, #4
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e007      	b.n	8007efc <UART_SetConfig+0x348>
 8007eec:	2308      	movs	r3, #8
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e004      	b.n	8007efc <UART_SetConfig+0x348>
 8007ef2:	2310      	movs	r3, #16
 8007ef4:	77fb      	strb	r3, [r7, #31]
 8007ef6:	e001      	b.n	8007efc <UART_SetConfig+0x348>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f04:	d15b      	bne.n	8007fbe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007f06:	7ffb      	ldrb	r3, [r7, #31]
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d828      	bhi.n	8007f5e <UART_SetConfig+0x3aa>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <UART_SetConfig+0x360>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f49 	.word	0x08007f49
 8007f20:	08007f5f 	.word	0x08007f5f
 8007f24:	08007f4f 	.word	0x08007f4f
 8007f28:	08007f5f 	.word	0x08007f5f
 8007f2c:	08007f5f 	.word	0x08007f5f
 8007f30:	08007f5f 	.word	0x08007f5f
 8007f34:	08007f57 	.word	0x08007f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f38:	f7fd fff2 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 8007f3c:	61b8      	str	r0, [r7, #24]
        break;
 8007f3e:	e013      	b.n	8007f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f40:	f7fe f802 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 8007f44:	61b8      	str	r0, [r7, #24]
        break;
 8007f46:	e00f      	b.n	8007f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f48:	4b4b      	ldr	r3, [pc, #300]	; (8008078 <UART_SetConfig+0x4c4>)
 8007f4a:	61bb      	str	r3, [r7, #24]
        break;
 8007f4c:	e00c      	b.n	8007f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f4e:	f7fd fed5 	bl	8005cfc <HAL_RCC_GetSysClockFreq>
 8007f52:	61b8      	str	r0, [r7, #24]
        break;
 8007f54:	e008      	b.n	8007f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f5a:	61bb      	str	r3, [r7, #24]
        break;
 8007f5c:	e004      	b.n	8007f68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	77bb      	strb	r3, [r7, #30]
        break;
 8007f66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d074      	beq.n	8008058 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	005a      	lsls	r2, r3, #1
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	441a      	add	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	2b0f      	cmp	r3, #15
 8007f88:	d916      	bls.n	8007fb8 <UART_SetConfig+0x404>
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f90:	d212      	bcs.n	8007fb8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f023 030f 	bic.w	r3, r3, #15
 8007f9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	89fa      	ldrh	r2, [r7, #14]
 8007fb4:	60da      	str	r2, [r3, #12]
 8007fb6:	e04f      	b.n	8008058 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	77bb      	strb	r3, [r7, #30]
 8007fbc:	e04c      	b.n	8008058 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fbe:	7ffb      	ldrb	r3, [r7, #31]
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d828      	bhi.n	8008016 <UART_SetConfig+0x462>
 8007fc4:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <UART_SetConfig+0x418>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007ff9 	.word	0x08007ff9
 8007fd4:	08008001 	.word	0x08008001
 8007fd8:	08008017 	.word	0x08008017
 8007fdc:	08008007 	.word	0x08008007
 8007fe0:	08008017 	.word	0x08008017
 8007fe4:	08008017 	.word	0x08008017
 8007fe8:	08008017 	.word	0x08008017
 8007fec:	0800800f 	.word	0x0800800f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ff0:	f7fd ff96 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 8007ff4:	61b8      	str	r0, [r7, #24]
        break;
 8007ff6:	e013      	b.n	8008020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ff8:	f7fd ffa6 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 8007ffc:	61b8      	str	r0, [r7, #24]
        break;
 8007ffe:	e00f      	b.n	8008020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008000:	4b1d      	ldr	r3, [pc, #116]	; (8008078 <UART_SetConfig+0x4c4>)
 8008002:	61bb      	str	r3, [r7, #24]
        break;
 8008004:	e00c      	b.n	8008020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008006:	f7fd fe79 	bl	8005cfc <HAL_RCC_GetSysClockFreq>
 800800a:	61b8      	str	r0, [r7, #24]
        break;
 800800c:	e008      	b.n	8008020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800800e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008012:	61bb      	str	r3, [r7, #24]
        break;
 8008014:	e004      	b.n	8008020 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	77bb      	strb	r3, [r7, #30]
        break;
 800801e:	bf00      	nop
    }

    if (pclk != 0U)
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d018      	beq.n	8008058 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	085a      	lsrs	r2, r3, #1
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	441a      	add	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	fbb2 f3f3 	udiv	r3, r2, r3
 8008038:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b0f      	cmp	r3, #15
 800803e:	d909      	bls.n	8008054 <UART_SetConfig+0x4a0>
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008046:	d205      	bcs.n	8008054 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	b29a      	uxth	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60da      	str	r2, [r3, #12]
 8008052:	e001      	b.n	8008058 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008064:	7fbb      	ldrb	r3, [r7, #30]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3720      	adds	r7, #32
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	40007c00 	.word	0x40007c00
 8008074:	40023800 	.word	0x40023800
 8008078:	00f42400 	.word	0x00f42400

0800807c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	f003 0308 	and.w	r3, r3, #8
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01a      	beq.n	8008192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800817a:	d10a      	bne.n	8008192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	605a      	str	r2, [r3, #4]
  }
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081d0:	f7f9 fcd6 	bl	8001b80 <HAL_GetTick>
 80081d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d10e      	bne.n	8008202 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f831 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e027      	b.n	8008252 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b04      	cmp	r3, #4
 800820e:	d10e      	bne.n	800822e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f81b 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e011      	b.n	8008252 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2220      	movs	r2, #32
 8008238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b09c      	sub	sp, #112	; 0x70
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	4613      	mov	r3, r2
 8008268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826a:	e0a7      	b.n	80083bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800826c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800826e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008272:	f000 80a3 	beq.w	80083bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008276:	f7f9 fc83 	bl	8001b80 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008282:	429a      	cmp	r2, r3
 8008284:	d302      	bcc.n	800828c <UART_WaitOnFlagUntilTimeout+0x32>
 8008286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008288:	2b00      	cmp	r3, #0
 800828a:	d13f      	bne.n	800830c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800829a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a0:	667b      	str	r3, [r7, #100]	; 0x64
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e6      	bne.n	800828c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	f023 0301 	bic.w	r3, r3, #1
 80082d4:	663b      	str	r3, [r7, #96]	; 0x60
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082de:	64ba      	str	r2, [r7, #72]	; 0x48
 80082e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e5      	bne.n	80082be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2220      	movs	r2, #32
 80082f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e068      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	d050      	beq.n	80083bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008328:	d148      	bne.n	80083bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008332:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008348:	66fb      	str	r3, [r7, #108]	; 0x6c
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008352:	637b      	str	r3, [r7, #52]	; 0x34
 8008354:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e6      	bne.n	8008334 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3308      	adds	r3, #8
 800836c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	613b      	str	r3, [r7, #16]
   return(result);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f023 0301 	bic.w	r3, r3, #1
 800837c:	66bb      	str	r3, [r7, #104]	; 0x68
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008386:	623a      	str	r2, [r7, #32]
 8008388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	69f9      	ldr	r1, [r7, #28]
 800838c:	6a3a      	ldr	r2, [r7, #32]
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	61bb      	str	r3, [r7, #24]
   return(result);
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e5      	bne.n	8008366 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2220      	movs	r2, #32
 800839e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e010      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69da      	ldr	r2, [r3, #28]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4013      	ands	r3, r2
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	bf0c      	ite	eq
 80083cc:	2301      	moveq	r3, #1
 80083ce:	2300      	movne	r3, #0
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	461a      	mov	r2, r3
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	f43f af48 	beq.w	800826c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3770      	adds	r7, #112	; 0x70
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80083e8:	b084      	sub	sp, #16
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	f107 001c 	add.w	r0, r7, #28
 80083f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80083fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008400:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008402:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008406:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800840a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800840e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008412:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	4b07      	ldr	r3, [pc, #28]	; (800843c <SDMMC_Init+0x54>)
 8008420:	4013      	ands	r3, r2
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	b004      	add	sp, #16
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	ffff8100 	.word	0xffff8100

08008440 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800844e:	4618      	mov	r0, r3
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2203      	movs	r2, #3
 8008488:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0303 	and.w	r3, r3, #3
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80084d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80084de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	4b06      	ldr	r3, [pc, #24]	; (8008504 <SDMMC_SendCommand+0x50>)
 80084ec:	4013      	ands	r3, r2
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	431a      	orrs	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	fffff000 	.word	0xfffff000

08008508 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	b2db      	uxtb	r3, r3
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3314      	adds	r3, #20
 8008530:	461a      	mov	r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	4413      	add	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
}  
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800856e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008574:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800857a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008592:	2300      	movs	r3, #0

}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80085ae:	2310      	movs	r3, #16
 80085b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085b2:	2340      	movs	r3, #64	; 0x40
 80085b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085c0:	f107 0308 	add.w	r3, r7, #8
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7ff ff74 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80085cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d0:	2110      	movs	r1, #16
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f9d6 	bl	8008984 <SDMMC_GetCmdResp1>
 80085d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085da:	69fb      	ldr	r3, [r7, #28]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80085f2:	2311      	movs	r3, #17
 80085f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085f6:	2340      	movs	r3, #64	; 0x40
 80085f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085fa:	2300      	movs	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008602:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008604:	f107 0308 	add.w	r3, r7, #8
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff ff52 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008610:	f241 3288 	movw	r2, #5000	; 0x1388
 8008614:	2111      	movs	r1, #17
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f9b4 	bl	8008984 <SDMMC_GetCmdResp1>
 800861c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800861e:	69fb      	ldr	r3, [r7, #28]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008636:	2312      	movs	r3, #18
 8008638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800863a:	2340      	movs	r3, #64	; 0x40
 800863c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008646:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008648:	f107 0308 	add.w	r3, r7, #8
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff ff30 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008654:	f241 3288 	movw	r2, #5000	; 0x1388
 8008658:	2112      	movs	r1, #18
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f992 	bl	8008984 <SDMMC_GetCmdResp1>
 8008660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008662:	69fb      	ldr	r3, [r7, #28]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800867a:	2318      	movs	r3, #24
 800867c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800867e:	2340      	movs	r3, #64	; 0x40
 8008680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800868c:	f107 0308 	add.w	r3, r7, #8
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff ff0e 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008698:	f241 3288 	movw	r2, #5000	; 0x1388
 800869c:	2118      	movs	r1, #24
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f970 	bl	8008984 <SDMMC_GetCmdResp1>
 80086a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086a6:	69fb      	ldr	r3, [r7, #28]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3720      	adds	r7, #32
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80086be:	2319      	movs	r3, #25
 80086c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086c2:	2340      	movs	r3, #64	; 0x40
 80086c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086d0:	f107 0308 	add.w	r3, r7, #8
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff feec 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80086dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e0:	2119      	movs	r1, #25
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f94e 	bl	8008984 <SDMMC_GetCmdResp1>
 80086e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086ea:	69fb      	ldr	r3, [r7, #28]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3720      	adds	r7, #32
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008700:	230c      	movs	r3, #12
 8008702:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800870c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008710:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008712:	f107 0308 	add.w	r3, r7, #8
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff fecb 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800871e:	4a05      	ldr	r2, [pc, #20]	; (8008734 <SDMMC_CmdStopTransfer+0x40>)
 8008720:	210c      	movs	r1, #12
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f92e 	bl	8008984 <SDMMC_GetCmdResp1>
 8008728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800872a:	69fb      	ldr	r3, [r7, #28]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	05f5e100 	.word	0x05f5e100

08008738 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08a      	sub	sp, #40	; 0x28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008748:	2307      	movs	r3, #7
 800874a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800874c:	2340      	movs	r3, #64	; 0x40
 800874e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008750:	2300      	movs	r3, #0
 8008752:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008758:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800875a:	f107 0310 	add.w	r3, r7, #16
 800875e:	4619      	mov	r1, r3
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f7ff fea7 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008766:	f241 3288 	movw	r2, #5000	; 0x1388
 800876a:	2107      	movs	r1, #7
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f909 	bl	8008984 <SDMMC_GetCmdResp1>
 8008772:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008776:	4618      	mov	r0, r3
 8008778:	3728      	adds	r7, #40	; 0x28
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b088      	sub	sp, #32
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800878e:	2300      	movs	r3, #0
 8008790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800879c:	f107 0308 	add.w	r3, r7, #8
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fe86 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fb23 	bl	8008df4 <SDMMC_GetCmdError>
 80087ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087b0:	69fb      	ldr	r3, [r7, #28]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b088      	sub	sp, #32
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80087c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80087c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80087c8:	2308      	movs	r3, #8
 80087ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087cc:	2340      	movs	r3, #64	; 0x40
 80087ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087da:	f107 0308 	add.w	r3, r7, #8
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff fe67 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fab6 	bl	8008d58 <SDMMC_GetCmdResp7>
 80087ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087ee:	69fb      	ldr	r3, [r7, #28]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3720      	adds	r7, #32
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008806:	2337      	movs	r3, #55	; 0x37
 8008808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800880a:	2340      	movs	r3, #64	; 0x40
 800880c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008816:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008818:	f107 0308 	add.w	r3, r7, #8
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fe48 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008824:	f241 3288 	movw	r2, #5000	; 0x1388
 8008828:	2137      	movs	r1, #55	; 0x37
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f8aa 	bl	8008984 <SDMMC_GetCmdResp1>
 8008830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008832:	69fb      	ldr	r3, [r7, #28]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3720      	adds	r7, #32
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <SDMMC_CmdAppOperCommand+0x44>)
 800884a:	4313      	orrs	r3, r2
 800884c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800884e:	2329      	movs	r3, #41	; 0x29
 8008850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008852:	2340      	movs	r3, #64	; 0x40
 8008854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800885a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800885e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008860:	f107 0308 	add.w	r3, r7, #8
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff fe24 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f9bf 	bl	8008bf0 <SDMMC_GetCmdResp3>
 8008872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008874:	69fb      	ldr	r3, [r7, #28]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3720      	adds	r7, #32
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	80100000 	.word	0x80100000

08008884 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008890:	2302      	movs	r3, #2
 8008892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008894:	23c0      	movs	r3, #192	; 0xc0
 8008896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800889c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088a2:	f107 0308 	add.w	r3, r7, #8
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff fe03 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f956 	bl	8008b60 <SDMMC_GetCmdResp2>
 80088b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088b6:	69fb      	ldr	r3, [r7, #28]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3720      	adds	r7, #32
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80088ce:	2309      	movs	r3, #9
 80088d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80088d2:	23c0      	movs	r3, #192	; 0xc0
 80088d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088d6:	2300      	movs	r3, #0
 80088d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088e0:	f107 0308 	add.w	r3, r7, #8
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fde4 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f937 	bl	8008b60 <SDMMC_GetCmdResp2>
 80088f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088f4:	69fb      	ldr	r3, [r7, #28]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3720      	adds	r7, #32
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b088      	sub	sp, #32
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800890c:	2303      	movs	r3, #3
 800890e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008910:	2340      	movs	r3, #64	; 0x40
 8008912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008914:	2300      	movs	r3, #0
 8008916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800891e:	f107 0308 	add.w	r3, r7, #8
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fdc5 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	2103      	movs	r1, #3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f99c 	bl	8008c6c <SDMMC_GetCmdResp6>
 8008934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008936:	69fb      	ldr	r3, [r7, #28]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3720      	adds	r7, #32
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800894e:	230d      	movs	r3, #13
 8008950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008952:	2340      	movs	r3, #64	; 0x40
 8008954:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008956:	2300      	movs	r3, #0
 8008958:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800895a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800895e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008960:	f107 0308 	add.w	r3, r7, #8
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff fda4 	bl	80084b4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800896c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008970:	210d      	movs	r1, #13
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f806 	bl	8008984 <SDMMC_GetCmdResp1>
 8008978:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800897a:	69fb      	ldr	r3, [r7, #28]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3720      	adds	r7, #32
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	460b      	mov	r3, r1
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008992:	4b70      	ldr	r3, [pc, #448]	; (8008b54 <SDMMC_GetCmdResp1+0x1d0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a70      	ldr	r2, [pc, #448]	; (8008b58 <SDMMC_GetCmdResp1+0x1d4>)
 8008998:	fba2 2303 	umull	r2, r3, r2, r3
 800899c:	0a5a      	lsrs	r2, r3, #9
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	fb02 f303 	mul.w	r3, r2, r3
 80089a4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	1e5a      	subs	r2, r3, #1
 80089aa:	61fa      	str	r2, [r7, #28]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089b4:	e0c9      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0ef      	beq.n	80089a6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1ea      	bne.n	80089a6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d004      	beq.n	80089e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2204      	movs	r2, #4
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089e2:	2304      	movs	r3, #4
 80089e4:	e0b1      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d004      	beq.n	80089fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2201      	movs	r2, #1
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0a6      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	22c5      	movs	r2, #197	; 0xc5
 8008a00:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f7ff fd80 	bl	8008508 <SDMMC_GetCommandResponse>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	7afb      	ldrb	r3, [r7, #11]
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d001      	beq.n	8008a16 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e099      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a16:	2100      	movs	r1, #0
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff fd82 	bl	8008522 <SDMMC_GetResponse>
 8008a1e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	4b4e      	ldr	r3, [pc, #312]	; (8008b5c <SDMMC_GetCmdResp1+0x1d8>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e08d      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	da02      	bge.n	8008a3a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008a34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a38:	e087      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008a44:	2340      	movs	r3, #64	; 0x40
 8008a46:	e080      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008a52:	2380      	movs	r3, #128	; 0x80
 8008a54:	e079      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a64:	e071      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a74:	e069      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a84:	e061      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a94:	e059      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aa4:	e051      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ab4:	e049      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ac4:	e041      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad4:	e039      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ae4:	e031      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008af0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008af4:	e029      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b04:	e021      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b14:	e019      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b24:	e011      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d002      	beq.n	8008b36 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b34:	e009      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008b40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b44:	e001      	b.n	8008b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000000 	.word	0x20000000
 8008b58:	10624dd3 	.word	0x10624dd3
 8008b5c:	fdffe008 	.word	0xfdffe008

08008b60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b68:	4b1f      	ldr	r3, [pc, #124]	; (8008be8 <SDMMC_GetCmdResp2+0x88>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1f      	ldr	r2, [pc, #124]	; (8008bec <SDMMC_GetCmdResp2+0x8c>)
 8008b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b72:	0a5b      	lsrs	r3, r3, #9
 8008b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
 8008b7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1e5a      	subs	r2, r3, #1
 8008b82:	60fa      	str	r2, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b8c:	e026      	b.n	8008bdc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0ef      	beq.n	8008b7e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1ea      	bne.n	8008b7e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2204      	movs	r2, #4
 8008bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bba:	2304      	movs	r3, #4
 8008bbc:	e00e      	b.n	8008bdc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d004      	beq.n	8008bd4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e003      	b.n	8008bdc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	22c5      	movs	r2, #197	; 0xc5
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	20000000 	.word	0x20000000
 8008bec:	10624dd3 	.word	0x10624dd3

08008bf0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bf8:	4b1a      	ldr	r3, [pc, #104]	; (8008c64 <SDMMC_GetCmdResp3+0x74>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a1a      	ldr	r2, [pc, #104]	; (8008c68 <SDMMC_GetCmdResp3+0x78>)
 8008bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008c02:	0a5b      	lsrs	r3, r3, #9
 8008c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c08:	fb02 f303 	mul.w	r3, r2, r3
 8008c0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	1e5a      	subs	r2, r3, #1
 8008c12:	60fa      	str	r2, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d102      	bne.n	8008c1e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c1c:	e01b      	b.n	8008c56 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0ef      	beq.n	8008c0e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1ea      	bne.n	8008c0e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d004      	beq.n	8008c4e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2204      	movs	r2, #4
 8008c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c4a:	2304      	movs	r3, #4
 8008c4c:	e003      	b.n	8008c56 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	22c5      	movs	r2, #197	; 0xc5
 8008c52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20000000 	.word	0x20000000
 8008c68:	10624dd3 	.word	0x10624dd3

08008c6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	460b      	mov	r3, r1
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c7a:	4b35      	ldr	r3, [pc, #212]	; (8008d50 <SDMMC_GetCmdResp6+0xe4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a35      	ldr	r2, [pc, #212]	; (8008d54 <SDMMC_GetCmdResp6+0xe8>)
 8008c80:	fba2 2303 	umull	r2, r3, r2, r3
 8008c84:	0a5b      	lsrs	r3, r3, #9
 8008c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c8a:	fb02 f303 	mul.w	r3, r2, r3
 8008c8e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	1e5a      	subs	r2, r3, #1
 8008c94:	61fa      	str	r2, [r7, #28]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c9e:	e052      	b.n	8008d46 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0ef      	beq.n	8008c90 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1ea      	bne.n	8008c90 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d004      	beq.n	8008cd0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2204      	movs	r2, #4
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ccc:	2304      	movs	r3, #4
 8008cce:	e03a      	b.n	8008d46 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d004      	beq.n	8008ce6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e02f      	b.n	8008d46 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7ff fc0e 	bl	8008508 <SDMMC_GetCommandResponse>
 8008cec:	4603      	mov	r3, r0
 8008cee:	461a      	mov	r2, r3
 8008cf0:	7afb      	ldrb	r3, [r7, #11]
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d001      	beq.n	8008cfa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e025      	b.n	8008d46 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	22c5      	movs	r2, #197	; 0xc5
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d00:	2100      	movs	r1, #0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f7ff fc0d 	bl	8008522 <SDMMC_GetResponse>
 8008d08:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d106      	bne.n	8008d22 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	0c1b      	lsrs	r3, r3, #16
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e011      	b.n	8008d46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d30:	e009      	b.n	8008d46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d40:	e001      	b.n	8008d46 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000000 	.word	0x20000000
 8008d54:	10624dd3 	.word	0x10624dd3

08008d58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d60:	4b22      	ldr	r3, [pc, #136]	; (8008dec <SDMMC_GetCmdResp7+0x94>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a22      	ldr	r2, [pc, #136]	; (8008df0 <SDMMC_GetCmdResp7+0x98>)
 8008d66:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6a:	0a5b      	lsrs	r3, r3, #9
 8008d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d70:	fb02 f303 	mul.w	r3, r2, r3
 8008d74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1e5a      	subs	r2, r3, #1
 8008d7a:	60fa      	str	r2, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d84:	e02c      	b.n	8008de0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0ef      	beq.n	8008d76 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1ea      	bne.n	8008d76 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da4:	f003 0304 	and.w	r3, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2204      	movs	r2, #4
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008db2:	2304      	movs	r3, #4
 8008db4:	e014      	b.n	8008de0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d004      	beq.n	8008dcc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e009      	b.n	8008de0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2240      	movs	r2, #64	; 0x40
 8008ddc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008dde:	2300      	movs	r3, #0
  
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	20000000 	.word	0x20000000
 8008df0:	10624dd3 	.word	0x10624dd3

08008df4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008dfc:	4b11      	ldr	r3, [pc, #68]	; (8008e44 <SDMMC_GetCmdError+0x50>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a11      	ldr	r2, [pc, #68]	; (8008e48 <SDMMC_GetCmdError+0x54>)
 8008e02:	fba2 2303 	umull	r2, r3, r2, r3
 8008e06:	0a5b      	lsrs	r3, r3, #9
 8008e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0c:	fb02 f303 	mul.w	r3, r2, r3
 8008e10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	1e5a      	subs	r2, r3, #1
 8008e16:	60fa      	str	r2, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e20:	e009      	b.n	8008e36 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0f1      	beq.n	8008e12 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	22c5      	movs	r2, #197	; 0xc5
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20000000 	.word	0x20000000
 8008e48:	10624dd3 	.word	0x10624dd3

08008e4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	f107 001c 	add.w	r0, r7, #28
 8008e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d120      	bne.n	8008ea6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68da      	ldr	r2, [r3, #12]
 8008e74:	4b20      	ldr	r3, [pc, #128]	; (8008ef8 <USB_CoreInit+0xac>)
 8008e76:	4013      	ands	r3, r2
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d105      	bne.n	8008e9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 fbee 	bl	800a67c <USB_CoreReset>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73fb      	strb	r3, [r7, #15]
 8008ea4:	e010      	b.n	8008ec8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fbe2 	bl	800a67c <USB_CoreReset>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d10b      	bne.n	8008ee6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f043 0206 	orr.w	r2, r3, #6
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f043 0220 	orr.w	r2, r3, #32
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ef2:	b004      	add	sp, #16
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	ffbdffbf 	.word	0xffbdffbf

08008efc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d165      	bne.n	8008fdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4a41      	ldr	r2, [pc, #260]	; (8009018 <USB_SetTurnaroundTime+0x11c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d906      	bls.n	8008f26 <USB_SetTurnaroundTime+0x2a>
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4a40      	ldr	r2, [pc, #256]	; (800901c <USB_SetTurnaroundTime+0x120>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d202      	bcs.n	8008f26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f20:	230f      	movs	r3, #15
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e062      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	4a3c      	ldr	r2, [pc, #240]	; (800901c <USB_SetTurnaroundTime+0x120>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d306      	bcc.n	8008f3c <USB_SetTurnaroundTime+0x40>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	4a3b      	ldr	r2, [pc, #236]	; (8009020 <USB_SetTurnaroundTime+0x124>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d202      	bcs.n	8008f3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f36:	230e      	movs	r3, #14
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	e057      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4a38      	ldr	r2, [pc, #224]	; (8009020 <USB_SetTurnaroundTime+0x124>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d306      	bcc.n	8008f52 <USB_SetTurnaroundTime+0x56>
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4a37      	ldr	r2, [pc, #220]	; (8009024 <USB_SetTurnaroundTime+0x128>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d202      	bcs.n	8008f52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f4c:	230d      	movs	r3, #13
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	e04c      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	4a33      	ldr	r2, [pc, #204]	; (8009024 <USB_SetTurnaroundTime+0x128>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d306      	bcc.n	8008f68 <USB_SetTurnaroundTime+0x6c>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	4a32      	ldr	r2, [pc, #200]	; (8009028 <USB_SetTurnaroundTime+0x12c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d802      	bhi.n	8008f68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f62:	230c      	movs	r3, #12
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	e041      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4a2f      	ldr	r2, [pc, #188]	; (8009028 <USB_SetTurnaroundTime+0x12c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d906      	bls.n	8008f7e <USB_SetTurnaroundTime+0x82>
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	4a2e      	ldr	r2, [pc, #184]	; (800902c <USB_SetTurnaroundTime+0x130>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d802      	bhi.n	8008f7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008f78:	230b      	movs	r3, #11
 8008f7a:	617b      	str	r3, [r7, #20]
 8008f7c:	e036      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	4a2a      	ldr	r2, [pc, #168]	; (800902c <USB_SetTurnaroundTime+0x130>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d906      	bls.n	8008f94 <USB_SetTurnaroundTime+0x98>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	4a29      	ldr	r2, [pc, #164]	; (8009030 <USB_SetTurnaroundTime+0x134>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d802      	bhi.n	8008f94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008f8e:	230a      	movs	r3, #10
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	e02b      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4a26      	ldr	r2, [pc, #152]	; (8009030 <USB_SetTurnaroundTime+0x134>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d906      	bls.n	8008faa <USB_SetTurnaroundTime+0xae>
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4a25      	ldr	r2, [pc, #148]	; (8009034 <USB_SetTurnaroundTime+0x138>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d202      	bcs.n	8008faa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008fa4:	2309      	movs	r3, #9
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	e020      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	4a21      	ldr	r2, [pc, #132]	; (8009034 <USB_SetTurnaroundTime+0x138>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d306      	bcc.n	8008fc0 <USB_SetTurnaroundTime+0xc4>
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4a20      	ldr	r2, [pc, #128]	; (8009038 <USB_SetTurnaroundTime+0x13c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d802      	bhi.n	8008fc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008fba:	2308      	movs	r3, #8
 8008fbc:	617b      	str	r3, [r7, #20]
 8008fbe:	e015      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4a1d      	ldr	r2, [pc, #116]	; (8009038 <USB_SetTurnaroundTime+0x13c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d906      	bls.n	8008fd6 <USB_SetTurnaroundTime+0xda>
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	4a1c      	ldr	r2, [pc, #112]	; (800903c <USB_SetTurnaroundTime+0x140>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d202      	bcs.n	8008fd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008fd0:	2307      	movs	r3, #7
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	e00a      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008fd6:	2306      	movs	r3, #6
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	e007      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008fe2:	2309      	movs	r3, #9
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e001      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008fe8:	2309      	movs	r3, #9
 8008fea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	029b      	lsls	r3, r3, #10
 8009000:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009004:	431a      	orrs	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	371c      	adds	r7, #28
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	00d8acbf 	.word	0x00d8acbf
 800901c:	00e4e1c0 	.word	0x00e4e1c0
 8009020:	00f42400 	.word	0x00f42400
 8009024:	01067380 	.word	0x01067380
 8009028:	011a499f 	.word	0x011a499f
 800902c:	01312cff 	.word	0x01312cff
 8009030:	014ca43f 	.word	0x014ca43f
 8009034:	016e3600 	.word	0x016e3600
 8009038:	01a6ab1f 	.word	0x01a6ab1f
 800903c:	01e84800 	.word	0x01e84800

08009040 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f043 0201 	orr.w	r2, r3, #1
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f023 0201 	bic.w	r2, r3, #1
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d115      	bne.n	80090d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090b2:	2001      	movs	r0, #1
 80090b4:	f7f8 fd70 	bl	8001b98 <HAL_Delay>
      ms++;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 fa4b 	bl	800a55a <USB_GetMode>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d01e      	beq.n	8009108 <USB_SetCurrentMode+0x84>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b31      	cmp	r3, #49	; 0x31
 80090ce:	d9f0      	bls.n	80090b2 <USB_SetCurrentMode+0x2e>
 80090d0:	e01a      	b.n	8009108 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d115      	bne.n	8009104 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090e4:	2001      	movs	r0, #1
 80090e6:	f7f8 fd57 	bl	8001b98 <HAL_Delay>
      ms++;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 fa32 	bl	800a55a <USB_GetMode>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <USB_SetCurrentMode+0x84>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b31      	cmp	r3, #49	; 0x31
 8009100:	d9f0      	bls.n	80090e4 <USB_SetCurrentMode+0x60>
 8009102:	e001      	b.n	8009108 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e005      	b.n	8009114 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b32      	cmp	r3, #50	; 0x32
 800910c:	d101      	bne.n	8009112 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e000      	b.n	8009114 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800911c:	b084      	sub	sp, #16
 800911e:	b580      	push	{r7, lr}
 8009120:	b086      	sub	sp, #24
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800912a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009136:	2300      	movs	r3, #0
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	e009      	b.n	8009150 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	3340      	adds	r3, #64	; 0x40
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	2200      	movs	r2, #0
 8009148:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	3301      	adds	r3, #1
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b0e      	cmp	r3, #14
 8009154:	d9f2      	bls.n	800913c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009158:	2b00      	cmp	r3, #0
 800915a:	d11c      	bne.n	8009196 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800916a:	f043 0302 	orr.w	r3, r3, #2
 800916e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	e005      	b.n	80091a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091a8:	461a      	mov	r2, r3
 80091aa:	2300      	movs	r3, #0
 80091ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b4:	4619      	mov	r1, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091bc:	461a      	mov	r2, r3
 80091be:	680b      	ldr	r3, [r1, #0]
 80091c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d10c      	bne.n	80091e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d104      	bne.n	80091d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091ce:	2100      	movs	r1, #0
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f965 	bl	80094a0 <USB_SetDevSpeed>
 80091d6:	e008      	b.n	80091ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091d8:	2101      	movs	r1, #1
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f960 	bl	80094a0 <USB_SetDevSpeed>
 80091e0:	e003      	b.n	80091ea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091e2:	2103      	movs	r1, #3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f95b 	bl	80094a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091ea:	2110      	movs	r1, #16
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f8f3 	bl	80093d8 <USB_FlushTxFifo>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f91f 	bl	8009440 <USB_FlushRxFifo>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009212:	461a      	mov	r2, r3
 8009214:	2300      	movs	r3, #0
 8009216:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921e:	461a      	mov	r2, r3
 8009220:	2300      	movs	r3, #0
 8009222:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922a:	461a      	mov	r2, r3
 800922c:	2300      	movs	r3, #0
 800922e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009230:	2300      	movs	r3, #0
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	e043      	b.n	80092be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924c:	d118      	bne.n	8009280 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009260:	461a      	mov	r2, r3
 8009262:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	e013      	b.n	8009292 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009276:	461a      	mov	r2, r3
 8009278:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e008      	b.n	8009292 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928c:	461a      	mov	r2, r3
 800928e:	2300      	movs	r3, #0
 8009290:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929e:	461a      	mov	r2, r3
 80092a0:	2300      	movs	r3, #0
 80092a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b0:	461a      	mov	r2, r3
 80092b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	3301      	adds	r3, #1
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d3b7      	bcc.n	8009236 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092c6:	2300      	movs	r3, #0
 80092c8:	613b      	str	r3, [r7, #16]
 80092ca:	e043      	b.n	8009354 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092e2:	d118      	bne.n	8009316 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10a      	bne.n	8009300 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f6:	461a      	mov	r2, r3
 80092f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	e013      	b.n	8009328 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930c:	461a      	mov	r2, r3
 800930e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009312:	6013      	str	r3, [r2, #0]
 8009314:	e008      	b.n	8009328 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009322:	461a      	mov	r2, r3
 8009324:	2300      	movs	r3, #0
 8009326:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009334:	461a      	mov	r2, r3
 8009336:	2300      	movs	r3, #0
 8009338:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009346:	461a      	mov	r2, r3
 8009348:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800934c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	3301      	adds	r3, #1
 8009352:	613b      	str	r3, [r7, #16]
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	429a      	cmp	r2, r3
 800935a:	d3b7      	bcc.n	80092cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800936a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800936e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800937c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	2b00      	cmp	r3, #0
 8009382:	d105      	bne.n	8009390 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	f043 0210 	orr.w	r2, r3, #16
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	699a      	ldr	r2, [r3, #24]
 8009394:	4b0e      	ldr	r3, [pc, #56]	; (80093d0 <USB_DevInit+0x2b4>)
 8009396:	4313      	orrs	r3, r2
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800939c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d005      	beq.n	80093ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f043 0208 	orr.w	r2, r3, #8
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d105      	bne.n	80093c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699a      	ldr	r2, [r3, #24]
 80093b8:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <USB_DevInit+0x2b8>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093cc:	b004      	add	sp, #16
 80093ce:	4770      	bx	lr
 80093d0:	803c3800 	.word	0x803c3800
 80093d4:	40000004 	.word	0x40000004

080093d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4a13      	ldr	r2, [pc, #76]	; (800943c <USB_FlushTxFifo+0x64>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d901      	bls.n	80093f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e01b      	b.n	8009430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	daf2      	bge.n	80093e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	019b      	lsls	r3, r3, #6
 8009408:	f043 0220 	orr.w	r2, r3, #32
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3301      	adds	r3, #1
 8009414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4a08      	ldr	r2, [pc, #32]	; (800943c <USB_FlushTxFifo+0x64>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d901      	bls.n	8009422 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e006      	b.n	8009430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b20      	cmp	r3, #32
 800942c:	d0f0      	beq.n	8009410 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	00030d40 	.word	0x00030d40

08009440 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3301      	adds	r3, #1
 8009450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4a11      	ldr	r2, [pc, #68]	; (800949c <USB_FlushRxFifo+0x5c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d901      	bls.n	800945e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e018      	b.n	8009490 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	daf2      	bge.n	800944c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2210      	movs	r2, #16
 800946e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4a08      	ldr	r2, [pc, #32]	; (800949c <USB_FlushRxFifo+0x5c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d901      	bls.n	8009482 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e006      	b.n	8009490 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b10      	cmp	r3, #16
 800948c:	d0f0      	beq.n	8009470 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	00030d40 	.word	0x00030d40

080094a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	68f9      	ldr	r1, [r7, #12]
 80094bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094c0:	4313      	orrs	r3, r2
 80094c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b087      	sub	sp, #28
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f003 0306 	and.w	r3, r3, #6
 80094ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80094f2:	2300      	movs	r3, #0
 80094f4:	75fb      	strb	r3, [r7, #23]
 80094f6:	e00a      	b.n	800950e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d002      	beq.n	8009504 <USB_GetDevSpeed+0x32>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b06      	cmp	r3, #6
 8009502:	d102      	bne.n	800950a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009504:	2302      	movs	r3, #2
 8009506:	75fb      	strb	r3, [r7, #23]
 8009508:	e001      	b.n	800950e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800950a:	230f      	movs	r3, #15
 800950c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800950e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009510:	4618      	mov	r0, r3
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	785b      	ldrb	r3, [r3, #1]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d139      	bne.n	80095ac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953e:	69da      	ldr	r2, [r3, #28]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	2101      	movs	r1, #1
 800954a:	fa01 f303 	lsl.w	r3, r1, r3
 800954e:	b29b      	uxth	r3, r3
 8009550:	68f9      	ldr	r1, [r7, #12]
 8009552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009556:	4313      	orrs	r3, r2
 8009558:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d153      	bne.n	8009618 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	791b      	ldrb	r3, [r3, #4]
 800958a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800958c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	059b      	lsls	r3, r3, #22
 8009592:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009594:	431a      	orrs	r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	0159      	lsls	r1, r3, #5
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	440b      	add	r3, r1
 800959e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a2:	4619      	mov	r1, r3
 80095a4:	4b20      	ldr	r3, [pc, #128]	; (8009628 <USB_ActivateEndpoint+0x10c>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	600b      	str	r3, [r1, #0]
 80095aa:	e035      	b.n	8009618 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	f003 030f 	and.w	r3, r3, #15
 80095bc:	2101      	movs	r1, #1
 80095be:	fa01 f303 	lsl.w	r3, r1, r3
 80095c2:	041b      	lsls	r3, r3, #16
 80095c4:	68f9      	ldr	r1, [r7, #12]
 80095c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095ca:	4313      	orrs	r3, r2
 80095cc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d119      	bne.n	8009618 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	791b      	ldrb	r3, [r3, #4]
 80095fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009600:	430b      	orrs	r3, r1
 8009602:	431a      	orrs	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	0159      	lsls	r1, r3, #5
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	440b      	add	r3, r1
 800960c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009610:	4619      	mov	r1, r3
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <USB_ActivateEndpoint+0x10c>)
 8009614:	4313      	orrs	r3, r2
 8009616:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	10008000 	.word	0x10008000

0800962c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d161      	bne.n	800970c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800965a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800965e:	d11f      	bne.n	80096a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	0151      	lsls	r1, r2, #5
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	440a      	add	r2, r1
 8009676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800967a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800967e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	0151      	lsls	r1, r2, #5
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	440a      	add	r2, r1
 8009696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800969a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800969e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	2101      	movs	r1, #1
 80096b2:	fa01 f303 	lsl.w	r3, r1, r3
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	43db      	mvns	r3, r3
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096c0:	4013      	ands	r3, r2
 80096c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ca:	69da      	ldr	r2, [r3, #28]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	2101      	movs	r1, #1
 80096d6:	fa01 f303 	lsl.w	r3, r1, r3
 80096da:	b29b      	uxth	r3, r3
 80096dc:	43db      	mvns	r3, r3
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096e4:	4013      	ands	r3, r2
 80096e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	0159      	lsls	r1, r3, #5
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	440b      	add	r3, r1
 80096fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009702:	4619      	mov	r1, r3
 8009704:	4b35      	ldr	r3, [pc, #212]	; (80097dc <USB_DeactivateEndpoint+0x1b0>)
 8009706:	4013      	ands	r3, r2
 8009708:	600b      	str	r3, [r1, #0]
 800970a:	e060      	b.n	80097ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800971e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009722:	d11f      	bne.n	8009764 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	440a      	add	r2, r1
 800973a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800973e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009742:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	0151      	lsls	r1, r2, #5
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	440a      	add	r2, r1
 800975a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800975e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009762:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	f003 030f 	and.w	r3, r3, #15
 8009774:	2101      	movs	r1, #1
 8009776:	fa01 f303 	lsl.w	r3, r1, r3
 800977a:	041b      	lsls	r3, r3, #16
 800977c:	43db      	mvns	r3, r3
 800977e:	68f9      	ldr	r1, [r7, #12]
 8009780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009784:	4013      	ands	r3, r2
 8009786:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978e:	69da      	ldr	r2, [r3, #28]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	f003 030f 	and.w	r3, r3, #15
 8009798:	2101      	movs	r1, #1
 800979a:	fa01 f303 	lsl.w	r3, r1, r3
 800979e:	041b      	lsls	r3, r3, #16
 80097a0:	43db      	mvns	r3, r3
 80097a2:	68f9      	ldr	r1, [r7, #12]
 80097a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097a8:	4013      	ands	r3, r2
 80097aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	0159      	lsls	r1, r3, #5
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	440b      	add	r3, r1
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	4619      	mov	r1, r3
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <USB_DeactivateEndpoint+0x1b4>)
 80097ca:	4013      	ands	r3, r2
 80097cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	ec337800 	.word	0xec337800
 80097e0:	eff37800 	.word	0xeff37800

080097e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	; 0x28
 80097e8:	af02      	add	r7, sp, #8
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	4613      	mov	r3, r2
 80097f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	2b01      	cmp	r3, #1
 8009802:	f040 8163 	bne.w	8009acc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d132      	bne.n	8009874 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	015a      	lsls	r2, r3, #5
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	4413      	add	r3, r2
 8009816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	0159      	lsls	r1, r3, #5
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	440b      	add	r3, r1
 8009824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009828:	4619      	mov	r1, r3
 800982a:	4ba5      	ldr	r3, [pc, #660]	; (8009ac0 <USB_EPStartXfer+0x2dc>)
 800982c:	4013      	ands	r3, r2
 800982e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	0151      	lsls	r1, r2, #5
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	440a      	add	r2, r1
 8009846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800984a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800984e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	691a      	ldr	r2, [r3, #16]
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	0159      	lsls	r1, r3, #5
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	440b      	add	r3, r1
 8009866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986a:	4619      	mov	r1, r3
 800986c:	4b95      	ldr	r3, [pc, #596]	; (8009ac4 <USB_EPStartXfer+0x2e0>)
 800986e:	4013      	ands	r3, r2
 8009870:	610b      	str	r3, [r1, #16]
 8009872:	e074      	b.n	800995e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009880:	691a      	ldr	r2, [r3, #16]
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	0159      	lsls	r1, r3, #5
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	440b      	add	r3, r1
 800988a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988e:	4619      	mov	r1, r3
 8009890:	4b8c      	ldr	r3, [pc, #560]	; (8009ac4 <USB_EPStartXfer+0x2e0>)
 8009892:	4013      	ands	r3, r2
 8009894:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a2:	691a      	ldr	r2, [r3, #16]
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	0159      	lsls	r1, r3, #5
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	440b      	add	r3, r1
 80098ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b0:	4619      	mov	r1, r3
 80098b2:	4b83      	ldr	r3, [pc, #524]	; (8009ac0 <USB_EPStartXfer+0x2dc>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	6999      	ldr	r1, [r3, #24]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	440b      	add	r3, r1
 80098d0:	1e59      	subs	r1, r3, #1
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80098da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098dc:	4b7a      	ldr	r3, [pc, #488]	; (8009ac8 <USB_EPStartXfer+0x2e4>)
 80098de:	400b      	ands	r3, r1
 80098e0:	69b9      	ldr	r1, [r7, #24]
 80098e2:	0148      	lsls	r0, r1, #5
 80098e4:	69f9      	ldr	r1, [r7, #28]
 80098e6:	4401      	add	r1, r0
 80098e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098ec:	4313      	orrs	r3, r2
 80098ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	691a      	ldr	r2, [r3, #16]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009906:	69b9      	ldr	r1, [r7, #24]
 8009908:	0148      	lsls	r0, r1, #5
 800990a:	69f9      	ldr	r1, [r7, #28]
 800990c:	4401      	add	r1, r0
 800990e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009912:	4313      	orrs	r3, r2
 8009914:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	791b      	ldrb	r3, [r3, #4]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d11f      	bne.n	800995e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	0151      	lsls	r1, r2, #5
 8009930:	69fa      	ldr	r2, [r7, #28]
 8009932:	440a      	add	r2, r1
 8009934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009938:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800993c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	440a      	add	r2, r1
 8009954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800995c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d14b      	bne.n	80099fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	695b      	ldr	r3, [r3, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d009      	beq.n	8009980 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009978:	461a      	mov	r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	791b      	ldrb	r3, [r3, #4]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d128      	bne.n	80099da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009994:	2b00      	cmp	r3, #0
 8009996:	d110      	bne.n	80099ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69ba      	ldr	r2, [r7, #24]
 80099a8:	0151      	lsls	r1, r2, #5
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	440a      	add	r2, r1
 80099ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	e00f      	b.n	80099da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	0151      	lsls	r1, r2, #5
 80099cc:	69fa      	ldr	r2, [r7, #28]
 80099ce:	440a      	add	r2, r1
 80099d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	0151      	lsls	r1, r2, #5
 80099ec:	69fa      	ldr	r2, [r7, #28]
 80099ee:	440a      	add	r2, r1
 80099f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099f8:	6013      	str	r3, [r2, #0]
 80099fa:	e137      	b.n	8009c6c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69ba      	ldr	r2, [r7, #24]
 8009a0c:	0151      	lsls	r1, r2, #5
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	440a      	add	r2, r1
 8009a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	791b      	ldrb	r3, [r3, #4]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d015      	beq.n	8009a50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 811f 	beq.w	8009c6c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	f003 030f 	and.w	r3, r3, #15
 8009a3e:	2101      	movs	r1, #1
 8009a40:	fa01 f303 	lsl.w	r3, r1, r3
 8009a44:	69f9      	ldr	r1, [r7, #28]
 8009a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	634b      	str	r3, [r1, #52]	; 0x34
 8009a4e:	e10d      	b.n	8009c6c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d110      	bne.n	8009a82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	69fa      	ldr	r2, [r7, #28]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	e00f      	b.n	8009aa2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	69fa      	ldr	r2, [r7, #28]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	6919      	ldr	r1, [r3, #16]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	b298      	uxth	r0, r3
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 faea 	bl	800a090 <USB_WritePacket>
 8009abc:	e0d6      	b.n	8009c6c <USB_EPStartXfer+0x488>
 8009abe:	bf00      	nop
 8009ac0:	e007ffff 	.word	0xe007ffff
 8009ac4:	fff80000 	.word	0xfff80000
 8009ac8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad8:	691a      	ldr	r2, [r3, #16]
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	0159      	lsls	r1, r3, #5
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	440b      	add	r3, r1
 8009ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4b63      	ldr	r3, [pc, #396]	; (8009c78 <USB_EPStartXfer+0x494>)
 8009aea:	4013      	ands	r3, r2
 8009aec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afa:	691a      	ldr	r2, [r3, #16]
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	0159      	lsls	r1, r3, #5
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	440b      	add	r3, r1
 8009b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4b5c      	ldr	r3, [pc, #368]	; (8009c7c <USB_EPStartXfer+0x498>)
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d123      	bne.n	8009b60 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b2e:	69b9      	ldr	r1, [r7, #24]
 8009b30:	0148      	lsls	r0, r1, #5
 8009b32:	69f9      	ldr	r1, [r7, #28]
 8009b34:	4401      	add	r1, r0
 8009b36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	0151      	lsls	r1, r2, #5
 8009b50:	69fa      	ldr	r2, [r7, #28]
 8009b52:	440a      	add	r2, r1
 8009b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b5c:	6113      	str	r3, [r2, #16]
 8009b5e:	e037      	b.n	8009bd0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	699a      	ldr	r2, [r3, #24]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	4413      	add	r3, r2
 8009b6a:	1e5a      	subs	r2, r3, #1
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b74:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	8afa      	ldrh	r2, [r7, #22]
 8009b7c:	fb03 f202 	mul.w	r2, r3, r2
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b90:	691a      	ldr	r2, [r3, #16]
 8009b92:	8afb      	ldrh	r3, [r7, #22]
 8009b94:	04d9      	lsls	r1, r3, #19
 8009b96:	4b3a      	ldr	r3, [pc, #232]	; (8009c80 <USB_EPStartXfer+0x49c>)
 8009b98:	400b      	ands	r3, r1
 8009b9a:	69b9      	ldr	r1, [r7, #24]
 8009b9c:	0148      	lsls	r0, r1, #5
 8009b9e:	69f9      	ldr	r1, [r7, #28]
 8009ba0:	4401      	add	r1, r0
 8009ba2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bc0:	69b9      	ldr	r1, [r7, #24]
 8009bc2:	0148      	lsls	r0, r1, #5
 8009bc4:	69f9      	ldr	r1, [r7, #28]
 8009bc6:	4401      	add	r1, r0
 8009bc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009bd0:	79fb      	ldrb	r3, [r7, #7]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d10d      	bne.n	8009bf2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d009      	beq.n	8009bf2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	6919      	ldr	r1, [r3, #16]
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bee:	460a      	mov	r2, r1
 8009bf0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	791b      	ldrb	r3, [r3, #4]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d128      	bne.n	8009c4c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d110      	bne.n	8009c2c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	69ba      	ldr	r2, [r7, #24]
 8009c1a:	0151      	lsls	r1, r2, #5
 8009c1c:	69fa      	ldr	r2, [r7, #28]
 8009c1e:	440a      	add	r2, r1
 8009c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	e00f      	b.n	8009c4c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	015a      	lsls	r2, r3, #5
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	0151      	lsls	r1, r2, #5
 8009c3e:	69fa      	ldr	r2, [r7, #28]
 8009c40:	440a      	add	r2, r1
 8009c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	0151      	lsls	r1, r2, #5
 8009c5e:	69fa      	ldr	r2, [r7, #28]
 8009c60:	440a      	add	r2, r1
 8009c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3720      	adds	r7, #32
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	fff80000 	.word	0xfff80000
 8009c7c:	e007ffff 	.word	0xe007ffff
 8009c80:	1ff80000 	.word	0x1ff80000

08009c84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	785b      	ldrb	r3, [r3, #1]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	f040 80ce 	bne.w	8009e42 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d132      	bne.n	8009d14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cba:	691a      	ldr	r2, [r3, #16]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	0159      	lsls	r1, r3, #5
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	440b      	add	r3, r1
 8009cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4b9a      	ldr	r3, [pc, #616]	; (8009f34 <USB_EP0StartXfer+0x2b0>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfc:	691a      	ldr	r2, [r3, #16]
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	0159      	lsls	r1, r3, #5
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	440b      	add	r3, r1
 8009d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4b8a      	ldr	r3, [pc, #552]	; (8009f38 <USB_EP0StartXfer+0x2b4>)
 8009d0e:	4013      	ands	r3, r2
 8009d10:	610b      	str	r3, [r1, #16]
 8009d12:	e04e      	b.n	8009db2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d20:	691a      	ldr	r2, [r3, #16]
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	0159      	lsls	r1, r3, #5
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	440b      	add	r3, r1
 8009d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4b81      	ldr	r3, [pc, #516]	; (8009f38 <USB_EP0StartXfer+0x2b4>)
 8009d32:	4013      	ands	r3, r2
 8009d34:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d42:	691a      	ldr	r2, [r3, #16]
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	0159      	lsls	r1, r3, #5
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	440b      	add	r3, r1
 8009d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d50:	4619      	mov	r1, r3
 8009d52:	4b78      	ldr	r3, [pc, #480]	; (8009f34 <USB_EP0StartXfer+0x2b0>)
 8009d54:	4013      	ands	r3, r2
 8009d56:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	699a      	ldr	r2, [r3, #24]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d903      	bls.n	8009d6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	68da      	ldr	r2, [r3, #12]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	0151      	lsls	r1, r2, #5
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	440a      	add	r2, r1
 8009d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009da2:	6939      	ldr	r1, [r7, #16]
 8009da4:	0148      	lsls	r0, r1, #5
 8009da6:	6979      	ldr	r1, [r7, #20]
 8009da8:	4401      	add	r1, r0
 8009daa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009dae:	4313      	orrs	r3, r2
 8009db0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d11e      	bne.n	8009df6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d009      	beq.n	8009dd4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dcc:	461a      	mov	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	0151      	lsls	r1, r2, #5
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	440a      	add	r2, r1
 8009dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	e097      	b.n	8009f26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	0151      	lsls	r1, r2, #5
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	440a      	add	r2, r1
 8009e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 8083 	beq.w	8009f26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	f003 030f 	and.w	r3, r3, #15
 8009e30:	2101      	movs	r1, #1
 8009e32:	fa01 f303 	lsl.w	r3, r1, r3
 8009e36:	6979      	ldr	r1, [r7, #20]
 8009e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	634b      	str	r3, [r1, #52]	; 0x34
 8009e40:	e071      	b.n	8009f26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4e:	691a      	ldr	r2, [r3, #16]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	0159      	lsls	r1, r3, #5
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	440b      	add	r3, r1
 8009e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4b36      	ldr	r3, [pc, #216]	; (8009f38 <USB_EP0StartXfer+0x2b4>)
 8009e60:	4013      	ands	r3, r2
 8009e62:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	0159      	lsls	r1, r3, #5
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	440b      	add	r3, r1
 8009e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4b2c      	ldr	r3, [pc, #176]	; (8009f34 <USB_EP0StartXfer+0x2b0>)
 8009e82:	4013      	ands	r3, r2
 8009e84:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	68da      	ldr	r2, [r3, #12]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	68da      	ldr	r2, [r3, #12]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	0151      	lsls	r1, r2, #5
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ebc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ed4:	6939      	ldr	r1, [r7, #16]
 8009ed6:	0148      	lsls	r0, r1, #5
 8009ed8:	6979      	ldr	r1, [r7, #20]
 8009eda:	4401      	add	r1, r0
 8009edc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d10d      	bne.n	8009f06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d009      	beq.n	8009f06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	6919      	ldr	r1, [r3, #16]
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f02:	460a      	mov	r2, r1
 8009f04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	0151      	lsls	r1, r2, #5
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	440a      	add	r2, r1
 8009f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	371c      	adds	r7, #28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	e007ffff 	.word	0xe007ffff
 8009f38:	fff80000 	.word	0xfff80000

08009f3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d14a      	bne.n	8009ff0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f72:	f040 8086 	bne.w	800a082 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	7812      	ldrb	r2, [r2, #0]
 8009f8a:	0151      	lsls	r1, r2, #5
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	440a      	add	r2, r1
 8009f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	7812      	ldrb	r2, [r2, #0]
 8009fae:	0151      	lsls	r1, r2, #5
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	440a      	add	r2, r1
 8009fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d902      	bls.n	8009fd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8009fd2:	e056      	b.n	800a082 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fec:	d0e7      	beq.n	8009fbe <USB_EPStopXfer+0x82>
 8009fee:	e048      	b.n	800a082 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a008:	d13b      	bne.n	800a082 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	7812      	ldrb	r2, [r2, #0]
 800a01e:	0151      	lsls	r1, r2, #5
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	440a      	add	r2, r1
 800a024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a028:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a02c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	7812      	ldrb	r2, [r2, #0]
 800a042:	0151      	lsls	r1, r2, #5
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	440a      	add	r2, r1
 800a048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a04c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a050:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3301      	adds	r3, #1
 800a056:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a05e:	4293      	cmp	r3, r2
 800a060:	d902      	bls.n	800a068 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]
          break;
 800a066:	e00c      	b.n	800a082 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	4413      	add	r3, r2
 800a072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a07c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a080:	d0e7      	beq.n	800a052 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
}
 800a084:	4618      	mov	r0, r3
 800a086:	371c      	adds	r7, #28
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a090:	b480      	push	{r7}
 800a092:	b089      	sub	sp, #36	; 0x24
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	4611      	mov	r1, r2
 800a09c:	461a      	mov	r2, r3
 800a09e:	460b      	mov	r3, r1
 800a0a0:	71fb      	strb	r3, [r7, #7]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a0ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d123      	bne.n	800a0fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0b6:	88bb      	ldrh	r3, [r7, #4]
 800a0b8:	3303      	adds	r3, #3
 800a0ba:	089b      	lsrs	r3, r3, #2
 800a0bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0be:	2300      	movs	r3, #0
 800a0c0:	61bb      	str	r3, [r7, #24]
 800a0c2:	e018      	b.n	800a0f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	031a      	lsls	r2, r3, #12
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	61bb      	str	r3, [r7, #24]
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d3e2      	bcc.n	800a0c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3724      	adds	r7, #36	; 0x24
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b08b      	sub	sp, #44	; 0x2c
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	4613      	mov	r3, r2
 800a118:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a122:	88fb      	ldrh	r3, [r7, #6]
 800a124:	089b      	lsrs	r3, r3, #2
 800a126:	b29b      	uxth	r3, r3
 800a128:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a12a:	88fb      	ldrh	r3, [r7, #6]
 800a12c:	f003 0303 	and.w	r3, r3, #3
 800a130:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a132:	2300      	movs	r3, #0
 800a134:	623b      	str	r3, [r7, #32]
 800a136:	e014      	b.n	800a162 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a142:	601a      	str	r2, [r3, #0]
    pDest++;
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	3301      	adds	r3, #1
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	3301      	adds	r3, #1
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	3301      	adds	r3, #1
 800a154:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	3301      	adds	r3, #1
 800a15a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	3301      	adds	r3, #1
 800a160:	623b      	str	r3, [r7, #32]
 800a162:	6a3a      	ldr	r2, [r7, #32]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	429a      	cmp	r2, r3
 800a168:	d3e6      	bcc.n	800a138 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a16a:	8bfb      	ldrh	r3, [r7, #30]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d01e      	beq.n	800a1ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a17a:	461a      	mov	r2, r3
 800a17c:	f107 0310 	add.w	r3, r7, #16
 800a180:	6812      	ldr	r2, [r2, #0]
 800a182:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	fa22 f303 	lsr.w	r3, r2, r3
 800a190:	b2da      	uxtb	r2, r3
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	701a      	strb	r2, [r3, #0]
      i++;
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	3301      	adds	r3, #1
 800a19a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	3301      	adds	r3, #1
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a1a2:	8bfb      	ldrh	r3, [r7, #30]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a1a8:	8bfb      	ldrh	r3, [r7, #30]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1ea      	bne.n	800a184 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	372c      	adds	r7, #44	; 0x2c
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	785b      	ldrb	r3, [r3, #1]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d12c      	bne.n	800a232 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	db12      	blt.n	800a210 <USB_EPSetStall+0x54>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00f      	beq.n	800a210 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	0151      	lsls	r1, r2, #5
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	440a      	add	r2, r1
 800a206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a20a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a20e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	0151      	lsls	r1, r2, #5
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	440a      	add	r2, r1
 800a226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a22a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	e02b      	b.n	800a28a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	db12      	blt.n	800a26a <USB_EPSetStall+0xae>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00f      	beq.n	800a26a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4413      	add	r3, r2
 800a252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	0151      	lsls	r1, r2, #5
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	440a      	add	r2, r1
 800a260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a264:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a268:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	0151      	lsls	r1, r2, #5
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	440a      	add	r2, r1
 800a280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a288:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	785b      	ldrb	r3, [r3, #1]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d128      	bne.n	800a306 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	0151      	lsls	r1, r2, #5
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	440a      	add	r2, r1
 800a2ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	791b      	ldrb	r3, [r3, #4]
 800a2d8:	2b03      	cmp	r3, #3
 800a2da:	d003      	beq.n	800a2e4 <USB_EPClearStall+0x4c>
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	791b      	ldrb	r3, [r3, #4]
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d138      	bne.n	800a356 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	015a      	lsls	r2, r3, #5
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	0151      	lsls	r1, r2, #5
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	440a      	add	r2, r1
 800a2fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	e027      	b.n	800a356 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	0151      	lsls	r1, r2, #5
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	440a      	add	r2, r1
 800a31c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a320:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a324:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	791b      	ldrb	r3, [r3, #4]
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d003      	beq.n	800a336 <USB_EPClearStall+0x9e>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	791b      	ldrb	r3, [r3, #4]
 800a332:	2b02      	cmp	r3, #2
 800a334:	d10f      	bne.n	800a356 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	0151      	lsls	r1, r2, #5
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	440a      	add	r2, r1
 800a34c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a354:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a382:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a386:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a398:	68f9      	ldr	r1, [r7, #12]
 800a39a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3ca:	f023 0303 	bic.w	r3, r3, #3
 800a3ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3de:	f023 0302 	bic.w	r3, r3, #2
 800a3e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a40c:	f023 0303 	bic.w	r3, r3, #3
 800a410:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a420:	f043 0302 	orr.w	r3, r3, #2
 800a424:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4013      	ands	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a44c:	68fb      	ldr	r3, [r7, #12]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b085      	sub	sp, #20
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	4013      	ands	r3, r2
 800a47c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	0c1b      	lsrs	r3, r3, #16
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a48e:	b480      	push	{r7}
 800a490:	b085      	sub	sp, #20
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	b29b      	uxth	r3, r3
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4f0:	68bb      	ldr	r3, [r7, #8]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b087      	sub	sp, #28
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	460b      	mov	r3, r1
 800a508:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a520:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a522:	78fb      	ldrb	r3, [r7, #3]
 800a524:	f003 030f 	and.w	r3, r3, #15
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	fa22 f303 	lsr.w	r3, r2, r3
 800a52e:	01db      	lsls	r3, r3, #7
 800a530:	b2db      	uxtb	r3, r3
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	4313      	orrs	r3, r2
 800a536:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	4013      	ands	r3, r2
 800a54a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a54c:	68bb      	ldr	r3, [r7, #8]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	371c      	adds	r7, #28
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	f003 0301 	and.w	r3, r3, #1
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
	...

0800a578 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a592:	4619      	mov	r1, r3
 800a594:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <USB_ActivateSetup+0x44>)
 800a596:	4013      	ands	r3, r2
 800a598:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	fffff800 	.word	0xfffff800

0800a5c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	333c      	adds	r3, #60	; 0x3c
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	4a26      	ldr	r2, [pc, #152]	; (800a678 <USB_EP0_OutStart+0xb8>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d90a      	bls.n	800a5fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5f4:	d101      	bne.n	800a5fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e037      	b.n	800a66a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a600:	461a      	mov	r2, r3
 800a602:	2300      	movs	r3, #0
 800a604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a628:	f043 0318 	orr.w	r3, r3, #24
 800a62c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a63c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a640:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a642:	7afb      	ldrb	r3, [r7, #11]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d10f      	bne.n	800a668 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64e:	461a      	mov	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a662:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a666:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	371c      	adds	r7, #28
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	4f54300a 	.word	0x4f54300a

0800a67c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a684:	2300      	movs	r3, #0
 800a686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3301      	adds	r3, #1
 800a68c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	4a13      	ldr	r2, [pc, #76]	; (800a6e0 <USB_CoreReset+0x64>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d901      	bls.n	800a69a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e01b      	b.n	800a6d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	daf2      	bge.n	800a688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	f043 0201 	orr.w	r2, r3, #1
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <USB_CoreReset+0x64>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d901      	bls.n	800a6c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e006      	b.n	800a6d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d0f0      	beq.n	800a6b2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	00030d40 	.word	0x00030d40

0800a6e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a6e8:	4904      	ldr	r1, [pc, #16]	; (800a6fc <MX_FATFS_Init+0x18>)
 800a6ea:	4805      	ldr	r0, [pc, #20]	; (800a700 <MX_FATFS_Init+0x1c>)
 800a6ec:	f004 ffc4 	bl	800f678 <FATFS_LinkDriver>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	4b03      	ldr	r3, [pc, #12]	; (800a704 <MX_FATFS_Init+0x20>)
 800a6f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a6f8:	bf00      	nop
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	200023fc 	.word	0x200023fc
 800a700:	08011a5c 	.word	0x08011a5c
 800a704:	200023f8 	.word	0x200023f8

0800a708 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a708:	b480      	push	{r7}
 800a70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a70c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a70e:	4618      	mov	r0, r3
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a722:	f000 f888 	bl	800a836 <BSP_SD_IsDetected>
 800a726:	4603      	mov	r3, r0
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d001      	beq.n	800a730 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a72c:	2302      	movs	r3, #2
 800a72e:	e005      	b.n	800a73c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a730:	4804      	ldr	r0, [pc, #16]	; (800a744 <BSP_SD_Init+0x2c>)
 800a732:	f7fc f845 	bl	80067c0 <HAL_SD_Init>
 800a736:	4603      	mov	r3, r0
 800a738:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a73a:	79fb      	ldrb	r3, [r7, #7]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20000200 	.word	0x20000200

0800a748 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	68f9      	ldr	r1, [r7, #12]
 800a75e:	4806      	ldr	r0, [pc, #24]	; (800a778 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a760:	f7fc f8e6 	bl	8006930 <HAL_SD_ReadBlocks_DMA>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20000200 	.word	0x20000200

0800a77c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	4806      	ldr	r0, [pc, #24]	; (800a7ac <BSP_SD_WriteBlocks_DMA+0x30>)
 800a794:	f7fc f9ae 	bl	8006af4 <HAL_SD_WriteBlocks_DMA>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20000200 	.word	0x20000200

0800a7b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7b4:	4805      	ldr	r0, [pc, #20]	; (800a7cc <BSP_SD_GetCardState+0x1c>)
 800a7b6:	f7fc fdd3 	bl	8007360 <HAL_SD_GetCardState>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b04      	cmp	r3, #4
 800a7be:	bf14      	ite	ne
 800a7c0:	2301      	movne	r3, #1
 800a7c2:	2300      	moveq	r3, #0
 800a7c4:	b2db      	uxtb	r3, r3
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000200 	.word	0x20000200

0800a7d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a7d8:	6879      	ldr	r1, [r7, #4]
 800a7da:	4803      	ldr	r0, [pc, #12]	; (800a7e8 <BSP_SD_GetCardInfo+0x18>)
 800a7dc:	f7fc fd94 	bl	8007308 <HAL_SD_GetCardInfo>
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	20000200 	.word	0x20000200

0800a7ec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a7f4:	f000 f818 	bl	800a828 <BSP_SD_AbortCallback>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a808:	f000 f9a8 	bl	800ab5c <BSP_SD_WriteCpltCallback>
}
 800a80c:	bf00      	nop
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a81c:	f000 f9aa 	bl	800ab74 <BSP_SD_ReadCpltCallback>
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a828:	b480      	push	{r7}
 800a82a:	af00      	add	r7, sp, #0

}
 800a82c:	bf00      	nop
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a83c:	2301      	movs	r3, #1
 800a83e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a840:	f000 f80c 	bl	800a85c <BSP_PlatformIsDetected>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a84a:	2300      	movs	r3, #0
 800a84c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	b2db      	uxtb	r3, r3
}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a862:	2301      	movs	r3, #1
 800a864:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a866:	2104      	movs	r1, #4
 800a868:	4806      	ldr	r0, [pc, #24]	; (800a884 <BSP_PlatformIsDetected+0x28>)
 800a86a:	f7f8 fe21 	bl	80034b0 <HAL_GPIO_ReadPin>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b01      	cmp	r3, #1
 800a872:	d001      	beq.n	800a878 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a874:	2300      	movs	r3, #0
 800a876:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a878:	79fb      	ldrb	r3, [r7, #7]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	40021800 	.word	0x40021800

0800a888 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a890:	f7f7 f976 	bl	8001b80 <HAL_GetTick>
 800a894:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a896:	e006      	b.n	800a8a6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a898:	f7ff ff8a 	bl	800a7b0 <BSP_SD_GetCardState>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e009      	b.n	800a8ba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a8a6:	f7f7 f96b 	bl	8001b80 <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d8f0      	bhi.n	800a898 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a8ce:	4b0b      	ldr	r3, [pc, #44]	; (800a8fc <SD_CheckStatus+0x38>)
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a8d4:	f7ff ff6c 	bl	800a7b0 <BSP_SD_GetCardState>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d107      	bne.n	800a8ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a8de:	4b07      	ldr	r3, [pc, #28]	; (800a8fc <SD_CheckStatus+0x38>)
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	f023 0301 	bic.w	r3, r3, #1
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <SD_CheckStatus+0x38>)
 800a8ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a8ee:	4b03      	ldr	r3, [pc, #12]	; (800a8fc <SD_CheckStatus+0x38>)
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	b2db      	uxtb	r3, r3
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000009 	.word	0x20000009

0800a900 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	4603      	mov	r3, r0
 800a908:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a90a:	f7ff ff05 	bl	800a718 <BSP_SD_Init>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d107      	bne.n	800a924 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff ffd4 	bl	800a8c4 <SD_CheckStatus>
 800a91c:	4603      	mov	r3, r0
 800a91e:	461a      	mov	r2, r3
 800a920:	4b04      	ldr	r3, [pc, #16]	; (800a934 <SD_initialize+0x34>)
 800a922:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a924:	4b03      	ldr	r3, [pc, #12]	; (800a934 <SD_initialize+0x34>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	b2db      	uxtb	r3, r3
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20000009 	.word	0x20000009

0800a938 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	4603      	mov	r3, r0
 800a940:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff ffbd 	bl	800a8c4 <SD_CheckStatus>
 800a94a:	4603      	mov	r3, r0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60b9      	str	r1, [r7, #8]
 800a95c:	607a      	str	r2, [r7, #4]
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	4603      	mov	r3, r0
 800a962:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a968:	f247 5030 	movw	r0, #30000	; 0x7530
 800a96c:	f7ff ff8c 	bl	800a888 <SD_CheckStatusWithTimeout>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	da01      	bge.n	800a97a <SD_read+0x26>
  {
    return res;
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	e03b      	b.n	800a9f2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	6879      	ldr	r1, [r7, #4]
 800a97e:	68b8      	ldr	r0, [r7, #8]
 800a980:	f7ff fee2 	bl	800a748 <BSP_SD_ReadBlocks_DMA>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d132      	bne.n	800a9f0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a98a:	4b1c      	ldr	r3, [pc, #112]	; (800a9fc <SD_read+0xa8>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a990:	f7f7 f8f6 	bl	8001b80 <HAL_GetTick>
 800a994:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a996:	bf00      	nop
 800a998:	4b18      	ldr	r3, [pc, #96]	; (800a9fc <SD_read+0xa8>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d108      	bne.n	800a9b2 <SD_read+0x5e>
 800a9a0:	f7f7 f8ee 	bl	8001b80 <HAL_GetTick>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d9f2      	bls.n	800a998 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a9b2:	4b12      	ldr	r3, [pc, #72]	; (800a9fc <SD_read+0xa8>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d102      	bne.n	800a9c0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	75fb      	strb	r3, [r7, #23]
 800a9be:	e017      	b.n	800a9f0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a9c0:	4b0e      	ldr	r3, [pc, #56]	; (800a9fc <SD_read+0xa8>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a9c6:	f7f7 f8db 	bl	8001b80 <HAL_GetTick>
 800a9ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a9cc:	e007      	b.n	800a9de <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9ce:	f7ff feef 	bl	800a7b0 <BSP_SD_GetCardState>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d102      	bne.n	800a9de <SD_read+0x8a>
          {
            res = RES_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a9dc:	e008      	b.n	800a9f0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a9de:	f7f7 f8cf 	bl	8001b80 <HAL_GetTick>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d9ee      	bls.n	800a9ce <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20002868 	.word	0x20002868

0800aa00 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
 800aa0a:	603b      	str	r3, [r7, #0]
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aa14:	4b24      	ldr	r3, [pc, #144]	; (800aaa8 <SD_write+0xa8>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa1a:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa1e:	f7ff ff33 	bl	800a888 <SD_CheckStatusWithTimeout>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	da01      	bge.n	800aa2c <SD_write+0x2c>
  {
    return res;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	e038      	b.n	800aa9e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	68b8      	ldr	r0, [r7, #8]
 800aa32:	f7ff fea3 	bl	800a77c <BSP_SD_WriteBlocks_DMA>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d12f      	bne.n	800aa9c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aa3c:	f7f7 f8a0 	bl	8001b80 <HAL_GetTick>
 800aa40:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aa42:	bf00      	nop
 800aa44:	4b18      	ldr	r3, [pc, #96]	; (800aaa8 <SD_write+0xa8>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d108      	bne.n	800aa5e <SD_write+0x5e>
 800aa4c:	f7f7 f898 	bl	8001b80 <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d9f2      	bls.n	800aa44 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800aa5e:	4b12      	ldr	r3, [pc, #72]	; (800aaa8 <SD_write+0xa8>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d102      	bne.n	800aa6c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	75fb      	strb	r3, [r7, #23]
 800aa6a:	e017      	b.n	800aa9c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800aa6c:	4b0e      	ldr	r3, [pc, #56]	; (800aaa8 <SD_write+0xa8>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aa72:	f7f7 f885 	bl	8001b80 <HAL_GetTick>
 800aa76:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa78:	e007      	b.n	800aa8a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa7a:	f7ff fe99 	bl	800a7b0 <BSP_SD_GetCardState>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d102      	bne.n	800aa8a <SD_write+0x8a>
          {
            res = RES_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	75fb      	strb	r3, [r7, #23]
            break;
 800aa88:	e008      	b.n	800aa9c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa8a:	f7f7 f879 	bl	8001b80 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d9ee      	bls.n	800aa7a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20002864 	.word	0x20002864

0800aaac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08c      	sub	sp, #48	; 0x30
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	4603      	mov	r3, r0
 800aab4:	603a      	str	r2, [r7, #0]
 800aab6:	71fb      	strb	r3, [r7, #7]
 800aab8:	460b      	mov	r3, r1
 800aaba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aac2:	4b25      	ldr	r3, [pc, #148]	; (800ab58 <SD_ioctl+0xac>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <SD_ioctl+0x28>
 800aad0:	2303      	movs	r3, #3
 800aad2:	e03c      	b.n	800ab4e <SD_ioctl+0xa2>

  switch (cmd)
 800aad4:	79bb      	ldrb	r3, [r7, #6]
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d834      	bhi.n	800ab44 <SD_ioctl+0x98>
 800aada:	a201      	add	r2, pc, #4	; (adr r2, 800aae0 <SD_ioctl+0x34>)
 800aadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae0:	0800aaf1 	.word	0x0800aaf1
 800aae4:	0800aaf9 	.word	0x0800aaf9
 800aae8:	0800ab11 	.word	0x0800ab11
 800aaec:	0800ab2b 	.word	0x0800ab2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aaf6:	e028      	b.n	800ab4a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800aaf8:	f107 030c 	add.w	r3, r7, #12
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff fe67 	bl	800a7d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ab02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab0e:	e01c      	b.n	800ab4a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab10:	f107 030c 	add.w	r3, r7, #12
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fe5b 	bl	800a7d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab28:	e00f      	b.n	800ab4a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab2a:	f107 030c 	add.w	r3, r7, #12
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7ff fe4e 	bl	800a7d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab36:	0a5a      	lsrs	r2, r3, #9
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab42:	e002      	b.n	800ab4a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ab44:	2304      	movs	r3, #4
 800ab46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ab4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3730      	adds	r7, #48	; 0x30
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20000009 	.word	0x20000009

0800ab5c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ab60:	4b03      	ldr	r3, [pc, #12]	; (800ab70 <BSP_SD_WriteCpltCallback+0x14>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	601a      	str	r2, [r3, #0]
}
 800ab66:	bf00      	nop
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	20002864 	.word	0x20002864

0800ab74 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ab74:	b480      	push	{r7}
 800ab76:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ab78:	4b03      	ldr	r3, [pc, #12]	; (800ab88 <BSP_SD_ReadCpltCallback+0x14>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]
}
 800ab7e:	bf00      	nop
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	20002868 	.word	0x20002868

0800ab8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab9c:	f005 fbc8 	bl	8010330 <malloc>
 800aba0:	4603      	mov	r3, r0
 800aba2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d109      	bne.n	800abbe <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	32b0      	adds	r2, #176	; 0xb0
 800abb4:	2100      	movs	r1, #0
 800abb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800abba:	2302      	movs	r3, #2
 800abbc:	e0d4      	b.n	800ad68 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800abbe:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800abc2:	2100      	movs	r1, #0
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f005 fde2 	bl	801078e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	32b0      	adds	r2, #176	; 0xb0
 800abd4:	68f9      	ldr	r1, [r7, #12]
 800abd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	32b0      	adds	r2, #176	; 0xb0
 800abe4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	7c1b      	ldrb	r3, [r3, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d138      	bne.n	800ac68 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abf6:	4b5e      	ldr	r3, [pc, #376]	; (800ad70 <USBD_CDC_Init+0x1e4>)
 800abf8:	7819      	ldrb	r1, [r3, #0]
 800abfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abfe:	2202      	movs	r2, #2
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f005 f9f2 	bl	800ffea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac06:	4b5a      	ldr	r3, [pc, #360]	; (800ad70 <USBD_CDC_Init+0x1e4>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	f003 020f 	and.w	r2, r3, #15
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	440b      	add	r3, r1
 800ac1a:	3324      	adds	r3, #36	; 0x24
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac20:	4b54      	ldr	r3, [pc, #336]	; (800ad74 <USBD_CDC_Init+0x1e8>)
 800ac22:	7819      	ldrb	r1, [r3, #0]
 800ac24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac28:	2202      	movs	r2, #2
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f005 f9dd 	bl	800ffea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac30:	4b50      	ldr	r3, [pc, #320]	; (800ad74 <USBD_CDC_Init+0x1e8>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 020f 	and.w	r2, r3, #15
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	440b      	add	r3, r1
 800ac44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac48:	2201      	movs	r2, #1
 800ac4a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac4c:	4b4a      	ldr	r3, [pc, #296]	; (800ad78 <USBD_CDC_Init+0x1ec>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	f003 020f 	and.w	r2, r3, #15
 800ac54:	6879      	ldr	r1, [r7, #4]
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	440b      	add	r3, r1
 800ac60:	3326      	adds	r3, #38	; 0x26
 800ac62:	2210      	movs	r2, #16
 800ac64:	801a      	strh	r2, [r3, #0]
 800ac66:	e035      	b.n	800acd4 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac68:	4b41      	ldr	r3, [pc, #260]	; (800ad70 <USBD_CDC_Init+0x1e4>)
 800ac6a:	7819      	ldrb	r1, [r3, #0]
 800ac6c:	2340      	movs	r3, #64	; 0x40
 800ac6e:	2202      	movs	r2, #2
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f005 f9ba 	bl	800ffea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac76:	4b3e      	ldr	r3, [pc, #248]	; (800ad70 <USBD_CDC_Init+0x1e4>)
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	f003 020f 	and.w	r2, r3, #15
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	440b      	add	r3, r1
 800ac8a:	3324      	adds	r3, #36	; 0x24
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac90:	4b38      	ldr	r3, [pc, #224]	; (800ad74 <USBD_CDC_Init+0x1e8>)
 800ac92:	7819      	ldrb	r1, [r3, #0]
 800ac94:	2340      	movs	r3, #64	; 0x40
 800ac96:	2202      	movs	r2, #2
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f005 f9a6 	bl	800ffea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac9e:	4b35      	ldr	r3, [pc, #212]	; (800ad74 <USBD_CDC_Init+0x1e8>)
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	f003 020f 	and.w	r2, r3, #15
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	440b      	add	r3, r1
 800acb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acb6:	2201      	movs	r2, #1
 800acb8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800acba:	4b2f      	ldr	r3, [pc, #188]	; (800ad78 <USBD_CDC_Init+0x1ec>)
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	f003 020f 	and.w	r2, r3, #15
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	3326      	adds	r3, #38	; 0x26
 800acd0:	2210      	movs	r2, #16
 800acd2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acd4:	4b28      	ldr	r3, [pc, #160]	; (800ad78 <USBD_CDC_Init+0x1ec>)
 800acd6:	7819      	ldrb	r1, [r3, #0]
 800acd8:	2308      	movs	r3, #8
 800acda:	2203      	movs	r2, #3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f005 f984 	bl	800ffea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ace2:	4b25      	ldr	r3, [pc, #148]	; (800ad78 <USBD_CDC_Init+0x1ec>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	f003 020f 	and.w	r2, r3, #15
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	4613      	mov	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	440b      	add	r3, r1
 800acf6:	3324      	adds	r3, #36	; 0x24
 800acf8:	2201      	movs	r2, #1
 800acfa:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	33b0      	adds	r3, #176	; 0xb0
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800ad32:	2302      	movs	r3, #2
 800ad34:	e018      	b.n	800ad68 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7c1b      	ldrb	r3, [r3, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad3e:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <USBD_CDC_Init+0x1e8>)
 800ad40:	7819      	ldrb	r1, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f005 fa3b 	bl	80101c8 <USBD_LL_PrepareReceive>
 800ad52:	e008      	b.n	800ad66 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <USBD_CDC_Init+0x1e8>)
 800ad56:	7819      	ldrb	r1, [r3, #0]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f005 fa31 	bl	80101c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20000093 	.word	0x20000093
 800ad74:	20000094 	.word	0x20000094
 800ad78:	20000095 	.word	0x20000095

0800ad7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad88:	4b3a      	ldr	r3, [pc, #232]	; (800ae74 <USBD_CDC_DeInit+0xf8>)
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f005 f951 	bl	8010036 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad94:	4b37      	ldr	r3, [pc, #220]	; (800ae74 <USBD_CDC_DeInit+0xf8>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	f003 020f 	and.w	r2, r3, #15
 800ad9c:	6879      	ldr	r1, [r7, #4]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	4413      	add	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	440b      	add	r3, r1
 800ada8:	3324      	adds	r3, #36	; 0x24
 800adaa:	2200      	movs	r2, #0
 800adac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800adae:	4b32      	ldr	r3, [pc, #200]	; (800ae78 <USBD_CDC_DeInit+0xfc>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f005 f93e 	bl	8010036 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800adba:	4b2f      	ldr	r3, [pc, #188]	; (800ae78 <USBD_CDC_DeInit+0xfc>)
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	f003 020f 	and.w	r2, r3, #15
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	4613      	mov	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	440b      	add	r3, r1
 800adce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800add2:	2200      	movs	r2, #0
 800add4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800add6:	4b29      	ldr	r3, [pc, #164]	; (800ae7c <USBD_CDC_DeInit+0x100>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f005 f92a 	bl	8010036 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ade2:	4b26      	ldr	r3, [pc, #152]	; (800ae7c <USBD_CDC_DeInit+0x100>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	f003 020f 	and.w	r2, r3, #15
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	440b      	add	r3, r1
 800adf6:	3324      	adds	r3, #36	; 0x24
 800adf8:	2200      	movs	r2, #0
 800adfa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800adfc:	4b1f      	ldr	r3, [pc, #124]	; (800ae7c <USBD_CDC_DeInit+0x100>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	f003 020f 	and.w	r2, r3, #15
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	440b      	add	r3, r1
 800ae10:	3326      	adds	r3, #38	; 0x26
 800ae12:	2200      	movs	r2, #0
 800ae14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	32b0      	adds	r2, #176	; 0xb0
 800ae20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01f      	beq.n	800ae68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	33b0      	adds	r3, #176	; 0xb0
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32b0      	adds	r2, #176	; 0xb0
 800ae46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f005 fa78 	bl	8010340 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	32b0      	adds	r2, #176	; 0xb0
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20000093 	.word	0x20000093
 800ae78:	20000094 	.word	0x20000094
 800ae7c:	20000095 	.word	0x20000095

0800ae80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	32b0      	adds	r2, #176	; 0xb0
 800ae94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e0bf      	b.n	800b030 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d050      	beq.n	800af5e <USBD_CDC_Setup+0xde>
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	f040 80af 	bne.w	800b020 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	88db      	ldrh	r3, [r3, #6]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d03a      	beq.n	800af40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	b25b      	sxtb	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	da1b      	bge.n	800af0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	33b0      	adds	r3, #176	; 0xb0
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aeea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	88d2      	ldrh	r2, [r2, #6]
 800aef0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	88db      	ldrh	r3, [r3, #6]
 800aef6:	2b07      	cmp	r3, #7
 800aef8:	bf28      	it	cs
 800aefa:	2307      	movcs	r3, #7
 800aefc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	89fa      	ldrh	r2, [r7, #14]
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f001 fdad 	bl	800ca64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af0a:	e090      	b.n	800b02e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	785a      	ldrb	r2, [r3, #1]
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	88db      	ldrh	r3, [r3, #6]
 800af1a:	2b3f      	cmp	r3, #63	; 0x3f
 800af1c:	d803      	bhi.n	800af26 <USBD_CDC_Setup+0xa6>
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	88db      	ldrh	r3, [r3, #6]
 800af22:	b2da      	uxtb	r2, r3
 800af24:	e000      	b.n	800af28 <USBD_CDC_Setup+0xa8>
 800af26:	2240      	movs	r2, #64	; 0x40
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af2e:	6939      	ldr	r1, [r7, #16]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800af36:	461a      	mov	r2, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 fdbf 	bl	800cabc <USBD_CtlPrepareRx>
      break;
 800af3e:	e076      	b.n	800b02e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	33b0      	adds	r3, #176	; 0xb0
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	7850      	ldrb	r0, [r2, #1]
 800af56:	2200      	movs	r2, #0
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	4798      	blx	r3
      break;
 800af5c:	e067      	b.n	800b02e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	785b      	ldrb	r3, [r3, #1]
 800af62:	2b0b      	cmp	r3, #11
 800af64:	d851      	bhi.n	800b00a <USBD_CDC_Setup+0x18a>
 800af66:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <USBD_CDC_Setup+0xec>)
 800af68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6c:	0800af9d 	.word	0x0800af9d
 800af70:	0800b019 	.word	0x0800b019
 800af74:	0800b00b 	.word	0x0800b00b
 800af78:	0800b00b 	.word	0x0800b00b
 800af7c:	0800b00b 	.word	0x0800b00b
 800af80:	0800b00b 	.word	0x0800b00b
 800af84:	0800b00b 	.word	0x0800b00b
 800af88:	0800b00b 	.word	0x0800b00b
 800af8c:	0800b00b 	.word	0x0800b00b
 800af90:	0800b00b 	.word	0x0800b00b
 800af94:	0800afc7 	.word	0x0800afc7
 800af98:	0800aff1 	.word	0x0800aff1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	d107      	bne.n	800afb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afa8:	f107 030a 	add.w	r3, r7, #10
 800afac:	2202      	movs	r2, #2
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f001 fd57 	bl	800ca64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afb6:	e032      	b.n	800b01e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f001 fce1 	bl	800c982 <USBD_CtlError>
            ret = USBD_FAIL;
 800afc0:	2303      	movs	r3, #3
 800afc2:	75fb      	strb	r3, [r7, #23]
          break;
 800afc4:	e02b      	b.n	800b01e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d107      	bne.n	800afe2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afd2:	f107 030d 	add.w	r3, r7, #13
 800afd6:	2201      	movs	r2, #1
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f001 fd42 	bl	800ca64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afe0:	e01d      	b.n	800b01e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 fccc 	bl	800c982 <USBD_CtlError>
            ret = USBD_FAIL;
 800afea:	2303      	movs	r3, #3
 800afec:	75fb      	strb	r3, [r7, #23]
          break;
 800afee:	e016      	b.n	800b01e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d00f      	beq.n	800b01c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f001 fcbf 	bl	800c982 <USBD_CtlError>
            ret = USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b008:	e008      	b.n	800b01c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 fcb8 	bl	800c982 <USBD_CtlError>
          ret = USBD_FAIL;
 800b012:	2303      	movs	r3, #3
 800b014:	75fb      	strb	r3, [r7, #23]
          break;
 800b016:	e002      	b.n	800b01e <USBD_CDC_Setup+0x19e>
          break;
 800b018:	bf00      	nop
 800b01a:	e008      	b.n	800b02e <USBD_CDC_Setup+0x1ae>
          break;
 800b01c:	bf00      	nop
      }
      break;
 800b01e:	e006      	b.n	800b02e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 fcad 	bl	800c982 <USBD_CtlError>
      ret = USBD_FAIL;
 800b028:	2303      	movs	r3, #3
 800b02a:	75fb      	strb	r3, [r7, #23]
      break;
 800b02c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b04a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	32b0      	adds	r2, #176	; 0xb0
 800b056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b05e:	2303      	movs	r3, #3
 800b060:	e065      	b.n	800b12e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	32b0      	adds	r2, #176	; 0xb0
 800b06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b070:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b072:	78fb      	ldrb	r3, [r7, #3]
 800b074:	f003 020f 	and.w	r2, r3, #15
 800b078:	6879      	ldr	r1, [r7, #4]
 800b07a:	4613      	mov	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	440b      	add	r3, r1
 800b084:	3318      	adds	r3, #24
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d02f      	beq.n	800b0ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b08c:	78fb      	ldrb	r3, [r7, #3]
 800b08e:	f003 020f 	and.w	r2, r3, #15
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	3318      	adds	r3, #24
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	78fb      	ldrb	r3, [r7, #3]
 800b0a4:	f003 010f 	and.w	r1, r3, #15
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	00db      	lsls	r3, r3, #3
 800b0ae:	440b      	add	r3, r1
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4403      	add	r3, r0
 800b0b4:	3348      	adds	r3, #72	; 0x48
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0bc:	fb01 f303 	mul.w	r3, r1, r3
 800b0c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d112      	bne.n	800b0ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0c6:	78fb      	ldrb	r3, [r7, #3]
 800b0c8:	f003 020f 	and.w	r2, r3, #15
 800b0cc:	6879      	ldr	r1, [r7, #4]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	440b      	add	r3, r1
 800b0d8:	3318      	adds	r3, #24
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0de:	78f9      	ldrb	r1, [r7, #3]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f005 f84e 	bl	8010186 <USBD_LL_Transmit>
 800b0ea:	e01f      	b.n	800b12c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	33b0      	adds	r3, #176	; 0xb0
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d010      	beq.n	800b12c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	33b0      	adds	r3, #176	; 0xb0
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b128:	78fa      	ldrb	r2, [r7, #3]
 800b12a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	460b      	mov	r3, r1
 800b140:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	32b0      	adds	r2, #176	; 0xb0
 800b14c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b150:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	32b0      	adds	r2, #176	; 0xb0
 800b15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b164:	2303      	movs	r3, #3
 800b166:	e01a      	b.n	800b19e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f005 f84c 	bl	801020a <USBD_LL_GetRxDataSize>
 800b172:	4602      	mov	r2, r0
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	33b0      	adds	r3, #176	; 0xb0
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b198:	4611      	mov	r1, r2
 800b19a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	32b0      	adds	r2, #176	; 0xb0
 800b1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e025      	b.n	800b214 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	33b0      	adds	r3, #176	; 0xb0
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d01a      	beq.n	800b212 <USBD_CDC_EP0_RxReady+0x6c>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b1e2:	2bff      	cmp	r3, #255	; 0xff
 800b1e4:	d015      	beq.n	800b212 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	33b0      	adds	r3, #176	; 0xb0
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b206:	b292      	uxth	r2, r2
 800b208:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	22ff      	movs	r2, #255	; 0xff
 800b20e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b224:	2182      	movs	r1, #130	; 0x82
 800b226:	4818      	ldr	r0, [pc, #96]	; (800b288 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b228:	f000 fd49 	bl	800bcbe <USBD_GetEpDesc>
 800b22c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b22e:	2101      	movs	r1, #1
 800b230:	4815      	ldr	r0, [pc, #84]	; (800b288 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b232:	f000 fd44 	bl	800bcbe <USBD_GetEpDesc>
 800b236:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b238:	2181      	movs	r1, #129	; 0x81
 800b23a:	4813      	ldr	r0, [pc, #76]	; (800b288 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b23c:	f000 fd3f 	bl	800bcbe <USBD_GetEpDesc>
 800b240:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2210      	movs	r2, #16
 800b24c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d006      	beq.n	800b262 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	2200      	movs	r2, #0
 800b258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b25c:	711a      	strb	r2, [r3, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d006      	beq.n	800b276 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b270:	711a      	strb	r2, [r3, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2243      	movs	r2, #67	; 0x43
 800b27a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b27c:	4b02      	ldr	r3, [pc, #8]	; (800b288 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3718      	adds	r7, #24
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20000050 	.word	0x20000050

0800b28c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b294:	2182      	movs	r1, #130	; 0x82
 800b296:	4818      	ldr	r0, [pc, #96]	; (800b2f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b298:	f000 fd11 	bl	800bcbe <USBD_GetEpDesc>
 800b29c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b29e:	2101      	movs	r1, #1
 800b2a0:	4815      	ldr	r0, [pc, #84]	; (800b2f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2a2:	f000 fd0c 	bl	800bcbe <USBD_GetEpDesc>
 800b2a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2a8:	2181      	movs	r1, #129	; 0x81
 800b2aa:	4813      	ldr	r0, [pc, #76]	; (800b2f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2ac:	f000 fd07 	bl	800bcbe <USBD_GetEpDesc>
 800b2b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2210      	movs	r2, #16
 800b2bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d006      	beq.n	800b2d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	711a      	strb	r2, [r3, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f042 0202 	orr.w	r2, r2, #2
 800b2d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	711a      	strb	r2, [r3, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f042 0202 	orr.w	r2, r2, #2
 800b2e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2243      	movs	r2, #67	; 0x43
 800b2ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2ec:	4b02      	ldr	r3, [pc, #8]	; (800b2f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	20000050 	.word	0x20000050

0800b2fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b304:	2182      	movs	r1, #130	; 0x82
 800b306:	4818      	ldr	r0, [pc, #96]	; (800b368 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b308:	f000 fcd9 	bl	800bcbe <USBD_GetEpDesc>
 800b30c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b30e:	2101      	movs	r1, #1
 800b310:	4815      	ldr	r0, [pc, #84]	; (800b368 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b312:	f000 fcd4 	bl	800bcbe <USBD_GetEpDesc>
 800b316:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b318:	2181      	movs	r1, #129	; 0x81
 800b31a:	4813      	ldr	r0, [pc, #76]	; (800b368 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b31c:	f000 fccf 	bl	800bcbe <USBD_GetEpDesc>
 800b320:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2210      	movs	r2, #16
 800b32c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d006      	beq.n	800b342 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	2200      	movs	r2, #0
 800b338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b33c:	711a      	strb	r2, [r3, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d006      	beq.n	800b356 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b350:	711a      	strb	r2, [r3, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2243      	movs	r2, #67	; 0x43
 800b35a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b35c:	4b02      	ldr	r3, [pc, #8]	; (800b368 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	20000050 	.word	0x20000050

0800b36c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	220a      	movs	r2, #10
 800b378:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b37a:	4b03      	ldr	r3, [pc, #12]	; (800b388 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	2000000c 	.word	0x2000000c

0800b38c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d101      	bne.n	800b3a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b39c:	2303      	movs	r3, #3
 800b39e:	e009      	b.n	800b3b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	33b0      	adds	r3, #176	; 0xb0
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4413      	add	r3, r2
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b087      	sub	sp, #28
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	32b0      	adds	r2, #176	; 0xb0
 800b3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e008      	b.n	800b3f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	371c      	adds	r7, #28
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	32b0      	adds	r2, #176	; 0xb0
 800b418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b424:	2303      	movs	r3, #3
 800b426:	e004      	b.n	800b432 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3714      	adds	r7, #20
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
	...

0800b440 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	32b0      	adds	r2, #176	; 0xb0
 800b452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b456:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b458:	2301      	movs	r3, #1
 800b45a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d101      	bne.n	800b466 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b462:	2303      	movs	r3, #3
 800b464:	e025      	b.n	800b4b2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d11f      	bne.n	800b4b0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	2201      	movs	r2, #1
 800b474:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b478:	4b10      	ldr	r3, [pc, #64]	; (800b4bc <USBD_CDC_TransmitPacket+0x7c>)
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	f003 020f 	and.w	r2, r3, #15
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4403      	add	r3, r0
 800b492:	3318      	adds	r3, #24
 800b494:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b496:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <USBD_CDC_TransmitPacket+0x7c>)
 800b498:	7819      	ldrb	r1, [r3, #0]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f004 fe6d 	bl	8010186 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000093 	.word	0x20000093

0800b4c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	32b0      	adds	r2, #176	; 0xb0
 800b4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	32b0      	adds	r2, #176	; 0xb0
 800b4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	e018      	b.n	800b520 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	7c1b      	ldrb	r3, [r3, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10a      	bne.n	800b50c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4f6:	4b0c      	ldr	r3, [pc, #48]	; (800b528 <USBD_CDC_ReceivePacket+0x68>)
 800b4f8:	7819      	ldrb	r1, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b500:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f004 fe5f 	bl	80101c8 <USBD_LL_PrepareReceive>
 800b50a:	e008      	b.n	800b51e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b50c:	4b06      	ldr	r3, [pc, #24]	; (800b528 <USBD_CDC_ReceivePacket+0x68>)
 800b50e:	7819      	ldrb	r1, [r3, #0]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b516:	2340      	movs	r3, #64	; 0x40
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f004 fe55 	bl	80101c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	20000094 	.word	0x20000094

0800b52c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	4613      	mov	r3, r2
 800b538:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b540:	2303      	movs	r3, #3
 800b542:	e01f      	b.n	800b584 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d003      	beq.n	800b56a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	79fa      	ldrb	r2, [r7, #7]
 800b576:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f004 fccf 	bl	800ff1c <USBD_LL_Init>
 800b57e:	4603      	mov	r3, r0
 800b580:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b582:	7dfb      	ldrb	r3, [r7, #23]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3718      	adds	r7, #24
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e025      	b.n	800b5f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	32ae      	adds	r2, #174	; 0xae
 800b5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00f      	beq.n	800b5e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	32ae      	adds	r2, #174	; 0xae
 800b5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	f107 020e 	add.w	r2, r7, #14
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	4602      	mov	r2, r0
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f004 fcd7 	bl	800ffb4 <USBD_LL_Start>
 800b606:	4603      	mov	r3, r0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b618:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr

0800b626 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b084      	sub	sp, #16
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	460b      	mov	r3, r1
 800b630:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d009      	beq.n	800b654 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	78fa      	ldrb	r2, [r7, #3]
 800b64a:	4611      	mov	r1, r2
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	4798      	blx	r3
 800b650:	4603      	mov	r3, r0
 800b652:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b654:	7bfb      	ldrb	r3, [r7, #15]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	460b      	mov	r3, r1
 800b668:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b66a:	2300      	movs	r3, #0
 800b66c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	78fa      	ldrb	r2, [r7, #3]
 800b678:	4611      	mov	r1, r2
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	4798      	blx	r3
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b684:	2303      	movs	r3, #3
 800b686:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b688:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f001 f932 	bl	800c90e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6c6:	f003 031f 	and.w	r3, r3, #31
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d01a      	beq.n	800b704 <USBD_LL_SetupStage+0x72>
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d822      	bhi.n	800b718 <USBD_LL_SetupStage+0x86>
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d002      	beq.n	800b6dc <USBD_LL_SetupStage+0x4a>
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d00a      	beq.n	800b6f0 <USBD_LL_SetupStage+0x5e>
 800b6da:	e01d      	b.n	800b718 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 fb5f 	bl	800bda8 <USBD_StdDevReq>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ee:	e020      	b.n	800b732 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fbc7 	bl	800be8c <USBD_StdItfReq>
 800b6fe:	4603      	mov	r3, r0
 800b700:	73fb      	strb	r3, [r7, #15]
      break;
 800b702:	e016      	b.n	800b732 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fc29 	bl	800bf64 <USBD_StdEPReq>
 800b712:	4603      	mov	r3, r0
 800b714:	73fb      	strb	r3, [r7, #15]
      break;
 800b716:	e00c      	b.n	800b732 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b71e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b722:	b2db      	uxtb	r3, r3
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f004 fca4 	bl	8010074 <USBD_LL_StallEP>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
      break;
 800b730:	bf00      	nop
  }

  return ret;
 800b732:	7bfb      	ldrb	r3, [r7, #15]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	460b      	mov	r3, r1
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b74e:	7afb      	ldrb	r3, [r7, #11]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d16e      	bne.n	800b832 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b75a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b762:	2b03      	cmp	r3, #3
 800b764:	f040 8098 	bne.w	800b898 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	689a      	ldr	r2, [r3, #8]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	429a      	cmp	r2, r3
 800b772:	d913      	bls.n	800b79c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	689a      	ldr	r2, [r3, #8]
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	1ad2      	subs	r2, r2, r3
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	68da      	ldr	r2, [r3, #12]
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	4293      	cmp	r3, r2
 800b78c:	bf28      	it	cs
 800b78e:	4613      	movcs	r3, r2
 800b790:	461a      	mov	r2, r3
 800b792:	6879      	ldr	r1, [r7, #4]
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f001 f9ae 	bl	800caf6 <USBD_CtlContinueRx>
 800b79a:	e07d      	b.n	800b898 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7a2:	f003 031f 	and.w	r3, r3, #31
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d014      	beq.n	800b7d4 <USBD_LL_DataOutStage+0x98>
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d81d      	bhi.n	800b7ea <USBD_LL_DataOutStage+0xae>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d002      	beq.n	800b7b8 <USBD_LL_DataOutStage+0x7c>
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d003      	beq.n	800b7be <USBD_LL_DataOutStage+0x82>
 800b7b6:	e018      	b.n	800b7ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	75bb      	strb	r3, [r7, #22]
            break;
 800b7bc:	e018      	b.n	800b7f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 fa5e 	bl	800bc8a <USBD_CoreFindIF>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b7d2:	e00d      	b.n	800b7f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	4619      	mov	r1, r3
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 fa60 	bl	800bca4 <USBD_CoreFindEP>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	75bb      	strb	r3, [r7, #22]
            break;
 800b7e8:	e002      	b.n	800b7f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	75bb      	strb	r3, [r7, #22]
            break;
 800b7ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b7f0:	7dbb      	ldrb	r3, [r7, #22]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d119      	bne.n	800b82a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d113      	bne.n	800b82a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b802:	7dba      	ldrb	r2, [r7, #22]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	32ae      	adds	r2, #174	; 0xae
 800b808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00b      	beq.n	800b82a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b812:	7dba      	ldrb	r2, [r7, #22]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b81a:	7dba      	ldrb	r2, [r7, #22]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	32ae      	adds	r2, #174	; 0xae
 800b820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f001 f974 	bl	800cb18 <USBD_CtlSendStatus>
 800b830:	e032      	b.n	800b898 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b832:	7afb      	ldrb	r3, [r7, #11]
 800b834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	4619      	mov	r1, r3
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 fa31 	bl	800bca4 <USBD_CoreFindEP>
 800b842:	4603      	mov	r3, r0
 800b844:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b846:	7dbb      	ldrb	r3, [r7, #22]
 800b848:	2bff      	cmp	r3, #255	; 0xff
 800b84a:	d025      	beq.n	800b898 <USBD_LL_DataOutStage+0x15c>
 800b84c:	7dbb      	ldrb	r3, [r7, #22]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d122      	bne.n	800b898 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d117      	bne.n	800b88e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b85e:	7dba      	ldrb	r2, [r7, #22]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	32ae      	adds	r2, #174	; 0xae
 800b864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b868:	699b      	ldr	r3, [r3, #24]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00f      	beq.n	800b88e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b86e:	7dba      	ldrb	r2, [r7, #22]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b876:	7dba      	ldrb	r2, [r7, #22]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	32ae      	adds	r2, #174	; 0xae
 800b87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	7afa      	ldrb	r2, [r7, #11]
 800b884:	4611      	mov	r1, r2
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	4798      	blx	r3
 800b88a:	4603      	mov	r3, r0
 800b88c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b894:	7dfb      	ldrb	r3, [r7, #23]
 800b896:	e000      	b.n	800b89a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b086      	sub	sp, #24
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	60f8      	str	r0, [r7, #12]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	607a      	str	r2, [r7, #4]
 800b8ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8b0:	7afb      	ldrb	r3, [r7, #11]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d16f      	bne.n	800b996 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3314      	adds	r3, #20
 800b8ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d15a      	bne.n	800b97c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	689a      	ldr	r2, [r3, #8]
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d914      	bls.n	800b8fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	1ad2      	subs	r2, r2, r3
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	6879      	ldr	r1, [r7, #4]
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f001 f8d6 	bl	800ca9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f004 fc67 	bl	80101c8 <USBD_LL_PrepareReceive>
 800b8fa:	e03f      	b.n	800b97c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	68da      	ldr	r2, [r3, #12]
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	429a      	cmp	r2, r3
 800b906:	d11c      	bne.n	800b942 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b910:	429a      	cmp	r2, r3
 800b912:	d316      	bcc.n	800b942 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b91e:	429a      	cmp	r2, r3
 800b920:	d20f      	bcs.n	800b942 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b922:	2200      	movs	r2, #0
 800b924:	2100      	movs	r1, #0
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f001 f8b7 	bl	800ca9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b934:	2300      	movs	r3, #0
 800b936:	2200      	movs	r2, #0
 800b938:	2100      	movs	r1, #0
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f004 fc44 	bl	80101c8 <USBD_LL_PrepareReceive>
 800b940:	e01c      	b.n	800b97c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d10f      	bne.n	800b96e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d009      	beq.n	800b96e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b96e:	2180      	movs	r1, #128	; 0x80
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f004 fb7f 	bl	8010074 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f001 f8e1 	bl	800cb3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d03a      	beq.n	800b9fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7ff fe42 	bl	800b610 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b994:	e032      	b.n	800b9fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b996:	7afb      	ldrb	r3, [r7, #11]
 800b998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	4619      	mov	r1, r3
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 f97f 	bl	800bca4 <USBD_CoreFindEP>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	2bff      	cmp	r3, #255	; 0xff
 800b9ae:	d025      	beq.n	800b9fc <USBD_LL_DataInStage+0x15a>
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d122      	bne.n	800b9fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d11c      	bne.n	800b9fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9c2:	7dfa      	ldrb	r2, [r7, #23]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	32ae      	adds	r2, #174	; 0xae
 800b9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d014      	beq.n	800b9fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9d2:	7dfa      	ldrb	r2, [r7, #23]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9da:	7dfa      	ldrb	r2, [r7, #23]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	32ae      	adds	r2, #174	; 0xae
 800b9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	7afa      	ldrb	r2, [r7, #11]
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	4798      	blx	r3
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b9f2:	7dbb      	ldrb	r3, [r7, #22]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b9f8:	7dbb      	ldrb	r3, [r7, #22]
 800b9fa:	e000      	b.n	800b9fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3718      	adds	r7, #24
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d014      	beq.n	800ba6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00e      	beq.n	800ba6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	6852      	ldr	r2, [r2, #4]
 800ba5a:	b2d2      	uxtb	r2, r2
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	4798      	blx	r3
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba68:	2303      	movs	r3, #3
 800ba6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba6c:	2340      	movs	r3, #64	; 0x40
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2100      	movs	r1, #0
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f004 fab9 	bl	800ffea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2240      	movs	r2, #64	; 0x40
 800ba84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba88:	2340      	movs	r3, #64	; 0x40
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2180      	movs	r1, #128	; 0x80
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f004 faab 	bl	800ffea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2240      	movs	r2, #64	; 0x40
 800ba9e:	621a      	str	r2, [r3, #32]

  return ret;
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800baaa:	b480      	push	{r7}
 800baac:	b083      	sub	sp, #12
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	460b      	mov	r3, r1
 800bab4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800baca:	b480      	push	{r7}
 800bacc:	b083      	sub	sp, #12
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2204      	movs	r2, #4
 800bae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	d106      	bne.n	800bb18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	370c      	adds	r7, #12
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b082      	sub	sp, #8
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d110      	bne.n	800bb5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00b      	beq.n	800bb5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4a:	69db      	ldr	r3, [r3, #28]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb56:	69db      	ldr	r3, [r3, #28]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	32ae      	adds	r2, #174	; 0xae
 800bb7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e01c      	b.n	800bbc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d115      	bne.n	800bbc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	32ae      	adds	r2, #174	; 0xae
 800bb9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00b      	beq.n	800bbc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	32ae      	adds	r2, #174	; 0xae
 800bbb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	78fa      	ldrb	r2, [r7, #3]
 800bbba:	4611      	mov	r1, r2
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	32ae      	adds	r2, #174	; 0xae
 800bbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d101      	bne.n	800bbec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	e01c      	b.n	800bc26 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	d115      	bne.n	800bc24 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	32ae      	adds	r2, #174	; 0xae
 800bc02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00b      	beq.n	800bc24 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	32ae      	adds	r2, #174	; 0xae
 800bc16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	78fa      	ldrb	r2, [r7, #3]
 800bc1e:	4611      	mov	r1, r2
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00e      	beq.n	800bc80 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	6852      	ldr	r2, [r2, #4]
 800bc6e:	b2d2      	uxtb	r2, r2
 800bc70:	4611      	mov	r1, r2
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	4798      	blx	r3
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	460b      	mov	r3, r1
 800bc94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcb0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b086      	sub	sp, #24
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	885b      	ldrh	r3, [r3, #2]
 800bcda:	b29a      	uxth	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d920      	bls.n	800bd28 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bcee:	e013      	b.n	800bd18 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bcf0:	f107 030a 	add.w	r3, r7, #10
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6978      	ldr	r0, [r7, #20]
 800bcf8:	f000 f81b 	bl	800bd32 <USBD_GetNextDesc>
 800bcfc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	785b      	ldrb	r3, [r3, #1]
 800bd02:	2b05      	cmp	r3, #5
 800bd04:	d108      	bne.n	800bd18 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	789b      	ldrb	r3, [r3, #2]
 800bd0e:	78fa      	ldrb	r2, [r7, #3]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d008      	beq.n	800bd26 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd14:	2300      	movs	r3, #0
 800bd16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	885b      	ldrh	r3, [r3, #2]
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	897b      	ldrh	r3, [r7, #10]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d8e5      	bhi.n	800bcf0 <USBD_GetEpDesc+0x32>
 800bd24:	e000      	b.n	800bd28 <USBD_GetEpDesc+0x6a>
          break;
 800bd26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd28:	693b      	ldr	r3, [r7, #16]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b085      	sub	sp, #20
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	881a      	ldrh	r2, [r3, #0]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	4413      	add	r3, r2
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b087      	sub	sp, #28
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	3301      	adds	r3, #1
 800bd82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd8a:	8a3b      	ldrh	r3, [r7, #16]
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	b21a      	sxth	r2, r3
 800bd90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	b21b      	sxth	r3, r3
 800bd98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd9a:	89fb      	ldrh	r3, [r7, #14]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	371c      	adds	r7, #28
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdbe:	2b40      	cmp	r3, #64	; 0x40
 800bdc0:	d005      	beq.n	800bdce <USBD_StdDevReq+0x26>
 800bdc2:	2b40      	cmp	r3, #64	; 0x40
 800bdc4:	d857      	bhi.n	800be76 <USBD_StdDevReq+0xce>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00f      	beq.n	800bdea <USBD_StdDevReq+0x42>
 800bdca:	2b20      	cmp	r3, #32
 800bdcc:	d153      	bne.n	800be76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	32ae      	adds	r2, #174	; 0xae
 800bdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	4798      	blx	r3
 800bde4:	4603      	mov	r3, r0
 800bde6:	73fb      	strb	r3, [r7, #15]
      break;
 800bde8:	e04a      	b.n	800be80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	785b      	ldrb	r3, [r3, #1]
 800bdee:	2b09      	cmp	r3, #9
 800bdf0:	d83b      	bhi.n	800be6a <USBD_StdDevReq+0xc2>
 800bdf2:	a201      	add	r2, pc, #4	; (adr r2, 800bdf8 <USBD_StdDevReq+0x50>)
 800bdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf8:	0800be4d 	.word	0x0800be4d
 800bdfc:	0800be61 	.word	0x0800be61
 800be00:	0800be6b 	.word	0x0800be6b
 800be04:	0800be57 	.word	0x0800be57
 800be08:	0800be6b 	.word	0x0800be6b
 800be0c:	0800be2b 	.word	0x0800be2b
 800be10:	0800be21 	.word	0x0800be21
 800be14:	0800be6b 	.word	0x0800be6b
 800be18:	0800be43 	.word	0x0800be43
 800be1c:	0800be35 	.word	0x0800be35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fa3c 	bl	800c2a0 <USBD_GetDescriptor>
          break;
 800be28:	e024      	b.n	800be74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fbcb 	bl	800c5c8 <USBD_SetAddress>
          break;
 800be32:	e01f      	b.n	800be74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fc0a 	bl	800c650 <USBD_SetConfig>
 800be3c:	4603      	mov	r3, r0
 800be3e:	73fb      	strb	r3, [r7, #15]
          break;
 800be40:	e018      	b.n	800be74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fcad 	bl	800c7a4 <USBD_GetConfig>
          break;
 800be4a:	e013      	b.n	800be74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fcde 	bl	800c810 <USBD_GetStatus>
          break;
 800be54:	e00e      	b.n	800be74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fd0d 	bl	800c878 <USBD_SetFeature>
          break;
 800be5e:	e009      	b.n	800be74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fd31 	bl	800c8ca <USBD_ClrFeature>
          break;
 800be68:	e004      	b.n	800be74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fd88 	bl	800c982 <USBD_CtlError>
          break;
 800be72:	bf00      	nop
      }
      break;
 800be74:	e004      	b.n	800be80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fd82 	bl	800c982 <USBD_CtlError>
      break;
 800be7e:	bf00      	nop
  }

  return ret;
 800be80:	7bfb      	ldrb	r3, [r7, #15]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop

0800be8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bea2:	2b40      	cmp	r3, #64	; 0x40
 800bea4:	d005      	beq.n	800beb2 <USBD_StdItfReq+0x26>
 800bea6:	2b40      	cmp	r3, #64	; 0x40
 800bea8:	d852      	bhi.n	800bf50 <USBD_StdItfReq+0xc4>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <USBD_StdItfReq+0x26>
 800beae:	2b20      	cmp	r3, #32
 800beb0:	d14e      	bne.n	800bf50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	3b01      	subs	r3, #1
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d840      	bhi.n	800bf42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	889b      	ldrh	r3, [r3, #4]
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d836      	bhi.n	800bf38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	889b      	ldrh	r3, [r3, #4]
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	4619      	mov	r1, r3
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7ff fed9 	bl	800bc8a <USBD_CoreFindIF>
 800bed8:	4603      	mov	r3, r0
 800beda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bedc:	7bbb      	ldrb	r3, [r7, #14]
 800bede:	2bff      	cmp	r3, #255	; 0xff
 800bee0:	d01d      	beq.n	800bf1e <USBD_StdItfReq+0x92>
 800bee2:	7bbb      	ldrb	r3, [r7, #14]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d11a      	bne.n	800bf1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bee8:	7bba      	ldrb	r2, [r7, #14]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	32ae      	adds	r2, #174	; 0xae
 800beee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00f      	beq.n	800bf18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bef8:	7bba      	ldrb	r2, [r7, #14]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf00:	7bba      	ldrb	r2, [r7, #14]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	32ae      	adds	r2, #174	; 0xae
 800bf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	4798      	blx	r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf16:	e004      	b.n	800bf22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf1c:	e001      	b.n	800bf22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	88db      	ldrh	r3, [r3, #6]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d110      	bne.n	800bf4c <USBD_StdItfReq+0xc0>
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10d      	bne.n	800bf4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fdf1 	bl	800cb18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf36:	e009      	b.n	800bf4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fd21 	bl	800c982 <USBD_CtlError>
          break;
 800bf40:	e004      	b.n	800bf4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf42:	6839      	ldr	r1, [r7, #0]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fd1c 	bl	800c982 <USBD_CtlError>
          break;
 800bf4a:	e000      	b.n	800bf4e <USBD_StdItfReq+0xc2>
          break;
 800bf4c:	bf00      	nop
      }
      break;
 800bf4e:	e004      	b.n	800bf5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fd15 	bl	800c982 <USBD_CtlError>
      break;
 800bf58:	bf00      	nop
  }

  return ret;
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	889b      	ldrh	r3, [r3, #4]
 800bf76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf80:	2b40      	cmp	r3, #64	; 0x40
 800bf82:	d007      	beq.n	800bf94 <USBD_StdEPReq+0x30>
 800bf84:	2b40      	cmp	r3, #64	; 0x40
 800bf86:	f200 817f 	bhi.w	800c288 <USBD_StdEPReq+0x324>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d02a      	beq.n	800bfe4 <USBD_StdEPReq+0x80>
 800bf8e:	2b20      	cmp	r3, #32
 800bf90:	f040 817a 	bne.w	800c288 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf94:	7bbb      	ldrb	r3, [r7, #14]
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff fe83 	bl	800bca4 <USBD_CoreFindEP>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfa2:	7b7b      	ldrb	r3, [r7, #13]
 800bfa4:	2bff      	cmp	r3, #255	; 0xff
 800bfa6:	f000 8174 	beq.w	800c292 <USBD_StdEPReq+0x32e>
 800bfaa:	7b7b      	ldrb	r3, [r7, #13]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f040 8170 	bne.w	800c292 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bfb2:	7b7a      	ldrb	r2, [r7, #13]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfba:	7b7a      	ldrb	r2, [r7, #13]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	32ae      	adds	r2, #174	; 0xae
 800bfc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f000 8163 	beq.w	800c292 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfcc:	7b7a      	ldrb	r2, [r7, #13]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	32ae      	adds	r2, #174	; 0xae
 800bfd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	4798      	blx	r3
 800bfde:	4603      	mov	r3, r0
 800bfe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bfe2:	e156      	b.n	800c292 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	785b      	ldrb	r3, [r3, #1]
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d008      	beq.n	800bffe <USBD_StdEPReq+0x9a>
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	f300 8145 	bgt.w	800c27c <USBD_StdEPReq+0x318>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f000 809b 	beq.w	800c12e <USBD_StdEPReq+0x1ca>
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d03c      	beq.n	800c076 <USBD_StdEPReq+0x112>
 800bffc:	e13e      	b.n	800c27c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b02      	cmp	r3, #2
 800c008:	d002      	beq.n	800c010 <USBD_StdEPReq+0xac>
 800c00a:	2b03      	cmp	r3, #3
 800c00c:	d016      	beq.n	800c03c <USBD_StdEPReq+0xd8>
 800c00e:	e02c      	b.n	800c06a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c010:	7bbb      	ldrb	r3, [r7, #14]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00d      	beq.n	800c032 <USBD_StdEPReq+0xce>
 800c016:	7bbb      	ldrb	r3, [r7, #14]
 800c018:	2b80      	cmp	r3, #128	; 0x80
 800c01a:	d00a      	beq.n	800c032 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c01c:	7bbb      	ldrb	r3, [r7, #14]
 800c01e:	4619      	mov	r1, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f004 f827 	bl	8010074 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c026:	2180      	movs	r1, #128	; 0x80
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f004 f823 	bl	8010074 <USBD_LL_StallEP>
 800c02e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c030:	e020      	b.n	800c074 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fca4 	bl	800c982 <USBD_CtlError>
              break;
 800c03a:	e01b      	b.n	800c074 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	885b      	ldrh	r3, [r3, #2]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10e      	bne.n	800c062 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00b      	beq.n	800c062 <USBD_StdEPReq+0xfe>
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b80      	cmp	r3, #128	; 0x80
 800c04e:	d008      	beq.n	800c062 <USBD_StdEPReq+0xfe>
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	88db      	ldrh	r3, [r3, #6]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d104      	bne.n	800c062 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f004 f809 	bl	8010074 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fd58 	bl	800cb18 <USBD_CtlSendStatus>

              break;
 800c068:	e004      	b.n	800c074 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fc88 	bl	800c982 <USBD_CtlError>
              break;
 800c072:	bf00      	nop
          }
          break;
 800c074:	e107      	b.n	800c286 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d002      	beq.n	800c088 <USBD_StdEPReq+0x124>
 800c082:	2b03      	cmp	r3, #3
 800c084:	d016      	beq.n	800c0b4 <USBD_StdEPReq+0x150>
 800c086:	e04b      	b.n	800c120 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00d      	beq.n	800c0aa <USBD_StdEPReq+0x146>
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
 800c090:	2b80      	cmp	r3, #128	; 0x80
 800c092:	d00a      	beq.n	800c0aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c094:	7bbb      	ldrb	r3, [r7, #14]
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f003 ffeb 	bl	8010074 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c09e:	2180      	movs	r1, #128	; 0x80
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f003 ffe7 	bl	8010074 <USBD_LL_StallEP>
 800c0a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0a8:	e040      	b.n	800c12c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fc68 	bl	800c982 <USBD_CtlError>
              break;
 800c0b2:	e03b      	b.n	800c12c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	885b      	ldrh	r3, [r3, #2]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d136      	bne.n	800c12a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d004      	beq.n	800c0d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0c6:	7bbb      	ldrb	r3, [r7, #14]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f003 fff1 	bl	80100b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fd21 	bl	800cb18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff fde2 	bl	800bca4 <USBD_CoreFindEP>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0e4:	7b7b      	ldrb	r3, [r7, #13]
 800c0e6:	2bff      	cmp	r3, #255	; 0xff
 800c0e8:	d01f      	beq.n	800c12a <USBD_StdEPReq+0x1c6>
 800c0ea:	7b7b      	ldrb	r3, [r7, #13]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d11c      	bne.n	800c12a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c0f0:	7b7a      	ldrb	r2, [r7, #13]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c0f8:	7b7a      	ldrb	r2, [r7, #13]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	32ae      	adds	r2, #174	; 0xae
 800c0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d010      	beq.n	800c12a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c108:	7b7a      	ldrb	r2, [r7, #13]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	32ae      	adds	r2, #174	; 0xae
 800c10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	4798      	blx	r3
 800c11a:	4603      	mov	r3, r0
 800c11c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c11e:	e004      	b.n	800c12a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fc2d 	bl	800c982 <USBD_CtlError>
              break;
 800c128:	e000      	b.n	800c12c <USBD_StdEPReq+0x1c8>
              break;
 800c12a:	bf00      	nop
          }
          break;
 800c12c:	e0ab      	b.n	800c286 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b02      	cmp	r3, #2
 800c138:	d002      	beq.n	800c140 <USBD_StdEPReq+0x1dc>
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d032      	beq.n	800c1a4 <USBD_StdEPReq+0x240>
 800c13e:	e097      	b.n	800c270 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d007      	beq.n	800c156 <USBD_StdEPReq+0x1f2>
 800c146:	7bbb      	ldrb	r3, [r7, #14]
 800c148:	2b80      	cmp	r3, #128	; 0x80
 800c14a:	d004      	beq.n	800c156 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fc17 	bl	800c982 <USBD_CtlError>
                break;
 800c154:	e091      	b.n	800c27a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	da0b      	bge.n	800c176 <USBD_StdEPReq+0x212>
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c164:	4613      	mov	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4413      	add	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	3310      	adds	r3, #16
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	4413      	add	r3, r2
 800c172:	3304      	adds	r3, #4
 800c174:	e00b      	b.n	800c18e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c176:	7bbb      	ldrb	r3, [r7, #14]
 800c178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c17c:	4613      	mov	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	4413      	add	r3, r2
 800c18c:	3304      	adds	r3, #4
 800c18e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2200      	movs	r2, #0
 800c194:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2202      	movs	r2, #2
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fc61 	bl	800ca64 <USBD_CtlSendData>
              break;
 800c1a2:	e06a      	b.n	800c27a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	da11      	bge.n	800c1d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	f003 020f 	and.w	r2, r3, #15
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	440b      	add	r3, r1
 800c1be:	3324      	adds	r3, #36	; 0x24
 800c1c0:	881b      	ldrh	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d117      	bne.n	800c1f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fbda 	bl	800c982 <USBD_CtlError>
                  break;
 800c1ce:	e054      	b.n	800c27a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	f003 020f 	and.w	r2, r3, #15
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	440b      	add	r3, r1
 800c1e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d104      	bne.n	800c1f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fbc7 	bl	800c982 <USBD_CtlError>
                  break;
 800c1f4:	e041      	b.n	800c27a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	da0b      	bge.n	800c216 <USBD_StdEPReq+0x2b2>
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
 800c200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c204:	4613      	mov	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	3310      	adds	r3, #16
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	4413      	add	r3, r2
 800c212:	3304      	adds	r3, #4
 800c214:	e00b      	b.n	800c22e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c21c:	4613      	mov	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	4413      	add	r3, r2
 800c22c:	3304      	adds	r3, #4
 800c22e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d002      	beq.n	800c23c <USBD_StdEPReq+0x2d8>
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	2b80      	cmp	r3, #128	; 0x80
 800c23a:	d103      	bne.n	800c244 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	2200      	movs	r2, #0
 800c240:	601a      	str	r2, [r3, #0]
 800c242:	e00e      	b.n	800c262 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f003 ff51 	bl	80100f0 <USBD_LL_IsStallEP>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d003      	beq.n	800c25c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2201      	movs	r2, #1
 800c258:	601a      	str	r2, [r3, #0]
 800c25a:	e002      	b.n	800c262 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2202      	movs	r2, #2
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fbfb 	bl	800ca64 <USBD_CtlSendData>
              break;
 800c26e:	e004      	b.n	800c27a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fb85 	bl	800c982 <USBD_CtlError>
              break;
 800c278:	bf00      	nop
          }
          break;
 800c27a:	e004      	b.n	800c286 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fb7f 	bl	800c982 <USBD_CtlError>
          break;
 800c284:	bf00      	nop
      }
      break;
 800c286:	e005      	b.n	800c294 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fb79 	bl	800c982 <USBD_CtlError>
      break;
 800c290:	e000      	b.n	800c294 <USBD_StdEPReq+0x330>
      break;
 800c292:	bf00      	nop
  }

  return ret;
 800c294:	7bfb      	ldrb	r3, [r7, #15]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
	...

0800c2a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	885b      	ldrh	r3, [r3, #2]
 800c2ba:	0a1b      	lsrs	r3, r3, #8
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	2b0e      	cmp	r3, #14
 800c2c2:	f200 8152 	bhi.w	800c56a <USBD_GetDescriptor+0x2ca>
 800c2c6:	a201      	add	r2, pc, #4	; (adr r2, 800c2cc <USBD_GetDescriptor+0x2c>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c33d 	.word	0x0800c33d
 800c2d0:	0800c355 	.word	0x0800c355
 800c2d4:	0800c395 	.word	0x0800c395
 800c2d8:	0800c56b 	.word	0x0800c56b
 800c2dc:	0800c56b 	.word	0x0800c56b
 800c2e0:	0800c50b 	.word	0x0800c50b
 800c2e4:	0800c537 	.word	0x0800c537
 800c2e8:	0800c56b 	.word	0x0800c56b
 800c2ec:	0800c56b 	.word	0x0800c56b
 800c2f0:	0800c56b 	.word	0x0800c56b
 800c2f4:	0800c56b 	.word	0x0800c56b
 800c2f8:	0800c56b 	.word	0x0800c56b
 800c2fc:	0800c56b 	.word	0x0800c56b
 800c300:	0800c56b 	.word	0x0800c56b
 800c304:	0800c309 	.word	0x0800c309
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c30e:	69db      	ldr	r3, [r3, #28]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00b      	beq.n	800c32c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c31a:	69db      	ldr	r3, [r3, #28]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	7c12      	ldrb	r2, [r2, #16]
 800c320:	f107 0108 	add.w	r1, r7, #8
 800c324:	4610      	mov	r0, r2
 800c326:	4798      	blx	r3
 800c328:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c32a:	e126      	b.n	800c57a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fb27 	bl	800c982 <USBD_CtlError>
        err++;
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	3301      	adds	r3, #1
 800c338:	72fb      	strb	r3, [r7, #11]
      break;
 800c33a:	e11e      	b.n	800c57a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	7c12      	ldrb	r2, [r2, #16]
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
      break;
 800c352:	e112      	b.n	800c57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	7c1b      	ldrb	r3, [r3, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10d      	bne.n	800c378 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c364:	f107 0208 	add.w	r2, r7, #8
 800c368:	4610      	mov	r0, r2
 800c36a:	4798      	blx	r3
 800c36c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3301      	adds	r3, #1
 800c372:	2202      	movs	r2, #2
 800c374:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c376:	e100      	b.n	800c57a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c380:	f107 0208 	add.w	r2, r7, #8
 800c384:	4610      	mov	r0, r2
 800c386:	4798      	blx	r3
 800c388:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3301      	adds	r3, #1
 800c38e:	2202      	movs	r2, #2
 800c390:	701a      	strb	r2, [r3, #0]
      break;
 800c392:	e0f2      	b.n	800c57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	885b      	ldrh	r3, [r3, #2]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b05      	cmp	r3, #5
 800c39c:	f200 80ac 	bhi.w	800c4f8 <USBD_GetDescriptor+0x258>
 800c3a0:	a201      	add	r2, pc, #4	; (adr r2, 800c3a8 <USBD_GetDescriptor+0x108>)
 800c3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a6:	bf00      	nop
 800c3a8:	0800c3c1 	.word	0x0800c3c1
 800c3ac:	0800c3f5 	.word	0x0800c3f5
 800c3b0:	0800c429 	.word	0x0800c429
 800c3b4:	0800c45d 	.word	0x0800c45d
 800c3b8:	0800c491 	.word	0x0800c491
 800c3bc:	0800c4c5 	.word	0x0800c4c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	7c12      	ldrb	r2, [r2, #16]
 800c3d8:	f107 0108 	add.w	r1, r7, #8
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4798      	blx	r3
 800c3e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3e2:	e091      	b.n	800c508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 facb 	bl	800c982 <USBD_CtlError>
            err++;
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3f2:	e089      	b.n	800c508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	7c12      	ldrb	r2, [r2, #16]
 800c40c:	f107 0108 	add.w	r1, r7, #8
 800c410:	4610      	mov	r0, r2
 800c412:	4798      	blx	r3
 800c414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c416:	e077      	b.n	800c508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fab1 	bl	800c982 <USBD_CtlError>
            err++;
 800c420:	7afb      	ldrb	r3, [r7, #11]
 800c422:	3301      	adds	r3, #1
 800c424:	72fb      	strb	r3, [r7, #11]
          break;
 800c426:	e06f      	b.n	800c508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	7c12      	ldrb	r2, [r2, #16]
 800c440:	f107 0108 	add.w	r1, r7, #8
 800c444:	4610      	mov	r0, r2
 800c446:	4798      	blx	r3
 800c448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c44a:	e05d      	b.n	800c508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fa97 	bl	800c982 <USBD_CtlError>
            err++;
 800c454:	7afb      	ldrb	r3, [r7, #11]
 800c456:	3301      	adds	r3, #1
 800c458:	72fb      	strb	r3, [r7, #11]
          break;
 800c45a:	e055      	b.n	800c508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00b      	beq.n	800c480 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	7c12      	ldrb	r2, [r2, #16]
 800c474:	f107 0108 	add.w	r1, r7, #8
 800c478:	4610      	mov	r0, r2
 800c47a:	4798      	blx	r3
 800c47c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c47e:	e043      	b.n	800c508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa7d 	bl	800c982 <USBD_CtlError>
            err++;
 800c488:	7afb      	ldrb	r3, [r7, #11]
 800c48a:	3301      	adds	r3, #1
 800c48c:	72fb      	strb	r3, [r7, #11]
          break;
 800c48e:	e03b      	b.n	800c508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c496:	695b      	ldr	r3, [r3, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00b      	beq.n	800c4b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a2:	695b      	ldr	r3, [r3, #20]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	7c12      	ldrb	r2, [r2, #16]
 800c4a8:	f107 0108 	add.w	r1, r7, #8
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4798      	blx	r3
 800c4b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4b2:	e029      	b.n	800c508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fa63 	bl	800c982 <USBD_CtlError>
            err++;
 800c4bc:	7afb      	ldrb	r3, [r7, #11]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4c2:	e021      	b.n	800c508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00b      	beq.n	800c4e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	7c12      	ldrb	r2, [r2, #16]
 800c4dc:	f107 0108 	add.w	r1, r7, #8
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	4798      	blx	r3
 800c4e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4e6:	e00f      	b.n	800c508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fa49 	bl	800c982 <USBD_CtlError>
            err++;
 800c4f0:	7afb      	ldrb	r3, [r7, #11]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4f6:	e007      	b.n	800c508 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fa41 	bl	800c982 <USBD_CtlError>
          err++;
 800c500:	7afb      	ldrb	r3, [r7, #11]
 800c502:	3301      	adds	r3, #1
 800c504:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c506:	bf00      	nop
      }
      break;
 800c508:	e037      	b.n	800c57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	7c1b      	ldrb	r3, [r3, #16]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d109      	bne.n	800c526 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c51a:	f107 0208 	add.w	r2, r7, #8
 800c51e:	4610      	mov	r0, r2
 800c520:	4798      	blx	r3
 800c522:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c524:	e029      	b.n	800c57a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fa2a 	bl	800c982 <USBD_CtlError>
        err++;
 800c52e:	7afb      	ldrb	r3, [r7, #11]
 800c530:	3301      	adds	r3, #1
 800c532:	72fb      	strb	r3, [r7, #11]
      break;
 800c534:	e021      	b.n	800c57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	7c1b      	ldrb	r3, [r3, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10d      	bne.n	800c55a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c546:	f107 0208 	add.w	r2, r7, #8
 800c54a:	4610      	mov	r0, r2
 800c54c:	4798      	blx	r3
 800c54e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3301      	adds	r3, #1
 800c554:	2207      	movs	r2, #7
 800c556:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c558:	e00f      	b.n	800c57a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fa10 	bl	800c982 <USBD_CtlError>
        err++;
 800c562:	7afb      	ldrb	r3, [r7, #11]
 800c564:	3301      	adds	r3, #1
 800c566:	72fb      	strb	r3, [r7, #11]
      break;
 800c568:	e007      	b.n	800c57a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c56a:	6839      	ldr	r1, [r7, #0]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fa08 	bl	800c982 <USBD_CtlError>
      err++;
 800c572:	7afb      	ldrb	r3, [r7, #11]
 800c574:	3301      	adds	r3, #1
 800c576:	72fb      	strb	r3, [r7, #11]
      break;
 800c578:	bf00      	nop
  }

  if (err != 0U)
 800c57a:	7afb      	ldrb	r3, [r7, #11]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d11e      	bne.n	800c5be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	88db      	ldrh	r3, [r3, #6]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d016      	beq.n	800c5b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c588:	893b      	ldrh	r3, [r7, #8]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00e      	beq.n	800c5ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	88da      	ldrh	r2, [r3, #6]
 800c592:	893b      	ldrh	r3, [r7, #8]
 800c594:	4293      	cmp	r3, r2
 800c596:	bf28      	it	cs
 800c598:	4613      	movcs	r3, r2
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c59e:	893b      	ldrh	r3, [r7, #8]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	68f9      	ldr	r1, [r7, #12]
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 fa5d 	bl	800ca64 <USBD_CtlSendData>
 800c5aa:	e009      	b.n	800c5c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f9e7 	bl	800c982 <USBD_CtlError>
 800c5b4:	e004      	b.n	800c5c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 faae 	bl	800cb18 <USBD_CtlSendStatus>
 800c5bc:	e000      	b.n	800c5c0 <USBD_GetDescriptor+0x320>
    return;
 800c5be:	bf00      	nop
  }
}
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop

0800c5c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	889b      	ldrh	r3, [r3, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d131      	bne.n	800c63e <USBD_SetAddress+0x76>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	88db      	ldrh	r3, [r3, #6]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d12d      	bne.n	800c63e <USBD_SetAddress+0x76>
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	885b      	ldrh	r3, [r3, #2]
 800c5e6:	2b7f      	cmp	r3, #127	; 0x7f
 800c5e8:	d829      	bhi.n	800c63e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	885b      	ldrh	r3, [r3, #2]
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d104      	bne.n	800c60c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c602:	6839      	ldr	r1, [r7, #0]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f9bc 	bl	800c982 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c60a:	e01d      	b.n	800c648 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	7bfa      	ldrb	r2, [r7, #15]
 800c610:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f003 fd95 	bl	8010148 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fa7a 	bl	800cb18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c624:	7bfb      	ldrb	r3, [r7, #15]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d004      	beq.n	800c634 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2202      	movs	r2, #2
 800c62e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c632:	e009      	b.n	800c648 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63c:	e004      	b.n	800c648 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f99e 	bl	800c982 <USBD_CtlError>
  }
}
 800c646:	bf00      	nop
 800c648:	bf00      	nop
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	885b      	ldrh	r3, [r3, #2]
 800c662:	b2da      	uxtb	r2, r3
 800c664:	4b4e      	ldr	r3, [pc, #312]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c666:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c668:	4b4d      	ldr	r3, [pc, #308]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d905      	bls.n	800c67c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c670:	6839      	ldr	r1, [r7, #0]
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f985 	bl	800c982 <USBD_CtlError>
    return USBD_FAIL;
 800c678:	2303      	movs	r3, #3
 800c67a:	e08c      	b.n	800c796 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c682:	b2db      	uxtb	r3, r3
 800c684:	2b02      	cmp	r3, #2
 800c686:	d002      	beq.n	800c68e <USBD_SetConfig+0x3e>
 800c688:	2b03      	cmp	r3, #3
 800c68a:	d029      	beq.n	800c6e0 <USBD_SetConfig+0x90>
 800c68c:	e075      	b.n	800c77a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c68e:	4b44      	ldr	r3, [pc, #272]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d020      	beq.n	800c6d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c696:	4b42      	ldr	r3, [pc, #264]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	461a      	mov	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6a0:	4b3f      	ldr	r3, [pc, #252]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7fe ffbd 	bl	800b626 <USBD_SetClassConfig>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d008      	beq.n	800c6c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f962 	bl	800c982 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2202      	movs	r2, #2
 800c6c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6c6:	e065      	b.n	800c794 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fa25 	bl	800cb18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2203      	movs	r2, #3
 800c6d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6d6:	e05d      	b.n	800c794 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fa1d 	bl	800cb18 <USBD_CtlSendStatus>
      break;
 800c6de:	e059      	b.n	800c794 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6e0:	4b2f      	ldr	r3, [pc, #188]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d112      	bne.n	800c70e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c6f0:	4b2b      	ldr	r3, [pc, #172]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6fa:	4b29      	ldr	r3, [pc, #164]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	4619      	mov	r1, r3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f7fe ffac 	bl	800b65e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fa06 	bl	800cb18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c70c:	e042      	b.n	800c794 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c70e:	4b24      	ldr	r3, [pc, #144]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d02a      	beq.n	800c772 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	b2db      	uxtb	r3, r3
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7fe ff9a 	bl	800b65e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c72a:	4b1d      	ldr	r3, [pc, #116]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c734:	4b1a      	ldr	r3, [pc, #104]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7fe ff73 	bl	800b626 <USBD_SetClassConfig>
 800c740:	4603      	mov	r3, r0
 800c742:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00f      	beq.n	800c76a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c74a:	6839      	ldr	r1, [r7, #0]
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f918 	bl	800c982 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	b2db      	uxtb	r3, r3
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7fe ff7f 	bl	800b65e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2202      	movs	r2, #2
 800c764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c768:	e014      	b.n	800c794 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f9d4 	bl	800cb18 <USBD_CtlSendStatus>
      break;
 800c770:	e010      	b.n	800c794 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f9d0 	bl	800cb18 <USBD_CtlSendStatus>
      break;
 800c778:	e00c      	b.n	800c794 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f900 	bl	800c982 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c782:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <USBD_SetConfig+0x150>)
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7fe ff68 	bl	800b65e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c78e:	2303      	movs	r3, #3
 800c790:	73fb      	strb	r3, [r7, #15]
      break;
 800c792:	bf00      	nop
  }

  return ret;
 800c794:	7bfb      	ldrb	r3, [r7, #15]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	2000286c 	.word	0x2000286c

0800c7a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	88db      	ldrh	r3, [r3, #6]
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d004      	beq.n	800c7c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f8e2 	bl	800c982 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7be:	e023      	b.n	800c808 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	dc02      	bgt.n	800c7d2 <USBD_GetConfig+0x2e>
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	dc03      	bgt.n	800c7d8 <USBD_GetConfig+0x34>
 800c7d0:	e015      	b.n	800c7fe <USBD_GetConfig+0x5a>
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	d00b      	beq.n	800c7ee <USBD_GetConfig+0x4a>
 800c7d6:	e012      	b.n	800c7fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f93c 	bl	800ca64 <USBD_CtlSendData>
        break;
 800c7ec:	e00c      	b.n	800c808 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f934 	bl	800ca64 <USBD_CtlSendData>
        break;
 800c7fc:	e004      	b.n	800c808 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f8be 	bl	800c982 <USBD_CtlError>
        break;
 800c806:	bf00      	nop
}
 800c808:	bf00      	nop
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c820:	b2db      	uxtb	r3, r3
 800c822:	3b01      	subs	r3, #1
 800c824:	2b02      	cmp	r3, #2
 800c826:	d81e      	bhi.n	800c866 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	88db      	ldrh	r3, [r3, #6]
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d004      	beq.n	800c83a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f8a5 	bl	800c982 <USBD_CtlError>
        break;
 800c838:	e01a      	b.n	800c870 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c846:	2b00      	cmp	r3, #0
 800c848:	d005      	beq.n	800c856 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	f043 0202 	orr.w	r2, r3, #2
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	330c      	adds	r3, #12
 800c85a:	2202      	movs	r2, #2
 800c85c:	4619      	mov	r1, r3
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f900 	bl	800ca64 <USBD_CtlSendData>
      break;
 800c864:	e004      	b.n	800c870 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c866:	6839      	ldr	r1, [r7, #0]
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 f88a 	bl	800c982 <USBD_CtlError>
      break;
 800c86e:	bf00      	nop
  }
}
 800c870:	bf00      	nop
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	885b      	ldrh	r3, [r3, #2]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d107      	bne.n	800c89a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f940 	bl	800cb18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c898:	e013      	b.n	800c8c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	885b      	ldrh	r3, [r3, #2]
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	d10b      	bne.n	800c8ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	889b      	ldrh	r3, [r3, #4]
 800c8a6:	0a1b      	lsrs	r3, r3, #8
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f930 	bl	800cb18 <USBD_CtlSendStatus>
}
 800c8b8:	e003      	b.n	800c8c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f860 	bl	800c982 <USBD_CtlError>
}
 800c8c2:	bf00      	nop
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b082      	sub	sp, #8
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d80b      	bhi.n	800c8fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	885b      	ldrh	r3, [r3, #2]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d10c      	bne.n	800c904 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f910 	bl	800cb18 <USBD_CtlSendStatus>
      }
      break;
 800c8f8:	e004      	b.n	800c904 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f840 	bl	800c982 <USBD_CtlError>
      break;
 800c902:	e000      	b.n	800c906 <USBD_ClrFeature+0x3c>
      break;
 800c904:	bf00      	nop
  }
}
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b084      	sub	sp, #16
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	781a      	ldrb	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3301      	adds	r3, #1
 800c928:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	781a      	ldrb	r2, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	3301      	adds	r3, #1
 800c936:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f7ff fa17 	bl	800bd6c <SWAPBYTE>
 800c93e:	4603      	mov	r3, r0
 800c940:	461a      	mov	r2, r3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3301      	adds	r3, #1
 800c94a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3301      	adds	r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f7ff fa0a 	bl	800bd6c <SWAPBYTE>
 800c958:	4603      	mov	r3, r0
 800c95a:	461a      	mov	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	3301      	adds	r3, #1
 800c964:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f7ff f9fd 	bl	800bd6c <SWAPBYTE>
 800c972:	4603      	mov	r3, r0
 800c974:	461a      	mov	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	80da      	strh	r2, [r3, #6]
}
 800c97a:	bf00      	nop
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b082      	sub	sp, #8
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c98c:	2180      	movs	r1, #128	; 0x80
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f003 fb70 	bl	8010074 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c994:	2100      	movs	r1, #0
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f003 fb6c 	bl	8010074 <USBD_LL_StallEP>
}
 800c99c:	bf00      	nop
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d036      	beq.n	800ca28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9be:	6938      	ldr	r0, [r7, #16]
 800c9c0:	f000 f836 	bl	800ca30 <USBD_GetLen>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	7812      	ldrb	r2, [r2, #0]
 800c9dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	2203      	movs	r2, #3
 800c9ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9f4:	e013      	b.n	800ca1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	7812      	ldrb	r2, [r2, #0]
 800ca00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	3301      	adds	r3, #1
 800ca06:	613b      	str	r3, [r7, #16]
    idx++;
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	4413      	add	r3, r2
 800ca14:	2200      	movs	r2, #0
 800ca16:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca18:	7dfb      	ldrb	r3, [r7, #23]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1e7      	bne.n	800c9f6 <USBD_GetString+0x52>
 800ca26:	e000      	b.n	800ca2a <USBD_GetString+0x86>
    return;
 800ca28:	bf00      	nop
  }
}
 800ca2a:	3718      	adds	r7, #24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca40:	e005      	b.n	800ca4e <USBD_GetLen+0x1e>
  {
    len++;
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	3301      	adds	r3, #1
 800ca46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1f5      	bne.n	800ca42 <USBD_GetLen+0x12>
  }

  return len;
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2202      	movs	r2, #2
 800ca74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	68ba      	ldr	r2, [r7, #8]
 800ca88:	2100      	movs	r1, #0
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f003 fb7b 	bl	8010186 <USBD_LL_Transmit>

  return USBD_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b084      	sub	sp, #16
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	60f8      	str	r0, [r7, #12]
 800caa2:	60b9      	str	r1, [r7, #8]
 800caa4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	2100      	movs	r1, #0
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f003 fb6a 	bl	8010186 <USBD_LL_Transmit>

  return USBD_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2203      	movs	r2, #3
 800cacc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	68ba      	ldr	r2, [r7, #8]
 800cae4:	2100      	movs	r1, #0
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f003 fb6e 	bl	80101c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b084      	sub	sp, #16
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	60f8      	str	r0, [r7, #12]
 800cafe:	60b9      	str	r1, [r7, #8]
 800cb00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	2100      	movs	r1, #0
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f003 fb5d 	bl	80101c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2204      	movs	r2, #4
 800cb24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb28:	2300      	movs	r3, #0
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f003 fb29 	bl	8010186 <USBD_LL_Transmit>

  return USBD_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b082      	sub	sp, #8
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2205      	movs	r2, #5
 800cb4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb4e:	2300      	movs	r3, #0
 800cb50:	2200      	movs	r2, #0
 800cb52:	2100      	movs	r1, #0
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f003 fb37 	bl	80101c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cb6e:	79fb      	ldrb	r3, [r7, #7]
 800cb70:	4a08      	ldr	r2, [pc, #32]	; (800cb94 <disk_status+0x30>)
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4413      	add	r3, r2
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	79fa      	ldrb	r2, [r7, #7]
 800cb7c:	4905      	ldr	r1, [pc, #20]	; (800cb94 <disk_status+0x30>)
 800cb7e:	440a      	add	r2, r1
 800cb80:	7a12      	ldrb	r2, [r2, #8]
 800cb82:	4610      	mov	r0, r2
 800cb84:	4798      	blx	r3
 800cb86:	4603      	mov	r3, r0
 800cb88:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	20002a98 	.word	0x20002a98

0800cb98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	4603      	mov	r3, r0
 800cba0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cba2:	2300      	movs	r3, #0
 800cba4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cba6:	79fb      	ldrb	r3, [r7, #7]
 800cba8:	4a0d      	ldr	r2, [pc, #52]	; (800cbe0 <disk_initialize+0x48>)
 800cbaa:	5cd3      	ldrb	r3, [r2, r3]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d111      	bne.n	800cbd4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cbb0:	79fb      	ldrb	r3, [r7, #7]
 800cbb2:	4a0b      	ldr	r2, [pc, #44]	; (800cbe0 <disk_initialize+0x48>)
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	4a09      	ldr	r2, [pc, #36]	; (800cbe0 <disk_initialize+0x48>)
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	79fa      	ldrb	r2, [r7, #7]
 800cbc6:	4906      	ldr	r1, [pc, #24]	; (800cbe0 <disk_initialize+0x48>)
 800cbc8:	440a      	add	r2, r1
 800cbca:	7a12      	ldrb	r2, [r2, #8]
 800cbcc:	4610      	mov	r0, r2
 800cbce:	4798      	blx	r3
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20002a98 	.word	0x20002a98

0800cbe4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cbe4:	b590      	push	{r4, r7, lr}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60b9      	str	r1, [r7, #8]
 800cbec:	607a      	str	r2, [r7, #4]
 800cbee:	603b      	str	r3, [r7, #0]
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	4a0a      	ldr	r2, [pc, #40]	; (800cc20 <disk_read+0x3c>)
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4413      	add	r3, r2
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	689c      	ldr	r4, [r3, #8]
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
 800cc02:	4a07      	ldr	r2, [pc, #28]	; (800cc20 <disk_read+0x3c>)
 800cc04:	4413      	add	r3, r2
 800cc06:	7a18      	ldrb	r0, [r3, #8]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	68b9      	ldr	r1, [r7, #8]
 800cc0e:	47a0      	blx	r4
 800cc10:	4603      	mov	r3, r0
 800cc12:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	371c      	adds	r7, #28
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd90      	pop	{r4, r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	20002a98 	.word	0x20002a98

0800cc24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b087      	sub	sp, #28
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60b9      	str	r1, [r7, #8]
 800cc2c:	607a      	str	r2, [r7, #4]
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	4603      	mov	r3, r0
 800cc32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	4a0a      	ldr	r2, [pc, #40]	; (800cc60 <disk_write+0x3c>)
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4413      	add	r3, r2
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	68dc      	ldr	r4, [r3, #12]
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	4a07      	ldr	r2, [pc, #28]	; (800cc60 <disk_write+0x3c>)
 800cc44:	4413      	add	r3, r2
 800cc46:	7a18      	ldrb	r0, [r3, #8]
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	68b9      	ldr	r1, [r7, #8]
 800cc4e:	47a0      	blx	r4
 800cc50:	4603      	mov	r3, r0
 800cc52:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	371c      	adds	r7, #28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd90      	pop	{r4, r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	20002a98 	.word	0x20002a98

0800cc64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	603a      	str	r2, [r7, #0]
 800cc6e:	71fb      	strb	r3, [r7, #7]
 800cc70:	460b      	mov	r3, r1
 800cc72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cc74:	79fb      	ldrb	r3, [r7, #7]
 800cc76:	4a09      	ldr	r2, [pc, #36]	; (800cc9c <disk_ioctl+0x38>)
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4413      	add	r3, r2
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	79fa      	ldrb	r2, [r7, #7]
 800cc82:	4906      	ldr	r1, [pc, #24]	; (800cc9c <disk_ioctl+0x38>)
 800cc84:	440a      	add	r2, r1
 800cc86:	7a10      	ldrb	r0, [r2, #8]
 800cc88:	79b9      	ldrb	r1, [r7, #6]
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	4798      	blx	r3
 800cc8e:	4603      	mov	r3, r0
 800cc90:	73fb      	strb	r3, [r7, #15]
  return res;
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	20002a98 	.word	0x20002a98

0800cca0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ccb0:	89fb      	ldrh	r3, [r7, #14]
 800ccb2:	021b      	lsls	r3, r3, #8
 800ccb4:	b21a      	sxth	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	b21b      	sxth	r3, r3
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	b21b      	sxth	r3, r3
 800ccc0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ccc2:	89fb      	ldrh	r3, [r7, #14]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	3303      	adds	r3, #3
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	021b      	lsls	r3, r3, #8
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	3202      	adds	r2, #2
 800cce8:	7812      	ldrb	r2, [r2, #0]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	021b      	lsls	r3, r3, #8
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	3201      	adds	r2, #1
 800ccf6:	7812      	ldrb	r2, [r2, #0]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	021b      	lsls	r3, r3, #8
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	7812      	ldrb	r2, [r2, #0]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	60fb      	str	r3, [r7, #12]
	return rv;
 800cd08:	68fb      	ldr	r3, [r7, #12]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	1c5a      	adds	r2, r3, #1
 800cd26:	607a      	str	r2, [r7, #4]
 800cd28:	887a      	ldrh	r2, [r7, #2]
 800cd2a:	b2d2      	uxtb	r2, r2
 800cd2c:	701a      	strb	r2, [r3, #0]
 800cd2e:	887b      	ldrh	r3, [r7, #2]
 800cd30:	0a1b      	lsrs	r3, r3, #8
 800cd32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	1c5a      	adds	r2, r3, #1
 800cd38:	607a      	str	r2, [r7, #4]
 800cd3a:	887a      	ldrh	r2, [r7, #2]
 800cd3c:	b2d2      	uxtb	r2, r2
 800cd3e:	701a      	strb	r2, [r3, #0]
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	b2d2      	uxtb	r2, r2
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	0a1b      	lsrs	r3, r3, #8
 800cd66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	607a      	str	r2, [r7, #4]
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	b2d2      	uxtb	r2, r2
 800cd72:	701a      	strb	r2, [r3, #0]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	0a1b      	lsrs	r3, r3, #8
 800cd78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	1c5a      	adds	r2, r3, #1
 800cd7e:	607a      	str	r2, [r7, #4]
 800cd80:	683a      	ldr	r2, [r7, #0]
 800cd82:	b2d2      	uxtb	r2, r2
 800cd84:	701a      	strb	r2, [r3, #0]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	0a1b      	lsrs	r3, r3, #8
 800cd8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	1c5a      	adds	r2, r3, #1
 800cd90:	607a      	str	r2, [r7, #4]
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	b2d2      	uxtb	r2, r2
 800cd96:	701a      	strb	r2, [r3, #0]
}
 800cd98:	bf00      	nop
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cda4:	b480      	push	{r7}
 800cda6:	b087      	sub	sp, #28
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00d      	beq.n	800cdda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cdbe:	693a      	ldr	r2, [r7, #16]
 800cdc0:	1c53      	adds	r3, r2, #1
 800cdc2:	613b      	str	r3, [r7, #16]
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	1c59      	adds	r1, r3, #1
 800cdc8:	6179      	str	r1, [r7, #20]
 800cdca:	7812      	ldrb	r2, [r2, #0]
 800cdcc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	607b      	str	r3, [r7, #4]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1f1      	bne.n	800cdbe <mem_cpy+0x1a>
	}
}
 800cdda:	bf00      	nop
 800cddc:	371c      	adds	r7, #28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cde6:	b480      	push	{r7}
 800cde8:	b087      	sub	sp, #28
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	60f8      	str	r0, [r7, #12]
 800cdee:	60b9      	str	r1, [r7, #8]
 800cdf0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	1c5a      	adds	r2, r3, #1
 800cdfa:	617a      	str	r2, [r7, #20]
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	b2d2      	uxtb	r2, r2
 800ce00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	607b      	str	r3, [r7, #4]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f3      	bne.n	800cdf6 <mem_set+0x10>
}
 800ce0e:	bf00      	nop
 800ce10:	bf00      	nop
 800ce12:	371c      	adds	r7, #28
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce1c:	b480      	push	{r7}
 800ce1e:	b089      	sub	sp, #36	; 0x24
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	61fb      	str	r3, [r7, #28]
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce30:	2300      	movs	r3, #0
 800ce32:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	61fa      	str	r2, [r7, #28]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	61ba      	str	r2, [r7, #24]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	1acb      	subs	r3, r1, r3
 800ce48:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	607b      	str	r3, [r7, #4]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d002      	beq.n	800ce5c <mem_cmp+0x40>
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d0eb      	beq.n	800ce34 <mem_cmp+0x18>

	return r;
 800ce5c:	697b      	ldr	r3, [r7, #20]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3724      	adds	r7, #36	; 0x24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ce6a:	b480      	push	{r7}
 800ce6c:	b083      	sub	sp, #12
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ce74:	e002      	b.n	800ce7c <chk_chr+0x12>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	607b      	str	r3, [r7, #4]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d005      	beq.n	800ce90 <chk_chr+0x26>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d1f2      	bne.n	800ce76 <chk_chr+0xc>
	return *str;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	781b      	ldrb	r3, [r3, #0]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ceaa:	2300      	movs	r3, #0
 800ceac:	60bb      	str	r3, [r7, #8]
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	60fb      	str	r3, [r7, #12]
 800ceb2:	e029      	b.n	800cf08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ceb4:	4a27      	ldr	r2, [pc, #156]	; (800cf54 <chk_lock+0xb4>)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	011b      	lsls	r3, r3, #4
 800ceba:	4413      	add	r3, r2
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d01d      	beq.n	800cefe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cec2:	4a24      	ldr	r2, [pc, #144]	; (800cf54 <chk_lock+0xb4>)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	011b      	lsls	r3, r3, #4
 800cec8:	4413      	add	r3, r2
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d116      	bne.n	800cf02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ced4:	4a1f      	ldr	r2, [pc, #124]	; (800cf54 <chk_lock+0xb4>)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	011b      	lsls	r3, r3, #4
 800ceda:	4413      	add	r3, r2
 800cedc:	3304      	adds	r3, #4
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d10c      	bne.n	800cf02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cee8:	4a1a      	ldr	r2, [pc, #104]	; (800cf54 <chk_lock+0xb4>)
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	011b      	lsls	r3, r3, #4
 800ceee:	4413      	add	r3, r2
 800cef0:	3308      	adds	r3, #8
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d102      	bne.n	800cf02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cefc:	e007      	b.n	800cf0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cefe:	2301      	movs	r3, #1
 800cf00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3301      	adds	r3, #1
 800cf06:	60fb      	str	r3, [r7, #12]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d9d2      	bls.n	800ceb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d109      	bne.n	800cf28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d102      	bne.n	800cf20 <chk_lock+0x80>
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d101      	bne.n	800cf24 <chk_lock+0x84>
 800cf20:	2300      	movs	r3, #0
 800cf22:	e010      	b.n	800cf46 <chk_lock+0xa6>
 800cf24:	2312      	movs	r3, #18
 800cf26:	e00e      	b.n	800cf46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d108      	bne.n	800cf40 <chk_lock+0xa0>
 800cf2e:	4a09      	ldr	r2, [pc, #36]	; (800cf54 <chk_lock+0xb4>)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	011b      	lsls	r3, r3, #4
 800cf34:	4413      	add	r3, r2
 800cf36:	330c      	adds	r3, #12
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf3e:	d101      	bne.n	800cf44 <chk_lock+0xa4>
 800cf40:	2310      	movs	r3, #16
 800cf42:	e000      	b.n	800cf46 <chk_lock+0xa6>
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	20002878 	.word	0x20002878

0800cf58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	607b      	str	r3, [r7, #4]
 800cf62:	e002      	b.n	800cf6a <enq_lock+0x12>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	3301      	adds	r3, #1
 800cf68:	607b      	str	r3, [r7, #4]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d806      	bhi.n	800cf7e <enq_lock+0x26>
 800cf70:	4a09      	ldr	r2, [pc, #36]	; (800cf98 <enq_lock+0x40>)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	011b      	lsls	r3, r3, #4
 800cf76:	4413      	add	r3, r2
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1f2      	bne.n	800cf64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	bf14      	ite	ne
 800cf84:	2301      	movne	r3, #1
 800cf86:	2300      	moveq	r3, #0
 800cf88:	b2db      	uxtb	r3, r3
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	370c      	adds	r7, #12
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	20002878 	.word	0x20002878

0800cf9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60fb      	str	r3, [r7, #12]
 800cfaa:	e01f      	b.n	800cfec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cfac:	4a41      	ldr	r2, [pc, #260]	; (800d0b4 <inc_lock+0x118>)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	011b      	lsls	r3, r3, #4
 800cfb2:	4413      	add	r3, r2
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d113      	bne.n	800cfe6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cfbe:	4a3d      	ldr	r2, [pc, #244]	; (800d0b4 <inc_lock+0x118>)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	011b      	lsls	r3, r3, #4
 800cfc4:	4413      	add	r3, r2
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d109      	bne.n	800cfe6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cfd2:	4a38      	ldr	r2, [pc, #224]	; (800d0b4 <inc_lock+0x118>)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	011b      	lsls	r3, r3, #4
 800cfd8:	4413      	add	r3, r2
 800cfda:	3308      	adds	r3, #8
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d006      	beq.n	800cff4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d9dc      	bls.n	800cfac <inc_lock+0x10>
 800cff2:	e000      	b.n	800cff6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cff4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d132      	bne.n	800d062 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cffc:	2300      	movs	r3, #0
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	e002      	b.n	800d008 <inc_lock+0x6c>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	3301      	adds	r3, #1
 800d006:	60fb      	str	r3, [r7, #12]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d806      	bhi.n	800d01c <inc_lock+0x80>
 800d00e:	4a29      	ldr	r2, [pc, #164]	; (800d0b4 <inc_lock+0x118>)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	4413      	add	r3, r2
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1f2      	bne.n	800d002 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2b02      	cmp	r3, #2
 800d020:	d101      	bne.n	800d026 <inc_lock+0x8a>
 800d022:	2300      	movs	r3, #0
 800d024:	e040      	b.n	800d0a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	4922      	ldr	r1, [pc, #136]	; (800d0b4 <inc_lock+0x118>)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	011b      	lsls	r3, r3, #4
 800d030:	440b      	add	r3, r1
 800d032:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	689a      	ldr	r2, [r3, #8]
 800d038:	491e      	ldr	r1, [pc, #120]	; (800d0b4 <inc_lock+0x118>)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	011b      	lsls	r3, r3, #4
 800d03e:	440b      	add	r3, r1
 800d040:	3304      	adds	r3, #4
 800d042:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	695a      	ldr	r2, [r3, #20]
 800d048:	491a      	ldr	r1, [pc, #104]	; (800d0b4 <inc_lock+0x118>)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	011b      	lsls	r3, r3, #4
 800d04e:	440b      	add	r3, r1
 800d050:	3308      	adds	r3, #8
 800d052:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d054:	4a17      	ldr	r2, [pc, #92]	; (800d0b4 <inc_lock+0x118>)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	011b      	lsls	r3, r3, #4
 800d05a:	4413      	add	r3, r2
 800d05c:	330c      	adds	r3, #12
 800d05e:	2200      	movs	r2, #0
 800d060:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d009      	beq.n	800d07c <inc_lock+0xe0>
 800d068:	4a12      	ldr	r2, [pc, #72]	; (800d0b4 <inc_lock+0x118>)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	011b      	lsls	r3, r3, #4
 800d06e:	4413      	add	r3, r2
 800d070:	330c      	adds	r3, #12
 800d072:	881b      	ldrh	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <inc_lock+0xe0>
 800d078:	2300      	movs	r3, #0
 800d07a:	e015      	b.n	800d0a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d108      	bne.n	800d094 <inc_lock+0xf8>
 800d082:	4a0c      	ldr	r2, [pc, #48]	; (800d0b4 <inc_lock+0x118>)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	011b      	lsls	r3, r3, #4
 800d088:	4413      	add	r3, r2
 800d08a:	330c      	adds	r3, #12
 800d08c:	881b      	ldrh	r3, [r3, #0]
 800d08e:	3301      	adds	r3, #1
 800d090:	b29a      	uxth	r2, r3
 800d092:	e001      	b.n	800d098 <inc_lock+0xfc>
 800d094:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d098:	4906      	ldr	r1, [pc, #24]	; (800d0b4 <inc_lock+0x118>)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	011b      	lsls	r3, r3, #4
 800d09e:	440b      	add	r3, r1
 800d0a0:	330c      	adds	r3, #12
 800d0a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	3301      	adds	r3, #1
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr
 800d0b4:	20002878 	.word	0x20002878

0800d0b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	607b      	str	r3, [r7, #4]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d825      	bhi.n	800d118 <dec_lock+0x60>
		n = Files[i].ctr;
 800d0cc:	4a17      	ldr	r2, [pc, #92]	; (800d12c <dec_lock+0x74>)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	011b      	lsls	r3, r3, #4
 800d0d2:	4413      	add	r3, r2
 800d0d4:	330c      	adds	r3, #12
 800d0d6:	881b      	ldrh	r3, [r3, #0]
 800d0d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d0da:	89fb      	ldrh	r3, [r7, #14]
 800d0dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0e0:	d101      	bne.n	800d0e6 <dec_lock+0x2e>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d0e6:	89fb      	ldrh	r3, [r7, #14]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <dec_lock+0x3a>
 800d0ec:	89fb      	ldrh	r3, [r7, #14]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d0f2:	4a0e      	ldr	r2, [pc, #56]	; (800d12c <dec_lock+0x74>)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	011b      	lsls	r3, r3, #4
 800d0f8:	4413      	add	r3, r2
 800d0fa:	330c      	adds	r3, #12
 800d0fc:	89fa      	ldrh	r2, [r7, #14]
 800d0fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d100:	89fb      	ldrh	r3, [r7, #14]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d105      	bne.n	800d112 <dec_lock+0x5a>
 800d106:	4a09      	ldr	r2, [pc, #36]	; (800d12c <dec_lock+0x74>)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	011b      	lsls	r3, r3, #4
 800d10c:	4413      	add	r3, r2
 800d10e:	2200      	movs	r2, #0
 800d110:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	737b      	strb	r3, [r7, #13]
 800d116:	e001      	b.n	800d11c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d118:	2302      	movs	r3, #2
 800d11a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d11c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	20002878 	.word	0x20002878

0800d130 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d138:	2300      	movs	r3, #0
 800d13a:	60fb      	str	r3, [r7, #12]
 800d13c:	e010      	b.n	800d160 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d13e:	4a0d      	ldr	r2, [pc, #52]	; (800d174 <clear_lock+0x44>)
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	011b      	lsls	r3, r3, #4
 800d144:	4413      	add	r3, r2
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d105      	bne.n	800d15a <clear_lock+0x2a>
 800d14e:	4a09      	ldr	r2, [pc, #36]	; (800d174 <clear_lock+0x44>)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	011b      	lsls	r3, r3, #4
 800d154:	4413      	add	r3, r2
 800d156:	2200      	movs	r2, #0
 800d158:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3301      	adds	r3, #1
 800d15e:	60fb      	str	r3, [r7, #12]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d9eb      	bls.n	800d13e <clear_lock+0xe>
	}
}
 800d166:	bf00      	nop
 800d168:	bf00      	nop
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr
 800d174:	20002878 	.word	0x20002878

0800d178 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b086      	sub	sp, #24
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d180:	2300      	movs	r3, #0
 800d182:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	78db      	ldrb	r3, [r3, #3]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d034      	beq.n	800d1f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d190:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7858      	ldrb	r0, [r3, #1]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d19c:	2301      	movs	r3, #1
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	f7ff fd40 	bl	800cc24 <disk_write>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	73fb      	strb	r3, [r7, #15]
 800d1ae:	e022      	b.n	800d1f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ba:	697a      	ldr	r2, [r7, #20]
 800d1bc:	1ad2      	subs	r2, r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d217      	bcs.n	800d1f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	789b      	ldrb	r3, [r3, #2]
 800d1ca:	613b      	str	r3, [r7, #16]
 800d1cc:	e010      	b.n	800d1f0 <sync_window+0x78>
					wsect += fs->fsize;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	69db      	ldr	r3, [r3, #28]
 800d1d2:	697a      	ldr	r2, [r7, #20]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7858      	ldrb	r0, [r3, #1]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	697a      	ldr	r2, [r7, #20]
 800d1e6:	f7ff fd1d 	bl	800cc24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d8eb      	bhi.n	800d1ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3718      	adds	r7, #24
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	429a      	cmp	r2, r3
 800d216:	d01b      	beq.n	800d250 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7ff ffad 	bl	800d178 <sync_window>
 800d21e:	4603      	mov	r3, r0
 800d220:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d222:	7bfb      	ldrb	r3, [r7, #15]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d113      	bne.n	800d250 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	7858      	ldrb	r0, [r3, #1]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d232:	2301      	movs	r3, #1
 800d234:	683a      	ldr	r2, [r7, #0]
 800d236:	f7ff fcd5 	bl	800cbe4 <disk_read>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d004      	beq.n	800d24a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d244:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d246:	2301      	movs	r3, #1
 800d248:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	683a      	ldr	r2, [r7, #0]
 800d24e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d250:	7bfb      	ldrb	r3, [r7, #15]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
	...

0800d25c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7ff ff87 	bl	800d178 <sync_window>
 800d26a:	4603      	mov	r3, r0
 800d26c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d158      	bne.n	800d326 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b03      	cmp	r3, #3
 800d27a:	d148      	bne.n	800d30e <sync_fs+0xb2>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	791b      	ldrb	r3, [r3, #4]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d144      	bne.n	800d30e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	3334      	adds	r3, #52	; 0x34
 800d288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d28c:	2100      	movs	r1, #0
 800d28e:	4618      	mov	r0, r3
 800d290:	f7ff fda9 	bl	800cde6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3334      	adds	r3, #52	; 0x34
 800d298:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d29c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff fd38 	bl	800cd16 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3334      	adds	r3, #52	; 0x34
 800d2aa:	4921      	ldr	r1, [pc, #132]	; (800d330 <sync_fs+0xd4>)
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7ff fd4d 	bl	800cd4c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	3334      	adds	r3, #52	; 0x34
 800d2b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2ba:	491e      	ldr	r1, [pc, #120]	; (800d334 <sync_fs+0xd8>)
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff fd45 	bl	800cd4c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3334      	adds	r3, #52	; 0x34
 800d2c6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	695b      	ldr	r3, [r3, #20]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	f7ff fd3b 	bl	800cd4c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	3334      	adds	r3, #52	; 0x34
 800d2da:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	f7ff fd31 	bl	800cd4c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	7858      	ldrb	r0, [r3, #1]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d302:	2301      	movs	r3, #1
 800d304:	f7ff fc8e 	bl	800cc24 <disk_write>
			fs->fsi_flag = 0;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	785b      	ldrb	r3, [r3, #1]
 800d312:	2200      	movs	r2, #0
 800d314:	2100      	movs	r1, #0
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff fca4 	bl	800cc64 <disk_ioctl>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <sync_fs+0xca>
 800d322:	2301      	movs	r3, #1
 800d324:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d326:	7bfb      	ldrb	r3, [r7, #15]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	41615252 	.word	0x41615252
 800d334:	61417272 	.word	0x61417272

0800d338 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	3b02      	subs	r3, #2
 800d346:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	3b02      	subs	r3, #2
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	429a      	cmp	r2, r3
 800d352:	d301      	bcc.n	800d358 <clust2sect+0x20>
 800d354:	2300      	movs	r3, #0
 800d356:	e008      	b.n	800d36a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	895b      	ldrh	r3, [r3, #10]
 800d35c:	461a      	mov	r2, r3
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	fb03 f202 	mul.w	r2, r3, r2
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d368:	4413      	add	r3, r2
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b086      	sub	sp, #24
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d904      	bls.n	800d396 <get_fat+0x20>
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	683a      	ldr	r2, [r7, #0]
 800d392:	429a      	cmp	r2, r3
 800d394:	d302      	bcc.n	800d39c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d396:	2301      	movs	r3, #1
 800d398:	617b      	str	r3, [r7, #20]
 800d39a:	e08f      	b.n	800d4bc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d062      	beq.n	800d470 <get_fat+0xfa>
 800d3aa:	2b03      	cmp	r3, #3
 800d3ac:	dc7c      	bgt.n	800d4a8 <get_fat+0x132>
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d002      	beq.n	800d3b8 <get_fat+0x42>
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	d042      	beq.n	800d43c <get_fat+0xc6>
 800d3b6:	e077      	b.n	800d4a8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	60fb      	str	r3, [r7, #12]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	085b      	lsrs	r3, r3, #1
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	0a5b      	lsrs	r3, r3, #9
 800d3ce:	4413      	add	r3, r2
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6938      	ldr	r0, [r7, #16]
 800d3d4:	f7ff ff14 	bl	800d200 <move_window>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d167      	bne.n	800d4ae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	1c5a      	adds	r2, r3, #1
 800d3e2:	60fa      	str	r2, [r7, #12]
 800d3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3e8:	693a      	ldr	r2, [r7, #16]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	0a5b      	lsrs	r3, r3, #9
 800d3fa:	4413      	add	r3, r2
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6938      	ldr	r0, [r7, #16]
 800d400:	f7ff fefe 	bl	800d200 <move_window>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d153      	bne.n	800d4b2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d410:	693a      	ldr	r2, [r7, #16]
 800d412:	4413      	add	r3, r2
 800d414:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d418:	021b      	lsls	r3, r3, #8
 800d41a:	461a      	mov	r2, r3
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	4313      	orrs	r3, r2
 800d420:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	f003 0301 	and.w	r3, r3, #1
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d002      	beq.n	800d432 <get_fat+0xbc>
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	091b      	lsrs	r3, r3, #4
 800d430:	e002      	b.n	800d438 <get_fat+0xc2>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d438:	617b      	str	r3, [r7, #20]
			break;
 800d43a:	e03f      	b.n	800d4bc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	0a1b      	lsrs	r3, r3, #8
 800d444:	4413      	add	r3, r2
 800d446:	4619      	mov	r1, r3
 800d448:	6938      	ldr	r0, [r7, #16]
 800d44a:	f7ff fed9 	bl	800d200 <move_window>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d130      	bne.n	800d4b6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d462:	4413      	add	r3, r2
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff fc1b 	bl	800cca0 <ld_word>
 800d46a:	4603      	mov	r3, r0
 800d46c:	617b      	str	r3, [r7, #20]
			break;
 800d46e:	e025      	b.n	800d4bc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	09db      	lsrs	r3, r3, #7
 800d478:	4413      	add	r3, r2
 800d47a:	4619      	mov	r1, r3
 800d47c:	6938      	ldr	r0, [r7, #16]
 800d47e:	f7ff febf 	bl	800d200 <move_window>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d118      	bne.n	800d4ba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d496:	4413      	add	r3, r2
 800d498:	4618      	mov	r0, r3
 800d49a:	f7ff fc19 	bl	800ccd0 <ld_dword>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d4a4:	617b      	str	r3, [r7, #20]
			break;
 800d4a6:	e009      	b.n	800d4bc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	617b      	str	r3, [r7, #20]
 800d4ac:	e006      	b.n	800d4bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4ae:	bf00      	nop
 800d4b0:	e004      	b.n	800d4bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4b2:	bf00      	nop
 800d4b4:	e002      	b.n	800d4bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4b6:	bf00      	nop
 800d4b8:	e000      	b.n	800d4bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4ba:	bf00      	nop
		}
	}

	return val;
 800d4bc:	697b      	ldr	r3, [r7, #20]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3718      	adds	r7, #24
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d4c6:	b590      	push	{r4, r7, lr}
 800d4c8:	b089      	sub	sp, #36	; 0x24
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	60f8      	str	r0, [r7, #12]
 800d4ce:	60b9      	str	r1, [r7, #8]
 800d4d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d4d2:	2302      	movs	r3, #2
 800d4d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	f240 80d9 	bls.w	800d690 <put_fat+0x1ca>
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	699b      	ldr	r3, [r3, #24]
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	f080 80d3 	bcs.w	800d690 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	2b03      	cmp	r3, #3
 800d4f0:	f000 8096 	beq.w	800d620 <put_fat+0x15a>
 800d4f4:	2b03      	cmp	r3, #3
 800d4f6:	f300 80cb 	bgt.w	800d690 <put_fat+0x1ca>
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d002      	beq.n	800d504 <put_fat+0x3e>
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	d06e      	beq.n	800d5e0 <put_fat+0x11a>
 800d502:	e0c5      	b.n	800d690 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	61bb      	str	r3, [r7, #24]
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	085b      	lsrs	r3, r3, #1
 800d50c:	69ba      	ldr	r2, [r7, #24]
 800d50e:	4413      	add	r3, r2
 800d510:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	0a5b      	lsrs	r3, r3, #9
 800d51a:	4413      	add	r3, r2
 800d51c:	4619      	mov	r1, r3
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f7ff fe6e 	bl	800d200 <move_window>
 800d524:	4603      	mov	r3, r0
 800d526:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d528:	7ffb      	ldrb	r3, [r7, #31]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f040 80a9 	bne.w	800d682 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	1c59      	adds	r1, r3, #1
 800d53a:	61b9      	str	r1, [r7, #24]
 800d53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d540:	4413      	add	r3, r2
 800d542:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	f003 0301 	and.w	r3, r3, #1
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00d      	beq.n	800d56a <put_fat+0xa4>
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	b25b      	sxtb	r3, r3
 800d554:	f003 030f 	and.w	r3, r3, #15
 800d558:	b25a      	sxtb	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	011b      	lsls	r3, r3, #4
 800d560:	b25b      	sxtb	r3, r3
 800d562:	4313      	orrs	r3, r2
 800d564:	b25b      	sxtb	r3, r3
 800d566:	b2db      	uxtb	r3, r3
 800d568:	e001      	b.n	800d56e <put_fat+0xa8>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2201      	movs	r2, #1
 800d576:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	0a5b      	lsrs	r3, r3, #9
 800d580:	4413      	add	r3, r2
 800d582:	4619      	mov	r1, r3
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7ff fe3b 	bl	800d200 <move_window>
 800d58a:	4603      	mov	r3, r0
 800d58c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d58e:	7ffb      	ldrb	r3, [r7, #31]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d178      	bne.n	800d686 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5a0:	4413      	add	r3, r2
 800d5a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	f003 0301 	and.w	r3, r3, #1
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d003      	beq.n	800d5b6 <put_fat+0xf0>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	091b      	lsrs	r3, r3, #4
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	e00e      	b.n	800d5d4 <put_fat+0x10e>
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	b25b      	sxtb	r3, r3
 800d5bc:	f023 030f 	bic.w	r3, r3, #15
 800d5c0:	b25a      	sxtb	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	0a1b      	lsrs	r3, r3, #8
 800d5c6:	b25b      	sxtb	r3, r3
 800d5c8:	f003 030f 	and.w	r3, r3, #15
 800d5cc:	b25b      	sxtb	r3, r3
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	b25b      	sxtb	r3, r3
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	70da      	strb	r2, [r3, #3]
			break;
 800d5de:	e057      	b.n	800d690 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	0a1b      	lsrs	r3, r3, #8
 800d5e8:	4413      	add	r3, r2
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f7ff fe07 	bl	800d200 <move_window>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5f6:	7ffb      	ldrb	r3, [r7, #31]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d146      	bne.n	800d68a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	005b      	lsls	r3, r3, #1
 800d606:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d60a:	4413      	add	r3, r2
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	b292      	uxth	r2, r2
 800d610:	4611      	mov	r1, r2
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff fb7f 	bl	800cd16 <st_word>
			fs->wflag = 1;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2201      	movs	r2, #1
 800d61c:	70da      	strb	r2, [r3, #3]
			break;
 800d61e:	e037      	b.n	800d690 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	09db      	lsrs	r3, r3, #7
 800d628:	4413      	add	r3, r2
 800d62a:	4619      	mov	r1, r3
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f7ff fde7 	bl	800d200 <move_window>
 800d632:	4603      	mov	r3, r0
 800d634:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d636:	7ffb      	ldrb	r3, [r7, #31]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d128      	bne.n	800d68e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d650:	4413      	add	r3, r2
 800d652:	4618      	mov	r0, r3
 800d654:	f7ff fb3c 	bl	800ccd0 <ld_dword>
 800d658:	4603      	mov	r3, r0
 800d65a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d65e:	4323      	orrs	r3, r4
 800d660:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d670:	4413      	add	r3, r2
 800d672:	6879      	ldr	r1, [r7, #4]
 800d674:	4618      	mov	r0, r3
 800d676:	f7ff fb69 	bl	800cd4c <st_dword>
			fs->wflag = 1;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2201      	movs	r2, #1
 800d67e:	70da      	strb	r2, [r3, #3]
			break;
 800d680:	e006      	b.n	800d690 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d682:	bf00      	nop
 800d684:	e004      	b.n	800d690 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d686:	bf00      	nop
 800d688:	e002      	b.n	800d690 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d68a:	bf00      	nop
 800d68c:	e000      	b.n	800d690 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d68e:	bf00      	nop
		}
	}
	return res;
 800d690:	7ffb      	ldrb	r3, [r7, #31]
}
 800d692:	4618      	mov	r0, r3
 800d694:	3724      	adds	r7, #36	; 0x24
 800d696:	46bd      	mov	sp, r7
 800d698:	bd90      	pop	{r4, r7, pc}

0800d69a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b088      	sub	sp, #32
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	60f8      	str	r0, [r7, #12]
 800d6a2:	60b9      	str	r1, [r7, #8]
 800d6a4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d904      	bls.n	800d6c0 <remove_chain+0x26>
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d301      	bcc.n	800d6c4 <remove_chain+0x2a>
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	e04b      	b.n	800d75c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00c      	beq.n	800d6e4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d6ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6ce:	6879      	ldr	r1, [r7, #4]
 800d6d0:	69b8      	ldr	r0, [r7, #24]
 800d6d2:	f7ff fef8 	bl	800d4c6 <put_fat>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d6da:	7ffb      	ldrb	r3, [r7, #31]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <remove_chain+0x4a>
 800d6e0:	7ffb      	ldrb	r3, [r7, #31]
 800d6e2:	e03b      	b.n	800d75c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d6e4:	68b9      	ldr	r1, [r7, #8]
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	f7ff fe45 	bl	800d376 <get_fat>
 800d6ec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d031      	beq.n	800d758 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d101      	bne.n	800d6fe <remove_chain+0x64>
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	e02e      	b.n	800d75c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d704:	d101      	bne.n	800d70a <remove_chain+0x70>
 800d706:	2301      	movs	r3, #1
 800d708:	e028      	b.n	800d75c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d70a:	2200      	movs	r2, #0
 800d70c:	68b9      	ldr	r1, [r7, #8]
 800d70e:	69b8      	ldr	r0, [r7, #24]
 800d710:	f7ff fed9 	bl	800d4c6 <put_fat>
 800d714:	4603      	mov	r3, r0
 800d716:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d718:	7ffb      	ldrb	r3, [r7, #31]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <remove_chain+0x88>
 800d71e:	7ffb      	ldrb	r3, [r7, #31]
 800d720:	e01c      	b.n	800d75c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	695a      	ldr	r2, [r3, #20]
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	699b      	ldr	r3, [r3, #24]
 800d72a:	3b02      	subs	r3, #2
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d20b      	bcs.n	800d748 <remove_chain+0xae>
			fs->free_clst++;
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	1c5a      	adds	r2, r3, #1
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	791b      	ldrb	r3, [r3, #4]
 800d73e:	f043 0301 	orr.w	r3, r3, #1
 800d742:	b2da      	uxtb	r2, r3
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	699b      	ldr	r3, [r3, #24]
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	429a      	cmp	r2, r3
 800d754:	d3c6      	bcc.n	800d6e4 <remove_chain+0x4a>
 800d756:	e000      	b.n	800d75a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d758:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3720      	adds	r7, #32
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10d      	bne.n	800d796 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	691b      	ldr	r3, [r3, #16]
 800d77e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d004      	beq.n	800d790 <create_chain+0x2c>
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	699b      	ldr	r3, [r3, #24]
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d31b      	bcc.n	800d7c8 <create_chain+0x64>
 800d790:	2301      	movs	r3, #1
 800d792:	61bb      	str	r3, [r7, #24]
 800d794:	e018      	b.n	800d7c8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d796:	6839      	ldr	r1, [r7, #0]
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff fdec 	bl	800d376 <get_fat>
 800d79e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d801      	bhi.n	800d7aa <create_chain+0x46>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e070      	b.n	800d88c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7b0:	d101      	bne.n	800d7b6 <create_chain+0x52>
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	e06a      	b.n	800d88c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	699b      	ldr	r3, [r3, #24]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d201      	bcs.n	800d7c4 <create_chain+0x60>
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	e063      	b.n	800d88c <create_chain+0x128>
		scl = clst;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	69fa      	ldr	r2, [r7, #28]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d307      	bcc.n	800d7ec <create_chain+0x88>
				ncl = 2;
 800d7dc:	2302      	movs	r3, #2
 800d7de:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d7e0:	69fa      	ldr	r2, [r7, #28]
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d901      	bls.n	800d7ec <create_chain+0x88>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	e04f      	b.n	800d88c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d7ec:	69f9      	ldr	r1, [r7, #28]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff fdc1 	bl	800d376 <get_fat>
 800d7f4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00e      	beq.n	800d81a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d003      	beq.n	800d80a <create_chain+0xa6>
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d808:	d101      	bne.n	800d80e <create_chain+0xaa>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	e03e      	b.n	800d88c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d80e:	69fa      	ldr	r2, [r7, #28]
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	429a      	cmp	r2, r3
 800d814:	d1da      	bne.n	800d7cc <create_chain+0x68>
 800d816:	2300      	movs	r3, #0
 800d818:	e038      	b.n	800d88c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d81a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d81c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d820:	69f9      	ldr	r1, [r7, #28]
 800d822:	6938      	ldr	r0, [r7, #16]
 800d824:	f7ff fe4f 	bl	800d4c6 <put_fat>
 800d828:	4603      	mov	r3, r0
 800d82a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d82c:	7dfb      	ldrb	r3, [r7, #23]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d109      	bne.n	800d846 <create_chain+0xe2>
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d006      	beq.n	800d846 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d838:	69fa      	ldr	r2, [r7, #28]
 800d83a:	6839      	ldr	r1, [r7, #0]
 800d83c:	6938      	ldr	r0, [r7, #16]
 800d83e:	f7ff fe42 	bl	800d4c6 <put_fat>
 800d842:	4603      	mov	r3, r0
 800d844:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d846:	7dfb      	ldrb	r3, [r7, #23]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d116      	bne.n	800d87a <create_chain+0x116>
		fs->last_clst = ncl;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	695a      	ldr	r2, [r3, #20]
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	699b      	ldr	r3, [r3, #24]
 800d85a:	3b02      	subs	r3, #2
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d804      	bhi.n	800d86a <create_chain+0x106>
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	695b      	ldr	r3, [r3, #20]
 800d864:	1e5a      	subs	r2, r3, #1
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	791b      	ldrb	r3, [r3, #4]
 800d86e:	f043 0301 	orr.w	r3, r3, #1
 800d872:	b2da      	uxtb	r2, r3
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	711a      	strb	r2, [r3, #4]
 800d878:	e007      	b.n	800d88a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d102      	bne.n	800d886 <create_chain+0x122>
 800d880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d884:	e000      	b.n	800d888 <create_chain+0x124>
 800d886:	2301      	movs	r3, #1
 800d888:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d88a:	69fb      	ldr	r3, [r7, #28]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3720      	adds	r7, #32
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d894:	b480      	push	{r7}
 800d896:	b087      	sub	sp, #28
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	0a5b      	lsrs	r3, r3, #9
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	8952      	ldrh	r2, [r2, #10]
 800d8b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	1d1a      	adds	r2, r3, #4
 800d8be:	613a      	str	r2, [r7, #16]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d101      	bne.n	800d8ce <clmt_clust+0x3a>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	e010      	b.n	800d8f0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d8ce:	697a      	ldr	r2, [r7, #20]
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d307      	bcc.n	800d8e6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	617b      	str	r3, [r7, #20]
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8e4:	e7e9      	b.n	800d8ba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d8e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	4413      	add	r3, r2
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	371c      	adds	r7, #28
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d912:	d204      	bcs.n	800d91e <dir_sdi+0x22>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	f003 031f 	and.w	r3, r3, #31
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d001      	beq.n	800d922 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d91e:	2302      	movs	r3, #2
 800d920:	e063      	b.n	800d9ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d106      	bne.n	800d942 <dir_sdi+0x46>
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d902      	bls.n	800d942 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d940:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10c      	bne.n	800d962 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	095b      	lsrs	r3, r3, #5
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	8912      	ldrh	r2, [r2, #8]
 800d950:	4293      	cmp	r3, r2
 800d952:	d301      	bcc.n	800d958 <dir_sdi+0x5c>
 800d954:	2302      	movs	r3, #2
 800d956:	e048      	b.n	800d9ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	61da      	str	r2, [r3, #28]
 800d960:	e029      	b.n	800d9b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	895b      	ldrh	r3, [r3, #10]
 800d966:	025b      	lsls	r3, r3, #9
 800d968:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d96a:	e019      	b.n	800d9a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6979      	ldr	r1, [r7, #20]
 800d970:	4618      	mov	r0, r3
 800d972:	f7ff fd00 	bl	800d376 <get_fat>
 800d976:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d97e:	d101      	bne.n	800d984 <dir_sdi+0x88>
 800d980:	2301      	movs	r3, #1
 800d982:	e032      	b.n	800d9ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	2b01      	cmp	r3, #1
 800d988:	d904      	bls.n	800d994 <dir_sdi+0x98>
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	429a      	cmp	r2, r3
 800d992:	d301      	bcc.n	800d998 <dir_sdi+0x9c>
 800d994:	2302      	movs	r3, #2
 800d996:	e028      	b.n	800d9ea <dir_sdi+0xee>
			ofs -= csz;
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d2e1      	bcs.n	800d96c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d9a8:	6979      	ldr	r1, [r7, #20]
 800d9aa:	6938      	ldr	r0, [r7, #16]
 800d9ac:	f7ff fcc4 	bl	800d338 <clust2sect>
 800d9b0:	4602      	mov	r2, r0
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	697a      	ldr	r2, [r7, #20]
 800d9ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	69db      	ldr	r3, [r3, #28]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d101      	bne.n	800d9c8 <dir_sdi+0xcc>
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	e010      	b.n	800d9ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	69da      	ldr	r2, [r3, #28]
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	0a5b      	lsrs	r3, r3, #9
 800d9d0:	441a      	add	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9e2:	441a      	add	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3718      	adds	r7, #24
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b086      	sub	sp, #24
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	695b      	ldr	r3, [r3, #20]
 800da06:	3320      	adds	r3, #32
 800da08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	69db      	ldr	r3, [r3, #28]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <dir_next+0x28>
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da18:	d301      	bcc.n	800da1e <dir_next+0x2c>
 800da1a:	2304      	movs	r3, #4
 800da1c:	e0aa      	b.n	800db74 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da24:	2b00      	cmp	r3, #0
 800da26:	f040 8098 	bne.w	800db5a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	69db      	ldr	r3, [r3, #28]
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	699b      	ldr	r3, [r3, #24]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d10b      	bne.n	800da54 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	095b      	lsrs	r3, r3, #5
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	8912      	ldrh	r2, [r2, #8]
 800da44:	4293      	cmp	r3, r2
 800da46:	f0c0 8088 	bcc.w	800db5a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	61da      	str	r2, [r3, #28]
 800da50:	2304      	movs	r3, #4
 800da52:	e08f      	b.n	800db74 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	0a5b      	lsrs	r3, r3, #9
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	8952      	ldrh	r2, [r2, #10]
 800da5c:	3a01      	subs	r2, #1
 800da5e:	4013      	ands	r3, r2
 800da60:	2b00      	cmp	r3, #0
 800da62:	d17a      	bne.n	800db5a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	4619      	mov	r1, r3
 800da6c:	4610      	mov	r0, r2
 800da6e:	f7ff fc82 	bl	800d376 <get_fat>
 800da72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	2b01      	cmp	r3, #1
 800da78:	d801      	bhi.n	800da7e <dir_next+0x8c>
 800da7a:	2302      	movs	r3, #2
 800da7c:	e07a      	b.n	800db74 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da84:	d101      	bne.n	800da8a <dir_next+0x98>
 800da86:	2301      	movs	r3, #1
 800da88:	e074      	b.n	800db74 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	697a      	ldr	r2, [r7, #20]
 800da90:	429a      	cmp	r2, r3
 800da92:	d358      	bcc.n	800db46 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d104      	bne.n	800daa4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	61da      	str	r2, [r3, #28]
 800daa0:	2304      	movs	r3, #4
 800daa2:	e067      	b.n	800db74 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	699b      	ldr	r3, [r3, #24]
 800daaa:	4619      	mov	r1, r3
 800daac:	4610      	mov	r0, r2
 800daae:	f7ff fe59 	bl	800d764 <create_chain>
 800dab2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d101      	bne.n	800dabe <dir_next+0xcc>
 800daba:	2307      	movs	r3, #7
 800dabc:	e05a      	b.n	800db74 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d101      	bne.n	800dac8 <dir_next+0xd6>
 800dac4:	2302      	movs	r3, #2
 800dac6:	e055      	b.n	800db74 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dace:	d101      	bne.n	800dad4 <dir_next+0xe2>
 800dad0:	2301      	movs	r3, #1
 800dad2:	e04f      	b.n	800db74 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f7ff fb4f 	bl	800d178 <sync_window>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <dir_next+0xf2>
 800dae0:	2301      	movs	r3, #1
 800dae2:	e047      	b.n	800db74 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	3334      	adds	r3, #52	; 0x34
 800dae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daec:	2100      	movs	r1, #0
 800daee:	4618      	mov	r0, r3
 800daf0:	f7ff f979 	bl	800cde6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800daf4:	2300      	movs	r3, #0
 800daf6:	613b      	str	r3, [r7, #16]
 800daf8:	6979      	ldr	r1, [r7, #20]
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff fc1c 	bl	800d338 <clust2sect>
 800db00:	4602      	mov	r2, r0
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	631a      	str	r2, [r3, #48]	; 0x30
 800db06:	e012      	b.n	800db2e <dir_next+0x13c>
						fs->wflag = 1;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2201      	movs	r2, #1
 800db0c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f7ff fb32 	bl	800d178 <sync_window>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <dir_next+0x12c>
 800db1a:	2301      	movs	r3, #1
 800db1c:	e02a      	b.n	800db74 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	3301      	adds	r3, #1
 800db22:	613b      	str	r3, [r7, #16]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db28:	1c5a      	adds	r2, r3, #1
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	631a      	str	r2, [r3, #48]	; 0x30
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	895b      	ldrh	r3, [r3, #10]
 800db32:	461a      	mov	r2, r3
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	4293      	cmp	r3, r2
 800db38:	d3e6      	bcc.n	800db08 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	1ad2      	subs	r2, r2, r3
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800db4c:	6979      	ldr	r1, [r7, #20]
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7ff fbf2 	bl	800d338 <clust2sect>
 800db54:	4602      	mov	r2, r0
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db6c:	441a      	add	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3718      	adds	r7, #24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b086      	sub	sp, #24
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800db8c:	2100      	movs	r1, #0
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7ff feb4 	bl	800d8fc <dir_sdi>
 800db94:	4603      	mov	r3, r0
 800db96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db98:	7dfb      	ldrb	r3, [r7, #23]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d12b      	bne.n	800dbf6 <dir_alloc+0x7a>
		n = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	69db      	ldr	r3, [r3, #28]
 800dba6:	4619      	mov	r1, r3
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f7ff fb29 	bl	800d200 <move_window>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d11d      	bne.n	800dbf4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a1b      	ldr	r3, [r3, #32]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	2be5      	cmp	r3, #229	; 0xe5
 800dbc0:	d004      	beq.n	800dbcc <dir_alloc+0x50>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a1b      	ldr	r3, [r3, #32]
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d107      	bne.n	800dbdc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	613b      	str	r3, [r7, #16]
 800dbd2:	693a      	ldr	r2, [r7, #16]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d102      	bne.n	800dbe0 <dir_alloc+0x64>
 800dbda:	e00c      	b.n	800dbf6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dbdc:	2300      	movs	r3, #0
 800dbde:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dbe0:	2101      	movs	r1, #1
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff ff05 	bl	800d9f2 <dir_next>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dbec:	7dfb      	ldrb	r3, [r7, #23]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d0d7      	beq.n	800dba2 <dir_alloc+0x26>
 800dbf2:	e000      	b.n	800dbf6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dbf4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dbf6:	7dfb      	ldrb	r3, [r7, #23]
 800dbf8:	2b04      	cmp	r3, #4
 800dbfa:	d101      	bne.n	800dc00 <dir_alloc+0x84>
 800dbfc:	2307      	movs	r3, #7
 800dbfe:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc00:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3718      	adds	r7, #24
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	331a      	adds	r3, #26
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff f841 	bl	800cca0 <ld_word>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d109      	bne.n	800dc3e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	3314      	adds	r3, #20
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff f836 	bl	800cca0 <ld_word>
 800dc34:	4603      	mov	r3, r0
 800dc36:	041b      	lsls	r3, r3, #16
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	331a      	adds	r3, #26
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	b292      	uxth	r2, r2
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7ff f859 	bl	800cd16 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	2b03      	cmp	r3, #3
 800dc6a:	d109      	bne.n	800dc80 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	f103 0214 	add.w	r2, r3, #20
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	0c1b      	lsrs	r3, r3, #16
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	4619      	mov	r1, r3
 800dc7a:	4610      	mov	r0, r2
 800dc7c:	f7ff f84b 	bl	800cd16 <st_word>
	}
}
 800dc80:	bf00      	nop
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dc88:	b590      	push	{r4, r7, lr}
 800dc8a:	b087      	sub	sp, #28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	331a      	adds	r3, #26
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff f802 	bl	800cca0 <ld_word>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <cmp_lfn+0x1e>
 800dca2:	2300      	movs	r3, #0
 800dca4:	e059      	b.n	800dd5a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcae:	1e5a      	subs	r2, r3, #1
 800dcb0:	4613      	mov	r3, r2
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	4413      	add	r3, r2
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	4413      	add	r3, r2
 800dcba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	81fb      	strh	r3, [r7, #14]
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	613b      	str	r3, [r7, #16]
 800dcc4:	e033      	b.n	800dd2e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dcc6:	4a27      	ldr	r2, [pc, #156]	; (800dd64 <cmp_lfn+0xdc>)
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	4413      	add	r3, r2
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	461a      	mov	r2, r3
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fe ffe3 	bl	800cca0 <ld_word>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dcde:	89fb      	ldrh	r3, [r7, #14]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d01a      	beq.n	800dd1a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	2bfe      	cmp	r3, #254	; 0xfe
 800dce8:	d812      	bhi.n	800dd10 <cmp_lfn+0x88>
 800dcea:	89bb      	ldrh	r3, [r7, #12]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f001 fd0f 	bl	800f710 <ff_wtoupper>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	461c      	mov	r4, r3
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	1c5a      	adds	r2, r3, #1
 800dcfa:	617a      	str	r2, [r7, #20]
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	4413      	add	r3, r2
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f001 fd03 	bl	800f710 <ff_wtoupper>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	429c      	cmp	r4, r3
 800dd0e:	d001      	beq.n	800dd14 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dd10:	2300      	movs	r3, #0
 800dd12:	e022      	b.n	800dd5a <cmp_lfn+0xd2>
			}
			wc = uc;
 800dd14:	89bb      	ldrh	r3, [r7, #12]
 800dd16:	81fb      	strh	r3, [r7, #14]
 800dd18:	e006      	b.n	800dd28 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd1a:	89bb      	ldrh	r3, [r7, #12]
 800dd1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d001      	beq.n	800dd28 <cmp_lfn+0xa0>
 800dd24:	2300      	movs	r3, #0
 800dd26:	e018      	b.n	800dd5a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	613b      	str	r3, [r7, #16]
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	2b0c      	cmp	r3, #12
 800dd32:	d9c8      	bls.n	800dcc6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00b      	beq.n	800dd58 <cmp_lfn+0xd0>
 800dd40:	89fb      	ldrh	r3, [r7, #14]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d008      	beq.n	800dd58 <cmp_lfn+0xd0>
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <cmp_lfn+0xd0>
 800dd54:	2300      	movs	r3, #0
 800dd56:	e000      	b.n	800dd5a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dd58:	2301      	movs	r3, #1
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	371c      	adds	r7, #28
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd90      	pop	{r4, r7, pc}
 800dd62:	bf00      	nop
 800dd64:	08011af0 	.word	0x08011af0

0800dd68 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b088      	sub	sp, #32
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	4611      	mov	r1, r2
 800dd74:	461a      	mov	r2, r3
 800dd76:	460b      	mov	r3, r1
 800dd78:	71fb      	strb	r3, [r7, #7]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	330d      	adds	r3, #13
 800dd82:	79ba      	ldrb	r2, [r7, #6]
 800dd84:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	330b      	adds	r3, #11
 800dd8a:	220f      	movs	r2, #15
 800dd8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	330c      	adds	r3, #12
 800dd92:	2200      	movs	r2, #0
 800dd94:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	331a      	adds	r3, #26
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fe ffba 	bl	800cd16 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dda2:	79fb      	ldrb	r3, [r7, #7]
 800dda4:	1e5a      	subs	r2, r3, #1
 800dda6:	4613      	mov	r3, r2
 800dda8:	005b      	lsls	r3, r3, #1
 800ddaa:	4413      	add	r3, r2
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4413      	add	r3, r2
 800ddb0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	82fb      	strh	r3, [r7, #22]
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ddba:	8afb      	ldrh	r3, [r7, #22]
 800ddbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d007      	beq.n	800ddd4 <put_lfn+0x6c>
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	1c5a      	adds	r2, r3, #1
 800ddc8:	61fa      	str	r2, [r7, #28]
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	4413      	add	r3, r2
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ddd4:	4a17      	ldr	r2, [pc, #92]	; (800de34 <put_lfn+0xcc>)
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	4413      	add	r3, r2
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	461a      	mov	r2, r3
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	4413      	add	r3, r2
 800dde2:	8afa      	ldrh	r2, [r7, #22]
 800dde4:	4611      	mov	r1, r2
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fe ff95 	bl	800cd16 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ddec:	8afb      	ldrh	r3, [r7, #22]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d102      	bne.n	800ddf8 <put_lfn+0x90>
 800ddf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ddf6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	61bb      	str	r3, [r7, #24]
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	2b0c      	cmp	r3, #12
 800de02:	d9da      	bls.n	800ddba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800de04:	8afb      	ldrh	r3, [r7, #22]
 800de06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d006      	beq.n	800de1c <put_lfn+0xb4>
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	005b      	lsls	r3, r3, #1
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	4413      	add	r3, r2
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d103      	bne.n	800de24 <put_lfn+0xbc>
 800de1c:	79fb      	ldrb	r3, [r7, #7]
 800de1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de22:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	79fa      	ldrb	r2, [r7, #7]
 800de28:	701a      	strb	r2, [r3, #0]
}
 800de2a:	bf00      	nop
 800de2c:	3720      	adds	r7, #32
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	08011af0 	.word	0x08011af0

0800de38 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08c      	sub	sp, #48	; 0x30
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800de46:	220b      	movs	r2, #11
 800de48:	68b9      	ldr	r1, [r7, #8]
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7fe ffaa 	bl	800cda4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	2b05      	cmp	r3, #5
 800de54:	d929      	bls.n	800deaa <gen_numname+0x72>
		sr = seq;
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800de5a:	e020      	b.n	800de9e <gen_numname+0x66>
			wc = *lfn++;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	1c9a      	adds	r2, r3, #2
 800de60:	607a      	str	r2, [r7, #4]
 800de62:	881b      	ldrh	r3, [r3, #0]
 800de64:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800de66:	2300      	movs	r3, #0
 800de68:	62bb      	str	r3, [r7, #40]	; 0x28
 800de6a:	e015      	b.n	800de98 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	005a      	lsls	r2, r3, #1
 800de70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de72:	f003 0301 	and.w	r3, r3, #1
 800de76:	4413      	add	r3, r2
 800de78:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800de7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de7c:	085b      	lsrs	r3, r3, #1
 800de7e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de86:	2b00      	cmp	r3, #0
 800de88:	d003      	beq.n	800de92 <gen_numname+0x5a>
 800de8a:	69fa      	ldr	r2, [r7, #28]
 800de8c:	4b30      	ldr	r3, [pc, #192]	; (800df50 <gen_numname+0x118>)
 800de8e:	4053      	eors	r3, r2
 800de90:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800de92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de94:	3301      	adds	r3, #1
 800de96:	62bb      	str	r3, [r7, #40]	; 0x28
 800de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9a:	2b0f      	cmp	r3, #15
 800de9c:	d9e6      	bls.n	800de6c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	881b      	ldrh	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1da      	bne.n	800de5c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800deaa:	2307      	movs	r3, #7
 800deac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f003 030f 	and.w	r3, r3, #15
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	3330      	adds	r3, #48	; 0x30
 800deba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800debe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dec2:	2b39      	cmp	r3, #57	; 0x39
 800dec4:	d904      	bls.n	800ded0 <gen_numname+0x98>
 800dec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800deca:	3307      	adds	r3, #7
 800decc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	1e5a      	subs	r2, r3, #1
 800ded4:	62ba      	str	r2, [r7, #40]	; 0x28
 800ded6:	3330      	adds	r3, #48	; 0x30
 800ded8:	443b      	add	r3, r7
 800deda:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dede:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	091b      	lsrs	r3, r3, #4
 800dee6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1df      	bne.n	800deae <gen_numname+0x76>
	ns[i] = '~';
 800deee:	f107 0214 	add.w	r2, r7, #20
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	4413      	add	r3, r2
 800def6:	227e      	movs	r2, #126	; 0x7e
 800def8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800defa:	2300      	movs	r3, #0
 800defc:	627b      	str	r3, [r7, #36]	; 0x24
 800defe:	e002      	b.n	800df06 <gen_numname+0xce>
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	3301      	adds	r3, #1
 800df04:	627b      	str	r3, [r7, #36]	; 0x24
 800df06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d205      	bcs.n	800df1a <gen_numname+0xe2>
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	4413      	add	r3, r2
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	2b20      	cmp	r3, #32
 800df18:	d1f2      	bne.n	800df00 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800df1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1c:	2b07      	cmp	r3, #7
 800df1e:	d807      	bhi.n	800df30 <gen_numname+0xf8>
 800df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df22:	1c5a      	adds	r2, r3, #1
 800df24:	62ba      	str	r2, [r7, #40]	; 0x28
 800df26:	3330      	adds	r3, #48	; 0x30
 800df28:	443b      	add	r3, r7
 800df2a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800df2e:	e000      	b.n	800df32 <gen_numname+0xfa>
 800df30:	2120      	movs	r1, #32
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	627a      	str	r2, [r7, #36]	; 0x24
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	4413      	add	r3, r2
 800df3c:	460a      	mov	r2, r1
 800df3e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	2b07      	cmp	r3, #7
 800df44:	d9e9      	bls.n	800df1a <gen_numname+0xe2>
}
 800df46:	bf00      	nop
 800df48:	bf00      	nop
 800df4a:	3730      	adds	r7, #48	; 0x30
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	00011021 	.word	0x00011021

0800df54 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800df54:	b480      	push	{r7}
 800df56:	b085      	sub	sp, #20
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800df5c:	2300      	movs	r3, #0
 800df5e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800df60:	230b      	movs	r3, #11
 800df62:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800df64:	7bfb      	ldrb	r3, [r7, #15]
 800df66:	b2da      	uxtb	r2, r3
 800df68:	0852      	lsrs	r2, r2, #1
 800df6a:	01db      	lsls	r3, r3, #7
 800df6c:	4313      	orrs	r3, r2
 800df6e:	b2da      	uxtb	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	1c59      	adds	r1, r3, #1
 800df74:	6079      	str	r1, [r7, #4]
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	4413      	add	r3, r2
 800df7a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	3b01      	subs	r3, #1
 800df80:	60bb      	str	r3, [r7, #8]
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d1ed      	bne.n	800df64 <sum_sfn+0x10>
	return sum;
 800df88:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800df96:	b580      	push	{r7, lr}
 800df98:	b086      	sub	sp, #24
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7ff fca8 	bl	800d8fc <dir_sdi>
 800dfac:	4603      	mov	r3, r0
 800dfae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dfb0:	7dfb      	ldrb	r3, [r7, #23]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <dir_find+0x24>
 800dfb6:	7dfb      	ldrb	r3, [r7, #23]
 800dfb8:	e0a9      	b.n	800e10e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dfba:	23ff      	movs	r3, #255	; 0xff
 800dfbc:	753b      	strb	r3, [r7, #20]
 800dfbe:	7d3b      	ldrb	r3, [r7, #20]
 800dfc0:	757b      	strb	r3, [r7, #21]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfc8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6938      	ldr	r0, [r7, #16]
 800dfd2:	f7ff f915 	bl	800d200 <move_window>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dfda:	7dfb      	ldrb	r3, [r7, #23]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f040 8090 	bne.w	800e102 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dfea:	7dbb      	ldrb	r3, [r7, #22]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d102      	bne.n	800dff6 <dir_find+0x60>
 800dff0:	2304      	movs	r3, #4
 800dff2:	75fb      	strb	r3, [r7, #23]
 800dff4:	e08a      	b.n	800e10c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a1b      	ldr	r3, [r3, #32]
 800dffa:	330b      	adds	r3, #11
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e002:	73fb      	strb	r3, [r7, #15]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	7bfa      	ldrb	r2, [r7, #15]
 800e008:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e00a:	7dbb      	ldrb	r3, [r7, #22]
 800e00c:	2be5      	cmp	r3, #229	; 0xe5
 800e00e:	d007      	beq.n	800e020 <dir_find+0x8a>
 800e010:	7bfb      	ldrb	r3, [r7, #15]
 800e012:	f003 0308 	and.w	r3, r3, #8
 800e016:	2b00      	cmp	r3, #0
 800e018:	d009      	beq.n	800e02e <dir_find+0x98>
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	2b0f      	cmp	r3, #15
 800e01e:	d006      	beq.n	800e02e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e020:	23ff      	movs	r3, #255	; 0xff
 800e022:	757b      	strb	r3, [r7, #21]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e02a:	631a      	str	r2, [r3, #48]	; 0x30
 800e02c:	e05e      	b.n	800e0ec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
 800e030:	2b0f      	cmp	r3, #15
 800e032:	d136      	bne.n	800e0a2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d154      	bne.n	800e0ec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e042:	7dbb      	ldrb	r3, [r7, #22]
 800e044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00d      	beq.n	800e068 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a1b      	ldr	r3, [r3, #32]
 800e050:	7b5b      	ldrb	r3, [r3, #13]
 800e052:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e054:	7dbb      	ldrb	r3, [r7, #22]
 800e056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e05a:	75bb      	strb	r3, [r7, #22]
 800e05c:	7dbb      	ldrb	r3, [r7, #22]
 800e05e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	695a      	ldr	r2, [r3, #20]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e068:	7dba      	ldrb	r2, [r7, #22]
 800e06a:	7d7b      	ldrb	r3, [r7, #21]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d115      	bne.n	800e09c <dir_find+0x106>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a1b      	ldr	r3, [r3, #32]
 800e074:	330d      	adds	r3, #13
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	7d3a      	ldrb	r2, [r7, #20]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d10e      	bne.n	800e09c <dir_find+0x106>
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	68da      	ldr	r2, [r3, #12]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a1b      	ldr	r3, [r3, #32]
 800e086:	4619      	mov	r1, r3
 800e088:	4610      	mov	r0, r2
 800e08a:	f7ff fdfd 	bl	800dc88 <cmp_lfn>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d003      	beq.n	800e09c <dir_find+0x106>
 800e094:	7d7b      	ldrb	r3, [r7, #21]
 800e096:	3b01      	subs	r3, #1
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	e000      	b.n	800e09e <dir_find+0x108>
 800e09c:	23ff      	movs	r3, #255	; 0xff
 800e09e:	757b      	strb	r3, [r7, #21]
 800e0a0:	e024      	b.n	800e0ec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e0a2:	7d7b      	ldrb	r3, [r7, #21]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d109      	bne.n	800e0bc <dir_find+0x126>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a1b      	ldr	r3, [r3, #32]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7ff ff51 	bl	800df54 <sum_sfn>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	7d3b      	ldrb	r3, [r7, #20]
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d024      	beq.n	800e106 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e0c2:	f003 0301 	and.w	r3, r3, #1
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10a      	bne.n	800e0e0 <dir_find+0x14a>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a18      	ldr	r0, [r3, #32]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	3324      	adds	r3, #36	; 0x24
 800e0d2:	220b      	movs	r2, #11
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	f7fe fea1 	bl	800ce1c <mem_cmp>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d014      	beq.n	800e10a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e0e0:	23ff      	movs	r3, #255	; 0xff
 800e0e2:	757b      	strb	r3, [r7, #21]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0ea:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7ff fc7f 	bl	800d9f2 <dir_next>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e0f8:	7dfb      	ldrb	r3, [r7, #23]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f43f af65 	beq.w	800dfca <dir_find+0x34>
 800e100:	e004      	b.n	800e10c <dir_find+0x176>
		if (res != FR_OK) break;
 800e102:	bf00      	nop
 800e104:	e002      	b.n	800e10c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e106:	bf00      	nop
 800e108:	e000      	b.n	800e10c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e10a:	bf00      	nop

	return res;
 800e10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3718      	adds	r7, #24
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
	...

0800e118 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b08c      	sub	sp, #48	; 0x30
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e12c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <dir_register+0x20>
 800e134:	2306      	movs	r3, #6
 800e136:	e0e0      	b.n	800e2fa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e138:	2300      	movs	r3, #0
 800e13a:	627b      	str	r3, [r7, #36]	; 0x24
 800e13c:	e002      	b.n	800e144 <dir_register+0x2c>
 800e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e140:	3301      	adds	r3, #1
 800e142:	627b      	str	r3, [r7, #36]	; 0x24
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	68da      	ldr	r2, [r3, #12]
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	005b      	lsls	r3, r3, #1
 800e14c:	4413      	add	r3, r2
 800e14e:	881b      	ldrh	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1f4      	bne.n	800e13e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e15a:	f107 030c 	add.w	r3, r7, #12
 800e15e:	220c      	movs	r2, #12
 800e160:	4618      	mov	r0, r3
 800e162:	f7fe fe1f 	bl	800cda4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e166:	7dfb      	ldrb	r3, [r7, #23]
 800e168:	f003 0301 	and.w	r3, r3, #1
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d032      	beq.n	800e1d6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2240      	movs	r2, #64	; 0x40
 800e174:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e178:	2301      	movs	r3, #1
 800e17a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e17c:	e016      	b.n	800e1ac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	68da      	ldr	r2, [r3, #12]
 800e188:	f107 010c 	add.w	r1, r7, #12
 800e18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18e:	f7ff fe53 	bl	800de38 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7ff feff 	bl	800df96 <dir_find>
 800e198:	4603      	mov	r3, r0
 800e19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e19e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d106      	bne.n	800e1b4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ae:	2b63      	cmp	r3, #99	; 0x63
 800e1b0:	d9e5      	bls.n	800e17e <dir_register+0x66>
 800e1b2:	e000      	b.n	800e1b6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e1b4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b8:	2b64      	cmp	r3, #100	; 0x64
 800e1ba:	d101      	bne.n	800e1c0 <dir_register+0xa8>
 800e1bc:	2307      	movs	r3, #7
 800e1be:	e09c      	b.n	800e2fa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e1c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1c4:	2b04      	cmp	r3, #4
 800e1c6:	d002      	beq.n	800e1ce <dir_register+0xb6>
 800e1c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1cc:	e095      	b.n	800e2fa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e1ce:	7dfa      	ldrb	r2, [r7, #23]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e1d6:	7dfb      	ldrb	r3, [r7, #23]
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d007      	beq.n	800e1f0 <dir_register+0xd8>
 800e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e2:	330c      	adds	r3, #12
 800e1e4:	4a47      	ldr	r2, [pc, #284]	; (800e304 <dir_register+0x1ec>)
 800e1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800e1ea:	089b      	lsrs	r3, r3, #2
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	e000      	b.n	800e1f2 <dir_register+0xda>
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e1f4:	6a39      	ldr	r1, [r7, #32]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7ff fcc0 	bl	800db7c <dir_alloc>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e206:	2b00      	cmp	r3, #0
 800e208:	d148      	bne.n	800e29c <dir_register+0x184>
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	3b01      	subs	r3, #1
 800e20e:	623b      	str	r3, [r7, #32]
 800e210:	6a3b      	ldr	r3, [r7, #32]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d042      	beq.n	800e29c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	695a      	ldr	r2, [r3, #20]
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	015b      	lsls	r3, r3, #5
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	4619      	mov	r1, r3
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7ff fb6a 	bl	800d8fc <dir_sdi>
 800e228:	4603      	mov	r3, r0
 800e22a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e22e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e232:	2b00      	cmp	r3, #0
 800e234:	d132      	bne.n	800e29c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	3324      	adds	r3, #36	; 0x24
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7ff fe8a 	bl	800df54 <sum_sfn>
 800e240:	4603      	mov	r3, r0
 800e242:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	69db      	ldr	r3, [r3, #28]
 800e248:	4619      	mov	r1, r3
 800e24a:	69f8      	ldr	r0, [r7, #28]
 800e24c:	f7fe ffd8 	bl	800d200 <move_window>
 800e250:	4603      	mov	r3, r0
 800e252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d11d      	bne.n	800e29a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	68d8      	ldr	r0, [r3, #12]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a19      	ldr	r1, [r3, #32]
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	7efb      	ldrb	r3, [r7, #27]
 800e26c:	f7ff fd7c 	bl	800dd68 <put_lfn>
				fs->wflag = 1;
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	2201      	movs	r2, #1
 800e274:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e276:	2100      	movs	r1, #0
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7ff fbba 	bl	800d9f2 <dir_next>
 800e27e:	4603      	mov	r3, r0
 800e280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d107      	bne.n	800e29c <dir_register+0x184>
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	3b01      	subs	r3, #1
 800e290:	623b      	str	r3, [r7, #32]
 800e292:	6a3b      	ldr	r3, [r7, #32]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1d5      	bne.n	800e244 <dir_register+0x12c>
 800e298:	e000      	b.n	800e29c <dir_register+0x184>
				if (res != FR_OK) break;
 800e29a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e29c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d128      	bne.n	800e2f6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	69db      	ldr	r3, [r3, #28]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	69f8      	ldr	r0, [r7, #28]
 800e2ac:	f7fe ffa8 	bl	800d200 <move_window>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d11b      	bne.n	800e2f6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a1b      	ldr	r3, [r3, #32]
 800e2c2:	2220      	movs	r2, #32
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe fd8d 	bl	800cde6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6a18      	ldr	r0, [r3, #32]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	3324      	adds	r3, #36	; 0x24
 800e2d4:	220b      	movs	r2, #11
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	f7fe fd64 	bl	800cda4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6a1b      	ldr	r3, [r3, #32]
 800e2e6:	330c      	adds	r3, #12
 800e2e8:	f002 0218 	and.w	r2, r2, #24
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e2f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3730      	adds	r7, #48	; 0x30
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	4ec4ec4f 	.word	0x4ec4ec4f

0800e308 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b08a      	sub	sp, #40	; 0x28
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	613b      	str	r3, [r7, #16]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	60fb      	str	r3, [r7, #12]
 800e320:	2300      	movs	r3, #0
 800e322:	617b      	str	r3, [r7, #20]
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	1c5a      	adds	r2, r3, #1
 800e32c:	61ba      	str	r2, [r7, #24]
 800e32e:	693a      	ldr	r2, [r7, #16]
 800e330:	4413      	add	r3, r2
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e338:	2b1f      	cmp	r3, #31
 800e33a:	d940      	bls.n	800e3be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e33c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e33e:	2b2f      	cmp	r3, #47	; 0x2f
 800e340:	d006      	beq.n	800e350 <create_name+0x48>
 800e342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e344:	2b5c      	cmp	r3, #92	; 0x5c
 800e346:	d110      	bne.n	800e36a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e348:	e002      	b.n	800e350 <create_name+0x48>
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	3301      	adds	r3, #1
 800e34e:	61bb      	str	r3, [r7, #24]
 800e350:	693a      	ldr	r2, [r7, #16]
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	4413      	add	r3, r2
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	2b2f      	cmp	r3, #47	; 0x2f
 800e35a:	d0f6      	beq.n	800e34a <create_name+0x42>
 800e35c:	693a      	ldr	r2, [r7, #16]
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	4413      	add	r3, r2
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b5c      	cmp	r3, #92	; 0x5c
 800e366:	d0f0      	beq.n	800e34a <create_name+0x42>
			break;
 800e368:	e02a      	b.n	800e3c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	2bfe      	cmp	r3, #254	; 0xfe
 800e36e:	d901      	bls.n	800e374 <create_name+0x6c>
 800e370:	2306      	movs	r3, #6
 800e372:	e17d      	b.n	800e670 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e376:	b2db      	uxtb	r3, r3
 800e378:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e37a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e37c:	2101      	movs	r1, #1
 800e37e:	4618      	mov	r0, r3
 800e380:	f001 f98a 	bl	800f698 <ff_convert>
 800e384:	4603      	mov	r3, r0
 800e386:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d101      	bne.n	800e392 <create_name+0x8a>
 800e38e:	2306      	movs	r3, #6
 800e390:	e16e      	b.n	800e670 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e394:	2b7f      	cmp	r3, #127	; 0x7f
 800e396:	d809      	bhi.n	800e3ac <create_name+0xa4>
 800e398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e39a:	4619      	mov	r1, r3
 800e39c:	488d      	ldr	r0, [pc, #564]	; (800e5d4 <create_name+0x2cc>)
 800e39e:	f7fe fd64 	bl	800ce6a <chk_chr>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <create_name+0xa4>
 800e3a8:	2306      	movs	r3, #6
 800e3aa:	e161      	b.n	800e670 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	1c5a      	adds	r2, r3, #1
 800e3b0:	617a      	str	r2, [r7, #20]
 800e3b2:	005b      	lsls	r3, r3, #1
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e3bc:	e7b4      	b.n	800e328 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e3be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e3c0:	693a      	ldr	r2, [r7, #16]
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	441a      	add	r2, r3
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e3ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3cc:	2b1f      	cmp	r3, #31
 800e3ce:	d801      	bhi.n	800e3d4 <create_name+0xcc>
 800e3d0:	2304      	movs	r3, #4
 800e3d2:	e000      	b.n	800e3d6 <create_name+0xce>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e3da:	e011      	b.n	800e400 <create_name+0xf8>
		w = lfn[di - 1];
 800e3dc:	697a      	ldr	r2, [r7, #20]
 800e3de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e3e2:	4413      	add	r3, r2
 800e3e4:	005b      	lsls	r3, r3, #1
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	881b      	ldrh	r3, [r3, #0]
 800e3ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e3ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3f0:	2b20      	cmp	r3, #32
 800e3f2:	d002      	beq.n	800e3fa <create_name+0xf2>
 800e3f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3f8:	d106      	bne.n	800e408 <create_name+0x100>
		di--;
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1ea      	bne.n	800e3dc <create_name+0xd4>
 800e406:	e000      	b.n	800e40a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e408:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	005b      	lsls	r3, r3, #1
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	4413      	add	r3, r2
 800e412:	2200      	movs	r2, #0
 800e414:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <create_name+0x118>
 800e41c:	2306      	movs	r3, #6
 800e41e:	e127      	b.n	800e670 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	3324      	adds	r3, #36	; 0x24
 800e424:	220b      	movs	r2, #11
 800e426:	2120      	movs	r1, #32
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fe fcdc 	bl	800cde6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e42e:	2300      	movs	r3, #0
 800e430:	61bb      	str	r3, [r7, #24]
 800e432:	e002      	b.n	800e43a <create_name+0x132>
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	3301      	adds	r3, #1
 800e438:	61bb      	str	r3, [r7, #24]
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	005b      	lsls	r3, r3, #1
 800e43e:	68fa      	ldr	r2, [r7, #12]
 800e440:	4413      	add	r3, r2
 800e442:	881b      	ldrh	r3, [r3, #0]
 800e444:	2b20      	cmp	r3, #32
 800e446:	d0f5      	beq.n	800e434 <create_name+0x12c>
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	005b      	lsls	r3, r3, #1
 800e44c:	68fa      	ldr	r2, [r7, #12]
 800e44e:	4413      	add	r3, r2
 800e450:	881b      	ldrh	r3, [r3, #0]
 800e452:	2b2e      	cmp	r3, #46	; 0x2e
 800e454:	d0ee      	beq.n	800e434 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d009      	beq.n	800e470 <create_name+0x168>
 800e45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e460:	f043 0303 	orr.w	r3, r3, #3
 800e464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e468:	e002      	b.n	800e470 <create_name+0x168>
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	3b01      	subs	r3, #1
 800e46e:	617b      	str	r3, [r7, #20]
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d009      	beq.n	800e48a <create_name+0x182>
 800e476:	697a      	ldr	r2, [r7, #20]
 800e478:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e47c:	4413      	add	r3, r2
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	4413      	add	r3, r2
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	2b2e      	cmp	r3, #46	; 0x2e
 800e488:	d1ef      	bne.n	800e46a <create_name+0x162>

	i = b = 0; ni = 8;
 800e48a:	2300      	movs	r3, #0
 800e48c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e490:	2300      	movs	r3, #0
 800e492:	623b      	str	r3, [r7, #32]
 800e494:	2308      	movs	r3, #8
 800e496:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	1c5a      	adds	r2, r3, #1
 800e49c:	61ba      	str	r2, [r7, #24]
 800e49e:	005b      	lsls	r3, r3, #1
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e4a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 8090 	beq.w	800e5d0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e4b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4b2:	2b20      	cmp	r3, #32
 800e4b4:	d006      	beq.n	800e4c4 <create_name+0x1bc>
 800e4b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e4ba:	d10a      	bne.n	800e4d2 <create_name+0x1ca>
 800e4bc:	69ba      	ldr	r2, [r7, #24]
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d006      	beq.n	800e4d2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4c8:	f043 0303 	orr.w	r3, r3, #3
 800e4cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4d0:	e07d      	b.n	800e5ce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e4d2:	6a3a      	ldr	r2, [r7, #32]
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d203      	bcs.n	800e4e2 <create_name+0x1da>
 800e4da:	69ba      	ldr	r2, [r7, #24]
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d123      	bne.n	800e52a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	2b0b      	cmp	r3, #11
 800e4e6:	d106      	bne.n	800e4f6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4ec:	f043 0303 	orr.w	r3, r3, #3
 800e4f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4f4:	e075      	b.n	800e5e2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e4f6:	69ba      	ldr	r2, [r7, #24]
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d005      	beq.n	800e50a <create_name+0x202>
 800e4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e502:	f043 0303 	orr.w	r3, r3, #3
 800e506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e50a:	69ba      	ldr	r2, [r7, #24]
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	429a      	cmp	r2, r3
 800e510:	d866      	bhi.n	800e5e0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	61bb      	str	r3, [r7, #24]
 800e516:	2308      	movs	r3, #8
 800e518:	623b      	str	r3, [r7, #32]
 800e51a:	230b      	movs	r3, #11
 800e51c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e51e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e528:	e051      	b.n	800e5ce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e52a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e52c:	2b7f      	cmp	r3, #127	; 0x7f
 800e52e:	d914      	bls.n	800e55a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e532:	2100      	movs	r1, #0
 800e534:	4618      	mov	r0, r3
 800e536:	f001 f8af 	bl	800f698 <ff_convert>
 800e53a:	4603      	mov	r3, r0
 800e53c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e53e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e540:	2b00      	cmp	r3, #0
 800e542:	d004      	beq.n	800e54e <create_name+0x246>
 800e544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e546:	3b80      	subs	r3, #128	; 0x80
 800e548:	4a23      	ldr	r2, [pc, #140]	; (800e5d8 <create_name+0x2d0>)
 800e54a:	5cd3      	ldrb	r3, [r2, r3]
 800e54c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e54e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e552:	f043 0302 	orr.w	r3, r3, #2
 800e556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d007      	beq.n	800e570 <create_name+0x268>
 800e560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e562:	4619      	mov	r1, r3
 800e564:	481d      	ldr	r0, [pc, #116]	; (800e5dc <create_name+0x2d4>)
 800e566:	f7fe fc80 	bl	800ce6a <chk_chr>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d008      	beq.n	800e582 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e570:	235f      	movs	r3, #95	; 0x5f
 800e572:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e578:	f043 0303 	orr.w	r3, r3, #3
 800e57c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e580:	e01b      	b.n	800e5ba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e584:	2b40      	cmp	r3, #64	; 0x40
 800e586:	d909      	bls.n	800e59c <create_name+0x294>
 800e588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e58a:	2b5a      	cmp	r3, #90	; 0x5a
 800e58c:	d806      	bhi.n	800e59c <create_name+0x294>
					b |= 2;
 800e58e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e592:	f043 0302 	orr.w	r3, r3, #2
 800e596:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e59a:	e00e      	b.n	800e5ba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e59c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e59e:	2b60      	cmp	r3, #96	; 0x60
 800e5a0:	d90b      	bls.n	800e5ba <create_name+0x2b2>
 800e5a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5a4:	2b7a      	cmp	r3, #122	; 0x7a
 800e5a6:	d808      	bhi.n	800e5ba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e5a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5ac:	f043 0301 	orr.w	r3, r3, #1
 800e5b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5b6:	3b20      	subs	r3, #32
 800e5b8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e5ba:	6a3b      	ldr	r3, [r7, #32]
 800e5bc:	1c5a      	adds	r2, r3, #1
 800e5be:	623a      	str	r2, [r7, #32]
 800e5c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5c2:	b2d1      	uxtb	r1, r2
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	460a      	mov	r2, r1
 800e5ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e5ce:	e763      	b.n	800e498 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e5d0:	bf00      	nop
 800e5d2:	e006      	b.n	800e5e2 <create_name+0x2da>
 800e5d4:	080119ac 	.word	0x080119ac
 800e5d8:	08011a70 	.word	0x08011a70
 800e5dc:	080119b8 	.word	0x080119b8
			if (si > di) break;			/* No extension */
 800e5e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5e8:	2be5      	cmp	r3, #229	; 0xe5
 800e5ea:	d103      	bne.n	800e5f4 <create_name+0x2ec>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2205      	movs	r2, #5
 800e5f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	2b08      	cmp	r3, #8
 800e5f8:	d104      	bne.n	800e604 <create_name+0x2fc>
 800e5fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e608:	f003 030c 	and.w	r3, r3, #12
 800e60c:	2b0c      	cmp	r3, #12
 800e60e:	d005      	beq.n	800e61c <create_name+0x314>
 800e610:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e614:	f003 0303 	and.w	r3, r3, #3
 800e618:	2b03      	cmp	r3, #3
 800e61a:	d105      	bne.n	800e628 <create_name+0x320>
 800e61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e620:	f043 0302 	orr.w	r3, r3, #2
 800e624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e62c:	f003 0302 	and.w	r3, r3, #2
 800e630:	2b00      	cmp	r3, #0
 800e632:	d117      	bne.n	800e664 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e634:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e638:	f003 0303 	and.w	r3, r3, #3
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d105      	bne.n	800e64c <create_name+0x344>
 800e640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e644:	f043 0310 	orr.w	r3, r3, #16
 800e648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e64c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e650:	f003 030c 	and.w	r3, r3, #12
 800e654:	2b04      	cmp	r3, #4
 800e656:	d105      	bne.n	800e664 <create_name+0x35c>
 800e658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e65c:	f043 0308 	orr.w	r3, r3, #8
 800e660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e66a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e66e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e670:	4618      	mov	r0, r3
 800e672:	3728      	adds	r7, #40	; 0x28
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e68c:	e002      	b.n	800e694 <follow_path+0x1c>
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	3301      	adds	r3, #1
 800e692:	603b      	str	r3, [r7, #0]
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	2b2f      	cmp	r3, #47	; 0x2f
 800e69a:	d0f8      	beq.n	800e68e <follow_path+0x16>
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	2b5c      	cmp	r3, #92	; 0x5c
 800e6a2:	d0f4      	beq.n	800e68e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	2b1f      	cmp	r3, #31
 800e6b0:	d80a      	bhi.n	800e6c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2280      	movs	r2, #128	; 0x80
 800e6b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7ff f91d 	bl	800d8fc <dir_sdi>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	75fb      	strb	r3, [r7, #23]
 800e6c6:	e043      	b.n	800e750 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e6c8:	463b      	mov	r3, r7
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff fe1b 	bl	800e308 <create_name>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d134      	bne.n	800e746 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7ff fc5a 	bl	800df96 <dir_find>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e6ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00a      	beq.n	800e70a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e6f4:	7dfb      	ldrb	r3, [r7, #23]
 800e6f6:	2b04      	cmp	r3, #4
 800e6f8:	d127      	bne.n	800e74a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e6fa:	7afb      	ldrb	r3, [r7, #11]
 800e6fc:	f003 0304 	and.w	r3, r3, #4
 800e700:	2b00      	cmp	r3, #0
 800e702:	d122      	bne.n	800e74a <follow_path+0xd2>
 800e704:	2305      	movs	r3, #5
 800e706:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e708:	e01f      	b.n	800e74a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e70a:	7afb      	ldrb	r3, [r7, #11]
 800e70c:	f003 0304 	and.w	r3, r3, #4
 800e710:	2b00      	cmp	r3, #0
 800e712:	d11c      	bne.n	800e74e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	799b      	ldrb	r3, [r3, #6]
 800e718:	f003 0310 	and.w	r3, r3, #16
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d102      	bne.n	800e726 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e720:	2305      	movs	r3, #5
 800e722:	75fb      	strb	r3, [r7, #23]
 800e724:	e014      	b.n	800e750 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	695b      	ldr	r3, [r3, #20]
 800e730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e734:	4413      	add	r3, r2
 800e736:	4619      	mov	r1, r3
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f7ff fa66 	bl	800dc0a <ld_clust>
 800e73e:	4602      	mov	r2, r0
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e744:	e7c0      	b.n	800e6c8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e746:	bf00      	nop
 800e748:	e002      	b.n	800e750 <follow_path+0xd8>
				break;
 800e74a:	bf00      	nop
 800e74c:	e000      	b.n	800e750 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e74e:	bf00      	nop
			}
		}
	}

	return res;
 800e750:	7dfb      	ldrb	r3, [r7, #23]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e75a:	b480      	push	{r7}
 800e75c:	b087      	sub	sp, #28
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e766:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d031      	beq.n	800e7d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	617b      	str	r3, [r7, #20]
 800e776:	e002      	b.n	800e77e <get_ldnumber+0x24>
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	3301      	adds	r3, #1
 800e77c:	617b      	str	r3, [r7, #20]
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	2b1f      	cmp	r3, #31
 800e784:	d903      	bls.n	800e78e <get_ldnumber+0x34>
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	2b3a      	cmp	r3, #58	; 0x3a
 800e78c:	d1f4      	bne.n	800e778 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	2b3a      	cmp	r3, #58	; 0x3a
 800e794:	d11c      	bne.n	800e7d0 <get_ldnumber+0x76>
			tp = *path;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	1c5a      	adds	r2, r3, #1
 800e7a0:	60fa      	str	r2, [r7, #12]
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	3b30      	subs	r3, #48	; 0x30
 800e7a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	2b09      	cmp	r3, #9
 800e7ac:	d80e      	bhi.n	800e7cc <get_ldnumber+0x72>
 800e7ae:	68fa      	ldr	r2, [r7, #12]
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d10a      	bne.n	800e7cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d107      	bne.n	800e7cc <get_ldnumber+0x72>
					vol = (int)i;
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	617b      	str	r3, [r7, #20]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	697a      	ldr	r2, [r7, #20]
 800e7ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	e002      	b.n	800e7d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e7d4:	693b      	ldr	r3, [r7, #16]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	371c      	adds	r7, #28
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
	...

0800e7e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	70da      	strb	r2, [r3, #3]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7fa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e7fc:	6839      	ldr	r1, [r7, #0]
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f7fe fcfe 	bl	800d200 <move_window>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d001      	beq.n	800e80e <check_fs+0x2a>
 800e80a:	2304      	movs	r3, #4
 800e80c:	e038      	b.n	800e880 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	3334      	adds	r3, #52	; 0x34
 800e812:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e816:	4618      	mov	r0, r3
 800e818:	f7fe fa42 	bl	800cca0 <ld_word>
 800e81c:	4603      	mov	r3, r0
 800e81e:	461a      	mov	r2, r3
 800e820:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e824:	429a      	cmp	r2, r3
 800e826:	d001      	beq.n	800e82c <check_fs+0x48>
 800e828:	2303      	movs	r3, #3
 800e82a:	e029      	b.n	800e880 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e832:	2be9      	cmp	r3, #233	; 0xe9
 800e834:	d009      	beq.n	800e84a <check_fs+0x66>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e83c:	2beb      	cmp	r3, #235	; 0xeb
 800e83e:	d11e      	bne.n	800e87e <check_fs+0x9a>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e846:	2b90      	cmp	r3, #144	; 0x90
 800e848:	d119      	bne.n	800e87e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	3334      	adds	r3, #52	; 0x34
 800e84e:	3336      	adds	r3, #54	; 0x36
 800e850:	4618      	mov	r0, r3
 800e852:	f7fe fa3d 	bl	800ccd0 <ld_dword>
 800e856:	4603      	mov	r3, r0
 800e858:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e85c:	4a0a      	ldr	r2, [pc, #40]	; (800e888 <check_fs+0xa4>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d101      	bne.n	800e866 <check_fs+0x82>
 800e862:	2300      	movs	r3, #0
 800e864:	e00c      	b.n	800e880 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	3334      	adds	r3, #52	; 0x34
 800e86a:	3352      	adds	r3, #82	; 0x52
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7fe fa2f 	bl	800ccd0 <ld_dword>
 800e872:	4603      	mov	r3, r0
 800e874:	4a05      	ldr	r2, [pc, #20]	; (800e88c <check_fs+0xa8>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d101      	bne.n	800e87e <check_fs+0x9a>
 800e87a:	2300      	movs	r3, #0
 800e87c:	e000      	b.n	800e880 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e87e:	2302      	movs	r3, #2
}
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	00544146 	.word	0x00544146
 800e88c:	33544146 	.word	0x33544146

0800e890 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b096      	sub	sp, #88	; 0x58
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	4613      	mov	r3, r2
 800e89c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e8a4:	68f8      	ldr	r0, [r7, #12]
 800e8a6:	f7ff ff58 	bl	800e75a <get_ldnumber>
 800e8aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	da01      	bge.n	800e8b6 <find_volume+0x26>
 800e8b2:	230b      	movs	r3, #11
 800e8b4:	e230      	b.n	800ed18 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e8b6:	4aa1      	ldr	r2, [pc, #644]	; (800eb3c <find_volume+0x2ac>)
 800e8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d101      	bne.n	800e8ca <find_volume+0x3a>
 800e8c6:	230c      	movs	r3, #12
 800e8c8:	e226      	b.n	800ed18 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e8d0:	79fb      	ldrb	r3, [r7, #7]
 800e8d2:	f023 0301 	bic.w	r3, r3, #1
 800e8d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d01a      	beq.n	800e916 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e2:	785b      	ldrb	r3, [r3, #1]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fe f93d 	bl	800cb64 <disk_status>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e8f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8f4:	f003 0301 	and.w	r3, r3, #1
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d10c      	bne.n	800e916 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e8fc:	79fb      	ldrb	r3, [r7, #7]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d007      	beq.n	800e912 <find_volume+0x82>
 800e902:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e906:	f003 0304 	and.w	r3, r3, #4
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d001      	beq.n	800e912 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e90e:	230a      	movs	r3, #10
 800e910:	e202      	b.n	800ed18 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e912:	2300      	movs	r3, #0
 800e914:	e200      	b.n	800ed18 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e918:	2200      	movs	r2, #0
 800e91a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	785b      	ldrb	r3, [r3, #1]
 800e928:	4618      	mov	r0, r3
 800e92a:	f7fe f935 	bl	800cb98 <disk_initialize>
 800e92e:	4603      	mov	r3, r0
 800e930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e934:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e938:	f003 0301 	and.w	r3, r3, #1
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d001      	beq.n	800e944 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e940:	2303      	movs	r3, #3
 800e942:	e1e9      	b.n	800ed18 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e944:	79fb      	ldrb	r3, [r7, #7]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d007      	beq.n	800e95a <find_volume+0xca>
 800e94a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e94e:	f003 0304 	and.w	r3, r3, #4
 800e952:	2b00      	cmp	r3, #0
 800e954:	d001      	beq.n	800e95a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e956:	230a      	movs	r3, #10
 800e958:	e1de      	b.n	800ed18 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e95a:	2300      	movs	r3, #0
 800e95c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e95e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e960:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e962:	f7ff ff3f 	bl	800e7e4 <check_fs>
 800e966:	4603      	mov	r3, r0
 800e968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e96c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e970:	2b02      	cmp	r3, #2
 800e972:	d149      	bne.n	800ea08 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e974:	2300      	movs	r3, #0
 800e976:	643b      	str	r3, [r7, #64]	; 0x40
 800e978:	e01e      	b.n	800e9b8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e982:	011b      	lsls	r3, r3, #4
 800e984:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e988:	4413      	add	r3, r2
 800e98a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98e:	3304      	adds	r3, #4
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d006      	beq.n	800e9a4 <find_volume+0x114>
 800e996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e998:	3308      	adds	r3, #8
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fe f998 	bl	800ccd0 <ld_dword>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	e000      	b.n	800e9a6 <find_volume+0x116>
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	3358      	adds	r3, #88	; 0x58
 800e9ac:	443b      	add	r3, r7
 800e9ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	643b      	str	r3, [r7, #64]	; 0x40
 800e9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ba:	2b03      	cmp	r3, #3
 800e9bc:	d9dd      	bls.n	800e97a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e9be:	2300      	movs	r3, #0
 800e9c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d002      	beq.n	800e9ce <find_volume+0x13e>
 800e9c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	3358      	adds	r3, #88	; 0x58
 800e9d4:	443b      	add	r3, r7
 800e9d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e9da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d005      	beq.n	800e9ee <find_volume+0x15e>
 800e9e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e9e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9e6:	f7ff fefd 	bl	800e7e4 <check_fs>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	e000      	b.n	800e9f0 <find_volume+0x160>
 800e9ee:	2303      	movs	r3, #3
 800e9f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e9f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d905      	bls.n	800ea08 <find_volume+0x178>
 800e9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9fe:	3301      	adds	r3, #1
 800ea00:	643b      	str	r3, [r7, #64]	; 0x40
 800ea02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea04:	2b03      	cmp	r3, #3
 800ea06:	d9e2      	bls.n	800e9ce <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ea08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea0c:	2b04      	cmp	r3, #4
 800ea0e:	d101      	bne.n	800ea14 <find_volume+0x184>
 800ea10:	2301      	movs	r3, #1
 800ea12:	e181      	b.n	800ed18 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ea14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d901      	bls.n	800ea20 <find_volume+0x190>
 800ea1c:	230d      	movs	r3, #13
 800ea1e:	e17b      	b.n	800ed18 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ea20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea22:	3334      	adds	r3, #52	; 0x34
 800ea24:	330b      	adds	r3, #11
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fe f93a 	bl	800cca0 <ld_word>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea32:	d001      	beq.n	800ea38 <find_volume+0x1a8>
 800ea34:	230d      	movs	r3, #13
 800ea36:	e16f      	b.n	800ed18 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ea38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3a:	3334      	adds	r3, #52	; 0x34
 800ea3c:	3316      	adds	r3, #22
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7fe f92e 	bl	800cca0 <ld_word>
 800ea44:	4603      	mov	r3, r0
 800ea46:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ea48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d106      	bne.n	800ea5c <find_volume+0x1cc>
 800ea4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea50:	3334      	adds	r3, #52	; 0x34
 800ea52:	3324      	adds	r3, #36	; 0x24
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fe f93b 	bl	800ccd0 <ld_dword>
 800ea5a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ea5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea60:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ea62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea64:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ea68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ea6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6e:	789b      	ldrb	r3, [r3, #2]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d005      	beq.n	800ea80 <find_volume+0x1f0>
 800ea74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea76:	789b      	ldrb	r3, [r3, #2]
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d001      	beq.n	800ea80 <find_volume+0x1f0>
 800ea7c:	230d      	movs	r3, #13
 800ea7e:	e14b      	b.n	800ed18 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ea80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea82:	789b      	ldrb	r3, [r3, #2]
 800ea84:	461a      	mov	r2, r3
 800ea86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea88:	fb02 f303 	mul.w	r3, r2, r3
 800ea8c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ea8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ea9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9c:	895b      	ldrh	r3, [r3, #10]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d008      	beq.n	800eab4 <find_volume+0x224>
 800eaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa4:	895b      	ldrh	r3, [r3, #10]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaaa:	895b      	ldrh	r3, [r3, #10]
 800eaac:	3b01      	subs	r3, #1
 800eaae:	4013      	ands	r3, r2
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d001      	beq.n	800eab8 <find_volume+0x228>
 800eab4:	230d      	movs	r3, #13
 800eab6:	e12f      	b.n	800ed18 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaba:	3334      	adds	r3, #52	; 0x34
 800eabc:	3311      	adds	r3, #17
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fe f8ee 	bl	800cca0 <ld_word>
 800eac4:	4603      	mov	r3, r0
 800eac6:	461a      	mov	r2, r3
 800eac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	891b      	ldrh	r3, [r3, #8]
 800ead0:	f003 030f 	and.w	r3, r3, #15
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <find_volume+0x24e>
 800eada:	230d      	movs	r3, #13
 800eadc:	e11c      	b.n	800ed18 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae0:	3334      	adds	r3, #52	; 0x34
 800eae2:	3313      	adds	r3, #19
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7fe f8db 	bl	800cca0 <ld_word>
 800eaea:	4603      	mov	r3, r0
 800eaec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eaee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d106      	bne.n	800eb02 <find_volume+0x272>
 800eaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf6:	3334      	adds	r3, #52	; 0x34
 800eaf8:	3320      	adds	r3, #32
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fe f8e8 	bl	800ccd0 <ld_dword>
 800eb00:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb04:	3334      	adds	r3, #52	; 0x34
 800eb06:	330e      	adds	r3, #14
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fe f8c9 	bl	800cca0 <ld_word>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eb12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d101      	bne.n	800eb1c <find_volume+0x28c>
 800eb18:	230d      	movs	r3, #13
 800eb1a:	e0fd      	b.n	800ed18 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eb1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eb1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb20:	4413      	add	r3, r2
 800eb22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb24:	8912      	ldrh	r2, [r2, #8]
 800eb26:	0912      	lsrs	r2, r2, #4
 800eb28:	b292      	uxth	r2, r2
 800eb2a:	4413      	add	r3, r2
 800eb2c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800eb2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d204      	bcs.n	800eb40 <find_volume+0x2b0>
 800eb36:	230d      	movs	r3, #13
 800eb38:	e0ee      	b.n	800ed18 <find_volume+0x488>
 800eb3a:	bf00      	nop
 800eb3c:	20002870 	.word	0x20002870
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eb40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb48:	8952      	ldrh	r2, [r2, #10]
 800eb4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d101      	bne.n	800eb5a <find_volume+0x2ca>
 800eb56:	230d      	movs	r3, #13
 800eb58:	e0de      	b.n	800ed18 <find_volume+0x488>
		fmt = FS_FAT32;
 800eb5a:	2303      	movs	r3, #3
 800eb5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb62:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d802      	bhi.n	800eb70 <find_volume+0x2e0>
 800eb6a:	2302      	movs	r3, #2
 800eb6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb72:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d802      	bhi.n	800eb80 <find_volume+0x2f0>
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb82:	1c9a      	adds	r2, r3, #2
 800eb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb86:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb8c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eb8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eb90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb92:	441a      	add	r2, r3
 800eb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb96:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eb98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9c:	441a      	add	r2, r3
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800eba2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eba6:	2b03      	cmp	r3, #3
 800eba8:	d11e      	bne.n	800ebe8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebac:	3334      	adds	r3, #52	; 0x34
 800ebae:	332a      	adds	r3, #42	; 0x2a
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fe f875 	bl	800cca0 <ld_word>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d001      	beq.n	800ebc0 <find_volume+0x330>
 800ebbc:	230d      	movs	r3, #13
 800ebbe:	e0ab      	b.n	800ed18 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ebc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc2:	891b      	ldrh	r3, [r3, #8]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d001      	beq.n	800ebcc <find_volume+0x33c>
 800ebc8:	230d      	movs	r3, #13
 800ebca:	e0a5      	b.n	800ed18 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ebcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebce:	3334      	adds	r3, #52	; 0x34
 800ebd0:	332c      	adds	r3, #44	; 0x2c
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe f87c 	bl	800ccd0 <ld_dword>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebdc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ebde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe0:	699b      	ldr	r3, [r3, #24]
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	647b      	str	r3, [r7, #68]	; 0x44
 800ebe6:	e01f      	b.n	800ec28 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ebe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebea:	891b      	ldrh	r3, [r3, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d101      	bne.n	800ebf4 <find_volume+0x364>
 800ebf0:	230d      	movs	r3, #13
 800ebf2:	e091      	b.n	800ed18 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebfa:	441a      	add	r2, r3
 800ebfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ec00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d103      	bne.n	800ec10 <find_volume+0x380>
 800ec08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	005b      	lsls	r3, r3, #1
 800ec0e:	e00a      	b.n	800ec26 <find_volume+0x396>
 800ec10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec12:	699a      	ldr	r2, [r3, #24]
 800ec14:	4613      	mov	r3, r2
 800ec16:	005b      	lsls	r3, r3, #1
 800ec18:	4413      	add	r3, r2
 800ec1a:	085a      	lsrs	r2, r3, #1
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1e:	699b      	ldr	r3, [r3, #24]
 800ec20:	f003 0301 	and.w	r3, r3, #1
 800ec24:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ec26:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	69da      	ldr	r2, [r3, #28]
 800ec2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec2e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ec32:	0a5b      	lsrs	r3, r3, #9
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d201      	bcs.n	800ec3c <find_volume+0x3ac>
 800ec38:	230d      	movs	r3, #13
 800ec3a:	e06d      	b.n	800ed18 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ec3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec42:	615a      	str	r2, [r3, #20]
 800ec44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec46:	695a      	ldr	r2, [r3, #20]
 800ec48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ec4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4e:	2280      	movs	r2, #128	; 0x80
 800ec50:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ec52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec56:	2b03      	cmp	r3, #3
 800ec58:	d149      	bne.n	800ecee <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ec5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5c:	3334      	adds	r3, #52	; 0x34
 800ec5e:	3330      	adds	r3, #48	; 0x30
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe f81d 	bl	800cca0 <ld_word>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d140      	bne.n	800ecee <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ec6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec6e:	3301      	adds	r3, #1
 800ec70:	4619      	mov	r1, r3
 800ec72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec74:	f7fe fac4 	bl	800d200 <move_window>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d137      	bne.n	800ecee <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ec7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec80:	2200      	movs	r2, #0
 800ec82:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ec84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec86:	3334      	adds	r3, #52	; 0x34
 800ec88:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fe f807 	bl	800cca0 <ld_word>
 800ec92:	4603      	mov	r3, r0
 800ec94:	461a      	mov	r2, r3
 800ec96:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d127      	bne.n	800ecee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ec9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca0:	3334      	adds	r3, #52	; 0x34
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe f814 	bl	800ccd0 <ld_dword>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	4a1d      	ldr	r2, [pc, #116]	; (800ed20 <find_volume+0x490>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d11e      	bne.n	800ecee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	3334      	adds	r3, #52	; 0x34
 800ecb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fe f809 	bl	800ccd0 <ld_dword>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4a18      	ldr	r2, [pc, #96]	; (800ed24 <find_volume+0x494>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d113      	bne.n	800ecee <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ecc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc8:	3334      	adds	r3, #52	; 0x34
 800ecca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fd fffe 	bl	800ccd0 <ld_dword>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ecda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecdc:	3334      	adds	r3, #52	; 0x34
 800ecde:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fd fff4 	bl	800ccd0 <ld_dword>
 800ece8:	4602      	mov	r2, r0
 800ecea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecec:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ecee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ecf4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ecf6:	4b0c      	ldr	r3, [pc, #48]	; (800ed28 <find_volume+0x498>)
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	b29a      	uxth	r2, r3
 800ecfe:	4b0a      	ldr	r3, [pc, #40]	; (800ed28 <find_volume+0x498>)
 800ed00:	801a      	strh	r2, [r3, #0]
 800ed02:	4b09      	ldr	r3, [pc, #36]	; (800ed28 <find_volume+0x498>)
 800ed04:	881a      	ldrh	r2, [r3, #0]
 800ed06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed08:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ed0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0c:	4a07      	ldr	r2, [pc, #28]	; (800ed2c <find_volume+0x49c>)
 800ed0e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ed10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed12:	f7fe fa0d 	bl	800d130 <clear_lock>
#endif
	return FR_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3758      	adds	r7, #88	; 0x58
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	41615252 	.word	0x41615252
 800ed24:	61417272 	.word	0x61417272
 800ed28:	20002874 	.word	0x20002874
 800ed2c:	20002898 	.word	0x20002898

0800ed30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ed3a:	2309      	movs	r3, #9
 800ed3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d01c      	beq.n	800ed7e <validate+0x4e>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d018      	beq.n	800ed7e <validate+0x4e>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d013      	beq.n	800ed7e <validate+0x4e>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	889a      	ldrh	r2, [r3, #4]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	88db      	ldrh	r3, [r3, #6]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d10c      	bne.n	800ed7e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	785b      	ldrb	r3, [r3, #1]
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fd fefa 	bl	800cb64 <disk_status>
 800ed70:	4603      	mov	r3, r0
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d101      	bne.n	800ed7e <validate+0x4e>
			res = FR_OK;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ed7e:	7bfb      	ldrb	r3, [r7, #15]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d102      	bne.n	800ed8a <validate+0x5a>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	e000      	b.n	800ed8c <validate+0x5c>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	6013      	str	r3, [r2, #0]
	return res;
 800ed90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
	...

0800ed9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b088      	sub	sp, #32
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	4613      	mov	r3, r2
 800eda8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800edae:	f107 0310 	add.w	r3, r7, #16
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7ff fcd1 	bl	800e75a <get_ldnumber>
 800edb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	da01      	bge.n	800edc4 <f_mount+0x28>
 800edc0:	230b      	movs	r3, #11
 800edc2:	e02b      	b.n	800ee1c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800edc4:	4a17      	ldr	r2, [pc, #92]	; (800ee24 <f_mount+0x88>)
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d005      	beq.n	800ede0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800edd4:	69b8      	ldr	r0, [r7, #24]
 800edd6:	f7fe f9ab 	bl	800d130 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	2200      	movs	r2, #0
 800edde:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d002      	beq.n	800edec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2200      	movs	r2, #0
 800edea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	490d      	ldr	r1, [pc, #52]	; (800ee24 <f_mount+0x88>)
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d002      	beq.n	800ee02 <f_mount+0x66>
 800edfc:	79fb      	ldrb	r3, [r7, #7]
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d001      	beq.n	800ee06 <f_mount+0x6a>
 800ee02:	2300      	movs	r3, #0
 800ee04:	e00a      	b.n	800ee1c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ee06:	f107 010c 	add.w	r1, r7, #12
 800ee0a:	f107 0308 	add.w	r3, r7, #8
 800ee0e:	2200      	movs	r2, #0
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7ff fd3d 	bl	800e890 <find_volume>
 800ee16:	4603      	mov	r3, r0
 800ee18:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ee1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3720      	adds	r7, #32
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	20002870 	.word	0x20002870

0800ee28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b09a      	sub	sp, #104	; 0x68
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	4613      	mov	r3, r2
 800ee34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d101      	bne.n	800ee40 <f_open+0x18>
 800ee3c:	2309      	movs	r3, #9
 800ee3e:	e1ad      	b.n	800f19c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ee40:	79fb      	ldrb	r3, [r7, #7]
 800ee42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ee48:	79fa      	ldrb	r2, [r7, #7]
 800ee4a:	f107 0114 	add.w	r1, r7, #20
 800ee4e:	f107 0308 	add.w	r3, r7, #8
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff fd1c 	bl	800e890 <find_volume>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ee5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f040 8191 	bne.w	800f18a <f_open+0x362>
		dj.obj.fs = fs;
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee6c:	68ba      	ldr	r2, [r7, #8]
 800ee6e:	f107 0318 	add.w	r3, r7, #24
 800ee72:	4611      	mov	r1, r2
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff fbff 	bl	800e678 <follow_path>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ee80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d11a      	bne.n	800eebe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ee8c:	b25b      	sxtb	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	da03      	bge.n	800ee9a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ee92:	2306      	movs	r3, #6
 800ee94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ee98:	e011      	b.n	800eebe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee9a:	79fb      	ldrb	r3, [r7, #7]
 800ee9c:	f023 0301 	bic.w	r3, r3, #1
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	bf14      	ite	ne
 800eea4:	2301      	movne	r3, #1
 800eea6:	2300      	moveq	r3, #0
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	461a      	mov	r2, r3
 800eeac:	f107 0318 	add.w	r3, r7, #24
 800eeb0:	4611      	mov	r1, r2
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fd fff4 	bl	800cea0 <chk_lock>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eebe:	79fb      	ldrb	r3, [r7, #7]
 800eec0:	f003 031c 	and.w	r3, r3, #28
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d07f      	beq.n	800efc8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d017      	beq.n	800ef00 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eed0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eed4:	2b04      	cmp	r3, #4
 800eed6:	d10e      	bne.n	800eef6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eed8:	f7fe f83e 	bl	800cf58 <enq_lock>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d006      	beq.n	800eef0 <f_open+0xc8>
 800eee2:	f107 0318 	add.w	r3, r7, #24
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff f916 	bl	800e118 <dir_register>
 800eeec:	4603      	mov	r3, r0
 800eeee:	e000      	b.n	800eef2 <f_open+0xca>
 800eef0:	2312      	movs	r3, #18
 800eef2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eef6:	79fb      	ldrb	r3, [r7, #7]
 800eef8:	f043 0308 	orr.w	r3, r3, #8
 800eefc:	71fb      	strb	r3, [r7, #7]
 800eefe:	e010      	b.n	800ef22 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ef00:	7fbb      	ldrb	r3, [r7, #30]
 800ef02:	f003 0311 	and.w	r3, r3, #17
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <f_open+0xea>
					res = FR_DENIED;
 800ef0a:	2307      	movs	r3, #7
 800ef0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ef10:	e007      	b.n	800ef22 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ef12:	79fb      	ldrb	r3, [r7, #7]
 800ef14:	f003 0304 	and.w	r3, r3, #4
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d002      	beq.n	800ef22 <f_open+0xfa>
 800ef1c:	2308      	movs	r3, #8
 800ef1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ef22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d168      	bne.n	800effc <f_open+0x1d4>
 800ef2a:	79fb      	ldrb	r3, [r7, #7]
 800ef2c:	f003 0308 	and.w	r3, r3, #8
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d063      	beq.n	800effc <f_open+0x1d4>
				dw = GET_FATTIME();
 800ef34:	f7fb fbe8 	bl	800a708 <get_fattime>
 800ef38:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ef3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3c:	330e      	adds	r3, #14
 800ef3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7fd ff03 	bl	800cd4c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ef46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef48:	3316      	adds	r3, #22
 800ef4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7fd fefd 	bl	800cd4c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ef52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef54:	330b      	adds	r3, #11
 800ef56:	2220      	movs	r2, #32
 800ef58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef5e:	4611      	mov	r1, r2
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fe fe52 	bl	800dc0a <ld_clust>
 800ef66:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fe fe6a 	bl	800dc48 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef76:	331c      	adds	r3, #28
 800ef78:	2100      	movs	r1, #0
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fd fee6 	bl	800cd4c <st_dword>
					fs->wflag = 1;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	2201      	movs	r2, #1
 800ef84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ef86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d037      	beq.n	800effc <f_open+0x1d4>
						dw = fs->winsect;
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef90:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ef92:	f107 0318 	add.w	r3, r7, #24
 800ef96:	2200      	movs	r2, #0
 800ef98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fe fb7d 	bl	800d69a <remove_chain>
 800efa0:	4603      	mov	r3, r0
 800efa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800efa6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d126      	bne.n	800effc <f_open+0x1d4>
							res = move_window(fs, dw);
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fe f924 	bl	800d200 <move_window>
 800efb8:	4603      	mov	r3, r0
 800efba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efc2:	3a01      	subs	r2, #1
 800efc4:	611a      	str	r2, [r3, #16]
 800efc6:	e019      	b.n	800effc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800efc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d115      	bne.n	800effc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800efd0:	7fbb      	ldrb	r3, [r7, #30]
 800efd2:	f003 0310 	and.w	r3, r3, #16
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d003      	beq.n	800efe2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800efda:	2304      	movs	r3, #4
 800efdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800efe0:	e00c      	b.n	800effc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800efe2:	79fb      	ldrb	r3, [r7, #7]
 800efe4:	f003 0302 	and.w	r3, r3, #2
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d007      	beq.n	800effc <f_open+0x1d4>
 800efec:	7fbb      	ldrb	r3, [r7, #30]
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d002      	beq.n	800effc <f_open+0x1d4>
						res = FR_DENIED;
 800eff6:	2307      	movs	r3, #7
 800eff8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800effc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f000:	2b00      	cmp	r3, #0
 800f002:	d128      	bne.n	800f056 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f004:	79fb      	ldrb	r3, [r7, #7]
 800f006:	f003 0308 	and.w	r3, r3, #8
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d003      	beq.n	800f016 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f00e:	79fb      	ldrb	r3, [r7, #7]
 800f010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f014:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	f023 0301 	bic.w	r3, r3, #1
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	bf14      	ite	ne
 800f02e:	2301      	movne	r3, #1
 800f030:	2300      	moveq	r3, #0
 800f032:	b2db      	uxtb	r3, r3
 800f034:	461a      	mov	r2, r3
 800f036:	f107 0318 	add.w	r3, r7, #24
 800f03a:	4611      	mov	r1, r2
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fd ffad 	bl	800cf9c <inc_lock>
 800f042:	4602      	mov	r2, r0
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	691b      	ldr	r3, [r3, #16]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d102      	bne.n	800f056 <f_open+0x22e>
 800f050:	2302      	movs	r3, #2
 800f052:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f056:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f040 8095 	bne.w	800f18a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f064:	4611      	mov	r1, r2
 800f066:	4618      	mov	r0, r3
 800f068:	f7fe fdcf 	bl	800dc0a <ld_clust>
 800f06c:	4602      	mov	r2, r0
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f074:	331c      	adds	r3, #28
 800f076:	4618      	mov	r0, r3
 800f078:	f7fd fe2a 	bl	800ccd0 <ld_dword>
 800f07c:	4602      	mov	r2, r0
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2200      	movs	r2, #0
 800f086:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f088:	697a      	ldr	r2, [r7, #20]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	88da      	ldrh	r2, [r3, #6]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	79fa      	ldrb	r2, [r7, #7]
 800f09a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	3330      	adds	r3, #48	; 0x30
 800f0b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fd fe94 	bl	800cde6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f0be:	79fb      	ldrb	r3, [r7, #7]
 800f0c0:	f003 0320 	and.w	r3, r3, #32
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d060      	beq.n	800f18a <f_open+0x362>
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	68db      	ldr	r3, [r3, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d05c      	beq.n	800f18a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	68da      	ldr	r2, [r3, #12]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	895b      	ldrh	r3, [r3, #10]
 800f0dc:	025b      	lsls	r3, r3, #9
 800f0de:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	689b      	ldr	r3, [r3, #8]
 800f0e4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0ec:	e016      	b.n	800f11c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fe f93f 	bl	800d376 <get_fat>
 800f0f8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f0fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d802      	bhi.n	800f106 <f_open+0x2de>
 800f100:	2302      	movs	r3, #2
 800f102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f10c:	d102      	bne.n	800f114 <f_open+0x2ec>
 800f10e:	2301      	movs	r3, #1
 800f110:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f114:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f11c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f120:	2b00      	cmp	r3, #0
 800f122:	d103      	bne.n	800f12c <f_open+0x304>
 800f124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f128:	429a      	cmp	r2, r3
 800f12a:	d8e0      	bhi.n	800f0ee <f_open+0x2c6>
				}
				fp->clust = clst;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f130:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f136:	2b00      	cmp	r3, #0
 800f138:	d127      	bne.n	800f18a <f_open+0x362>
 800f13a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f140:	2b00      	cmp	r3, #0
 800f142:	d022      	beq.n	800f18a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f148:	4618      	mov	r0, r3
 800f14a:	f7fe f8f5 	bl	800d338 <clust2sect>
 800f14e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f152:	2b00      	cmp	r3, #0
 800f154:	d103      	bne.n	800f15e <f_open+0x336>
						res = FR_INT_ERR;
 800f156:	2302      	movs	r3, #2
 800f158:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f15c:	e015      	b.n	800f18a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f15e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f160:	0a5a      	lsrs	r2, r3, #9
 800f162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f164:	441a      	add	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	7858      	ldrb	r0, [r3, #1]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6a1a      	ldr	r2, [r3, #32]
 800f178:	2301      	movs	r3, #1
 800f17a:	f7fd fd33 	bl	800cbe4 <disk_read>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d002      	beq.n	800f18a <f_open+0x362>
 800f184:	2301      	movs	r3, #1
 800f186:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f18a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d002      	beq.n	800f198 <f_open+0x370>
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2200      	movs	r2, #0
 800f196:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f198:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3768      	adds	r7, #104	; 0x68
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08c      	sub	sp, #48	; 0x30
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f107 0210 	add.w	r2, r7, #16
 800f1c2:	4611      	mov	r1, r2
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7ff fdb3 	bl	800ed30 <validate>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f1d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d107      	bne.n	800f1e8 <f_write+0x44>
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	7d5b      	ldrb	r3, [r3, #21]
 800f1dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f1e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d002      	beq.n	800f1ee <f_write+0x4a>
 800f1e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1ec:	e14b      	b.n	800f486 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	7d1b      	ldrb	r3, [r3, #20]
 800f1f2:	f003 0302 	and.w	r3, r3, #2
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d101      	bne.n	800f1fe <f_write+0x5a>
 800f1fa:	2307      	movs	r3, #7
 800f1fc:	e143      	b.n	800f486 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	699a      	ldr	r2, [r3, #24]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	441a      	add	r2, r3
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	699b      	ldr	r3, [r3, #24]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	f080 812d 	bcs.w	800f46a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	43db      	mvns	r3, r3
 800f216:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f218:	e127      	b.n	800f46a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	699b      	ldr	r3, [r3, #24]
 800f21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f222:	2b00      	cmp	r3, #0
 800f224:	f040 80e3 	bne.w	800f3ee <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	699b      	ldr	r3, [r3, #24]
 800f22c:	0a5b      	lsrs	r3, r3, #9
 800f22e:	693a      	ldr	r2, [r7, #16]
 800f230:	8952      	ldrh	r2, [r2, #10]
 800f232:	3a01      	subs	r2, #1
 800f234:	4013      	ands	r3, r2
 800f236:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d143      	bne.n	800f2c6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	699b      	ldr	r3, [r3, #24]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10c      	bne.n	800f260 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d11a      	bne.n	800f288 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2100      	movs	r1, #0
 800f256:	4618      	mov	r0, r3
 800f258:	f7fe fa84 	bl	800d764 <create_chain>
 800f25c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f25e:	e013      	b.n	800f288 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f264:	2b00      	cmp	r3, #0
 800f266:	d007      	beq.n	800f278 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	699b      	ldr	r3, [r3, #24]
 800f26c:	4619      	mov	r1, r3
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f7fe fb10 	bl	800d894 <clmt_clust>
 800f274:	62b8      	str	r0, [r7, #40]	; 0x28
 800f276:	e007      	b.n	800f288 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	69db      	ldr	r3, [r3, #28]
 800f27e:	4619      	mov	r1, r3
 800f280:	4610      	mov	r0, r2
 800f282:	f7fe fa6f 	bl	800d764 <create_chain>
 800f286:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f000 80f2 	beq.w	800f474 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f292:	2b01      	cmp	r3, #1
 800f294:	d104      	bne.n	800f2a0 <f_write+0xfc>
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2202      	movs	r2, #2
 800f29a:	755a      	strb	r2, [r3, #21]
 800f29c:	2302      	movs	r3, #2
 800f29e:	e0f2      	b.n	800f486 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2a6:	d104      	bne.n	800f2b2 <f_write+0x10e>
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	755a      	strb	r2, [r3, #21]
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e0e9      	b.n	800f486 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2b6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d102      	bne.n	800f2c6 <f_write+0x122>
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2c4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ca:	b25b      	sxtb	r3, r3
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	da18      	bge.n	800f302 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	7858      	ldrb	r0, [r3, #1]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	6a1a      	ldr	r2, [r3, #32]
 800f2de:	2301      	movs	r3, #1
 800f2e0:	f7fd fca0 	bl	800cc24 <disk_write>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d004      	beq.n	800f2f4 <f_write+0x150>
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	755a      	strb	r2, [r3, #21]
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e0c8      	b.n	800f486 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	7d1b      	ldrb	r3, [r3, #20]
 800f2f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2fc:	b2da      	uxtb	r2, r3
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f302:	693a      	ldr	r2, [r7, #16]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	69db      	ldr	r3, [r3, #28]
 800f308:	4619      	mov	r1, r3
 800f30a:	4610      	mov	r0, r2
 800f30c:	f7fe f814 	bl	800d338 <clust2sect>
 800f310:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d104      	bne.n	800f322 <f_write+0x17e>
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2202      	movs	r2, #2
 800f31c:	755a      	strb	r2, [r3, #21]
 800f31e:	2302      	movs	r3, #2
 800f320:	e0b1      	b.n	800f486 <f_write+0x2e2>
			sect += csect;
 800f322:	697a      	ldr	r2, [r7, #20]
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	4413      	add	r3, r2
 800f328:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	0a5b      	lsrs	r3, r3, #9
 800f32e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f330:	6a3b      	ldr	r3, [r7, #32]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d03c      	beq.n	800f3b0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f336:	69ba      	ldr	r2, [r7, #24]
 800f338:	6a3b      	ldr	r3, [r7, #32]
 800f33a:	4413      	add	r3, r2
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	8952      	ldrh	r2, [r2, #10]
 800f340:	4293      	cmp	r3, r2
 800f342:	d905      	bls.n	800f350 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	895b      	ldrh	r3, [r3, #10]
 800f348:	461a      	mov	r2, r3
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	1ad3      	subs	r3, r2, r3
 800f34e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	7858      	ldrb	r0, [r3, #1]
 800f354:	6a3b      	ldr	r3, [r7, #32]
 800f356:	697a      	ldr	r2, [r7, #20]
 800f358:	69f9      	ldr	r1, [r7, #28]
 800f35a:	f7fd fc63 	bl	800cc24 <disk_write>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d004      	beq.n	800f36e <f_write+0x1ca>
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2201      	movs	r2, #1
 800f368:	755a      	strb	r2, [r3, #21]
 800f36a:	2301      	movs	r3, #1
 800f36c:	e08b      	b.n	800f486 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6a1a      	ldr	r2, [r3, #32]
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	1ad3      	subs	r3, r2, r3
 800f376:	6a3a      	ldr	r2, [r7, #32]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d915      	bls.n	800f3a8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6a1a      	ldr	r2, [r3, #32]
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	1ad3      	subs	r3, r2, r3
 800f38a:	025b      	lsls	r3, r3, #9
 800f38c:	69fa      	ldr	r2, [r7, #28]
 800f38e:	4413      	add	r3, r2
 800f390:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f394:	4619      	mov	r1, r3
 800f396:	f7fd fd05 	bl	800cda4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	7d1b      	ldrb	r3, [r3, #20]
 800f39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f3a8:	6a3b      	ldr	r3, [r7, #32]
 800f3aa:	025b      	lsls	r3, r3, #9
 800f3ac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f3ae:	e03f      	b.n	800f430 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6a1b      	ldr	r3, [r3, #32]
 800f3b4:	697a      	ldr	r2, [r7, #20]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d016      	beq.n	800f3e8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	699a      	ldr	r2, [r3, #24]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d210      	bcs.n	800f3e8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	7858      	ldrb	r0, [r3, #1]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	697a      	ldr	r2, [r7, #20]
 800f3d4:	f7fd fc06 	bl	800cbe4 <disk_read>
 800f3d8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d004      	beq.n	800f3e8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	755a      	strb	r2, [r3, #21]
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e04e      	b.n	800f486 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	697a      	ldr	r2, [r7, #20]
 800f3ec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	699b      	ldr	r3, [r3, #24]
 800f3f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3f6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f3fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	429a      	cmp	r2, r3
 800f402:	d901      	bls.n	800f408 <f_write+0x264>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	699b      	ldr	r3, [r3, #24]
 800f412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f416:	4413      	add	r3, r2
 800f418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f41a:	69f9      	ldr	r1, [r7, #28]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fd fcc1 	bl	800cda4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	7d1b      	ldrb	r3, [r3, #20]
 800f426:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f42a:	b2da      	uxtb	r2, r3
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f430:	69fa      	ldr	r2, [r7, #28]
 800f432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f434:	4413      	add	r3, r2
 800f436:	61fb      	str	r3, [r7, #28]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	699a      	ldr	r2, [r3, #24]
 800f43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43e:	441a      	add	r2, r3
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	619a      	str	r2, [r3, #24]
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	68da      	ldr	r2, [r3, #12]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	699b      	ldr	r3, [r3, #24]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	bf38      	it	cc
 800f450:	461a      	movcc	r2, r3
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	60da      	str	r2, [r3, #12]
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45c:	441a      	add	r2, r3
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	601a      	str	r2, [r3, #0]
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f466:	1ad3      	subs	r3, r2, r3
 800f468:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f47f aed4 	bne.w	800f21a <f_write+0x76>
 800f472:	e000      	b.n	800f476 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f474:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	7d1b      	ldrb	r3, [r3, #20]
 800f47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f47e:	b2da      	uxtb	r2, r3
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3730      	adds	r7, #48	; 0x30
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b086      	sub	sp, #24
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f107 0208 	add.w	r2, r7, #8
 800f49c:	4611      	mov	r1, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7ff fc46 	bl	800ed30 <validate>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f4a8:	7dfb      	ldrb	r3, [r7, #23]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d168      	bne.n	800f580 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	7d1b      	ldrb	r3, [r3, #20]
 800f4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d062      	beq.n	800f580 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	7d1b      	ldrb	r3, [r3, #20]
 800f4be:	b25b      	sxtb	r3, r3
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	da15      	bge.n	800f4f0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	7858      	ldrb	r0, [r3, #1]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6a1a      	ldr	r2, [r3, #32]
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	f7fd fba6 	bl	800cc24 <disk_write>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d001      	beq.n	800f4e2 <f_sync+0x54>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e04f      	b.n	800f582 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	7d1b      	ldrb	r3, [r3, #20]
 800f4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4ea:	b2da      	uxtb	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f4f0:	f7fb f90a 	bl	800a708 <get_fattime>
 800f4f4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f4f6:	68ba      	ldr	r2, [r7, #8]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	4610      	mov	r0, r2
 800f500:	f7fd fe7e 	bl	800d200 <move_window>
 800f504:	4603      	mov	r3, r0
 800f506:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f508:	7dfb      	ldrb	r3, [r7, #23]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d138      	bne.n	800f580 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f512:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	330b      	adds	r3, #11
 800f518:	781a      	ldrb	r2, [r3, #0]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	330b      	adds	r3, #11
 800f51e:	f042 0220 	orr.w	r2, r2, #32
 800f522:	b2d2      	uxtb	r2, r2
 800f524:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6818      	ldr	r0, [r3, #0]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	689b      	ldr	r3, [r3, #8]
 800f52e:	461a      	mov	r2, r3
 800f530:	68f9      	ldr	r1, [r7, #12]
 800f532:	f7fe fb89 	bl	800dc48 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f103 021c 	add.w	r2, r3, #28
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	4619      	mov	r1, r3
 800f542:	4610      	mov	r0, r2
 800f544:	f7fd fc02 	bl	800cd4c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	3316      	adds	r3, #22
 800f54c:	6939      	ldr	r1, [r7, #16]
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fd fbfc 	bl	800cd4c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	3312      	adds	r3, #18
 800f558:	2100      	movs	r1, #0
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fd fbdb 	bl	800cd16 <st_word>
					fs->wflag = 1;
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	2201      	movs	r2, #1
 800f564:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fd fe77 	bl	800d25c <sync_fs>
 800f56e:	4603      	mov	r3, r0
 800f570:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	7d1b      	ldrb	r3, [r3, #20]
 800f576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f580:	7dfb      	ldrb	r3, [r7, #23]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3718      	adds	r7, #24
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b084      	sub	sp, #16
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7ff ff7b 	bl	800f48e <f_sync>
 800f598:	4603      	mov	r3, r0
 800f59a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d118      	bne.n	800f5d4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f107 0208 	add.w	r2, r7, #8
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7ff fbc0 	bl	800ed30 <validate>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f5b4:	7bfb      	ldrb	r3, [r7, #15]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d10c      	bne.n	800f5d4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	691b      	ldr	r3, [r3, #16]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fd fd7a 	bl	800d0b8 <dec_lock>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f5c8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d102      	bne.n	800f5d4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
	...

0800f5e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f5f6:	4b1f      	ldr	r3, [pc, #124]	; (800f674 <FATFS_LinkDriverEx+0x94>)
 800f5f8:	7a5b      	ldrb	r3, [r3, #9]
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d131      	bne.n	800f664 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f600:	4b1c      	ldr	r3, [pc, #112]	; (800f674 <FATFS_LinkDriverEx+0x94>)
 800f602:	7a5b      	ldrb	r3, [r3, #9]
 800f604:	b2db      	uxtb	r3, r3
 800f606:	461a      	mov	r2, r3
 800f608:	4b1a      	ldr	r3, [pc, #104]	; (800f674 <FATFS_LinkDriverEx+0x94>)
 800f60a:	2100      	movs	r1, #0
 800f60c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f60e:	4b19      	ldr	r3, [pc, #100]	; (800f674 <FATFS_LinkDriverEx+0x94>)
 800f610:	7a5b      	ldrb	r3, [r3, #9]
 800f612:	b2db      	uxtb	r3, r3
 800f614:	4a17      	ldr	r2, [pc, #92]	; (800f674 <FATFS_LinkDriverEx+0x94>)
 800f616:	009b      	lsls	r3, r3, #2
 800f618:	4413      	add	r3, r2
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f61e:	4b15      	ldr	r3, [pc, #84]	; (800f674 <FATFS_LinkDriverEx+0x94>)
 800f620:	7a5b      	ldrb	r3, [r3, #9]
 800f622:	b2db      	uxtb	r3, r3
 800f624:	461a      	mov	r2, r3
 800f626:	4b13      	ldr	r3, [pc, #76]	; (800f674 <FATFS_LinkDriverEx+0x94>)
 800f628:	4413      	add	r3, r2
 800f62a:	79fa      	ldrb	r2, [r7, #7]
 800f62c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f62e:	4b11      	ldr	r3, [pc, #68]	; (800f674 <FATFS_LinkDriverEx+0x94>)
 800f630:	7a5b      	ldrb	r3, [r3, #9]
 800f632:	b2db      	uxtb	r3, r3
 800f634:	1c5a      	adds	r2, r3, #1
 800f636:	b2d1      	uxtb	r1, r2
 800f638:	4a0e      	ldr	r2, [pc, #56]	; (800f674 <FATFS_LinkDriverEx+0x94>)
 800f63a:	7251      	strb	r1, [r2, #9]
 800f63c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f63e:	7dbb      	ldrb	r3, [r7, #22]
 800f640:	3330      	adds	r3, #48	; 0x30
 800f642:	b2da      	uxtb	r2, r3
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	3301      	adds	r3, #1
 800f64c:	223a      	movs	r2, #58	; 0x3a
 800f64e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	3302      	adds	r3, #2
 800f654:	222f      	movs	r2, #47	; 0x2f
 800f656:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	3303      	adds	r3, #3
 800f65c:	2200      	movs	r2, #0
 800f65e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f660:	2300      	movs	r3, #0
 800f662:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f664:	7dfb      	ldrb	r3, [r7, #23]
}
 800f666:	4618      	mov	r0, r3
 800f668:	371c      	adds	r7, #28
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	20002a98 	.word	0x20002a98

0800f678 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f682:	2200      	movs	r2, #0
 800f684:	6839      	ldr	r1, [r7, #0]
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f7ff ffaa 	bl	800f5e0 <FATFS_LinkDriverEx>
 800f68c:	4603      	mov	r3, r0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3708      	adds	r7, #8
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
	...

0800f698 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	4603      	mov	r3, r0
 800f6a0:	6039      	str	r1, [r7, #0]
 800f6a2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f6a4:	88fb      	ldrh	r3, [r7, #6]
 800f6a6:	2b7f      	cmp	r3, #127	; 0x7f
 800f6a8:	d802      	bhi.n	800f6b0 <ff_convert+0x18>
		c = chr;
 800f6aa:	88fb      	ldrh	r3, [r7, #6]
 800f6ac:	81fb      	strh	r3, [r7, #14]
 800f6ae:	e025      	b.n	800f6fc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d00b      	beq.n	800f6ce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f6b6:	88fb      	ldrh	r3, [r7, #6]
 800f6b8:	2bff      	cmp	r3, #255	; 0xff
 800f6ba:	d805      	bhi.n	800f6c8 <ff_convert+0x30>
 800f6bc:	88fb      	ldrh	r3, [r7, #6]
 800f6be:	3b80      	subs	r3, #128	; 0x80
 800f6c0:	4a12      	ldr	r2, [pc, #72]	; (800f70c <ff_convert+0x74>)
 800f6c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6c6:	e000      	b.n	800f6ca <ff_convert+0x32>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	81fb      	strh	r3, [r7, #14]
 800f6cc:	e016      	b.n	800f6fc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	81fb      	strh	r3, [r7, #14]
 800f6d2:	e009      	b.n	800f6e8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f6d4:	89fb      	ldrh	r3, [r7, #14]
 800f6d6:	4a0d      	ldr	r2, [pc, #52]	; (800f70c <ff_convert+0x74>)
 800f6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6dc:	88fa      	ldrh	r2, [r7, #6]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d006      	beq.n	800f6f0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f6e2:	89fb      	ldrh	r3, [r7, #14]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	81fb      	strh	r3, [r7, #14]
 800f6e8:	89fb      	ldrh	r3, [r7, #14]
 800f6ea:	2b7f      	cmp	r3, #127	; 0x7f
 800f6ec:	d9f2      	bls.n	800f6d4 <ff_convert+0x3c>
 800f6ee:	e000      	b.n	800f6f2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f6f0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f6f2:	89fb      	ldrh	r3, [r7, #14]
 800f6f4:	3380      	adds	r3, #128	; 0x80
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f6fc:	89fb      	ldrh	r3, [r7, #14]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3714      	adds	r7, #20
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	08011b00 	.word	0x08011b00

0800f710 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f710:	b480      	push	{r7}
 800f712:	b087      	sub	sp, #28
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f71a:	88fb      	ldrh	r3, [r7, #6]
 800f71c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f720:	d201      	bcs.n	800f726 <ff_wtoupper+0x16>
 800f722:	4b3e      	ldr	r3, [pc, #248]	; (800f81c <ff_wtoupper+0x10c>)
 800f724:	e000      	b.n	800f728 <ff_wtoupper+0x18>
 800f726:	4b3e      	ldr	r3, [pc, #248]	; (800f820 <ff_wtoupper+0x110>)
 800f728:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	1c9a      	adds	r2, r3, #2
 800f72e:	617a      	str	r2, [r7, #20]
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f734:	8a7b      	ldrh	r3, [r7, #18]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d068      	beq.n	800f80c <ff_wtoupper+0xfc>
 800f73a:	88fa      	ldrh	r2, [r7, #6]
 800f73c:	8a7b      	ldrh	r3, [r7, #18]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d364      	bcc.n	800f80c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	1c9a      	adds	r2, r3, #2
 800f746:	617a      	str	r2, [r7, #20]
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	823b      	strh	r3, [r7, #16]
 800f74c:	8a3b      	ldrh	r3, [r7, #16]
 800f74e:	0a1b      	lsrs	r3, r3, #8
 800f750:	81fb      	strh	r3, [r7, #14]
 800f752:	8a3b      	ldrh	r3, [r7, #16]
 800f754:	b2db      	uxtb	r3, r3
 800f756:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f758:	88fa      	ldrh	r2, [r7, #6]
 800f75a:	8a79      	ldrh	r1, [r7, #18]
 800f75c:	8a3b      	ldrh	r3, [r7, #16]
 800f75e:	440b      	add	r3, r1
 800f760:	429a      	cmp	r2, r3
 800f762:	da49      	bge.n	800f7f8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f764:	89fb      	ldrh	r3, [r7, #14]
 800f766:	2b08      	cmp	r3, #8
 800f768:	d84f      	bhi.n	800f80a <ff_wtoupper+0xfa>
 800f76a:	a201      	add	r2, pc, #4	; (adr r2, 800f770 <ff_wtoupper+0x60>)
 800f76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f770:	0800f795 	.word	0x0800f795
 800f774:	0800f7a7 	.word	0x0800f7a7
 800f778:	0800f7bd 	.word	0x0800f7bd
 800f77c:	0800f7c5 	.word	0x0800f7c5
 800f780:	0800f7cd 	.word	0x0800f7cd
 800f784:	0800f7d5 	.word	0x0800f7d5
 800f788:	0800f7dd 	.word	0x0800f7dd
 800f78c:	0800f7e5 	.word	0x0800f7e5
 800f790:	0800f7ed 	.word	0x0800f7ed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f794:	88fa      	ldrh	r2, [r7, #6]
 800f796:	8a7b      	ldrh	r3, [r7, #18]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	005b      	lsls	r3, r3, #1
 800f79c:	697a      	ldr	r2, [r7, #20]
 800f79e:	4413      	add	r3, r2
 800f7a0:	881b      	ldrh	r3, [r3, #0]
 800f7a2:	80fb      	strh	r3, [r7, #6]
 800f7a4:	e027      	b.n	800f7f6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f7a6:	88fa      	ldrh	r2, [r7, #6]
 800f7a8:	8a7b      	ldrh	r3, [r7, #18]
 800f7aa:	1ad3      	subs	r3, r2, r3
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	f003 0301 	and.w	r3, r3, #1
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	88fa      	ldrh	r2, [r7, #6]
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	80fb      	strh	r3, [r7, #6]
 800f7ba:	e01c      	b.n	800f7f6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f7bc:	88fb      	ldrh	r3, [r7, #6]
 800f7be:	3b10      	subs	r3, #16
 800f7c0:	80fb      	strh	r3, [r7, #6]
 800f7c2:	e018      	b.n	800f7f6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f7c4:	88fb      	ldrh	r3, [r7, #6]
 800f7c6:	3b20      	subs	r3, #32
 800f7c8:	80fb      	strh	r3, [r7, #6]
 800f7ca:	e014      	b.n	800f7f6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f7cc:	88fb      	ldrh	r3, [r7, #6]
 800f7ce:	3b30      	subs	r3, #48	; 0x30
 800f7d0:	80fb      	strh	r3, [r7, #6]
 800f7d2:	e010      	b.n	800f7f6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f7d4:	88fb      	ldrh	r3, [r7, #6]
 800f7d6:	3b1a      	subs	r3, #26
 800f7d8:	80fb      	strh	r3, [r7, #6]
 800f7da:	e00c      	b.n	800f7f6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f7dc:	88fb      	ldrh	r3, [r7, #6]
 800f7de:	3308      	adds	r3, #8
 800f7e0:	80fb      	strh	r3, [r7, #6]
 800f7e2:	e008      	b.n	800f7f6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f7e4:	88fb      	ldrh	r3, [r7, #6]
 800f7e6:	3b50      	subs	r3, #80	; 0x50
 800f7e8:	80fb      	strh	r3, [r7, #6]
 800f7ea:	e004      	b.n	800f7f6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f7ec:	88fb      	ldrh	r3, [r7, #6]
 800f7ee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f7f2:	80fb      	strh	r3, [r7, #6]
 800f7f4:	bf00      	nop
			}
			break;
 800f7f6:	e008      	b.n	800f80a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f7f8:	89fb      	ldrh	r3, [r7, #14]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d195      	bne.n	800f72a <ff_wtoupper+0x1a>
 800f7fe:	8a3b      	ldrh	r3, [r7, #16]
 800f800:	005b      	lsls	r3, r3, #1
 800f802:	697a      	ldr	r2, [r7, #20]
 800f804:	4413      	add	r3, r2
 800f806:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f808:	e78f      	b.n	800f72a <ff_wtoupper+0x1a>
			break;
 800f80a:	bf00      	nop
	}

	return chr;
 800f80c:	88fb      	ldrh	r3, [r7, #6]
}
 800f80e:	4618      	mov	r0, r3
 800f810:	371c      	adds	r7, #28
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	08011c00 	.word	0x08011c00
 800f820:	08011df4 	.word	0x08011df4

0800f824 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f828:	2200      	movs	r2, #0
 800f82a:	4912      	ldr	r1, [pc, #72]	; (800f874 <MX_USB_DEVICE_Init+0x50>)
 800f82c:	4812      	ldr	r0, [pc, #72]	; (800f878 <MX_USB_DEVICE_Init+0x54>)
 800f82e:	f7fb fe7d 	bl	800b52c <USBD_Init>
 800f832:	4603      	mov	r3, r0
 800f834:	2b00      	cmp	r3, #0
 800f836:	d001      	beq.n	800f83c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f838:	f7f1 fcb6 	bl	80011a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f83c:	490f      	ldr	r1, [pc, #60]	; (800f87c <MX_USB_DEVICE_Init+0x58>)
 800f83e:	480e      	ldr	r0, [pc, #56]	; (800f878 <MX_USB_DEVICE_Init+0x54>)
 800f840:	f7fb fea4 	bl	800b58c <USBD_RegisterClass>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d001      	beq.n	800f84e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f84a:	f7f1 fcad 	bl	80011a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f84e:	490c      	ldr	r1, [pc, #48]	; (800f880 <MX_USB_DEVICE_Init+0x5c>)
 800f850:	4809      	ldr	r0, [pc, #36]	; (800f878 <MX_USB_DEVICE_Init+0x54>)
 800f852:	f7fb fd9b 	bl	800b38c <USBD_CDC_RegisterInterface>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d001      	beq.n	800f860 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f85c:	f7f1 fca4 	bl	80011a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f860:	4805      	ldr	r0, [pc, #20]	; (800f878 <MX_USB_DEVICE_Init+0x54>)
 800f862:	f7fb fec9 	bl	800b5f8 <USBD_Start>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f86c:	f7f1 fc9c 	bl	80011a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f870:	bf00      	nop
 800f872:	bd80      	pop	{r7, pc}
 800f874:	200000ac 	.word	0x200000ac
 800f878:	20002aa4 	.word	0x20002aa4
 800f87c:	20000018 	.word	0x20000018
 800f880:	20000098 	.word	0x20000098

0800f884 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f888:	2200      	movs	r2, #0
 800f88a:	4905      	ldr	r1, [pc, #20]	; (800f8a0 <CDC_Init_FS+0x1c>)
 800f88c:	4805      	ldr	r0, [pc, #20]	; (800f8a4 <CDC_Init_FS+0x20>)
 800f88e:	f7fb fd97 	bl	800b3c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f892:	4905      	ldr	r1, [pc, #20]	; (800f8a8 <CDC_Init_FS+0x24>)
 800f894:	4803      	ldr	r0, [pc, #12]	; (800f8a4 <CDC_Init_FS+0x20>)
 800f896:	f7fb fdb5 	bl	800b404 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f89a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	20003580 	.word	0x20003580
 800f8a4:	20002aa4 	.word	0x20002aa4
 800f8a8:	20002d80 	.word	0x20002d80

0800f8ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f8b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr

0800f8bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	6039      	str	r1, [r7, #0]
 800f8c6:	71fb      	strb	r3, [r7, #7]
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f8cc:	79fb      	ldrb	r3, [r7, #7]
 800f8ce:	2b23      	cmp	r3, #35	; 0x23
 800f8d0:	d84a      	bhi.n	800f968 <CDC_Control_FS+0xac>
 800f8d2:	a201      	add	r2, pc, #4	; (adr r2, 800f8d8 <CDC_Control_FS+0x1c>)
 800f8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d8:	0800f969 	.word	0x0800f969
 800f8dc:	0800f969 	.word	0x0800f969
 800f8e0:	0800f969 	.word	0x0800f969
 800f8e4:	0800f969 	.word	0x0800f969
 800f8e8:	0800f969 	.word	0x0800f969
 800f8ec:	0800f969 	.word	0x0800f969
 800f8f0:	0800f969 	.word	0x0800f969
 800f8f4:	0800f969 	.word	0x0800f969
 800f8f8:	0800f969 	.word	0x0800f969
 800f8fc:	0800f969 	.word	0x0800f969
 800f900:	0800f969 	.word	0x0800f969
 800f904:	0800f969 	.word	0x0800f969
 800f908:	0800f969 	.word	0x0800f969
 800f90c:	0800f969 	.word	0x0800f969
 800f910:	0800f969 	.word	0x0800f969
 800f914:	0800f969 	.word	0x0800f969
 800f918:	0800f969 	.word	0x0800f969
 800f91c:	0800f969 	.word	0x0800f969
 800f920:	0800f969 	.word	0x0800f969
 800f924:	0800f969 	.word	0x0800f969
 800f928:	0800f969 	.word	0x0800f969
 800f92c:	0800f969 	.word	0x0800f969
 800f930:	0800f969 	.word	0x0800f969
 800f934:	0800f969 	.word	0x0800f969
 800f938:	0800f969 	.word	0x0800f969
 800f93c:	0800f969 	.word	0x0800f969
 800f940:	0800f969 	.word	0x0800f969
 800f944:	0800f969 	.word	0x0800f969
 800f948:	0800f969 	.word	0x0800f969
 800f94c:	0800f969 	.word	0x0800f969
 800f950:	0800f969 	.word	0x0800f969
 800f954:	0800f969 	.word	0x0800f969
 800f958:	0800f969 	.word	0x0800f969
 800f95c:	0800f969 	.word	0x0800f969
 800f960:	0800f969 	.word	0x0800f969
 800f964:	0800f969 	.word	0x0800f969
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f968:	bf00      	nop
  }

  return (USBD_OK);
 800f96a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr

0800f978 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f982:	6879      	ldr	r1, [r7, #4]
 800f984:	4805      	ldr	r0, [pc, #20]	; (800f99c <CDC_Receive_FS+0x24>)
 800f986:	f7fb fd3d 	bl	800b404 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f98a:	4804      	ldr	r0, [pc, #16]	; (800f99c <CDC_Receive_FS+0x24>)
 800f98c:	f7fb fd98 	bl	800b4c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f990:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f992:	4618      	mov	r0, r3
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	20002aa4 	.word	0x20002aa4

0800f9a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f9b0:	4b0d      	ldr	r3, [pc, #52]	; (800f9e8 <CDC_Transmit_FS+0x48>)
 800f9b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d001      	beq.n	800f9c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	e00b      	b.n	800f9de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f9c6:	887b      	ldrh	r3, [r7, #2]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	6879      	ldr	r1, [r7, #4]
 800f9cc:	4806      	ldr	r0, [pc, #24]	; (800f9e8 <CDC_Transmit_FS+0x48>)
 800f9ce:	f7fb fcf7 	bl	800b3c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f9d2:	4805      	ldr	r0, [pc, #20]	; (800f9e8 <CDC_Transmit_FS+0x48>)
 800f9d4:	f7fb fd34 	bl	800b440 <USBD_CDC_TransmitPacket>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	20002aa4 	.word	0x20002aa4

0800f9ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b087      	sub	sp, #28
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f9fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	371c      	adds	r7, #28
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr
	...

0800fa10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	4603      	mov	r3, r0
 800fa18:	6039      	str	r1, [r7, #0]
 800fa1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	2212      	movs	r2, #18
 800fa20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa22:	4b03      	ldr	r3, [pc, #12]	; (800fa30 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr
 800fa30:	200000cc 	.word	0x200000cc

0800fa34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	6039      	str	r1, [r7, #0]
 800fa3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	2204      	movs	r2, #4
 800fa44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa46:	4b03      	ldr	r3, [pc, #12]	; (800fa54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr
 800fa54:	200000ec 	.word	0x200000ec

0800fa58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	4603      	mov	r3, r0
 800fa60:	6039      	str	r1, [r7, #0]
 800fa62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa64:	79fb      	ldrb	r3, [r7, #7]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d105      	bne.n	800fa76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa6a:	683a      	ldr	r2, [r7, #0]
 800fa6c:	4907      	ldr	r1, [pc, #28]	; (800fa8c <USBD_FS_ProductStrDescriptor+0x34>)
 800fa6e:	4808      	ldr	r0, [pc, #32]	; (800fa90 <USBD_FS_ProductStrDescriptor+0x38>)
 800fa70:	f7fc ff98 	bl	800c9a4 <USBD_GetString>
 800fa74:	e004      	b.n	800fa80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa76:	683a      	ldr	r2, [r7, #0]
 800fa78:	4904      	ldr	r1, [pc, #16]	; (800fa8c <USBD_FS_ProductStrDescriptor+0x34>)
 800fa7a:	4805      	ldr	r0, [pc, #20]	; (800fa90 <USBD_FS_ProductStrDescriptor+0x38>)
 800fa7c:	f7fc ff92 	bl	800c9a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa80:	4b02      	ldr	r3, [pc, #8]	; (800fa8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3708      	adds	r7, #8
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	20003d80 	.word	0x20003d80
 800fa90:	080119f4 	.word	0x080119f4

0800fa94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	6039      	str	r1, [r7, #0]
 800fa9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800faa0:	683a      	ldr	r2, [r7, #0]
 800faa2:	4904      	ldr	r1, [pc, #16]	; (800fab4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800faa4:	4804      	ldr	r0, [pc, #16]	; (800fab8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800faa6:	f7fc ff7d 	bl	800c9a4 <USBD_GetString>
  return USBD_StrDesc;
 800faaa:	4b02      	ldr	r3, [pc, #8]	; (800fab4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800faac:	4618      	mov	r0, r3
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	20003d80 	.word	0x20003d80
 800fab8:	08011a0c 	.word	0x08011a0c

0800fabc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	4603      	mov	r3, r0
 800fac4:	6039      	str	r1, [r7, #0]
 800fac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	221a      	movs	r2, #26
 800facc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800face:	f000 f855 	bl	800fb7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fad2:	4b02      	ldr	r3, [pc, #8]	; (800fadc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	200000f0 	.word	0x200000f0

0800fae0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	4603      	mov	r3, r0
 800fae8:	6039      	str	r1, [r7, #0]
 800faea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800faec:	79fb      	ldrb	r3, [r7, #7]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d105      	bne.n	800fafe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800faf2:	683a      	ldr	r2, [r7, #0]
 800faf4:	4907      	ldr	r1, [pc, #28]	; (800fb14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800faf6:	4808      	ldr	r0, [pc, #32]	; (800fb18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800faf8:	f7fc ff54 	bl	800c9a4 <USBD_GetString>
 800fafc:	e004      	b.n	800fb08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fafe:	683a      	ldr	r2, [r7, #0]
 800fb00:	4904      	ldr	r1, [pc, #16]	; (800fb14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb02:	4805      	ldr	r0, [pc, #20]	; (800fb18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb04:	f7fc ff4e 	bl	800c9a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb08:	4b02      	ldr	r3, [pc, #8]	; (800fb14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3708      	adds	r7, #8
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	20003d80 	.word	0x20003d80
 800fb18:	08011a20 	.word	0x08011a20

0800fb1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	4603      	mov	r3, r0
 800fb24:	6039      	str	r1, [r7, #0]
 800fb26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb28:	79fb      	ldrb	r3, [r7, #7]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d105      	bne.n	800fb3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	4907      	ldr	r1, [pc, #28]	; (800fb50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb32:	4808      	ldr	r0, [pc, #32]	; (800fb54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb34:	f7fc ff36 	bl	800c9a4 <USBD_GetString>
 800fb38:	e004      	b.n	800fb44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb3a:	683a      	ldr	r2, [r7, #0]
 800fb3c:	4904      	ldr	r1, [pc, #16]	; (800fb50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb3e:	4805      	ldr	r0, [pc, #20]	; (800fb54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb40:	f7fc ff30 	bl	800c9a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb44:	4b02      	ldr	r3, [pc, #8]	; (800fb50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	20003d80 	.word	0x20003d80
 800fb54:	08011a2c 	.word	0x08011a2c

0800fb58 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	4603      	mov	r3, r0
 800fb60:	6039      	str	r1, [r7, #0]
 800fb62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	220c      	movs	r2, #12
 800fb68:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fb6a:	4b03      	ldr	r3, [pc, #12]	; (800fb78 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	370c      	adds	r7, #12
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr
 800fb78:	200000e0 	.word	0x200000e0

0800fb7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fb82:	4b0f      	ldr	r3, [pc, #60]	; (800fbc0 <Get_SerialNum+0x44>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fb88:	4b0e      	ldr	r3, [pc, #56]	; (800fbc4 <Get_SerialNum+0x48>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fb8e:	4b0e      	ldr	r3, [pc, #56]	; (800fbc8 <Get_SerialNum+0x4c>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4413      	add	r3, r2
 800fb9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d009      	beq.n	800fbb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fba2:	2208      	movs	r2, #8
 800fba4:	4909      	ldr	r1, [pc, #36]	; (800fbcc <Get_SerialNum+0x50>)
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f000 f814 	bl	800fbd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fbac:	2204      	movs	r2, #4
 800fbae:	4908      	ldr	r1, [pc, #32]	; (800fbd0 <Get_SerialNum+0x54>)
 800fbb0:	68b8      	ldr	r0, [r7, #8]
 800fbb2:	f000 f80f 	bl	800fbd4 <IntToUnicode>
  }
}
 800fbb6:	bf00      	nop
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	1ff0f420 	.word	0x1ff0f420
 800fbc4:	1ff0f424 	.word	0x1ff0f424
 800fbc8:	1ff0f428 	.word	0x1ff0f428
 800fbcc:	200000f2 	.word	0x200000f2
 800fbd0:	20000102 	.word	0x20000102

0800fbd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b087      	sub	sp, #28
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	4613      	mov	r3, r2
 800fbe0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	75fb      	strb	r3, [r7, #23]
 800fbea:	e027      	b.n	800fc3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	0f1b      	lsrs	r3, r3, #28
 800fbf0:	2b09      	cmp	r3, #9
 800fbf2:	d80b      	bhi.n	800fc0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	0f1b      	lsrs	r3, r3, #28
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	7dfb      	ldrb	r3, [r7, #23]
 800fbfc:	005b      	lsls	r3, r3, #1
 800fbfe:	4619      	mov	r1, r3
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	440b      	add	r3, r1
 800fc04:	3230      	adds	r2, #48	; 0x30
 800fc06:	b2d2      	uxtb	r2, r2
 800fc08:	701a      	strb	r2, [r3, #0]
 800fc0a:	e00a      	b.n	800fc22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	0f1b      	lsrs	r3, r3, #28
 800fc10:	b2da      	uxtb	r2, r3
 800fc12:	7dfb      	ldrb	r3, [r7, #23]
 800fc14:	005b      	lsls	r3, r3, #1
 800fc16:	4619      	mov	r1, r3
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	440b      	add	r3, r1
 800fc1c:	3237      	adds	r2, #55	; 0x37
 800fc1e:	b2d2      	uxtb	r2, r2
 800fc20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	011b      	lsls	r3, r3, #4
 800fc26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc28:	7dfb      	ldrb	r3, [r7, #23]
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	68ba      	ldr	r2, [r7, #8]
 800fc30:	4413      	add	r3, r2
 800fc32:	2200      	movs	r2, #0
 800fc34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc36:	7dfb      	ldrb	r3, [r7, #23]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	75fb      	strb	r3, [r7, #23]
 800fc3c:	7dfa      	ldrb	r2, [r7, #23]
 800fc3e:	79fb      	ldrb	r3, [r7, #7]
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d3d3      	bcc.n	800fbec <IntToUnicode+0x18>
  }
}
 800fc44:	bf00      	nop
 800fc46:	bf00      	nop
 800fc48:	371c      	adds	r7, #28
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
	...

0800fc54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b0ae      	sub	sp, #184	; 0xb8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc60:	2200      	movs	r2, #0
 800fc62:	601a      	str	r2, [r3, #0]
 800fc64:	605a      	str	r2, [r3, #4]
 800fc66:	609a      	str	r2, [r3, #8]
 800fc68:	60da      	str	r2, [r3, #12]
 800fc6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fc6c:	f107 0314 	add.w	r3, r7, #20
 800fc70:	2290      	movs	r2, #144	; 0x90
 800fc72:	2100      	movs	r1, #0
 800fc74:	4618      	mov	r0, r3
 800fc76:	f000 fd8a 	bl	801078e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc82:	d151      	bne.n	800fd28 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800fc84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fc88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fc90:	f107 0314 	add.w	r3, r7, #20
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7f6 f96b 	bl	8005f70 <HAL_RCCEx_PeriphCLKConfig>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fca0:	f7f1 fa82 	bl	80011a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fca4:	4b22      	ldr	r3, [pc, #136]	; (800fd30 <HAL_PCD_MspInit+0xdc>)
 800fca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fca8:	4a21      	ldr	r2, [pc, #132]	; (800fd30 <HAL_PCD_MspInit+0xdc>)
 800fcaa:	f043 0301 	orr.w	r3, r3, #1
 800fcae:	6313      	str	r3, [r2, #48]	; 0x30
 800fcb0:	4b1f      	ldr	r3, [pc, #124]	; (800fd30 <HAL_PCD_MspInit+0xdc>)
 800fcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcb4:	f003 0301 	and.w	r3, r3, #1
 800fcb8:	613b      	str	r3, [r7, #16]
 800fcba:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fcbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fcc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcca:	2300      	movs	r3, #0
 800fccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fcd0:	2303      	movs	r3, #3
 800fcd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fcd6:	230a      	movs	r3, #10
 800fcd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fcdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fce0:	4619      	mov	r1, r3
 800fce2:	4814      	ldr	r0, [pc, #80]	; (800fd34 <HAL_PCD_MspInit+0xe0>)
 800fce4:	f7f3 fa38 	bl	8003158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fce8:	4b11      	ldr	r3, [pc, #68]	; (800fd30 <HAL_PCD_MspInit+0xdc>)
 800fcea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcec:	4a10      	ldr	r2, [pc, #64]	; (800fd30 <HAL_PCD_MspInit+0xdc>)
 800fcee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcf2:	6353      	str	r3, [r2, #52]	; 0x34
 800fcf4:	4b0e      	ldr	r3, [pc, #56]	; (800fd30 <HAL_PCD_MspInit+0xdc>)
 800fcf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcfc:	60fb      	str	r3, [r7, #12]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	4b0b      	ldr	r3, [pc, #44]	; (800fd30 <HAL_PCD_MspInit+0xdc>)
 800fd02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd04:	4a0a      	ldr	r2, [pc, #40]	; (800fd30 <HAL_PCD_MspInit+0xdc>)
 800fd06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd0a:	6453      	str	r3, [r2, #68]	; 0x44
 800fd0c:	4b08      	ldr	r3, [pc, #32]	; (800fd30 <HAL_PCD_MspInit+0xdc>)
 800fd0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd14:	60bb      	str	r3, [r7, #8]
 800fd16:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fd18:	2200      	movs	r2, #0
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	2043      	movs	r0, #67	; 0x43
 800fd1e:	f7f2 fe3e 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd22:	2043      	movs	r0, #67	; 0x43
 800fd24:	f7f2 fe57 	bl	80029d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fd28:	bf00      	nop
 800fd2a:	37b8      	adds	r7, #184	; 0xb8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	40023800 	.word	0x40023800
 800fd34:	40020000 	.word	0x40020000

0800fd38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	4610      	mov	r0, r2
 800fd50:	f7fb fc9f 	bl	800b692 <USBD_LL_SetupStage>
}
 800fd54:	bf00      	nop
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	460b      	mov	r3, r1
 800fd66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fd6e:	78fa      	ldrb	r2, [r7, #3]
 800fd70:	6879      	ldr	r1, [r7, #4]
 800fd72:	4613      	mov	r3, r2
 800fd74:	00db      	lsls	r3, r3, #3
 800fd76:	4413      	add	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	440b      	add	r3, r1
 800fd7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	78fb      	ldrb	r3, [r7, #3]
 800fd84:	4619      	mov	r1, r3
 800fd86:	f7fb fcd9 	bl	800b73c <USBD_LL_DataOutStage>
}
 800fd8a:	bf00      	nop
 800fd8c:	3708      	adds	r7, #8
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}

0800fd92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b082      	sub	sp, #8
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fda4:	78fa      	ldrb	r2, [r7, #3]
 800fda6:	6879      	ldr	r1, [r7, #4]
 800fda8:	4613      	mov	r3, r2
 800fdaa:	00db      	lsls	r3, r3, #3
 800fdac:	4413      	add	r3, r2
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	440b      	add	r3, r1
 800fdb2:	334c      	adds	r3, #76	; 0x4c
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	78fb      	ldrb	r3, [r7, #3]
 800fdb8:	4619      	mov	r1, r3
 800fdba:	f7fb fd72 	bl	800b8a2 <USBD_LL_DataInStage>
}
 800fdbe:	bf00      	nop
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b082      	sub	sp, #8
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fb fea6 	bl	800bb26 <USBD_LL_SOF>
}
 800fdda:	bf00      	nop
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b084      	sub	sp, #16
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fdea:	2301      	movs	r3, #1
 800fdec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d102      	bne.n	800fdfc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	73fb      	strb	r3, [r7, #15]
 800fdfa:	e008      	b.n	800fe0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	2b02      	cmp	r3, #2
 800fe02:	d102      	bne.n	800fe0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fe04:	2301      	movs	r3, #1
 800fe06:	73fb      	strb	r3, [r7, #15]
 800fe08:	e001      	b.n	800fe0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fe0a:	f7f1 f9cd 	bl	80011a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe14:	7bfa      	ldrb	r2, [r7, #15]
 800fe16:	4611      	mov	r1, r2
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7fb fe46 	bl	800baaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7fb fdee 	bl	800ba06 <USBD_LL_Reset>
}
 800fe2a:	bf00      	nop
 800fe2c:	3710      	adds	r7, #16
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
	...

0800fe34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fb fe41 	bl	800baca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	687a      	ldr	r2, [r7, #4]
 800fe54:	6812      	ldr	r2, [r2, #0]
 800fe56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe5a:	f043 0301 	orr.w	r3, r3, #1
 800fe5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6a1b      	ldr	r3, [r3, #32]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d005      	beq.n	800fe74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe68:	4b04      	ldr	r3, [pc, #16]	; (800fe7c <HAL_PCD_SuspendCallback+0x48>)
 800fe6a:	691b      	ldr	r3, [r3, #16]
 800fe6c:	4a03      	ldr	r2, [pc, #12]	; (800fe7c <HAL_PCD_SuspendCallback+0x48>)
 800fe6e:	f043 0306 	orr.w	r3, r3, #6
 800fe72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fe74:	bf00      	nop
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	e000ed00 	.word	0xe000ed00

0800fe80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fb fe31 	bl	800baf6 <USBD_LL_Resume>
}
 800fe94:	bf00      	nop
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	460b      	mov	r3, r1
 800fea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800feae:	78fa      	ldrb	r2, [r7, #3]
 800feb0:	4611      	mov	r1, r2
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fb fe89 	bl	800bbca <USBD_LL_IsoOUTIncomplete>
}
 800feb8:	bf00      	nop
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	460b      	mov	r3, r1
 800feca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fed2:	78fa      	ldrb	r2, [r7, #3]
 800fed4:	4611      	mov	r1, r2
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fb fe45 	bl	800bb66 <USBD_LL_IsoINIncomplete>
}
 800fedc:	bf00      	nop
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fb fe9b 	bl	800bc2e <USBD_LL_DevConnected>
}
 800fef8:	bf00      	nop
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7fb fe98 	bl	800bc44 <USBD_LL_DevDisconnected>
}
 800ff14:	bf00      	nop
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d13c      	bne.n	800ffa6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ff2c:	4a20      	ldr	r2, [pc, #128]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4a1e      	ldr	r2, [pc, #120]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff38:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff3c:	4b1c      	ldr	r3, [pc, #112]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ff42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ff44:	4b1a      	ldr	r3, [pc, #104]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff46:	2206      	movs	r2, #6
 800ff48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ff4a:	4b19      	ldr	r3, [pc, #100]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff4c:	2202      	movs	r2, #2
 800ff4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff50:	4b17      	ldr	r3, [pc, #92]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff52:	2200      	movs	r2, #0
 800ff54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ff56:	4b16      	ldr	r3, [pc, #88]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff58:	2202      	movs	r2, #2
 800ff5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff5c:	4b14      	ldr	r3, [pc, #80]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff5e:	2200      	movs	r2, #0
 800ff60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ff62:	4b13      	ldr	r3, [pc, #76]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff64:	2200      	movs	r2, #0
 800ff66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ff68:	4b11      	ldr	r3, [pc, #68]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff6e:	4b10      	ldr	r3, [pc, #64]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff70:	2200      	movs	r2, #0
 800ff72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ff74:	4b0e      	ldr	r3, [pc, #56]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff76:	2200      	movs	r2, #0
 800ff78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ff7a:	480d      	ldr	r0, [pc, #52]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff7c:	f7f4 f86b 	bl	8004056 <HAL_PCD_Init>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d001      	beq.n	800ff8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ff86:	f7f1 f90f 	bl	80011a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ff8a:	2180      	movs	r1, #128	; 0x80
 800ff8c:	4808      	ldr	r0, [pc, #32]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff8e:	f7f5 fae6 	bl	800555e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ff92:	2240      	movs	r2, #64	; 0x40
 800ff94:	2100      	movs	r1, #0
 800ff96:	4806      	ldr	r0, [pc, #24]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ff98:	f7f5 fa9a 	bl	80054d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ff9c:	2280      	movs	r2, #128	; 0x80
 800ff9e:	2101      	movs	r1, #1
 800ffa0:	4803      	ldr	r0, [pc, #12]	; (800ffb0 <USBD_LL_Init+0x94>)
 800ffa2:	f7f5 fa95 	bl	80054d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ffa6:	2300      	movs	r3, #0
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	20003f80 	.word	0x20003f80

0800ffb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7f4 f967 	bl	800429e <HAL_PCD_Start>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f000 f97e 	bl	80102d8 <USBD_Get_USB_Status>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffe0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b084      	sub	sp, #16
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	6078      	str	r0, [r7, #4]
 800fff2:	4608      	mov	r0, r1
 800fff4:	4611      	mov	r1, r2
 800fff6:	461a      	mov	r2, r3
 800fff8:	4603      	mov	r3, r0
 800fffa:	70fb      	strb	r3, [r7, #3]
 800fffc:	460b      	mov	r3, r1
 800fffe:	70bb      	strb	r3, [r7, #2]
 8010000:	4613      	mov	r3, r2
 8010002:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010004:	2300      	movs	r3, #0
 8010006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010008:	2300      	movs	r3, #0
 801000a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010012:	78bb      	ldrb	r3, [r7, #2]
 8010014:	883a      	ldrh	r2, [r7, #0]
 8010016:	78f9      	ldrb	r1, [r7, #3]
 8010018:	f7f4 fe54 	bl	8004cc4 <HAL_PCD_EP_Open>
 801001c:	4603      	mov	r3, r0
 801001e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010020:	7bfb      	ldrb	r3, [r7, #15]
 8010022:	4618      	mov	r0, r3
 8010024:	f000 f958 	bl	80102d8 <USBD_Get_USB_Status>
 8010028:	4603      	mov	r3, r0
 801002a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801002c:	7bbb      	ldrb	r3, [r7, #14]
}
 801002e:	4618      	mov	r0, r3
 8010030:	3710      	adds	r7, #16
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b084      	sub	sp, #16
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	460b      	mov	r3, r1
 8010040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010042:	2300      	movs	r3, #0
 8010044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010046:	2300      	movs	r3, #0
 8010048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010050:	78fa      	ldrb	r2, [r7, #3]
 8010052:	4611      	mov	r1, r2
 8010054:	4618      	mov	r0, r3
 8010056:	f7f4 fe9d 	bl	8004d94 <HAL_PCD_EP_Close>
 801005a:	4603      	mov	r3, r0
 801005c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801005e:	7bfb      	ldrb	r3, [r7, #15]
 8010060:	4618      	mov	r0, r3
 8010062:	f000 f939 	bl	80102d8 <USBD_Get_USB_Status>
 8010066:	4603      	mov	r3, r0
 8010068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801006a:	7bbb      	ldrb	r3, [r7, #14]
}
 801006c:	4618      	mov	r0, r3
 801006e:	3710      	adds	r7, #16
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	460b      	mov	r3, r1
 801007e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010080:	2300      	movs	r3, #0
 8010082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010084:	2300      	movs	r3, #0
 8010086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801008e:	78fa      	ldrb	r2, [r7, #3]
 8010090:	4611      	mov	r1, r2
 8010092:	4618      	mov	r0, r3
 8010094:	f7f4 ff75 	bl	8004f82 <HAL_PCD_EP_SetStall>
 8010098:	4603      	mov	r3, r0
 801009a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801009c:	7bfb      	ldrb	r3, [r7, #15]
 801009e:	4618      	mov	r0, r3
 80100a0:	f000 f91a 	bl	80102d8 <USBD_Get_USB_Status>
 80100a4:	4603      	mov	r3, r0
 80100a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b084      	sub	sp, #16
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
 80100ba:	460b      	mov	r3, r1
 80100bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100be:	2300      	movs	r3, #0
 80100c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100c2:	2300      	movs	r3, #0
 80100c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80100cc:	78fa      	ldrb	r2, [r7, #3]
 80100ce:	4611      	mov	r1, r2
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7f4 ffba 	bl	800504a <HAL_PCD_EP_ClrStall>
 80100d6:	4603      	mov	r3, r0
 80100d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100da:	7bfb      	ldrb	r3, [r7, #15]
 80100dc:	4618      	mov	r0, r3
 80100de:	f000 f8fb 	bl	80102d8 <USBD_Get_USB_Status>
 80100e2:	4603      	mov	r3, r0
 80100e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100f0:	b480      	push	{r7}
 80100f2:	b085      	sub	sp, #20
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	460b      	mov	r3, r1
 80100fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010102:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010108:	2b00      	cmp	r3, #0
 801010a:	da0b      	bge.n	8010124 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801010c:	78fb      	ldrb	r3, [r7, #3]
 801010e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010112:	68f9      	ldr	r1, [r7, #12]
 8010114:	4613      	mov	r3, r2
 8010116:	00db      	lsls	r3, r3, #3
 8010118:	4413      	add	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	440b      	add	r3, r1
 801011e:	333e      	adds	r3, #62	; 0x3e
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	e00b      	b.n	801013c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010124:	78fb      	ldrb	r3, [r7, #3]
 8010126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801012a:	68f9      	ldr	r1, [r7, #12]
 801012c:	4613      	mov	r3, r2
 801012e:	00db      	lsls	r3, r3, #3
 8010130:	4413      	add	r3, r2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	440b      	add	r3, r1
 8010136:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801013a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801013c:	4618      	mov	r0, r3
 801013e:	3714      	adds	r7, #20
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	460b      	mov	r3, r1
 8010152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010154:	2300      	movs	r3, #0
 8010156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010158:	2300      	movs	r3, #0
 801015a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010162:	78fa      	ldrb	r2, [r7, #3]
 8010164:	4611      	mov	r1, r2
 8010166:	4618      	mov	r0, r3
 8010168:	f7f4 fd87 	bl	8004c7a <HAL_PCD_SetAddress>
 801016c:	4603      	mov	r3, r0
 801016e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010170:	7bfb      	ldrb	r3, [r7, #15]
 8010172:	4618      	mov	r0, r3
 8010174:	f000 f8b0 	bl	80102d8 <USBD_Get_USB_Status>
 8010178:	4603      	mov	r3, r0
 801017a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801017c:	7bbb      	ldrb	r3, [r7, #14]
}
 801017e:	4618      	mov	r0, r3
 8010180:	3710      	adds	r7, #16
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}

08010186 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010186:	b580      	push	{r7, lr}
 8010188:	b086      	sub	sp, #24
 801018a:	af00      	add	r7, sp, #0
 801018c:	60f8      	str	r0, [r7, #12]
 801018e:	607a      	str	r2, [r7, #4]
 8010190:	603b      	str	r3, [r7, #0]
 8010192:	460b      	mov	r3, r1
 8010194:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010196:	2300      	movs	r3, #0
 8010198:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801019a:	2300      	movs	r3, #0
 801019c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80101a4:	7af9      	ldrb	r1, [r7, #11]
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	687a      	ldr	r2, [r7, #4]
 80101aa:	f7f4 fea0 	bl	8004eee <HAL_PCD_EP_Transmit>
 80101ae:	4603      	mov	r3, r0
 80101b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101b2:	7dfb      	ldrb	r3, [r7, #23]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f000 f88f 	bl	80102d8 <USBD_Get_USB_Status>
 80101ba:	4603      	mov	r3, r0
 80101bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101be:	7dbb      	ldrb	r3, [r7, #22]
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3718      	adds	r7, #24
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b086      	sub	sp, #24
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	607a      	str	r2, [r7, #4]
 80101d2:	603b      	str	r3, [r7, #0]
 80101d4:	460b      	mov	r3, r1
 80101d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101d8:	2300      	movs	r3, #0
 80101da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101dc:	2300      	movs	r3, #0
 80101de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80101e6:	7af9      	ldrb	r1, [r7, #11]
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	f7f4 fe1c 	bl	8004e28 <HAL_PCD_EP_Receive>
 80101f0:	4603      	mov	r3, r0
 80101f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101f4:	7dfb      	ldrb	r3, [r7, #23]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f000 f86e 	bl	80102d8 <USBD_Get_USB_Status>
 80101fc:	4603      	mov	r3, r0
 80101fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010200:	7dbb      	ldrb	r3, [r7, #22]
}
 8010202:	4618      	mov	r0, r3
 8010204:	3718      	adds	r7, #24
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b082      	sub	sp, #8
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	460b      	mov	r3, r1
 8010214:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801021c:	78fa      	ldrb	r2, [r7, #3]
 801021e:	4611      	mov	r1, r2
 8010220:	4618      	mov	r0, r3
 8010222:	f7f4 fe4c 	bl	8004ebe <HAL_PCD_EP_GetRxCount>
 8010226:	4603      	mov	r3, r0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	460b      	mov	r3, r1
 801023a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801023c:	78fb      	ldrb	r3, [r7, #3]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d002      	beq.n	8010248 <HAL_PCDEx_LPM_Callback+0x18>
 8010242:	2b01      	cmp	r3, #1
 8010244:	d01f      	beq.n	8010286 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010246:	e03b      	b.n	80102c0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6a1b      	ldr	r3, [r3, #32]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d007      	beq.n	8010260 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010250:	f000 f83c 	bl	80102cc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010254:	4b1c      	ldr	r3, [pc, #112]	; (80102c8 <HAL_PCDEx_LPM_Callback+0x98>)
 8010256:	691b      	ldr	r3, [r3, #16]
 8010258:	4a1b      	ldr	r2, [pc, #108]	; (80102c8 <HAL_PCDEx_LPM_Callback+0x98>)
 801025a:	f023 0306 	bic.w	r3, r3, #6
 801025e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	6812      	ldr	r2, [r2, #0]
 801026e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010272:	f023 0301 	bic.w	r3, r3, #1
 8010276:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801027e:	4618      	mov	r0, r3
 8010280:	f7fb fc39 	bl	800baf6 <USBD_LL_Resume>
    break;
 8010284:	e01c      	b.n	80102c0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	6812      	ldr	r2, [r2, #0]
 8010294:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010298:	f043 0301 	orr.w	r3, r3, #1
 801029c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fb fc10 	bl	800baca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6a1b      	ldr	r3, [r3, #32]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d005      	beq.n	80102be <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102b2:	4b05      	ldr	r3, [pc, #20]	; (80102c8 <HAL_PCDEx_LPM_Callback+0x98>)
 80102b4:	691b      	ldr	r3, [r3, #16]
 80102b6:	4a04      	ldr	r2, [pc, #16]	; (80102c8 <HAL_PCDEx_LPM_Callback+0x98>)
 80102b8:	f043 0306 	orr.w	r3, r3, #6
 80102bc:	6113      	str	r3, [r2, #16]
    break;
 80102be:	bf00      	nop
}
 80102c0:	bf00      	nop
 80102c2:	3708      	adds	r7, #8
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	e000ed00 	.word	0xe000ed00

080102cc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80102d0:	f7f0 fc1c 	bl	8000b0c <SystemClock_Config>
}
 80102d4:	bf00      	nop
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80102d8:	b480      	push	{r7}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
 80102de:	4603      	mov	r3, r0
 80102e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102e2:	2300      	movs	r3, #0
 80102e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80102e6:	79fb      	ldrb	r3, [r7, #7]
 80102e8:	2b03      	cmp	r3, #3
 80102ea:	d817      	bhi.n	801031c <USBD_Get_USB_Status+0x44>
 80102ec:	a201      	add	r2, pc, #4	; (adr r2, 80102f4 <USBD_Get_USB_Status+0x1c>)
 80102ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f2:	bf00      	nop
 80102f4:	08010305 	.word	0x08010305
 80102f8:	0801030b 	.word	0x0801030b
 80102fc:	08010311 	.word	0x08010311
 8010300:	08010317 	.word	0x08010317
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010304:	2300      	movs	r3, #0
 8010306:	73fb      	strb	r3, [r7, #15]
    break;
 8010308:	e00b      	b.n	8010322 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801030a:	2303      	movs	r3, #3
 801030c:	73fb      	strb	r3, [r7, #15]
    break;
 801030e:	e008      	b.n	8010322 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010310:	2301      	movs	r3, #1
 8010312:	73fb      	strb	r3, [r7, #15]
    break;
 8010314:	e005      	b.n	8010322 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010316:	2303      	movs	r3, #3
 8010318:	73fb      	strb	r3, [r7, #15]
    break;
 801031a:	e002      	b.n	8010322 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801031c:	2303      	movs	r3, #3
 801031e:	73fb      	strb	r3, [r7, #15]
    break;
 8010320:	bf00      	nop
  }
  return usb_status;
 8010322:	7bfb      	ldrb	r3, [r7, #15]
}
 8010324:	4618      	mov	r0, r3
 8010326:	3714      	adds	r7, #20
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <malloc>:
 8010330:	4b02      	ldr	r3, [pc, #8]	; (801033c <malloc+0xc>)
 8010332:	4601      	mov	r1, r0
 8010334:	6818      	ldr	r0, [r3, #0]
 8010336:	f000 b82b 	b.w	8010390 <_malloc_r>
 801033a:	bf00      	nop
 801033c:	20000164 	.word	0x20000164

08010340 <free>:
 8010340:	4b02      	ldr	r3, [pc, #8]	; (801034c <free+0xc>)
 8010342:	4601      	mov	r1, r0
 8010344:	6818      	ldr	r0, [r3, #0]
 8010346:	f000 ba69 	b.w	801081c <_free_r>
 801034a:	bf00      	nop
 801034c:	20000164 	.word	0x20000164

08010350 <sbrk_aligned>:
 8010350:	b570      	push	{r4, r5, r6, lr}
 8010352:	4e0e      	ldr	r6, [pc, #56]	; (801038c <sbrk_aligned+0x3c>)
 8010354:	460c      	mov	r4, r1
 8010356:	6831      	ldr	r1, [r6, #0]
 8010358:	4605      	mov	r5, r0
 801035a:	b911      	cbnz	r1, 8010362 <sbrk_aligned+0x12>
 801035c:	f000 fa20 	bl	80107a0 <_sbrk_r>
 8010360:	6030      	str	r0, [r6, #0]
 8010362:	4621      	mov	r1, r4
 8010364:	4628      	mov	r0, r5
 8010366:	f000 fa1b 	bl	80107a0 <_sbrk_r>
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	d00a      	beq.n	8010384 <sbrk_aligned+0x34>
 801036e:	1cc4      	adds	r4, r0, #3
 8010370:	f024 0403 	bic.w	r4, r4, #3
 8010374:	42a0      	cmp	r0, r4
 8010376:	d007      	beq.n	8010388 <sbrk_aligned+0x38>
 8010378:	1a21      	subs	r1, r4, r0
 801037a:	4628      	mov	r0, r5
 801037c:	f000 fa10 	bl	80107a0 <_sbrk_r>
 8010380:	3001      	adds	r0, #1
 8010382:	d101      	bne.n	8010388 <sbrk_aligned+0x38>
 8010384:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010388:	4620      	mov	r0, r4
 801038a:	bd70      	pop	{r4, r5, r6, pc}
 801038c:	2000448c 	.word	0x2000448c

08010390 <_malloc_r>:
 8010390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010394:	1ccd      	adds	r5, r1, #3
 8010396:	f025 0503 	bic.w	r5, r5, #3
 801039a:	3508      	adds	r5, #8
 801039c:	2d0c      	cmp	r5, #12
 801039e:	bf38      	it	cc
 80103a0:	250c      	movcc	r5, #12
 80103a2:	2d00      	cmp	r5, #0
 80103a4:	4607      	mov	r7, r0
 80103a6:	db01      	blt.n	80103ac <_malloc_r+0x1c>
 80103a8:	42a9      	cmp	r1, r5
 80103aa:	d905      	bls.n	80103b8 <_malloc_r+0x28>
 80103ac:	230c      	movs	r3, #12
 80103ae:	603b      	str	r3, [r7, #0]
 80103b0:	2600      	movs	r6, #0
 80103b2:	4630      	mov	r0, r6
 80103b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801048c <_malloc_r+0xfc>
 80103bc:	f000 f89c 	bl	80104f8 <__malloc_lock>
 80103c0:	f8d8 3000 	ldr.w	r3, [r8]
 80103c4:	461c      	mov	r4, r3
 80103c6:	bb5c      	cbnz	r4, 8010420 <_malloc_r+0x90>
 80103c8:	4629      	mov	r1, r5
 80103ca:	4638      	mov	r0, r7
 80103cc:	f7ff ffc0 	bl	8010350 <sbrk_aligned>
 80103d0:	1c43      	adds	r3, r0, #1
 80103d2:	4604      	mov	r4, r0
 80103d4:	d155      	bne.n	8010482 <_malloc_r+0xf2>
 80103d6:	f8d8 4000 	ldr.w	r4, [r8]
 80103da:	4626      	mov	r6, r4
 80103dc:	2e00      	cmp	r6, #0
 80103de:	d145      	bne.n	801046c <_malloc_r+0xdc>
 80103e0:	2c00      	cmp	r4, #0
 80103e2:	d048      	beq.n	8010476 <_malloc_r+0xe6>
 80103e4:	6823      	ldr	r3, [r4, #0]
 80103e6:	4631      	mov	r1, r6
 80103e8:	4638      	mov	r0, r7
 80103ea:	eb04 0903 	add.w	r9, r4, r3
 80103ee:	f000 f9d7 	bl	80107a0 <_sbrk_r>
 80103f2:	4581      	cmp	r9, r0
 80103f4:	d13f      	bne.n	8010476 <_malloc_r+0xe6>
 80103f6:	6821      	ldr	r1, [r4, #0]
 80103f8:	1a6d      	subs	r5, r5, r1
 80103fa:	4629      	mov	r1, r5
 80103fc:	4638      	mov	r0, r7
 80103fe:	f7ff ffa7 	bl	8010350 <sbrk_aligned>
 8010402:	3001      	adds	r0, #1
 8010404:	d037      	beq.n	8010476 <_malloc_r+0xe6>
 8010406:	6823      	ldr	r3, [r4, #0]
 8010408:	442b      	add	r3, r5
 801040a:	6023      	str	r3, [r4, #0]
 801040c:	f8d8 3000 	ldr.w	r3, [r8]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d038      	beq.n	8010486 <_malloc_r+0xf6>
 8010414:	685a      	ldr	r2, [r3, #4]
 8010416:	42a2      	cmp	r2, r4
 8010418:	d12b      	bne.n	8010472 <_malloc_r+0xe2>
 801041a:	2200      	movs	r2, #0
 801041c:	605a      	str	r2, [r3, #4]
 801041e:	e00f      	b.n	8010440 <_malloc_r+0xb0>
 8010420:	6822      	ldr	r2, [r4, #0]
 8010422:	1b52      	subs	r2, r2, r5
 8010424:	d41f      	bmi.n	8010466 <_malloc_r+0xd6>
 8010426:	2a0b      	cmp	r2, #11
 8010428:	d917      	bls.n	801045a <_malloc_r+0xca>
 801042a:	1961      	adds	r1, r4, r5
 801042c:	42a3      	cmp	r3, r4
 801042e:	6025      	str	r5, [r4, #0]
 8010430:	bf18      	it	ne
 8010432:	6059      	strne	r1, [r3, #4]
 8010434:	6863      	ldr	r3, [r4, #4]
 8010436:	bf08      	it	eq
 8010438:	f8c8 1000 	streq.w	r1, [r8]
 801043c:	5162      	str	r2, [r4, r5]
 801043e:	604b      	str	r3, [r1, #4]
 8010440:	4638      	mov	r0, r7
 8010442:	f104 060b 	add.w	r6, r4, #11
 8010446:	f000 f85d 	bl	8010504 <__malloc_unlock>
 801044a:	f026 0607 	bic.w	r6, r6, #7
 801044e:	1d23      	adds	r3, r4, #4
 8010450:	1af2      	subs	r2, r6, r3
 8010452:	d0ae      	beq.n	80103b2 <_malloc_r+0x22>
 8010454:	1b9b      	subs	r3, r3, r6
 8010456:	50a3      	str	r3, [r4, r2]
 8010458:	e7ab      	b.n	80103b2 <_malloc_r+0x22>
 801045a:	42a3      	cmp	r3, r4
 801045c:	6862      	ldr	r2, [r4, #4]
 801045e:	d1dd      	bne.n	801041c <_malloc_r+0x8c>
 8010460:	f8c8 2000 	str.w	r2, [r8]
 8010464:	e7ec      	b.n	8010440 <_malloc_r+0xb0>
 8010466:	4623      	mov	r3, r4
 8010468:	6864      	ldr	r4, [r4, #4]
 801046a:	e7ac      	b.n	80103c6 <_malloc_r+0x36>
 801046c:	4634      	mov	r4, r6
 801046e:	6876      	ldr	r6, [r6, #4]
 8010470:	e7b4      	b.n	80103dc <_malloc_r+0x4c>
 8010472:	4613      	mov	r3, r2
 8010474:	e7cc      	b.n	8010410 <_malloc_r+0x80>
 8010476:	230c      	movs	r3, #12
 8010478:	603b      	str	r3, [r7, #0]
 801047a:	4638      	mov	r0, r7
 801047c:	f000 f842 	bl	8010504 <__malloc_unlock>
 8010480:	e797      	b.n	80103b2 <_malloc_r+0x22>
 8010482:	6025      	str	r5, [r4, #0]
 8010484:	e7dc      	b.n	8010440 <_malloc_r+0xb0>
 8010486:	605b      	str	r3, [r3, #4]
 8010488:	deff      	udf	#255	; 0xff
 801048a:	bf00      	nop
 801048c:	20004488 	.word	0x20004488

08010490 <sniprintf>:
 8010490:	b40c      	push	{r2, r3}
 8010492:	b530      	push	{r4, r5, lr}
 8010494:	4b17      	ldr	r3, [pc, #92]	; (80104f4 <sniprintf+0x64>)
 8010496:	1e0c      	subs	r4, r1, #0
 8010498:	681d      	ldr	r5, [r3, #0]
 801049a:	b09d      	sub	sp, #116	; 0x74
 801049c:	da08      	bge.n	80104b0 <sniprintf+0x20>
 801049e:	238b      	movs	r3, #139	; 0x8b
 80104a0:	602b      	str	r3, [r5, #0]
 80104a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104a6:	b01d      	add	sp, #116	; 0x74
 80104a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104ac:	b002      	add	sp, #8
 80104ae:	4770      	bx	lr
 80104b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80104b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80104b8:	bf14      	ite	ne
 80104ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80104be:	4623      	moveq	r3, r4
 80104c0:	9304      	str	r3, [sp, #16]
 80104c2:	9307      	str	r3, [sp, #28]
 80104c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104c8:	9002      	str	r0, [sp, #8]
 80104ca:	9006      	str	r0, [sp, #24]
 80104cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80104d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80104d2:	ab21      	add	r3, sp, #132	; 0x84
 80104d4:	a902      	add	r1, sp, #8
 80104d6:	4628      	mov	r0, r5
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	f000 fa45 	bl	8010968 <_svfiprintf_r>
 80104de:	1c43      	adds	r3, r0, #1
 80104e0:	bfbc      	itt	lt
 80104e2:	238b      	movlt	r3, #139	; 0x8b
 80104e4:	602b      	strlt	r3, [r5, #0]
 80104e6:	2c00      	cmp	r4, #0
 80104e8:	d0dd      	beq.n	80104a6 <sniprintf+0x16>
 80104ea:	9b02      	ldr	r3, [sp, #8]
 80104ec:	2200      	movs	r2, #0
 80104ee:	701a      	strb	r2, [r3, #0]
 80104f0:	e7d9      	b.n	80104a6 <sniprintf+0x16>
 80104f2:	bf00      	nop
 80104f4:	20000164 	.word	0x20000164

080104f8 <__malloc_lock>:
 80104f8:	4801      	ldr	r0, [pc, #4]	; (8010500 <__malloc_lock+0x8>)
 80104fa:	f000 b98c 	b.w	8010816 <__retarget_lock_acquire_recursive>
 80104fe:	bf00      	nop
 8010500:	200045cc 	.word	0x200045cc

08010504 <__malloc_unlock>:
 8010504:	4801      	ldr	r0, [pc, #4]	; (801050c <__malloc_unlock+0x8>)
 8010506:	f000 b987 	b.w	8010818 <__retarget_lock_release_recursive>
 801050a:	bf00      	nop
 801050c:	200045cc 	.word	0x200045cc

08010510 <std>:
 8010510:	2300      	movs	r3, #0
 8010512:	b510      	push	{r4, lr}
 8010514:	4604      	mov	r4, r0
 8010516:	e9c0 3300 	strd	r3, r3, [r0]
 801051a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801051e:	6083      	str	r3, [r0, #8]
 8010520:	8181      	strh	r1, [r0, #12]
 8010522:	6643      	str	r3, [r0, #100]	; 0x64
 8010524:	81c2      	strh	r2, [r0, #14]
 8010526:	6183      	str	r3, [r0, #24]
 8010528:	4619      	mov	r1, r3
 801052a:	2208      	movs	r2, #8
 801052c:	305c      	adds	r0, #92	; 0x5c
 801052e:	f000 f92e 	bl	801078e <memset>
 8010532:	4b0d      	ldr	r3, [pc, #52]	; (8010568 <std+0x58>)
 8010534:	6263      	str	r3, [r4, #36]	; 0x24
 8010536:	4b0d      	ldr	r3, [pc, #52]	; (801056c <std+0x5c>)
 8010538:	62a3      	str	r3, [r4, #40]	; 0x28
 801053a:	4b0d      	ldr	r3, [pc, #52]	; (8010570 <std+0x60>)
 801053c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801053e:	4b0d      	ldr	r3, [pc, #52]	; (8010574 <std+0x64>)
 8010540:	6323      	str	r3, [r4, #48]	; 0x30
 8010542:	4b0d      	ldr	r3, [pc, #52]	; (8010578 <std+0x68>)
 8010544:	6224      	str	r4, [r4, #32]
 8010546:	429c      	cmp	r4, r3
 8010548:	d006      	beq.n	8010558 <std+0x48>
 801054a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801054e:	4294      	cmp	r4, r2
 8010550:	d002      	beq.n	8010558 <std+0x48>
 8010552:	33d0      	adds	r3, #208	; 0xd0
 8010554:	429c      	cmp	r4, r3
 8010556:	d105      	bne.n	8010564 <std+0x54>
 8010558:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801055c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010560:	f000 b958 	b.w	8010814 <__retarget_lock_init_recursive>
 8010564:	bd10      	pop	{r4, pc}
 8010566:	bf00      	nop
 8010568:	08011269 	.word	0x08011269
 801056c:	0801128b 	.word	0x0801128b
 8010570:	080112c3 	.word	0x080112c3
 8010574:	080112e7 	.word	0x080112e7
 8010578:	20004490 	.word	0x20004490

0801057c <stdio_exit_handler>:
 801057c:	4a02      	ldr	r2, [pc, #8]	; (8010588 <stdio_exit_handler+0xc>)
 801057e:	4903      	ldr	r1, [pc, #12]	; (801058c <stdio_exit_handler+0x10>)
 8010580:	4803      	ldr	r0, [pc, #12]	; (8010590 <stdio_exit_handler+0x14>)
 8010582:	f000 b869 	b.w	8010658 <_fwalk_sglue>
 8010586:	bf00      	nop
 8010588:	2000010c 	.word	0x2000010c
 801058c:	08011219 	.word	0x08011219
 8010590:	20000118 	.word	0x20000118

08010594 <cleanup_stdio>:
 8010594:	6841      	ldr	r1, [r0, #4]
 8010596:	4b0c      	ldr	r3, [pc, #48]	; (80105c8 <cleanup_stdio+0x34>)
 8010598:	4299      	cmp	r1, r3
 801059a:	b510      	push	{r4, lr}
 801059c:	4604      	mov	r4, r0
 801059e:	d001      	beq.n	80105a4 <cleanup_stdio+0x10>
 80105a0:	f000 fe3a 	bl	8011218 <_fflush_r>
 80105a4:	68a1      	ldr	r1, [r4, #8]
 80105a6:	4b09      	ldr	r3, [pc, #36]	; (80105cc <cleanup_stdio+0x38>)
 80105a8:	4299      	cmp	r1, r3
 80105aa:	d002      	beq.n	80105b2 <cleanup_stdio+0x1e>
 80105ac:	4620      	mov	r0, r4
 80105ae:	f000 fe33 	bl	8011218 <_fflush_r>
 80105b2:	68e1      	ldr	r1, [r4, #12]
 80105b4:	4b06      	ldr	r3, [pc, #24]	; (80105d0 <cleanup_stdio+0x3c>)
 80105b6:	4299      	cmp	r1, r3
 80105b8:	d004      	beq.n	80105c4 <cleanup_stdio+0x30>
 80105ba:	4620      	mov	r0, r4
 80105bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105c0:	f000 be2a 	b.w	8011218 <_fflush_r>
 80105c4:	bd10      	pop	{r4, pc}
 80105c6:	bf00      	nop
 80105c8:	20004490 	.word	0x20004490
 80105cc:	200044f8 	.word	0x200044f8
 80105d0:	20004560 	.word	0x20004560

080105d4 <global_stdio_init.part.0>:
 80105d4:	b510      	push	{r4, lr}
 80105d6:	4b0b      	ldr	r3, [pc, #44]	; (8010604 <global_stdio_init.part.0+0x30>)
 80105d8:	4c0b      	ldr	r4, [pc, #44]	; (8010608 <global_stdio_init.part.0+0x34>)
 80105da:	4a0c      	ldr	r2, [pc, #48]	; (801060c <global_stdio_init.part.0+0x38>)
 80105dc:	601a      	str	r2, [r3, #0]
 80105de:	4620      	mov	r0, r4
 80105e0:	2200      	movs	r2, #0
 80105e2:	2104      	movs	r1, #4
 80105e4:	f7ff ff94 	bl	8010510 <std>
 80105e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80105ec:	2201      	movs	r2, #1
 80105ee:	2109      	movs	r1, #9
 80105f0:	f7ff ff8e 	bl	8010510 <std>
 80105f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80105f8:	2202      	movs	r2, #2
 80105fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105fe:	2112      	movs	r1, #18
 8010600:	f7ff bf86 	b.w	8010510 <std>
 8010604:	200045c8 	.word	0x200045c8
 8010608:	20004490 	.word	0x20004490
 801060c:	0801057d 	.word	0x0801057d

08010610 <__sfp_lock_acquire>:
 8010610:	4801      	ldr	r0, [pc, #4]	; (8010618 <__sfp_lock_acquire+0x8>)
 8010612:	f000 b900 	b.w	8010816 <__retarget_lock_acquire_recursive>
 8010616:	bf00      	nop
 8010618:	200045cd 	.word	0x200045cd

0801061c <__sfp_lock_release>:
 801061c:	4801      	ldr	r0, [pc, #4]	; (8010624 <__sfp_lock_release+0x8>)
 801061e:	f000 b8fb 	b.w	8010818 <__retarget_lock_release_recursive>
 8010622:	bf00      	nop
 8010624:	200045cd 	.word	0x200045cd

08010628 <__sinit>:
 8010628:	b510      	push	{r4, lr}
 801062a:	4604      	mov	r4, r0
 801062c:	f7ff fff0 	bl	8010610 <__sfp_lock_acquire>
 8010630:	6a23      	ldr	r3, [r4, #32]
 8010632:	b11b      	cbz	r3, 801063c <__sinit+0x14>
 8010634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010638:	f7ff bff0 	b.w	801061c <__sfp_lock_release>
 801063c:	4b04      	ldr	r3, [pc, #16]	; (8010650 <__sinit+0x28>)
 801063e:	6223      	str	r3, [r4, #32]
 8010640:	4b04      	ldr	r3, [pc, #16]	; (8010654 <__sinit+0x2c>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1f5      	bne.n	8010634 <__sinit+0xc>
 8010648:	f7ff ffc4 	bl	80105d4 <global_stdio_init.part.0>
 801064c:	e7f2      	b.n	8010634 <__sinit+0xc>
 801064e:	bf00      	nop
 8010650:	08010595 	.word	0x08010595
 8010654:	200045c8 	.word	0x200045c8

08010658 <_fwalk_sglue>:
 8010658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801065c:	4607      	mov	r7, r0
 801065e:	4688      	mov	r8, r1
 8010660:	4614      	mov	r4, r2
 8010662:	2600      	movs	r6, #0
 8010664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010668:	f1b9 0901 	subs.w	r9, r9, #1
 801066c:	d505      	bpl.n	801067a <_fwalk_sglue+0x22>
 801066e:	6824      	ldr	r4, [r4, #0]
 8010670:	2c00      	cmp	r4, #0
 8010672:	d1f7      	bne.n	8010664 <_fwalk_sglue+0xc>
 8010674:	4630      	mov	r0, r6
 8010676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801067a:	89ab      	ldrh	r3, [r5, #12]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d907      	bls.n	8010690 <_fwalk_sglue+0x38>
 8010680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010684:	3301      	adds	r3, #1
 8010686:	d003      	beq.n	8010690 <_fwalk_sglue+0x38>
 8010688:	4629      	mov	r1, r5
 801068a:	4638      	mov	r0, r7
 801068c:	47c0      	blx	r8
 801068e:	4306      	orrs	r6, r0
 8010690:	3568      	adds	r5, #104	; 0x68
 8010692:	e7e9      	b.n	8010668 <_fwalk_sglue+0x10>

08010694 <iprintf>:
 8010694:	b40f      	push	{r0, r1, r2, r3}
 8010696:	b507      	push	{r0, r1, r2, lr}
 8010698:	4906      	ldr	r1, [pc, #24]	; (80106b4 <iprintf+0x20>)
 801069a:	ab04      	add	r3, sp, #16
 801069c:	6808      	ldr	r0, [r1, #0]
 801069e:	f853 2b04 	ldr.w	r2, [r3], #4
 80106a2:	6881      	ldr	r1, [r0, #8]
 80106a4:	9301      	str	r3, [sp, #4]
 80106a6:	f000 fa87 	bl	8010bb8 <_vfiprintf_r>
 80106aa:	b003      	add	sp, #12
 80106ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80106b0:	b004      	add	sp, #16
 80106b2:	4770      	bx	lr
 80106b4:	20000164 	.word	0x20000164

080106b8 <_puts_r>:
 80106b8:	6a03      	ldr	r3, [r0, #32]
 80106ba:	b570      	push	{r4, r5, r6, lr}
 80106bc:	6884      	ldr	r4, [r0, #8]
 80106be:	4605      	mov	r5, r0
 80106c0:	460e      	mov	r6, r1
 80106c2:	b90b      	cbnz	r3, 80106c8 <_puts_r+0x10>
 80106c4:	f7ff ffb0 	bl	8010628 <__sinit>
 80106c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106ca:	07db      	lsls	r3, r3, #31
 80106cc:	d405      	bmi.n	80106da <_puts_r+0x22>
 80106ce:	89a3      	ldrh	r3, [r4, #12]
 80106d0:	0598      	lsls	r0, r3, #22
 80106d2:	d402      	bmi.n	80106da <_puts_r+0x22>
 80106d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106d6:	f000 f89e 	bl	8010816 <__retarget_lock_acquire_recursive>
 80106da:	89a3      	ldrh	r3, [r4, #12]
 80106dc:	0719      	lsls	r1, r3, #28
 80106de:	d513      	bpl.n	8010708 <_puts_r+0x50>
 80106e0:	6923      	ldr	r3, [r4, #16]
 80106e2:	b18b      	cbz	r3, 8010708 <_puts_r+0x50>
 80106e4:	3e01      	subs	r6, #1
 80106e6:	68a3      	ldr	r3, [r4, #8]
 80106e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80106ec:	3b01      	subs	r3, #1
 80106ee:	60a3      	str	r3, [r4, #8]
 80106f0:	b9e9      	cbnz	r1, 801072e <_puts_r+0x76>
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	da2e      	bge.n	8010754 <_puts_r+0x9c>
 80106f6:	4622      	mov	r2, r4
 80106f8:	210a      	movs	r1, #10
 80106fa:	4628      	mov	r0, r5
 80106fc:	f000 fe26 	bl	801134c <__swbuf_r>
 8010700:	3001      	adds	r0, #1
 8010702:	d007      	beq.n	8010714 <_puts_r+0x5c>
 8010704:	250a      	movs	r5, #10
 8010706:	e007      	b.n	8010718 <_puts_r+0x60>
 8010708:	4621      	mov	r1, r4
 801070a:	4628      	mov	r0, r5
 801070c:	f000 fe5c 	bl	80113c8 <__swsetup_r>
 8010710:	2800      	cmp	r0, #0
 8010712:	d0e7      	beq.n	80106e4 <_puts_r+0x2c>
 8010714:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801071a:	07da      	lsls	r2, r3, #31
 801071c:	d405      	bmi.n	801072a <_puts_r+0x72>
 801071e:	89a3      	ldrh	r3, [r4, #12]
 8010720:	059b      	lsls	r3, r3, #22
 8010722:	d402      	bmi.n	801072a <_puts_r+0x72>
 8010724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010726:	f000 f877 	bl	8010818 <__retarget_lock_release_recursive>
 801072a:	4628      	mov	r0, r5
 801072c:	bd70      	pop	{r4, r5, r6, pc}
 801072e:	2b00      	cmp	r3, #0
 8010730:	da04      	bge.n	801073c <_puts_r+0x84>
 8010732:	69a2      	ldr	r2, [r4, #24]
 8010734:	429a      	cmp	r2, r3
 8010736:	dc06      	bgt.n	8010746 <_puts_r+0x8e>
 8010738:	290a      	cmp	r1, #10
 801073a:	d004      	beq.n	8010746 <_puts_r+0x8e>
 801073c:	6823      	ldr	r3, [r4, #0]
 801073e:	1c5a      	adds	r2, r3, #1
 8010740:	6022      	str	r2, [r4, #0]
 8010742:	7019      	strb	r1, [r3, #0]
 8010744:	e7cf      	b.n	80106e6 <_puts_r+0x2e>
 8010746:	4622      	mov	r2, r4
 8010748:	4628      	mov	r0, r5
 801074a:	f000 fdff 	bl	801134c <__swbuf_r>
 801074e:	3001      	adds	r0, #1
 8010750:	d1c9      	bne.n	80106e6 <_puts_r+0x2e>
 8010752:	e7df      	b.n	8010714 <_puts_r+0x5c>
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	250a      	movs	r5, #10
 8010758:	1c5a      	adds	r2, r3, #1
 801075a:	6022      	str	r2, [r4, #0]
 801075c:	701d      	strb	r5, [r3, #0]
 801075e:	e7db      	b.n	8010718 <_puts_r+0x60>

08010760 <puts>:
 8010760:	4b02      	ldr	r3, [pc, #8]	; (801076c <puts+0xc>)
 8010762:	4601      	mov	r1, r0
 8010764:	6818      	ldr	r0, [r3, #0]
 8010766:	f7ff bfa7 	b.w	80106b8 <_puts_r>
 801076a:	bf00      	nop
 801076c:	20000164 	.word	0x20000164

08010770 <strcat>:
 8010770:	b510      	push	{r4, lr}
 8010772:	4602      	mov	r2, r0
 8010774:	7814      	ldrb	r4, [r2, #0]
 8010776:	4613      	mov	r3, r2
 8010778:	3201      	adds	r2, #1
 801077a:	2c00      	cmp	r4, #0
 801077c:	d1fa      	bne.n	8010774 <strcat+0x4>
 801077e:	3b01      	subs	r3, #1
 8010780:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010784:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010788:	2a00      	cmp	r2, #0
 801078a:	d1f9      	bne.n	8010780 <strcat+0x10>
 801078c:	bd10      	pop	{r4, pc}

0801078e <memset>:
 801078e:	4402      	add	r2, r0
 8010790:	4603      	mov	r3, r0
 8010792:	4293      	cmp	r3, r2
 8010794:	d100      	bne.n	8010798 <memset+0xa>
 8010796:	4770      	bx	lr
 8010798:	f803 1b01 	strb.w	r1, [r3], #1
 801079c:	e7f9      	b.n	8010792 <memset+0x4>
	...

080107a0 <_sbrk_r>:
 80107a0:	b538      	push	{r3, r4, r5, lr}
 80107a2:	4d06      	ldr	r5, [pc, #24]	; (80107bc <_sbrk_r+0x1c>)
 80107a4:	2300      	movs	r3, #0
 80107a6:	4604      	mov	r4, r0
 80107a8:	4608      	mov	r0, r1
 80107aa:	602b      	str	r3, [r5, #0]
 80107ac:	f7f1 f836 	bl	800181c <_sbrk>
 80107b0:	1c43      	adds	r3, r0, #1
 80107b2:	d102      	bne.n	80107ba <_sbrk_r+0x1a>
 80107b4:	682b      	ldr	r3, [r5, #0]
 80107b6:	b103      	cbz	r3, 80107ba <_sbrk_r+0x1a>
 80107b8:	6023      	str	r3, [r4, #0]
 80107ba:	bd38      	pop	{r3, r4, r5, pc}
 80107bc:	200045d0 	.word	0x200045d0

080107c0 <__errno>:
 80107c0:	4b01      	ldr	r3, [pc, #4]	; (80107c8 <__errno+0x8>)
 80107c2:	6818      	ldr	r0, [r3, #0]
 80107c4:	4770      	bx	lr
 80107c6:	bf00      	nop
 80107c8:	20000164 	.word	0x20000164

080107cc <__libc_init_array>:
 80107cc:	b570      	push	{r4, r5, r6, lr}
 80107ce:	4d0d      	ldr	r5, [pc, #52]	; (8010804 <__libc_init_array+0x38>)
 80107d0:	4c0d      	ldr	r4, [pc, #52]	; (8010808 <__libc_init_array+0x3c>)
 80107d2:	1b64      	subs	r4, r4, r5
 80107d4:	10a4      	asrs	r4, r4, #2
 80107d6:	2600      	movs	r6, #0
 80107d8:	42a6      	cmp	r6, r4
 80107da:	d109      	bne.n	80107f0 <__libc_init_array+0x24>
 80107dc:	4d0b      	ldr	r5, [pc, #44]	; (801080c <__libc_init_array+0x40>)
 80107de:	4c0c      	ldr	r4, [pc, #48]	; (8010810 <__libc_init_array+0x44>)
 80107e0:	f000 ff44 	bl	801166c <_init>
 80107e4:	1b64      	subs	r4, r4, r5
 80107e6:	10a4      	asrs	r4, r4, #2
 80107e8:	2600      	movs	r6, #0
 80107ea:	42a6      	cmp	r6, r4
 80107ec:	d105      	bne.n	80107fa <__libc_init_array+0x2e>
 80107ee:	bd70      	pop	{r4, r5, r6, pc}
 80107f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80107f4:	4798      	blx	r3
 80107f6:	3601      	adds	r6, #1
 80107f8:	e7ee      	b.n	80107d8 <__libc_init_array+0xc>
 80107fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80107fe:	4798      	blx	r3
 8010800:	3601      	adds	r6, #1
 8010802:	e7f2      	b.n	80107ea <__libc_init_array+0x1e>
 8010804:	08011eec 	.word	0x08011eec
 8010808:	08011eec 	.word	0x08011eec
 801080c:	08011eec 	.word	0x08011eec
 8010810:	08011ef0 	.word	0x08011ef0

08010814 <__retarget_lock_init_recursive>:
 8010814:	4770      	bx	lr

08010816 <__retarget_lock_acquire_recursive>:
 8010816:	4770      	bx	lr

08010818 <__retarget_lock_release_recursive>:
 8010818:	4770      	bx	lr
	...

0801081c <_free_r>:
 801081c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801081e:	2900      	cmp	r1, #0
 8010820:	d044      	beq.n	80108ac <_free_r+0x90>
 8010822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010826:	9001      	str	r0, [sp, #4]
 8010828:	2b00      	cmp	r3, #0
 801082a:	f1a1 0404 	sub.w	r4, r1, #4
 801082e:	bfb8      	it	lt
 8010830:	18e4      	addlt	r4, r4, r3
 8010832:	f7ff fe61 	bl	80104f8 <__malloc_lock>
 8010836:	4a1e      	ldr	r2, [pc, #120]	; (80108b0 <_free_r+0x94>)
 8010838:	9801      	ldr	r0, [sp, #4]
 801083a:	6813      	ldr	r3, [r2, #0]
 801083c:	b933      	cbnz	r3, 801084c <_free_r+0x30>
 801083e:	6063      	str	r3, [r4, #4]
 8010840:	6014      	str	r4, [r2, #0]
 8010842:	b003      	add	sp, #12
 8010844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010848:	f7ff be5c 	b.w	8010504 <__malloc_unlock>
 801084c:	42a3      	cmp	r3, r4
 801084e:	d908      	bls.n	8010862 <_free_r+0x46>
 8010850:	6825      	ldr	r5, [r4, #0]
 8010852:	1961      	adds	r1, r4, r5
 8010854:	428b      	cmp	r3, r1
 8010856:	bf01      	itttt	eq
 8010858:	6819      	ldreq	r1, [r3, #0]
 801085a:	685b      	ldreq	r3, [r3, #4]
 801085c:	1949      	addeq	r1, r1, r5
 801085e:	6021      	streq	r1, [r4, #0]
 8010860:	e7ed      	b.n	801083e <_free_r+0x22>
 8010862:	461a      	mov	r2, r3
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	b10b      	cbz	r3, 801086c <_free_r+0x50>
 8010868:	42a3      	cmp	r3, r4
 801086a:	d9fa      	bls.n	8010862 <_free_r+0x46>
 801086c:	6811      	ldr	r1, [r2, #0]
 801086e:	1855      	adds	r5, r2, r1
 8010870:	42a5      	cmp	r5, r4
 8010872:	d10b      	bne.n	801088c <_free_r+0x70>
 8010874:	6824      	ldr	r4, [r4, #0]
 8010876:	4421      	add	r1, r4
 8010878:	1854      	adds	r4, r2, r1
 801087a:	42a3      	cmp	r3, r4
 801087c:	6011      	str	r1, [r2, #0]
 801087e:	d1e0      	bne.n	8010842 <_free_r+0x26>
 8010880:	681c      	ldr	r4, [r3, #0]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	6053      	str	r3, [r2, #4]
 8010886:	440c      	add	r4, r1
 8010888:	6014      	str	r4, [r2, #0]
 801088a:	e7da      	b.n	8010842 <_free_r+0x26>
 801088c:	d902      	bls.n	8010894 <_free_r+0x78>
 801088e:	230c      	movs	r3, #12
 8010890:	6003      	str	r3, [r0, #0]
 8010892:	e7d6      	b.n	8010842 <_free_r+0x26>
 8010894:	6825      	ldr	r5, [r4, #0]
 8010896:	1961      	adds	r1, r4, r5
 8010898:	428b      	cmp	r3, r1
 801089a:	bf04      	itt	eq
 801089c:	6819      	ldreq	r1, [r3, #0]
 801089e:	685b      	ldreq	r3, [r3, #4]
 80108a0:	6063      	str	r3, [r4, #4]
 80108a2:	bf04      	itt	eq
 80108a4:	1949      	addeq	r1, r1, r5
 80108a6:	6021      	streq	r1, [r4, #0]
 80108a8:	6054      	str	r4, [r2, #4]
 80108aa:	e7ca      	b.n	8010842 <_free_r+0x26>
 80108ac:	b003      	add	sp, #12
 80108ae:	bd30      	pop	{r4, r5, pc}
 80108b0:	20004488 	.word	0x20004488

080108b4 <__ssputs_r>:
 80108b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108b8:	688e      	ldr	r6, [r1, #8]
 80108ba:	461f      	mov	r7, r3
 80108bc:	42be      	cmp	r6, r7
 80108be:	680b      	ldr	r3, [r1, #0]
 80108c0:	4682      	mov	sl, r0
 80108c2:	460c      	mov	r4, r1
 80108c4:	4690      	mov	r8, r2
 80108c6:	d82c      	bhi.n	8010922 <__ssputs_r+0x6e>
 80108c8:	898a      	ldrh	r2, [r1, #12]
 80108ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108ce:	d026      	beq.n	801091e <__ssputs_r+0x6a>
 80108d0:	6965      	ldr	r5, [r4, #20]
 80108d2:	6909      	ldr	r1, [r1, #16]
 80108d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108d8:	eba3 0901 	sub.w	r9, r3, r1
 80108dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108e0:	1c7b      	adds	r3, r7, #1
 80108e2:	444b      	add	r3, r9
 80108e4:	106d      	asrs	r5, r5, #1
 80108e6:	429d      	cmp	r5, r3
 80108e8:	bf38      	it	cc
 80108ea:	461d      	movcc	r5, r3
 80108ec:	0553      	lsls	r3, r2, #21
 80108ee:	d527      	bpl.n	8010940 <__ssputs_r+0x8c>
 80108f0:	4629      	mov	r1, r5
 80108f2:	f7ff fd4d 	bl	8010390 <_malloc_r>
 80108f6:	4606      	mov	r6, r0
 80108f8:	b360      	cbz	r0, 8010954 <__ssputs_r+0xa0>
 80108fa:	6921      	ldr	r1, [r4, #16]
 80108fc:	464a      	mov	r2, r9
 80108fe:	f000 fe9f 	bl	8011640 <memcpy>
 8010902:	89a3      	ldrh	r3, [r4, #12]
 8010904:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801090c:	81a3      	strh	r3, [r4, #12]
 801090e:	6126      	str	r6, [r4, #16]
 8010910:	6165      	str	r5, [r4, #20]
 8010912:	444e      	add	r6, r9
 8010914:	eba5 0509 	sub.w	r5, r5, r9
 8010918:	6026      	str	r6, [r4, #0]
 801091a:	60a5      	str	r5, [r4, #8]
 801091c:	463e      	mov	r6, r7
 801091e:	42be      	cmp	r6, r7
 8010920:	d900      	bls.n	8010924 <__ssputs_r+0x70>
 8010922:	463e      	mov	r6, r7
 8010924:	6820      	ldr	r0, [r4, #0]
 8010926:	4632      	mov	r2, r6
 8010928:	4641      	mov	r1, r8
 801092a:	f000 fe07 	bl	801153c <memmove>
 801092e:	68a3      	ldr	r3, [r4, #8]
 8010930:	1b9b      	subs	r3, r3, r6
 8010932:	60a3      	str	r3, [r4, #8]
 8010934:	6823      	ldr	r3, [r4, #0]
 8010936:	4433      	add	r3, r6
 8010938:	6023      	str	r3, [r4, #0]
 801093a:	2000      	movs	r0, #0
 801093c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010940:	462a      	mov	r2, r5
 8010942:	f000 fcd4 	bl	80112ee <_realloc_r>
 8010946:	4606      	mov	r6, r0
 8010948:	2800      	cmp	r0, #0
 801094a:	d1e0      	bne.n	801090e <__ssputs_r+0x5a>
 801094c:	6921      	ldr	r1, [r4, #16]
 801094e:	4650      	mov	r0, sl
 8010950:	f7ff ff64 	bl	801081c <_free_r>
 8010954:	230c      	movs	r3, #12
 8010956:	f8ca 3000 	str.w	r3, [sl]
 801095a:	89a3      	ldrh	r3, [r4, #12]
 801095c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010960:	81a3      	strh	r3, [r4, #12]
 8010962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010966:	e7e9      	b.n	801093c <__ssputs_r+0x88>

08010968 <_svfiprintf_r>:
 8010968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801096c:	4698      	mov	r8, r3
 801096e:	898b      	ldrh	r3, [r1, #12]
 8010970:	061b      	lsls	r3, r3, #24
 8010972:	b09d      	sub	sp, #116	; 0x74
 8010974:	4607      	mov	r7, r0
 8010976:	460d      	mov	r5, r1
 8010978:	4614      	mov	r4, r2
 801097a:	d50e      	bpl.n	801099a <_svfiprintf_r+0x32>
 801097c:	690b      	ldr	r3, [r1, #16]
 801097e:	b963      	cbnz	r3, 801099a <_svfiprintf_r+0x32>
 8010980:	2140      	movs	r1, #64	; 0x40
 8010982:	f7ff fd05 	bl	8010390 <_malloc_r>
 8010986:	6028      	str	r0, [r5, #0]
 8010988:	6128      	str	r0, [r5, #16]
 801098a:	b920      	cbnz	r0, 8010996 <_svfiprintf_r+0x2e>
 801098c:	230c      	movs	r3, #12
 801098e:	603b      	str	r3, [r7, #0]
 8010990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010994:	e0d0      	b.n	8010b38 <_svfiprintf_r+0x1d0>
 8010996:	2340      	movs	r3, #64	; 0x40
 8010998:	616b      	str	r3, [r5, #20]
 801099a:	2300      	movs	r3, #0
 801099c:	9309      	str	r3, [sp, #36]	; 0x24
 801099e:	2320      	movs	r3, #32
 80109a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80109a8:	2330      	movs	r3, #48	; 0x30
 80109aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010b50 <_svfiprintf_r+0x1e8>
 80109ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109b2:	f04f 0901 	mov.w	r9, #1
 80109b6:	4623      	mov	r3, r4
 80109b8:	469a      	mov	sl, r3
 80109ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109be:	b10a      	cbz	r2, 80109c4 <_svfiprintf_r+0x5c>
 80109c0:	2a25      	cmp	r2, #37	; 0x25
 80109c2:	d1f9      	bne.n	80109b8 <_svfiprintf_r+0x50>
 80109c4:	ebba 0b04 	subs.w	fp, sl, r4
 80109c8:	d00b      	beq.n	80109e2 <_svfiprintf_r+0x7a>
 80109ca:	465b      	mov	r3, fp
 80109cc:	4622      	mov	r2, r4
 80109ce:	4629      	mov	r1, r5
 80109d0:	4638      	mov	r0, r7
 80109d2:	f7ff ff6f 	bl	80108b4 <__ssputs_r>
 80109d6:	3001      	adds	r0, #1
 80109d8:	f000 80a9 	beq.w	8010b2e <_svfiprintf_r+0x1c6>
 80109dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109de:	445a      	add	r2, fp
 80109e0:	9209      	str	r2, [sp, #36]	; 0x24
 80109e2:	f89a 3000 	ldrb.w	r3, [sl]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	f000 80a1 	beq.w	8010b2e <_svfiprintf_r+0x1c6>
 80109ec:	2300      	movs	r3, #0
 80109ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109f6:	f10a 0a01 	add.w	sl, sl, #1
 80109fa:	9304      	str	r3, [sp, #16]
 80109fc:	9307      	str	r3, [sp, #28]
 80109fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a02:	931a      	str	r3, [sp, #104]	; 0x68
 8010a04:	4654      	mov	r4, sl
 8010a06:	2205      	movs	r2, #5
 8010a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a0c:	4850      	ldr	r0, [pc, #320]	; (8010b50 <_svfiprintf_r+0x1e8>)
 8010a0e:	f7ef fc17 	bl	8000240 <memchr>
 8010a12:	9a04      	ldr	r2, [sp, #16]
 8010a14:	b9d8      	cbnz	r0, 8010a4e <_svfiprintf_r+0xe6>
 8010a16:	06d0      	lsls	r0, r2, #27
 8010a18:	bf44      	itt	mi
 8010a1a:	2320      	movmi	r3, #32
 8010a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a20:	0711      	lsls	r1, r2, #28
 8010a22:	bf44      	itt	mi
 8010a24:	232b      	movmi	r3, #43	; 0x2b
 8010a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8010a30:	d015      	beq.n	8010a5e <_svfiprintf_r+0xf6>
 8010a32:	9a07      	ldr	r2, [sp, #28]
 8010a34:	4654      	mov	r4, sl
 8010a36:	2000      	movs	r0, #0
 8010a38:	f04f 0c0a 	mov.w	ip, #10
 8010a3c:	4621      	mov	r1, r4
 8010a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a42:	3b30      	subs	r3, #48	; 0x30
 8010a44:	2b09      	cmp	r3, #9
 8010a46:	d94d      	bls.n	8010ae4 <_svfiprintf_r+0x17c>
 8010a48:	b1b0      	cbz	r0, 8010a78 <_svfiprintf_r+0x110>
 8010a4a:	9207      	str	r2, [sp, #28]
 8010a4c:	e014      	b.n	8010a78 <_svfiprintf_r+0x110>
 8010a4e:	eba0 0308 	sub.w	r3, r0, r8
 8010a52:	fa09 f303 	lsl.w	r3, r9, r3
 8010a56:	4313      	orrs	r3, r2
 8010a58:	9304      	str	r3, [sp, #16]
 8010a5a:	46a2      	mov	sl, r4
 8010a5c:	e7d2      	b.n	8010a04 <_svfiprintf_r+0x9c>
 8010a5e:	9b03      	ldr	r3, [sp, #12]
 8010a60:	1d19      	adds	r1, r3, #4
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	9103      	str	r1, [sp, #12]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	bfbb      	ittet	lt
 8010a6a:	425b      	neglt	r3, r3
 8010a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8010a70:	9307      	strge	r3, [sp, #28]
 8010a72:	9307      	strlt	r3, [sp, #28]
 8010a74:	bfb8      	it	lt
 8010a76:	9204      	strlt	r2, [sp, #16]
 8010a78:	7823      	ldrb	r3, [r4, #0]
 8010a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a7c:	d10c      	bne.n	8010a98 <_svfiprintf_r+0x130>
 8010a7e:	7863      	ldrb	r3, [r4, #1]
 8010a80:	2b2a      	cmp	r3, #42	; 0x2a
 8010a82:	d134      	bne.n	8010aee <_svfiprintf_r+0x186>
 8010a84:	9b03      	ldr	r3, [sp, #12]
 8010a86:	1d1a      	adds	r2, r3, #4
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	9203      	str	r2, [sp, #12]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	bfb8      	it	lt
 8010a90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010a94:	3402      	adds	r4, #2
 8010a96:	9305      	str	r3, [sp, #20]
 8010a98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010b60 <_svfiprintf_r+0x1f8>
 8010a9c:	7821      	ldrb	r1, [r4, #0]
 8010a9e:	2203      	movs	r2, #3
 8010aa0:	4650      	mov	r0, sl
 8010aa2:	f7ef fbcd 	bl	8000240 <memchr>
 8010aa6:	b138      	cbz	r0, 8010ab8 <_svfiprintf_r+0x150>
 8010aa8:	9b04      	ldr	r3, [sp, #16]
 8010aaa:	eba0 000a 	sub.w	r0, r0, sl
 8010aae:	2240      	movs	r2, #64	; 0x40
 8010ab0:	4082      	lsls	r2, r0
 8010ab2:	4313      	orrs	r3, r2
 8010ab4:	3401      	adds	r4, #1
 8010ab6:	9304      	str	r3, [sp, #16]
 8010ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010abc:	4825      	ldr	r0, [pc, #148]	; (8010b54 <_svfiprintf_r+0x1ec>)
 8010abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ac2:	2206      	movs	r2, #6
 8010ac4:	f7ef fbbc 	bl	8000240 <memchr>
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d038      	beq.n	8010b3e <_svfiprintf_r+0x1d6>
 8010acc:	4b22      	ldr	r3, [pc, #136]	; (8010b58 <_svfiprintf_r+0x1f0>)
 8010ace:	bb1b      	cbnz	r3, 8010b18 <_svfiprintf_r+0x1b0>
 8010ad0:	9b03      	ldr	r3, [sp, #12]
 8010ad2:	3307      	adds	r3, #7
 8010ad4:	f023 0307 	bic.w	r3, r3, #7
 8010ad8:	3308      	adds	r3, #8
 8010ada:	9303      	str	r3, [sp, #12]
 8010adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ade:	4433      	add	r3, r6
 8010ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ae2:	e768      	b.n	80109b6 <_svfiprintf_r+0x4e>
 8010ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ae8:	460c      	mov	r4, r1
 8010aea:	2001      	movs	r0, #1
 8010aec:	e7a6      	b.n	8010a3c <_svfiprintf_r+0xd4>
 8010aee:	2300      	movs	r3, #0
 8010af0:	3401      	adds	r4, #1
 8010af2:	9305      	str	r3, [sp, #20]
 8010af4:	4619      	mov	r1, r3
 8010af6:	f04f 0c0a 	mov.w	ip, #10
 8010afa:	4620      	mov	r0, r4
 8010afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b00:	3a30      	subs	r2, #48	; 0x30
 8010b02:	2a09      	cmp	r2, #9
 8010b04:	d903      	bls.n	8010b0e <_svfiprintf_r+0x1a6>
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d0c6      	beq.n	8010a98 <_svfiprintf_r+0x130>
 8010b0a:	9105      	str	r1, [sp, #20]
 8010b0c:	e7c4      	b.n	8010a98 <_svfiprintf_r+0x130>
 8010b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b12:	4604      	mov	r4, r0
 8010b14:	2301      	movs	r3, #1
 8010b16:	e7f0      	b.n	8010afa <_svfiprintf_r+0x192>
 8010b18:	ab03      	add	r3, sp, #12
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	462a      	mov	r2, r5
 8010b1e:	4b0f      	ldr	r3, [pc, #60]	; (8010b5c <_svfiprintf_r+0x1f4>)
 8010b20:	a904      	add	r1, sp, #16
 8010b22:	4638      	mov	r0, r7
 8010b24:	f3af 8000 	nop.w
 8010b28:	1c42      	adds	r2, r0, #1
 8010b2a:	4606      	mov	r6, r0
 8010b2c:	d1d6      	bne.n	8010adc <_svfiprintf_r+0x174>
 8010b2e:	89ab      	ldrh	r3, [r5, #12]
 8010b30:	065b      	lsls	r3, r3, #25
 8010b32:	f53f af2d 	bmi.w	8010990 <_svfiprintf_r+0x28>
 8010b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b38:	b01d      	add	sp, #116	; 0x74
 8010b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3e:	ab03      	add	r3, sp, #12
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	462a      	mov	r2, r5
 8010b44:	4b05      	ldr	r3, [pc, #20]	; (8010b5c <_svfiprintf_r+0x1f4>)
 8010b46:	a904      	add	r1, sp, #16
 8010b48:	4638      	mov	r0, r7
 8010b4a:	f000 f9bd 	bl	8010ec8 <_printf_i>
 8010b4e:	e7eb      	b.n	8010b28 <_svfiprintf_r+0x1c0>
 8010b50:	08011eb0 	.word	0x08011eb0
 8010b54:	08011eba 	.word	0x08011eba
 8010b58:	00000000 	.word	0x00000000
 8010b5c:	080108b5 	.word	0x080108b5
 8010b60:	08011eb6 	.word	0x08011eb6

08010b64 <__sfputc_r>:
 8010b64:	6893      	ldr	r3, [r2, #8]
 8010b66:	3b01      	subs	r3, #1
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	b410      	push	{r4}
 8010b6c:	6093      	str	r3, [r2, #8]
 8010b6e:	da08      	bge.n	8010b82 <__sfputc_r+0x1e>
 8010b70:	6994      	ldr	r4, [r2, #24]
 8010b72:	42a3      	cmp	r3, r4
 8010b74:	db01      	blt.n	8010b7a <__sfputc_r+0x16>
 8010b76:	290a      	cmp	r1, #10
 8010b78:	d103      	bne.n	8010b82 <__sfputc_r+0x1e>
 8010b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b7e:	f000 bbe5 	b.w	801134c <__swbuf_r>
 8010b82:	6813      	ldr	r3, [r2, #0]
 8010b84:	1c58      	adds	r0, r3, #1
 8010b86:	6010      	str	r0, [r2, #0]
 8010b88:	7019      	strb	r1, [r3, #0]
 8010b8a:	4608      	mov	r0, r1
 8010b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b90:	4770      	bx	lr

08010b92 <__sfputs_r>:
 8010b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b94:	4606      	mov	r6, r0
 8010b96:	460f      	mov	r7, r1
 8010b98:	4614      	mov	r4, r2
 8010b9a:	18d5      	adds	r5, r2, r3
 8010b9c:	42ac      	cmp	r4, r5
 8010b9e:	d101      	bne.n	8010ba4 <__sfputs_r+0x12>
 8010ba0:	2000      	movs	r0, #0
 8010ba2:	e007      	b.n	8010bb4 <__sfputs_r+0x22>
 8010ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ba8:	463a      	mov	r2, r7
 8010baa:	4630      	mov	r0, r6
 8010bac:	f7ff ffda 	bl	8010b64 <__sfputc_r>
 8010bb0:	1c43      	adds	r3, r0, #1
 8010bb2:	d1f3      	bne.n	8010b9c <__sfputs_r+0xa>
 8010bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010bb8 <_vfiprintf_r>:
 8010bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bbc:	460d      	mov	r5, r1
 8010bbe:	b09d      	sub	sp, #116	; 0x74
 8010bc0:	4614      	mov	r4, r2
 8010bc2:	4698      	mov	r8, r3
 8010bc4:	4606      	mov	r6, r0
 8010bc6:	b118      	cbz	r0, 8010bd0 <_vfiprintf_r+0x18>
 8010bc8:	6a03      	ldr	r3, [r0, #32]
 8010bca:	b90b      	cbnz	r3, 8010bd0 <_vfiprintf_r+0x18>
 8010bcc:	f7ff fd2c 	bl	8010628 <__sinit>
 8010bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bd2:	07d9      	lsls	r1, r3, #31
 8010bd4:	d405      	bmi.n	8010be2 <_vfiprintf_r+0x2a>
 8010bd6:	89ab      	ldrh	r3, [r5, #12]
 8010bd8:	059a      	lsls	r2, r3, #22
 8010bda:	d402      	bmi.n	8010be2 <_vfiprintf_r+0x2a>
 8010bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bde:	f7ff fe1a 	bl	8010816 <__retarget_lock_acquire_recursive>
 8010be2:	89ab      	ldrh	r3, [r5, #12]
 8010be4:	071b      	lsls	r3, r3, #28
 8010be6:	d501      	bpl.n	8010bec <_vfiprintf_r+0x34>
 8010be8:	692b      	ldr	r3, [r5, #16]
 8010bea:	b99b      	cbnz	r3, 8010c14 <_vfiprintf_r+0x5c>
 8010bec:	4629      	mov	r1, r5
 8010bee:	4630      	mov	r0, r6
 8010bf0:	f000 fbea 	bl	80113c8 <__swsetup_r>
 8010bf4:	b170      	cbz	r0, 8010c14 <_vfiprintf_r+0x5c>
 8010bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bf8:	07dc      	lsls	r4, r3, #31
 8010bfa:	d504      	bpl.n	8010c06 <_vfiprintf_r+0x4e>
 8010bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c00:	b01d      	add	sp, #116	; 0x74
 8010c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c06:	89ab      	ldrh	r3, [r5, #12]
 8010c08:	0598      	lsls	r0, r3, #22
 8010c0a:	d4f7      	bmi.n	8010bfc <_vfiprintf_r+0x44>
 8010c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c0e:	f7ff fe03 	bl	8010818 <__retarget_lock_release_recursive>
 8010c12:	e7f3      	b.n	8010bfc <_vfiprintf_r+0x44>
 8010c14:	2300      	movs	r3, #0
 8010c16:	9309      	str	r3, [sp, #36]	; 0x24
 8010c18:	2320      	movs	r3, #32
 8010c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c22:	2330      	movs	r3, #48	; 0x30
 8010c24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010dd8 <_vfiprintf_r+0x220>
 8010c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c2c:	f04f 0901 	mov.w	r9, #1
 8010c30:	4623      	mov	r3, r4
 8010c32:	469a      	mov	sl, r3
 8010c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c38:	b10a      	cbz	r2, 8010c3e <_vfiprintf_r+0x86>
 8010c3a:	2a25      	cmp	r2, #37	; 0x25
 8010c3c:	d1f9      	bne.n	8010c32 <_vfiprintf_r+0x7a>
 8010c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8010c42:	d00b      	beq.n	8010c5c <_vfiprintf_r+0xa4>
 8010c44:	465b      	mov	r3, fp
 8010c46:	4622      	mov	r2, r4
 8010c48:	4629      	mov	r1, r5
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	f7ff ffa1 	bl	8010b92 <__sfputs_r>
 8010c50:	3001      	adds	r0, #1
 8010c52:	f000 80a9 	beq.w	8010da8 <_vfiprintf_r+0x1f0>
 8010c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c58:	445a      	add	r2, fp
 8010c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8010c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f000 80a1 	beq.w	8010da8 <_vfiprintf_r+0x1f0>
 8010c66:	2300      	movs	r3, #0
 8010c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c70:	f10a 0a01 	add.w	sl, sl, #1
 8010c74:	9304      	str	r3, [sp, #16]
 8010c76:	9307      	str	r3, [sp, #28]
 8010c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8010c7e:	4654      	mov	r4, sl
 8010c80:	2205      	movs	r2, #5
 8010c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c86:	4854      	ldr	r0, [pc, #336]	; (8010dd8 <_vfiprintf_r+0x220>)
 8010c88:	f7ef fada 	bl	8000240 <memchr>
 8010c8c:	9a04      	ldr	r2, [sp, #16]
 8010c8e:	b9d8      	cbnz	r0, 8010cc8 <_vfiprintf_r+0x110>
 8010c90:	06d1      	lsls	r1, r2, #27
 8010c92:	bf44      	itt	mi
 8010c94:	2320      	movmi	r3, #32
 8010c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c9a:	0713      	lsls	r3, r2, #28
 8010c9c:	bf44      	itt	mi
 8010c9e:	232b      	movmi	r3, #43	; 0x2b
 8010ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8010caa:	d015      	beq.n	8010cd8 <_vfiprintf_r+0x120>
 8010cac:	9a07      	ldr	r2, [sp, #28]
 8010cae:	4654      	mov	r4, sl
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	f04f 0c0a 	mov.w	ip, #10
 8010cb6:	4621      	mov	r1, r4
 8010cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cbc:	3b30      	subs	r3, #48	; 0x30
 8010cbe:	2b09      	cmp	r3, #9
 8010cc0:	d94d      	bls.n	8010d5e <_vfiprintf_r+0x1a6>
 8010cc2:	b1b0      	cbz	r0, 8010cf2 <_vfiprintf_r+0x13a>
 8010cc4:	9207      	str	r2, [sp, #28]
 8010cc6:	e014      	b.n	8010cf2 <_vfiprintf_r+0x13a>
 8010cc8:	eba0 0308 	sub.w	r3, r0, r8
 8010ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8010cd0:	4313      	orrs	r3, r2
 8010cd2:	9304      	str	r3, [sp, #16]
 8010cd4:	46a2      	mov	sl, r4
 8010cd6:	e7d2      	b.n	8010c7e <_vfiprintf_r+0xc6>
 8010cd8:	9b03      	ldr	r3, [sp, #12]
 8010cda:	1d19      	adds	r1, r3, #4
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	9103      	str	r1, [sp, #12]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	bfbb      	ittet	lt
 8010ce4:	425b      	neglt	r3, r3
 8010ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8010cea:	9307      	strge	r3, [sp, #28]
 8010cec:	9307      	strlt	r3, [sp, #28]
 8010cee:	bfb8      	it	lt
 8010cf0:	9204      	strlt	r2, [sp, #16]
 8010cf2:	7823      	ldrb	r3, [r4, #0]
 8010cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8010cf6:	d10c      	bne.n	8010d12 <_vfiprintf_r+0x15a>
 8010cf8:	7863      	ldrb	r3, [r4, #1]
 8010cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8010cfc:	d134      	bne.n	8010d68 <_vfiprintf_r+0x1b0>
 8010cfe:	9b03      	ldr	r3, [sp, #12]
 8010d00:	1d1a      	adds	r2, r3, #4
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	9203      	str	r2, [sp, #12]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	bfb8      	it	lt
 8010d0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010d0e:	3402      	adds	r4, #2
 8010d10:	9305      	str	r3, [sp, #20]
 8010d12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010de8 <_vfiprintf_r+0x230>
 8010d16:	7821      	ldrb	r1, [r4, #0]
 8010d18:	2203      	movs	r2, #3
 8010d1a:	4650      	mov	r0, sl
 8010d1c:	f7ef fa90 	bl	8000240 <memchr>
 8010d20:	b138      	cbz	r0, 8010d32 <_vfiprintf_r+0x17a>
 8010d22:	9b04      	ldr	r3, [sp, #16]
 8010d24:	eba0 000a 	sub.w	r0, r0, sl
 8010d28:	2240      	movs	r2, #64	; 0x40
 8010d2a:	4082      	lsls	r2, r0
 8010d2c:	4313      	orrs	r3, r2
 8010d2e:	3401      	adds	r4, #1
 8010d30:	9304      	str	r3, [sp, #16]
 8010d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d36:	4829      	ldr	r0, [pc, #164]	; (8010ddc <_vfiprintf_r+0x224>)
 8010d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d3c:	2206      	movs	r2, #6
 8010d3e:	f7ef fa7f 	bl	8000240 <memchr>
 8010d42:	2800      	cmp	r0, #0
 8010d44:	d03f      	beq.n	8010dc6 <_vfiprintf_r+0x20e>
 8010d46:	4b26      	ldr	r3, [pc, #152]	; (8010de0 <_vfiprintf_r+0x228>)
 8010d48:	bb1b      	cbnz	r3, 8010d92 <_vfiprintf_r+0x1da>
 8010d4a:	9b03      	ldr	r3, [sp, #12]
 8010d4c:	3307      	adds	r3, #7
 8010d4e:	f023 0307 	bic.w	r3, r3, #7
 8010d52:	3308      	adds	r3, #8
 8010d54:	9303      	str	r3, [sp, #12]
 8010d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d58:	443b      	add	r3, r7
 8010d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d5c:	e768      	b.n	8010c30 <_vfiprintf_r+0x78>
 8010d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d62:	460c      	mov	r4, r1
 8010d64:	2001      	movs	r0, #1
 8010d66:	e7a6      	b.n	8010cb6 <_vfiprintf_r+0xfe>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	3401      	adds	r4, #1
 8010d6c:	9305      	str	r3, [sp, #20]
 8010d6e:	4619      	mov	r1, r3
 8010d70:	f04f 0c0a 	mov.w	ip, #10
 8010d74:	4620      	mov	r0, r4
 8010d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d7a:	3a30      	subs	r2, #48	; 0x30
 8010d7c:	2a09      	cmp	r2, #9
 8010d7e:	d903      	bls.n	8010d88 <_vfiprintf_r+0x1d0>
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d0c6      	beq.n	8010d12 <_vfiprintf_r+0x15a>
 8010d84:	9105      	str	r1, [sp, #20]
 8010d86:	e7c4      	b.n	8010d12 <_vfiprintf_r+0x15a>
 8010d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d8c:	4604      	mov	r4, r0
 8010d8e:	2301      	movs	r3, #1
 8010d90:	e7f0      	b.n	8010d74 <_vfiprintf_r+0x1bc>
 8010d92:	ab03      	add	r3, sp, #12
 8010d94:	9300      	str	r3, [sp, #0]
 8010d96:	462a      	mov	r2, r5
 8010d98:	4b12      	ldr	r3, [pc, #72]	; (8010de4 <_vfiprintf_r+0x22c>)
 8010d9a:	a904      	add	r1, sp, #16
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	f3af 8000 	nop.w
 8010da2:	4607      	mov	r7, r0
 8010da4:	1c78      	adds	r0, r7, #1
 8010da6:	d1d6      	bne.n	8010d56 <_vfiprintf_r+0x19e>
 8010da8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010daa:	07d9      	lsls	r1, r3, #31
 8010dac:	d405      	bmi.n	8010dba <_vfiprintf_r+0x202>
 8010dae:	89ab      	ldrh	r3, [r5, #12]
 8010db0:	059a      	lsls	r2, r3, #22
 8010db2:	d402      	bmi.n	8010dba <_vfiprintf_r+0x202>
 8010db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010db6:	f7ff fd2f 	bl	8010818 <__retarget_lock_release_recursive>
 8010dba:	89ab      	ldrh	r3, [r5, #12]
 8010dbc:	065b      	lsls	r3, r3, #25
 8010dbe:	f53f af1d 	bmi.w	8010bfc <_vfiprintf_r+0x44>
 8010dc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dc4:	e71c      	b.n	8010c00 <_vfiprintf_r+0x48>
 8010dc6:	ab03      	add	r3, sp, #12
 8010dc8:	9300      	str	r3, [sp, #0]
 8010dca:	462a      	mov	r2, r5
 8010dcc:	4b05      	ldr	r3, [pc, #20]	; (8010de4 <_vfiprintf_r+0x22c>)
 8010dce:	a904      	add	r1, sp, #16
 8010dd0:	4630      	mov	r0, r6
 8010dd2:	f000 f879 	bl	8010ec8 <_printf_i>
 8010dd6:	e7e4      	b.n	8010da2 <_vfiprintf_r+0x1ea>
 8010dd8:	08011eb0 	.word	0x08011eb0
 8010ddc:	08011eba 	.word	0x08011eba
 8010de0:	00000000 	.word	0x00000000
 8010de4:	08010b93 	.word	0x08010b93
 8010de8:	08011eb6 	.word	0x08011eb6

08010dec <_printf_common>:
 8010dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010df0:	4616      	mov	r6, r2
 8010df2:	4699      	mov	r9, r3
 8010df4:	688a      	ldr	r2, [r1, #8]
 8010df6:	690b      	ldr	r3, [r1, #16]
 8010df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	bfb8      	it	lt
 8010e00:	4613      	movlt	r3, r2
 8010e02:	6033      	str	r3, [r6, #0]
 8010e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e08:	4607      	mov	r7, r0
 8010e0a:	460c      	mov	r4, r1
 8010e0c:	b10a      	cbz	r2, 8010e12 <_printf_common+0x26>
 8010e0e:	3301      	adds	r3, #1
 8010e10:	6033      	str	r3, [r6, #0]
 8010e12:	6823      	ldr	r3, [r4, #0]
 8010e14:	0699      	lsls	r1, r3, #26
 8010e16:	bf42      	ittt	mi
 8010e18:	6833      	ldrmi	r3, [r6, #0]
 8010e1a:	3302      	addmi	r3, #2
 8010e1c:	6033      	strmi	r3, [r6, #0]
 8010e1e:	6825      	ldr	r5, [r4, #0]
 8010e20:	f015 0506 	ands.w	r5, r5, #6
 8010e24:	d106      	bne.n	8010e34 <_printf_common+0x48>
 8010e26:	f104 0a19 	add.w	sl, r4, #25
 8010e2a:	68e3      	ldr	r3, [r4, #12]
 8010e2c:	6832      	ldr	r2, [r6, #0]
 8010e2e:	1a9b      	subs	r3, r3, r2
 8010e30:	42ab      	cmp	r3, r5
 8010e32:	dc26      	bgt.n	8010e82 <_printf_common+0x96>
 8010e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e38:	1e13      	subs	r3, r2, #0
 8010e3a:	6822      	ldr	r2, [r4, #0]
 8010e3c:	bf18      	it	ne
 8010e3e:	2301      	movne	r3, #1
 8010e40:	0692      	lsls	r2, r2, #26
 8010e42:	d42b      	bmi.n	8010e9c <_printf_common+0xb0>
 8010e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e48:	4649      	mov	r1, r9
 8010e4a:	4638      	mov	r0, r7
 8010e4c:	47c0      	blx	r8
 8010e4e:	3001      	adds	r0, #1
 8010e50:	d01e      	beq.n	8010e90 <_printf_common+0xa4>
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	6922      	ldr	r2, [r4, #16]
 8010e56:	f003 0306 	and.w	r3, r3, #6
 8010e5a:	2b04      	cmp	r3, #4
 8010e5c:	bf02      	ittt	eq
 8010e5e:	68e5      	ldreq	r5, [r4, #12]
 8010e60:	6833      	ldreq	r3, [r6, #0]
 8010e62:	1aed      	subeq	r5, r5, r3
 8010e64:	68a3      	ldr	r3, [r4, #8]
 8010e66:	bf0c      	ite	eq
 8010e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e6c:	2500      	movne	r5, #0
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	bfc4      	itt	gt
 8010e72:	1a9b      	subgt	r3, r3, r2
 8010e74:	18ed      	addgt	r5, r5, r3
 8010e76:	2600      	movs	r6, #0
 8010e78:	341a      	adds	r4, #26
 8010e7a:	42b5      	cmp	r5, r6
 8010e7c:	d11a      	bne.n	8010eb4 <_printf_common+0xc8>
 8010e7e:	2000      	movs	r0, #0
 8010e80:	e008      	b.n	8010e94 <_printf_common+0xa8>
 8010e82:	2301      	movs	r3, #1
 8010e84:	4652      	mov	r2, sl
 8010e86:	4649      	mov	r1, r9
 8010e88:	4638      	mov	r0, r7
 8010e8a:	47c0      	blx	r8
 8010e8c:	3001      	adds	r0, #1
 8010e8e:	d103      	bne.n	8010e98 <_printf_common+0xac>
 8010e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e98:	3501      	adds	r5, #1
 8010e9a:	e7c6      	b.n	8010e2a <_printf_common+0x3e>
 8010e9c:	18e1      	adds	r1, r4, r3
 8010e9e:	1c5a      	adds	r2, r3, #1
 8010ea0:	2030      	movs	r0, #48	; 0x30
 8010ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ea6:	4422      	add	r2, r4
 8010ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010eb0:	3302      	adds	r3, #2
 8010eb2:	e7c7      	b.n	8010e44 <_printf_common+0x58>
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	4622      	mov	r2, r4
 8010eb8:	4649      	mov	r1, r9
 8010eba:	4638      	mov	r0, r7
 8010ebc:	47c0      	blx	r8
 8010ebe:	3001      	adds	r0, #1
 8010ec0:	d0e6      	beq.n	8010e90 <_printf_common+0xa4>
 8010ec2:	3601      	adds	r6, #1
 8010ec4:	e7d9      	b.n	8010e7a <_printf_common+0x8e>
	...

08010ec8 <_printf_i>:
 8010ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ecc:	7e0f      	ldrb	r7, [r1, #24]
 8010ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ed0:	2f78      	cmp	r7, #120	; 0x78
 8010ed2:	4691      	mov	r9, r2
 8010ed4:	4680      	mov	r8, r0
 8010ed6:	460c      	mov	r4, r1
 8010ed8:	469a      	mov	sl, r3
 8010eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010ede:	d807      	bhi.n	8010ef0 <_printf_i+0x28>
 8010ee0:	2f62      	cmp	r7, #98	; 0x62
 8010ee2:	d80a      	bhi.n	8010efa <_printf_i+0x32>
 8010ee4:	2f00      	cmp	r7, #0
 8010ee6:	f000 80d4 	beq.w	8011092 <_printf_i+0x1ca>
 8010eea:	2f58      	cmp	r7, #88	; 0x58
 8010eec:	f000 80c0 	beq.w	8011070 <_printf_i+0x1a8>
 8010ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ef8:	e03a      	b.n	8010f70 <_printf_i+0xa8>
 8010efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010efe:	2b15      	cmp	r3, #21
 8010f00:	d8f6      	bhi.n	8010ef0 <_printf_i+0x28>
 8010f02:	a101      	add	r1, pc, #4	; (adr r1, 8010f08 <_printf_i+0x40>)
 8010f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f08:	08010f61 	.word	0x08010f61
 8010f0c:	08010f75 	.word	0x08010f75
 8010f10:	08010ef1 	.word	0x08010ef1
 8010f14:	08010ef1 	.word	0x08010ef1
 8010f18:	08010ef1 	.word	0x08010ef1
 8010f1c:	08010ef1 	.word	0x08010ef1
 8010f20:	08010f75 	.word	0x08010f75
 8010f24:	08010ef1 	.word	0x08010ef1
 8010f28:	08010ef1 	.word	0x08010ef1
 8010f2c:	08010ef1 	.word	0x08010ef1
 8010f30:	08010ef1 	.word	0x08010ef1
 8010f34:	08011079 	.word	0x08011079
 8010f38:	08010fa1 	.word	0x08010fa1
 8010f3c:	08011033 	.word	0x08011033
 8010f40:	08010ef1 	.word	0x08010ef1
 8010f44:	08010ef1 	.word	0x08010ef1
 8010f48:	0801109b 	.word	0x0801109b
 8010f4c:	08010ef1 	.word	0x08010ef1
 8010f50:	08010fa1 	.word	0x08010fa1
 8010f54:	08010ef1 	.word	0x08010ef1
 8010f58:	08010ef1 	.word	0x08010ef1
 8010f5c:	0801103b 	.word	0x0801103b
 8010f60:	682b      	ldr	r3, [r5, #0]
 8010f62:	1d1a      	adds	r2, r3, #4
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	602a      	str	r2, [r5, #0]
 8010f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f70:	2301      	movs	r3, #1
 8010f72:	e09f      	b.n	80110b4 <_printf_i+0x1ec>
 8010f74:	6820      	ldr	r0, [r4, #0]
 8010f76:	682b      	ldr	r3, [r5, #0]
 8010f78:	0607      	lsls	r7, r0, #24
 8010f7a:	f103 0104 	add.w	r1, r3, #4
 8010f7e:	6029      	str	r1, [r5, #0]
 8010f80:	d501      	bpl.n	8010f86 <_printf_i+0xbe>
 8010f82:	681e      	ldr	r6, [r3, #0]
 8010f84:	e003      	b.n	8010f8e <_printf_i+0xc6>
 8010f86:	0646      	lsls	r6, r0, #25
 8010f88:	d5fb      	bpl.n	8010f82 <_printf_i+0xba>
 8010f8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010f8e:	2e00      	cmp	r6, #0
 8010f90:	da03      	bge.n	8010f9a <_printf_i+0xd2>
 8010f92:	232d      	movs	r3, #45	; 0x2d
 8010f94:	4276      	negs	r6, r6
 8010f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f9a:	485a      	ldr	r0, [pc, #360]	; (8011104 <_printf_i+0x23c>)
 8010f9c:	230a      	movs	r3, #10
 8010f9e:	e012      	b.n	8010fc6 <_printf_i+0xfe>
 8010fa0:	682b      	ldr	r3, [r5, #0]
 8010fa2:	6820      	ldr	r0, [r4, #0]
 8010fa4:	1d19      	adds	r1, r3, #4
 8010fa6:	6029      	str	r1, [r5, #0]
 8010fa8:	0605      	lsls	r5, r0, #24
 8010faa:	d501      	bpl.n	8010fb0 <_printf_i+0xe8>
 8010fac:	681e      	ldr	r6, [r3, #0]
 8010fae:	e002      	b.n	8010fb6 <_printf_i+0xee>
 8010fb0:	0641      	lsls	r1, r0, #25
 8010fb2:	d5fb      	bpl.n	8010fac <_printf_i+0xe4>
 8010fb4:	881e      	ldrh	r6, [r3, #0]
 8010fb6:	4853      	ldr	r0, [pc, #332]	; (8011104 <_printf_i+0x23c>)
 8010fb8:	2f6f      	cmp	r7, #111	; 0x6f
 8010fba:	bf0c      	ite	eq
 8010fbc:	2308      	moveq	r3, #8
 8010fbe:	230a      	movne	r3, #10
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010fc6:	6865      	ldr	r5, [r4, #4]
 8010fc8:	60a5      	str	r5, [r4, #8]
 8010fca:	2d00      	cmp	r5, #0
 8010fcc:	bfa2      	ittt	ge
 8010fce:	6821      	ldrge	r1, [r4, #0]
 8010fd0:	f021 0104 	bicge.w	r1, r1, #4
 8010fd4:	6021      	strge	r1, [r4, #0]
 8010fd6:	b90e      	cbnz	r6, 8010fdc <_printf_i+0x114>
 8010fd8:	2d00      	cmp	r5, #0
 8010fda:	d04b      	beq.n	8011074 <_printf_i+0x1ac>
 8010fdc:	4615      	mov	r5, r2
 8010fde:	fbb6 f1f3 	udiv	r1, r6, r3
 8010fe2:	fb03 6711 	mls	r7, r3, r1, r6
 8010fe6:	5dc7      	ldrb	r7, [r0, r7]
 8010fe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010fec:	4637      	mov	r7, r6
 8010fee:	42bb      	cmp	r3, r7
 8010ff0:	460e      	mov	r6, r1
 8010ff2:	d9f4      	bls.n	8010fde <_printf_i+0x116>
 8010ff4:	2b08      	cmp	r3, #8
 8010ff6:	d10b      	bne.n	8011010 <_printf_i+0x148>
 8010ff8:	6823      	ldr	r3, [r4, #0]
 8010ffa:	07de      	lsls	r6, r3, #31
 8010ffc:	d508      	bpl.n	8011010 <_printf_i+0x148>
 8010ffe:	6923      	ldr	r3, [r4, #16]
 8011000:	6861      	ldr	r1, [r4, #4]
 8011002:	4299      	cmp	r1, r3
 8011004:	bfde      	ittt	le
 8011006:	2330      	movle	r3, #48	; 0x30
 8011008:	f805 3c01 	strble.w	r3, [r5, #-1]
 801100c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011010:	1b52      	subs	r2, r2, r5
 8011012:	6122      	str	r2, [r4, #16]
 8011014:	f8cd a000 	str.w	sl, [sp]
 8011018:	464b      	mov	r3, r9
 801101a:	aa03      	add	r2, sp, #12
 801101c:	4621      	mov	r1, r4
 801101e:	4640      	mov	r0, r8
 8011020:	f7ff fee4 	bl	8010dec <_printf_common>
 8011024:	3001      	adds	r0, #1
 8011026:	d14a      	bne.n	80110be <_printf_i+0x1f6>
 8011028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801102c:	b004      	add	sp, #16
 801102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011032:	6823      	ldr	r3, [r4, #0]
 8011034:	f043 0320 	orr.w	r3, r3, #32
 8011038:	6023      	str	r3, [r4, #0]
 801103a:	4833      	ldr	r0, [pc, #204]	; (8011108 <_printf_i+0x240>)
 801103c:	2778      	movs	r7, #120	; 0x78
 801103e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	6829      	ldr	r1, [r5, #0]
 8011046:	061f      	lsls	r7, r3, #24
 8011048:	f851 6b04 	ldr.w	r6, [r1], #4
 801104c:	d402      	bmi.n	8011054 <_printf_i+0x18c>
 801104e:	065f      	lsls	r7, r3, #25
 8011050:	bf48      	it	mi
 8011052:	b2b6      	uxthmi	r6, r6
 8011054:	07df      	lsls	r7, r3, #31
 8011056:	bf48      	it	mi
 8011058:	f043 0320 	orrmi.w	r3, r3, #32
 801105c:	6029      	str	r1, [r5, #0]
 801105e:	bf48      	it	mi
 8011060:	6023      	strmi	r3, [r4, #0]
 8011062:	b91e      	cbnz	r6, 801106c <_printf_i+0x1a4>
 8011064:	6823      	ldr	r3, [r4, #0]
 8011066:	f023 0320 	bic.w	r3, r3, #32
 801106a:	6023      	str	r3, [r4, #0]
 801106c:	2310      	movs	r3, #16
 801106e:	e7a7      	b.n	8010fc0 <_printf_i+0xf8>
 8011070:	4824      	ldr	r0, [pc, #144]	; (8011104 <_printf_i+0x23c>)
 8011072:	e7e4      	b.n	801103e <_printf_i+0x176>
 8011074:	4615      	mov	r5, r2
 8011076:	e7bd      	b.n	8010ff4 <_printf_i+0x12c>
 8011078:	682b      	ldr	r3, [r5, #0]
 801107a:	6826      	ldr	r6, [r4, #0]
 801107c:	6961      	ldr	r1, [r4, #20]
 801107e:	1d18      	adds	r0, r3, #4
 8011080:	6028      	str	r0, [r5, #0]
 8011082:	0635      	lsls	r5, r6, #24
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	d501      	bpl.n	801108c <_printf_i+0x1c4>
 8011088:	6019      	str	r1, [r3, #0]
 801108a:	e002      	b.n	8011092 <_printf_i+0x1ca>
 801108c:	0670      	lsls	r0, r6, #25
 801108e:	d5fb      	bpl.n	8011088 <_printf_i+0x1c0>
 8011090:	8019      	strh	r1, [r3, #0]
 8011092:	2300      	movs	r3, #0
 8011094:	6123      	str	r3, [r4, #16]
 8011096:	4615      	mov	r5, r2
 8011098:	e7bc      	b.n	8011014 <_printf_i+0x14c>
 801109a:	682b      	ldr	r3, [r5, #0]
 801109c:	1d1a      	adds	r2, r3, #4
 801109e:	602a      	str	r2, [r5, #0]
 80110a0:	681d      	ldr	r5, [r3, #0]
 80110a2:	6862      	ldr	r2, [r4, #4]
 80110a4:	2100      	movs	r1, #0
 80110a6:	4628      	mov	r0, r5
 80110a8:	f7ef f8ca 	bl	8000240 <memchr>
 80110ac:	b108      	cbz	r0, 80110b2 <_printf_i+0x1ea>
 80110ae:	1b40      	subs	r0, r0, r5
 80110b0:	6060      	str	r0, [r4, #4]
 80110b2:	6863      	ldr	r3, [r4, #4]
 80110b4:	6123      	str	r3, [r4, #16]
 80110b6:	2300      	movs	r3, #0
 80110b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110bc:	e7aa      	b.n	8011014 <_printf_i+0x14c>
 80110be:	6923      	ldr	r3, [r4, #16]
 80110c0:	462a      	mov	r2, r5
 80110c2:	4649      	mov	r1, r9
 80110c4:	4640      	mov	r0, r8
 80110c6:	47d0      	blx	sl
 80110c8:	3001      	adds	r0, #1
 80110ca:	d0ad      	beq.n	8011028 <_printf_i+0x160>
 80110cc:	6823      	ldr	r3, [r4, #0]
 80110ce:	079b      	lsls	r3, r3, #30
 80110d0:	d413      	bmi.n	80110fa <_printf_i+0x232>
 80110d2:	68e0      	ldr	r0, [r4, #12]
 80110d4:	9b03      	ldr	r3, [sp, #12]
 80110d6:	4298      	cmp	r0, r3
 80110d8:	bfb8      	it	lt
 80110da:	4618      	movlt	r0, r3
 80110dc:	e7a6      	b.n	801102c <_printf_i+0x164>
 80110de:	2301      	movs	r3, #1
 80110e0:	4632      	mov	r2, r6
 80110e2:	4649      	mov	r1, r9
 80110e4:	4640      	mov	r0, r8
 80110e6:	47d0      	blx	sl
 80110e8:	3001      	adds	r0, #1
 80110ea:	d09d      	beq.n	8011028 <_printf_i+0x160>
 80110ec:	3501      	adds	r5, #1
 80110ee:	68e3      	ldr	r3, [r4, #12]
 80110f0:	9903      	ldr	r1, [sp, #12]
 80110f2:	1a5b      	subs	r3, r3, r1
 80110f4:	42ab      	cmp	r3, r5
 80110f6:	dcf2      	bgt.n	80110de <_printf_i+0x216>
 80110f8:	e7eb      	b.n	80110d2 <_printf_i+0x20a>
 80110fa:	2500      	movs	r5, #0
 80110fc:	f104 0619 	add.w	r6, r4, #25
 8011100:	e7f5      	b.n	80110ee <_printf_i+0x226>
 8011102:	bf00      	nop
 8011104:	08011ec1 	.word	0x08011ec1
 8011108:	08011ed2 	.word	0x08011ed2

0801110c <__sflush_r>:
 801110c:	898a      	ldrh	r2, [r1, #12]
 801110e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011112:	4605      	mov	r5, r0
 8011114:	0710      	lsls	r0, r2, #28
 8011116:	460c      	mov	r4, r1
 8011118:	d458      	bmi.n	80111cc <__sflush_r+0xc0>
 801111a:	684b      	ldr	r3, [r1, #4]
 801111c:	2b00      	cmp	r3, #0
 801111e:	dc05      	bgt.n	801112c <__sflush_r+0x20>
 8011120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011122:	2b00      	cmp	r3, #0
 8011124:	dc02      	bgt.n	801112c <__sflush_r+0x20>
 8011126:	2000      	movs	r0, #0
 8011128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801112c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801112e:	2e00      	cmp	r6, #0
 8011130:	d0f9      	beq.n	8011126 <__sflush_r+0x1a>
 8011132:	2300      	movs	r3, #0
 8011134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011138:	682f      	ldr	r7, [r5, #0]
 801113a:	6a21      	ldr	r1, [r4, #32]
 801113c:	602b      	str	r3, [r5, #0]
 801113e:	d032      	beq.n	80111a6 <__sflush_r+0x9a>
 8011140:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011142:	89a3      	ldrh	r3, [r4, #12]
 8011144:	075a      	lsls	r2, r3, #29
 8011146:	d505      	bpl.n	8011154 <__sflush_r+0x48>
 8011148:	6863      	ldr	r3, [r4, #4]
 801114a:	1ac0      	subs	r0, r0, r3
 801114c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801114e:	b10b      	cbz	r3, 8011154 <__sflush_r+0x48>
 8011150:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011152:	1ac0      	subs	r0, r0, r3
 8011154:	2300      	movs	r3, #0
 8011156:	4602      	mov	r2, r0
 8011158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801115a:	6a21      	ldr	r1, [r4, #32]
 801115c:	4628      	mov	r0, r5
 801115e:	47b0      	blx	r6
 8011160:	1c43      	adds	r3, r0, #1
 8011162:	89a3      	ldrh	r3, [r4, #12]
 8011164:	d106      	bne.n	8011174 <__sflush_r+0x68>
 8011166:	6829      	ldr	r1, [r5, #0]
 8011168:	291d      	cmp	r1, #29
 801116a:	d82b      	bhi.n	80111c4 <__sflush_r+0xb8>
 801116c:	4a29      	ldr	r2, [pc, #164]	; (8011214 <__sflush_r+0x108>)
 801116e:	410a      	asrs	r2, r1
 8011170:	07d6      	lsls	r6, r2, #31
 8011172:	d427      	bmi.n	80111c4 <__sflush_r+0xb8>
 8011174:	2200      	movs	r2, #0
 8011176:	6062      	str	r2, [r4, #4]
 8011178:	04d9      	lsls	r1, r3, #19
 801117a:	6922      	ldr	r2, [r4, #16]
 801117c:	6022      	str	r2, [r4, #0]
 801117e:	d504      	bpl.n	801118a <__sflush_r+0x7e>
 8011180:	1c42      	adds	r2, r0, #1
 8011182:	d101      	bne.n	8011188 <__sflush_r+0x7c>
 8011184:	682b      	ldr	r3, [r5, #0]
 8011186:	b903      	cbnz	r3, 801118a <__sflush_r+0x7e>
 8011188:	6560      	str	r0, [r4, #84]	; 0x54
 801118a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801118c:	602f      	str	r7, [r5, #0]
 801118e:	2900      	cmp	r1, #0
 8011190:	d0c9      	beq.n	8011126 <__sflush_r+0x1a>
 8011192:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011196:	4299      	cmp	r1, r3
 8011198:	d002      	beq.n	80111a0 <__sflush_r+0x94>
 801119a:	4628      	mov	r0, r5
 801119c:	f7ff fb3e 	bl	801081c <_free_r>
 80111a0:	2000      	movs	r0, #0
 80111a2:	6360      	str	r0, [r4, #52]	; 0x34
 80111a4:	e7c0      	b.n	8011128 <__sflush_r+0x1c>
 80111a6:	2301      	movs	r3, #1
 80111a8:	4628      	mov	r0, r5
 80111aa:	47b0      	blx	r6
 80111ac:	1c41      	adds	r1, r0, #1
 80111ae:	d1c8      	bne.n	8011142 <__sflush_r+0x36>
 80111b0:	682b      	ldr	r3, [r5, #0]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d0c5      	beq.n	8011142 <__sflush_r+0x36>
 80111b6:	2b1d      	cmp	r3, #29
 80111b8:	d001      	beq.n	80111be <__sflush_r+0xb2>
 80111ba:	2b16      	cmp	r3, #22
 80111bc:	d101      	bne.n	80111c2 <__sflush_r+0xb6>
 80111be:	602f      	str	r7, [r5, #0]
 80111c0:	e7b1      	b.n	8011126 <__sflush_r+0x1a>
 80111c2:	89a3      	ldrh	r3, [r4, #12]
 80111c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111c8:	81a3      	strh	r3, [r4, #12]
 80111ca:	e7ad      	b.n	8011128 <__sflush_r+0x1c>
 80111cc:	690f      	ldr	r7, [r1, #16]
 80111ce:	2f00      	cmp	r7, #0
 80111d0:	d0a9      	beq.n	8011126 <__sflush_r+0x1a>
 80111d2:	0793      	lsls	r3, r2, #30
 80111d4:	680e      	ldr	r6, [r1, #0]
 80111d6:	bf08      	it	eq
 80111d8:	694b      	ldreq	r3, [r1, #20]
 80111da:	600f      	str	r7, [r1, #0]
 80111dc:	bf18      	it	ne
 80111de:	2300      	movne	r3, #0
 80111e0:	eba6 0807 	sub.w	r8, r6, r7
 80111e4:	608b      	str	r3, [r1, #8]
 80111e6:	f1b8 0f00 	cmp.w	r8, #0
 80111ea:	dd9c      	ble.n	8011126 <__sflush_r+0x1a>
 80111ec:	6a21      	ldr	r1, [r4, #32]
 80111ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80111f0:	4643      	mov	r3, r8
 80111f2:	463a      	mov	r2, r7
 80111f4:	4628      	mov	r0, r5
 80111f6:	47b0      	blx	r6
 80111f8:	2800      	cmp	r0, #0
 80111fa:	dc06      	bgt.n	801120a <__sflush_r+0xfe>
 80111fc:	89a3      	ldrh	r3, [r4, #12]
 80111fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011202:	81a3      	strh	r3, [r4, #12]
 8011204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011208:	e78e      	b.n	8011128 <__sflush_r+0x1c>
 801120a:	4407      	add	r7, r0
 801120c:	eba8 0800 	sub.w	r8, r8, r0
 8011210:	e7e9      	b.n	80111e6 <__sflush_r+0xda>
 8011212:	bf00      	nop
 8011214:	dfbffffe 	.word	0xdfbffffe

08011218 <_fflush_r>:
 8011218:	b538      	push	{r3, r4, r5, lr}
 801121a:	690b      	ldr	r3, [r1, #16]
 801121c:	4605      	mov	r5, r0
 801121e:	460c      	mov	r4, r1
 8011220:	b913      	cbnz	r3, 8011228 <_fflush_r+0x10>
 8011222:	2500      	movs	r5, #0
 8011224:	4628      	mov	r0, r5
 8011226:	bd38      	pop	{r3, r4, r5, pc}
 8011228:	b118      	cbz	r0, 8011232 <_fflush_r+0x1a>
 801122a:	6a03      	ldr	r3, [r0, #32]
 801122c:	b90b      	cbnz	r3, 8011232 <_fflush_r+0x1a>
 801122e:	f7ff f9fb 	bl	8010628 <__sinit>
 8011232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d0f3      	beq.n	8011222 <_fflush_r+0xa>
 801123a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801123c:	07d0      	lsls	r0, r2, #31
 801123e:	d404      	bmi.n	801124a <_fflush_r+0x32>
 8011240:	0599      	lsls	r1, r3, #22
 8011242:	d402      	bmi.n	801124a <_fflush_r+0x32>
 8011244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011246:	f7ff fae6 	bl	8010816 <__retarget_lock_acquire_recursive>
 801124a:	4628      	mov	r0, r5
 801124c:	4621      	mov	r1, r4
 801124e:	f7ff ff5d 	bl	801110c <__sflush_r>
 8011252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011254:	07da      	lsls	r2, r3, #31
 8011256:	4605      	mov	r5, r0
 8011258:	d4e4      	bmi.n	8011224 <_fflush_r+0xc>
 801125a:	89a3      	ldrh	r3, [r4, #12]
 801125c:	059b      	lsls	r3, r3, #22
 801125e:	d4e1      	bmi.n	8011224 <_fflush_r+0xc>
 8011260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011262:	f7ff fad9 	bl	8010818 <__retarget_lock_release_recursive>
 8011266:	e7dd      	b.n	8011224 <_fflush_r+0xc>

08011268 <__sread>:
 8011268:	b510      	push	{r4, lr}
 801126a:	460c      	mov	r4, r1
 801126c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011270:	f000 f9c2 	bl	80115f8 <_read_r>
 8011274:	2800      	cmp	r0, #0
 8011276:	bfab      	itete	ge
 8011278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801127a:	89a3      	ldrhlt	r3, [r4, #12]
 801127c:	181b      	addge	r3, r3, r0
 801127e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011282:	bfac      	ite	ge
 8011284:	6563      	strge	r3, [r4, #84]	; 0x54
 8011286:	81a3      	strhlt	r3, [r4, #12]
 8011288:	bd10      	pop	{r4, pc}

0801128a <__swrite>:
 801128a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801128e:	461f      	mov	r7, r3
 8011290:	898b      	ldrh	r3, [r1, #12]
 8011292:	05db      	lsls	r3, r3, #23
 8011294:	4605      	mov	r5, r0
 8011296:	460c      	mov	r4, r1
 8011298:	4616      	mov	r6, r2
 801129a:	d505      	bpl.n	80112a8 <__swrite+0x1e>
 801129c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112a0:	2302      	movs	r3, #2
 80112a2:	2200      	movs	r2, #0
 80112a4:	f000 f996 	bl	80115d4 <_lseek_r>
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112b2:	81a3      	strh	r3, [r4, #12]
 80112b4:	4632      	mov	r2, r6
 80112b6:	463b      	mov	r3, r7
 80112b8:	4628      	mov	r0, r5
 80112ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112be:	f000 b9ad 	b.w	801161c <_write_r>

080112c2 <__sseek>:
 80112c2:	b510      	push	{r4, lr}
 80112c4:	460c      	mov	r4, r1
 80112c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112ca:	f000 f983 	bl	80115d4 <_lseek_r>
 80112ce:	1c43      	adds	r3, r0, #1
 80112d0:	89a3      	ldrh	r3, [r4, #12]
 80112d2:	bf15      	itete	ne
 80112d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80112d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80112da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80112de:	81a3      	strheq	r3, [r4, #12]
 80112e0:	bf18      	it	ne
 80112e2:	81a3      	strhne	r3, [r4, #12]
 80112e4:	bd10      	pop	{r4, pc}

080112e6 <__sclose>:
 80112e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112ea:	f000 b941 	b.w	8011570 <_close_r>

080112ee <_realloc_r>:
 80112ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f2:	4680      	mov	r8, r0
 80112f4:	4614      	mov	r4, r2
 80112f6:	460e      	mov	r6, r1
 80112f8:	b921      	cbnz	r1, 8011304 <_realloc_r+0x16>
 80112fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112fe:	4611      	mov	r1, r2
 8011300:	f7ff b846 	b.w	8010390 <_malloc_r>
 8011304:	b92a      	cbnz	r2, 8011312 <_realloc_r+0x24>
 8011306:	f7ff fa89 	bl	801081c <_free_r>
 801130a:	4625      	mov	r5, r4
 801130c:	4628      	mov	r0, r5
 801130e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011312:	f000 f9a3 	bl	801165c <_malloc_usable_size_r>
 8011316:	4284      	cmp	r4, r0
 8011318:	4607      	mov	r7, r0
 801131a:	d802      	bhi.n	8011322 <_realloc_r+0x34>
 801131c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011320:	d812      	bhi.n	8011348 <_realloc_r+0x5a>
 8011322:	4621      	mov	r1, r4
 8011324:	4640      	mov	r0, r8
 8011326:	f7ff f833 	bl	8010390 <_malloc_r>
 801132a:	4605      	mov	r5, r0
 801132c:	2800      	cmp	r0, #0
 801132e:	d0ed      	beq.n	801130c <_realloc_r+0x1e>
 8011330:	42bc      	cmp	r4, r7
 8011332:	4622      	mov	r2, r4
 8011334:	4631      	mov	r1, r6
 8011336:	bf28      	it	cs
 8011338:	463a      	movcs	r2, r7
 801133a:	f000 f981 	bl	8011640 <memcpy>
 801133e:	4631      	mov	r1, r6
 8011340:	4640      	mov	r0, r8
 8011342:	f7ff fa6b 	bl	801081c <_free_r>
 8011346:	e7e1      	b.n	801130c <_realloc_r+0x1e>
 8011348:	4635      	mov	r5, r6
 801134a:	e7df      	b.n	801130c <_realloc_r+0x1e>

0801134c <__swbuf_r>:
 801134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801134e:	460e      	mov	r6, r1
 8011350:	4614      	mov	r4, r2
 8011352:	4605      	mov	r5, r0
 8011354:	b118      	cbz	r0, 801135e <__swbuf_r+0x12>
 8011356:	6a03      	ldr	r3, [r0, #32]
 8011358:	b90b      	cbnz	r3, 801135e <__swbuf_r+0x12>
 801135a:	f7ff f965 	bl	8010628 <__sinit>
 801135e:	69a3      	ldr	r3, [r4, #24]
 8011360:	60a3      	str	r3, [r4, #8]
 8011362:	89a3      	ldrh	r3, [r4, #12]
 8011364:	071a      	lsls	r2, r3, #28
 8011366:	d525      	bpl.n	80113b4 <__swbuf_r+0x68>
 8011368:	6923      	ldr	r3, [r4, #16]
 801136a:	b31b      	cbz	r3, 80113b4 <__swbuf_r+0x68>
 801136c:	6823      	ldr	r3, [r4, #0]
 801136e:	6922      	ldr	r2, [r4, #16]
 8011370:	1a98      	subs	r0, r3, r2
 8011372:	6963      	ldr	r3, [r4, #20]
 8011374:	b2f6      	uxtb	r6, r6
 8011376:	4283      	cmp	r3, r0
 8011378:	4637      	mov	r7, r6
 801137a:	dc04      	bgt.n	8011386 <__swbuf_r+0x3a>
 801137c:	4621      	mov	r1, r4
 801137e:	4628      	mov	r0, r5
 8011380:	f7ff ff4a 	bl	8011218 <_fflush_r>
 8011384:	b9e0      	cbnz	r0, 80113c0 <__swbuf_r+0x74>
 8011386:	68a3      	ldr	r3, [r4, #8]
 8011388:	3b01      	subs	r3, #1
 801138a:	60a3      	str	r3, [r4, #8]
 801138c:	6823      	ldr	r3, [r4, #0]
 801138e:	1c5a      	adds	r2, r3, #1
 8011390:	6022      	str	r2, [r4, #0]
 8011392:	701e      	strb	r6, [r3, #0]
 8011394:	6962      	ldr	r2, [r4, #20]
 8011396:	1c43      	adds	r3, r0, #1
 8011398:	429a      	cmp	r2, r3
 801139a:	d004      	beq.n	80113a6 <__swbuf_r+0x5a>
 801139c:	89a3      	ldrh	r3, [r4, #12]
 801139e:	07db      	lsls	r3, r3, #31
 80113a0:	d506      	bpl.n	80113b0 <__swbuf_r+0x64>
 80113a2:	2e0a      	cmp	r6, #10
 80113a4:	d104      	bne.n	80113b0 <__swbuf_r+0x64>
 80113a6:	4621      	mov	r1, r4
 80113a8:	4628      	mov	r0, r5
 80113aa:	f7ff ff35 	bl	8011218 <_fflush_r>
 80113ae:	b938      	cbnz	r0, 80113c0 <__swbuf_r+0x74>
 80113b0:	4638      	mov	r0, r7
 80113b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113b4:	4621      	mov	r1, r4
 80113b6:	4628      	mov	r0, r5
 80113b8:	f000 f806 	bl	80113c8 <__swsetup_r>
 80113bc:	2800      	cmp	r0, #0
 80113be:	d0d5      	beq.n	801136c <__swbuf_r+0x20>
 80113c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80113c4:	e7f4      	b.n	80113b0 <__swbuf_r+0x64>
	...

080113c8 <__swsetup_r>:
 80113c8:	b538      	push	{r3, r4, r5, lr}
 80113ca:	4b2a      	ldr	r3, [pc, #168]	; (8011474 <__swsetup_r+0xac>)
 80113cc:	4605      	mov	r5, r0
 80113ce:	6818      	ldr	r0, [r3, #0]
 80113d0:	460c      	mov	r4, r1
 80113d2:	b118      	cbz	r0, 80113dc <__swsetup_r+0x14>
 80113d4:	6a03      	ldr	r3, [r0, #32]
 80113d6:	b90b      	cbnz	r3, 80113dc <__swsetup_r+0x14>
 80113d8:	f7ff f926 	bl	8010628 <__sinit>
 80113dc:	89a3      	ldrh	r3, [r4, #12]
 80113de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113e2:	0718      	lsls	r0, r3, #28
 80113e4:	d422      	bmi.n	801142c <__swsetup_r+0x64>
 80113e6:	06d9      	lsls	r1, r3, #27
 80113e8:	d407      	bmi.n	80113fa <__swsetup_r+0x32>
 80113ea:	2309      	movs	r3, #9
 80113ec:	602b      	str	r3, [r5, #0]
 80113ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113f2:	81a3      	strh	r3, [r4, #12]
 80113f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113f8:	e034      	b.n	8011464 <__swsetup_r+0x9c>
 80113fa:	0758      	lsls	r0, r3, #29
 80113fc:	d512      	bpl.n	8011424 <__swsetup_r+0x5c>
 80113fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011400:	b141      	cbz	r1, 8011414 <__swsetup_r+0x4c>
 8011402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011406:	4299      	cmp	r1, r3
 8011408:	d002      	beq.n	8011410 <__swsetup_r+0x48>
 801140a:	4628      	mov	r0, r5
 801140c:	f7ff fa06 	bl	801081c <_free_r>
 8011410:	2300      	movs	r3, #0
 8011412:	6363      	str	r3, [r4, #52]	; 0x34
 8011414:	89a3      	ldrh	r3, [r4, #12]
 8011416:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801141a:	81a3      	strh	r3, [r4, #12]
 801141c:	2300      	movs	r3, #0
 801141e:	6063      	str	r3, [r4, #4]
 8011420:	6923      	ldr	r3, [r4, #16]
 8011422:	6023      	str	r3, [r4, #0]
 8011424:	89a3      	ldrh	r3, [r4, #12]
 8011426:	f043 0308 	orr.w	r3, r3, #8
 801142a:	81a3      	strh	r3, [r4, #12]
 801142c:	6923      	ldr	r3, [r4, #16]
 801142e:	b94b      	cbnz	r3, 8011444 <__swsetup_r+0x7c>
 8011430:	89a3      	ldrh	r3, [r4, #12]
 8011432:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801143a:	d003      	beq.n	8011444 <__swsetup_r+0x7c>
 801143c:	4621      	mov	r1, r4
 801143e:	4628      	mov	r0, r5
 8011440:	f000 f840 	bl	80114c4 <__smakebuf_r>
 8011444:	89a0      	ldrh	r0, [r4, #12]
 8011446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801144a:	f010 0301 	ands.w	r3, r0, #1
 801144e:	d00a      	beq.n	8011466 <__swsetup_r+0x9e>
 8011450:	2300      	movs	r3, #0
 8011452:	60a3      	str	r3, [r4, #8]
 8011454:	6963      	ldr	r3, [r4, #20]
 8011456:	425b      	negs	r3, r3
 8011458:	61a3      	str	r3, [r4, #24]
 801145a:	6923      	ldr	r3, [r4, #16]
 801145c:	b943      	cbnz	r3, 8011470 <__swsetup_r+0xa8>
 801145e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011462:	d1c4      	bne.n	80113ee <__swsetup_r+0x26>
 8011464:	bd38      	pop	{r3, r4, r5, pc}
 8011466:	0781      	lsls	r1, r0, #30
 8011468:	bf58      	it	pl
 801146a:	6963      	ldrpl	r3, [r4, #20]
 801146c:	60a3      	str	r3, [r4, #8]
 801146e:	e7f4      	b.n	801145a <__swsetup_r+0x92>
 8011470:	2000      	movs	r0, #0
 8011472:	e7f7      	b.n	8011464 <__swsetup_r+0x9c>
 8011474:	20000164 	.word	0x20000164

08011478 <__swhatbuf_r>:
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	460c      	mov	r4, r1
 801147c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011480:	2900      	cmp	r1, #0
 8011482:	b096      	sub	sp, #88	; 0x58
 8011484:	4615      	mov	r5, r2
 8011486:	461e      	mov	r6, r3
 8011488:	da0d      	bge.n	80114a6 <__swhatbuf_r+0x2e>
 801148a:	89a3      	ldrh	r3, [r4, #12]
 801148c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011490:	f04f 0100 	mov.w	r1, #0
 8011494:	bf0c      	ite	eq
 8011496:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801149a:	2340      	movne	r3, #64	; 0x40
 801149c:	2000      	movs	r0, #0
 801149e:	6031      	str	r1, [r6, #0]
 80114a0:	602b      	str	r3, [r5, #0]
 80114a2:	b016      	add	sp, #88	; 0x58
 80114a4:	bd70      	pop	{r4, r5, r6, pc}
 80114a6:	466a      	mov	r2, sp
 80114a8:	f000 f872 	bl	8011590 <_fstat_r>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	dbec      	blt.n	801148a <__swhatbuf_r+0x12>
 80114b0:	9901      	ldr	r1, [sp, #4]
 80114b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80114b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80114ba:	4259      	negs	r1, r3
 80114bc:	4159      	adcs	r1, r3
 80114be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114c2:	e7eb      	b.n	801149c <__swhatbuf_r+0x24>

080114c4 <__smakebuf_r>:
 80114c4:	898b      	ldrh	r3, [r1, #12]
 80114c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114c8:	079d      	lsls	r5, r3, #30
 80114ca:	4606      	mov	r6, r0
 80114cc:	460c      	mov	r4, r1
 80114ce:	d507      	bpl.n	80114e0 <__smakebuf_r+0x1c>
 80114d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114d4:	6023      	str	r3, [r4, #0]
 80114d6:	6123      	str	r3, [r4, #16]
 80114d8:	2301      	movs	r3, #1
 80114da:	6163      	str	r3, [r4, #20]
 80114dc:	b002      	add	sp, #8
 80114de:	bd70      	pop	{r4, r5, r6, pc}
 80114e0:	ab01      	add	r3, sp, #4
 80114e2:	466a      	mov	r2, sp
 80114e4:	f7ff ffc8 	bl	8011478 <__swhatbuf_r>
 80114e8:	9900      	ldr	r1, [sp, #0]
 80114ea:	4605      	mov	r5, r0
 80114ec:	4630      	mov	r0, r6
 80114ee:	f7fe ff4f 	bl	8010390 <_malloc_r>
 80114f2:	b948      	cbnz	r0, 8011508 <__smakebuf_r+0x44>
 80114f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114f8:	059a      	lsls	r2, r3, #22
 80114fa:	d4ef      	bmi.n	80114dc <__smakebuf_r+0x18>
 80114fc:	f023 0303 	bic.w	r3, r3, #3
 8011500:	f043 0302 	orr.w	r3, r3, #2
 8011504:	81a3      	strh	r3, [r4, #12]
 8011506:	e7e3      	b.n	80114d0 <__smakebuf_r+0xc>
 8011508:	89a3      	ldrh	r3, [r4, #12]
 801150a:	6020      	str	r0, [r4, #0]
 801150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011510:	81a3      	strh	r3, [r4, #12]
 8011512:	9b00      	ldr	r3, [sp, #0]
 8011514:	6163      	str	r3, [r4, #20]
 8011516:	9b01      	ldr	r3, [sp, #4]
 8011518:	6120      	str	r0, [r4, #16]
 801151a:	b15b      	cbz	r3, 8011534 <__smakebuf_r+0x70>
 801151c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011520:	4630      	mov	r0, r6
 8011522:	f000 f847 	bl	80115b4 <_isatty_r>
 8011526:	b128      	cbz	r0, 8011534 <__smakebuf_r+0x70>
 8011528:	89a3      	ldrh	r3, [r4, #12]
 801152a:	f023 0303 	bic.w	r3, r3, #3
 801152e:	f043 0301 	orr.w	r3, r3, #1
 8011532:	81a3      	strh	r3, [r4, #12]
 8011534:	89a3      	ldrh	r3, [r4, #12]
 8011536:	431d      	orrs	r5, r3
 8011538:	81a5      	strh	r5, [r4, #12]
 801153a:	e7cf      	b.n	80114dc <__smakebuf_r+0x18>

0801153c <memmove>:
 801153c:	4288      	cmp	r0, r1
 801153e:	b510      	push	{r4, lr}
 8011540:	eb01 0402 	add.w	r4, r1, r2
 8011544:	d902      	bls.n	801154c <memmove+0x10>
 8011546:	4284      	cmp	r4, r0
 8011548:	4623      	mov	r3, r4
 801154a:	d807      	bhi.n	801155c <memmove+0x20>
 801154c:	1e43      	subs	r3, r0, #1
 801154e:	42a1      	cmp	r1, r4
 8011550:	d008      	beq.n	8011564 <memmove+0x28>
 8011552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011556:	f803 2f01 	strb.w	r2, [r3, #1]!
 801155a:	e7f8      	b.n	801154e <memmove+0x12>
 801155c:	4402      	add	r2, r0
 801155e:	4601      	mov	r1, r0
 8011560:	428a      	cmp	r2, r1
 8011562:	d100      	bne.n	8011566 <memmove+0x2a>
 8011564:	bd10      	pop	{r4, pc}
 8011566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801156a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801156e:	e7f7      	b.n	8011560 <memmove+0x24>

08011570 <_close_r>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	4d06      	ldr	r5, [pc, #24]	; (801158c <_close_r+0x1c>)
 8011574:	2300      	movs	r3, #0
 8011576:	4604      	mov	r4, r0
 8011578:	4608      	mov	r0, r1
 801157a:	602b      	str	r3, [r5, #0]
 801157c:	f7f0 f919 	bl	80017b2 <_close>
 8011580:	1c43      	adds	r3, r0, #1
 8011582:	d102      	bne.n	801158a <_close_r+0x1a>
 8011584:	682b      	ldr	r3, [r5, #0]
 8011586:	b103      	cbz	r3, 801158a <_close_r+0x1a>
 8011588:	6023      	str	r3, [r4, #0]
 801158a:	bd38      	pop	{r3, r4, r5, pc}
 801158c:	200045d0 	.word	0x200045d0

08011590 <_fstat_r>:
 8011590:	b538      	push	{r3, r4, r5, lr}
 8011592:	4d07      	ldr	r5, [pc, #28]	; (80115b0 <_fstat_r+0x20>)
 8011594:	2300      	movs	r3, #0
 8011596:	4604      	mov	r4, r0
 8011598:	4608      	mov	r0, r1
 801159a:	4611      	mov	r1, r2
 801159c:	602b      	str	r3, [r5, #0]
 801159e:	f7f0 f914 	bl	80017ca <_fstat>
 80115a2:	1c43      	adds	r3, r0, #1
 80115a4:	d102      	bne.n	80115ac <_fstat_r+0x1c>
 80115a6:	682b      	ldr	r3, [r5, #0]
 80115a8:	b103      	cbz	r3, 80115ac <_fstat_r+0x1c>
 80115aa:	6023      	str	r3, [r4, #0]
 80115ac:	bd38      	pop	{r3, r4, r5, pc}
 80115ae:	bf00      	nop
 80115b0:	200045d0 	.word	0x200045d0

080115b4 <_isatty_r>:
 80115b4:	b538      	push	{r3, r4, r5, lr}
 80115b6:	4d06      	ldr	r5, [pc, #24]	; (80115d0 <_isatty_r+0x1c>)
 80115b8:	2300      	movs	r3, #0
 80115ba:	4604      	mov	r4, r0
 80115bc:	4608      	mov	r0, r1
 80115be:	602b      	str	r3, [r5, #0]
 80115c0:	f7f0 f913 	bl	80017ea <_isatty>
 80115c4:	1c43      	adds	r3, r0, #1
 80115c6:	d102      	bne.n	80115ce <_isatty_r+0x1a>
 80115c8:	682b      	ldr	r3, [r5, #0]
 80115ca:	b103      	cbz	r3, 80115ce <_isatty_r+0x1a>
 80115cc:	6023      	str	r3, [r4, #0]
 80115ce:	bd38      	pop	{r3, r4, r5, pc}
 80115d0:	200045d0 	.word	0x200045d0

080115d4 <_lseek_r>:
 80115d4:	b538      	push	{r3, r4, r5, lr}
 80115d6:	4d07      	ldr	r5, [pc, #28]	; (80115f4 <_lseek_r+0x20>)
 80115d8:	4604      	mov	r4, r0
 80115da:	4608      	mov	r0, r1
 80115dc:	4611      	mov	r1, r2
 80115de:	2200      	movs	r2, #0
 80115e0:	602a      	str	r2, [r5, #0]
 80115e2:	461a      	mov	r2, r3
 80115e4:	f7f0 f90c 	bl	8001800 <_lseek>
 80115e8:	1c43      	adds	r3, r0, #1
 80115ea:	d102      	bne.n	80115f2 <_lseek_r+0x1e>
 80115ec:	682b      	ldr	r3, [r5, #0]
 80115ee:	b103      	cbz	r3, 80115f2 <_lseek_r+0x1e>
 80115f0:	6023      	str	r3, [r4, #0]
 80115f2:	bd38      	pop	{r3, r4, r5, pc}
 80115f4:	200045d0 	.word	0x200045d0

080115f8 <_read_r>:
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	4d07      	ldr	r5, [pc, #28]	; (8011618 <_read_r+0x20>)
 80115fc:	4604      	mov	r4, r0
 80115fe:	4608      	mov	r0, r1
 8011600:	4611      	mov	r1, r2
 8011602:	2200      	movs	r2, #0
 8011604:	602a      	str	r2, [r5, #0]
 8011606:	461a      	mov	r2, r3
 8011608:	f7f0 f89a 	bl	8001740 <_read>
 801160c:	1c43      	adds	r3, r0, #1
 801160e:	d102      	bne.n	8011616 <_read_r+0x1e>
 8011610:	682b      	ldr	r3, [r5, #0]
 8011612:	b103      	cbz	r3, 8011616 <_read_r+0x1e>
 8011614:	6023      	str	r3, [r4, #0]
 8011616:	bd38      	pop	{r3, r4, r5, pc}
 8011618:	200045d0 	.word	0x200045d0

0801161c <_write_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4d07      	ldr	r5, [pc, #28]	; (801163c <_write_r+0x20>)
 8011620:	4604      	mov	r4, r0
 8011622:	4608      	mov	r0, r1
 8011624:	4611      	mov	r1, r2
 8011626:	2200      	movs	r2, #0
 8011628:	602a      	str	r2, [r5, #0]
 801162a:	461a      	mov	r2, r3
 801162c:	f7f0 f8a5 	bl	800177a <_write>
 8011630:	1c43      	adds	r3, r0, #1
 8011632:	d102      	bne.n	801163a <_write_r+0x1e>
 8011634:	682b      	ldr	r3, [r5, #0]
 8011636:	b103      	cbz	r3, 801163a <_write_r+0x1e>
 8011638:	6023      	str	r3, [r4, #0]
 801163a:	bd38      	pop	{r3, r4, r5, pc}
 801163c:	200045d0 	.word	0x200045d0

08011640 <memcpy>:
 8011640:	440a      	add	r2, r1
 8011642:	4291      	cmp	r1, r2
 8011644:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011648:	d100      	bne.n	801164c <memcpy+0xc>
 801164a:	4770      	bx	lr
 801164c:	b510      	push	{r4, lr}
 801164e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011656:	4291      	cmp	r1, r2
 8011658:	d1f9      	bne.n	801164e <memcpy+0xe>
 801165a:	bd10      	pop	{r4, pc}

0801165c <_malloc_usable_size_r>:
 801165c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011660:	1f18      	subs	r0, r3, #4
 8011662:	2b00      	cmp	r3, #0
 8011664:	bfbc      	itt	lt
 8011666:	580b      	ldrlt	r3, [r1, r0]
 8011668:	18c0      	addlt	r0, r0, r3
 801166a:	4770      	bx	lr

0801166c <_init>:
 801166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801166e:	bf00      	nop
 8011670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011672:	bc08      	pop	{r3}
 8011674:	469e      	mov	lr, r3
 8011676:	4770      	bx	lr

08011678 <_fini>:
 8011678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801167a:	bf00      	nop
 801167c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801167e:	bc08      	pop	{r3}
 8011680:	469e      	mov	lr, r3
 8011682:	4770      	bx	lr
