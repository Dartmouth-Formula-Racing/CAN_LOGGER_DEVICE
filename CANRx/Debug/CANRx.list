
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  08011bc8  08011bc8  00021bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012444  08012444  0003016c  2**0
                  CONTENTS
  4 .ARM          00000008  08012444  08012444  00022444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801244c  0801244c  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801244c  0801244c  0002244c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012450  08012450  00022450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08012454  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004584  2000016c  080125c0  0003016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046f0  080125c0  000346f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003019a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022ee6  00000000  00000000  000301dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005195  00000000  00000000  000530c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c18  00000000  00000000  00058258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000156d  00000000  00000000  00059e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e8af  00000000  00000000  0005b3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026542  00000000  00000000  00089c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101fbf  00000000  00000000  000b01ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e10  00000000  00000000  001b2190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001b9fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000016c 	.word	0x2000016c
 800021c:	00000000 	.word	0x00000000
 8000220:	08011bb0 	.word	0x08011bb0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000170 	.word	0x20000170
 800023c:	08011bb0 	.word	0x08011bb0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b0d7      	sub	sp, #348	; 0x15c
 80005e0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fad8 	bl	8001b96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 fac9 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fc21 	bl	8000e30 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fbf9 	bl	8000de4 <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 fb2b 	bl	8000c4c <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fb9f 	bl	8000d38 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fbc3 	bl	8000d84 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f00a f8f5 	bl	800a7ec <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00f fbb1 	bl	800fd68 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000606:	f000 fb57 	bl	8000cb8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DS1307_Init(&hi2c1);
 800060a:	48b7      	ldr	r0, [pc, #732]	; (80008e8 <main+0x30c>)
 800060c:	f001 f9d4 	bl	80019b8 <DS1307_Init>
		RESET_STATE,
		POWER_OFF
	} state_t;

	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	uint32_t byteswritten; /* File write/read counts */
#ifdef VERBOSE_DEBUGGING
	uint32_t buffer_emptyings = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint32_t total_size = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8000622:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000626:	2b0c      	cmp	r3, #12
 8000628:	f200 8275 	bhi.w	8000b16 <main+0x53a>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <main+0x58>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000669 	.word	0x08000669
 8000638:	0800069f 	.word	0x0800069f
 800063c:	08000729 	.word	0x08000729
 8000640:	080008bf 	.word	0x080008bf
 8000644:	08000b29 	.word	0x08000b29
 8000648:	08000b29 	.word	0x08000b29
 800064c:	0800097d 	.word	0x0800097d
 8000650:	08000b29 	.word	0x08000b29
 8000654:	080009df 	.word	0x080009df
 8000658:	08000b29 	.word	0x08000b29
 800065c:	08000a0f 	.word	0x08000a0f
 8000660:	08000a9f 	.word	0x08000a9f
 8000664:	08000b01 	.word	0x08000b01
		 * Transition out:
		 * 	If power switch is set to on position -> PERIFPHERAL_INIT
		 * 	else (power switch is set to off) -> POWER_OFF
		 */
		case TURN_ON:
			MX_DMA_Init();
 8000668:	f000 fbbc 	bl	8000de4 <MX_DMA_Init>
			MX_SDMMC1_SD_Init();
 800066c:	f000 fb64 	bl	8000d38 <MX_SDMMC1_SD_Init>
			MX_FATFS_Init();
 8000670:	f00a f8bc 	bl	800a7ec <MX_FATFS_Init>
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000674:	2102      	movs	r1, #2
 8000676:	489d      	ldr	r0, [pc, #628]	; (80008ec <main+0x310>)
 8000678:	f002 ff9e 	bl	80035b8 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b9b      	ldr	r3, [pc, #620]	; (80008f0 <main+0x314>)
 8000682:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 8000684:	4b9a      	ldr	r3, [pc, #616]	; (80008f0 <main+0x314>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <main+0xb4>
 800068c:	2301      	movs	r3, #1
 800068e:	e000      	b.n	8000692 <main+0xb6>
 8000690:	230c      	movs	r3, #12
 8000692:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			NEW_LOG_FLAG = 0;
 8000696:	4b97      	ldr	r3, [pc, #604]	; (80008f4 <main+0x318>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
			break;
 800069c:	e249      	b.n	8000b32 <main+0x556>
		 * Transition out:
		 * 	Always -> CREATE_LOG_FILE
		 */
		case PERIPHERAL_INIT:
			// Reset both buffers
			data_buffer[0][0] = '\00';
 800069e:	4b96      	ldr	r3, [pc, #600]	; (80008f8 <main+0x31c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
			data_buffer[1][0] = '\00';
 80006a4:	4b94      	ldr	r3, [pc, #592]	; (80008f8 <main+0x31c>)
 80006a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006aa:	2200      	movs	r2, #0
 80006ac:	715a      	strb	r2, [r3, #5]
			buffer_fill_level[0] = 0;
 80006ae:	4b93      	ldr	r3, [pc, #588]	; (80008fc <main+0x320>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[1] = 0;
 80006b4:	4b91      	ldr	r3, [pc, #580]	; (80008fc <main+0x320>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	705a      	strb	r2, [r3, #1]
			current_buffer = 0;
 80006ba:	4b91      	ldr	r3, [pc, #580]	; (8000900 <main+0x324>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]

			// Turn Red LED on (Green turns off)
#ifdef VERBOSE_DEBUGGING
			printf("Initializing Peripherals...\r\n");
 80006c0:	4890      	ldr	r0, [pc, #576]	; (8000904 <main+0x328>)
 80006c2:	f010 faef 	bl	8010ca4 <puts>
#endif
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET); //Red LED
 80006c6:	2200      	movs	r2, #0
 80006c8:	2101      	movs	r1, #1
 80006ca:	4888      	ldr	r0, [pc, #544]	; (80008ec <main+0x310>)
 80006cc:	f002 ff8c 	bl	80035e8 <HAL_GPIO_WritePin>

			// Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80006d0:	488d      	ldr	r0, [pc, #564]	; (8000908 <main+0x32c>)
 80006d2:	f001 fcc9 	bl	8002068 <HAL_CAN_Start>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d004      	beq.n	80006e6 <main+0x10a>
#ifdef VERBOSE_DEBUGGING
				printf("CAN could not start.\r\n");
 80006dc:	488b      	ldr	r0, [pc, #556]	; (800090c <main+0x330>)
 80006de:	f010 fae1 	bl	8010ca4 <puts>
#endif
				Error_Handler();
 80006e2:	f000 fd99 	bl	8001218 <Error_Handler>
			}
			if (CAN_Filter_Config() != HAL_OK) {
 80006e6:	f000 fd1d 	bl	8001124 <CAN_Filter_Config>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d004      	beq.n	80006fa <main+0x11e>
#ifdef VERBOSE_DEBUGGING
				printf("CAN filter failed to set.\r\n");
 80006f0:	4887      	ldr	r0, [pc, #540]	; (8000910 <main+0x334>)
 80006f2:	f010 fad7 	bl	8010ca4 <puts>
#endif
				Error_Handler();
 80006f6:	f000 fd8f 	bl	8001218 <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("CAN initialization succeeded...\r\n");
 80006fa:	4886      	ldr	r0, [pc, #536]	; (8000914 <main+0x338>)
 80006fc:	f010 fad2 	bl	8010ca4 <puts>
#endif

			// Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 8000700:	2200      	movs	r2, #0
 8000702:	4985      	ldr	r1, [pc, #532]	; (8000918 <main+0x33c>)
 8000704:	4885      	ldr	r0, [pc, #532]	; (800091c <main+0x340>)
 8000706:	f00e fcab 	bl	800f060 <f_mount>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d004      	beq.n	800071a <main+0x13e>
#ifdef VERBOSE_DEBUGGING
				printf("Mounting failed!\r\n");
 8000710:	4883      	ldr	r0, [pc, #524]	; (8000920 <main+0x344>)
 8000712:	f010 fac7 	bl	8010ca4 <puts>
#endif
				Error_Handler();
 8000716:	f000 fd7f 	bl	8001218 <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("SD initialization succeeded...\r\n");
 800071a:	4882      	ldr	r0, [pc, #520]	; (8000924 <main+0x348>)
 800071c:	f010 fac2 	bl	8010ca4 <puts>
#endif

			state = CREATE_LOG_FILE;
 8000720:	2302      	movs	r3, #2
 8000722:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 8000726:	e204      	b.n	8000b32 <main+0x556>
		 * Transition out:
		 * 	Always -> STANDBY
		 */
		case CREATE_LOG_FILE:
#ifdef VERBOSE_DEBUGGING
			printf("Creating new log file...\r\n");
 8000728:	487f      	ldr	r0, [pc, #508]	; (8000928 <main+0x34c>)
 800072a:	f010 fabb 	bl	8010ca4 <puts>
#endif

			// Update current date/time info
			curr_date = DS1307_GetDate();
 800072e:	f001 f9b5 	bl	8001a9c <DS1307_GetDate>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b7d      	ldr	r3, [pc, #500]	; (800092c <main+0x350>)
 8000738:	701a      	strb	r2, [r3, #0]
			curr_month = DS1307_GetMonth();
 800073a:	f001 f9bb 	bl	8001ab4 <DS1307_GetMonth>
 800073e:	4603      	mov	r3, r0
 8000740:	461a      	mov	r2, r3
 8000742:	4b7b      	ldr	r3, [pc, #492]	; (8000930 <main+0x354>)
 8000744:	701a      	strb	r2, [r3, #0]
			curr_year = DS1307_GetYear();
 8000746:	f001 f9c1 	bl	8001acc <DS1307_GetYear>
 800074a:	4603      	mov	r3, r0
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b79      	ldr	r3, [pc, #484]	; (8000934 <main+0x358>)
 8000750:	701a      	strb	r2, [r3, #0]
			curr_hour = DS1307_GetHour();
 8000752:	f001 f9dd 	bl	8001b10 <DS1307_GetHour>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b77      	ldr	r3, [pc, #476]	; (8000938 <main+0x35c>)
 800075c:	701a      	strb	r2, [r3, #0]
			curr_minute = DS1307_GetMinute();
 800075e:	f001 f9e6 	bl	8001b2e <DS1307_GetMinute>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4b75      	ldr	r3, [pc, #468]	; (800093c <main+0x360>)
 8000768:	701a      	strb	r2, [r3, #0]
			curr_second = DS1307_GetSecond();
 800076a:	f001 f9ec 	bl	8001b46 <DS1307_GetSecond>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4b73      	ldr	r3, [pc, #460]	; (8000940 <main+0x364>)
 8000774:	701a      	strb	r2, [r3, #0]
			starting_tick = HAL_GetTick();
 8000776:	f001 fa5f 	bl	8001c38 <HAL_GetTick>
 800077a:	4603      	mov	r3, r0
 800077c:	4a71      	ldr	r2, [pc, #452]	; (8000944 <main+0x368>)
 800077e:	6013      	str	r3, [r2, #0]
#ifdef VERBOSE_DEBUGGING
			printf("%02d/%02d/20%02d %02d:%02d:%02d\r\n",
 8000780:	4b6b      	ldr	r3, [pc, #428]	; (8000930 <main+0x354>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	4b69      	ldr	r3, [pc, #420]	; (800092c <main+0x350>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461c      	mov	r4, r3
 800078c:	4b69      	ldr	r3, [pc, #420]	; (8000934 <main+0x358>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461d      	mov	r5, r3
 8000792:	4b69      	ldr	r3, [pc, #420]	; (8000938 <main+0x35c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	4b68      	ldr	r3, [pc, #416]	; (800093c <main+0x360>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4b68      	ldr	r3, [pc, #416]	; (8000940 <main+0x364>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	9101      	str	r1, [sp, #4]
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	462b      	mov	r3, r5
 80007aa:	4622      	mov	r2, r4
 80007ac:	4601      	mov	r1, r0
 80007ae:	4866      	ldr	r0, [pc, #408]	; (8000948 <main+0x36c>)
 80007b0:	f010 fa12 	bl	8010bd8 <iprintf>
					curr_month, curr_date, curr_year, curr_hour, curr_minute, curr_second);
#endif
			if (f_stat(data_directory, &fno) != FR_OK) {
 80007b4:	4b65      	ldr	r3, [pc, #404]	; (800094c <main+0x370>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4965      	ldr	r1, [pc, #404]	; (8000950 <main+0x374>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00f f871 	bl	800f8a2 <f_stat>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00c      	beq.n	80007e0 <main+0x204>
				if (f_mkdir(data_directory) != FR_OK) {
 80007c6:	4b61      	ldr	r3, [pc, #388]	; (800094c <main+0x370>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00f f8a2 	bl	800f914 <f_mkdir>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d004      	beq.n	80007e0 <main+0x204>
#ifdef VERBOSE_DEBUGGING
					printf("Data directory not present and failed to create it.");
 80007d6:	485f      	ldr	r0, [pc, #380]	; (8000954 <main+0x378>)
 80007d8:	f010 f9fe 	bl	8010bd8 <iprintf>
#endif
					Error_Handler();
 80007dc:	f000 fd1c 	bl	8001218 <Error_Handler>
				}
			}

			// Creating new filename
			TCHAR filename[FILENAME_MAX_BYTES];
			snprintf(filename, FILENAME_MAX_BYTES, "%s/%02d-%02d-20%02d_(%02dh-%02dm-%02ds).log",
 80007e0:	4b5a      	ldr	r3, [pc, #360]	; (800094c <main+0x370>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a52      	ldr	r2, [pc, #328]	; (8000930 <main+0x354>)
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a50      	ldr	r2, [pc, #320]	; (800092c <main+0x350>)
 80007ec:	7812      	ldrb	r2, [r2, #0]
 80007ee:	4614      	mov	r4, r2
 80007f0:	4a50      	ldr	r2, [pc, #320]	; (8000934 <main+0x358>)
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	4615      	mov	r5, r2
 80007f6:	4a50      	ldr	r2, [pc, #320]	; (8000938 <main+0x35c>)
 80007f8:	7812      	ldrb	r2, [r2, #0]
 80007fa:	4616      	mov	r6, r2
 80007fc:	4a4f      	ldr	r2, [pc, #316]	; (800093c <main+0x360>)
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	4a4f      	ldr	r2, [pc, #316]	; (8000940 <main+0x364>)
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	f107 000c 	add.w	r0, r7, #12
 800080a:	9205      	str	r2, [sp, #20]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	9204      	str	r2, [sp, #16]
 8000810:	9603      	str	r6, [sp, #12]
 8000812:	9502      	str	r5, [sp, #8]
 8000814:	9401      	str	r4, [sp, #4]
 8000816:	9100      	str	r1, [sp, #0]
 8000818:	4a4f      	ldr	r2, [pc, #316]	; (8000958 <main+0x37c>)
 800081a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081e:	f010 f8d9 	bl	80109d4 <sniprintf>
					data_directory,
					curr_month, curr_date, curr_year,
					curr_hour, curr_minute, curr_second);

#ifdef VERBOSE_DEBUGGING
			printf("New log name: %s \r\n", filename);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	484c      	ldr	r0, [pc, #304]	; (800095c <main+0x380>)
 800082a:	f010 f9d5 	bl	8010bd8 <iprintf>
#endif

			// Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	220a      	movs	r2, #10
 8000834:	4619      	mov	r1, r3
 8000836:	484a      	ldr	r0, [pc, #296]	; (8000960 <main+0x384>)
 8000838:	f00e fc58 	bl	800f0ec <f_open>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d007      	beq.n	8000852 <main+0x276>
					!= FR_OK) {
#ifdef VERBOSE_DEBUGGING
				printf("Failed to create new log file: %s ...!\r\n", filename);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4846      	ldr	r0, [pc, #280]	; (8000964 <main+0x388>)
 800084a:	f010 f9c5 	bl	8010bd8 <iprintf>
#endif
				Error_Handler();
 800084e:	f000 fce3 	bl	8001218 <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("Successfully created new log file: %s ...\r\n", filename);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	4843      	ldr	r0, [pc, #268]	; (8000968 <main+0x38c>)
 800085a:	f010 f9bd 	bl	8010bd8 <iprintf>
#endif

			// Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 800085e:	2102      	movs	r1, #2
 8000860:	4829      	ldr	r0, [pc, #164]	; (8000908 <main+0x32c>)
 8000862:	f001 fdc8 	bl	80023f6 <HAL_CAN_ActivateNotification>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d004      	beq.n	8000876 <main+0x29a>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
#ifdef VERBOSE_DEBUGGING
				printf("Failed to activate CAN\r\n");
 800086c:	483f      	ldr	r0, [pc, #252]	; (800096c <main+0x390>)
 800086e:	f010 fa19 	bl	8010ca4 <puts>
#endif
				Error_Handler();
 8000872:	f000 fcd1 	bl	8001218 <Error_Handler>
			}

			// Turn Green LED on (turns Red LED off)
#ifdef VERBOSE_DEBUGGING
			printf("Ready to receive messages!\r\n");
 8000876:	483e      	ldr	r0, [pc, #248]	; (8000970 <main+0x394>)
 8000878:	f010 fa14 	bl	8010ca4 <puts>
#endif

			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_SET); // Successful LED
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	481a      	ldr	r0, [pc, #104]	; (80008ec <main+0x310>)
 8000882:	f002 feb1 	bl	80035e8 <HAL_GPIO_WritePin>

			// purge FIFO in case there are old messages
			while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 8000886:	e00f      	b.n	80008a8 <main+0x2cc>
				CAN_RxHeaderTypeDef RxHeader;
				uint8_t rcvd_msg[8];
				if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) {
 8000888:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800088c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000890:	2100      	movs	r1, #0
 8000892:	481d      	ldr	r0, [pc, #116]	; (8000908 <main+0x32c>)
 8000894:	f001 fc75 	bl	8002182 <HAL_CAN_GetRxMessage>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d004      	beq.n	80008a8 <main+0x2cc>
#ifdef VERBOSE_DEBUGGING
						printf("Failed to get CAN message\r\n");
 800089e:	4835      	ldr	r0, [pc, #212]	; (8000974 <main+0x398>)
 80008a0:	f010 fa00 	bl	8010ca4 <puts>
#endif
						Error_Handler();
 80008a4:	f000 fcb8 	bl	8001218 <Error_Handler>
			while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80008a8:	2100      	movs	r1, #0
 80008aa:	4817      	ldr	r0, [pc, #92]	; (8000908 <main+0x32c>)
 80008ac:	f001 fd7b 	bl	80023a6 <HAL_CAN_GetRxFifoFillLevel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1e8      	bne.n	8000888 <main+0x2ac>
					}
			}

			state = STANDBY;
 80008b6:	2303      	movs	r3, #3
 80008b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 80008bc:	e139      	b.n	8000b32 <main+0x556>
		 * 	If power switch is set to off position or the new file button is clicked -> RESET_STATE
		 * 	Else if the current buffer is filled -> SD_CARD_WRITE
		 * 	Else -> STANDBY
		 */
		case STANDBY:
			if (!POWER_STATE || NEW_LOG_FLAG) //Power switch is off or new log file
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <main+0x314>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d003      	beq.n	80008ce <main+0x2f2>
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <main+0x318>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d003      	beq.n	80008d6 <main+0x2fa>
				state = RESET_STATE;
 80008ce:	230b      	movs	r3, #11
 80008d0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			else if (is_buffer_filled) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 80008d4:	e12a      	b.n	8000b2c <main+0x550>
			else if (is_buffer_filled) //Buffer is filled
 80008d6:	4b28      	ldr	r3, [pc, #160]	; (8000978 <main+0x39c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 8126 	beq.w	8000b2c <main+0x550>
				state = SD_CARD_WRITE;
 80008e0:	2306      	movs	r3, #6
 80008e2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 80008e6:	e121      	b.n	8000b2c <main+0x550>
 80008e8:	200001b0 	.word	0x200001b0
 80008ec:	40021800 	.word	0x40021800
 80008f0:	200004e8 	.word	0x200004e8
 80008f4:	200004e9 	.word	0x200004e9
 80008f8:	200004ec 	.word	0x200004ec
 80008fc:	200024f8 	.word	0x200024f8
 8000900:	200024fa 	.word	0x200024fa
 8000904:	08011bd4 	.word	0x08011bd4
 8000908:	20000188 	.word	0x20000188
 800090c:	08011bf4 	.word	0x08011bf4
 8000910:	08011c0c 	.word	0x08011c0c
 8000914:	08011c28 	.word	0x08011c28
 8000918:	20002518 	.word	0x20002518
 800091c:	2000251c 	.word	0x2000251c
 8000920:	08011c4c 	.word	0x08011c4c
 8000924:	08011c60 	.word	0x08011c60
 8000928:	08011c80 	.word	0x08011c80
 800092c:	200024fc 	.word	0x200024fc
 8000930:	200024fd 	.word	0x200024fd
 8000934:	200024fe 	.word	0x200024fe
 8000938:	200024ff 	.word	0x200024ff
 800093c:	20002500 	.word	0x20002500
 8000940:	20002501 	.word	0x20002501
 8000944:	20002504 	.word	0x20002504
 8000948:	08011c9c 	.word	0x08011c9c
 800094c:	20000000 	.word	0x20000000
 8000950:	200003d0 	.word	0x200003d0
 8000954:	08011cc0 	.word	0x08011cc0
 8000958:	08011cf4 	.word	0x08011cf4
 800095c:	08011d20 	.word	0x08011d20
 8000960:	20002750 	.word	0x20002750
 8000964:	08011d34 	.word	0x08011d34
 8000968:	08011d60 	.word	0x08011d60
 800096c:	08011d8c 	.word	0x08011d8c
 8000970:	08011da4 	.word	0x08011da4
 8000974:	08011dc0 	.word	0x08011dc0
 8000978:	200024fb 	.word	0x200024fb
		 *
		 * Transition out:
		 *	Always -> USB_TRANSMIT
		 */
		case SD_CARD_WRITE:
			if (f_write(&SDFile, data_buffer[!current_buffer], BUFFER_TOTAL_SIZE, (void*) &byteswritten) != FR_OK || byteswritten == 0) {
 800097c:	4b6d      	ldr	r3, [pc, #436]	; (8000b34 <main+0x558>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf0c      	ite	eq
 8000984:	2301      	moveq	r3, #1
 8000986:	2300      	movne	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	4613      	mov	r3, r2
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	4413      	add	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4413      	add	r3, r2
 8000996:	4a68      	ldr	r2, [pc, #416]	; (8000b38 <main+0x55c>)
 8000998:	1899      	adds	r1, r3, r2
 800099a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800099e:	f241 0204 	movw	r2, #4100	; 0x1004
 80009a2:	4866      	ldr	r0, [pc, #408]	; (8000b3c <main+0x560>)
 80009a4:	f00e fd60 	bl	800f468 <f_write>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <main+0x3da>
 80009ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d104      	bne.n	80009c0 <main+0x3e4>
#ifdef VERBOSE_DEBUGGING
				printf("Writing Failed!\r\n");
 80009b6:	4862      	ldr	r0, [pc, #392]	; (8000b40 <main+0x564>)
 80009b8:	f010 f974 	bl	8010ca4 <puts>
#endif
				Error_Handler();
 80009bc:	f000 fc2c 	bl	8001218 <Error_Handler>
			}
			if (f_sync(&SDFile) != FR_OK) {
 80009c0:	485e      	ldr	r0, [pc, #376]	; (8000b3c <main+0x560>)
 80009c2:	f00e fec6 	bl	800f752 <f_sync>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <main+0x3fa>
#ifdef VERBOSE_DEBUGGING
				printf("Sync Failed!\r\n");
 80009cc:	485d      	ldr	r0, [pc, #372]	; (8000b44 <main+0x568>)
 80009ce:	f010 f969 	bl	8010ca4 <puts>
#endif
				Error_Handler();
 80009d2:	f000 fc21 	bl	8001218 <Error_Handler>
			}

			state = USB_TRANSMIT;
 80009d6:	2308      	movs	r3, #8
 80009d8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 80009dc:	e0a9      	b.n	8000b32 <main+0x556>
		 *
		 * Transition out:
		 *	Always -> RESET_BUFFER
		 */
		case USB_TRANSMIT:
			CDC_Transmit_FS(data_buffer[!current_buffer], BUFFER_TOTAL_SIZE);
 80009de:	4b55      	ldr	r3, [pc, #340]	; (8000b34 <main+0x558>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf0c      	ite	eq
 80009e6:	2301      	moveq	r3, #1
 80009e8:	2300      	movne	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	4613      	mov	r3, r2
 80009f0:	029b      	lsls	r3, r3, #10
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <main+0x55c>)
 80009fa:	4413      	add	r3, r2
 80009fc:	f241 0104 	movw	r1, #4100	; 0x1004
 8000a00:	4618      	mov	r0, r3
 8000a02:	f00f fa6f 	bl	800fee4 <CDC_Transmit_FS>
			state = RESET_BUFFER;
 8000a06:	230a      	movs	r3, #10
 8000a08:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 8000a0c:	e091      	b.n	8000b32 <main+0x556>
		 *	Always -> STANDBY
		 */
		case RESET_BUFFER:
			// bookkeeping information (just for debugging)
#ifdef VERBOSE_DEBUGGING
			buffer_emptyings++;
 8000a0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000a12:	3301      	adds	r3, #1
 8000a14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			total_size += byteswritten;
 8000a18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a1c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000a20:	4413      	add	r3, r2
 8000a22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			printf("emptied buffer %d\r\n", !current_buffer);
 8000a26:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <main+0x558>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2301      	moveq	r3, #1
 8000a30:	2300      	movne	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4619      	mov	r1, r3
 8000a36:	4844      	ldr	r0, [pc, #272]	; (8000b48 <main+0x56c>)
 8000a38:	f010 f8ce 	bl	8010bd8 <iprintf>
			printf("buffers emptied: %ld\r\n", buffer_emptyings);
 8000a3c:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8000a40:	4842      	ldr	r0, [pc, #264]	; (8000b4c <main+0x570>)
 8000a42:	f010 f8c9 	bl	8010bd8 <iprintf>
			printf("Wrote buffer sizeof: %ld\r\n", byteswritten);
 8000a46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4840      	ldr	r0, [pc, #256]	; (8000b50 <main+0x574>)
 8000a4e:	f010 f8c3 	bl	8010bd8 <iprintf>
#endif
			// Reset buffer that was just sent to SD and USB
			data_buffer[!current_buffer][0] = '\00';
 8000a52:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <main+0x558>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	bf0c      	ite	eq
 8000a5a:	2301      	moveq	r3, #1
 8000a5c:	2300      	movne	r3, #0
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	4935      	ldr	r1, [pc, #212]	; (8000b38 <main+0x55c>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	029b      	lsls	r3, r3, #10
 8000a68:	4413      	add	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[!current_buffer] = 0;
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <main+0x558>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf0c      	ite	eq
 8000a7c:	2301      	moveq	r3, #1
 8000a7e:	2300      	movne	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <main+0x578>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	5499      	strb	r1, [r3, r2]
			is_buffer_filled = 0;
 8000a8a:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <main+0x57c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]

			byteswritten = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

			state = STANDBY;
 8000a96:	2303      	movs	r3, #3
 8000a98:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 8000a9c:	e049      	b.n	8000b32 <main+0x556>
		 *	If power switch is in off position -> POWER_OFF
		 *	Else (button was pressed) -> TURN_ON
		 */
		case RESET_STATE:
			// Turn off CAN interrupt
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	482e      	ldr	r0, [pc, #184]	; (8000b5c <main+0x580>)
 8000aa2:	f001 fcce 	bl	8002442 <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 8000aa6:	482d      	ldr	r0, [pc, #180]	; (8000b5c <main+0x580>)
 8000aa8:	f001 fb22 	bl	80020f0 <HAL_CAN_Stop>

			// Turn Red LED on (Green LED turns off)
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET); //Red LED
 8000aac:	2200      	movs	r2, #0
 8000aae:	2101      	movs	r1, #1
 8000ab0:	482b      	ldr	r0, [pc, #172]	; (8000b60 <main+0x584>)
 8000ab2:	f002 fd99 	bl	80035e8 <HAL_GPIO_WritePin>

#ifdef VERBOSE_DEBUGGING
			// Debugging information
			printf("total sizeof: %ld\r\n", total_size);
 8000ab6:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8000aba:	482a      	ldr	r0, [pc, #168]	; (8000b64 <main+0x588>)
 8000abc:	f010 f88c 	bl	8010bd8 <iprintf>
			total_size = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			buffer_emptyings = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			printf("Unmounting SD Card!\r\n");
 8000acc:	4826      	ldr	r0, [pc, #152]	; (8000b68 <main+0x58c>)
 8000ace:	f010 f8e9 	bl	8010ca4 <puts>
#endif
			f_close(&SDFile);
 8000ad2:	481a      	ldr	r0, [pc, #104]	; (8000b3c <main+0x560>)
 8000ad4:	f00e febb 	bl	800f84e <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2000      	movs	r0, #0
 8000ade:	f00e fabf 	bl	800f060 <f_mount>

			if (!POWER_STATE) {
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <main+0x590>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d106      	bne.n	8000af8 <main+0x51c>
				state = POWER_OFF;
 8000aea:	230c      	movs	r3, #12
 8000aec:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
#ifdef VERBOSE_DEBUGGING
				printf("Turning off!\r\n");
 8000af0:	481f      	ldr	r0, [pc, #124]	; (8000b70 <main+0x594>)
 8000af2:	f010 f8d7 	bl	8010ca4 <puts>
#endif
			}
			else {
				state = TURN_ON; // button was pressed
			}
			break;
 8000af6:	e01c      	b.n	8000b32 <main+0x556>
				state = TURN_ON; // button was pressed
 8000af8:	2300      	movs	r3, #0
 8000afa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 8000afe:	e018      	b.n	8000b32 <main+0x556>
		 * Transition out:
		 *	If power switch is in the on position -> TURN_ON
		 *	Else -> POWER_OFF
		 */
		case POWER_OFF:
			if (POWER_STATE) {
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <main+0x590>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d013      	beq.n	8000b30 <main+0x554>
				state = TURN_ON;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

#ifdef VERBOSE_DEBUGGING
				printf("\r\nTurning back on!\r\n");
 8000b0e:	4819      	ldr	r0, [pc, #100]	; (8000b74 <main+0x598>)
 8000b10:	f010 f8c8 	bl	8010ca4 <puts>
#endif
			}
			break;
 8000b14:	e00c      	b.n	8000b30 <main+0x554>

		default:
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin,
 8000b16:	2200      	movs	r2, #0
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <main+0x584>)
 8000b1c:	f002 fd64 	bl	80035e8 <HAL_GPIO_WritePin>
								GPIO_PIN_RESET); // Red LED

#ifdef VERBOSE_DEBUGGING
			printf("CAN logger in unknown state!\r\n");
 8000b20:	4815      	ldr	r0, [pc, #84]	; (8000b78 <main+0x59c>)
 8000b22:	f010 f8bf 	bl	8010ca4 <puts>
#endif
			break;
 8000b26:	e004      	b.n	8000b32 <main+0x556>
			break;
 8000b28:	bf00      	nop
 8000b2a:	e57a      	b.n	8000622 <main+0x46>
			break;
 8000b2c:	bf00      	nop
 8000b2e:	e578      	b.n	8000622 <main+0x46>
			break;
 8000b30:	bf00      	nop
		switch (state) {
 8000b32:	e576      	b.n	8000622 <main+0x46>
 8000b34:	200024fa 	.word	0x200024fa
 8000b38:	200004ec 	.word	0x200004ec
 8000b3c:	20002750 	.word	0x20002750
 8000b40:	08011ddc 	.word	0x08011ddc
 8000b44:	08011df0 	.word	0x08011df0
 8000b48:	08011e00 	.word	0x08011e00
 8000b4c:	08011e14 	.word	0x08011e14
 8000b50:	08011e2c 	.word	0x08011e2c
 8000b54:	200024f8 	.word	0x200024f8
 8000b58:	200024fb 	.word	0x200024fb
 8000b5c:	20000188 	.word	0x20000188
 8000b60:	40021800 	.word	0x40021800
 8000b64:	08011e48 	.word	0x08011e48
 8000b68:	08011e5c 	.word	0x08011e5c
 8000b6c:	200004e8 	.word	0x200004e8
 8000b70:	08011e74 	.word	0x08011e74
 8000b74:	08011e84 	.word	0x08011e84
 8000b78:	08011e98 	.word	0x08011e98

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	; 0x50
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2234      	movs	r2, #52	; 0x34
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f010 f8a1 	bl	8010cd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <SystemClock_Config+0xc8>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a27      	ldr	r2, [pc, #156]	; (8000c44 <SystemClock_Config+0xc8>)
 8000ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <SystemClock_Config+0xc8>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <SystemClock_Config+0xcc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <SystemClock_Config+0xcc>)
 8000bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <SystemClock_Config+0xcc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bde:	2302      	movs	r3, #2
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000be6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bec:	2360      	movs	r3, #96	; 0x60
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fd65 	bl	80056d0 <HAL_RCC_OscConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c0c:	f000 fb04 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c10:	230f      	movs	r3, #15
 8000c12:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	2302      	movs	r3, #2
 8000c16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f004 fffd 	bl	8005c2c <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c38:	f000 faee 	bl	8001218 <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3750      	adds	r7, #80	; 0x50
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000

08000c4c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <MX_CAN1_Init+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c6a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000c6e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c76:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_CAN1_Init+0x64>)
 8000c9e:	f000 fffb 	bl	8001c98 <HAL_CAN_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ca8:	f000 fab6 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000188 	.word	0x20000188
 8000cb4:	40006400 	.word	0x40006400

08000cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	f002 fcb6 	bl	8003664 <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f000 fa8b 	bl	8001218 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d06:	f003 f993 	bl	8004030 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f000 fa82 	bl	8001218 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d18:	f003 f9d5 	bl	80040c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fa79 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200001b0 	.word	0x200001b0
 8000d30:	40005400 	.word	0x40005400
 8000d34:	00506682 	.word	0x00506682

08000d38 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_SDMMC1_SD_Init+0x44>)
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <MX_SDMMC1_SD_Init+0x48>)
 8000d40:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_SDMMC1_SD_Init+0x44>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_SDMMC1_SD_Init+0x44>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_SDMMC1_SD_Init+0x44>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_SDMMC1_SD_Init+0x44>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_SDMMC1_SD_Init+0x44>)
 8000d5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d60:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_SDMMC1_SD_Init+0x44>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_SDMMC1_SD_Init+0x44>)
 8000d6a:	f005 fdad 	bl	80068c8 <HAL_SD_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000d74:	f000 fa50 	bl	8001218 <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000204 	.word	0x20000204
 8000d80:	40012c00 	.word	0x40012c00

08000d84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <MX_USART3_UART_Init+0x5c>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USART3_UART_Init+0x58>)
 8000dc8:	f006 fea6 	bl	8007b18 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dd2:	f000 fa21 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000348 	.word	0x20000348
 8000de0:	40004800 	.word	0x40004800

08000de4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_DMA_Init+0x48>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <MX_DMA_Init+0x48>)
 8000df0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_DMA_Init+0x48>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	203b      	movs	r0, #59	; 0x3b
 8000e08:	f001 fe4d 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e0c:	203b      	movs	r0, #59	; 0x3b
 8000e0e:	f001 fe66 	bl	8002ade <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2045      	movs	r0, #69	; 0x45
 8000e18:	f001 fe45 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e1c:	2045      	movs	r0, #69	; 0x45
 8000e1e:	f001 fe5e 	bl	8002ade <HAL_NVIC_EnableIRQ>

}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b74      	ldr	r3, [pc, #464]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a73      	ldr	r2, [pc, #460]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b71      	ldr	r3, [pc, #452]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	623b      	str	r3, [r7, #32]
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	4b6e      	ldr	r3, [pc, #440]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a6d      	ldr	r2, [pc, #436]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e76:	4b68      	ldr	r3, [pc, #416]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a67      	ldr	r2, [pc, #412]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e7c:	f043 0320 	orr.w	r3, r3, #32
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b65      	ldr	r3, [pc, #404]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8e:	4b62      	ldr	r3, [pc, #392]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a61      	ldr	r2, [pc, #388]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b5f      	ldr	r3, [pc, #380]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a5b      	ldr	r2, [pc, #364]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b59      	ldr	r3, [pc, #356]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b56      	ldr	r3, [pc, #344]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a55      	ldr	r2, [pc, #340]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b53      	ldr	r3, [pc, #332]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b50      	ldr	r3, [pc, #320]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a4f      	ldr	r2, [pc, #316]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a49      	ldr	r2, [pc, #292]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <MX_GPIO_Init+0x1e8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PokManualReset_GPIO_Port, PokManualReset_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	4843      	ldr	r0, [pc, #268]	; (800101c <MX_GPIO_Init+0x1ec>)
 8000f0e:	f002 fb6b 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, StatusSignal_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2141      	movs	r1, #65	; 0x41
 8000f16:	4842      	ldr	r0, [pc, #264]	; (8001020 <MX_GPIO_Init+0x1f0>)
 8000f18:	f002 fb66 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PokRESET_Pin */
  GPIO_InitStruct.Pin = PokRESET_Pin;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f22:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PokRESET_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	483a      	ldr	r0, [pc, #232]	; (800101c <MX_GPIO_Init+0x1ec>)
 8000f34:	f002 f994 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PokManualReset_Pin */
  GPIO_InitStruct.Pin = PokManualReset_Pin;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PokManualReset_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4832      	ldr	r0, [pc, #200]	; (800101c <MX_GPIO_Init+0x1ec>)
 8000f52:	f002 f985 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : StatusSignal_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = StatusSignal_Pin|USB_PowerSwitchOn_Pin;
 8000f56:	2341      	movs	r3, #65	; 0x41
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	482c      	ldr	r0, [pc, #176]	; (8001020 <MX_GPIO_Init+0x1f0>)
 8000f6e:	f002 f977 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000f72:	2302      	movs	r3, #2
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f76:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4826      	ldr	r0, [pc, #152]	; (8001020 <MX_GPIO_Init+0x1f0>)
 8000f88:	f002 f96a 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481e      	ldr	r0, [pc, #120]	; (8001024 <MX_GPIO_Init+0x1f4>)
 8000faa:	f002 f959 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000fae:	2384      	movs	r3, #132	; 0x84
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4817      	ldr	r0, [pc, #92]	; (8001020 <MX_GPIO_Init+0x1f0>)
 8000fc2:	f002 f94d 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : NewLogBtn_Pin */
  GPIO_InitStruct.Pin = NewLogBtn_Pin;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NewLogBtn_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_GPIO_Init+0x1f0>)
 8000fdc:	f002 f940 	bl	8003260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2007      	movs	r0, #7
 8000fe6:	f001 fd5e 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fea:	2007      	movs	r0, #7
 8000fec:	f001 fd77 	bl	8002ade <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2009      	movs	r0, #9
 8000ff6:	f001 fd56 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ffa:	2009      	movs	r0, #9
 8000ffc:	f001 fd6f 	bl	8002ade <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2028      	movs	r0, #40	; 0x28
 8001006:	f001 fd4e 	bl	8002aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100a:	2028      	movs	r0, #40	; 0x28
 800100c:	f001 fd67 	bl	8002ade <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001010:	bf00      	nop
 8001012:	3738      	adds	r7, #56	; 0x38
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40021400 	.word	0x40021400
 8001020:	40021800 	.word	0x40021800
 8001024:	40021000 	.word	0x40021000

08001028 <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b09d      	sub	sp, #116	; 0x74
 800102c:	af06      	add	r7, sp, #24
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001036:	2100      	movs	r1, #0
 8001038:	4833      	ldr	r0, [pc, #204]	; (8001108 <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 800103a:	f001 f8a2 	bl	8002182 <HAL_CAN_GetRxMessage>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
#ifdef VERBOSE_DEBUGGING
		printf("Failed to get CAN message\r\n");
 8001044:	4831      	ldr	r0, [pc, #196]	; (800110c <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8001046:	f00f fe2d 	bl	8010ca4 <puts>
#endif
		Error_Handler();
 800104a:	f000 f8e5 	bl	8001218 <Error_Handler>
	}

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 800104e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001052:	b29b      	uxth	r3, r3
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b29a      	uxth	r2, r3
 8001058:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800105c:	b29b      	uxth	r3, r3
 800105e:	4413      	add	r3, r2
 8001060:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8001064:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001068:	b29b      	uxth	r3, r3
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b29a      	uxth	r2, r3
 800106e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001072:	b29b      	uxth	r3, r3
 8001074:	4413      	add	r3, r2
 8001076:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 800107a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800107e:	b29b      	uxth	r3, r3
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b29a      	uxth	r2, r3
 8001084:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001088:	b29b      	uxth	r3, r3
 800108a:	4413      	add	r3, r2
 800108c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8001090:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001094:	b29b      	uxth	r3, r3
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b29a      	uxth	r2, r3
 800109a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	char encodedData[ENCODED_CAN_SIZE_BYTES];

	// consider writing raw bytes
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 80010a6:	f000 fdc7 	bl	8001c38 <HAL_GetTick>
 80010aa:	4606      	mov	r6, r0
 80010ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ae:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80010b2:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 80010b6:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 80010ba:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 80010be:	463d      	mov	r5, r7
 80010c0:	9404      	str	r4, [sp, #16]
 80010c2:	9003      	str	r0, [sp, #12]
 80010c4:	9102      	str	r1, [sp, #8]
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4633      	mov	r3, r6
 80010cc:	4a10      	ldr	r2, [pc, #64]	; (8001110 <Get_and_Append_CAN_Message_to_Buffer+0xe8>)
 80010ce:	212a      	movs	r1, #42	; 0x2a
 80010d0:	4628      	mov	r0, r5
 80010d2:	f00f fc7f 	bl	80109d4 <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(current_buffer ? data_buffer[1] : data_buffer[0], encodedData);
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <Get_and_Append_CAN_Message_to_Buffer+0xba>
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 80010e0:	e000      	b.n	80010e4 <Get_and_Append_CAN_Message_to_Buffer+0xbc>
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 80010e4:	463a      	mov	r2, r7
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f00f fde3 	bl	8010cb4 <strcat>
	buffer_fill_level[current_buffer]++;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 80010f4:	5cd2      	ldrb	r2, [r2, r3]
 80010f6:	3201      	adds	r2, #1
 80010f8:	b2d1      	uxtb	r1, r2
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 80010fc:	54d1      	strb	r1, [r2, r3]
}
 80010fe:	bf00      	nop
 8001100:	375c      	adds	r7, #92	; 0x5c
 8001102:	46bd      	mov	sp, r7
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	bf00      	nop
 8001108:	20000188 	.word	0x20000188
 800110c:	08011dc0 	.word	0x08011dc0
 8001110:	08011eb8 	.word	0x08011eb8
 8001114:	200024fa 	.word	0x200024fa
 8001118:	200014f1 	.word	0x200014f1
 800111c:	200004ec 	.word	0x200004ec
 8001120:	200024f8 	.word	0x200024f8

08001124 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 800112e:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800113a:	b29b      	uxth	r3, r3
 800113c:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	0a1a      	lsrs	r2, r3, #8
 8001142:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001146:	4013      	ands	r3, r2
 8001148:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 800114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114c:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8001150:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8001152:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8001154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001156:	0a1a      	lsrs	r2, r3, #8
 8001158:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800116c:	2301      	movs	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8001170:	2301      	movs	r3, #1
 8001172:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <CAN_Filter_Config+0x64>)
 800117a:	f000 fe89 	bl	8001e90 <HAL_CAN_ConfigFilter>
 800117e:	4603      	mov	r3, r0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3730      	adds	r7, #48	; 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000188 	.word	0x20000188

0800118c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if (buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b64      	cmp	r3, #100	; 0x64
 800119a:	d108      	bne.n	80011ae <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			&& buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800119e:	785b      	ldrb	r3, [r3, #1]
 80011a0:	2b64      	cmp	r3, #100	; 0x64
 80011a2:	d104      	bne.n	80011ae <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
#ifdef VERBOSE_DEBUGGING
		printf("Buffers are full\r\n");
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80011a6:	f00f fd7d 	bl	8010ca4 <puts>
#endif
		Error_Handler();
 80011aa:	f000 f835 	bl	8001218 <Error_Handler>
	}

	Get_and_Append_CAN_Message_to_Buffer();
 80011ae:	f7ff ff3b 	bl	8001028 <Get_and_Append_CAN_Message_to_Buffer>

	if (buffer_fill_level[current_buffer] == CAN_MESSAGES_TO_BUFFER) {
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80011ba:	5c9b      	ldrb	r3, [r3, r2]
 80011bc:	2b64      	cmp	r3, #100	; 0x64
 80011be:	d10c      	bne.n	80011da <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		is_buffer_filled = 1;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		current_buffer = !current_buffer;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf0c      	ite	eq
 80011ce:	2301      	moveq	r3, #1
 80011d0:	2300      	movne	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011d8:	701a      	strb	r2, [r3, #0]
	}
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200024f8 	.word	0x200024f8
 80011e8:	08011edc 	.word	0x08011edc
 80011ec:	200024fa 	.word	0x200024fa
 80011f0:	200024fb 	.word	0x200024fb

080011f4 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80011fc:	1d39      	adds	r1, r7, #4
 80011fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001202:	2201      	movs	r2, #1
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <__io_putchar+0x20>)
 8001206:	f006 fcd5 	bl	8007bb4 <HAL_UART_Transmit>

	return ch;
 800120a:	687b      	ldr	r3, [r7, #4]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000348 	.word	0x20000348

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
#ifdef VERBOSE_DEBUGGING
	printf("\r\nError Handler Reached\r\n");
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <Error_Handler+0x1c>)
 8001222:	f00f fd3f 	bl	8010ca4 <puts>
#endif
	HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2101      	movs	r1, #1
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <Error_Handler+0x20>)
 800122c:	f002 f9dc 	bl	80035e8 <HAL_GPIO_WritePin>

	while (1) {
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x18>
 8001232:	bf00      	nop
 8001234:	08011ef0 	.word	0x08011ef0
 8001238:	40021800 	.word	0x40021800

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_MspInit+0x44>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_MspInit+0x44>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_MspInit+0x44>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_MspInit+0x44>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_MspInit+0x44>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_MspInit+0x44>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <HAL_CAN_MspInit+0x8c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12f      	bne.n	8001306 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_CAN_MspInit+0x90>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <HAL_CAN_MspInit+0x90>)
 80012ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_CAN_MspInit+0x90>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_CAN_MspInit+0x90>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <HAL_CAN_MspInit+0x90>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_CAN_MspInit+0x90>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012d6:	2303      	movs	r3, #3
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012e6:	2309      	movs	r3, #9
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <HAL_CAN_MspInit+0x94>)
 80012f2:	f001 ffb5 	bl	8003260 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2014      	movs	r0, #20
 80012fc:	f001 fbd3 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001300:	2014      	movs	r0, #20
 8001302:	f001 fbec 	bl	8002ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40006400 	.word	0x40006400
 8001314:	40023800 	.word	0x40023800
 8001318:	40020c00 	.word	0x40020c00

0800131c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0ae      	sub	sp, #184	; 0xb8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2290      	movs	r2, #144	; 0x90
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f00f fcc8 	bl	8010cd2 <memset>
  if(hi2c->Instance==I2C1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_I2C_MspInit+0xb4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d13c      	bne.n	80013c6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800134c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001350:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001352:	2300      	movs	r3, #0
 8001354:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4618      	mov	r0, r3
 800135c:	f004 fe8c 	bl	8006078 <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001366:	f7ff ff57 	bl	8001218 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_I2C_MspInit+0xb8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_I2C_MspInit+0xb8>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_I2C_MspInit+0xb8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001382:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138a:	2312      	movs	r3, #18
 800138c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139c:	2304      	movs	r3, #4
 800139e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013a6:	4619      	mov	r1, r3
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <HAL_I2C_MspInit+0xbc>)
 80013aa:	f001 ff59 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_I2C_MspInit+0xb8>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_I2C_MspInit+0xb8>)
 80013b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_I2C_MspInit+0xb8>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	37b8      	adds	r7, #184	; 0xb8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40005400 	.word	0x40005400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0ae      	sub	sp, #184	; 0xb8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2290      	movs	r2, #144	; 0x90
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00f fc68 	bl	8010cd2 <memset>
  if(hsd->Instance==SDMMC1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a73      	ldr	r2, [pc, #460]	; (80015d4 <HAL_SD_MspInit+0x1f8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	f040 80de 	bne.w	80015ca <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800140e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001412:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001418:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f004 fe29 	bl	8006078 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800142c:	f7ff fef4 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001430:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <HAL_SD_MspInit+0x1fc>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <HAL_SD_MspInit+0x1fc>)
 8001436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800143a:	6453      	str	r3, [r2, #68]	; 0x44
 800143c:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_SD_MspInit+0x1fc>)
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_SD_MspInit+0x1fc>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a62      	ldr	r2, [pc, #392]	; (80015d8 <HAL_SD_MspInit+0x1fc>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <HAL_SD_MspInit+0x1fc>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001460:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_SD_MspInit+0x1fc>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a5c      	ldr	r2, [pc, #368]	; (80015d8 <HAL_SD_MspInit+0x1fc>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <HAL_SD_MspInit+0x1fc>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001478:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800147c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001492:	230c      	movs	r3, #12
 8001494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800149c:	4619      	mov	r1, r3
 800149e:	484f      	ldr	r0, [pc, #316]	; (80015dc <HAL_SD_MspInit+0x200>)
 80014a0:	f001 fede 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014a4:	2304      	movs	r3, #4
 80014a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014bc:	230c      	movs	r3, #12
 80014be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4845      	ldr	r0, [pc, #276]	; (80015e0 <HAL_SD_MspInit+0x204>)
 80014ca:	f001 fec9 	bl	8003260 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80014ce:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <HAL_SD_MspInit+0x208>)
 80014d0:	4a45      	ldr	r2, [pc, #276]	; (80015e8 <HAL_SD_MspInit+0x20c>)
 80014d2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <HAL_SD_MspInit+0x208>)
 80014d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014da:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014dc:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_SD_MspInit+0x208>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e2:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <HAL_SD_MspInit+0x208>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HAL_SD_MspInit+0x208>)
 80014ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ee:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f0:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <HAL_SD_MspInit+0x208>)
 80014f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f8:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <HAL_SD_MspInit+0x208>)
 80014fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fe:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <HAL_SD_MspInit+0x208>)
 8001502:	2220      	movs	r2, #32
 8001504:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <HAL_SD_MspInit+0x208>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800150c:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <HAL_SD_MspInit+0x208>)
 800150e:	2204      	movs	r2, #4
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_SD_MspInit+0x208>)
 8001514:	2203      	movs	r2, #3
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <HAL_SD_MspInit+0x208>)
 800151a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001520:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_SD_MspInit+0x208>)
 8001522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001528:	482e      	ldr	r0, [pc, #184]	; (80015e4 <HAL_SD_MspInit+0x208>)
 800152a:	f001 faf3 	bl	8002b14 <HAL_DMA_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001534:	f7ff fe70 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a2a      	ldr	r2, [pc, #168]	; (80015e4 <HAL_SD_MspInit+0x208>)
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
 800153e:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <HAL_SD_MspInit+0x208>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <HAL_SD_MspInit+0x210>)
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <HAL_SD_MspInit+0x214>)
 8001548:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <HAL_SD_MspInit+0x210>)
 800154c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001550:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_SD_MspInit+0x210>)
 8001554:	2240      	movs	r2, #64	; 0x40
 8001556:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_SD_MspInit+0x210>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_SD_MspInit+0x210>)
 8001560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001564:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_SD_MspInit+0x210>)
 8001568:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800156c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_SD_MspInit+0x210>)
 8001570:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001574:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_SD_MspInit+0x210>)
 8001578:	2220      	movs	r2, #32
 800157a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_SD_MspInit+0x210>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_SD_MspInit+0x210>)
 8001584:	2204      	movs	r2, #4
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_SD_MspInit+0x210>)
 800158a:	2203      	movs	r2, #3
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_SD_MspInit+0x210>)
 8001590:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_SD_MspInit+0x210>)
 8001598:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800159e:	4813      	ldr	r0, [pc, #76]	; (80015ec <HAL_SD_MspInit+0x210>)
 80015a0:	f001 fab8 	bl	8002b14 <HAL_DMA_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80015aa:	f7ff fe35 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_SD_MspInit+0x210>)
 80015b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_SD_MspInit+0x210>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2031      	movs	r0, #49	; 0x31
 80015c0:	f001 fa71 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80015c4:	2031      	movs	r0, #49	; 0x31
 80015c6:	f001 fa8a 	bl	8002ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	37b8      	adds	r7, #184	; 0xb8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40012c00 	.word	0x40012c00
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020c00 	.word	0x40020c00
 80015e4:	20000288 	.word	0x20000288
 80015e8:	40026458 	.word	0x40026458
 80015ec:	200002e8 	.word	0x200002e8
 80015f0:	400264a0 	.word	0x400264a0

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0ae      	sub	sp, #184	; 0xb8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2290      	movs	r2, #144	; 0x90
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00f fb5c 	bl	8010cd2 <memset>
  if(huart->Instance==USART3)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <HAL_UART_MspInit+0xb4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d13c      	bne.n	800169e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001628:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800162a:	2300      	movs	r3, #0
 800162c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fd20 	bl	8006078 <HAL_RCCEx_PeriphCLKConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800163e:	f7ff fdeb 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_UART_MspInit+0xb8>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_UART_MspInit+0xb8>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_UART_MspInit+0xb8>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_UART_MspInit+0xb8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_UART_MspInit+0xb8>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_UART_MspInit+0xb8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001672:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800168c:	2307      	movs	r3, #7
 800168e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001692:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <HAL_UART_MspInit+0xbc>)
 800169a:	f001 fde1 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	37b8      	adds	r7, #184	; 0xb8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40004800 	.word	0x40004800
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020c00 	.word	0x40020c00

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001700:	f000 fa86 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 800170c:	2102      	movs	r1, #2
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <EXTI1_IRQHandler+0x20>)
 8001710:	f001 ff52 	bl	80035b8 <HAL_GPIO_ReadPin>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <EXTI1_IRQHandler+0x24>)
 800171a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 800171c:	2002      	movs	r0, #2
 800171e:	f001 ff7d 	bl	800361c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021800 	.word	0x40021800
 800172c:	200004e8 	.word	0x200004e8

08001730 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	NEW_LOG_FLAG = 1;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <EXTI3_IRQHandler+0x14>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NewLogBtn_Pin);
 800173a:	2008      	movs	r0, #8
 800173c:	f001 ff6e 	bl	800361c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200004e9 	.word	0x200004e9

08001748 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <CAN1_RX0_IRQHandler+0x10>)
 800174e:	f000 fe9f 	bl	8002490 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000188 	.word	0x20000188

0800175c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (POWER_STATE == 0) {
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <EXTI15_10_IRQHandler+0x40>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d112      	bne.n	800178e <EXTI15_10_IRQHandler+0x32>
		if (HAL_GPIO_ReadPin(PokRESET_GPIO_Port, PokRESET_Pin) == GPIO_PIN_SET) {
 8001768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <EXTI15_10_IRQHandler+0x44>)
 800176e:	f001 ff23 	bl	80035b8 <HAL_GPIO_ReadPin>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <EXTI15_10_IRQHandler+0x28>
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2101      	movs	r1, #1
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <EXTI15_10_IRQHandler+0x48>)
 800177e:	f001 ff33 	bl	80035e8 <HAL_GPIO_WritePin>
 8001782:	e004      	b.n	800178e <EXTI15_10_IRQHandler+0x32>
		}
		else {
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2101      	movs	r1, #1
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <EXTI15_10_IRQHandler+0x48>)
 800178a:	f001 ff2d 	bl	80035e8 <HAL_GPIO_WritePin>
		}
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PokRESET_Pin);
 800178e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001792:	f001 ff43 	bl	800361c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200004e8 	.word	0x200004e8
 80017a0:	40021400 	.word	0x40021400
 80017a4:	40021800 	.word	0x40021800

080017a8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <SDMMC1_IRQHandler+0x10>)
 80017ae:	f005 fb0b 	bl	8006dc8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000204 	.word	0x20000204

080017bc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <DMA2_Stream3_IRQHandler+0x10>)
 80017c2:	f001 fad7 	bl	8002d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000288 	.word	0x20000288

080017d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <OTG_FS_IRQHandler+0x10>)
 80017d6:	f002 fe08 	bl	80043ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000409c 	.word	0x2000409c

080017e4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <DMA2_Stream6_IRQHandler+0x10>)
 80017ea:	f001 fac3 	bl	8002d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200002e8 	.word	0x200002e8

080017f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e00a      	b.n	8001820 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180a:	f3af 8000 	nop.w
 800180e:	4601      	mov	r1, r0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf0      	blt.n	800180a <_read+0x12>
  }

  return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e009      	b.n	8001858 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fcd1 	bl	80011f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf1      	blt.n	8001844 <_write+0x12>
  }
  return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_close>:

int _close(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001892:	605a      	str	r2, [r3, #4]
  return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f00f f9fe 	bl	8010d04 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20080000 	.word	0x20080000
 8001934:	00000400 	.word	0x00000400
 8001938:	20002508 	.word	0x20002508
 800193c:	200046f0 	.word	0x200046f0

08001940 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001968:	480d      	ldr	r0, [pc, #52]	; (80019a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800196a:	490e      	ldr	r1, [pc, #56]	; (80019a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800196c:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001980:	4c0b      	ldr	r4, [pc, #44]	; (80019b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800198e:	f7ff ffd7 	bl	8001940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001992:	f00f f9bd 	bl	8010d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7fe fe21 	bl	80005dc <main>
  bx  lr    
 800199a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800199c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80019a8:	08012454 	.word	0x08012454
  ldr r2, =_sbss
 80019ac:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80019b0:	200046f0 	.word	0x200046f0

080019b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <DS1307_Init+0x1c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 f806 	bl	80019d8 <DS1307_SetClockHalt>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000250c 	.word	0x2000250c

080019d8 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <DS1307_SetClockHalt+0x14>
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	e000      	b.n	80019ee <DS1307_SetClockHalt+0x16>
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80019f0:	2000      	movs	r0, #0
 80019f2:	f000 f831 	bl	8001a58 <DS1307_GetRegByte>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f805 	bl	8001a1c <DS1307_SetRegByte>
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	733b      	strb	r3, [r7, #12]
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <DS1307_SetRegByte+0x38>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	f107 020c 	add.w	r2, r7, #12
 8001a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2302      	movs	r3, #2
 8001a44:	21d0      	movs	r1, #208	; 0xd0
 8001a46:	f001 fe9d 	bl	8003784 <HAL_I2C_Master_Transmit>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000250c 	.word	0x2000250c

08001a58 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <DS1307_GetRegByte+0x40>)
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	1dfa      	adds	r2, r7, #7
 8001a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	21d0      	movs	r1, #208	; 0xd0
 8001a72:	f001 fe87 	bl	8003784 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <DS1307_GetRegByte+0x40>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	f107 020f 	add.w	r2, r7, #15
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	21d0      	movs	r1, #208	; 0xd0
 8001a88:	f001 ff70 	bl	800396c <HAL_I2C_Master_Receive>
	return val;
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000250c 	.word	0x2000250c

08001a9c <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001aa0:	2004      	movs	r0, #4
 8001aa2:	f7ff ffd9 	bl	8001a58 <DS1307_GetRegByte>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f85b 	bl	8001b64 <DS1307_DecodeBCD>
 8001aae:	4603      	mov	r3, r0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001ab8:	2005      	movs	r0, #5
 8001aba:	f7ff ffcd 	bl	8001a58 <DS1307_GetRegByte>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f84f 	bl	8001b64 <DS1307_DecodeBCD>
 8001ac6:	4603      	mov	r3, r0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}

08001acc <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001ad2:	2010      	movs	r0, #16
 8001ad4:	f7ff ffc0 	bl	8001a58 <DS1307_GetRegByte>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	0091      	lsls	r1, r2, #2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001af0:	2006      	movs	r0, #6
 8001af2:	f7ff ffb1 	bl	8001a58 <DS1307_GetRegByte>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f833 	bl	8001b64 <DS1307_DecodeBCD>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	4413      	add	r3, r2
 8001b06:	b29b      	uxth	r3, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001b14:	2002      	movs	r0, #2
 8001b16:	f7ff ff9f 	bl	8001a58 <DS1307_GetRegByte>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f81e 	bl	8001b64 <DS1307_DecodeBCD>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7ff ff90 	bl	8001a58 <DS1307_GetRegByte>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f812 	bl	8001b64 <DS1307_DecodeBCD>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff ff84 	bl	8001a58 <DS1307_GetRegByte>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f803 	bl	8001b64 <DS1307_DecodeBCD>
 8001b5e:	4603      	mov	r3, r0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	b2db      	uxtb	r3, r3
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f000 ff78 	bl	8002a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 f805 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba6:	f7ff fb49 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 ff93 	bl	8002afa <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bec:	f000 ff5b 	bl	8002aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000004 	.word	0x20000004
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	20000008 	.word	0x20000008

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2000000c 	.word	0x2000000c
 8001c34:	20002510 	.word	0x20002510

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20002510 	.word	0x20002510

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000000c 	.word	0x2000000c

08001c98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0ed      	b.n	8001e86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fae4 	bl	8001284 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff ffb4 	bl	8001c38 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cd2:	e012      	b.n	8001cfa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cd4:	f7ff ffb0 	bl	8001c38 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b0a      	cmp	r3, #10
 8001ce0:	d90b      	bls.n	8001cfa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0c5      	b.n	8001e86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0e5      	beq.n	8001cd4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0202 	bic.w	r2, r2, #2
 8001d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d18:	f7ff ff8e 	bl	8001c38 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d1e:	e012      	b.n	8001d46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d20:	f7ff ff8a 	bl	8001c38 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b0a      	cmp	r3, #10
 8001d2c:	d90b      	bls.n	8001d46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e09f      	b.n	8001e86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e5      	bne.n	8001d20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7e1b      	ldrb	r3, [r3, #24]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d108      	bne.n	8001d6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e007      	b.n	8001d7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7e5b      	ldrb	r3, [r3, #25]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e007      	b.n	8001da8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e9b      	ldrb	r3, [r3, #26]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d108      	bne.n	8001dc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e007      	b.n	8001dd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0220 	bic.w	r2, r2, #32
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7edb      	ldrb	r3, [r3, #27]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0210 	bic.w	r2, r2, #16
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e007      	b.n	8001dfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0210 	orr.w	r2, r2, #16
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7f1b      	ldrb	r3, [r3, #28]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d108      	bne.n	8001e16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0208 	orr.w	r2, r2, #8
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e007      	b.n	8001e26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0208 	bic.w	r2, r2, #8
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7f5b      	ldrb	r3, [r3, #29]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d108      	bne.n	8001e40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0204 	orr.w	r2, r2, #4
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e007      	b.n	8001e50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0204 	bic.w	r2, r2, #4
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	ea42 0103 	orr.w	r1, r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	1e5a      	subs	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d003      	beq.n	8001eb6 <HAL_CAN_ConfigFilter+0x26>
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	f040 80c7 	bne.w	8002044 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a69      	ldr	r2, [pc, #420]	; (8002060 <HAL_CAN_ConfigFilter+0x1d0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d001      	beq.n	8001ec4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ec2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	4a63      	ldr	r2, [pc, #396]	; (8002064 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d111      	bne.n	8001f00 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ee2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2201      	movs	r2, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d123      	bne.n	8001f72 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	401a      	ands	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3248      	adds	r2, #72	; 0x48
 8001f52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f68:	6979      	ldr	r1, [r7, #20]
 8001f6a:	3348      	adds	r3, #72	; 0x48
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d122      	bne.n	8001fc0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3248      	adds	r2, #72	; 0x48
 8001fa0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fb6:	6979      	ldr	r1, [r7, #20]
 8001fb8:	3348      	adds	r3, #72	; 0x48
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001fda:	e007      	b.n	8001fec <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002006:	e007      	b.n	8002018 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	431a      	orrs	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d107      	bne.n	8002030 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	431a      	orrs	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002036:	f023 0201 	bic.w	r2, r3, #1
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e006      	b.n	8002052 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40003400 	.word	0x40003400
 8002064:	40006400 	.word	0x40006400

08002068 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d12e      	bne.n	80020da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002094:	f7ff fdd0 	bl	8001c38 <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800209a:	e012      	b.n	80020c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800209c:	f7ff fdcc 	bl	8001c38 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b0a      	cmp	r3, #10
 80020a8:	d90b      	bls.n	80020c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2205      	movs	r2, #5
 80020ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e012      	b.n	80020e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e5      	bne.n	800209c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e006      	b.n	80020e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
  }
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d133      	bne.n	800216c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002114:	f7ff fd90 	bl	8001c38 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800211a:	e012      	b.n	8002142 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800211c:	f7ff fd8c 	bl	8001c38 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b0a      	cmp	r3, #10
 8002128:	d90b      	bls.n	8002142 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2205      	movs	r2, #5
 800213a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e01b      	b.n	800217a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0e5      	beq.n	800211c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0202 	bic.w	r2, r2, #2
 800215e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e006      	b.n	800217a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
  }
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002182:	b480      	push	{r7}
 8002184:	b087      	sub	sp, #28
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002196:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d003      	beq.n	80021a6 <HAL_CAN_GetRxMessage+0x24>
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	f040 80f3 	bne.w	800238c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10e      	bne.n	80021ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0e7      	b.n	800239a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0d8      	b.n	800239a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	331b      	adds	r3, #27
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	4413      	add	r3, r2
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0204 	and.w	r2, r3, #4
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	331b      	adds	r3, #27
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	4413      	add	r3, r2
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0d5b      	lsrs	r3, r3, #21
 8002216:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e00b      	b.n	8002238 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	331b      	adds	r3, #27
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4413      	add	r3, r2
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	331b      	adds	r3, #27
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4413      	add	r3, r2
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0202 	and.w	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	331b      	adds	r3, #27
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 020f 	and.w	r2, r3, #15
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	331b      	adds	r3, #27
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	4413      	add	r3, r2
 8002272:	3304      	adds	r3, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	b2da      	uxtb	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	331b      	adds	r3, #27
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	4413      	add	r3, r2
 800228a:	3304      	adds	r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	b29a      	uxth	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	4413      	add	r3, r2
 80022a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0a1a      	lsrs	r2, r3, #8
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0c1a      	lsrs	r2, r3, #16
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	3302      	adds	r3, #2
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e1a      	lsrs	r2, r3, #24
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	3303      	adds	r3, #3
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	4413      	add	r3, r2
 8002304:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	3304      	adds	r3, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	4413      	add	r3, r2
 800231c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0a1a      	lsrs	r2, r3, #8
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	3305      	adds	r3, #5
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	4413      	add	r3, r2
 8002336:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0c1a      	lsrs	r2, r3, #16
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	3306      	adds	r3, #6
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	4413      	add	r3, r2
 8002350:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e1a      	lsrs	r2, r3, #24
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3307      	adds	r3, #7
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d108      	bne.n	8002378 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0220 	orr.w	r2, r2, #32
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	e007      	b.n	8002388 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0220 	orr.w	r2, r2, #32
 8002386:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e006      	b.n	800239a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
  }
}
 800239a:	4618      	mov	r0, r3
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ba:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d002      	beq.n	80023c8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80023c2:	7afb      	ldrb	r3, [r7, #11]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d10f      	bne.n	80023e8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e005      	b.n	80023e8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80023e8:	68fb      	ldr	r3, [r7, #12]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002406:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d002      	beq.n	8002414 <HAL_CAN_ActivateNotification+0x1e>
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d109      	bne.n	8002428 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6959      	ldr	r1, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e006      	b.n	8002436 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002452:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d002      	beq.n	8002460 <HAL_CAN_DeactivateNotification+0x1e>
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d10a      	bne.n	8002476 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6959      	ldr	r1, [r3, #20]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	43da      	mvns	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	400a      	ands	r2, r1
 8002470:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e006      	b.n	8002484 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d07c      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f983 	bl	80027fe <HAL_CAN_TxMailbox0CompleteCallback>
 80024f8:	e016      	b.n	8002528 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
 800250c:	e00c      	b.n	8002528 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	e002      	b.n	8002528 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f989 	bl	800283a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d024      	beq.n	800257c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800253a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f963 	bl	8002812 <HAL_CAN_TxMailbox1CompleteCallback>
 800254c:	e016      	b.n	800257c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
 8002560:	e00c      	b.n	800257c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e002      	b.n	800257c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f969 	bl	800284e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d024      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800258e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f943 	bl	8002826 <HAL_CAN_TxMailbox2CompleteCallback>
 80025a0:	e016      	b.n	80025d0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
 80025b4:	e00c      	b.n	80025d0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	e002      	b.n	80025d0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f949 	bl	8002862 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00c      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2210      	movs	r2, #16
 80025f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2208      	movs	r2, #8
 800260e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f930 	bl	8002876 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fdac 	bl	800118c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2210      	movs	r2, #16
 8002656:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d006      	beq.n	800267a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2208      	movs	r2, #8
 8002672:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f912 	bl	800289e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d009      	beq.n	8002698 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8f9 	bl	800288a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2210      	movs	r2, #16
 80026b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f8fc 	bl	80028b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00b      	beq.n	80026dc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2208      	movs	r2, #8
 80026d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f8f5 	bl	80028c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d07b      	beq.n	80027de <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d072      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274a:	2b00      	cmp	r3, #0
 800274c:	d043      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002754:	2b00      	cmp	r3, #0
 8002756:	d03e      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800275e:	2b60      	cmp	r3, #96	; 0x60
 8002760:	d02b      	beq.n	80027ba <HAL_CAN_IRQHandler+0x32a>
 8002762:	2b60      	cmp	r3, #96	; 0x60
 8002764:	d82e      	bhi.n	80027c4 <HAL_CAN_IRQHandler+0x334>
 8002766:	2b50      	cmp	r3, #80	; 0x50
 8002768:	d022      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x320>
 800276a:	2b50      	cmp	r3, #80	; 0x50
 800276c:	d82a      	bhi.n	80027c4 <HAL_CAN_IRQHandler+0x334>
 800276e:	2b40      	cmp	r3, #64	; 0x40
 8002770:	d019      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x316>
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d826      	bhi.n	80027c4 <HAL_CAN_IRQHandler+0x334>
 8002776:	2b30      	cmp	r3, #48	; 0x30
 8002778:	d010      	beq.n	800279c <HAL_CAN_IRQHandler+0x30c>
 800277a:	2b30      	cmp	r3, #48	; 0x30
 800277c:	d822      	bhi.n	80027c4 <HAL_CAN_IRQHandler+0x334>
 800277e:	2b10      	cmp	r3, #16
 8002780:	d002      	beq.n	8002788 <HAL_CAN_IRQHandler+0x2f8>
 8002782:	2b20      	cmp	r3, #32
 8002784:	d005      	beq.n	8002792 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002786:	e01d      	b.n	80027c4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002790:	e019      	b.n	80027c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	f043 0310 	orr.w	r3, r3, #16
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800279a:	e014      	b.n	80027c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	f043 0320 	orr.w	r3, r3, #32
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027a4:	e00f      	b.n	80027c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ae:	e00a      	b.n	80027c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027b8:	e005      	b.n	80027c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c2:	e000      	b.n	80027c6 <HAL_CAN_IRQHandler+0x336>
            break;
 80027c4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027d4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2204      	movs	r2, #4
 80027dc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f872 	bl	80028da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027f6:	bf00      	nop
 80027f8:	3728      	adds	r7, #40	; 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <__NVIC_SetPriorityGrouping+0x40>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 800291a:	4313      	orrs	r3, r2
 800291c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <__NVIC_SetPriorityGrouping+0x40>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00
 8002934:	05fa0000 	.word	0x05fa0000

08002938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <__NVIC_GetPriorityGrouping+0x18>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 0307 	and.w	r3, r3, #7
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	2b00      	cmp	r3, #0
 8002964:	db0b      	blt.n	800297e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	f003 021f 	and.w	r2, r3, #31
 800296c:	4907      	ldr	r1, [pc, #28]	; (800298c <__NVIC_EnableIRQ+0x38>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2001      	movs	r0, #1
 8002976:	fa00 f202 	lsl.w	r2, r0, r2
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e100 	.word	0xe000e100

08002990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db0a      	blt.n	80029ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	490c      	ldr	r1, [pc, #48]	; (80029dc <__NVIC_SetPriority+0x4c>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	0112      	lsls	r2, r2, #4
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	440b      	add	r3, r1
 80029b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b8:	e00a      	b.n	80029d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4908      	ldr	r1, [pc, #32]	; (80029e0 <__NVIC_SetPriority+0x50>)
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	3b04      	subs	r3, #4
 80029c8:	0112      	lsls	r2, r2, #4
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	440b      	add	r3, r1
 80029ce:	761a      	strb	r2, [r3, #24]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000e100 	.word	0xe000e100
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f1c3 0307 	rsb	r3, r3, #7
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	bf28      	it	cs
 8002a02:	2304      	movcs	r3, #4
 8002a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d902      	bls.n	8002a14 <NVIC_EncodePriority+0x30>
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3b03      	subs	r3, #3
 8002a12:	e000      	b.n	8002a16 <NVIC_EncodePriority+0x32>
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	401a      	ands	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43d9      	mvns	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	4313      	orrs	r3, r2
         );
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a5c:	d301      	bcc.n	8002a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00f      	b.n	8002a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <SysTick_Config+0x40>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6a:	210f      	movs	r1, #15
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a70:	f7ff ff8e 	bl	8002990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <SysTick_Config+0x40>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7a:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <SysTick_Config+0x40>)
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	e000e010 	.word	0xe000e010

08002a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff29 	bl	80028f0 <__NVIC_SetPriorityGrouping>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab8:	f7ff ff3e 	bl	8002938 <__NVIC_GetPriorityGrouping>
 8002abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f7ff ff8e 	bl	80029e4 <NVIC_EncodePriority>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff5d 	bl	8002990 <__NVIC_SetPriority>
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff31 	bl	8002954 <__NVIC_EnableIRQ>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ffa2 	bl	8002a4c <SysTick_Config>
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b20:	f7ff f88a 	bl	8001c38 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e099      	b.n	8002c64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b50:	e00f      	b.n	8002b72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b52:	f7ff f871 	bl	8001c38 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d908      	bls.n	8002b72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e078      	b.n	8002c64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e8      	bne.n	8002b52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4b38      	ldr	r3, [pc, #224]	; (8002c6c <HAL_DMA_Init+0x158>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d107      	bne.n	8002bdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f023 0307 	bic.w	r3, r3, #7
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d117      	bne.n	8002c36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 faa5 	bl	8003168 <DMA_CheckFifoParam>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2240      	movs	r2, #64	; 0x40
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c32:	2301      	movs	r3, #1
 8002c34:	e016      	b.n	8002c64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa5c 	bl	80030fc <DMA_CalcBaseAndBitshift>
 8002c44:	4603      	mov	r3, r0
 8002c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	223f      	movs	r2, #63	; 0x3f
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	e010803f 	.word	0xe010803f

08002c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_DMA_Start_IT+0x26>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e048      	b.n	8002d28 <HAL_DMA_Start_IT+0xb8>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d137      	bne.n	8002d1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2202      	movs	r2, #2
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f9ee 	bl	80030a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	223f      	movs	r2, #63	; 0x3f
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0216 	orr.w	r2, r2, #22
 8002cde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0208 	orr.w	r2, r2, #8
 8002d06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e005      	b.n	8002d26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
 8002d24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d004      	beq.n	8002d4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2280      	movs	r2, #128	; 0x80
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00c      	b.n	8002d68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2205      	movs	r2, #5
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d80:	4b8e      	ldr	r3, [pc, #568]	; (8002fbc <HAL_DMA_IRQHandler+0x248>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a8e      	ldr	r2, [pc, #568]	; (8002fc0 <HAL_DMA_IRQHandler+0x24c>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	2208      	movs	r2, #8
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0204 	bic.w	r2, r2, #4
 8002dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2208      	movs	r2, #8
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d012      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e38:	2204      	movs	r2, #4
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	2210      	movs	r2, #16
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d043      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03c      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	2210      	movs	r2, #16
 8002e70:	409a      	lsls	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d024      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
 8002ea2:	e01f      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01b      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
 8002eb4:	e016      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0208 	bic.w	r2, r2, #8
 8002ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	2220      	movs	r2, #32
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 808f 	beq.w	8003014 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8087 	beq.w	8003014 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d136      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0216 	bic.w	r2, r2, #22
 8002f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_DMA_IRQHandler+0x1da>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0208 	bic.w	r2, r2, #8
 8002f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	223f      	movs	r2, #63	; 0x3f
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d07e      	beq.n	8003080 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
        }
        return;
 8002f8a:	e079      	b.n	8003080 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01d      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d031      	beq.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e02c      	b.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
 8002fba:	bf00      	nop
 8002fbc:	20000004 	.word	0x20000004
 8002fc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d023      	beq.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
 8002fd4:	e01e      	b.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10f      	bne.n	8003004 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	2b00      	cmp	r3, #0
 800301a:	d032      	beq.n	8003082 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d022      	beq.n	800306e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2205      	movs	r2, #5
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	3301      	adds	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	d307      	bcc.n	800305c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f2      	bne.n	8003040 <HAL_DMA_IRQHandler+0x2cc>
 800305a:	e000      	b.n	800305e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800305c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
 800307e:	e000      	b.n	8003082 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003080:	bf00      	nop
    }
  }
}
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d108      	bne.n	80030e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030de:	e007      	b.n	80030f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3b10      	subs	r3, #16
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <DMA_CalcBaseAndBitshift+0x60>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <DMA_CalcBaseAndBitshift+0x64>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d908      	bls.n	800313c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <DMA_CalcBaseAndBitshift+0x68>)
 8003132:	4013      	ands	r3, r2
 8003134:	1d1a      	adds	r2, r3, #4
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	659a      	str	r2, [r3, #88]	; 0x58
 800313a:	e006      	b.n	800314a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <DMA_CalcBaseAndBitshift+0x68>)
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	aaaaaaab 	.word	0xaaaaaaab
 8003160:	08011fb4 	.word	0x08011fb4
 8003164:	fffffc00 	.word	0xfffffc00

08003168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11f      	bne.n	80031c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d856      	bhi.n	8003236 <DMA_CheckFifoParam+0xce>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <DMA_CheckFifoParam+0x28>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031b3 	.word	0x080031b3
 8003198:	080031a1 	.word	0x080031a1
 800319c:	08003237 	.word	0x08003237
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d046      	beq.n	800323a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b0:	e043      	b.n	800323a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ba:	d140      	bne.n	800323e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c0:	e03d      	b.n	800323e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ca:	d121      	bne.n	8003210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d837      	bhi.n	8003242 <DMA_CheckFifoParam+0xda>
 80031d2:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <DMA_CheckFifoParam+0x70>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031ef 	.word	0x080031ef
 80031e0:	080031e9 	.word	0x080031e9
 80031e4:	08003201 	.word	0x08003201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e030      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d025      	beq.n	8003246 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fe:	e022      	b.n	8003246 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003208:	d11f      	bne.n	800324a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800320e:	e01c      	b.n	800324a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d903      	bls.n	800321e <DMA_CheckFifoParam+0xb6>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d003      	beq.n	8003224 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800321c:	e018      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
      break;
 8003222:	e015      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e00b      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      break;
 8003236:	bf00      	nop
 8003238:	e00a      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 800323a:	bf00      	nop
 800323c:	e008      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 800323e:	bf00      	nop
 8003240:	e006      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 8003242:	bf00      	nop
 8003244:	e004      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 8003246:	bf00      	nop
 8003248:	e002      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;   
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
    }
  } 
  
  return status; 
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	e175      	b.n	800356c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003280:	2201      	movs	r2, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	429a      	cmp	r2, r3
 800329a:	f040 8164 	bne.w	8003566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d005      	beq.n	80032b6 <HAL_GPIO_Init+0x56>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d130      	bne.n	8003318 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ec:	2201      	movs	r2, #1
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 0201 	and.w	r2, r3, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b03      	cmp	r3, #3
 8003322:	d017      	beq.n	8003354 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d123      	bne.n	80033a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	08da      	lsrs	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3208      	adds	r2, #8
 8003368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	220f      	movs	r2, #15
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3208      	adds	r2, #8
 80033a2:	69b9      	ldr	r1, [r7, #24]
 80033a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0203 	and.w	r2, r3, #3
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80be 	beq.w	8003566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ea:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_GPIO_Init+0x324>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	4a65      	ldr	r2, [pc, #404]	; (8003584 <HAL_GPIO_Init+0x324>)
 80033f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f4:	6453      	str	r3, [r2, #68]	; 0x44
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_GPIO_Init+0x324>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003402:	4a61      	ldr	r2, [pc, #388]	; (8003588 <HAL_GPIO_Init+0x328>)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_GPIO_Init+0x32c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d037      	beq.n	800349e <HAL_GPIO_Init+0x23e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a57      	ldr	r2, [pc, #348]	; (8003590 <HAL_GPIO_Init+0x330>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d031      	beq.n	800349a <HAL_GPIO_Init+0x23a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a56      	ldr	r2, [pc, #344]	; (8003594 <HAL_GPIO_Init+0x334>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02b      	beq.n	8003496 <HAL_GPIO_Init+0x236>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a55      	ldr	r2, [pc, #340]	; (8003598 <HAL_GPIO_Init+0x338>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d025      	beq.n	8003492 <HAL_GPIO_Init+0x232>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a54      	ldr	r2, [pc, #336]	; (800359c <HAL_GPIO_Init+0x33c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01f      	beq.n	800348e <HAL_GPIO_Init+0x22e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a53      	ldr	r2, [pc, #332]	; (80035a0 <HAL_GPIO_Init+0x340>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d019      	beq.n	800348a <HAL_GPIO_Init+0x22a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <HAL_GPIO_Init+0x344>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_GPIO_Init+0x226>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a51      	ldr	r2, [pc, #324]	; (80035a8 <HAL_GPIO_Init+0x348>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00d      	beq.n	8003482 <HAL_GPIO_Init+0x222>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a50      	ldr	r2, [pc, #320]	; (80035ac <HAL_GPIO_Init+0x34c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <HAL_GPIO_Init+0x21e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a4f      	ldr	r2, [pc, #316]	; (80035b0 <HAL_GPIO_Init+0x350>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_GPIO_Init+0x21a>
 8003476:	2309      	movs	r3, #9
 8003478:	e012      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800347a:	230a      	movs	r3, #10
 800347c:	e010      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800347e:	2308      	movs	r3, #8
 8003480:	e00e      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 8003482:	2307      	movs	r3, #7
 8003484:	e00c      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 8003486:	2306      	movs	r3, #6
 8003488:	e00a      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800348a:	2305      	movs	r3, #5
 800348c:	e008      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800348e:	2304      	movs	r3, #4
 8003490:	e006      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 8003492:	2303      	movs	r3, #3
 8003494:	e004      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 8003496:	2302      	movs	r3, #2
 8003498:	e002      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800349e:	2300      	movs	r3, #0
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	f002 0203 	and.w	r2, r2, #3
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	4093      	lsls	r3, r2
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034b0:	4935      	ldr	r1, [pc, #212]	; (8003588 <HAL_GPIO_Init+0x328>)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	3302      	adds	r3, #2
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034be:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <HAL_GPIO_Init+0x354>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034e2:	4a34      	ldr	r2, [pc, #208]	; (80035b4 <HAL_GPIO_Init+0x354>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <HAL_GPIO_Init+0x354>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800350c:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <HAL_GPIO_Init+0x354>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003512:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_GPIO_Init+0x354>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003536:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_GPIO_Init+0x354>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_GPIO_Init+0x354>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <HAL_GPIO_Init+0x354>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3301      	adds	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	f67f ae86 	bls.w	8003280 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	3724      	adds	r7, #36	; 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	40013800 	.word	0x40013800
 800358c:	40020000 	.word	0x40020000
 8003590:	40020400 	.word	0x40020400
 8003594:	40020800 	.word	0x40020800
 8003598:	40020c00 	.word	0x40020c00
 800359c:	40021000 	.word	0x40021000
 80035a0:	40021400 	.word	0x40021400
 80035a4:	40021800 	.word	0x40021800
 80035a8:	40021c00 	.word	0x40021c00
 80035ac:	40022000 	.word	0x40022000
 80035b0:	40022400 	.word	0x40022400
 80035b4:	40013c00 	.word	0x40013c00

080035b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e001      	b.n	80035da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	807b      	strh	r3, [r7, #2]
 80035f4:	4613      	mov	r3, r2
 80035f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f8:	787b      	ldrb	r3, [r7, #1]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003604:	e003      	b.n	800360e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003606:	887b      	ldrh	r3, [r7, #2]
 8003608:	041a      	lsls	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	619a      	str	r2, [r3, #24]
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003626:	4b08      	ldr	r3, [pc, #32]	; (8003648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d006      	beq.n	8003640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f806 	bl	800364c <HAL_GPIO_EXTI_Callback>
  }
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40013c00 	.word	0x40013c00

0800364c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e07f      	b.n	8003776 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd fe46 	bl	800131c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	e006      	b.n	80036ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d104      	bne.n	80036fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_I2C_Init+0x11c>)
 800370a:	430b      	orrs	r3, r1
 800370c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800371c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69d9      	ldr	r1, [r3, #28]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1a      	ldr	r2, [r3, #32]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	02008000 	.word	0x02008000

08003784 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	461a      	mov	r2, r3
 8003790:	460b      	mov	r3, r1
 8003792:	817b      	strh	r3, [r7, #10]
 8003794:	4613      	mov	r3, r2
 8003796:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	f040 80da 	bne.w	800395a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_I2C_Master_Transmit+0x30>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e0d3      	b.n	800395c <HAL_I2C_Master_Transmit+0x1d8>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037bc:	f7fe fa3c 	bl	8001c38 <HAL_GetTick>
 80037c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2319      	movs	r3, #25
 80037c8:	2201      	movs	r2, #1
 80037ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f9e6 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0be      	b.n	800395c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2221      	movs	r2, #33	; 0x21
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2210      	movs	r2, #16
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2bff      	cmp	r3, #255	; 0xff
 800380e:	d90e      	bls.n	800382e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	b2da      	uxtb	r2, r3
 800381c:	8979      	ldrh	r1, [r7, #10]
 800381e:	4b51      	ldr	r3, [pc, #324]	; (8003964 <HAL_I2C_Master_Transmit+0x1e0>)
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fbd0 	bl	8003fcc <I2C_TransferConfig>
 800382c:	e06c      	b.n	8003908 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	b2da      	uxtb	r2, r3
 800383e:	8979      	ldrh	r1, [r7, #10]
 8003840:	4b48      	ldr	r3, [pc, #288]	; (8003964 <HAL_I2C_Master_Transmit+0x1e0>)
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fbbf 	bl	8003fcc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800384e:	e05b      	b.n	8003908 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	6a39      	ldr	r1, [r7, #32]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f9e3 	bl	8003c20 <I2C_WaitOnTXISFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e07b      	b.n	800395c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d034      	beq.n	8003908 <HAL_I2C_Master_Transmit+0x184>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d130      	bne.n	8003908 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2200      	movs	r2, #0
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f975 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e04d      	b.n	800395c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2bff      	cmp	r3, #255	; 0xff
 80038c8:	d90e      	bls.n	80038e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	8979      	ldrh	r1, [r7, #10]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fb73 	bl	8003fcc <I2C_TransferConfig>
 80038e6:	e00f      	b.n	8003908 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fb62 	bl	8003fcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d19e      	bne.n	8003850 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	6a39      	ldr	r1, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f9c2 	bl	8003ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e01a      	b.n	800395c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2220      	movs	r2, #32
 800392c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_I2C_Master_Transmit+0x1e4>)
 800393a:	400b      	ands	r3, r1
 800393c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	80002000 	.word	0x80002000
 8003968:	fe00e800 	.word	0xfe00e800

0800396c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	461a      	mov	r2, r3
 8003978:	460b      	mov	r3, r1
 800397a:	817b      	strh	r3, [r7, #10]
 800397c:	4613      	mov	r3, r2
 800397e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b20      	cmp	r3, #32
 800398a:	f040 80db 	bne.w	8003b44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_I2C_Master_Receive+0x30>
 8003998:	2302      	movs	r3, #2
 800399a:	e0d4      	b.n	8003b46 <HAL_I2C_Master_Receive+0x1da>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039a4:	f7fe f948 	bl	8001c38 <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2319      	movs	r3, #25
 80039b0:	2201      	movs	r2, #1
 80039b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f8f2 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0bf      	b.n	8003b46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2222      	movs	r2, #34	; 0x22
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2210      	movs	r2, #16
 80039d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	893a      	ldrh	r2, [r7, #8]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2bff      	cmp	r3, #255	; 0xff
 80039f6:	d90e      	bls.n	8003a16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	22ff      	movs	r2, #255	; 0xff
 80039fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	8979      	ldrh	r1, [r7, #10]
 8003a06:	4b52      	ldr	r3, [pc, #328]	; (8003b50 <HAL_I2C_Master_Receive+0x1e4>)
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fadc 	bl	8003fcc <I2C_TransferConfig>
 8003a14:	e06d      	b.n	8003af2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	8979      	ldrh	r1, [r7, #10]
 8003a28:	4b49      	ldr	r3, [pc, #292]	; (8003b50 <HAL_I2C_Master_Receive+0x1e4>)
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 facb 	bl	8003fcc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a36:	e05c      	b.n	8003af2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	6a39      	ldr	r1, [r7, #32]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f96b 	bl	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e07c      	b.n	8003b46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d034      	beq.n	8003af2 <HAL_I2C_Master_Receive+0x186>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d130      	bne.n	8003af2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2200      	movs	r2, #0
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f880 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e04d      	b.n	8003b46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2bff      	cmp	r3, #255	; 0xff
 8003ab2:	d90e      	bls.n	8003ad2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	22ff      	movs	r2, #255	; 0xff
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	8979      	ldrh	r1, [r7, #10]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fa7e 	bl	8003fcc <I2C_TransferConfig>
 8003ad0:	e00f      	b.n	8003af2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	8979      	ldrh	r1, [r7, #10]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fa6d 	bl	8003fcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d19d      	bne.n	8003a38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	6a39      	ldr	r1, [r7, #32]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f8cd 	bl	8003ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e01a      	b.n	8003b46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2220      	movs	r2, #32
 8003b16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6859      	ldr	r1, [r3, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_I2C_Master_Receive+0x1e8>)
 8003b24:	400b      	ands	r3, r1
 8003b26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	80002400 	.word	0x80002400
 8003b54:	fe00e800 	.word	0xfe00e800

08003b58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d103      	bne.n	8003b76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d007      	beq.n	8003b94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	619a      	str	r2, [r3, #24]
  }
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb0:	e022      	b.n	8003bf8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb8:	d01e      	beq.n	8003bf8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7fe f83d 	bl	8001c38 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d113      	bne.n	8003bf8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e00f      	b.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d0cd      	beq.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c2c:	e02c      	b.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f8ea 	bl	8003e0c <I2C_IsErrorOccurred>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e02a      	b.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c48:	d01e      	beq.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fd fff5 	bl	8001c38 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d113      	bne.n	8003c88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e007      	b.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d1cb      	bne.n	8003c2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cac:	e028      	b.n	8003d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f8aa 	bl	8003e0c <I2C_IsErrorOccurred>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e026      	b.n	8003d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fd ffb9 	bl	8001c38 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d113      	bne.n	8003d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e007      	b.n	8003d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d1cf      	bne.n	8003cae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d24:	e064      	b.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f86e 	bl	8003e0c <I2C_IsErrorOccurred>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e062      	b.n	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d138      	bne.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d105      	bne.n	8003d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e04e      	b.n	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d107      	bne.n	8003d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2210      	movs	r2, #16
 8003d76:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
 8003d7e:	e002      	b.n	8003d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e022      	b.n	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dba:	f7fd ff3d 	bl	8001c38 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d302      	bcc.n	8003dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10f      	bne.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e007      	b.n	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d193      	bne.n	8003d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	fe00e800 	.word	0xfe00e800

08003e0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	; 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d068      	beq.n	8003f0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e40:	e049      	b.n	8003ed6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e48:	d045      	beq.n	8003ed6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fd fef5 	bl	8001c38 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <I2C_IsErrorOccurred+0x54>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d13a      	bne.n	8003ed6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e82:	d121      	bne.n	8003ec8 <I2C_IsErrorOccurred+0xbc>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e8a:	d01d      	beq.n	8003ec8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e8c:	7cfb      	ldrb	r3, [r7, #19]
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d01a      	beq.n	8003ec8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ea2:	f7fd fec9 	bl	8001c38 <HAL_GetTick>
 8003ea6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea8:	e00e      	b.n	8003ec8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003eaa:	f7fd fec5 	bl	8001c38 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b19      	cmp	r3, #25
 8003eb6:	d907      	bls.n	8003ec8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f043 0320 	orr.w	r3, r3, #32
 8003ebe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003ec6:	e006      	b.n	8003ed6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d1e9      	bne.n	8003eaa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d003      	beq.n	8003eec <I2C_IsErrorOccurred+0xe0>
 8003ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0aa      	beq.n	8003e42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d103      	bne.n	8003efc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f043 0304 	orr.w	r3, r3, #4
 8003f02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f043 0308 	orr.w	r3, r3, #8
 8003f44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01c      	beq.n	8003fba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff fde9 	bl	8003b58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <I2C_IsErrorOccurred+0x1bc>)
 8003f92:	400b      	ands	r3, r1
 8003f94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3728      	adds	r7, #40	; 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	fe00e800 	.word	0xfe00e800

08003fcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fe4:	7a7b      	ldrb	r3, [r7, #9]
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ffa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	0d5b      	lsrs	r3, r3, #21
 8004006:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <I2C_TransferConfig+0x60>)
 800400c:	430b      	orrs	r3, r1
 800400e:	43db      	mvns	r3, r3
 8004010:	ea02 0103 	and.w	r1, r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	03ff63ff 	.word	0x03ff63ff

08004030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b20      	cmp	r3, #32
 8004044:	d138      	bne.n	80040b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004050:	2302      	movs	r3, #2
 8004052:	e032      	b.n	80040ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2224      	movs	r2, #36	; 0x24
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0201 	bic.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6819      	ldr	r1, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d139      	bne.n	8004150 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e033      	b.n	8004152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2224      	movs	r2, #36	; 0x24
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004118:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800415e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004160:	b08f      	sub	sp, #60	; 0x3c
 8004162:	af0a      	add	r7, sp, #40	; 0x28
 8004164:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e116      	b.n	800439e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f00c f804 	bl	8010198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2203      	movs	r2, #3
 8004194:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f004 ffdb 	bl	800916a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	687e      	ldr	r6, [r7, #4]
 80041bc:	466d      	mov	r5, sp
 80041be:	f106 0410 	add.w	r4, r6, #16
 80041c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80041d2:	1d33      	adds	r3, r6, #4
 80041d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041d6:	6838      	ldr	r0, [r7, #0]
 80041d8:	f004 febc 	bl	8008f54 <USB_CoreInit>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0d7      	b.n	800439e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f004 ffc9 	bl	800918c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	e04a      	b.n	8004296 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	333d      	adds	r3, #61	; 0x3d
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	333c      	adds	r3, #60	; 0x3c
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	b298      	uxth	r0, r3
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	3344      	adds	r3, #68	; 0x44
 800423c:	4602      	mov	r2, r0
 800423e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	3340      	adds	r3, #64	; 0x40
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	3348      	adds	r3, #72	; 0x48
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	334c      	adds	r3, #76	; 0x4c
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	3354      	adds	r3, #84	; 0x54
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	3301      	adds	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	7bfa      	ldrb	r2, [r7, #15]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	d3af      	bcc.n	8004200 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e044      	b.n	8004330 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	3301      	adds	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	7bfa      	ldrb	r2, [r7, #15]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d3b5      	bcc.n	80042a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	687e      	ldr	r6, [r7, #4]
 8004342:	466d      	mov	r5, sp
 8004344:	f106 0410 	add.w	r4, r6, #16
 8004348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800434a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800434c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800434e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004350:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004354:	e885 0003 	stmia.w	r5, {r0, r1}
 8004358:	1d33      	adds	r3, r6, #4
 800435a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800435c:	6838      	ldr	r0, [r7, #0]
 800435e:	f004 ff61 	bl	8009224 <USB_DevInit>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e014      	b.n	800439e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b01      	cmp	r3, #1
 800438a:	d102      	bne.n	8004392 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f001 f97b 	bl	8005688 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f006 f8af 	bl	800a4fa <USB_DevDisconnect>

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_PCD_Start+0x16>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e012      	b.n	80043e2 <HAL_PCD_Start+0x3c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f004 febd 	bl	8009148 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f006 f870 	bl	800a4b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80043ea:	b590      	push	{r4, r7, lr}
 80043ec:	b08d      	sub	sp, #52	; 0x34
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f006 f92e 	bl	800a662 <USB_GetMode>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 84b7 	bne.w	8004d7c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f006 f892 	bl	800a53c <USB_ReadInterrupts>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 84ad 	beq.w	8004d7a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f006 f87f 	bl	800a53c <USB_ReadInterrupts>
 800443e:	4603      	mov	r3, r0
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b02      	cmp	r3, #2
 8004446:	d107      	bne.n	8004458 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695a      	ldr	r2, [r3, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f002 0202 	and.w	r2, r2, #2
 8004456:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f006 f86d 	bl	800a53c <USB_ReadInterrupts>
 8004462:	4603      	mov	r3, r0
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b10      	cmp	r3, #16
 800446a:	d161      	bne.n	8004530 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0210 	bic.w	r2, r2, #16
 800447a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f003 020f 	and.w	r2, r3, #15
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	3304      	adds	r3, #4
 800449a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	0c5b      	lsrs	r3, r3, #17
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d124      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d035      	beq.n	8004520 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	6a38      	ldr	r0, [r7, #32]
 80044c8:	f005 fea4 	bl	800a214 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044d8:	441a      	add	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ea:	441a      	add	r2, r3
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	621a      	str	r2, [r3, #32]
 80044f0:	e016      	b.n	8004520 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	0c5b      	lsrs	r3, r3, #17
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d110      	bne.n	8004520 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004504:	2208      	movs	r2, #8
 8004506:	4619      	mov	r1, r3
 8004508:	6a38      	ldr	r0, [r7, #32]
 800450a:	f005 fe83 	bl	800a214 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800451a:	441a      	add	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0210 	orr.w	r2, r2, #16
 800452e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f006 f801 	bl	800a53c <USB_ReadInterrupts>
 800453a:	4603      	mov	r3, r0
 800453c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004540:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004544:	f040 80a7 	bne.w	8004696 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f006 f806 	bl	800a562 <USB_ReadDevAllOutEpInterrupt>
 8004556:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004558:	e099      	b.n	800468e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 808e 	beq.w	8004682 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f006 f82a 	bl	800a5ca <USB_ReadDevOutEPInterrupt>
 8004576:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00c      	beq.n	800459c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458e:	461a      	mov	r2, r3
 8004590:	2301      	movs	r3, #1
 8004592:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fef0 	bl	800537c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	461a      	mov	r2, r3
 80045b4:	2308      	movs	r3, #8
 80045b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 ffc6 	bl	800554c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	461a      	mov	r2, r3
 80045d8:	2310      	movs	r3, #16
 80045da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d030      	beq.n	8004648 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d109      	bne.n	8004606 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004600:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004604:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4413      	add	r3, r2
 8004618:	3304      	adds	r3, #4
 800461a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	78db      	ldrb	r3, [r3, #3]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d108      	bne.n	8004636 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2200      	movs	r2, #0
 8004628:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	b2db      	uxtb	r3, r3
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f00b fed5 	bl	80103e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	461a      	mov	r2, r3
 8004644:	2302      	movs	r3, #2
 8004646:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2320      	movs	r3, #32
 8004662:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	461a      	mov	r2, r3
 800467c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004680:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	3301      	adds	r3, #1
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	085b      	lsrs	r3, r3, #1
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	f47f af62 	bne.w	800455a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f005 ff4e 	bl	800a53c <USB_ReadInterrupts>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046aa:	f040 80db 	bne.w	8004864 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f005 ff6f 	bl	800a596 <USB_ReadDevAllInEpInterrupt>
 80046b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80046be:	e0cd      	b.n	800485c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80c2 	beq.w	8004850 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f005 ff95 	bl	800a606 <USB_ReadDevInEPInterrupt>
 80046dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d057      	beq.n	8004798 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	2201      	movs	r2, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	43db      	mvns	r3, r3
 8004702:	69f9      	ldr	r1, [r7, #28]
 8004704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004708:	4013      	ands	r3, r2
 800470a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	461a      	mov	r2, r3
 800471a:	2301      	movs	r3, #1
 800471c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d132      	bne.n	800478c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	334c      	adds	r3, #76	; 0x4c
 8004736:	6819      	ldr	r1, [r3, #0]
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4403      	add	r3, r0
 8004746:	3348      	adds	r3, #72	; 0x48
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4419      	add	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4403      	add	r3, r0
 800475a:	334c      	adds	r3, #76	; 0x4c
 800475c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d113      	bne.n	800478c <HAL_PCD_IRQHandler+0x3a2>
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3354      	adds	r3, #84	; 0x54
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004784:	461a      	mov	r2, r3
 8004786:	2101      	movs	r1, #1
 8004788:	f005 ff9e 	bl	800a6c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f00b fd9f 	bl	80102d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	461a      	mov	r2, r3
 80047b0:	2308      	movs	r3, #8
 80047b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ca:	461a      	mov	r2, r3
 80047cc:	2310      	movs	r3, #16
 80047ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	461a      	mov	r2, r3
 80047e8:	2340      	movs	r3, #64	; 0x40
 80047ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d023      	beq.n	800483e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80047f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047f8:	6a38      	ldr	r0, [r7, #32]
 80047fa:	f004 fe71 	bl	80094e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80047fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	3338      	adds	r3, #56	; 0x38
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	3304      	adds	r3, #4
 8004810:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	78db      	ldrb	r3, [r3, #3]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d108      	bne.n	800482c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	b2db      	uxtb	r3, r3
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f00b fdec 	bl	8010404 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004838:	461a      	mov	r2, r3
 800483a:	2302      	movs	r3, #2
 800483c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fd08 	bl	8005260 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	3301      	adds	r3, #1
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	f47f af2e 	bne.w	80046c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f005 fe67 	bl	800a53c <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004878:	d122      	bne.n	80048c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004894:	2b01      	cmp	r3, #1
 8004896:	d108      	bne.n	80048aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048a0:	2100      	movs	r1, #0
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f00b ff66 	bl	8010774 <HAL_PCDEx_LPM_Callback>
 80048a8:	e002      	b.n	80048b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f00b fd8a 	bl	80103c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80048be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f005 fe39 	bl	800a53c <USB_ReadInterrupts>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d4:	d112      	bne.n	80048fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f00b fd46 	bl	8010378 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80048fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f005 fe1b 	bl	800a53c <USB_ReadInterrupts>
 8004906:	4603      	mov	r3, r0
 8004908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800490c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004910:	d121      	bne.n	8004956 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004920:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d111      	bne.n	8004950 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004946:	2101      	movs	r1, #1
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f00b ff13 	bl	8010774 <HAL_PCDEx_LPM_Callback>
 800494e:	e002      	b.n	8004956 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f00b fd11 	bl	8010378 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f005 fdee 	bl	800a53c <USB_ReadInterrupts>
 8004960:	4603      	mov	r3, r0
 8004962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496a:	f040 80b7 	bne.w	8004adc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2110      	movs	r1, #16
 8004988:	4618      	mov	r0, r3
 800498a:	f004 fda9 	bl	80094e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800498e:	2300      	movs	r3, #0
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004992:	e046      	b.n	8004a22 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	461a      	mov	r2, r3
 80049a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	461a      	mov	r2, r3
 80049d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a1a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	3301      	adds	r3, #1
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d3b3      	bcc.n	8004994 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004a3e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d016      	beq.n	8004a76 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a58:	f043 030b 	orr.w	r3, r3, #11
 8004a5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6e:	f043 030b 	orr.w	r3, r3, #11
 8004a72:	6453      	str	r3, [r2, #68]	; 0x44
 8004a74:	e015      	b.n	8004aa2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a84:	4619      	mov	r1, r3
 8004a86:	f242 032b 	movw	r3, #8235	; 0x202b
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a9c:	f043 030b 	orr.w	r3, r3, #11
 8004aa0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ab4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f005 fdfe 	bl	800a6c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f005 fd2b 	bl	800a53c <USB_ReadInterrupts>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af0:	d124      	bne.n	8004b3c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f005 fdc2 	bl	800a680 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f004 fd6a 	bl	80095da <USB_GetDevSpeed>
 8004b06:	4603      	mov	r3, r0
 8004b08:	461a      	mov	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681c      	ldr	r4, [r3, #0]
 8004b12:	f001 fa7d 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 8004b16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4620      	mov	r0, r4
 8004b22:	f004 fa6f 	bl	8009004 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f00b fbfd 	bl	8010326 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f005 fcfb 	bl	800a53c <USB_ReadInterrupts>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d10a      	bne.n	8004b66 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f00b fbda 	bl	801030a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f002 0208 	and.w	r2, r2, #8
 8004b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f005 fce6 	bl	800a53c <USB_ReadInterrupts>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d122      	bne.n	8004bc0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b86:	2301      	movs	r3, #1
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8a:	e014      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fb27 	bl	80051fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d3e5      	bcc.n	8004b8c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f005 fcb9 	bl	800a53c <USB_ReadInterrupts>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd4:	d13b      	bne.n	8004c4e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bda:	e02b      	b.n	8004c34 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3340      	adds	r3, #64	; 0x40
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d115      	bne.n	8004c2e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da12      	bge.n	8004c2e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	333f      	adds	r3, #63	; 0x3f
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fae8 	bl	80051fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	3301      	adds	r3, #1
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d3ce      	bcc.n	8004bdc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695a      	ldr	r2, [r3, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f005 fc72 	bl	800a53c <USB_ReadInterrupts>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c62:	d155      	bne.n	8004d10 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c64:	2301      	movs	r3, #1
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	e045      	b.n	8004cf6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d12e      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da2b      	bge.n	8004cf0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004ca4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d121      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ce8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cec:	6053      	str	r3, [r2, #4]
            break;
 8004cee:	e007      	b.n	8004d00 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d3b4      	bcc.n	8004c6a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f005 fc11 	bl	800a53c <USB_ReadInterrupts>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d24:	d10a      	bne.n	8004d3c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f00b fb7e 	bl	8010428 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f005 fbfb 	bl	800a53c <USB_ReadInterrupts>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d115      	bne.n	8004d7c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f00b fb6e 	bl	8010444 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	e000      	b.n	8004d7c <HAL_PCD_IRQHandler+0x992>
      return;
 8004d7a:	bf00      	nop
    }
  }
}
 8004d7c:	3734      	adds	r7, #52	; 0x34
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd90      	pop	{r4, r7, pc}

08004d82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_PCD_SetAddress+0x1a>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e013      	b.n	8004dc4 <HAL_PCD_SetAddress+0x42>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	4611      	mov	r1, r2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f005 fb59 	bl	800a46c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	70fb      	strb	r3, [r7, #3]
 8004dde:	460b      	mov	r3, r1
 8004de0:	803b      	strh	r3, [r7, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	da0f      	bge.n	8004e12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	f003 020f 	and.w	r2, r3, #15
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	3338      	adds	r3, #56	; 0x38
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4413      	add	r3, r2
 8004e06:	3304      	adds	r3, #4
 8004e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	705a      	strb	r2, [r3, #1]
 8004e10:	e00f      	b.n	8004e32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	f003 020f 	and.w	r2, r3, #15
 8004e18:	4613      	mov	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	4413      	add	r3, r2
 8004e28:	3304      	adds	r3, #4
 8004e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e3e:	883a      	ldrh	r2, [r7, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	78ba      	ldrb	r2, [r7, #2]
 8004e48:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	785b      	ldrb	r3, [r3, #1]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e5c:	78bb      	ldrb	r3, [r7, #2]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d102      	bne.n	8004e68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_PCD_EP_Open+0xaa>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e00e      	b.n	8004e94 <HAL_PCD_EP_Open+0xc8>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f004 fbcd 	bl	8009624 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004e92:	7afb      	ldrb	r3, [r7, #11]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	da0f      	bge.n	8004ed0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	f003 020f 	and.w	r2, r3, #15
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	3338      	adds	r3, #56	; 0x38
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	705a      	strb	r2, [r3, #1]
 8004ece:	e00f      	b.n	8004ef0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	f003 020f 	and.w	r2, r3, #15
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_PCD_EP_Close+0x6e>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e00e      	b.n	8004f28 <HAL_PCD_EP_Close+0x8c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f004 fc0b 	bl	8009734 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	607a      	str	r2, [r7, #4]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f40:	7afb      	ldrb	r3, [r7, #11]
 8004f42:	f003 020f 	and.w	r2, r3, #15
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	3304      	adds	r3, #4
 8004f58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f72:	7afb      	ldrb	r3, [r7, #11]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d102      	bne.n	8004f8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f8c:	7afb      	ldrb	r3, [r7, #11]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	6979      	ldr	r1, [r7, #20]
 8004fa4:	f004 fef2 	bl	8009d8c <USB_EP0StartXfer>
 8004fa8:	e008      	b.n	8004fbc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6979      	ldr	r1, [r7, #20]
 8004fb8:	f004 fc98 	bl	80098ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	f003 020f 	and.w	r2, r3, #15
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004fe8:	681b      	ldr	r3, [r3, #0]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	460b      	mov	r3, r1
 8005004:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005006:	7afb      	ldrb	r3, [r7, #11]
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	3338      	adds	r3, #56	; 0x38
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	3304      	adds	r3, #4
 800501c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2201      	movs	r2, #1
 8005034:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005036:	7afb      	ldrb	r3, [r7, #11]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	b2da      	uxtb	r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d102      	bne.n	8005050 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005050:	7afb      	ldrb	r3, [r7, #11]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	6979      	ldr	r1, [r7, #20]
 8005068:	f004 fe90 	bl	8009d8c <USB_EP0StartXfer>
 800506c:	e008      	b.n	8005080 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	f004 fc36 	bl	80098ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	f003 020f 	and.w	r2, r3, #15
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d901      	bls.n	80050a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e050      	b.n	800514a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da0f      	bge.n	80050d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	f003 020f 	and.w	r2, r3, #15
 80050b6:	4613      	mov	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	3338      	adds	r3, #56	; 0x38
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	3304      	adds	r3, #4
 80050c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	705a      	strb	r2, [r3, #1]
 80050ce:	e00d      	b.n	80050ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4413      	add	r3, r2
 80050e2:	3304      	adds	r3, #4
 80050e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_PCD_EP_SetStall+0x82>
 8005108:	2302      	movs	r3, #2
 800510a:	e01e      	b.n	800514a <HAL_PCD_EP_SetStall+0xc0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68f9      	ldr	r1, [r7, #12]
 800511a:	4618      	mov	r0, r3
 800511c:	f005 f8d2 	bl	800a2c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	b2d9      	uxtb	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800513a:	461a      	mov	r2, r3
 800513c:	f005 fac4 	bl	800a6c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	460b      	mov	r3, r1
 800515c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	f003 020f 	and.w	r2, r3, #15
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d901      	bls.n	8005170 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e042      	b.n	80051f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005174:	2b00      	cmp	r3, #0
 8005176:	da0f      	bge.n	8005198 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	4613      	mov	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	3338      	adds	r3, #56	; 0x38
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	3304      	adds	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	705a      	strb	r2, [r3, #1]
 8005196:	e00f      	b.n	80051b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	f003 020f 	and.w	r2, r3, #15
 800519e:	4613      	mov	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	3304      	adds	r3, #4
 80051b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_PCD_EP_ClrStall+0x86>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e00e      	b.n	80051f6 <HAL_PCD_EP_ClrStall+0xa4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f005 f8da 	bl	800a3a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800520a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800520e:	2b00      	cmp	r3, #0
 8005210:	da0c      	bge.n	800522c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	f003 020f 	and.w	r2, r3, #15
 8005218:	4613      	mov	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	3338      	adds	r3, #56	; 0x38
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	3304      	adds	r3, #4
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e00c      	b.n	8005246 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	f003 020f 	and.w	r2, r3, #15
 8005232:	4613      	mov	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4413      	add	r3, r2
 8005242:	3304      	adds	r3, #4
 8005244:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	4618      	mov	r0, r3
 800524e:	f004 fef9 	bl	800a044 <USB_EPStopXfer>
 8005252:	4603      	mov	r3, r0
 8005254:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005256:	7afb      	ldrb	r3, [r7, #11]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	; 0x28
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	3338      	adds	r3, #56	; 0x38
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4413      	add	r3, r2
 8005284:	3304      	adds	r3, #4
 8005286:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	429a      	cmp	r2, r3
 8005292:	d901      	bls.n	8005298 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e06c      	b.n	8005372 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d902      	bls.n	80052b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3303      	adds	r3, #3
 80052b8:	089b      	lsrs	r3, r3, #2
 80052ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052bc:	e02b      	b.n	8005316 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d902      	bls.n	80052da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3303      	adds	r3, #3
 80052de:	089b      	lsrs	r3, r3, #2
 80052e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6919      	ldr	r1, [r3, #16]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	4603      	mov	r3, r0
 80052f8:	6978      	ldr	r0, [r7, #20]
 80052fa:	f004 ff4d 	bl	800a198 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1a      	ldr	r2, [r3, #32]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	441a      	add	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	429a      	cmp	r2, r3
 800532a:	d809      	bhi.n	8005340 <PCD_WriteEmptyTxFifo+0xe0>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005334:	429a      	cmp	r2, r3
 8005336:	d203      	bcs.n	8005340 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1be      	bne.n	80052be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	429a      	cmp	r2, r3
 800534a:	d811      	bhi.n	8005370 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	2201      	movs	r2, #1
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	43db      	mvns	r3, r3
 8005366:	6939      	ldr	r1, [r7, #16]
 8005368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800536c:	4013      	ands	r3, r2
 800536e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	333c      	adds	r3, #60	; 0x3c
 8005394:	3304      	adds	r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d17b      	bne.n	80054aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d015      	beq.n	80053e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4a61      	ldr	r2, [pc, #388]	; (8005544 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	f240 80b9 	bls.w	8005538 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80b3 	beq.w	8005538 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	461a      	mov	r2, r3
 80053e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e4:	6093      	str	r3, [r2, #8]
 80053e6:	e0a7      	b.n	8005538 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	461a      	mov	r2, r3
 8005400:	2320      	movs	r3, #32
 8005402:	6093      	str	r3, [r2, #8]
 8005404:	e098      	b.n	8005538 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 8093 	bne.w	8005538 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4a4b      	ldr	r2, [pc, #300]	; (8005544 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d90f      	bls.n	800543a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	461a      	mov	r2, r3
 8005432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005436:	6093      	str	r3, [r2, #8]
 8005438:	e07e      	b.n	8005538 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	4413      	add	r3, r2
 800544c:	3304      	adds	r3, #4
 800544e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	0159      	lsls	r1, r3, #5
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	440b      	add	r3, r1
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d114      	bne.n	800549c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005484:	461a      	mov	r2, r3
 8005486:	2101      	movs	r1, #1
 8005488:	f005 f91e 	bl	800a6c8 <USB_EP0_OutStart>
 800548c:	e006      	b.n	800549c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	441a      	add	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f00a fefc 	bl	80102a0 <HAL_PCD_DataOutStageCallback>
 80054a8:	e046      	b.n	8005538 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4a26      	ldr	r2, [pc, #152]	; (8005548 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d124      	bne.n	80054fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	461a      	mov	r2, r3
 80054ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ce:	6093      	str	r3, [r2, #8]
 80054d0:	e032      	b.n	8005538 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	461a      	mov	r2, r3
 80054ea:	2320      	movs	r3, #32
 80054ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f00a fed3 	bl	80102a0 <HAL_PCD_DataOutStageCallback>
 80054fa:	e01d      	b.n	8005538 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d114      	bne.n	800552c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	4613      	mov	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d108      	bne.n	800552c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005524:	461a      	mov	r2, r3
 8005526:	2100      	movs	r1, #0
 8005528:	f005 f8ce 	bl	800a6c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f00a feb4 	bl	80102a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	4f54300a 	.word	0x4f54300a
 8005548:	4f54310a 	.word	0x4f54310a

0800554c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	333c      	adds	r3, #60	; 0x3c
 8005564:	3304      	adds	r3, #4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d90e      	bls.n	80055a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	461a      	mov	r2, r3
 800559a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f00a fe6b 	bl	801027c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a0a      	ldr	r2, [pc, #40]	; (80055d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d90c      	bls.n	80055c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d108      	bne.n	80055c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055c0:	461a      	mov	r2, r3
 80055c2:	2101      	movs	r1, #1
 80055c4:	f005 f880 	bl	800a6c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	4f54300a 	.word	0x4f54300a

080055d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
 80055e4:	4613      	mov	r3, r2
 80055e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d107      	bne.n	8005606 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055f6:	883b      	ldrh	r3, [r7, #0]
 80055f8:	0419      	lsls	r1, r3, #16
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	430a      	orrs	r2, r1
 8005602:	629a      	str	r2, [r3, #40]	; 0x28
 8005604:	e028      	b.n	8005658 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4413      	add	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	e00d      	b.n	8005636 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	3340      	adds	r3, #64	; 0x40
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	3301      	adds	r3, #1
 8005634:	73fb      	strb	r3, [r7, #15]
 8005636:	7bfa      	ldrb	r2, [r7, #15]
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	3b01      	subs	r3, #1
 800563c:	429a      	cmp	r2, r3
 800563e:	d3ec      	bcc.n	800561a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005640:	883b      	ldrh	r3, [r7, #0]
 8005642:	0418      	lsls	r0, r3, #16
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6819      	ldr	r1, [r3, #0]
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	3b01      	subs	r3, #1
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	4302      	orrs	r2, r0
 8005650:	3340      	adds	r3, #64	; 0x40
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	887a      	ldrh	r2, [r7, #2]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_PCDEx_ActivateLPM+0x44>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	10000003 	.word	0x10000003

080056d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80056d8:	2300      	movs	r3, #0
 80056da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e29b      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8087 	beq.w	8005802 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056f4:	4b96      	ldr	r3, [pc, #600]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 030c 	and.w	r3, r3, #12
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d00c      	beq.n	800571a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005700:	4b93      	ldr	r3, [pc, #588]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 030c 	and.w	r3, r3, #12
 8005708:	2b08      	cmp	r3, #8
 800570a:	d112      	bne.n	8005732 <HAL_RCC_OscConfig+0x62>
 800570c:	4b90      	ldr	r3, [pc, #576]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005718:	d10b      	bne.n	8005732 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571a:	4b8d      	ldr	r3, [pc, #564]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d06c      	beq.n	8005800 <HAL_RCC_OscConfig+0x130>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d168      	bne.n	8005800 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e275      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573a:	d106      	bne.n	800574a <HAL_RCC_OscConfig+0x7a>
 800573c:	4b84      	ldr	r3, [pc, #528]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a83      	ldr	r2, [pc, #524]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	e02e      	b.n	80057a8 <HAL_RCC_OscConfig+0xd8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10c      	bne.n	800576c <HAL_RCC_OscConfig+0x9c>
 8005752:	4b7f      	ldr	r3, [pc, #508]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a7e      	ldr	r2, [pc, #504]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	4b7c      	ldr	r3, [pc, #496]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a7b      	ldr	r2, [pc, #492]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e01d      	b.n	80057a8 <HAL_RCC_OscConfig+0xd8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005774:	d10c      	bne.n	8005790 <HAL_RCC_OscConfig+0xc0>
 8005776:	4b76      	ldr	r3, [pc, #472]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a75      	ldr	r2, [pc, #468]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800577c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	4b73      	ldr	r3, [pc, #460]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a72      	ldr	r2, [pc, #456]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e00b      	b.n	80057a8 <HAL_RCC_OscConfig+0xd8>
 8005790:	4b6f      	ldr	r3, [pc, #444]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a6e      	ldr	r2, [pc, #440]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	4b6c      	ldr	r3, [pc, #432]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a6b      	ldr	r2, [pc, #428]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80057a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d013      	beq.n	80057d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fc fa42 	bl	8001c38 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b8:	f7fc fa3e 	bl	8001c38 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b64      	cmp	r3, #100	; 0x64
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e229      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ca:	4b61      	ldr	r3, [pc, #388]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0xe8>
 80057d6:	e014      	b.n	8005802 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fc fa2e 	bl	8001c38 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e0:	f7fc fa2a 	bl	8001c38 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b64      	cmp	r3, #100	; 0x64
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e215      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f2:	4b57      	ldr	r3, [pc, #348]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x110>
 80057fe:	e000      	b.n	8005802 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d069      	beq.n	80058e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800580e:	4b50      	ldr	r3, [pc, #320]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800581a:	4b4d      	ldr	r3, [pc, #308]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	2b08      	cmp	r3, #8
 8005824:	d11c      	bne.n	8005860 <HAL_RCC_OscConfig+0x190>
 8005826:	4b4a      	ldr	r3, [pc, #296]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d116      	bne.n	8005860 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005832:	4b47      	ldr	r3, [pc, #284]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <HAL_RCC_OscConfig+0x17a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d001      	beq.n	800584a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e1e9      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584a:	4b41      	ldr	r3, [pc, #260]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	493d      	ldr	r1, [pc, #244]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800585a:	4313      	orrs	r3, r2
 800585c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585e:	e040      	b.n	80058e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d023      	beq.n	80058b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005868:	4b39      	ldr	r3, [pc, #228]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a38      	ldr	r2, [pc, #224]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fc f9e0 	bl	8001c38 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587c:	f7fc f9dc 	bl	8001c38 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e1c7      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588e:	4b30      	ldr	r3, [pc, #192]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589a:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	4929      	ldr	r1, [pc, #164]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]
 80058ae:	e018      	b.n	80058e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b0:	4b27      	ldr	r3, [pc, #156]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80058b6:	f023 0301 	bic.w	r3, r3, #1
 80058ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058bc:	f7fc f9bc 	bl	8001c38 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c4:	f7fc f9b8 	bl	8001c38 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e1a3      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d6:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f0      	bne.n	80058c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d038      	beq.n	8005960 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d019      	beq.n	800592a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058f6:	4b16      	ldr	r3, [pc, #88]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80058f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058fa:	4a15      	ldr	r2, [pc, #84]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005902:	f7fc f999 	bl	8001c38 <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800590a:	f7fc f995 	bl	8001c38 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e180      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800591e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f0      	beq.n	800590a <HAL_RCC_OscConfig+0x23a>
 8005928:	e01a      	b.n	8005960 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 800592c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <HAL_RCC_OscConfig+0x280>)
 8005930:	f023 0301 	bic.w	r3, r3, #1
 8005934:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fc f97f 	bl	8001c38 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593e:	f7fc f97b 	bl	8001c38 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d903      	bls.n	8005954 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e166      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
 8005950:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005954:	4b92      	ldr	r3, [pc, #584]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ee      	bne.n	800593e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80a4 	beq.w	8005ab6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800596e:	4b8c      	ldr	r3, [pc, #560]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800597a:	4b89      	ldr	r3, [pc, #548]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	4a88      	ldr	r2, [pc, #544]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005984:	6413      	str	r3, [r2, #64]	; 0x40
 8005986:	4b86      	ldr	r3, [pc, #536]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005996:	4b83      	ldr	r3, [pc, #524]	; (8005ba4 <HAL_RCC_OscConfig+0x4d4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d118      	bne.n	80059d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80059a2:	4b80      	ldr	r3, [pc, #512]	; (8005ba4 <HAL_RCC_OscConfig+0x4d4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a7f      	ldr	r2, [pc, #508]	; (8005ba4 <HAL_RCC_OscConfig+0x4d4>)
 80059a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ae:	f7fc f943 	bl	8001c38 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b6:	f7fc f93f 	bl	8001c38 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b64      	cmp	r3, #100	; 0x64
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e12a      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059c8:	4b76      	ldr	r3, [pc, #472]	; (8005ba4 <HAL_RCC_OscConfig+0x4d4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f0      	beq.n	80059b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d106      	bne.n	80059ea <HAL_RCC_OscConfig+0x31a>
 80059dc:	4b70      	ldr	r3, [pc, #448]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e0:	4a6f      	ldr	r2, [pc, #444]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	6713      	str	r3, [r2, #112]	; 0x70
 80059e8:	e02d      	b.n	8005a46 <HAL_RCC_OscConfig+0x376>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10c      	bne.n	8005a0c <HAL_RCC_OscConfig+0x33c>
 80059f2:	4b6b      	ldr	r3, [pc, #428]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f6:	4a6a      	ldr	r2, [pc, #424]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 80059f8:	f023 0301 	bic.w	r3, r3, #1
 80059fc:	6713      	str	r3, [r2, #112]	; 0x70
 80059fe:	4b68      	ldr	r3, [pc, #416]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	4a67      	ldr	r2, [pc, #412]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a04:	f023 0304 	bic.w	r3, r3, #4
 8005a08:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0a:	e01c      	b.n	8005a46 <HAL_RCC_OscConfig+0x376>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b05      	cmp	r3, #5
 8005a12:	d10c      	bne.n	8005a2e <HAL_RCC_OscConfig+0x35e>
 8005a14:	4b62      	ldr	r3, [pc, #392]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	4a61      	ldr	r2, [pc, #388]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a1a:	f043 0304 	orr.w	r3, r3, #4
 8005a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a20:	4b5f      	ldr	r3, [pc, #380]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a24:	4a5e      	ldr	r2, [pc, #376]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2c:	e00b      	b.n	8005a46 <HAL_RCC_OscConfig+0x376>
 8005a2e:	4b5c      	ldr	r3, [pc, #368]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	4a5b      	ldr	r2, [pc, #364]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3a:	4b59      	ldr	r3, [pc, #356]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3e:	4a58      	ldr	r2, [pc, #352]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a40:	f023 0304 	bic.w	r3, r3, #4
 8005a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d015      	beq.n	8005a7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4e:	f7fc f8f3 	bl	8001c38 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a54:	e00a      	b.n	8005a6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f7fc f8ef 	bl	8001c38 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e0d8      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6c:	4b4c      	ldr	r3, [pc, #304]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0ee      	beq.n	8005a56 <HAL_RCC_OscConfig+0x386>
 8005a78:	e014      	b.n	8005aa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7a:	f7fc f8dd 	bl	8001c38 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a80:	e00a      	b.n	8005a98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a82:	f7fc f8d9 	bl	8001c38 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e0c2      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a98:	4b41      	ldr	r3, [pc, #260]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1ee      	bne.n	8005a82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d105      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aaa:	4b3d      	ldr	r3, [pc, #244]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	4a3c      	ldr	r2, [pc, #240]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 80ae 	beq.w	8005c1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ac0:	4b37      	ldr	r3, [pc, #220]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 030c 	and.w	r3, r3, #12
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d06d      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d14b      	bne.n	8005b6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad4:	4b32      	ldr	r3, [pc, #200]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a31      	ldr	r2, [pc, #196]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fc f8aa 	bl	8001c38 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae8:	f7fc f8a6 	bl	8001c38 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e091      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afa:	4b29      	ldr	r3, [pc, #164]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	061b      	lsls	r3, r3, #24
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	071b      	lsls	r3, r3, #28
 8005b32:	491b      	ldr	r1, [pc, #108]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b38:	4b19      	ldr	r3, [pc, #100]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fc f878 	bl	8001c38 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4c:	f7fc f874 	bl	8001c38 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e05f      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x47c>
 8005b6a:	e057      	b.n	8005c1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0b      	ldr	r2, [pc, #44]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fc f85e 	bl	8001c38 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b80:	f7fc f85a 	bl	8001c38 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e045      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b92:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <HAL_RCC_OscConfig+0x4d0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x4b0>
 8005b9e:	e03d      	b.n	8005c1c <HAL_RCC_OscConfig+0x54c>
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ba8:	4b1f      	ldr	r3, [pc, #124]	; (8005c28 <HAL_RCC_OscConfig+0x558>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d030      	beq.n	8005c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d129      	bne.n	8005c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d122      	bne.n	8005c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d119      	bne.n	8005c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d10f      	bne.n	8005c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d107      	bne.n	8005c18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d001      	beq.n	8005c1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800

08005c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0d0      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c44:	4b6a      	ldr	r3, [pc, #424]	; (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d910      	bls.n	8005c74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c52:	4b67      	ldr	r3, [pc, #412]	; (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 020f 	bic.w	r2, r3, #15
 8005c5a:	4965      	ldr	r1, [pc, #404]	; (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b63      	ldr	r3, [pc, #396]	; (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0b8      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d020      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c8c:	4b59      	ldr	r3, [pc, #356]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	4a58      	ldr	r2, [pc, #352]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ca4:	4b53      	ldr	r3, [pc, #332]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	4a52      	ldr	r2, [pc, #328]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb0:	4b50      	ldr	r3, [pc, #320]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	494d      	ldr	r1, [pc, #308]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d040      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d107      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd6:	4b47      	ldr	r3, [pc, #284]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d115      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e07f      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d107      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cee:	4b41      	ldr	r3, [pc, #260]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e073      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfe:	4b3d      	ldr	r3, [pc, #244]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e06b      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d0e:	4b39      	ldr	r3, [pc, #228]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f023 0203 	bic.w	r2, r3, #3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4936      	ldr	r1, [pc, #216]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d20:	f7fb ff8a 	bl	8001c38 <HAL_GetTick>
 8005d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d26:	e00a      	b.n	8005d3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d28:	f7fb ff86 	bl	8001c38 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e053      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	4b2d      	ldr	r3, [pc, #180]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 020c 	and.w	r2, r3, #12
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d1eb      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d50:	4b27      	ldr	r3, [pc, #156]	; (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d210      	bcs.n	8005d80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f023 020f 	bic.w	r2, r3, #15
 8005d66:	4922      	ldr	r1, [pc, #136]	; (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6e:	4b20      	ldr	r3, [pc, #128]	; (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d001      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e032      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d8c:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4916      	ldr	r1, [pc, #88]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	490e      	ldr	r1, [pc, #56]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dbe:	f000 f821 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	490a      	ldr	r1, [pc, #40]	; (8005df8 <HAL_RCC_ClockConfig+0x1cc>)
 8005dd0:	5ccb      	ldrb	r3, [r1, r3]
 8005dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd6:	4a09      	ldr	r2, [pc, #36]	; (8005dfc <HAL_RCC_ClockConfig+0x1d0>)
 8005dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dda:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <HAL_RCC_ClockConfig+0x1d4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fb fee6 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40023c00 	.word	0x40023c00
 8005df4:	40023800 	.word	0x40023800
 8005df8:	08011f9c 	.word	0x08011f9c
 8005dfc:	20000004 	.word	0x20000004
 8005e00:	20000008 	.word	0x20000008

08005e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e08:	b094      	sub	sp, #80	; 0x50
 8005e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e10:	2300      	movs	r3, #0
 8005e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e14:	2300      	movs	r3, #0
 8005e16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e1c:	4b79      	ldr	r3, [pc, #484]	; (8006004 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 030c 	and.w	r3, r3, #12
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d00d      	beq.n	8005e44 <HAL_RCC_GetSysClockFreq+0x40>
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	f200 80e1 	bhi.w	8005ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0x34>
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d003      	beq.n	8005e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e36:	e0db      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e38:	4b73      	ldr	r3, [pc, #460]	; (8006008 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e3c:	e0db      	b.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e3e:	4b73      	ldr	r3, [pc, #460]	; (800600c <HAL_RCC_GetSysClockFreq+0x208>)
 8005e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e42:	e0d8      	b.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e44:	4b6f      	ldr	r3, [pc, #444]	; (8006004 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e4c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005e4e:	4b6d      	ldr	r3, [pc, #436]	; (8006004 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d063      	beq.n	8005f22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e5a:	4b6a      	ldr	r3, [pc, #424]	; (8006004 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	099b      	lsrs	r3, r3, #6
 8005e60:	2200      	movs	r2, #0
 8005e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e6e:	2300      	movs	r3, #0
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
 8005e72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e76:	4622      	mov	r2, r4
 8005e78:	462b      	mov	r3, r5
 8005e7a:	f04f 0000 	mov.w	r0, #0
 8005e7e:	f04f 0100 	mov.w	r1, #0
 8005e82:	0159      	lsls	r1, r3, #5
 8005e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e88:	0150      	lsls	r0, r2, #5
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4621      	mov	r1, r4
 8005e90:	1a51      	subs	r1, r2, r1
 8005e92:	6139      	str	r1, [r7, #16]
 8005e94:	4629      	mov	r1, r5
 8005e96:	eb63 0301 	sbc.w	r3, r3, r1
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ea8:	4659      	mov	r1, fp
 8005eaa:	018b      	lsls	r3, r1, #6
 8005eac:	4651      	mov	r1, sl
 8005eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eb2:	4651      	mov	r1, sl
 8005eb4:	018a      	lsls	r2, r1, #6
 8005eb6:	4651      	mov	r1, sl
 8005eb8:	ebb2 0801 	subs.w	r8, r2, r1
 8005ebc:	4659      	mov	r1, fp
 8005ebe:	eb63 0901 	sbc.w	r9, r3, r1
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ed6:	4690      	mov	r8, r2
 8005ed8:	4699      	mov	r9, r3
 8005eda:	4623      	mov	r3, r4
 8005edc:	eb18 0303 	adds.w	r3, r8, r3
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	462b      	mov	r3, r5
 8005ee4:	eb49 0303 	adc.w	r3, r9, r3
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	024b      	lsls	r3, r1, #9
 8005efa:	4621      	mov	r1, r4
 8005efc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f00:	4621      	mov	r1, r4
 8005f02:	024a      	lsls	r2, r1, #9
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f14:	f7fa f9e4 	bl	80002e0 <__aeabi_uldivmod>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f20:	e058      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f22:	4b38      	ldr	r3, [pc, #224]	; (8006004 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	099b      	lsrs	r3, r3, #6
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f32:	623b      	str	r3, [r7, #32]
 8005f34:	2300      	movs	r3, #0
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
 8005f38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	464b      	mov	r3, r9
 8005f40:	f04f 0000 	mov.w	r0, #0
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	0159      	lsls	r1, r3, #5
 8005f4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f4e:	0150      	lsls	r0, r2, #5
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4641      	mov	r1, r8
 8005f56:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f74:	ebb2 040a 	subs.w	r4, r2, sl
 8005f78:	eb63 050b 	sbc.w	r5, r3, fp
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	00eb      	lsls	r3, r5, #3
 8005f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f8a:	00e2      	lsls	r2, r4, #3
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	461d      	mov	r5, r3
 8005f90:	4643      	mov	r3, r8
 8005f92:	18e3      	adds	r3, r4, r3
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	464b      	mov	r3, r9
 8005f98:	eb45 0303 	adc.w	r3, r5, r3
 8005f9c:	607b      	str	r3, [r7, #4]
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005faa:	4629      	mov	r1, r5
 8005fac:	028b      	lsls	r3, r1, #10
 8005fae:	4621      	mov	r1, r4
 8005fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	028a      	lsls	r2, r1, #10
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	61fa      	str	r2, [r7, #28]
 8005fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fc8:	f7fa f98a 	bl	80002e0 <__aeabi_uldivmod>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	0c1b      	lsrs	r3, r3, #16
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	3301      	adds	r3, #1
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fee:	e002      	b.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ff2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3750      	adds	r7, #80	; 0x50
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006002:	bf00      	nop
 8006004:	40023800 	.word	0x40023800
 8006008:	00f42400 	.word	0x00f42400
 800600c:	007a1200 	.word	0x007a1200

08006010 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006014:	4b03      	ldr	r3, [pc, #12]	; (8006024 <HAL_RCC_GetHCLKFreq+0x14>)
 8006016:	681b      	ldr	r3, [r3, #0]
}
 8006018:	4618      	mov	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000004 	.word	0x20000004

08006028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800602c:	f7ff fff0 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 8006030:	4602      	mov	r2, r0
 8006032:	4b05      	ldr	r3, [pc, #20]	; (8006048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	0a9b      	lsrs	r3, r3, #10
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	4903      	ldr	r1, [pc, #12]	; (800604c <HAL_RCC_GetPCLK1Freq+0x24>)
 800603e:	5ccb      	ldrb	r3, [r1, r3]
 8006040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006044:	4618      	mov	r0, r3
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40023800 	.word	0x40023800
 800604c:	08011fac 	.word	0x08011fac

08006050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006054:	f7ff ffdc 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 8006058:	4602      	mov	r2, r0
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	0b5b      	lsrs	r3, r3, #13
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	4903      	ldr	r1, [pc, #12]	; (8006074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006066:	5ccb      	ldrb	r3, [r1, r3]
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40023800 	.word	0x40023800
 8006074:	08011fac 	.word	0x08011fac

08006078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d012      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060a0:	4b69      	ldr	r3, [pc, #420]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a68      	ldr	r2, [pc, #416]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060aa:	6093      	str	r3, [r2, #8]
 80060ac:	4b66      	ldr	r3, [pc, #408]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	4964      	ldr	r1, [pc, #400]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d017      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060d2:	4b5d      	ldr	r3, [pc, #372]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e0:	4959      	ldr	r1, [pc, #356]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f0:	d101      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80060f2:	2301      	movs	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d017      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800610e:	4b4e      	ldr	r3, [pc, #312]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006114:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	494a      	ldr	r1, [pc, #296]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800612c:	d101      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800612e:	2301      	movs	r3, #1
 8006130:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800613a:	2301      	movs	r3, #1
 800613c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800614a:	2301      	movs	r3, #1
 800614c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 808b 	beq.w	8006272 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800615c:	4b3a      	ldr	r3, [pc, #232]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	4a39      	ldr	r2, [pc, #228]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006166:	6413      	str	r3, [r2, #64]	; 0x40
 8006168:	4b37      	ldr	r3, [pc, #220]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006174:	4b35      	ldr	r3, [pc, #212]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a34      	ldr	r2, [pc, #208]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800617a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006180:	f7fb fd5a 	bl	8001c38 <HAL_GetTick>
 8006184:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006186:	e008      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006188:	f7fb fd56 	bl	8001c38 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b64      	cmp	r3, #100	; 0x64
 8006194:	d901      	bls.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e38f      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800619a:	4b2c      	ldr	r3, [pc, #176]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061a6:	4b28      	ldr	r3, [pc, #160]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d035      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d02e      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061c4:	4b20      	ldr	r3, [pc, #128]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ce:	4b1e      	ldr	r3, [pc, #120]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d2:	4a1d      	ldr	r2, [pc, #116]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061da:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061de:	4a1a      	ldr	r2, [pc, #104]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80061e6:	4a18      	ldr	r2, [pc, #96]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061ec:	4b16      	ldr	r3, [pc, #88]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d114      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fb fd1e 	bl	8001c38 <HAL_GetTick>
 80061fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fe:	e00a      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006200:	f7fb fd1a 	bl	8001c38 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	f241 3288 	movw	r2, #5000	; 0x1388
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e351      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0ee      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622e:	d111      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800623e:	400b      	ands	r3, r1
 8006240:	4901      	ldr	r1, [pc, #4]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006242:	4313      	orrs	r3, r2
 8006244:	608b      	str	r3, [r1, #8]
 8006246:	e00b      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006248:	40023800 	.word	0x40023800
 800624c:	40007000 	.word	0x40007000
 8006250:	0ffffcff 	.word	0x0ffffcff
 8006254:	4bac      	ldr	r3, [pc, #688]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	4aab      	ldr	r2, [pc, #684]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800625e:	6093      	str	r3, [r2, #8]
 8006260:	4ba9      	ldr	r3, [pc, #676]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626c:	49a6      	ldr	r1, [pc, #664]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626e:	4313      	orrs	r3, r2
 8006270:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	2b00      	cmp	r3, #0
 800627c:	d010      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800627e:	4ba2      	ldr	r3, [pc, #648]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006284:	4aa0      	ldr	r2, [pc, #640]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800628a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800628e:	4b9e      	ldr	r3, [pc, #632]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006290:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	499b      	ldr	r1, [pc, #620]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062ac:	4b96      	ldr	r3, [pc, #600]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ba:	4993      	ldr	r1, [pc, #588]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062ce:	4b8e      	ldr	r3, [pc, #568]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062dc:	498a      	ldr	r1, [pc, #552]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062f0:	4b85      	ldr	r3, [pc, #532]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fe:	4982      	ldr	r1, [pc, #520]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006312:	4b7d      	ldr	r3, [pc, #500]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006318:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006320:	4979      	ldr	r1, [pc, #484]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006334:	4b74      	ldr	r3, [pc, #464]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006342:	4971      	ldr	r1, [pc, #452]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006356:	4b6c      	ldr	r3, [pc, #432]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635c:	f023 020c 	bic.w	r2, r3, #12
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006364:	4968      	ldr	r1, [pc, #416]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006378:	4b63      	ldr	r3, [pc, #396]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006386:	4960      	ldr	r1, [pc, #384]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800639a:	4b5b      	ldr	r3, [pc, #364]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800639c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	4957      	ldr	r1, [pc, #348]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063bc:	4b52      	ldr	r3, [pc, #328]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ca:	494f      	ldr	r1, [pc, #316]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80063de:	4b4a      	ldr	r3, [pc, #296]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ec:	4946      	ldr	r1, [pc, #280]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006400:	4b41      	ldr	r3, [pc, #260]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006406:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	493e      	ldr	r1, [pc, #248]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006422:	4b39      	ldr	r3, [pc, #228]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006428:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006430:	4935      	ldr	r1, [pc, #212]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006444:	4b30      	ldr	r3, [pc, #192]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006452:	492d      	ldr	r1, [pc, #180]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d011      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006466:	4b28      	ldr	r3, [pc, #160]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006474:	4924      	ldr	r1, [pc, #144]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006484:	d101      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006486:	2301      	movs	r3, #1
 8006488:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006496:	2301      	movs	r3, #1
 8006498:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064a6:	4b18      	ldr	r3, [pc, #96]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b4:	4914      	ldr	r1, [pc, #80]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064c8:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064d8:	490b      	ldr	r1, [pc, #44]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00f      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80064ec:	4b06      	ldr	r3, [pc, #24]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064fc:	4902      	ldr	r1, [pc, #8]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006504:	e002      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006506:	bf00      	nop
 8006508:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006518:	4b8a      	ldr	r3, [pc, #552]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800651a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800651e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006528:	4986      	ldr	r1, [pc, #536]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800653c:	4b81      	ldr	r3, [pc, #516]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800653e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006542:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800654c:	497d      	ldr	r1, [pc, #500]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d006      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 80d6 	beq.w	8006714 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006568:	4b76      	ldr	r3, [pc, #472]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a75      	ldr	r2, [pc, #468]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800656e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006574:	f7fb fb60 	bl	8001c38 <HAL_GetTick>
 8006578:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800657a:	e008      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800657c:	f7fb fb5c 	bl	8001c38 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	; 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e195      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800658e:	4b6d      	ldr	r3, [pc, #436]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d021      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d11d      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065ae:	4b65      	ldr	r3, [pc, #404]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065bc:	4b61      	ldr	r3, [pc, #388]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c2:	0e1b      	lsrs	r3, r3, #24
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	019a      	lsls	r2, r3, #6
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	061b      	lsls	r3, r3, #24
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	071b      	lsls	r3, r3, #28
 80065e2:	4958      	ldr	r1, [pc, #352]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065fe:	d00a      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006608:	2b00      	cmp	r3, #0
 800660a:	d02e      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006614:	d129      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006616:	4b4b      	ldr	r3, [pc, #300]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800661c:	0c1b      	lsrs	r3, r3, #16
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006624:	4b47      	ldr	r3, [pc, #284]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662a:	0f1b      	lsrs	r3, r3, #28
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	019a      	lsls	r2, r3, #6
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	041b      	lsls	r3, r3, #16
 800663c:	431a      	orrs	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	061b      	lsls	r3, r3, #24
 8006644:	431a      	orrs	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	071b      	lsls	r3, r3, #28
 800664a:	493e      	ldr	r1, [pc, #248]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006652:	4b3c      	ldr	r3, [pc, #240]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006658:	f023 021f 	bic.w	r2, r3, #31
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	3b01      	subs	r3, #1
 8006662:	4938      	ldr	r1, [pc, #224]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01d      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006676:	4b33      	ldr	r3, [pc, #204]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667c:	0e1b      	lsrs	r3, r3, #24
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006684:	4b2f      	ldr	r3, [pc, #188]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668a:	0f1b      	lsrs	r3, r3, #28
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	019a      	lsls	r2, r3, #6
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	041b      	lsls	r3, r3, #16
 800669e:	431a      	orrs	r2, r3
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	061b      	lsls	r3, r3, #24
 80066a4:	431a      	orrs	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	071b      	lsls	r3, r3, #28
 80066aa:	4926      	ldr	r1, [pc, #152]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d011      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	019a      	lsls	r2, r3, #6
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	061b      	lsls	r3, r3, #24
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	071b      	lsls	r3, r3, #28
 80066da:	491a      	ldr	r1, [pc, #104]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066e2:	4b18      	ldr	r3, [pc, #96]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a17      	ldr	r2, [pc, #92]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ee:	f7fb faa3 	bl	8001c38 <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066f4:	e008      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066f6:	f7fb fa9f 	bl	8001c38 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b64      	cmp	r3, #100	; 0x64
 8006702:	d901      	bls.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e0d8      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f0      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b01      	cmp	r3, #1
 8006718:	f040 80ce 	bne.w	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800671c:	4b09      	ldr	r3, [pc, #36]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a08      	ldr	r2, [pc, #32]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006728:	f7fb fa86 	bl	8001c38 <HAL_GetTick>
 800672c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800672e:	e00b      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006730:	f7fb fa82 	bl	8001c38 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b64      	cmp	r3, #100	; 0x64
 800673c:	d904      	bls.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e0bb      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006748:	4b5e      	ldr	r3, [pc, #376]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006754:	d0ec      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d009      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006772:	2b00      	cmp	r3, #0
 8006774:	d02e      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d12a      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800677e:	4b51      	ldr	r3, [pc, #324]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800678c:	4b4d      	ldr	r3, [pc, #308]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006792:	0f1b      	lsrs	r3, r3, #28
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	019a      	lsls	r2, r3, #6
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	061b      	lsls	r3, r3, #24
 80067ac:	431a      	orrs	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	071b      	lsls	r3, r3, #28
 80067b2:	4944      	ldr	r1, [pc, #272]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067ba:	4b42      	ldr	r3, [pc, #264]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c8:	3b01      	subs	r3, #1
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	493d      	ldr	r1, [pc, #244]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d022      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e8:	d11d      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067ea:	4b36      	ldr	r3, [pc, #216]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f0:	0e1b      	lsrs	r3, r3, #24
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067f8:	4b32      	ldr	r3, [pc, #200]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fe:	0f1b      	lsrs	r3, r3, #28
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	019a      	lsls	r2, r3, #6
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	431a      	orrs	r2, r3
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	061b      	lsls	r3, r3, #24
 8006818:	431a      	orrs	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	071b      	lsls	r3, r3, #28
 800681e:	4929      	ldr	r1, [pc, #164]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d028      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	0e1b      	lsrs	r3, r3, #24
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006840:	4b20      	ldr	r3, [pc, #128]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	0c1b      	lsrs	r3, r3, #16
 8006848:	f003 0303 	and.w	r3, r3, #3
 800684c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	019a      	lsls	r2, r3, #6
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	041b      	lsls	r3, r3, #16
 8006858:	431a      	orrs	r2, r3
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	071b      	lsls	r3, r3, #28
 8006866:	4917      	ldr	r1, [pc, #92]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	4911      	ldr	r1, [pc, #68]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800687e:	4313      	orrs	r3, r2
 8006880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a0e      	ldr	r2, [pc, #56]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800688a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800688e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006890:	f7fb f9d2 	bl	8001c38 <HAL_GetTick>
 8006894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006898:	f7fb f9ce 	bl	8001c38 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b64      	cmp	r3, #100	; 0x64
 80068a4:	d901      	bls.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e007      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068aa:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b6:	d1ef      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40023800 	.word	0x40023800

080068c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e022      	b.n	8006920 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d105      	bne.n	80068f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fa fd75 	bl	80013dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2203      	movs	r2, #3
 80068f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f814 	bl	8006928 <HAL_SD_InitCard>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e00a      	b.n	8006920 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006928:	b5b0      	push	{r4, r5, r7, lr}
 800692a:	b08e      	sub	sp, #56	; 0x38
 800692c:	af04      	add	r7, sp, #16
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006930:	2300      	movs	r3, #0
 8006932:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006938:	2300      	movs	r3, #0
 800693a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006940:	2300      	movs	r3, #0
 8006942:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006944:	2376      	movs	r3, #118	; 0x76
 8006946:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681d      	ldr	r5, [r3, #0]
 800694c:	466c      	mov	r4, sp
 800694e:	f107 0314 	add.w	r3, r7, #20
 8006952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006956:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800695a:	f107 0308 	add.w	r3, r7, #8
 800695e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006960:	4628      	mov	r0, r5
 8006962:	f001 fdc5 	bl	80084f0 <SDMMC_Init>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800696c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e059      	b.n	8006a2c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006986:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f001 fdf9 	bl	8008584 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069a0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80069a2:	2002      	movs	r0, #2
 80069a4:	f7fb f954 	bl	8001c50 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 ff59 	bl	8007860 <SD_PowerON>
 80069ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e02e      	b.n	8006a2c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fe78 	bl	80076c4 <SD_InitCard>
 80069d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e01b      	b.n	8006a2c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 fe53 	bl	80086a8 <SDMMC_CmdBlockLength>
 8006a02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00f      	beq.n	8006a2a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <HAL_SD_InitCard+0x10c>)
 8006a10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3728      	adds	r7, #40	; 0x28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bdb0      	pop	{r4, r5, r7, pc}
 8006a34:	004005ff 	.word	0x004005ff

08006a38 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08c      	sub	sp, #48	; 0x30
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d107      	bne.n	8006a60 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e0c3      	b.n	8006be8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	f040 80bc 	bne.w	8006be6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	441a      	add	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d907      	bls.n	8006a92 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e0aa      	b.n	8006be8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2203      	movs	r2, #3
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	4a4e      	ldr	r2, [pc, #312]	; (8006bf0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	4a4d      	ldr	r2, [pc, #308]	; (8006bf4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006ac0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2200      	movs	r2, #0
 8006ad0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3380      	adds	r3, #128	; 0x80
 8006af8:	4619      	mov	r1, r3
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	025b      	lsls	r3, r3, #9
 8006b00:	089b      	lsrs	r3, r3, #2
 8006b02:	f7fc f8b5 	bl	8002c70 <HAL_DMA_Start_IT>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d017      	beq.n	8006b3c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006b1a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a35      	ldr	r2, [pc, #212]	; (8006bf8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e055      	b.n	8006be8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0208 	orr.w	r2, r2, #8
 8006b4a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d002      	beq.n	8006b5a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	025b      	lsls	r3, r3, #9
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b5e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	025b      	lsls	r3, r3, #9
 8006b64:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b66:	2390      	movs	r3, #144	; 0x90
 8006b68:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b72:	2301      	movs	r3, #1
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f107 0210 	add.w	r2, r7, #16
 8006b7e:	4611      	mov	r1, r2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 fd65 	bl	8008650 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d90a      	bls.n	8006ba2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2282      	movs	r2, #130	; 0x82
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f001 fdc9 	bl	8008730 <SDMMC_CmdReadMultiBlock>
 8006b9e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006ba0:	e009      	b.n	8006bb6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2281      	movs	r2, #129	; 0x81
 8006ba6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fd9c 	bl	80086ec <SDMMC_CmdReadSingleBlock>
 8006bb4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d012      	beq.n	8006be2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a0d      	ldr	r2, [pc, #52]	; (8006bf8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e002      	b.n	8006be8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3730      	adds	r7, #48	; 0x30
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	080074d3 	.word	0x080074d3
 8006bf4:	08007545 	.word	0x08007545
 8006bf8:	004005ff 	.word	0x004005ff

08006bfc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08c      	sub	sp, #48	; 0x30
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d107      	bne.n	8006c24 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0c6      	b.n	8006db2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	f040 80bf 	bne.w	8006db0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	441a      	add	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d907      	bls.n	8006c56 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e0ad      	b.n	8006db2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2203      	movs	r2, #3
 8006c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 021a 	orr.w	r2, r2, #26
 8006c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	4a50      	ldr	r2, [pc, #320]	; (8006dbc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	4a4f      	ldr	r2, [pc, #316]	; (8006dc0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006c84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d002      	beq.n	8006c9c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	025b      	lsls	r3, r3, #9
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d90a      	bls.n	8006cb8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	22a0      	movs	r2, #160	; 0xa0
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fd82 	bl	80087b8 <SDMMC_CmdWriteMultiBlock>
 8006cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006cb6:	e009      	b.n	8006ccc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2290      	movs	r2, #144	; 0x90
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f001 fd55 	bl	8008774 <SDMMC_CmdWriteSingleBlock>
 8006cca:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d012      	beq.n	8006cf8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a3b      	ldr	r2, [pc, #236]	; (8006dc4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e05c      	b.n	8006db2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0208 	orr.w	r2, r2, #8
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0c:	2240      	movs	r2, #64	; 0x40
 8006d0e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006d30:	68b9      	ldr	r1, [r7, #8]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3380      	adds	r3, #128	; 0x80
 8006d38:	461a      	mov	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	025b      	lsls	r3, r3, #9
 8006d3e:	089b      	lsrs	r3, r3, #2
 8006d40:	f7fb ff96 	bl	8002c70 <HAL_DMA_Start_IT>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01a      	beq.n	8006d80 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 021a 	bic.w	r2, r2, #26
 8006d58:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a19      	ldr	r2, [pc, #100]	; (8006dc4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006d60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e018      	b.n	8006db2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d84:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	025b      	lsls	r3, r3, #9
 8006d8a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d8c:	2390      	movs	r3, #144	; 0x90
 8006d8e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f107 0210 	add.w	r2, r7, #16
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fc52 	bl	8008650 <SDMMC_ConfigData>

      return HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	e000      	b.n	8006db2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006db0:	2302      	movs	r3, #2
  }
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3730      	adds	r7, #48	; 0x30
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	080074a9 	.word	0x080074a9
 8006dc0:	08007545 	.word	0x08007545
 8006dc4:	004005ff 	.word	0x004005ff

08006dc8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d008      	beq.n	8006df6 <HAL_SD_IRQHandler+0x2e>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f003 0308 	and.w	r3, r3, #8
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fdec 	bl	80079cc <SD_Read_IT>
 8006df4:	e15a      	b.n	80070ac <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 808d 	beq.w	8006f20 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4b9a      	ldr	r3, [pc, #616]	; (8007084 <HAL_SD_IRQHandler+0x2bc>)
 8006e1c:	400b      	ands	r3, r1
 8006e1e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0201 	bic.w	r2, r2, #1
 8006e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d039      	beq.n	8006eae <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <HAL_SD_IRQHandler+0x86>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d011      	beq.n	8006e72 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 fcd2 	bl	80087fc <SDMMC_CmdStopTransfer>
 8006e58:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d008      	beq.n	8006e72 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f921 	bl	80070b4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <HAL_SD_IRQHandler+0xd6>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f003 fd3c 	bl	800a91c <HAL_SD_RxCpltCallback>
 8006ea4:	e102      	b.n	80070ac <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f003 fd2e 	bl	800a908 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006eac:	e0fe      	b.n	80070ac <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80f9 	beq.w	80070ac <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d011      	beq.n	8006ee8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f001 fc97 	bl	80087fc <SDMMC_CmdStopTransfer>
 8006ece:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8e6 	bl	80070b4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 80dc 	bne.w	80070ac <HAL_SD_IRQHandler+0x2e4>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 80d6 	bne.w	80070ac <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0208 	bic.w	r2, r2, #8
 8006f0e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f003 fcf5 	bl	800a908 <HAL_SD_TxCpltCallback>
}
 8006f1e:	e0c5      	b.n	80070ac <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <HAL_SD_IRQHandler+0x178>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fd98 	bl	8007a6e <SD_Write_IT>
 8006f3e:	e0b5      	b.n	80070ac <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 80ae 	beq.w	80070ac <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	f043 0202 	orr.w	r2, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	f043 0208 	orr.w	r2, r3, #8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	f043 0220 	orr.w	r2, r3, #32
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	f043 0210 	orr.w	r2, r3, #16
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f240 523a 	movw	r2, #1338	; 0x53a
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006fd0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 fc10 	bl	80087fc <SDMMC_CmdStopTransfer>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f857 	bl	80070b4 <HAL_SD_ErrorCallback>
}
 8007006:	e051      	b.n	80070ac <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b00      	cmp	r3, #0
 8007010:	d04c      	beq.n	80070ac <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <HAL_SD_IRQHandler+0x25e>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d011      	beq.n	800704a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702a:	4a17      	ldr	r2, [pc, #92]	; (8007088 <HAL_SD_IRQHandler+0x2c0>)
 800702c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	4618      	mov	r0, r3
 8007034:	f7fb fe7c 	bl	8002d30 <HAL_DMA_Abort_IT>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d036      	beq.n	80070ac <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fad0 	bl	80075e8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007048:	e030      	b.n	80070ac <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <HAL_SD_IRQHandler+0x296>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d018      	beq.n	8007090 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	4a0a      	ldr	r2, [pc, #40]	; (800708c <HAL_SD_IRQHandler+0x2c4>)
 8007064:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	4618      	mov	r0, r3
 800706c:	f7fb fe60 	bl	8002d30 <HAL_DMA_Abort_IT>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01a      	beq.n	80070ac <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	4618      	mov	r0, r3
 800707c:	f000 faeb 	bl	8007656 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007080:	e014      	b.n	80070ac <HAL_SD_IRQHandler+0x2e4>
 8007082:	bf00      	nop
 8007084:	ffff3ec5 	.word	0xffff3ec5
 8007088:	080075e9 	.word	0x080075e9
 800708c:	08007657 	.word	0x08007657
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f003 fc25 	bl	800a8f4 <HAL_SD_AbortCallback>
}
 80070aa:	e7ff      	b.n	80070ac <HAL_SD_IRQHandler+0x2e4>
 80070ac:	bf00      	nop
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d6:	0f9b      	lsrs	r3, r3, #30
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e2:	0e9b      	lsrs	r3, r3, #26
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f4:	0e1b      	lsrs	r3, r3, #24
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007106:	0c1b      	lsrs	r3, r3, #16
 8007108:	b2da      	uxtb	r2, r3
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	b2da      	uxtb	r2, r3
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800711e:	b2da      	uxtb	r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007128:	0d1b      	lsrs	r3, r3, #20
 800712a:	b29a      	uxth	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007134:	0c1b      	lsrs	r3, r3, #16
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	b2da      	uxtb	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007146:	0bdb      	lsrs	r3, r3, #15
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	b2da      	uxtb	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007158:	0b9b      	lsrs	r3, r3, #14
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	b2da      	uxtb	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800716a:	0b5b      	lsrs	r3, r3, #13
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2da      	uxtb	r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800717c:	0b1b      	lsrs	r3, r3, #12
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	b2da      	uxtb	r2, r3
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007194:	2b00      	cmp	r3, #0
 8007196:	d163      	bne.n	8007260 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800719c:	009a      	lsls	r2, r3, #2
 800719e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80071a2:	4013      	ands	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80071a8:	0f92      	lsrs	r2, r2, #30
 80071aa:	431a      	orrs	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b4:	0edb      	lsrs	r3, r3, #27
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c6:	0e1b      	lsrs	r3, r3, #24
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d8:	0d5b      	lsrs	r3, r3, #21
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ea:	0c9b      	lsrs	r3, r3, #18
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fc:	0bdb      	lsrs	r3, r3, #15
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	b2da      	uxtb	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	7e1b      	ldrb	r3, [r3, #24]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	3302      	adds	r3, #2
 8007220:	2201      	movs	r2, #1
 8007222:	fa02 f303 	lsl.w	r3, r2, r3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800722a:	fb03 f202 	mul.w	r2, r3, r2
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	7a1b      	ldrb	r3, [r3, #8]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	2201      	movs	r2, #1
 800723e:	409a      	lsls	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800724c:	0a52      	lsrs	r2, r2, #9
 800724e:	fb03 f202 	mul.w	r2, r3, r2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800725c:	661a      	str	r2, [r3, #96]	; 0x60
 800725e:	e031      	b.n	80072c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007264:	2b01      	cmp	r3, #1
 8007266:	d11d      	bne.n	80072a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800726c:	041b      	lsls	r3, r3, #16
 800726e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	431a      	orrs	r2, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	3301      	adds	r3, #1
 8007284:	029a      	lsls	r2, r3, #10
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007298:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	661a      	str	r2, [r3, #96]	; 0x60
 80072a2:	e00f      	b.n	80072c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a58      	ldr	r2, [pc, #352]	; (800740c <HAL_SD_GetCardCSD+0x344>)
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e09d      	b.n	8007400 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c8:	0b9b      	lsrs	r3, r3, #14
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072da:	09db      	lsrs	r3, r3, #7
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	0fdb      	lsrs	r3, r3, #31
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007308:	0f5b      	lsrs	r3, r3, #29
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f003 0303 	and.w	r3, r3, #3
 8007310:	b2da      	uxtb	r2, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731a:	0e9b      	lsrs	r3, r3, #26
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	b2da      	uxtb	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732c:	0d9b      	lsrs	r3, r3, #22
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	b2da      	uxtb	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	0d5b      	lsrs	r3, r3, #21
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	b2db      	uxtb	r3, r3
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	b2da      	uxtb	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736e:	0bdb      	lsrs	r3, r3, #15
 8007370:	b2db      	uxtb	r3, r3
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	b2da      	uxtb	r2, r3
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007382:	0b9b      	lsrs	r3, r3, #14
 8007384:	b2db      	uxtb	r3, r3
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	b2da      	uxtb	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007396:	0b5b      	lsrs	r3, r3, #13
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073aa:	0b1b      	lsrs	r3, r3, #12
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	0a9b      	lsrs	r3, r3, #10
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	0a1b      	lsrs	r3, r3, #8
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	004005ff 	.word	0x004005ff

08007410 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007474:	f107 030c 	add.w	r3, r7, #12
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fa7e 	bl	800797c <SD_SendStatus>
 8007480:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	0a5b      	lsrs	r3, r3, #9
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800749e:	693b      	ldr	r3, [r7, #16]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80074c6:	bf00      	nop
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	2b82      	cmp	r3, #130	; 0x82
 80074e6:	d111      	bne.n	800750c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 f985 	bl	80087fc <SDMMC_CmdStopTransfer>
 80074f2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	431a      	orrs	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fdd4 	bl	80070b4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0208 	bic.w	r2, r2, #8
 800751a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f240 523a 	movw	r2, #1338	; 0x53a
 8007524:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f003 f9f1 	bl	800a91c <HAL_SD_RxCpltCallback>
#endif
}
 800753a:	bf00      	nop
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fb fd98 	bl	8003088 <HAL_DMA_GetError>
 8007558:	4603      	mov	r3, r0
 800755a:	2b02      	cmp	r3, #2
 800755c:	d03e      	beq.n	80075dc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007564:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d002      	beq.n	800757a <SD_DMAError+0x36>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d12d      	bne.n	80075d6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a19      	ldr	r2, [pc, #100]	; (80075e4 <SD_DMAError+0xa0>)
 8007580:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007590:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800759e:	6978      	ldr	r0, [r7, #20]
 80075a0:	f7ff ff62 	bl	8007468 <HAL_SD_GetCardState>
 80075a4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b06      	cmp	r3, #6
 80075aa:	d002      	beq.n	80075b2 <SD_DMAError+0x6e>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b05      	cmp	r3, #5
 80075b0:	d10a      	bne.n	80075c8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 f920 	bl	80087fc <SDMMC_CmdStopTransfer>
 80075bc:	4602      	mov	r2, r0
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c2:	431a      	orrs	r2, r3
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80075d6:	6978      	ldr	r0, [r7, #20]
 80075d8:	f7ff fd6c 	bl	80070b4 <HAL_SD_ErrorCallback>
#endif
  }
}
 80075dc:	bf00      	nop
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	004005ff 	.word	0x004005ff

080075e8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7ff ff31 	bl	8007468 <HAL_SD_GetCardState>
 8007606:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b06      	cmp	r3, #6
 800761a:	d002      	beq.n	8007622 <SD_DMATxAbort+0x3a>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b05      	cmp	r3, #5
 8007620:	d10a      	bne.n	8007638 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f8e8 	bl	80087fc <SDMMC_CmdStopTransfer>
 800762c:	4602      	mov	r2, r0
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	431a      	orrs	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f003 f957 	bl	800a8f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007646:	e002      	b.n	800764e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff fd33 	bl	80070b4 <HAL_SD_ErrorCallback>
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f240 523a 	movw	r2, #1338	; 0x53a
 800766c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff fefa 	bl	8007468 <HAL_SD_GetCardState>
 8007674:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b06      	cmp	r3, #6
 8007688:	d002      	beq.n	8007690 <SD_DMARxAbort+0x3a>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b05      	cmp	r3, #5
 800768e:	d10a      	bne.n	80076a6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f001 f8b1 	bl	80087fc <SDMMC_CmdStopTransfer>
 800769a:	4602      	mov	r2, r0
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	431a      	orrs	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f003 f920 	bl	800a8f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80076b4:	e002      	b.n	80076bc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff fcfc 	bl	80070b4 <HAL_SD_ErrorCallback>
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076c4:	b5b0      	push	{r4, r5, r7, lr}
 80076c6:	b094      	sub	sp, #80	; 0x50
 80076c8:	af04      	add	r7, sp, #16
 80076ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80076cc:	2301      	movs	r3, #1
 80076ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 ff63 	bl	80085a0 <SDMMC_GetPowerState>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80076e4:	e0b8      	b.n	8007858 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d02f      	beq.n	800774e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 f94a 	bl	800898c <SDMMC_CmdSendCID>
 80076f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <SD_InitCard+0x40>
    {
      return errorstate;
 8007700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007702:	e0a9      	b.n	8007858 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f000 ff8d 	bl	800862a <SDMMC_GetResponse>
 8007710:	4602      	mov	r2, r0
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2104      	movs	r1, #4
 800771c:	4618      	mov	r0, r3
 800771e:	f000 ff84 	bl	800862a <SDMMC_GetResponse>
 8007722:	4602      	mov	r2, r0
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2108      	movs	r1, #8
 800772e:	4618      	mov	r0, r3
 8007730:	f000 ff7b 	bl	800862a <SDMMC_GetResponse>
 8007734:	4602      	mov	r2, r0
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	210c      	movs	r1, #12
 8007740:	4618      	mov	r0, r3
 8007742:	f000 ff72 	bl	800862a <SDMMC_GetResponse>
 8007746:	4602      	mov	r2, r0
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007752:	2b03      	cmp	r3, #3
 8007754:	d00d      	beq.n	8007772 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f107 020e 	add.w	r2, r7, #14
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f001 f950 	bl	8008a06 <SDMMC_CmdSetRelAdd>
 8007766:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <SD_InitCard+0xae>
    {
      return errorstate;
 800776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007770:	e072      	b.n	8007858 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007776:	2b03      	cmp	r3, #3
 8007778:	d036      	beq.n	80077e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800777a:	89fb      	ldrh	r3, [r7, #14]
 800777c:	461a      	mov	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778a:	041b      	lsls	r3, r3, #16
 800778c:	4619      	mov	r1, r3
 800778e:	4610      	mov	r0, r2
 8007790:	f001 f91a 	bl	80089c8 <SDMMC_CmdSendCSD>
 8007794:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800779c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779e:	e05b      	b.n	8007858 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2100      	movs	r1, #0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 ff3f 	bl	800862a <SDMMC_GetResponse>
 80077ac:	4602      	mov	r2, r0
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2104      	movs	r1, #4
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 ff36 	bl	800862a <SDMMC_GetResponse>
 80077be:	4602      	mov	r2, r0
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2108      	movs	r1, #8
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 ff2d 	bl	800862a <SDMMC_GetResponse>
 80077d0:	4602      	mov	r2, r0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	210c      	movs	r1, #12
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 ff24 	bl	800862a <SDMMC_GetResponse>
 80077e2:	4602      	mov	r2, r0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2104      	movs	r1, #4
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 ff1b 	bl	800862a <SDMMC_GetResponse>
 80077f4:	4603      	mov	r3, r0
 80077f6:	0d1a      	lsrs	r2, r3, #20
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80077fc:	f107 0310 	add.w	r3, r7, #16
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff fc60 	bl	80070c8 <HAL_SD_GetCardCSD>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800780e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007812:	e021      	b.n	8007858 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6819      	ldr	r1, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781c:	041b      	lsls	r3, r3, #16
 800781e:	2200      	movs	r2, #0
 8007820:	461c      	mov	r4, r3
 8007822:	4615      	mov	r5, r2
 8007824:	4622      	mov	r2, r4
 8007826:	462b      	mov	r3, r5
 8007828:	4608      	mov	r0, r1
 800782a:	f001 f809 	bl	8008840 <SDMMC_CmdSelDesel>
 800782e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <SD_InitCard+0x176>
  {
    return errorstate;
 8007836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007838:	e00e      	b.n	8007858 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681d      	ldr	r5, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	466c      	mov	r4, sp
 8007842:	f103 0210 	add.w	r2, r3, #16
 8007846:	ca07      	ldmia	r2, {r0, r1, r2}
 8007848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800784c:	3304      	adds	r3, #4
 800784e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007850:	4628      	mov	r0, r5
 8007852:	f000 fe4d 	bl	80084f0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3740      	adds	r7, #64	; 0x40
 800785c:	46bd      	mov	sp, r7
 800785e:	bdb0      	pop	{r4, r5, r7, pc}

08007860 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	2300      	movs	r3, #0
 8007872:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f001 f804 	bl	8008886 <SDMMC_CmdGoIdleState>
 800787e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	e072      	b.n	8007970 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f001 f817 	bl	80088c2 <SDMMC_CmdOperCond>
 8007894:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 ffed 	bl	8008886 <SDMMC_CmdGoIdleState>
 80078ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <SD_PowerON+0x5e>
    {
      return errorstate;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	e05b      	b.n	8007970 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d137      	bne.n	8007936 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2100      	movs	r1, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 f817 	bl	8008900 <SDMMC_CmdAppCommand>
 80078d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d02d      	beq.n	8007936 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078de:	e047      	b.n	8007970 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 f80a 	bl	8008900 <SDMMC_CmdAppCommand>
 80078ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <SD_PowerON+0x98>
    {
      return errorstate;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	e03b      	b.n	8007970 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	491e      	ldr	r1, [pc, #120]	; (8007978 <SD_PowerON+0x118>)
 80078fe:	4618      	mov	r0, r3
 8007900:	f001 f820 	bl	8008944 <SDMMC_CmdAppOperCommand>
 8007904:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800790c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007910:	e02e      	b.n	8007970 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2100      	movs	r1, #0
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fe86 	bl	800862a <SDMMC_GetResponse>
 800791e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	0fdb      	lsrs	r3, r3, #31
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <SD_PowerON+0xcc>
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <SD_PowerON+0xce>
 800792c:	2300      	movs	r3, #0
 800792e:	613b      	str	r3, [r7, #16]

    count++;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	3301      	adds	r3, #1
 8007934:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800793c:	4293      	cmp	r3, r2
 800793e:	d802      	bhi.n	8007946 <SD_PowerON+0xe6>
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0cc      	beq.n	80078e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800794c:	4293      	cmp	r3, r2
 800794e:	d902      	bls.n	8007956 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007954:	e00c      	b.n	8007970 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	645a      	str	r2, [r3, #68]	; 0x44
 8007966:	e002      	b.n	800796e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	c1100000 	.word	0xc1100000

0800797c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d102      	bne.n	8007992 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800798c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007990:	e018      	b.n	80079c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f001 f852 	bl	8008a48 <SDMMC_CmdSendStatus>
 80079a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	e009      	b.n	80079c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2100      	movs	r1, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fe37 	bl	800862a <SDMMC_GetResponse>
 80079bc:	4602      	mov	r2, r0
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d03f      	beq.n	8007a66 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	e033      	b.n	8007a54 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 fda9 	bl	8008548 <SDMMC_ReadFIFO>
 80079f6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3301      	adds	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	0a1b      	lsrs	r3, r3, #8
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	0c1b      	lsrs	r3, r3, #16
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	0e1b      	lsrs	r3, r3, #24
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3301      	adds	r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	3301      	adds	r3, #1
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2b07      	cmp	r3, #7
 8007a58:	d9c8      	bls.n	80079ec <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007a66:	bf00      	nop
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b086      	sub	sp, #24
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d043      	beq.n	8007b10 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	e037      	b.n	8007afe <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3301      	adds	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	021a      	lsls	r2, r3, #8
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	041a      	lsls	r2, r3, #16
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	061a      	lsls	r2, r3, #24
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f107 0208 	add.w	r2, r7, #8
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fd35 	bl	8008562 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	3301      	adds	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b07      	cmp	r3, #7
 8007b02:	d9c4      	bls.n	8007a8e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007b10:	bf00      	nop
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e040      	b.n	8007bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7f9 fd5a 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2224      	movs	r2, #36	; 0x24
 8007b44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0201 	bic.w	r2, r2, #1
 8007b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f8b0 	bl	8007cbc <UART_SetConfig>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e022      	b.n	8007bac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fb08 	bl	8008184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0201 	orr.w	r2, r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb8f 	bl	80082c8 <UART_CheckIdleState>
 8007baa:	4603      	mov	r3, r0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af02      	add	r7, sp, #8
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d171      	bne.n	8007cb0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_UART_Transmit+0x24>
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e06a      	b.n	8007cb2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2221      	movs	r2, #33	; 0x21
 8007be8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bea:	f7fa f825 	bl	8001c38 <HAL_GetTick>
 8007bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	88fa      	ldrh	r2, [r7, #6]
 8007bf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	88fa      	ldrh	r2, [r7, #6]
 8007bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c08:	d108      	bne.n	8007c1c <HAL_UART_Transmit+0x68>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d104      	bne.n	8007c1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	e003      	b.n	8007c24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c24:	e02c      	b.n	8007c80 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2180      	movs	r1, #128	; 0x80
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 fb96 	bl	8008362 <UART_WaitOnFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e038      	b.n	8007cb2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10b      	bne.n	8007c5e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	3302      	adds	r3, #2
 8007c5a:	61bb      	str	r3, [r7, #24]
 8007c5c:	e007      	b.n	8007c6e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	781a      	ldrb	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1cc      	bne.n	8007c26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2200      	movs	r2, #0
 8007c94:	2140      	movs	r1, #64	; 0x40
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fb63 	bl	8008362 <UART_WaitOnFlagUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e005      	b.n	8007cb2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e000      	b.n	8007cb2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007cb0:	2302      	movs	r3, #2
  }
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3720      	adds	r7, #32
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	4ba6      	ldr	r3, [pc, #664]	; (8007f80 <UART_SetConfig+0x2c4>)
 8007ce8:	4013      	ands	r3, r2
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	6812      	ldr	r2, [r2, #0]
 8007cee:	6979      	ldr	r1, [r7, #20]
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a94      	ldr	r2, [pc, #592]	; (8007f84 <UART_SetConfig+0x2c8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d120      	bne.n	8007d7a <UART_SetConfig+0xbe>
 8007d38:	4b93      	ldr	r3, [pc, #588]	; (8007f88 <UART_SetConfig+0x2cc>)
 8007d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d816      	bhi.n	8007d74 <UART_SetConfig+0xb8>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <UART_SetConfig+0x90>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d5d 	.word	0x08007d5d
 8007d50:	08007d69 	.word	0x08007d69
 8007d54:	08007d63 	.word	0x08007d63
 8007d58:	08007d6f 	.word	0x08007d6f
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e150      	b.n	8008004 <UART_SetConfig+0x348>
 8007d62:	2302      	movs	r3, #2
 8007d64:	77fb      	strb	r3, [r7, #31]
 8007d66:	e14d      	b.n	8008004 <UART_SetConfig+0x348>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e14a      	b.n	8008004 <UART_SetConfig+0x348>
 8007d6e:	2308      	movs	r3, #8
 8007d70:	77fb      	strb	r3, [r7, #31]
 8007d72:	e147      	b.n	8008004 <UART_SetConfig+0x348>
 8007d74:	2310      	movs	r3, #16
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e144      	b.n	8008004 <UART_SetConfig+0x348>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a83      	ldr	r2, [pc, #524]	; (8007f8c <UART_SetConfig+0x2d0>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d132      	bne.n	8007dea <UART_SetConfig+0x12e>
 8007d84:	4b80      	ldr	r3, [pc, #512]	; (8007f88 <UART_SetConfig+0x2cc>)
 8007d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8a:	f003 030c 	and.w	r3, r3, #12
 8007d8e:	2b0c      	cmp	r3, #12
 8007d90:	d828      	bhi.n	8007de4 <UART_SetConfig+0x128>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <UART_SetConfig+0xdc>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007dcd 	.word	0x08007dcd
 8007d9c:	08007de5 	.word	0x08007de5
 8007da0:	08007de5 	.word	0x08007de5
 8007da4:	08007de5 	.word	0x08007de5
 8007da8:	08007dd9 	.word	0x08007dd9
 8007dac:	08007de5 	.word	0x08007de5
 8007db0:	08007de5 	.word	0x08007de5
 8007db4:	08007de5 	.word	0x08007de5
 8007db8:	08007dd3 	.word	0x08007dd3
 8007dbc:	08007de5 	.word	0x08007de5
 8007dc0:	08007de5 	.word	0x08007de5
 8007dc4:	08007de5 	.word	0x08007de5
 8007dc8:	08007ddf 	.word	0x08007ddf
 8007dcc:	2300      	movs	r3, #0
 8007dce:	77fb      	strb	r3, [r7, #31]
 8007dd0:	e118      	b.n	8008004 <UART_SetConfig+0x348>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	77fb      	strb	r3, [r7, #31]
 8007dd6:	e115      	b.n	8008004 <UART_SetConfig+0x348>
 8007dd8:	2304      	movs	r3, #4
 8007dda:	77fb      	strb	r3, [r7, #31]
 8007ddc:	e112      	b.n	8008004 <UART_SetConfig+0x348>
 8007dde:	2308      	movs	r3, #8
 8007de0:	77fb      	strb	r3, [r7, #31]
 8007de2:	e10f      	b.n	8008004 <UART_SetConfig+0x348>
 8007de4:	2310      	movs	r3, #16
 8007de6:	77fb      	strb	r3, [r7, #31]
 8007de8:	e10c      	b.n	8008004 <UART_SetConfig+0x348>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a68      	ldr	r2, [pc, #416]	; (8007f90 <UART_SetConfig+0x2d4>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d120      	bne.n	8007e36 <UART_SetConfig+0x17a>
 8007df4:	4b64      	ldr	r3, [pc, #400]	; (8007f88 <UART_SetConfig+0x2cc>)
 8007df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007dfe:	2b30      	cmp	r3, #48	; 0x30
 8007e00:	d013      	beq.n	8007e2a <UART_SetConfig+0x16e>
 8007e02:	2b30      	cmp	r3, #48	; 0x30
 8007e04:	d814      	bhi.n	8007e30 <UART_SetConfig+0x174>
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	d009      	beq.n	8007e1e <UART_SetConfig+0x162>
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d810      	bhi.n	8007e30 <UART_SetConfig+0x174>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <UART_SetConfig+0x15c>
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d006      	beq.n	8007e24 <UART_SetConfig+0x168>
 8007e16:	e00b      	b.n	8007e30 <UART_SetConfig+0x174>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	77fb      	strb	r3, [r7, #31]
 8007e1c:	e0f2      	b.n	8008004 <UART_SetConfig+0x348>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	77fb      	strb	r3, [r7, #31]
 8007e22:	e0ef      	b.n	8008004 <UART_SetConfig+0x348>
 8007e24:	2304      	movs	r3, #4
 8007e26:	77fb      	strb	r3, [r7, #31]
 8007e28:	e0ec      	b.n	8008004 <UART_SetConfig+0x348>
 8007e2a:	2308      	movs	r3, #8
 8007e2c:	77fb      	strb	r3, [r7, #31]
 8007e2e:	e0e9      	b.n	8008004 <UART_SetConfig+0x348>
 8007e30:	2310      	movs	r3, #16
 8007e32:	77fb      	strb	r3, [r7, #31]
 8007e34:	e0e6      	b.n	8008004 <UART_SetConfig+0x348>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a56      	ldr	r2, [pc, #344]	; (8007f94 <UART_SetConfig+0x2d8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d120      	bne.n	8007e82 <UART_SetConfig+0x1c6>
 8007e40:	4b51      	ldr	r3, [pc, #324]	; (8007f88 <UART_SetConfig+0x2cc>)
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e4c:	d013      	beq.n	8007e76 <UART_SetConfig+0x1ba>
 8007e4e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e50:	d814      	bhi.n	8007e7c <UART_SetConfig+0x1c0>
 8007e52:	2b80      	cmp	r3, #128	; 0x80
 8007e54:	d009      	beq.n	8007e6a <UART_SetConfig+0x1ae>
 8007e56:	2b80      	cmp	r3, #128	; 0x80
 8007e58:	d810      	bhi.n	8007e7c <UART_SetConfig+0x1c0>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <UART_SetConfig+0x1a8>
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d006      	beq.n	8007e70 <UART_SetConfig+0x1b4>
 8007e62:	e00b      	b.n	8007e7c <UART_SetConfig+0x1c0>
 8007e64:	2300      	movs	r3, #0
 8007e66:	77fb      	strb	r3, [r7, #31]
 8007e68:	e0cc      	b.n	8008004 <UART_SetConfig+0x348>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	77fb      	strb	r3, [r7, #31]
 8007e6e:	e0c9      	b.n	8008004 <UART_SetConfig+0x348>
 8007e70:	2304      	movs	r3, #4
 8007e72:	77fb      	strb	r3, [r7, #31]
 8007e74:	e0c6      	b.n	8008004 <UART_SetConfig+0x348>
 8007e76:	2308      	movs	r3, #8
 8007e78:	77fb      	strb	r3, [r7, #31]
 8007e7a:	e0c3      	b.n	8008004 <UART_SetConfig+0x348>
 8007e7c:	2310      	movs	r3, #16
 8007e7e:	77fb      	strb	r3, [r7, #31]
 8007e80:	e0c0      	b.n	8008004 <UART_SetConfig+0x348>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a44      	ldr	r2, [pc, #272]	; (8007f98 <UART_SetConfig+0x2dc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d125      	bne.n	8007ed8 <UART_SetConfig+0x21c>
 8007e8c:	4b3e      	ldr	r3, [pc, #248]	; (8007f88 <UART_SetConfig+0x2cc>)
 8007e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e9a:	d017      	beq.n	8007ecc <UART_SetConfig+0x210>
 8007e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea0:	d817      	bhi.n	8007ed2 <UART_SetConfig+0x216>
 8007ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea6:	d00b      	beq.n	8007ec0 <UART_SetConfig+0x204>
 8007ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eac:	d811      	bhi.n	8007ed2 <UART_SetConfig+0x216>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <UART_SetConfig+0x1fe>
 8007eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb6:	d006      	beq.n	8007ec6 <UART_SetConfig+0x20a>
 8007eb8:	e00b      	b.n	8007ed2 <UART_SetConfig+0x216>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	77fb      	strb	r3, [r7, #31]
 8007ebe:	e0a1      	b.n	8008004 <UART_SetConfig+0x348>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	77fb      	strb	r3, [r7, #31]
 8007ec4:	e09e      	b.n	8008004 <UART_SetConfig+0x348>
 8007ec6:	2304      	movs	r3, #4
 8007ec8:	77fb      	strb	r3, [r7, #31]
 8007eca:	e09b      	b.n	8008004 <UART_SetConfig+0x348>
 8007ecc:	2308      	movs	r3, #8
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e098      	b.n	8008004 <UART_SetConfig+0x348>
 8007ed2:	2310      	movs	r3, #16
 8007ed4:	77fb      	strb	r3, [r7, #31]
 8007ed6:	e095      	b.n	8008004 <UART_SetConfig+0x348>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a2f      	ldr	r2, [pc, #188]	; (8007f9c <UART_SetConfig+0x2e0>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d125      	bne.n	8007f2e <UART_SetConfig+0x272>
 8007ee2:	4b29      	ldr	r3, [pc, #164]	; (8007f88 <UART_SetConfig+0x2cc>)
 8007ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ef0:	d017      	beq.n	8007f22 <UART_SetConfig+0x266>
 8007ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ef6:	d817      	bhi.n	8007f28 <UART_SetConfig+0x26c>
 8007ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007efc:	d00b      	beq.n	8007f16 <UART_SetConfig+0x25a>
 8007efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f02:	d811      	bhi.n	8007f28 <UART_SetConfig+0x26c>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <UART_SetConfig+0x254>
 8007f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f0c:	d006      	beq.n	8007f1c <UART_SetConfig+0x260>
 8007f0e:	e00b      	b.n	8007f28 <UART_SetConfig+0x26c>
 8007f10:	2301      	movs	r3, #1
 8007f12:	77fb      	strb	r3, [r7, #31]
 8007f14:	e076      	b.n	8008004 <UART_SetConfig+0x348>
 8007f16:	2302      	movs	r3, #2
 8007f18:	77fb      	strb	r3, [r7, #31]
 8007f1a:	e073      	b.n	8008004 <UART_SetConfig+0x348>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	77fb      	strb	r3, [r7, #31]
 8007f20:	e070      	b.n	8008004 <UART_SetConfig+0x348>
 8007f22:	2308      	movs	r3, #8
 8007f24:	77fb      	strb	r3, [r7, #31]
 8007f26:	e06d      	b.n	8008004 <UART_SetConfig+0x348>
 8007f28:	2310      	movs	r3, #16
 8007f2a:	77fb      	strb	r3, [r7, #31]
 8007f2c:	e06a      	b.n	8008004 <UART_SetConfig+0x348>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a1b      	ldr	r2, [pc, #108]	; (8007fa0 <UART_SetConfig+0x2e4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d138      	bne.n	8007faa <UART_SetConfig+0x2ee>
 8007f38:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <UART_SetConfig+0x2cc>)
 8007f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f46:	d017      	beq.n	8007f78 <UART_SetConfig+0x2bc>
 8007f48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f4c:	d82a      	bhi.n	8007fa4 <UART_SetConfig+0x2e8>
 8007f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f52:	d00b      	beq.n	8007f6c <UART_SetConfig+0x2b0>
 8007f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f58:	d824      	bhi.n	8007fa4 <UART_SetConfig+0x2e8>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <UART_SetConfig+0x2aa>
 8007f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f62:	d006      	beq.n	8007f72 <UART_SetConfig+0x2b6>
 8007f64:	e01e      	b.n	8007fa4 <UART_SetConfig+0x2e8>
 8007f66:	2300      	movs	r3, #0
 8007f68:	77fb      	strb	r3, [r7, #31]
 8007f6a:	e04b      	b.n	8008004 <UART_SetConfig+0x348>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	77fb      	strb	r3, [r7, #31]
 8007f70:	e048      	b.n	8008004 <UART_SetConfig+0x348>
 8007f72:	2304      	movs	r3, #4
 8007f74:	77fb      	strb	r3, [r7, #31]
 8007f76:	e045      	b.n	8008004 <UART_SetConfig+0x348>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	77fb      	strb	r3, [r7, #31]
 8007f7c:	e042      	b.n	8008004 <UART_SetConfig+0x348>
 8007f7e:	bf00      	nop
 8007f80:	efff69f3 	.word	0xefff69f3
 8007f84:	40011000 	.word	0x40011000
 8007f88:	40023800 	.word	0x40023800
 8007f8c:	40004400 	.word	0x40004400
 8007f90:	40004800 	.word	0x40004800
 8007f94:	40004c00 	.word	0x40004c00
 8007f98:	40005000 	.word	0x40005000
 8007f9c:	40011400 	.word	0x40011400
 8007fa0:	40007800 	.word	0x40007800
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	77fb      	strb	r3, [r7, #31]
 8007fa8:	e02c      	b.n	8008004 <UART_SetConfig+0x348>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a72      	ldr	r2, [pc, #456]	; (8008178 <UART_SetConfig+0x4bc>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d125      	bne.n	8008000 <UART_SetConfig+0x344>
 8007fb4:	4b71      	ldr	r3, [pc, #452]	; (800817c <UART_SetConfig+0x4c0>)
 8007fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fc2:	d017      	beq.n	8007ff4 <UART_SetConfig+0x338>
 8007fc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fc8:	d817      	bhi.n	8007ffa <UART_SetConfig+0x33e>
 8007fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fce:	d00b      	beq.n	8007fe8 <UART_SetConfig+0x32c>
 8007fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd4:	d811      	bhi.n	8007ffa <UART_SetConfig+0x33e>
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <UART_SetConfig+0x326>
 8007fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fde:	d006      	beq.n	8007fee <UART_SetConfig+0x332>
 8007fe0:	e00b      	b.n	8007ffa <UART_SetConfig+0x33e>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	77fb      	strb	r3, [r7, #31]
 8007fe6:	e00d      	b.n	8008004 <UART_SetConfig+0x348>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e00a      	b.n	8008004 <UART_SetConfig+0x348>
 8007fee:	2304      	movs	r3, #4
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e007      	b.n	8008004 <UART_SetConfig+0x348>
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e004      	b.n	8008004 <UART_SetConfig+0x348>
 8007ffa:	2310      	movs	r3, #16
 8007ffc:	77fb      	strb	r3, [r7, #31]
 8007ffe:	e001      	b.n	8008004 <UART_SetConfig+0x348>
 8008000:	2310      	movs	r3, #16
 8008002:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800800c:	d15b      	bne.n	80080c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800800e:	7ffb      	ldrb	r3, [r7, #31]
 8008010:	2b08      	cmp	r3, #8
 8008012:	d828      	bhi.n	8008066 <UART_SetConfig+0x3aa>
 8008014:	a201      	add	r2, pc, #4	; (adr r2, 800801c <UART_SetConfig+0x360>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	08008041 	.word	0x08008041
 8008020:	08008049 	.word	0x08008049
 8008024:	08008051 	.word	0x08008051
 8008028:	08008067 	.word	0x08008067
 800802c:	08008057 	.word	0x08008057
 8008030:	08008067 	.word	0x08008067
 8008034:	08008067 	.word	0x08008067
 8008038:	08008067 	.word	0x08008067
 800803c:	0800805f 	.word	0x0800805f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008040:	f7fd fff2 	bl	8006028 <HAL_RCC_GetPCLK1Freq>
 8008044:	61b8      	str	r0, [r7, #24]
        break;
 8008046:	e013      	b.n	8008070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008048:	f7fe f802 	bl	8006050 <HAL_RCC_GetPCLK2Freq>
 800804c:	61b8      	str	r0, [r7, #24]
        break;
 800804e:	e00f      	b.n	8008070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008050:	4b4b      	ldr	r3, [pc, #300]	; (8008180 <UART_SetConfig+0x4c4>)
 8008052:	61bb      	str	r3, [r7, #24]
        break;
 8008054:	e00c      	b.n	8008070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008056:	f7fd fed5 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 800805a:	61b8      	str	r0, [r7, #24]
        break;
 800805c:	e008      	b.n	8008070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008062:	61bb      	str	r3, [r7, #24]
        break;
 8008064:	e004      	b.n	8008070 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	77bb      	strb	r3, [r7, #30]
        break;
 800806e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d074      	beq.n	8008160 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	005a      	lsls	r2, r3, #1
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	085b      	lsrs	r3, r3, #1
 8008080:	441a      	add	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	fbb2 f3f3 	udiv	r3, r2, r3
 800808a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2b0f      	cmp	r3, #15
 8008090:	d916      	bls.n	80080c0 <UART_SetConfig+0x404>
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008098:	d212      	bcs.n	80080c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f023 030f 	bic.w	r3, r3, #15
 80080a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	085b      	lsrs	r3, r3, #1
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	89fb      	ldrh	r3, [r7, #14]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	89fa      	ldrh	r2, [r7, #14]
 80080bc:	60da      	str	r2, [r3, #12]
 80080be:	e04f      	b.n	8008160 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	77bb      	strb	r3, [r7, #30]
 80080c4:	e04c      	b.n	8008160 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080c6:	7ffb      	ldrb	r3, [r7, #31]
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	d828      	bhi.n	800811e <UART_SetConfig+0x462>
 80080cc:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <UART_SetConfig+0x418>)
 80080ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d2:	bf00      	nop
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008109 	.word	0x08008109
 80080e0:	0800811f 	.word	0x0800811f
 80080e4:	0800810f 	.word	0x0800810f
 80080e8:	0800811f 	.word	0x0800811f
 80080ec:	0800811f 	.word	0x0800811f
 80080f0:	0800811f 	.word	0x0800811f
 80080f4:	08008117 	.word	0x08008117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080f8:	f7fd ff96 	bl	8006028 <HAL_RCC_GetPCLK1Freq>
 80080fc:	61b8      	str	r0, [r7, #24]
        break;
 80080fe:	e013      	b.n	8008128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008100:	f7fd ffa6 	bl	8006050 <HAL_RCC_GetPCLK2Freq>
 8008104:	61b8      	str	r0, [r7, #24]
        break;
 8008106:	e00f      	b.n	8008128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008108:	4b1d      	ldr	r3, [pc, #116]	; (8008180 <UART_SetConfig+0x4c4>)
 800810a:	61bb      	str	r3, [r7, #24]
        break;
 800810c:	e00c      	b.n	8008128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800810e:	f7fd fe79 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8008112:	61b8      	str	r0, [r7, #24]
        break;
 8008114:	e008      	b.n	8008128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800811a:	61bb      	str	r3, [r7, #24]
        break;
 800811c:	e004      	b.n	8008128 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	77bb      	strb	r3, [r7, #30]
        break;
 8008126:	bf00      	nop
    }

    if (pclk != 0U)
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d018      	beq.n	8008160 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	085a      	lsrs	r2, r3, #1
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	441a      	add	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008140:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2b0f      	cmp	r3, #15
 8008146:	d909      	bls.n	800815c <UART_SetConfig+0x4a0>
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800814e:	d205      	bcs.n	800815c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60da      	str	r2, [r3, #12]
 800815a:	e001      	b.n	8008160 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800816c:	7fbb      	ldrb	r3, [r7, #30]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3720      	adds	r7, #32
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	40007c00 	.word	0x40007c00
 800817c:	40023800 	.word	0x40023800
 8008180:	00f42400 	.word	0x00f42400

08008184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01a      	beq.n	800829a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008282:	d10a      	bne.n	800829a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082d8:	f7f9 fcae 	bl	8001c38 <HAL_GetTick>
 80082dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d10e      	bne.n	800830a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f831 	bl	8008362 <UART_WaitOnFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e027      	b.n	800835a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b04      	cmp	r3, #4
 8008316:	d10e      	bne.n	8008336 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f81b 	bl	8008362 <UART_WaitOnFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e011      	b.n	800835a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b09c      	sub	sp, #112	; 0x70
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	603b      	str	r3, [r7, #0]
 800836e:	4613      	mov	r3, r2
 8008370:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008372:	e0a7      	b.n	80084c4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800837a:	f000 80a3 	beq.w	80084c4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800837e:	f7f9 fc5b 	bl	8001c38 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800838a:	429a      	cmp	r2, r3
 800838c:	d302      	bcc.n	8008394 <UART_WaitOnFlagUntilTimeout+0x32>
 800838e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008390:	2b00      	cmp	r3, #0
 8008392:	d13f      	bne.n	8008414 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083a8:	667b      	str	r3, [r7, #100]	; 0x64
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e6      	bne.n	8008394 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3308      	adds	r3, #8
 80083cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	f023 0301 	bic.w	r3, r3, #1
 80083dc:	663b      	str	r3, [r7, #96]	; 0x60
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80083e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e5      	bne.n	80083c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2220      	movs	r2, #32
 80083fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2220      	movs	r2, #32
 8008404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e068      	b.n	80084e6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0304 	and.w	r3, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d050      	beq.n	80084c4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800842c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008430:	d148      	bne.n	80084c4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800843a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008450:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845a:	637b      	str	r3, [r7, #52]	; 0x34
 800845c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e6      	bne.n	800843c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	613b      	str	r3, [r7, #16]
   return(result);
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	66bb      	str	r3, [r7, #104]	; 0x68
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3308      	adds	r3, #8
 800848c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800848e:	623a      	str	r2, [r7, #32]
 8008490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	69f9      	ldr	r1, [r7, #28]
 8008494:	6a3a      	ldr	r2, [r7, #32]
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	61bb      	str	r3, [r7, #24]
   return(result);
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e5      	bne.n	800846e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e010      	b.n	80084e6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69da      	ldr	r2, [r3, #28]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	4013      	ands	r3, r2
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	bf0c      	ite	eq
 80084d4:	2301      	moveq	r3, #1
 80084d6:	2300      	movne	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	429a      	cmp	r2, r3
 80084e0:	f43f af48 	beq.w	8008374 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3770      	adds	r7, #112	; 0x70
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80084f0:	b084      	sub	sp, #16
 80084f2:	b480      	push	{r7}
 80084f4:	b085      	sub	sp, #20
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	f107 001c 	add.w	r0, r7, #28
 80084fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008506:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008508:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800850a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800850e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008512:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008516:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800851a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	4b07      	ldr	r3, [pc, #28]	; (8008544 <SDMMC_Init+0x54>)
 8008528:	4013      	ands	r3, r2
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	b004      	add	sp, #16
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	ffff8100 	.word	0xffff8100

08008548 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2203      	movs	r2, #3
 8008590:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0303 	and.w	r3, r3, #3
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80085e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80085e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <SDMMC_SendCommand+0x50>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	fffff000 	.word	0xfffff000

08008610 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	b2db      	uxtb	r3, r3
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800862a:	b480      	push	{r7}
 800862c:	b085      	sub	sp, #20
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3314      	adds	r3, #20
 8008638:	461a      	mov	r2, r3
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	4413      	add	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
}  
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008676:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800867c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008682:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	431a      	orrs	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800869a:	2300      	movs	r3, #0

}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80086b6:	2310      	movs	r3, #16
 80086b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086ba:	2340      	movs	r3, #64	; 0x40
 80086bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086be:	2300      	movs	r3, #0
 80086c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086c8:	f107 0308 	add.w	r3, r7, #8
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff ff74 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80086d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d8:	2110      	movs	r1, #16
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f9d6 	bl	8008a8c <SDMMC_GetCmdResp1>
 80086e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086e2:	69fb      	ldr	r3, [r7, #28]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80086fa:	2311      	movs	r3, #17
 80086fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086fe:	2340      	movs	r3, #64	; 0x40
 8008700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800870a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800870c:	f107 0308 	add.w	r3, r7, #8
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff ff52 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008718:	f241 3288 	movw	r2, #5000	; 0x1388
 800871c:	2111      	movs	r1, #17
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f9b4 	bl	8008a8c <SDMMC_GetCmdResp1>
 8008724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008726:	69fb      	ldr	r3, [r7, #28]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3720      	adds	r7, #32
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800873e:	2312      	movs	r3, #18
 8008740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008742:	2340      	movs	r3, #64	; 0x40
 8008744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008746:	2300      	movs	r3, #0
 8008748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800874a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800874e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008750:	f107 0308 	add.w	r3, r7, #8
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff ff30 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800875c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008760:	2112      	movs	r1, #18
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f992 	bl	8008a8c <SDMMC_GetCmdResp1>
 8008768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800876a:	69fb      	ldr	r3, [r7, #28]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3720      	adds	r7, #32
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008782:	2318      	movs	r3, #24
 8008784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008786:	2340      	movs	r3, #64	; 0x40
 8008788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800878e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008794:	f107 0308 	add.w	r3, r7, #8
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7ff ff0e 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80087a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a4:	2118      	movs	r1, #24
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f970 	bl	8008a8c <SDMMC_GetCmdResp1>
 80087ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087ae:	69fb      	ldr	r3, [r7, #28]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3720      	adds	r7, #32
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80087c6:	2319      	movs	r3, #25
 80087c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087ca:	2340      	movs	r3, #64	; 0x40
 80087cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087d8:	f107 0308 	add.w	r3, r7, #8
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff feec 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80087e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e8:	2119      	movs	r1, #25
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f94e 	bl	8008a8c <SDMMC_GetCmdResp1>
 80087f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087f2:	69fb      	ldr	r3, [r7, #28]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008808:	230c      	movs	r3, #12
 800880a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800880c:	2340      	movs	r3, #64	; 0x40
 800880e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008818:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800881a:	f107 0308 	add.w	r3, r7, #8
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff fecb 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008826:	4a05      	ldr	r2, [pc, #20]	; (800883c <SDMMC_CmdStopTransfer+0x40>)
 8008828:	210c      	movs	r1, #12
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f92e 	bl	8008a8c <SDMMC_GetCmdResp1>
 8008830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008832:	69fb      	ldr	r3, [r7, #28]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3720      	adds	r7, #32
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	05f5e100 	.word	0x05f5e100

08008840 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	; 0x28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008850:	2307      	movs	r3, #7
 8008852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008854:	2340      	movs	r3, #64	; 0x40
 8008856:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008858:	2300      	movs	r3, #0
 800885a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800885c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008860:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008862:	f107 0310 	add.w	r3, r7, #16
 8008866:	4619      	mov	r1, r3
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7ff fea7 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800886e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008872:	2107      	movs	r1, #7
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f909 	bl	8008a8c <SDMMC_GetCmdResp1>
 800887a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800887e:	4618      	mov	r0, r3
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b088      	sub	sp, #32
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008896:	2300      	movs	r3, #0
 8008898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800889e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088a4:	f107 0308 	add.w	r3, r7, #8
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fe86 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fb23 	bl	8008efc <SDMMC_GetCmdError>
 80088b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088b8:	69fb      	ldr	r3, [r7, #28]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b088      	sub	sp, #32
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80088ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80088ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80088d0:	2308      	movs	r3, #8
 80088d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088d4:	2340      	movs	r3, #64	; 0x40
 80088d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088d8:	2300      	movs	r3, #0
 80088da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088e2:	f107 0308 	add.w	r3, r7, #8
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff fe67 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fab6 	bl	8008e60 <SDMMC_GetCmdResp7>
 80088f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088f6:	69fb      	ldr	r3, [r7, #28]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3720      	adds	r7, #32
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800890e:	2337      	movs	r3, #55	; 0x37
 8008910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008912:	2340      	movs	r3, #64	; 0x40
 8008914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800891a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008920:	f107 0308 	add.w	r3, r7, #8
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7ff fe48 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800892c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008930:	2137      	movs	r1, #55	; 0x37
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f8aa 	bl	8008a8c <SDMMC_GetCmdResp1>
 8008938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800893a:	69fb      	ldr	r3, [r7, #28]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3720      	adds	r7, #32
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <SDMMC_CmdAppOperCommand+0x44>)
 8008952:	4313      	orrs	r3, r2
 8008954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008956:	2329      	movs	r3, #41	; 0x29
 8008958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800895a:	2340      	movs	r3, #64	; 0x40
 800895c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008968:	f107 0308 	add.w	r3, r7, #8
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fe24 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f9bf 	bl	8008cf8 <SDMMC_GetCmdResp3>
 800897a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800897c:	69fb      	ldr	r3, [r7, #28]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3720      	adds	r7, #32
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	80100000 	.word	0x80100000

0800898c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008998:	2302      	movs	r3, #2
 800899a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800899c:	23c0      	movs	r3, #192	; 0xc0
 800899e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089a0:	2300      	movs	r3, #0
 80089a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089aa:	f107 0308 	add.w	r3, r7, #8
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff fe03 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f956 	bl	8008c68 <SDMMC_GetCmdResp2>
 80089bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089be:	69fb      	ldr	r3, [r7, #28]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3720      	adds	r7, #32
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80089d6:	2309      	movs	r3, #9
 80089d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80089da:	23c0      	movs	r3, #192	; 0xc0
 80089dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089e8:	f107 0308 	add.w	r3, r7, #8
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff fde4 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f937 	bl	8008c68 <SDMMC_GetCmdResp2>
 80089fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089fc:	69fb      	ldr	r3, [r7, #28]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3720      	adds	r7, #32
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b088      	sub	sp, #32
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008a14:	2303      	movs	r3, #3
 8008a16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a18:	2340      	movs	r3, #64	; 0x40
 8008a1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a26:	f107 0308 	add.w	r3, r7, #8
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff fdc5 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	2103      	movs	r1, #3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f99c 	bl	8008d74 <SDMMC_GetCmdResp6>
 8008a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a3e:	69fb      	ldr	r3, [r7, #28]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3720      	adds	r7, #32
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008a56:	230d      	movs	r3, #13
 8008a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a5a:	2340      	movs	r3, #64	; 0x40
 8008a5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a68:	f107 0308 	add.w	r3, r7, #8
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fda4 	bl	80085bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a78:	210d      	movs	r1, #13
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f806 	bl	8008a8c <SDMMC_GetCmdResp1>
 8008a80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a82:	69fb      	ldr	r3, [r7, #28]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3720      	adds	r7, #32
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	460b      	mov	r3, r1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008a9a:	4b70      	ldr	r3, [pc, #448]	; (8008c5c <SDMMC_GetCmdResp1+0x1d0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a70      	ldr	r2, [pc, #448]	; (8008c60 <SDMMC_GetCmdResp1+0x1d4>)
 8008aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa4:	0a5a      	lsrs	r2, r3, #9
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	fb02 f303 	mul.w	r3, r2, r3
 8008aac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	1e5a      	subs	r2, r3, #1
 8008ab2:	61fa      	str	r2, [r7, #28]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ab8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008abc:	e0c9      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0ef      	beq.n	8008aae <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1ea      	bne.n	8008aae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2204      	movs	r2, #4
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008aea:	2304      	movs	r3, #4
 8008aec:	e0b1      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d004      	beq.n	8008b04 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e0a6      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	22c5      	movs	r2, #197	; 0xc5
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff fd80 	bl	8008610 <SDMMC_GetCommandResponse>
 8008b10:	4603      	mov	r3, r0
 8008b12:	461a      	mov	r2, r3
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d001      	beq.n	8008b1e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e099      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008b1e:	2100      	movs	r1, #0
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff fd82 	bl	800862a <SDMMC_GetResponse>
 8008b26:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	4b4e      	ldr	r3, [pc, #312]	; (8008c64 <SDMMC_GetCmdResp1+0x1d8>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008b32:	2300      	movs	r3, #0
 8008b34:	e08d      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da02      	bge.n	8008b42 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b40:	e087      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008b4c:	2340      	movs	r3, #64	; 0x40
 8008b4e:	e080      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008b5a:	2380      	movs	r3, #128	; 0x80
 8008b5c:	e079      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b6c:	e071      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b7c:	e069      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b8c:	e061      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b9c:	e059      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bac:	e051      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bbc:	e049      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008bcc:	e041      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bdc:	e039      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bec:	e031      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008bf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008bfc:	e029      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008c08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c0c:	e021      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008c18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c1c:	e019      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008c28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008c2c:	e011      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008c38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c3c:	e009      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f003 0308 	and.w	r3, r3, #8
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008c48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008c4c:	e001      	b.n	8008c52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000004 	.word	0x20000004
 8008c60:	10624dd3 	.word	0x10624dd3
 8008c64:	fdffe008 	.word	0xfdffe008

08008c68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c70:	4b1f      	ldr	r3, [pc, #124]	; (8008cf0 <SDMMC_GetCmdResp2+0x88>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a1f      	ldr	r2, [pc, #124]	; (8008cf4 <SDMMC_GetCmdResp2+0x8c>)
 8008c76:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7a:	0a5b      	lsrs	r3, r3, #9
 8008c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c80:	fb02 f303 	mul.w	r3, r2, r3
 8008c84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	1e5a      	subs	r2, r3, #1
 8008c8a:	60fa      	str	r2, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d102      	bne.n	8008c96 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c94:	e026      	b.n	8008ce4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0ef      	beq.n	8008c86 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1ea      	bne.n	8008c86 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d004      	beq.n	8008cc6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2204      	movs	r2, #4
 8008cc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cc2:	2304      	movs	r3, #4
 8008cc4:	e00e      	b.n	8008ce4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e003      	b.n	8008ce4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	22c5      	movs	r2, #197	; 0xc5
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20000004 	.word	0x20000004
 8008cf4:	10624dd3 	.word	0x10624dd3

08008cf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d00:	4b1a      	ldr	r3, [pc, #104]	; (8008d6c <SDMMC_GetCmdResp3+0x74>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a1a      	ldr	r2, [pc, #104]	; (8008d70 <SDMMC_GetCmdResp3+0x78>)
 8008d06:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0a:	0a5b      	lsrs	r3, r3, #9
 8008d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d10:	fb02 f303 	mul.w	r3, r2, r3
 8008d14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	1e5a      	subs	r2, r3, #1
 8008d1a:	60fa      	str	r2, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d102      	bne.n	8008d26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d24:	e01b      	b.n	8008d5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0ef      	beq.n	8008d16 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1ea      	bne.n	8008d16 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d004      	beq.n	8008d56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2204      	movs	r2, #4
 8008d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d52:	2304      	movs	r3, #4
 8008d54:	e003      	b.n	8008d5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	22c5      	movs	r2, #197	; 0xc5
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	20000004 	.word	0x20000004
 8008d70:	10624dd3 	.word	0x10624dd3

08008d74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d82:	4b35      	ldr	r3, [pc, #212]	; (8008e58 <SDMMC_GetCmdResp6+0xe4>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a35      	ldr	r2, [pc, #212]	; (8008e5c <SDMMC_GetCmdResp6+0xe8>)
 8008d88:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8c:	0a5b      	lsrs	r3, r3, #9
 8008d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d92:	fb02 f303 	mul.w	r3, r2, r3
 8008d96:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	1e5a      	subs	r2, r3, #1
 8008d9c:	61fa      	str	r2, [r7, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d102      	bne.n	8008da8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008da2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008da6:	e052      	b.n	8008e4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0ef      	beq.n	8008d98 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1ea      	bne.n	8008d98 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc6:	f003 0304 	and.w	r3, r3, #4
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2204      	movs	r2, #4
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008dd4:	2304      	movs	r3, #4
 8008dd6:	e03a      	b.n	8008e4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d004      	beq.n	8008dee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e02f      	b.n	8008e4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff fc0e 	bl	8008610 <SDMMC_GetCommandResponse>
 8008df4:	4603      	mov	r3, r0
 8008df6:	461a      	mov	r2, r3
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d001      	beq.n	8008e02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e025      	b.n	8008e4e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	22c5      	movs	r2, #197	; 0xc5
 8008e06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008e08:	2100      	movs	r1, #0
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7ff fc0d 	bl	800862a <SDMMC_GetResponse>
 8008e10:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d106      	bne.n	8008e2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008e26:	2300      	movs	r3, #0
 8008e28:	e011      	b.n	8008e4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e38:	e009      	b.n	8008e4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e48:	e001      	b.n	8008e4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3720      	adds	r7, #32
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000004 	.word	0x20000004
 8008e5c:	10624dd3 	.word	0x10624dd3

08008e60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e68:	4b22      	ldr	r3, [pc, #136]	; (8008ef4 <SDMMC_GetCmdResp7+0x94>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a22      	ldr	r2, [pc, #136]	; (8008ef8 <SDMMC_GetCmdResp7+0x98>)
 8008e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e72:	0a5b      	lsrs	r3, r3, #9
 8008e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e78:	fb02 f303 	mul.w	r3, r2, r3
 8008e7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1e5a      	subs	r2, r3, #1
 8008e82:	60fa      	str	r2, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e8c:	e02c      	b.n	8008ee8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0ef      	beq.n	8008e7e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1ea      	bne.n	8008e7e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d004      	beq.n	8008ebe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2204      	movs	r2, #4
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008eba:	2304      	movs	r3, #4
 8008ebc:	e014      	b.n	8008ee8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d004      	beq.n	8008ed4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e009      	b.n	8008ee8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2240      	movs	r2, #64	; 0x40
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008ee6:	2300      	movs	r3, #0
  
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	20000004 	.word	0x20000004
 8008ef8:	10624dd3 	.word	0x10624dd3

08008efc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f04:	4b11      	ldr	r3, [pc, #68]	; (8008f4c <SDMMC_GetCmdError+0x50>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a11      	ldr	r2, [pc, #68]	; (8008f50 <SDMMC_GetCmdError+0x54>)
 8008f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0e:	0a5b      	lsrs	r3, r3, #9
 8008f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f14:	fb02 f303 	mul.w	r3, r2, r3
 8008f18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	1e5a      	subs	r2, r3, #1
 8008f1e:	60fa      	str	r2, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f28:	e009      	b.n	8008f3e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0f1      	beq.n	8008f1a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	22c5      	movs	r2, #197	; 0xc5
 8008f3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	20000004 	.word	0x20000004
 8008f50:	10624dd3 	.word	0x10624dd3

08008f54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f54:	b084      	sub	sp, #16
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	f107 001c 	add.w	r0, r7, #28
 8008f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d120      	bne.n	8008fae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	4b20      	ldr	r3, [pc, #128]	; (8009000 <USB_CoreInit+0xac>)
 8008f7e:	4013      	ands	r3, r2
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d105      	bne.n	8008fa2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f001 fbee 	bl	800a784 <USB_CoreReset>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]
 8008fac:	e010      	b.n	8008fd0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 fbe2 	bl	800a784 <USB_CoreReset>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d10b      	bne.n	8008fee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f043 0206 	orr.w	r2, r3, #6
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f043 0220 	orr.w	r2, r3, #32
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ffa:	b004      	add	sp, #16
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	ffbdffbf 	.word	0xffbdffbf

08009004 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d165      	bne.n	80090e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	4a41      	ldr	r2, [pc, #260]	; (8009120 <USB_SetTurnaroundTime+0x11c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d906      	bls.n	800902e <USB_SetTurnaroundTime+0x2a>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4a40      	ldr	r2, [pc, #256]	; (8009124 <USB_SetTurnaroundTime+0x120>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d202      	bcs.n	800902e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009028:	230f      	movs	r3, #15
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	e062      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	4a3c      	ldr	r2, [pc, #240]	; (8009124 <USB_SetTurnaroundTime+0x120>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d306      	bcc.n	8009044 <USB_SetTurnaroundTime+0x40>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	4a3b      	ldr	r2, [pc, #236]	; (8009128 <USB_SetTurnaroundTime+0x124>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d202      	bcs.n	8009044 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800903e:	230e      	movs	r3, #14
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	e057      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	4a38      	ldr	r2, [pc, #224]	; (8009128 <USB_SetTurnaroundTime+0x124>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d306      	bcc.n	800905a <USB_SetTurnaroundTime+0x56>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	4a37      	ldr	r2, [pc, #220]	; (800912c <USB_SetTurnaroundTime+0x128>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d202      	bcs.n	800905a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009054:	230d      	movs	r3, #13
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	e04c      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	4a33      	ldr	r2, [pc, #204]	; (800912c <USB_SetTurnaroundTime+0x128>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d306      	bcc.n	8009070 <USB_SetTurnaroundTime+0x6c>
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	4a32      	ldr	r2, [pc, #200]	; (8009130 <USB_SetTurnaroundTime+0x12c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d802      	bhi.n	8009070 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800906a:	230c      	movs	r3, #12
 800906c:	617b      	str	r3, [r7, #20]
 800906e:	e041      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	4a2f      	ldr	r2, [pc, #188]	; (8009130 <USB_SetTurnaroundTime+0x12c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d906      	bls.n	8009086 <USB_SetTurnaroundTime+0x82>
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4a2e      	ldr	r2, [pc, #184]	; (8009134 <USB_SetTurnaroundTime+0x130>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d802      	bhi.n	8009086 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009080:	230b      	movs	r3, #11
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	e036      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	4a2a      	ldr	r2, [pc, #168]	; (8009134 <USB_SetTurnaroundTime+0x130>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d906      	bls.n	800909c <USB_SetTurnaroundTime+0x98>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	4a29      	ldr	r2, [pc, #164]	; (8009138 <USB_SetTurnaroundTime+0x134>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d802      	bhi.n	800909c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009096:	230a      	movs	r3, #10
 8009098:	617b      	str	r3, [r7, #20]
 800909a:	e02b      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4a26      	ldr	r2, [pc, #152]	; (8009138 <USB_SetTurnaroundTime+0x134>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d906      	bls.n	80090b2 <USB_SetTurnaroundTime+0xae>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	4a25      	ldr	r2, [pc, #148]	; (800913c <USB_SetTurnaroundTime+0x138>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d202      	bcs.n	80090b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090ac:	2309      	movs	r3, #9
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	e020      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	4a21      	ldr	r2, [pc, #132]	; (800913c <USB_SetTurnaroundTime+0x138>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d306      	bcc.n	80090c8 <USB_SetTurnaroundTime+0xc4>
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4a20      	ldr	r2, [pc, #128]	; (8009140 <USB_SetTurnaroundTime+0x13c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d802      	bhi.n	80090c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80090c2:	2308      	movs	r3, #8
 80090c4:	617b      	str	r3, [r7, #20]
 80090c6:	e015      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	4a1d      	ldr	r2, [pc, #116]	; (8009140 <USB_SetTurnaroundTime+0x13c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d906      	bls.n	80090de <USB_SetTurnaroundTime+0xda>
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	4a1c      	ldr	r2, [pc, #112]	; (8009144 <USB_SetTurnaroundTime+0x140>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d202      	bcs.n	80090de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80090d8:	2307      	movs	r3, #7
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	e00a      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80090de:	2306      	movs	r3, #6
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	e007      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80090ea:	2309      	movs	r3, #9
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	e001      	b.n	80090f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80090f0:	2309      	movs	r3, #9
 80090f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	68da      	ldr	r2, [r3, #12]
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	029b      	lsls	r3, r3, #10
 8009108:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800910c:	431a      	orrs	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	371c      	adds	r7, #28
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	00d8acbf 	.word	0x00d8acbf
 8009124:	00e4e1c0 	.word	0x00e4e1c0
 8009128:	00f42400 	.word	0x00f42400
 800912c:	01067380 	.word	0x01067380
 8009130:	011a499f 	.word	0x011a499f
 8009134:	01312cff 	.word	0x01312cff
 8009138:	014ca43f 	.word	0x014ca43f
 800913c:	016e3600 	.word	0x016e3600
 8009140:	01a6ab1f 	.word	0x01a6ab1f
 8009144:	01e84800 	.word	0x01e84800

08009148 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f043 0201 	orr.w	r2, r3, #1
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f023 0201 	bic.w	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d115      	bne.n	80091da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091ba:	2001      	movs	r0, #1
 80091bc:	f7f8 fd48 	bl	8001c50 <HAL_Delay>
      ms++;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3301      	adds	r3, #1
 80091c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 fa4b 	bl	800a662 <USB_GetMode>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d01e      	beq.n	8009210 <USB_SetCurrentMode+0x84>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b31      	cmp	r3, #49	; 0x31
 80091d6:	d9f0      	bls.n	80091ba <USB_SetCurrentMode+0x2e>
 80091d8:	e01a      	b.n	8009210 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d115      	bne.n	800920c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091ec:	2001      	movs	r0, #1
 80091ee:	f7f8 fd2f 	bl	8001c50 <HAL_Delay>
      ms++;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3301      	adds	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 fa32 	bl	800a662 <USB_GetMode>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <USB_SetCurrentMode+0x84>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b31      	cmp	r3, #49	; 0x31
 8009208:	d9f0      	bls.n	80091ec <USB_SetCurrentMode+0x60>
 800920a:	e001      	b.n	8009210 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e005      	b.n	800921c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b32      	cmp	r3, #50	; 0x32
 8009214:	d101      	bne.n	800921a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e000      	b.n	800921c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009224:	b084      	sub	sp, #16
 8009226:	b580      	push	{r7, lr}
 8009228:	b086      	sub	sp, #24
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800923e:	2300      	movs	r3, #0
 8009240:	613b      	str	r3, [r7, #16]
 8009242:	e009      	b.n	8009258 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	3340      	adds	r3, #64	; 0x40
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	2200      	movs	r2, #0
 8009250:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	3301      	adds	r3, #1
 8009256:	613b      	str	r3, [r7, #16]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	2b0e      	cmp	r3, #14
 800925c:	d9f2      	bls.n	8009244 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800925e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009260:	2b00      	cmp	r3, #0
 8009262:	d11c      	bne.n	800929e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009272:	f043 0302 	orr.w	r3, r3, #2
 8009276:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	e005      	b.n	80092aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092b0:	461a      	mov	r2, r3
 80092b2:	2300      	movs	r3, #0
 80092b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092bc:	4619      	mov	r1, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c4:	461a      	mov	r2, r3
 80092c6:	680b      	ldr	r3, [r1, #0]
 80092c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d10c      	bne.n	80092ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d104      	bne.n	80092e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80092d6:	2100      	movs	r1, #0
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f965 	bl	80095a8 <USB_SetDevSpeed>
 80092de:	e008      	b.n	80092f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80092e0:	2101      	movs	r1, #1
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f960 	bl	80095a8 <USB_SetDevSpeed>
 80092e8:	e003      	b.n	80092f2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80092ea:	2103      	movs	r1, #3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f95b 	bl	80095a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80092f2:	2110      	movs	r1, #16
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f8f3 	bl	80094e0 <USB_FlushTxFifo>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f91f 	bl	8009548 <USB_FlushRxFifo>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931a:	461a      	mov	r2, r3
 800931c:	2300      	movs	r3, #0
 800931e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009326:	461a      	mov	r2, r3
 8009328:	2300      	movs	r3, #0
 800932a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009332:	461a      	mov	r2, r3
 8009334:	2300      	movs	r3, #0
 8009336:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009338:	2300      	movs	r3, #0
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	e043      	b.n	80093c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009354:	d118      	bne.n	8009388 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009368:	461a      	mov	r2, r3
 800936a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	e013      	b.n	800939a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4413      	add	r3, r2
 800937a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937e:	461a      	mov	r2, r3
 8009380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	e008      	b.n	800939a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009394:	461a      	mov	r2, r3
 8009396:	2300      	movs	r3, #0
 8009398:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a6:	461a      	mov	r2, r3
 80093a8:	2300      	movs	r3, #0
 80093aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b8:	461a      	mov	r2, r3
 80093ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	3301      	adds	r3, #1
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d3b7      	bcc.n	800933e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093ce:	2300      	movs	r3, #0
 80093d0:	613b      	str	r3, [r7, #16]
 80093d2:	e043      	b.n	800945c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093ea:	d118      	bne.n	800941e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093fe:	461a      	mov	r2, r3
 8009400:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	e013      	b.n	8009430 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009414:	461a      	mov	r2, r3
 8009416:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	e008      	b.n	8009430 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942a:	461a      	mov	r2, r3
 800942c:	2300      	movs	r3, #0
 800942e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943c:	461a      	mov	r2, r3
 800943e:	2300      	movs	r3, #0
 8009440:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944e:	461a      	mov	r2, r3
 8009450:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009454:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	3301      	adds	r3, #1
 800945a:	613b      	str	r3, [r7, #16]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	429a      	cmp	r2, r3
 8009462:	d3b7      	bcc.n	80093d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009476:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009484:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2b00      	cmp	r3, #0
 800948a:	d105      	bne.n	8009498 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	f043 0210 	orr.w	r2, r3, #16
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <USB_DevInit+0x2b4>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f043 0208 	orr.w	r2, r3, #8
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d105      	bne.n	80094c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	699a      	ldr	r2, [r3, #24]
 80094c0:	4b06      	ldr	r3, [pc, #24]	; (80094dc <USB_DevInit+0x2b8>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3718      	adds	r7, #24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094d4:	b004      	add	sp, #16
 80094d6:	4770      	bx	lr
 80094d8:	803c3800 	.word	0x803c3800
 80094dc:	40000004 	.word	0x40000004

080094e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3301      	adds	r3, #1
 80094f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4a13      	ldr	r2, [pc, #76]	; (8009544 <USB_FlushTxFifo+0x64>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d901      	bls.n	8009500 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e01b      	b.n	8009538 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	daf2      	bge.n	80094ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	019b      	lsls	r3, r3, #6
 8009510:	f043 0220 	orr.w	r2, r3, #32
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3301      	adds	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4a08      	ldr	r2, [pc, #32]	; (8009544 <USB_FlushTxFifo+0x64>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d901      	bls.n	800952a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e006      	b.n	8009538 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b20      	cmp	r3, #32
 8009534:	d0f0      	beq.n	8009518 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	00030d40 	.word	0x00030d40

08009548 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4a11      	ldr	r2, [pc, #68]	; (80095a4 <USB_FlushRxFifo+0x5c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d901      	bls.n	8009566 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e018      	b.n	8009598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	daf2      	bge.n	8009554 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2210      	movs	r2, #16
 8009576:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4a08      	ldr	r2, [pc, #32]	; (80095a4 <USB_FlushRxFifo+0x5c>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d901      	bls.n	800958a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e006      	b.n	8009598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0310 	and.w	r3, r3, #16
 8009592:	2b10      	cmp	r3, #16
 8009594:	d0f0      	beq.n	8009578 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	00030d40 	.word	0x00030d40

080095a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	68f9      	ldr	r1, [r7, #12]
 80095c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095c8:	4313      	orrs	r3, r2
 80095ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80095da:	b480      	push	{r7}
 80095dc:	b087      	sub	sp, #28
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f003 0306 	and.w	r3, r3, #6
 80095f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d102      	bne.n	8009600 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80095fa:	2300      	movs	r3, #0
 80095fc:	75fb      	strb	r3, [r7, #23]
 80095fe:	e00a      	b.n	8009616 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b02      	cmp	r3, #2
 8009604:	d002      	beq.n	800960c <USB_GetDevSpeed+0x32>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b06      	cmp	r3, #6
 800960a:	d102      	bne.n	8009612 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800960c:	2302      	movs	r3, #2
 800960e:	75fb      	strb	r3, [r7, #23]
 8009610:	e001      	b.n	8009616 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009612:	230f      	movs	r3, #15
 8009614:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009616:	7dfb      	ldrb	r3, [r7, #23]
}
 8009618:	4618      	mov	r0, r3
 800961a:	371c      	adds	r7, #28
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	785b      	ldrb	r3, [r3, #1]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d139      	bne.n	80096b4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009646:	69da      	ldr	r2, [r3, #28]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	f003 030f 	and.w	r3, r3, #15
 8009650:	2101      	movs	r1, #1
 8009652:	fa01 f303 	lsl.w	r3, r1, r3
 8009656:	b29b      	uxth	r3, r3
 8009658:	68f9      	ldr	r1, [r7, #12]
 800965a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800965e:	4313      	orrs	r3, r2
 8009660:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4413      	add	r3, r2
 800966a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d153      	bne.n	8009720 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	791b      	ldrb	r3, [r3, #4]
 8009692:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009694:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	059b      	lsls	r3, r3, #22
 800969a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800969c:	431a      	orrs	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	0159      	lsls	r1, r3, #5
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	440b      	add	r3, r1
 80096a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096aa:	4619      	mov	r1, r3
 80096ac:	4b20      	ldr	r3, [pc, #128]	; (8009730 <USB_ActivateEndpoint+0x10c>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	600b      	str	r3, [r1, #0]
 80096b2:	e035      	b.n	8009720 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ba:	69da      	ldr	r2, [r3, #28]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	f003 030f 	and.w	r3, r3, #15
 80096c4:	2101      	movs	r1, #1
 80096c6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ca:	041b      	lsls	r3, r3, #16
 80096cc:	68f9      	ldr	r1, [r7, #12]
 80096ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096d2:	4313      	orrs	r3, r2
 80096d4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d119      	bne.n	8009720 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	791b      	ldrb	r3, [r3, #4]
 8009706:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009708:	430b      	orrs	r3, r1
 800970a:	431a      	orrs	r2, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	0159      	lsls	r1, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	440b      	add	r3, r1
 8009714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009718:	4619      	mov	r1, r3
 800971a:	4b05      	ldr	r3, [pc, #20]	; (8009730 <USB_ActivateEndpoint+0x10c>)
 800971c:	4313      	orrs	r3, r2
 800971e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	10008000 	.word	0x10008000

08009734 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d161      	bne.n	8009814 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009766:	d11f      	bne.n	80097a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	0151      	lsls	r1, r2, #5
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	440a      	add	r2, r1
 800977e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009786:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4413      	add	r3, r2
 8009790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	0151      	lsls	r1, r2, #5
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	440a      	add	r2, r1
 800979e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	f003 030f 	and.w	r3, r3, #15
 80097b8:	2101      	movs	r1, #1
 80097ba:	fa01 f303 	lsl.w	r3, r1, r3
 80097be:	b29b      	uxth	r3, r3
 80097c0:	43db      	mvns	r3, r3
 80097c2:	68f9      	ldr	r1, [r7, #12]
 80097c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097c8:	4013      	ands	r3, r2
 80097ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	69da      	ldr	r2, [r3, #28]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 030f 	and.w	r3, r3, #15
 80097dc:	2101      	movs	r1, #1
 80097de:	fa01 f303 	lsl.w	r3, r1, r3
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	43db      	mvns	r3, r3
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097ec:	4013      	ands	r3, r2
 80097ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	0159      	lsls	r1, r3, #5
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	440b      	add	r3, r1
 8009806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980a:	4619      	mov	r1, r3
 800980c:	4b35      	ldr	r3, [pc, #212]	; (80098e4 <USB_DeactivateEndpoint+0x1b0>)
 800980e:	4013      	ands	r3, r2
 8009810:	600b      	str	r3, [r1, #0]
 8009812:	e060      	b.n	80098d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800982a:	d11f      	bne.n	800986c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	0151      	lsls	r1, r2, #5
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	440a      	add	r2, r1
 8009842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800984a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	440a      	add	r2, r1
 8009862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800986a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	2101      	movs	r1, #1
 800987e:	fa01 f303 	lsl.w	r3, r1, r3
 8009882:	041b      	lsls	r3, r3, #16
 8009884:	43db      	mvns	r3, r3
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800988c:	4013      	ands	r3, r2
 800988e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009896:	69da      	ldr	r2, [r3, #28]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	f003 030f 	and.w	r3, r3, #15
 80098a0:	2101      	movs	r1, #1
 80098a2:	fa01 f303 	lsl.w	r3, r1, r3
 80098a6:	041b      	lsls	r3, r3, #16
 80098a8:	43db      	mvns	r3, r3
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098b0:	4013      	ands	r3, r2
 80098b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	0159      	lsls	r1, r3, #5
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	440b      	add	r3, r1
 80098ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ce:	4619      	mov	r1, r3
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <USB_DeactivateEndpoint+0x1b4>)
 80098d2:	4013      	ands	r3, r2
 80098d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	ec337800 	.word	0xec337800
 80098e8:	eff37800 	.word	0xeff37800

080098ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	; 0x28
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	785b      	ldrb	r3, [r3, #1]
 8009908:	2b01      	cmp	r3, #1
 800990a:	f040 8163 	bne.w	8009bd4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d132      	bne.n	800997c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009922:	691a      	ldr	r2, [r3, #16]
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	0159      	lsls	r1, r3, #5
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	440b      	add	r3, r1
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	4619      	mov	r1, r3
 8009932:	4ba5      	ldr	r3, [pc, #660]	; (8009bc8 <USB_EPStartXfer+0x2dc>)
 8009934:	4013      	ands	r3, r2
 8009936:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	69fa      	ldr	r2, [r7, #28]
 800994c:	440a      	add	r2, r1
 800994e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	691a      	ldr	r2, [r3, #16]
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	0159      	lsls	r1, r3, #5
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	440b      	add	r3, r1
 800996e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009972:	4619      	mov	r1, r3
 8009974:	4b95      	ldr	r3, [pc, #596]	; (8009bcc <USB_EPStartXfer+0x2e0>)
 8009976:	4013      	ands	r3, r2
 8009978:	610b      	str	r3, [r1, #16]
 800997a:	e074      	b.n	8009a66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	0159      	lsls	r1, r3, #5
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	440b      	add	r3, r1
 8009992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009996:	4619      	mov	r1, r3
 8009998:	4b8c      	ldr	r3, [pc, #560]	; (8009bcc <USB_EPStartXfer+0x2e0>)
 800999a:	4013      	ands	r3, r2
 800999c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099aa:	691a      	ldr	r2, [r3, #16]
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	0159      	lsls	r1, r3, #5
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	440b      	add	r3, r1
 80099b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b8:	4619      	mov	r1, r3
 80099ba:	4b83      	ldr	r3, [pc, #524]	; (8009bc8 <USB_EPStartXfer+0x2dc>)
 80099bc:	4013      	ands	r3, r2
 80099be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	6999      	ldr	r1, [r3, #24]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	440b      	add	r3, r1
 80099d8:	1e59      	subs	r1, r3, #1
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	fbb1 f3f3 	udiv	r3, r1, r3
 80099e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80099e4:	4b7a      	ldr	r3, [pc, #488]	; (8009bd0 <USB_EPStartXfer+0x2e4>)
 80099e6:	400b      	ands	r3, r1
 80099e8:	69b9      	ldr	r1, [r7, #24]
 80099ea:	0148      	lsls	r0, r1, #5
 80099ec:	69f9      	ldr	r1, [r7, #28]
 80099ee:	4401      	add	r1, r0
 80099f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80099f4:	4313      	orrs	r3, r2
 80099f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a04:	691a      	ldr	r2, [r3, #16]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a0e:	69b9      	ldr	r1, [r7, #24]
 8009a10:	0148      	lsls	r0, r1, #5
 8009a12:	69f9      	ldr	r1, [r7, #28]
 8009a14:	4401      	add	r1, r0
 8009a16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	791b      	ldrb	r3, [r3, #4]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d11f      	bne.n	8009a66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	0151      	lsls	r1, r2, #5
 8009a38:	69fa      	ldr	r2, [r7, #28]
 8009a3a:	440a      	add	r2, r1
 8009a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	0151      	lsls	r1, r2, #5
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	440a      	add	r2, r1
 8009a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009a66:	79fb      	ldrb	r3, [r7, #7]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d14b      	bne.n	8009b04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d009      	beq.n	8009a88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a80:	461a      	mov	r2, r3
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	791b      	ldrb	r3, [r3, #4]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d128      	bne.n	8009ae2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d110      	bne.n	8009ac2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	0151      	lsls	r1, r2, #5
 8009ab2:	69fa      	ldr	r2, [r7, #28]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	e00f      	b.n	8009ae2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	0151      	lsls	r1, r2, #5
 8009ad4:	69fa      	ldr	r2, [r7, #28]
 8009ad6:	440a      	add	r2, r1
 8009ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ae0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	0151      	lsls	r1, r2, #5
 8009af4:	69fa      	ldr	r2, [r7, #28]
 8009af6:	440a      	add	r2, r1
 8009af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	e137      	b.n	8009d74 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69ba      	ldr	r2, [r7, #24]
 8009b14:	0151      	lsls	r1, r2, #5
 8009b16:	69fa      	ldr	r2, [r7, #28]
 8009b18:	440a      	add	r2, r1
 8009b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	791b      	ldrb	r3, [r3, #4]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d015      	beq.n	8009b58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 811f 	beq.w	8009d74 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	f003 030f 	and.w	r3, r3, #15
 8009b46:	2101      	movs	r1, #1
 8009b48:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4c:	69f9      	ldr	r1, [r7, #28]
 8009b4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b52:	4313      	orrs	r3, r2
 8009b54:	634b      	str	r3, [r1, #52]	; 0x34
 8009b56:	e10d      	b.n	8009d74 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d110      	bne.n	8009b8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	0151      	lsls	r1, r2, #5
 8009b7a:	69fa      	ldr	r2, [r7, #28]
 8009b7c:	440a      	add	r2, r1
 8009b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	e00f      	b.n	8009baa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	69ba      	ldr	r2, [r7, #24]
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	6919      	ldr	r1, [r3, #16]
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	781a      	ldrb	r2, [r3, #0]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	b298      	uxth	r0, r3
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 faea 	bl	800a198 <USB_WritePacket>
 8009bc4:	e0d6      	b.n	8009d74 <USB_EPStartXfer+0x488>
 8009bc6:	bf00      	nop
 8009bc8:	e007ffff 	.word	0xe007ffff
 8009bcc:	fff80000 	.word	0xfff80000
 8009bd0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	0159      	lsls	r1, r3, #5
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	440b      	add	r3, r1
 8009bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4b63      	ldr	r3, [pc, #396]	; (8009d80 <USB_EPStartXfer+0x494>)
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c02:	691a      	ldr	r2, [r3, #16]
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	0159      	lsls	r1, r3, #5
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	440b      	add	r3, r1
 8009c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c10:	4619      	mov	r1, r3
 8009c12:	4b5c      	ldr	r3, [pc, #368]	; (8009d84 <USB_EPStartXfer+0x498>)
 8009c14:	4013      	ands	r3, r2
 8009c16:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d123      	bne.n	8009c68 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2c:	691a      	ldr	r2, [r3, #16]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c36:	69b9      	ldr	r1, [r7, #24]
 8009c38:	0148      	lsls	r0, r1, #5
 8009c3a:	69f9      	ldr	r1, [r7, #28]
 8009c3c:	4401      	add	r1, r0
 8009c3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c42:	4313      	orrs	r3, r2
 8009c44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	015a      	lsls	r2, r3, #5
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	0151      	lsls	r1, r2, #5
 8009c58:	69fa      	ldr	r2, [r7, #28]
 8009c5a:	440a      	add	r2, r1
 8009c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c64:	6113      	str	r3, [r2, #16]
 8009c66:	e037      	b.n	8009cd8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	699a      	ldr	r2, [r3, #24]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	4413      	add	r3, r2
 8009c72:	1e5a      	subs	r2, r3, #1
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	8afa      	ldrh	r2, [r7, #22]
 8009c84:	fb03 f202 	mul.w	r2, r3, r2
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c98:	691a      	ldr	r2, [r3, #16]
 8009c9a:	8afb      	ldrh	r3, [r7, #22]
 8009c9c:	04d9      	lsls	r1, r3, #19
 8009c9e:	4b3a      	ldr	r3, [pc, #232]	; (8009d88 <USB_EPStartXfer+0x49c>)
 8009ca0:	400b      	ands	r3, r1
 8009ca2:	69b9      	ldr	r1, [r7, #24]
 8009ca4:	0148      	lsls	r0, r1, #5
 8009ca6:	69f9      	ldr	r1, [r7, #28]
 8009ca8:	4401      	add	r1, r0
 8009caa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cbe:	691a      	ldr	r2, [r3, #16]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cc8:	69b9      	ldr	r1, [r7, #24]
 8009cca:	0148      	lsls	r0, r1, #5
 8009ccc:	69f9      	ldr	r1, [r7, #28]
 8009cce:	4401      	add	r1, r0
 8009cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d10d      	bne.n	8009cfa <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d009      	beq.n	8009cfa <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	6919      	ldr	r1, [r3, #16]
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	015a      	lsls	r2, r3, #5
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf6:	460a      	mov	r2, r1
 8009cf8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	791b      	ldrb	r3, [r3, #4]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d128      	bne.n	8009d54 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d110      	bne.n	8009d34 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	0151      	lsls	r1, r2, #5
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	440a      	add	r2, r1
 8009d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e00f      	b.n	8009d54 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	0151      	lsls	r1, r2, #5
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	440a      	add	r2, r1
 8009d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	0151      	lsls	r1, r2, #5
 8009d66:	69fa      	ldr	r2, [r7, #28]
 8009d68:	440a      	add	r2, r1
 8009d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3720      	adds	r7, #32
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	fff80000 	.word	0xfff80000
 8009d84:	e007ffff 	.word	0xe007ffff
 8009d88:	1ff80000 	.word	0x1ff80000

08009d8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	4613      	mov	r3, r2
 8009d98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	f040 80ce 	bne.w	8009f4a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d132      	bne.n	8009e1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	015a      	lsls	r2, r3, #5
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc2:	691a      	ldr	r2, [r3, #16]
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	0159      	lsls	r1, r3, #5
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	440b      	add	r3, r1
 8009dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4b9a      	ldr	r3, [pc, #616]	; (800a03c <USB_EP0StartXfer+0x2b0>)
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	0151      	lsls	r1, r2, #5
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	440a      	add	r2, r1
 8009dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e04:	691a      	ldr	r2, [r3, #16]
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	0159      	lsls	r1, r3, #5
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	440b      	add	r3, r1
 8009e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e12:	4619      	mov	r1, r3
 8009e14:	4b8a      	ldr	r3, [pc, #552]	; (800a040 <USB_EP0StartXfer+0x2b4>)
 8009e16:	4013      	ands	r3, r2
 8009e18:	610b      	str	r3, [r1, #16]
 8009e1a:	e04e      	b.n	8009eba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e28:	691a      	ldr	r2, [r3, #16]
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	0159      	lsls	r1, r3, #5
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	440b      	add	r3, r1
 8009e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e36:	4619      	mov	r1, r3
 8009e38:	4b81      	ldr	r3, [pc, #516]	; (800a040 <USB_EP0StartXfer+0x2b4>)
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4a:	691a      	ldr	r2, [r3, #16]
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	0159      	lsls	r1, r3, #5
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	440b      	add	r3, r1
 8009e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4b78      	ldr	r3, [pc, #480]	; (800a03c <USB_EP0StartXfer+0x2b0>)
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	699a      	ldr	r2, [r3, #24]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d903      	bls.n	8009e74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea0:	691a      	ldr	r2, [r3, #16]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eaa:	6939      	ldr	r1, [r7, #16]
 8009eac:	0148      	lsls	r0, r1, #5
 8009eae:	6979      	ldr	r1, [r7, #20]
 8009eb0:	4401      	add	r1, r0
 8009eb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d11e      	bne.n	8009efe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d009      	beq.n	8009edc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	015a      	lsls	r2, r3, #5
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	0151      	lsls	r1, r2, #5
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	440a      	add	r2, r1
 8009ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	e097      	b.n	800a02e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	0151      	lsls	r1, r2, #5
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	440a      	add	r2, r1
 8009f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 8083 	beq.w	800a02e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	f003 030f 	and.w	r3, r3, #15
 8009f38:	2101      	movs	r1, #1
 8009f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3e:	6979      	ldr	r1, [r7, #20]
 8009f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f44:	4313      	orrs	r3, r2
 8009f46:	634b      	str	r3, [r1, #52]	; 0x34
 8009f48:	e071      	b.n	800a02e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	0159      	lsls	r1, r3, #5
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	440b      	add	r3, r1
 8009f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f64:	4619      	mov	r1, r3
 8009f66:	4b36      	ldr	r3, [pc, #216]	; (800a040 <USB_EP0StartXfer+0x2b4>)
 8009f68:	4013      	ands	r3, r2
 8009f6a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f78:	691a      	ldr	r2, [r3, #16]
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	0159      	lsls	r1, r3, #5
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	440b      	add	r3, r1
 8009f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f86:	4619      	mov	r1, r3
 8009f88:	4b2c      	ldr	r3, [pc, #176]	; (800a03c <USB_EP0StartXfer+0x2b0>)
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	68da      	ldr	r2, [r3, #12]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	68da      	ldr	r2, [r3, #12]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	0151      	lsls	r1, r2, #5
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	440a      	add	r2, r1
 8009fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	015a      	lsls	r2, r3, #5
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd2:	691a      	ldr	r2, [r3, #16]
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fdc:	6939      	ldr	r1, [r7, #16]
 8009fde:	0148      	lsls	r0, r1, #5
 8009fe0:	6979      	ldr	r1, [r7, #20]
 8009fe2:	4401      	add	r1, r0
 8009fe4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d10d      	bne.n	800a00e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d009      	beq.n	800a00e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	6919      	ldr	r1, [r3, #16]
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	4413      	add	r3, r2
 800a006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00a:	460a      	mov	r2, r1
 800a00c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	4413      	add	r3, r2
 800a016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	0151      	lsls	r1, r2, #5
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	440a      	add	r2, r1
 800a024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a028:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a02c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	e007ffff 	.word	0xe007ffff
 800a040:	fff80000 	.word	0xfff80000

0800a044 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	785b      	ldrb	r3, [r3, #1]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d14a      	bne.n	800a0f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a07a:	f040 8086 	bne.w	800a18a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	7812      	ldrb	r2, [r2, #0]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	440a      	add	r2, r1
 800a098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a09c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	7812      	ldrb	r2, [r2, #0]
 800a0b6:	0151      	lsls	r1, r2, #5
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	440a      	add	r2, r1
 800a0bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d902      	bls.n	800a0dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a0da:	e056      	b.n	800a18a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	015a      	lsls	r2, r3, #5
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0f4:	d0e7      	beq.n	800a0c6 <USB_EPStopXfer+0x82>
 800a0f6:	e048      	b.n	800a18a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	015a      	lsls	r2, r3, #5
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	4413      	add	r3, r2
 800a102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a10c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a110:	d13b      	bne.n	800a18a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	015a      	lsls	r2, r3, #5
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	4413      	add	r3, r2
 800a11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	7812      	ldrb	r2, [r2, #0]
 800a126:	0151      	lsls	r1, r2, #5
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	440a      	add	r2, r1
 800a12c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a130:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a134:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	7812      	ldrb	r2, [r2, #0]
 800a14a:	0151      	lsls	r1, r2, #5
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	440a      	add	r2, r1
 800a150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a158:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3301      	adds	r3, #1
 800a15e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f242 7210 	movw	r2, #10000	; 0x2710
 800a166:	4293      	cmp	r3, r2
 800a168:	d902      	bls.n	800a170 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	75fb      	strb	r3, [r7, #23]
          break;
 800a16e:	e00c      	b.n	800a18a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a188:	d0e7      	beq.n	800a15a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	371c      	adds	r7, #28
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a198:	b480      	push	{r7}
 800a19a:	b089      	sub	sp, #36	; 0x24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	71fb      	strb	r3, [r7, #7]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d123      	bne.n	800a206 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1be:	88bb      	ldrh	r3, [r7, #4]
 800a1c0:	3303      	adds	r3, #3
 800a1c2:	089b      	lsrs	r3, r3, #2
 800a1c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	61bb      	str	r3, [r7, #24]
 800a1ca:	e018      	b.n	800a1fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	031a      	lsls	r2, r3, #12
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d8:	461a      	mov	r2, r3
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	69ba      	ldr	r2, [r7, #24]
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	429a      	cmp	r2, r3
 800a204:	d3e2      	bcc.n	800a1cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3724      	adds	r7, #36	; 0x24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a214:	b480      	push	{r7}
 800a216:	b08b      	sub	sp, #44	; 0x2c
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a22a:	88fb      	ldrh	r3, [r7, #6]
 800a22c:	089b      	lsrs	r3, r3, #2
 800a22e:	b29b      	uxth	r3, r3
 800a230:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	f003 0303 	and.w	r3, r3, #3
 800a238:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a23a:	2300      	movs	r3, #0
 800a23c:	623b      	str	r3, [r7, #32]
 800a23e:	e014      	b.n	800a26a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	3301      	adds	r3, #1
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	3301      	adds	r3, #1
 800a256:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	3301      	adds	r3, #1
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	3301      	adds	r3, #1
 800a262:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	3301      	adds	r3, #1
 800a268:	623b      	str	r3, [r7, #32]
 800a26a:	6a3a      	ldr	r2, [r7, #32]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d3e6      	bcc.n	800a240 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a272:	8bfb      	ldrh	r3, [r7, #30]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d01e      	beq.n	800a2b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a282:	461a      	mov	r2, r3
 800a284:	f107 0310 	add.w	r3, r7, #16
 800a288:	6812      	ldr	r2, [r2, #0]
 800a28a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	b2db      	uxtb	r3, r3
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	fa22 f303 	lsr.w	r3, r2, r3
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	701a      	strb	r2, [r3, #0]
      i++;
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a2aa:	8bfb      	ldrh	r3, [r7, #30]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2b0:	8bfb      	ldrh	r3, [r7, #30]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1ea      	bne.n	800a28c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	372c      	adds	r7, #44	; 0x2c
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	785b      	ldrb	r3, [r3, #1]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d12c      	bne.n	800a33a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	db12      	blt.n	800a318 <USB_EPSetStall+0x54>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00f      	beq.n	800a318 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	0151      	lsls	r1, r2, #5
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	440a      	add	r2, r1
 800a30e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a312:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a316:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	0151      	lsls	r1, r2, #5
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	440a      	add	r2, r1
 800a32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a336:	6013      	str	r3, [r2, #0]
 800a338:	e02b      	b.n	800a392 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	db12      	blt.n	800a372 <USB_EPSetStall+0xae>
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00f      	beq.n	800a372 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	015a      	lsls	r2, r3, #5
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	4413      	add	r3, r2
 800a35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	0151      	lsls	r1, r2, #5
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	440a      	add	r2, r1
 800a368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a36c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a370:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	0151      	lsls	r1, r2, #5
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	440a      	add	r2, r1
 800a388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a38c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a390:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d128      	bne.n	800a40e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	0151      	lsls	r1, r2, #5
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	791b      	ldrb	r3, [r3, #4]
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d003      	beq.n	800a3ec <USB_EPClearStall+0x4c>
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	791b      	ldrb	r3, [r3, #4]
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d138      	bne.n	800a45e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	0151      	lsls	r1, r2, #5
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	440a      	add	r2, r1
 800a402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	e027      	b.n	800a45e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	0151      	lsls	r1, r2, #5
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	440a      	add	r2, r1
 800a424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a428:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a42c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	791b      	ldrb	r3, [r3, #4]
 800a432:	2b03      	cmp	r3, #3
 800a434:	d003      	beq.n	800a43e <USB_EPClearStall+0x9e>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	791b      	ldrb	r3, [r3, #4]
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d10f      	bne.n	800a45e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	0151      	lsls	r1, r2, #5
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	440a      	add	r2, r1
 800a454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a45c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a48a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a48e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	011b      	lsls	r3, r3, #4
 800a49c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a4a0:	68f9      	ldr	r1, [r7, #12]
 800a4a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4d2:	f023 0303 	bic.w	r3, r3, #3
 800a4d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4e6:	f023 0302 	bic.w	r3, r3, #2
 800a4ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b085      	sub	sp, #20
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a514:	f023 0303 	bic.w	r3, r3, #3
 800a518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a528:	f043 0302 	orr.w	r3, r3, #2
 800a52c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	4013      	ands	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a554:	68fb      	ldr	r3, [r7, #12]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a562:	b480      	push	{r7}
 800a564:	b085      	sub	sp, #20
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a57e:	69db      	ldr	r3, [r3, #28]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	4013      	ands	r3, r2
 800a584:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	0c1b      	lsrs	r3, r3, #16
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a596:	b480      	push	{r7}
 800a598:	b085      	sub	sp, #20
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	b29b      	uxth	r3, r3
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b085      	sub	sp, #20
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5da:	78fb      	ldrb	r3, [r7, #3]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a606:	b480      	push	{r7}
 800a608:	b087      	sub	sp, #28
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a628:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	f003 030f 	and.w	r3, r3, #15
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	fa22 f303 	lsr.w	r3, r2, r3
 800a636:	01db      	lsls	r3, r3, #7
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	4013      	ands	r3, r2
 800a652:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a654:	68bb      	ldr	r3, [r7, #8]
}
 800a656:	4618      	mov	r0, r3
 800a658:	371c      	adds	r7, #28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	f003 0301 	and.w	r3, r3, #1
}
 800a672:	4618      	mov	r0, r3
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
	...

0800a680 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a69a:	4619      	mov	r1, r3
 800a69c:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <USB_ActivateSetup+0x44>)
 800a69e:	4013      	ands	r3, r2
 800a6a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	fffff800 	.word	0xfffff800

0800a6c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	607a      	str	r2, [r7, #4]
 800a6d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	333c      	adds	r3, #60	; 0x3c
 800a6de:	3304      	adds	r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	4a26      	ldr	r2, [pc, #152]	; (800a780 <USB_EP0_OutStart+0xb8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d90a      	bls.n	800a702 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6fc:	d101      	bne.n	800a702 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	e037      	b.n	800a772 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a708:	461a      	mov	r2, r3
 800a70a:	2300      	movs	r3, #0
 800a70c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a71c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a730:	f043 0318 	orr.w	r3, r3, #24
 800a734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a744:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a748:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a74a:	7afb      	ldrb	r3, [r7, #11]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d10f      	bne.n	800a770 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a756:	461a      	mov	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a76a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a76e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	371c      	adds	r7, #28
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	4f54300a 	.word	0x4f54300a

0800a784 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3301      	adds	r3, #1
 800a794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	4a13      	ldr	r2, [pc, #76]	; (800a7e8 <USB_CoreReset+0x64>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d901      	bls.n	800a7a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e01b      	b.n	800a7da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	daf2      	bge.n	800a790 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	f043 0201 	orr.w	r2, r3, #1
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	4a09      	ldr	r2, [pc, #36]	; (800a7e8 <USB_CoreReset+0x64>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d901      	bls.n	800a7cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e006      	b.n	800a7da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	f003 0301 	and.w	r3, r3, #1
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d0f0      	beq.n	800a7ba <USB_CoreReset+0x36>

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	00030d40 	.word	0x00030d40

0800a7ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a7f0:	4904      	ldr	r1, [pc, #16]	; (800a804 <MX_FATFS_Init+0x18>)
 800a7f2:	4805      	ldr	r0, [pc, #20]	; (800a808 <MX_FATFS_Init+0x1c>)
 800a7f4:	f005 f9e2 	bl	800fbbc <FATFS_LinkDriver>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	4b03      	ldr	r3, [pc, #12]	; (800a80c <MX_FATFS_Init+0x20>)
 800a7fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a800:	bf00      	nop
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20002518 	.word	0x20002518
 800a808:	08011fbc 	.word	0x08011fbc
 800a80c:	20002514 	.word	0x20002514

0800a810 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a810:	b480      	push	{r7}
 800a812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a814:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a816:	4618      	mov	r0, r3
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a82a:	f000 f888 	bl	800a93e <BSP_SD_IsDetected>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b01      	cmp	r3, #1
 800a832:	d001      	beq.n	800a838 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a834:	2302      	movs	r3, #2
 800a836:	e005      	b.n	800a844 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a838:	4804      	ldr	r0, [pc, #16]	; (800a84c <BSP_SD_Init+0x2c>)
 800a83a:	f7fc f845 	bl	80068c8 <HAL_SD_Init>
 800a83e:	4603      	mov	r3, r0
 800a840:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a842:	79fb      	ldrb	r3, [r7, #7]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20000204 	.word	0x20000204

0800a850 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	68f9      	ldr	r1, [r7, #12]
 800a866:	4806      	ldr	r0, [pc, #24]	; (800a880 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a868:	f7fc f8e6 	bl	8006a38 <HAL_SD_ReadBlocks_DMA>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a876:	7dfb      	ldrb	r3, [r7, #23]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20000204 	.word	0x20000204

0800a884 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a890:	2300      	movs	r3, #0
 800a892:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	68f9      	ldr	r1, [r7, #12]
 800a89a:	4806      	ldr	r0, [pc, #24]	; (800a8b4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a89c:	f7fc f9ae 	bl	8006bfc <HAL_SD_WriteBlocks_DMA>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	20000204 	.word	0x20000204

0800a8b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a8bc:	4805      	ldr	r0, [pc, #20]	; (800a8d4 <BSP_SD_GetCardState+0x1c>)
 800a8be:	f7fc fdd3 	bl	8007468 <HAL_SD_GetCardState>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	bf14      	ite	ne
 800a8c8:	2301      	movne	r3, #1
 800a8ca:	2300      	moveq	r3, #0
 800a8cc:	b2db      	uxtb	r3, r3
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20000204 	.word	0x20000204

0800a8d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a8e0:	6879      	ldr	r1, [r7, #4]
 800a8e2:	4803      	ldr	r0, [pc, #12]	; (800a8f0 <BSP_SD_GetCardInfo+0x18>)
 800a8e4:	f7fc fd94 	bl	8007410 <HAL_SD_GetCardInfo>
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	20000204 	.word	0x20000204

0800a8f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a8fc:	f000 f818 	bl	800a930 <BSP_SD_AbortCallback>
}
 800a900:	bf00      	nop
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a910:	f000 f9a8 	bl	800ac64 <BSP_SD_WriteCpltCallback>
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a924:	f000 f9aa 	bl	800ac7c <BSP_SD_ReadCpltCallback>
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0

}
 800a934:	bf00      	nop
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a944:	2301      	movs	r3, #1
 800a946:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a948:	f000 f80c 	bl	800a964 <BSP_PlatformIsDetected>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a952:	2300      	movs	r3, #0
 800a954:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a956:	79fb      	ldrb	r3, [r7, #7]
 800a958:	b2db      	uxtb	r3, r3
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a96a:	2301      	movs	r3, #1
 800a96c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a96e:	2104      	movs	r1, #4
 800a970:	4806      	ldr	r0, [pc, #24]	; (800a98c <BSP_PlatformIsDetected+0x28>)
 800a972:	f7f8 fe21 	bl	80035b8 <HAL_GPIO_ReadPin>
 800a976:	4603      	mov	r3, r0
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d001      	beq.n	800a980 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a97c:	2300      	movs	r3, #0
 800a97e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a980:	79fb      	ldrb	r3, [r7, #7]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	40021800 	.word	0x40021800

0800a990 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a998:	f7f7 f94e 	bl	8001c38 <HAL_GetTick>
 800a99c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a99e:	e006      	b.n	800a9ae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9a0:	f7ff ff8a 	bl	800a8b8 <BSP_SD_GetCardState>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e009      	b.n	800a9c2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a9ae:	f7f7 f943 	bl	8001c38 <HAL_GetTick>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d8f0      	bhi.n	800a9a0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a9d6:	4b0b      	ldr	r3, [pc, #44]	; (800aa04 <SD_CheckStatus+0x38>)
 800a9d8:	2201      	movs	r2, #1
 800a9da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a9dc:	f7ff ff6c 	bl	800a8b8 <BSP_SD_GetCardState>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d107      	bne.n	800a9f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a9e6:	4b07      	ldr	r3, [pc, #28]	; (800aa04 <SD_CheckStatus+0x38>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f023 0301 	bic.w	r3, r3, #1
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	4b04      	ldr	r3, [pc, #16]	; (800aa04 <SD_CheckStatus+0x38>)
 800a9f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a9f6:	4b03      	ldr	r3, [pc, #12]	; (800aa04 <SD_CheckStatus+0x38>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	b2db      	uxtb	r3, r3
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	2000000d 	.word	0x2000000d

0800aa08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800aa12:	f7ff ff05 	bl	800a820 <BSP_SD_Init>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d107      	bne.n	800aa2c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff ffd4 	bl	800a9cc <SD_CheckStatus>
 800aa24:	4603      	mov	r3, r0
 800aa26:	461a      	mov	r2, r3
 800aa28:	4b04      	ldr	r3, [pc, #16]	; (800aa3c <SD_initialize+0x34>)
 800aa2a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800aa2c:	4b03      	ldr	r3, [pc, #12]	; (800aa3c <SD_initialize+0x34>)
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	b2db      	uxtb	r3, r3
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	2000000d 	.word	0x2000000d

0800aa40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4603      	mov	r3, r0
 800aa48:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff ffbd 	bl	800a9cc <SD_CheckStatus>
 800aa52:	4603      	mov	r3, r0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	603b      	str	r3, [r7, #0]
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa70:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa74:	f7ff ff8c 	bl	800a990 <SD_CheckStatusWithTimeout>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	da01      	bge.n	800aa82 <SD_read+0x26>
  {
    return res;
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
 800aa80:	e03b      	b.n	800aafa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	6879      	ldr	r1, [r7, #4]
 800aa86:	68b8      	ldr	r0, [r7, #8]
 800aa88:	f7ff fee2 	bl	800a850 <BSP_SD_ReadBlocks_DMA>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d132      	bne.n	800aaf8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800aa92:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <SD_read+0xa8>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800aa98:	f7f7 f8ce 	bl	8001c38 <HAL_GetTick>
 800aa9c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aa9e:	bf00      	nop
 800aaa0:	4b18      	ldr	r3, [pc, #96]	; (800ab04 <SD_read+0xa8>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d108      	bne.n	800aaba <SD_read+0x5e>
 800aaa8:	f7f7 f8c6 	bl	8001c38 <HAL_GetTick>
 800aaac:	4602      	mov	r2, r0
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	f247 522f 	movw	r2, #29999	; 0x752f
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d9f2      	bls.n	800aaa0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800aaba:	4b12      	ldr	r3, [pc, #72]	; (800ab04 <SD_read+0xa8>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d102      	bne.n	800aac8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	75fb      	strb	r3, [r7, #23]
 800aac6:	e017      	b.n	800aaf8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800aac8:	4b0e      	ldr	r3, [pc, #56]	; (800ab04 <SD_read+0xa8>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aace:	f7f7 f8b3 	bl	8001c38 <HAL_GetTick>
 800aad2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aad4:	e007      	b.n	800aae6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aad6:	f7ff feef 	bl	800a8b8 <BSP_SD_GetCardState>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d102      	bne.n	800aae6 <SD_read+0x8a>
          {
            res = RES_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aae4:	e008      	b.n	800aaf8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aae6:	f7f7 f8a7 	bl	8001c38 <HAL_GetTick>
 800aaea:	4602      	mov	r2, r0
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	f247 522f 	movw	r2, #29999	; 0x752f
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d9ee      	bls.n	800aad6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3718      	adds	r7, #24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	20002984 	.word	0x20002984

0800ab08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60b9      	str	r1, [r7, #8]
 800ab10:	607a      	str	r2, [r7, #4]
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ab1c:	4b24      	ldr	r3, [pc, #144]	; (800abb0 <SD_write+0xa8>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ab22:	f247 5030 	movw	r0, #30000	; 0x7530
 800ab26:	f7ff ff33 	bl	800a990 <SD_CheckStatusWithTimeout>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	da01      	bge.n	800ab34 <SD_write+0x2c>
  {
    return res;
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	e038      	b.n	800aba6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	68b8      	ldr	r0, [r7, #8]
 800ab3a:	f7ff fea3 	bl	800a884 <BSP_SD_WriteBlocks_DMA>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d12f      	bne.n	800aba4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ab44:	f7f7 f878 	bl	8001c38 <HAL_GetTick>
 800ab48:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ab4a:	bf00      	nop
 800ab4c:	4b18      	ldr	r3, [pc, #96]	; (800abb0 <SD_write+0xa8>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d108      	bne.n	800ab66 <SD_write+0x5e>
 800ab54:	f7f7 f870 	bl	8001c38 <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	f247 522f 	movw	r2, #29999	; 0x752f
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d9f2      	bls.n	800ab4c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ab66:	4b12      	ldr	r3, [pc, #72]	; (800abb0 <SD_write+0xa8>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	75fb      	strb	r3, [r7, #23]
 800ab72:	e017      	b.n	800aba4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ab74:	4b0e      	ldr	r3, [pc, #56]	; (800abb0 <SD_write+0xa8>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ab7a:	f7f7 f85d 	bl	8001c38 <HAL_GetTick>
 800ab7e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ab80:	e007      	b.n	800ab92 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab82:	f7ff fe99 	bl	800a8b8 <BSP_SD_GetCardState>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d102      	bne.n	800ab92 <SD_write+0x8a>
          {
            res = RES_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	75fb      	strb	r3, [r7, #23]
            break;
 800ab90:	e008      	b.n	800aba4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ab92:	f7f7 f851 	bl	8001c38 <HAL_GetTick>
 800ab96:	4602      	mov	r2, r0
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	f247 522f 	movw	r2, #29999	; 0x752f
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d9ee      	bls.n	800ab82 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3718      	adds	r7, #24
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	20002980 	.word	0x20002980

0800abb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08c      	sub	sp, #48	; 0x30
 800abb8:	af00      	add	r7, sp, #0
 800abba:	4603      	mov	r3, r0
 800abbc:	603a      	str	r2, [r7, #0]
 800abbe:	71fb      	strb	r3, [r7, #7]
 800abc0:	460b      	mov	r3, r1
 800abc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800abca:	4b25      	ldr	r3, [pc, #148]	; (800ac60 <SD_ioctl+0xac>)
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <SD_ioctl+0x28>
 800abd8:	2303      	movs	r3, #3
 800abda:	e03c      	b.n	800ac56 <SD_ioctl+0xa2>

  switch (cmd)
 800abdc:	79bb      	ldrb	r3, [r7, #6]
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d834      	bhi.n	800ac4c <SD_ioctl+0x98>
 800abe2:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <SD_ioctl+0x34>)
 800abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe8:	0800abf9 	.word	0x0800abf9
 800abec:	0800ac01 	.word	0x0800ac01
 800abf0:	0800ac19 	.word	0x0800ac19
 800abf4:	0800ac33 	.word	0x0800ac33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800abfe:	e028      	b.n	800ac52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac00:	f107 030c 	add.w	r3, r7, #12
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff fe67 	bl	800a8d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac16:	e01c      	b.n	800ac52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac18:	f107 030c 	add.w	r3, r7, #12
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff fe5b 	bl	800a8d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac30:	e00f      	b.n	800ac52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac32:	f107 030c 	add.w	r3, r7, #12
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff fe4e 	bl	800a8d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3e:	0a5a      	lsrs	r2, r3, #9
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac4a:	e002      	b.n	800ac52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ac52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3730      	adds	r7, #48	; 0x30
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	2000000d 	.word	0x2000000d

0800ac64 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ac64:	b480      	push	{r7}
 800ac66:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ac68:	4b03      	ldr	r3, [pc, #12]	; (800ac78 <BSP_SD_WriteCpltCallback+0x14>)
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	601a      	str	r2, [r3, #0]
}
 800ac6e:	bf00      	nop
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	20002980 	.word	0x20002980

0800ac7c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ac80:	4b03      	ldr	r3, [pc, #12]	; (800ac90 <BSP_SD_ReadCpltCallback+0x14>)
 800ac82:	2201      	movs	r2, #1
 800ac84:	601a      	str	r2, [r3, #0]
}
 800ac86:	bf00      	nop
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	20002984 	.word	0x20002984

0800ac94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aca0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aca4:	f005 fde6 	bl	8010874 <malloc>
 800aca8:	4603      	mov	r3, r0
 800acaa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d109      	bne.n	800acc6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	32b0      	adds	r2, #176	; 0xb0
 800acbc:	2100      	movs	r1, #0
 800acbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800acc2:	2302      	movs	r3, #2
 800acc4:	e0d4      	b.n	800ae70 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800acc6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800acca:	2100      	movs	r1, #0
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f006 f800 	bl	8010cd2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	32b0      	adds	r2, #176	; 0xb0
 800acdc:	68f9      	ldr	r1, [r7, #12]
 800acde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	32b0      	adds	r2, #176	; 0xb0
 800acec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	7c1b      	ldrb	r3, [r3, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d138      	bne.n	800ad70 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800acfe:	4b5e      	ldr	r3, [pc, #376]	; (800ae78 <USBD_CDC_Init+0x1e4>)
 800ad00:	7819      	ldrb	r1, [r3, #0]
 800ad02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad06:	2202      	movs	r2, #2
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f005 fc10 	bl	801052e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad0e:	4b5a      	ldr	r3, [pc, #360]	; (800ae78 <USBD_CDC_Init+0x1e4>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	f003 020f 	and.w	r2, r3, #15
 800ad16:	6879      	ldr	r1, [r7, #4]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	440b      	add	r3, r1
 800ad22:	3324      	adds	r3, #36	; 0x24
 800ad24:	2201      	movs	r2, #1
 800ad26:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad28:	4b54      	ldr	r3, [pc, #336]	; (800ae7c <USBD_CDC_Init+0x1e8>)
 800ad2a:	7819      	ldrb	r1, [r3, #0]
 800ad2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad30:	2202      	movs	r2, #2
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f005 fbfb 	bl	801052e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad38:	4b50      	ldr	r3, [pc, #320]	; (800ae7c <USBD_CDC_Init+0x1e8>)
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	f003 020f 	and.w	r2, r3, #15
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	4613      	mov	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	440b      	add	r3, r1
 800ad4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad50:	2201      	movs	r2, #1
 800ad52:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad54:	4b4a      	ldr	r3, [pc, #296]	; (800ae80 <USBD_CDC_Init+0x1ec>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	f003 020f 	and.w	r2, r3, #15
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	440b      	add	r3, r1
 800ad68:	3326      	adds	r3, #38	; 0x26
 800ad6a:	2210      	movs	r2, #16
 800ad6c:	801a      	strh	r2, [r3, #0]
 800ad6e:	e035      	b.n	800addc <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad70:	4b41      	ldr	r3, [pc, #260]	; (800ae78 <USBD_CDC_Init+0x1e4>)
 800ad72:	7819      	ldrb	r1, [r3, #0]
 800ad74:	2340      	movs	r3, #64	; 0x40
 800ad76:	2202      	movs	r2, #2
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f005 fbd8 	bl	801052e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad7e:	4b3e      	ldr	r3, [pc, #248]	; (800ae78 <USBD_CDC_Init+0x1e4>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	f003 020f 	and.w	r2, r3, #15
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	440b      	add	r3, r1
 800ad92:	3324      	adds	r3, #36	; 0x24
 800ad94:	2201      	movs	r2, #1
 800ad96:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad98:	4b38      	ldr	r3, [pc, #224]	; (800ae7c <USBD_CDC_Init+0x1e8>)
 800ad9a:	7819      	ldrb	r1, [r3, #0]
 800ad9c:	2340      	movs	r3, #64	; 0x40
 800ad9e:	2202      	movs	r2, #2
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f005 fbc4 	bl	801052e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ada6:	4b35      	ldr	r3, [pc, #212]	; (800ae7c <USBD_CDC_Init+0x1e8>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	f003 020f 	and.w	r2, r3, #15
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	4613      	mov	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	440b      	add	r3, r1
 800adba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adbe:	2201      	movs	r2, #1
 800adc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800adc2:	4b2f      	ldr	r3, [pc, #188]	; (800ae80 <USBD_CDC_Init+0x1ec>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	f003 020f 	and.w	r2, r3, #15
 800adca:	6879      	ldr	r1, [r7, #4]
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	440b      	add	r3, r1
 800add6:	3326      	adds	r3, #38	; 0x26
 800add8:	2210      	movs	r2, #16
 800adda:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800addc:	4b28      	ldr	r3, [pc, #160]	; (800ae80 <USBD_CDC_Init+0x1ec>)
 800adde:	7819      	ldrb	r1, [r3, #0]
 800ade0:	2308      	movs	r3, #8
 800ade2:	2203      	movs	r2, #3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f005 fba2 	bl	801052e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800adea:	4b25      	ldr	r3, [pc, #148]	; (800ae80 <USBD_CDC_Init+0x1ec>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	f003 020f 	and.w	r2, r3, #15
 800adf2:	6879      	ldr	r1, [r7, #4]
 800adf4:	4613      	mov	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	440b      	add	r3, r1
 800adfe:	3324      	adds	r3, #36	; 0x24
 800ae00:	2201      	movs	r2, #1
 800ae02:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	33b0      	adds	r3, #176	; 0xb0
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d101      	bne.n	800ae3e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e018      	b.n	800ae70 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	7c1b      	ldrb	r3, [r3, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10a      	bne.n	800ae5c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae46:	4b0d      	ldr	r3, [pc, #52]	; (800ae7c <USBD_CDC_Init+0x1e8>)
 800ae48:	7819      	ldrb	r1, [r3, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f005 fc59 	bl	801070c <USBD_LL_PrepareReceive>
 800ae5a:	e008      	b.n	800ae6e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae5c:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <USBD_CDC_Init+0x1e8>)
 800ae5e:	7819      	ldrb	r1, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae66:	2340      	movs	r3, #64	; 0x40
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f005 fc4f 	bl	801070c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20000097 	.word	0x20000097
 800ae7c:	20000098 	.word	0x20000098
 800ae80:	20000099 	.word	0x20000099

0800ae84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ae90:	4b3a      	ldr	r3, [pc, #232]	; (800af7c <USBD_CDC_DeInit+0xf8>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	4619      	mov	r1, r3
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f005 fb6f 	bl	801057a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ae9c:	4b37      	ldr	r3, [pc, #220]	; (800af7c <USBD_CDC_DeInit+0xf8>)
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	f003 020f 	and.w	r2, r3, #15
 800aea4:	6879      	ldr	r1, [r7, #4]
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	440b      	add	r3, r1
 800aeb0:	3324      	adds	r3, #36	; 0x24
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aeb6:	4b32      	ldr	r3, [pc, #200]	; (800af80 <USBD_CDC_DeInit+0xfc>)
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f005 fb5c 	bl	801057a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aec2:	4b2f      	ldr	r3, [pc, #188]	; (800af80 <USBD_CDC_DeInit+0xfc>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	f003 020f 	and.w	r2, r3, #15
 800aeca:	6879      	ldr	r1, [r7, #4]
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	440b      	add	r3, r1
 800aed6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aeda:	2200      	movs	r2, #0
 800aedc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aede:	4b29      	ldr	r3, [pc, #164]	; (800af84 <USBD_CDC_DeInit+0x100>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f005 fb48 	bl	801057a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aeea:	4b26      	ldr	r3, [pc, #152]	; (800af84 <USBD_CDC_DeInit+0x100>)
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	f003 020f 	and.w	r2, r3, #15
 800aef2:	6879      	ldr	r1, [r7, #4]
 800aef4:	4613      	mov	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	440b      	add	r3, r1
 800aefe:	3324      	adds	r3, #36	; 0x24
 800af00:	2200      	movs	r2, #0
 800af02:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af04:	4b1f      	ldr	r3, [pc, #124]	; (800af84 <USBD_CDC_DeInit+0x100>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	f003 020f 	and.w	r2, r3, #15
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	440b      	add	r3, r1
 800af18:	3326      	adds	r3, #38	; 0x26
 800af1a:	2200      	movs	r2, #0
 800af1c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	32b0      	adds	r2, #176	; 0xb0
 800af28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d01f      	beq.n	800af70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	33b0      	adds	r3, #176	; 0xb0
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	32b0      	adds	r2, #176	; 0xb0
 800af4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af52:	4618      	mov	r0, r3
 800af54:	f005 fc96 	bl	8010884 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	32b0      	adds	r2, #176	; 0xb0
 800af62:	2100      	movs	r1, #0
 800af64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20000097 	.word	0x20000097
 800af80:	20000098 	.word	0x20000098
 800af84:	20000099 	.word	0x20000099

0800af88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	32b0      	adds	r2, #176	; 0xb0
 800af9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800afa2:	2300      	movs	r3, #0
 800afa4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800afa6:	2300      	movs	r3, #0
 800afa8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e0bf      	b.n	800b138 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d050      	beq.n	800b066 <USBD_CDC_Setup+0xde>
 800afc4:	2b20      	cmp	r3, #32
 800afc6:	f040 80af 	bne.w	800b128 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	88db      	ldrh	r3, [r3, #6]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d03a      	beq.n	800b048 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	b25b      	sxtb	r3, r3
 800afd8:	2b00      	cmp	r3, #0
 800afda:	da1b      	bge.n	800b014 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	33b0      	adds	r3, #176	; 0xb0
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aff2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	88d2      	ldrh	r2, [r2, #6]
 800aff8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	88db      	ldrh	r3, [r3, #6]
 800affe:	2b07      	cmp	r3, #7
 800b000:	bf28      	it	cs
 800b002:	2307      	movcs	r3, #7
 800b004:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	89fa      	ldrh	r2, [r7, #14]
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 fdad 	bl	800cb6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b012:	e090      	b.n	800b136 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	785a      	ldrb	r2, [r3, #1]
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	88db      	ldrh	r3, [r3, #6]
 800b022:	2b3f      	cmp	r3, #63	; 0x3f
 800b024:	d803      	bhi.n	800b02e <USBD_CDC_Setup+0xa6>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	88db      	ldrh	r3, [r3, #6]
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	e000      	b.n	800b030 <USBD_CDC_Setup+0xa8>
 800b02e:	2240      	movs	r2, #64	; 0x40
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b036:	6939      	ldr	r1, [r7, #16]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b03e:	461a      	mov	r2, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 fdbf 	bl	800cbc4 <USBD_CtlPrepareRx>
      break;
 800b046:	e076      	b.n	800b136 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	33b0      	adds	r3, #176	; 0xb0
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	7850      	ldrb	r0, [r2, #1]
 800b05e:	2200      	movs	r2, #0
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	4798      	blx	r3
      break;
 800b064:	e067      	b.n	800b136 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	785b      	ldrb	r3, [r3, #1]
 800b06a:	2b0b      	cmp	r3, #11
 800b06c:	d851      	bhi.n	800b112 <USBD_CDC_Setup+0x18a>
 800b06e:	a201      	add	r2, pc, #4	; (adr r2, 800b074 <USBD_CDC_Setup+0xec>)
 800b070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b074:	0800b0a5 	.word	0x0800b0a5
 800b078:	0800b121 	.word	0x0800b121
 800b07c:	0800b113 	.word	0x0800b113
 800b080:	0800b113 	.word	0x0800b113
 800b084:	0800b113 	.word	0x0800b113
 800b088:	0800b113 	.word	0x0800b113
 800b08c:	0800b113 	.word	0x0800b113
 800b090:	0800b113 	.word	0x0800b113
 800b094:	0800b113 	.word	0x0800b113
 800b098:	0800b113 	.word	0x0800b113
 800b09c:	0800b0cf 	.word	0x0800b0cf
 800b0a0:	0800b0f9 	.word	0x0800b0f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d107      	bne.n	800b0c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b0b0:	f107 030a 	add.w	r3, r7, #10
 800b0b4:	2202      	movs	r2, #2
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 fd57 	bl	800cb6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0be:	e032      	b.n	800b126 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f001 fce1 	bl	800ca8a <USBD_CtlError>
            ret = USBD_FAIL;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	75fb      	strb	r3, [r7, #23]
          break;
 800b0cc:	e02b      	b.n	800b126 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d107      	bne.n	800b0ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0da:	f107 030d 	add.w	r3, r7, #13
 800b0de:	2201      	movs	r2, #1
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f001 fd42 	bl	800cb6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0e8:	e01d      	b.n	800b126 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 fccc 	bl	800ca8a <USBD_CtlError>
            ret = USBD_FAIL;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b0f6:	e016      	b.n	800b126 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b03      	cmp	r3, #3
 800b102:	d00f      	beq.n	800b124 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f001 fcbf 	bl	800ca8a <USBD_CtlError>
            ret = USBD_FAIL;
 800b10c:	2303      	movs	r3, #3
 800b10e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b110:	e008      	b.n	800b124 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f001 fcb8 	bl	800ca8a <USBD_CtlError>
          ret = USBD_FAIL;
 800b11a:	2303      	movs	r3, #3
 800b11c:	75fb      	strb	r3, [r7, #23]
          break;
 800b11e:	e002      	b.n	800b126 <USBD_CDC_Setup+0x19e>
          break;
 800b120:	bf00      	nop
 800b122:	e008      	b.n	800b136 <USBD_CDC_Setup+0x1ae>
          break;
 800b124:	bf00      	nop
      }
      break;
 800b126:	e006      	b.n	800b136 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 fcad 	bl	800ca8a <USBD_CtlError>
      ret = USBD_FAIL;
 800b130:	2303      	movs	r3, #3
 800b132:	75fb      	strb	r3, [r7, #23]
      break;
 800b134:	bf00      	nop
  }

  return (uint8_t)ret;
 800b136:	7dfb      	ldrb	r3, [r7, #23]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b152:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	32b0      	adds	r2, #176	; 0xb0
 800b15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b166:	2303      	movs	r3, #3
 800b168:	e065      	b.n	800b236 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	32b0      	adds	r2, #176	; 0xb0
 800b174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b178:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b17a:	78fb      	ldrb	r3, [r7, #3]
 800b17c:	f003 020f 	and.w	r2, r3, #15
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	440b      	add	r3, r1
 800b18c:	3318      	adds	r3, #24
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d02f      	beq.n	800b1f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	f003 020f 	and.w	r2, r3, #15
 800b19a:	6879      	ldr	r1, [r7, #4]
 800b19c:	4613      	mov	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	440b      	add	r3, r1
 800b1a6:	3318      	adds	r3, #24
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	78fb      	ldrb	r3, [r7, #3]
 800b1ac:	f003 010f 	and.w	r1, r3, #15
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	440b      	add	r3, r1
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4403      	add	r3, r0
 800b1bc:	3348      	adds	r3, #72	; 0x48
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1c4:	fb01 f303 	mul.w	r3, r1, r3
 800b1c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d112      	bne.n	800b1f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b1ce:	78fb      	ldrb	r3, [r7, #3]
 800b1d0:	f003 020f 	and.w	r2, r3, #15
 800b1d4:	6879      	ldr	r1, [r7, #4]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	440b      	add	r3, r1
 800b1e0:	3318      	adds	r3, #24
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1e6:	78f9      	ldrb	r1, [r7, #3]
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f005 fa6c 	bl	80106ca <USBD_LL_Transmit>
 800b1f2:	e01f      	b.n	800b234 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	33b0      	adds	r3, #176	; 0xb0
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d010      	beq.n	800b234 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	33b0      	adds	r3, #176	; 0xb0
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b230:	78fa      	ldrb	r2, [r7, #3]
 800b232:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	460b      	mov	r3, r1
 800b248:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	32b0      	adds	r2, #176	; 0xb0
 800b254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b258:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	32b0      	adds	r2, #176	; 0xb0
 800b264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e01a      	b.n	800b2a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f005 fa6a 	bl	801074e <USBD_LL_GetRxDataSize>
 800b27a:	4602      	mov	r2, r0
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	33b0      	adds	r3, #176	; 0xb0
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4413      	add	r3, r2
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b2a0:	4611      	mov	r1, r2
 800b2a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b084      	sub	sp, #16
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	32b0      	adds	r2, #176	; 0xb0
 800b2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e025      	b.n	800b31c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	33b0      	adds	r3, #176	; 0xb0
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01a      	beq.n	800b31a <USBD_CDC_EP0_RxReady+0x6c>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b2ea:	2bff      	cmp	r3, #255	; 0xff
 800b2ec:	d015      	beq.n	800b31a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	33b0      	adds	r3, #176	; 0xb0
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b306:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b30e:	b292      	uxth	r2, r2
 800b310:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	22ff      	movs	r2, #255	; 0xff
 800b316:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b32c:	2182      	movs	r1, #130	; 0x82
 800b32e:	4818      	ldr	r0, [pc, #96]	; (800b390 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b330:	f000 fd49 	bl	800bdc6 <USBD_GetEpDesc>
 800b334:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b336:	2101      	movs	r1, #1
 800b338:	4815      	ldr	r0, [pc, #84]	; (800b390 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b33a:	f000 fd44 	bl	800bdc6 <USBD_GetEpDesc>
 800b33e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b340:	2181      	movs	r1, #129	; 0x81
 800b342:	4813      	ldr	r0, [pc, #76]	; (800b390 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b344:	f000 fd3f 	bl	800bdc6 <USBD_GetEpDesc>
 800b348:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2210      	movs	r2, #16
 800b354:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d006      	beq.n	800b36a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	2200      	movs	r2, #0
 800b360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b364:	711a      	strb	r2, [r3, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d006      	beq.n	800b37e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b378:	711a      	strb	r2, [r3, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2243      	movs	r2, #67	; 0x43
 800b382:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b384:	4b02      	ldr	r3, [pc, #8]	; (800b390 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b386:	4618      	mov	r0, r3
 800b388:	3718      	adds	r7, #24
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000054 	.word	0x20000054

0800b394 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b39c:	2182      	movs	r1, #130	; 0x82
 800b39e:	4818      	ldr	r0, [pc, #96]	; (800b400 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3a0:	f000 fd11 	bl	800bdc6 <USBD_GetEpDesc>
 800b3a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3a6:	2101      	movs	r1, #1
 800b3a8:	4815      	ldr	r0, [pc, #84]	; (800b400 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3aa:	f000 fd0c 	bl	800bdc6 <USBD_GetEpDesc>
 800b3ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3b0:	2181      	movs	r1, #129	; 0x81
 800b3b2:	4813      	ldr	r0, [pc, #76]	; (800b400 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3b4:	f000 fd07 	bl	800bdc6 <USBD_GetEpDesc>
 800b3b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	2210      	movs	r2, #16
 800b3c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d006      	beq.n	800b3da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	711a      	strb	r2, [r3, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f042 0202 	orr.w	r2, r2, #2
 800b3d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d006      	beq.n	800b3ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	711a      	strb	r2, [r3, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f042 0202 	orr.w	r2, r2, #2
 800b3ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2243      	movs	r2, #67	; 0x43
 800b3f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3f4:	4b02      	ldr	r3, [pc, #8]	; (800b400 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20000054 	.word	0x20000054

0800b404 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b40c:	2182      	movs	r1, #130	; 0x82
 800b40e:	4818      	ldr	r0, [pc, #96]	; (800b470 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b410:	f000 fcd9 	bl	800bdc6 <USBD_GetEpDesc>
 800b414:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b416:	2101      	movs	r1, #1
 800b418:	4815      	ldr	r0, [pc, #84]	; (800b470 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b41a:	f000 fcd4 	bl	800bdc6 <USBD_GetEpDesc>
 800b41e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b420:	2181      	movs	r1, #129	; 0x81
 800b422:	4813      	ldr	r0, [pc, #76]	; (800b470 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b424:	f000 fccf 	bl	800bdc6 <USBD_GetEpDesc>
 800b428:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2210      	movs	r2, #16
 800b434:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d006      	beq.n	800b44a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	2200      	movs	r2, #0
 800b440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b444:	711a      	strb	r2, [r3, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d006      	beq.n	800b45e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b458:	711a      	strb	r2, [r3, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2243      	movs	r2, #67	; 0x43
 800b462:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b464:	4b02      	ldr	r3, [pc, #8]	; (800b470 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b466:	4618      	mov	r0, r3
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000054 	.word	0x20000054

0800b474 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	220a      	movs	r2, #10
 800b480:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b482:	4b03      	ldr	r3, [pc, #12]	; (800b490 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	20000010 	.word	0x20000010

0800b494 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e009      	b.n	800b4bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	33b0      	adds	r3, #176	; 0xb0
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	32b0      	adds	r2, #176	; 0xb0
 800b4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	e008      	b.n	800b500 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	371c      	adds	r7, #28
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	32b0      	adds	r2, #176	; 0xb0
 800b520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b524:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e004      	b.n	800b53a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
	...

0800b548 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	32b0      	adds	r2, #176	; 0xb0
 800b55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b55e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b560:	2301      	movs	r3, #1
 800b562:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b56a:	2303      	movs	r3, #3
 800b56c:	e025      	b.n	800b5ba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b574:	2b00      	cmp	r3, #0
 800b576:	d11f      	bne.n	800b5b8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b580:	4b10      	ldr	r3, [pc, #64]	; (800b5c4 <USBD_CDC_TransmitPacket+0x7c>)
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	f003 020f 	and.w	r2, r3, #15
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	4613      	mov	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4403      	add	r3, r0
 800b59a:	3318      	adds	r3, #24
 800b59c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b59e:	4b09      	ldr	r3, [pc, #36]	; (800b5c4 <USBD_CDC_TransmitPacket+0x7c>)
 800b5a0:	7819      	ldrb	r1, [r3, #0]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f005 f88b 	bl	80106ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20000097 	.word	0x20000097

0800b5c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	32b0      	adds	r2, #176	; 0xb0
 800b5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	32b0      	adds	r2, #176	; 0xb0
 800b5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e018      	b.n	800b628 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	7c1b      	ldrb	r3, [r3, #16]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10a      	bne.n	800b614 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5fe:	4b0c      	ldr	r3, [pc, #48]	; (800b630 <USBD_CDC_ReceivePacket+0x68>)
 800b600:	7819      	ldrb	r1, [r3, #0]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f005 f87d 	bl	801070c <USBD_LL_PrepareReceive>
 800b612:	e008      	b.n	800b626 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b614:	4b06      	ldr	r3, [pc, #24]	; (800b630 <USBD_CDC_ReceivePacket+0x68>)
 800b616:	7819      	ldrb	r1, [r3, #0]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b61e:	2340      	movs	r3, #64	; 0x40
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f005 f873 	bl	801070c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	20000098 	.word	0x20000098

0800b634 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	4613      	mov	r3, r2
 800b640:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d101      	bne.n	800b64c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b648:	2303      	movs	r3, #3
 800b64a:	e01f      	b.n	800b68c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	79fa      	ldrb	r2, [r7, #7]
 800b67e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f004 feed 	bl	8010460 <USBD_LL_Init>
 800b686:	4603      	mov	r3, r0
 800b688:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3718      	adds	r7, #24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e025      	b.n	800b6f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	32ae      	adds	r2, #174	; 0xae
 800b6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00f      	beq.n	800b6e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	32ae      	adds	r2, #174	; 0xae
 800b6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d8:	f107 020e 	add.w	r2, r7, #14
 800b6dc:	4610      	mov	r0, r2
 800b6de:	4798      	blx	r3
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f004 fef5 	bl	80104f8 <USBD_LL_Start>
 800b70e:	4603      	mov	r3, r0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b720:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b722:	4618      	mov	r0, r3
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b084      	sub	sp, #16
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	460b      	mov	r3, r1
 800b738:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b744:	2b00      	cmp	r3, #0
 800b746:	d009      	beq.n	800b75c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	78fa      	ldrb	r2, [r7, #3]
 800b752:	4611      	mov	r1, r2
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	4798      	blx	r3
 800b758:	4603      	mov	r3, r0
 800b75a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	460b      	mov	r3, r1
 800b770:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	78fa      	ldrb	r2, [r7, #3]
 800b780:	4611      	mov	r1, r2
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	4798      	blx	r3
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b78c:	2303      	movs	r3, #3
 800b78e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b790:	7bfb      	ldrb	r3, [r7, #15]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f001 f932 	bl	800ca16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7ce:	f003 031f 	and.w	r3, r3, #31
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d01a      	beq.n	800b80c <USBD_LL_SetupStage+0x72>
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d822      	bhi.n	800b820 <USBD_LL_SetupStage+0x86>
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <USBD_LL_SetupStage+0x4a>
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d00a      	beq.n	800b7f8 <USBD_LL_SetupStage+0x5e>
 800b7e2:	e01d      	b.n	800b820 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fb5f 	bl	800beb0 <USBD_StdDevReq>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b7f6:	e020      	b.n	800b83a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fbc7 	bl	800bf94 <USBD_StdItfReq>
 800b806:	4603      	mov	r3, r0
 800b808:	73fb      	strb	r3, [r7, #15]
      break;
 800b80a:	e016      	b.n	800b83a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fc29 	bl	800c06c <USBD_StdEPReq>
 800b81a:	4603      	mov	r3, r0
 800b81c:	73fb      	strb	r3, [r7, #15]
      break;
 800b81e:	e00c      	b.n	800b83a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b826:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	4619      	mov	r1, r3
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f004 fec2 	bl	80105b8 <USBD_LL_StallEP>
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]
      break;
 800b838:	bf00      	nop
  }

  return ret;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	460b      	mov	r3, r1
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b856:	7afb      	ldrb	r3, [r7, #11]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d16e      	bne.n	800b93a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b862:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	f040 8098 	bne.w	800b9a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	689a      	ldr	r2, [r3, #8]
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d913      	bls.n	800b8a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	689a      	ldr	r2, [r3, #8]
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	1ad2      	subs	r2, r2, r3
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	68da      	ldr	r2, [r3, #12]
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	4293      	cmp	r3, r2
 800b894:	bf28      	it	cs
 800b896:	4613      	movcs	r3, r2
 800b898:	461a      	mov	r2, r3
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f001 f9ae 	bl	800cbfe <USBD_CtlContinueRx>
 800b8a2:	e07d      	b.n	800b9a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8aa:	f003 031f 	and.w	r3, r3, #31
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d014      	beq.n	800b8dc <USBD_LL_DataOutStage+0x98>
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d81d      	bhi.n	800b8f2 <USBD_LL_DataOutStage+0xae>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d002      	beq.n	800b8c0 <USBD_LL_DataOutStage+0x7c>
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d003      	beq.n	800b8c6 <USBD_LL_DataOutStage+0x82>
 800b8be:	e018      	b.n	800b8f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	75bb      	strb	r3, [r7, #22]
            break;
 800b8c4:	e018      	b.n	800b8f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f000 fa5e 	bl	800bd92 <USBD_CoreFindIF>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	75bb      	strb	r3, [r7, #22]
            break;
 800b8da:	e00d      	b.n	800b8f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 fa60 	bl	800bdac <USBD_CoreFindEP>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	75bb      	strb	r3, [r7, #22]
            break;
 800b8f0:	e002      	b.n	800b8f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	75bb      	strb	r3, [r7, #22]
            break;
 800b8f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b8f8:	7dbb      	ldrb	r3, [r7, #22]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d119      	bne.n	800b932 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b03      	cmp	r3, #3
 800b908:	d113      	bne.n	800b932 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b90a:	7dba      	ldrb	r2, [r7, #22]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	32ae      	adds	r2, #174	; 0xae
 800b910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00b      	beq.n	800b932 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b91a:	7dba      	ldrb	r2, [r7, #22]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b922:	7dba      	ldrb	r2, [r7, #22]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	32ae      	adds	r2, #174	; 0xae
 800b928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f001 f974 	bl	800cc20 <USBD_CtlSendStatus>
 800b938:	e032      	b.n	800b9a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b93a:	7afb      	ldrb	r3, [r7, #11]
 800b93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b940:	b2db      	uxtb	r3, r3
 800b942:	4619      	mov	r1, r3
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 fa31 	bl	800bdac <USBD_CoreFindEP>
 800b94a:	4603      	mov	r3, r0
 800b94c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b94e:	7dbb      	ldrb	r3, [r7, #22]
 800b950:	2bff      	cmp	r3, #255	; 0xff
 800b952:	d025      	beq.n	800b9a0 <USBD_LL_DataOutStage+0x15c>
 800b954:	7dbb      	ldrb	r3, [r7, #22]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d122      	bne.n	800b9a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b03      	cmp	r3, #3
 800b964:	d117      	bne.n	800b996 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b966:	7dba      	ldrb	r2, [r7, #22]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	32ae      	adds	r2, #174	; 0xae
 800b96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00f      	beq.n	800b996 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b976:	7dba      	ldrb	r2, [r7, #22]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b97e:	7dba      	ldrb	r2, [r7, #22]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	32ae      	adds	r2, #174	; 0xae
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	7afa      	ldrb	r2, [r7, #11]
 800b98c:	4611      	mov	r1, r2
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	4798      	blx	r3
 800b992:	4603      	mov	r3, r0
 800b994:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	e000      	b.n	800b9a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3718      	adds	r7, #24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b086      	sub	sp, #24
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	60f8      	str	r0, [r7, #12]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	607a      	str	r2, [r7, #4]
 800b9b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b9b8:	7afb      	ldrb	r3, [r7, #11]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d16f      	bne.n	800ba9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3314      	adds	r3, #20
 800b9c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d15a      	bne.n	800ba84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	689a      	ldr	r2, [r3, #8]
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d914      	bls.n	800ba04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	689a      	ldr	r2, [r3, #8]
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	1ad2      	subs	r2, r2, r3
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	6879      	ldr	r1, [r7, #4]
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f001 f8d6 	bl	800cba2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f004 fe85 	bl	801070c <USBD_LL_PrepareReceive>
 800ba02:	e03f      	b.n	800ba84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	68da      	ldr	r2, [r3, #12]
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d11c      	bne.n	800ba4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d316      	bcc.n	800ba4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d20f      	bcs.n	800ba4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f001 f8b7 	bl	800cba2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2100      	movs	r1, #0
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f004 fe62 	bl	801070c <USBD_LL_PrepareReceive>
 800ba48:	e01c      	b.n	800ba84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d10f      	bne.n	800ba76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d009      	beq.n	800ba76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba76:	2180      	movs	r1, #128	; 0x80
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f004 fd9d 	bl	80105b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f001 f8e1 	bl	800cc46 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d03a      	beq.n	800bb04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f7ff fe42 	bl	800b718 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ba9c:	e032      	b.n	800bb04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ba9e:	7afb      	ldrb	r3, [r7, #11]
 800baa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	4619      	mov	r1, r3
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f000 f97f 	bl	800bdac <USBD_CoreFindEP>
 800baae:	4603      	mov	r3, r0
 800bab0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	2bff      	cmp	r3, #255	; 0xff
 800bab6:	d025      	beq.n	800bb04 <USBD_LL_DataInStage+0x15a>
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d122      	bne.n	800bb04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b03      	cmp	r3, #3
 800bac8:	d11c      	bne.n	800bb04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800baca:	7dfa      	ldrb	r2, [r7, #23]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	32ae      	adds	r2, #174	; 0xae
 800bad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d014      	beq.n	800bb04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bada:	7dfa      	ldrb	r2, [r7, #23]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bae2:	7dfa      	ldrb	r2, [r7, #23]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	32ae      	adds	r2, #174	; 0xae
 800bae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	7afa      	ldrb	r2, [r7, #11]
 800baf0:	4611      	mov	r1, r2
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	4798      	blx	r3
 800baf6:	4603      	mov	r3, r0
 800baf8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bafa:	7dbb      	ldrb	r3, [r7, #22]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb00:	7dbb      	ldrb	r3, [r7, #22]
 800bb02:	e000      	b.n	800bb06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d014      	beq.n	800bb74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00e      	beq.n	800bb74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	6852      	ldr	r2, [r2, #4]
 800bb62:	b2d2      	uxtb	r2, r2
 800bb64:	4611      	mov	r1, r2
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	4798      	blx	r3
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb70:	2303      	movs	r3, #3
 800bb72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb74:	2340      	movs	r3, #64	; 0x40
 800bb76:	2200      	movs	r2, #0
 800bb78:	2100      	movs	r1, #0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f004 fcd7 	bl	801052e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2240      	movs	r2, #64	; 0x40
 800bb8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb90:	2340      	movs	r3, #64	; 0x40
 800bb92:	2200      	movs	r2, #0
 800bb94:	2180      	movs	r1, #128	; 0x80
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f004 fcc9 	bl	801052e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2240      	movs	r2, #64	; 0x40
 800bba6:	621a      	str	r2, [r3, #32]

  return ret;
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	460b      	mov	r3, r1
 800bbbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	78fa      	ldrb	r2, [r7, #3]
 800bbc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b083      	sub	sp, #12
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2204      	movs	r2, #4
 800bbec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b083      	sub	sp, #12
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b04      	cmp	r3, #4
 800bc10:	d106      	bne.n	800bc20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b082      	sub	sp, #8
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d110      	bne.n	800bc64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00b      	beq.n	800bc64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d005      	beq.n	800bc64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc5e:	69db      	ldr	r3, [r3, #28]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	460b      	mov	r3, r1
 800bc78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	32ae      	adds	r2, #174	; 0xae
 800bc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e01c      	b.n	800bcca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d115      	bne.n	800bcc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	32ae      	adds	r2, #174	; 0xae
 800bca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	32ae      	adds	r2, #174	; 0xae
 800bcba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcbe:	6a1b      	ldr	r3, [r3, #32]
 800bcc0:	78fa      	ldrb	r2, [r7, #3]
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	32ae      	adds	r2, #174	; 0xae
 800bce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e01c      	b.n	800bd2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	d115      	bne.n	800bd2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	32ae      	adds	r2, #174	; 0xae
 800bd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00b      	beq.n	800bd2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	32ae      	adds	r2, #174	; 0xae
 800bd1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	78fa      	ldrb	r2, [r7, #3]
 800bd26:	4611      	mov	r1, r2
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b083      	sub	sp, #12
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00e      	beq.n	800bd88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	6852      	ldr	r2, [r2, #4]
 800bd76:	b2d2      	uxtb	r2, r2
 800bd78:	4611      	mov	r1, r2
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	4798      	blx	r3
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bd84:	2303      	movs	r3, #3
 800bd86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b083      	sub	sp, #12
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bdb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b086      	sub	sp, #24
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	460b      	mov	r3, r1
 800bdd0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	885b      	ldrh	r3, [r3, #2]
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d920      	bls.n	800be30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bdf6:	e013      	b.n	800be20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bdf8:	f107 030a 	add.w	r3, r7, #10
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6978      	ldr	r0, [r7, #20]
 800be00:	f000 f81b 	bl	800be3a <USBD_GetNextDesc>
 800be04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	785b      	ldrb	r3, [r3, #1]
 800be0a:	2b05      	cmp	r3, #5
 800be0c:	d108      	bne.n	800be20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	789b      	ldrb	r3, [r3, #2]
 800be16:	78fa      	ldrb	r2, [r7, #3]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d008      	beq.n	800be2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800be1c:	2300      	movs	r3, #0
 800be1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	885b      	ldrh	r3, [r3, #2]
 800be24:	b29a      	uxth	r2, r3
 800be26:	897b      	ldrh	r3, [r7, #10]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d8e5      	bhi.n	800bdf8 <USBD_GetEpDesc+0x32>
 800be2c:	e000      	b.n	800be30 <USBD_GetEpDesc+0x6a>
          break;
 800be2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800be30:	693b      	ldr	r3, [r7, #16]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3718      	adds	r7, #24
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b085      	sub	sp, #20
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	881a      	ldrh	r2, [r3, #0]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	b29b      	uxth	r3, r3
 800be52:	4413      	add	r3, r2
 800be54:	b29a      	uxth	r2, r3
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4413      	add	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be66:	68fb      	ldr	r3, [r7, #12]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	3301      	adds	r3, #1
 800be8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be92:	8a3b      	ldrh	r3, [r7, #16]
 800be94:	021b      	lsls	r3, r3, #8
 800be96:	b21a      	sxth	r2, r3
 800be98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	b21b      	sxth	r3, r3
 800bea0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bea2:	89fb      	ldrh	r3, [r7, #14]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	371c      	adds	r7, #28
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bec6:	2b40      	cmp	r3, #64	; 0x40
 800bec8:	d005      	beq.n	800bed6 <USBD_StdDevReq+0x26>
 800beca:	2b40      	cmp	r3, #64	; 0x40
 800becc:	d857      	bhi.n	800bf7e <USBD_StdDevReq+0xce>
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00f      	beq.n	800bef2 <USBD_StdDevReq+0x42>
 800bed2:	2b20      	cmp	r3, #32
 800bed4:	d153      	bne.n	800bf7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	32ae      	adds	r2, #174	; 0xae
 800bee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	4798      	blx	r3
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]
      break;
 800bef0:	e04a      	b.n	800bf88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	785b      	ldrb	r3, [r3, #1]
 800bef6:	2b09      	cmp	r3, #9
 800bef8:	d83b      	bhi.n	800bf72 <USBD_StdDevReq+0xc2>
 800befa:	a201      	add	r2, pc, #4	; (adr r2, 800bf00 <USBD_StdDevReq+0x50>)
 800befc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf00:	0800bf55 	.word	0x0800bf55
 800bf04:	0800bf69 	.word	0x0800bf69
 800bf08:	0800bf73 	.word	0x0800bf73
 800bf0c:	0800bf5f 	.word	0x0800bf5f
 800bf10:	0800bf73 	.word	0x0800bf73
 800bf14:	0800bf33 	.word	0x0800bf33
 800bf18:	0800bf29 	.word	0x0800bf29
 800bf1c:	0800bf73 	.word	0x0800bf73
 800bf20:	0800bf4b 	.word	0x0800bf4b
 800bf24:	0800bf3d 	.word	0x0800bf3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fa3c 	bl	800c3a8 <USBD_GetDescriptor>
          break;
 800bf30:	e024      	b.n	800bf7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fbcb 	bl	800c6d0 <USBD_SetAddress>
          break;
 800bf3a:	e01f      	b.n	800bf7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fc0a 	bl	800c758 <USBD_SetConfig>
 800bf44:	4603      	mov	r3, r0
 800bf46:	73fb      	strb	r3, [r7, #15]
          break;
 800bf48:	e018      	b.n	800bf7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fcad 	bl	800c8ac <USBD_GetConfig>
          break;
 800bf52:	e013      	b.n	800bf7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fcde 	bl	800c918 <USBD_GetStatus>
          break;
 800bf5c:	e00e      	b.n	800bf7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf5e:	6839      	ldr	r1, [r7, #0]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fd0d 	bl	800c980 <USBD_SetFeature>
          break;
 800bf66:	e009      	b.n	800bf7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fd31 	bl	800c9d2 <USBD_ClrFeature>
          break;
 800bf70:	e004      	b.n	800bf7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fd88 	bl	800ca8a <USBD_CtlError>
          break;
 800bf7a:	bf00      	nop
      }
      break;
 800bf7c:	e004      	b.n	800bf88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fd82 	bl	800ca8a <USBD_CtlError>
      break;
 800bf86:	bf00      	nop
  }

  return ret;
 800bf88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop

0800bf94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfaa:	2b40      	cmp	r3, #64	; 0x40
 800bfac:	d005      	beq.n	800bfba <USBD_StdItfReq+0x26>
 800bfae:	2b40      	cmp	r3, #64	; 0x40
 800bfb0:	d852      	bhi.n	800c058 <USBD_StdItfReq+0xc4>
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <USBD_StdItfReq+0x26>
 800bfb6:	2b20      	cmp	r3, #32
 800bfb8:	d14e      	bne.n	800c058 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d840      	bhi.n	800c04a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	889b      	ldrh	r3, [r3, #4]
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d836      	bhi.n	800c040 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	889b      	ldrh	r3, [r3, #4]
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff fed9 	bl	800bd92 <USBD_CoreFindIF>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
 800bfe6:	2bff      	cmp	r3, #255	; 0xff
 800bfe8:	d01d      	beq.n	800c026 <USBD_StdItfReq+0x92>
 800bfea:	7bbb      	ldrb	r3, [r7, #14]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d11a      	bne.n	800c026 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bff0:	7bba      	ldrb	r2, [r7, #14]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	32ae      	adds	r2, #174	; 0xae
 800bff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00f      	beq.n	800c020 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c000:	7bba      	ldrb	r2, [r7, #14]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c008:	7bba      	ldrb	r2, [r7, #14]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	32ae      	adds	r2, #174	; 0xae
 800c00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	4798      	blx	r3
 800c01a:	4603      	mov	r3, r0
 800c01c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c01e:	e004      	b.n	800c02a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c020:	2303      	movs	r3, #3
 800c022:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c024:	e001      	b.n	800c02a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c026:	2303      	movs	r3, #3
 800c028:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	88db      	ldrh	r3, [r3, #6]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d110      	bne.n	800c054 <USBD_StdItfReq+0xc0>
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10d      	bne.n	800c054 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fdf1 	bl	800cc20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c03e:	e009      	b.n	800c054 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fd21 	bl	800ca8a <USBD_CtlError>
          break;
 800c048:	e004      	b.n	800c054 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fd1c 	bl	800ca8a <USBD_CtlError>
          break;
 800c052:	e000      	b.n	800c056 <USBD_StdItfReq+0xc2>
          break;
 800c054:	bf00      	nop
      }
      break;
 800c056:	e004      	b.n	800c062 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fd15 	bl	800ca8a <USBD_CtlError>
      break;
 800c060:	bf00      	nop
  }

  return ret;
 800c062:	7bfb      	ldrb	r3, [r7, #15]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	889b      	ldrh	r3, [r3, #4]
 800c07e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c088:	2b40      	cmp	r3, #64	; 0x40
 800c08a:	d007      	beq.n	800c09c <USBD_StdEPReq+0x30>
 800c08c:	2b40      	cmp	r3, #64	; 0x40
 800c08e:	f200 817f 	bhi.w	800c390 <USBD_StdEPReq+0x324>
 800c092:	2b00      	cmp	r3, #0
 800c094:	d02a      	beq.n	800c0ec <USBD_StdEPReq+0x80>
 800c096:	2b20      	cmp	r3, #32
 800c098:	f040 817a 	bne.w	800c390 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f7ff fe83 	bl	800bdac <USBD_CoreFindEP>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0aa:	7b7b      	ldrb	r3, [r7, #13]
 800c0ac:	2bff      	cmp	r3, #255	; 0xff
 800c0ae:	f000 8174 	beq.w	800c39a <USBD_StdEPReq+0x32e>
 800c0b2:	7b7b      	ldrb	r3, [r7, #13]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f040 8170 	bne.w	800c39a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c0ba:	7b7a      	ldrb	r2, [r7, #13]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c0c2:	7b7a      	ldrb	r2, [r7, #13]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	32ae      	adds	r2, #174	; 0xae
 800c0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f000 8163 	beq.w	800c39a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c0d4:	7b7a      	ldrb	r2, [r7, #13]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	32ae      	adds	r2, #174	; 0xae
 800c0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	4798      	blx	r3
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c0ea:	e156      	b.n	800c39a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	785b      	ldrb	r3, [r3, #1]
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d008      	beq.n	800c106 <USBD_StdEPReq+0x9a>
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	f300 8145 	bgt.w	800c384 <USBD_StdEPReq+0x318>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f000 809b 	beq.w	800c236 <USBD_StdEPReq+0x1ca>
 800c100:	2b01      	cmp	r3, #1
 800c102:	d03c      	beq.n	800c17e <USBD_StdEPReq+0x112>
 800c104:	e13e      	b.n	800c384 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d002      	beq.n	800c118 <USBD_StdEPReq+0xac>
 800c112:	2b03      	cmp	r3, #3
 800c114:	d016      	beq.n	800c144 <USBD_StdEPReq+0xd8>
 800c116:	e02c      	b.n	800c172 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00d      	beq.n	800c13a <USBD_StdEPReq+0xce>
 800c11e:	7bbb      	ldrb	r3, [r7, #14]
 800c120:	2b80      	cmp	r3, #128	; 0x80
 800c122:	d00a      	beq.n	800c13a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c124:	7bbb      	ldrb	r3, [r7, #14]
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f004 fa45 	bl	80105b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c12e:	2180      	movs	r1, #128	; 0x80
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f004 fa41 	bl	80105b8 <USBD_LL_StallEP>
 800c136:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c138:	e020      	b.n	800c17c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fca4 	bl	800ca8a <USBD_CtlError>
              break;
 800c142:	e01b      	b.n	800c17c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	885b      	ldrh	r3, [r3, #2]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10e      	bne.n	800c16a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c14c:	7bbb      	ldrb	r3, [r7, #14]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00b      	beq.n	800c16a <USBD_StdEPReq+0xfe>
 800c152:	7bbb      	ldrb	r3, [r7, #14]
 800c154:	2b80      	cmp	r3, #128	; 0x80
 800c156:	d008      	beq.n	800c16a <USBD_StdEPReq+0xfe>
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	88db      	ldrh	r3, [r3, #6]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d104      	bne.n	800c16a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f004 fa27 	bl	80105b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fd58 	bl	800cc20 <USBD_CtlSendStatus>

              break;
 800c170:	e004      	b.n	800c17c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fc88 	bl	800ca8a <USBD_CtlError>
              break;
 800c17a:	bf00      	nop
          }
          break;
 800c17c:	e107      	b.n	800c38e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b02      	cmp	r3, #2
 800c188:	d002      	beq.n	800c190 <USBD_StdEPReq+0x124>
 800c18a:	2b03      	cmp	r3, #3
 800c18c:	d016      	beq.n	800c1bc <USBD_StdEPReq+0x150>
 800c18e:	e04b      	b.n	800c228 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00d      	beq.n	800c1b2 <USBD_StdEPReq+0x146>
 800c196:	7bbb      	ldrb	r3, [r7, #14]
 800c198:	2b80      	cmp	r3, #128	; 0x80
 800c19a:	d00a      	beq.n	800c1b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f004 fa09 	bl	80105b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1a6:	2180      	movs	r1, #128	; 0x80
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f004 fa05 	bl	80105b8 <USBD_LL_StallEP>
 800c1ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1b0:	e040      	b.n	800c234 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fc68 	bl	800ca8a <USBD_CtlError>
              break;
 800c1ba:	e03b      	b.n	800c234 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	885b      	ldrh	r3, [r3, #2]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d136      	bne.n	800c232 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c1c4:	7bbb      	ldrb	r3, [r7, #14]
 800c1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d004      	beq.n	800c1d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c1ce:	7bbb      	ldrb	r3, [r7, #14]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f004 fa0f 	bl	80105f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fd21 	bl	800cc20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff fde2 	bl	800bdac <USBD_CoreFindEP>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1ec:	7b7b      	ldrb	r3, [r7, #13]
 800c1ee:	2bff      	cmp	r3, #255	; 0xff
 800c1f0:	d01f      	beq.n	800c232 <USBD_StdEPReq+0x1c6>
 800c1f2:	7b7b      	ldrb	r3, [r7, #13]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d11c      	bne.n	800c232 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c1f8:	7b7a      	ldrb	r2, [r7, #13]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c200:	7b7a      	ldrb	r2, [r7, #13]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	32ae      	adds	r2, #174	; 0xae
 800c206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d010      	beq.n	800c232 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c210:	7b7a      	ldrb	r2, [r7, #13]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	32ae      	adds	r2, #174	; 0xae
 800c216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	4798      	blx	r3
 800c222:	4603      	mov	r3, r0
 800c224:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c226:	e004      	b.n	800c232 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c228:	6839      	ldr	r1, [r7, #0]
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 fc2d 	bl	800ca8a <USBD_CtlError>
              break;
 800c230:	e000      	b.n	800c234 <USBD_StdEPReq+0x1c8>
              break;
 800c232:	bf00      	nop
          }
          break;
 800c234:	e0ab      	b.n	800c38e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d002      	beq.n	800c248 <USBD_StdEPReq+0x1dc>
 800c242:	2b03      	cmp	r3, #3
 800c244:	d032      	beq.n	800c2ac <USBD_StdEPReq+0x240>
 800c246:	e097      	b.n	800c378 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c248:	7bbb      	ldrb	r3, [r7, #14]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d007      	beq.n	800c25e <USBD_StdEPReq+0x1f2>
 800c24e:	7bbb      	ldrb	r3, [r7, #14]
 800c250:	2b80      	cmp	r3, #128	; 0x80
 800c252:	d004      	beq.n	800c25e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fc17 	bl	800ca8a <USBD_CtlError>
                break;
 800c25c:	e091      	b.n	800c382 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c25e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c262:	2b00      	cmp	r3, #0
 800c264:	da0b      	bge.n	800c27e <USBD_StdEPReq+0x212>
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c26c:	4613      	mov	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4413      	add	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	3310      	adds	r3, #16
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	4413      	add	r3, r2
 800c27a:	3304      	adds	r3, #4
 800c27c:	e00b      	b.n	800c296 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c27e:	7bbb      	ldrb	r3, [r7, #14]
 800c280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c284:	4613      	mov	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	4413      	add	r3, r2
 800c294:	3304      	adds	r3, #4
 800c296:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2200      	movs	r2, #0
 800c29c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 fc61 	bl	800cb6c <USBD_CtlSendData>
              break;
 800c2aa:	e06a      	b.n	800c382 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c2ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da11      	bge.n	800c2d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	f003 020f 	and.w	r2, r3, #15
 800c2ba:	6879      	ldr	r1, [r7, #4]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	440b      	add	r3, r1
 800c2c6:	3324      	adds	r3, #36	; 0x24
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d117      	bne.n	800c2fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fbda 	bl	800ca8a <USBD_CtlError>
                  break;
 800c2d6:	e054      	b.n	800c382 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	f003 020f 	and.w	r2, r3, #15
 800c2de:	6879      	ldr	r1, [r7, #4]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	4413      	add	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	440b      	add	r3, r1
 800c2ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d104      	bne.n	800c2fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fbc7 	bl	800ca8a <USBD_CtlError>
                  break;
 800c2fc:	e041      	b.n	800c382 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c302:	2b00      	cmp	r3, #0
 800c304:	da0b      	bge.n	800c31e <USBD_StdEPReq+0x2b2>
 800c306:	7bbb      	ldrb	r3, [r7, #14]
 800c308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c30c:	4613      	mov	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	4413      	add	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	3310      	adds	r3, #16
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	4413      	add	r3, r2
 800c31a:	3304      	adds	r3, #4
 800c31c:	e00b      	b.n	800c336 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
 800c320:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c324:	4613      	mov	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	4413      	add	r3, r2
 800c334:	3304      	adds	r3, #4
 800c336:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c338:	7bbb      	ldrb	r3, [r7, #14]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d002      	beq.n	800c344 <USBD_StdEPReq+0x2d8>
 800c33e:	7bbb      	ldrb	r3, [r7, #14]
 800c340:	2b80      	cmp	r3, #128	; 0x80
 800c342:	d103      	bne.n	800c34c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	2200      	movs	r2, #0
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	e00e      	b.n	800c36a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f004 f96f 	bl	8010634 <USBD_LL_IsStallEP>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d003      	beq.n	800c364 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2201      	movs	r2, #1
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	e002      	b.n	800c36a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	2200      	movs	r2, #0
 800c368:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2202      	movs	r2, #2
 800c36e:	4619      	mov	r1, r3
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 fbfb 	bl	800cb6c <USBD_CtlSendData>
              break;
 800c376:	e004      	b.n	800c382 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c378:	6839      	ldr	r1, [r7, #0]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fb85 	bl	800ca8a <USBD_CtlError>
              break;
 800c380:	bf00      	nop
          }
          break;
 800c382:	e004      	b.n	800c38e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 fb7f 	bl	800ca8a <USBD_CtlError>
          break;
 800c38c:	bf00      	nop
      }
      break;
 800c38e:	e005      	b.n	800c39c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fb79 	bl	800ca8a <USBD_CtlError>
      break;
 800c398:	e000      	b.n	800c39c <USBD_StdEPReq+0x330>
      break;
 800c39a:	bf00      	nop
  }

  return ret;
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
	...

0800c3a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	885b      	ldrh	r3, [r3, #2]
 800c3c2:	0a1b      	lsrs	r3, r3, #8
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	2b0e      	cmp	r3, #14
 800c3ca:	f200 8152 	bhi.w	800c672 <USBD_GetDescriptor+0x2ca>
 800c3ce:	a201      	add	r2, pc, #4	; (adr r2, 800c3d4 <USBD_GetDescriptor+0x2c>)
 800c3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d4:	0800c445 	.word	0x0800c445
 800c3d8:	0800c45d 	.word	0x0800c45d
 800c3dc:	0800c49d 	.word	0x0800c49d
 800c3e0:	0800c673 	.word	0x0800c673
 800c3e4:	0800c673 	.word	0x0800c673
 800c3e8:	0800c613 	.word	0x0800c613
 800c3ec:	0800c63f 	.word	0x0800c63f
 800c3f0:	0800c673 	.word	0x0800c673
 800c3f4:	0800c673 	.word	0x0800c673
 800c3f8:	0800c673 	.word	0x0800c673
 800c3fc:	0800c673 	.word	0x0800c673
 800c400:	0800c673 	.word	0x0800c673
 800c404:	0800c673 	.word	0x0800c673
 800c408:	0800c673 	.word	0x0800c673
 800c40c:	0800c411 	.word	0x0800c411
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c416:	69db      	ldr	r3, [r3, #28]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00b      	beq.n	800c434 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c422:	69db      	ldr	r3, [r3, #28]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	7c12      	ldrb	r2, [r2, #16]
 800c428:	f107 0108 	add.w	r1, r7, #8
 800c42c:	4610      	mov	r0, r2
 800c42e:	4798      	blx	r3
 800c430:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c432:	e126      	b.n	800c682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fb27 	bl	800ca8a <USBD_CtlError>
        err++;
 800c43c:	7afb      	ldrb	r3, [r7, #11]
 800c43e:	3301      	adds	r3, #1
 800c440:	72fb      	strb	r3, [r7, #11]
      break;
 800c442:	e11e      	b.n	800c682 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	7c12      	ldrb	r2, [r2, #16]
 800c450:	f107 0108 	add.w	r1, r7, #8
 800c454:	4610      	mov	r0, r2
 800c456:	4798      	blx	r3
 800c458:	60f8      	str	r0, [r7, #12]
      break;
 800c45a:	e112      	b.n	800c682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7c1b      	ldrb	r3, [r3, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10d      	bne.n	800c480 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46c:	f107 0208 	add.w	r2, r7, #8
 800c470:	4610      	mov	r0, r2
 800c472:	4798      	blx	r3
 800c474:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3301      	adds	r3, #1
 800c47a:	2202      	movs	r2, #2
 800c47c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c47e:	e100      	b.n	800c682 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c488:	f107 0208 	add.w	r2, r7, #8
 800c48c:	4610      	mov	r0, r2
 800c48e:	4798      	blx	r3
 800c490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3301      	adds	r3, #1
 800c496:	2202      	movs	r2, #2
 800c498:	701a      	strb	r2, [r3, #0]
      break;
 800c49a:	e0f2      	b.n	800c682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	885b      	ldrh	r3, [r3, #2]
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	2b05      	cmp	r3, #5
 800c4a4:	f200 80ac 	bhi.w	800c600 <USBD_GetDescriptor+0x258>
 800c4a8:	a201      	add	r2, pc, #4	; (adr r2, 800c4b0 <USBD_GetDescriptor+0x108>)
 800c4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ae:	bf00      	nop
 800c4b0:	0800c4c9 	.word	0x0800c4c9
 800c4b4:	0800c4fd 	.word	0x0800c4fd
 800c4b8:	0800c531 	.word	0x0800c531
 800c4bc:	0800c565 	.word	0x0800c565
 800c4c0:	0800c599 	.word	0x0800c599
 800c4c4:	0800c5cd 	.word	0x0800c5cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00b      	beq.n	800c4ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	7c12      	ldrb	r2, [r2, #16]
 800c4e0:	f107 0108 	add.w	r1, r7, #8
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	4798      	blx	r3
 800c4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ea:	e091      	b.n	800c610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 facb 	bl	800ca8a <USBD_CtlError>
            err++;
 800c4f4:	7afb      	ldrb	r3, [r7, #11]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4fa:	e089      	b.n	800c610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00b      	beq.n	800c520 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	7c12      	ldrb	r2, [r2, #16]
 800c514:	f107 0108 	add.w	r1, r7, #8
 800c518:	4610      	mov	r0, r2
 800c51a:	4798      	blx	r3
 800c51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c51e:	e077      	b.n	800c610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c520:	6839      	ldr	r1, [r7, #0]
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fab1 	bl	800ca8a <USBD_CtlError>
            err++;
 800c528:	7afb      	ldrb	r3, [r7, #11]
 800c52a:	3301      	adds	r3, #1
 800c52c:	72fb      	strb	r3, [r7, #11]
          break;
 800c52e:	e06f      	b.n	800c610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00b      	beq.n	800c554 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	7c12      	ldrb	r2, [r2, #16]
 800c548:	f107 0108 	add.w	r1, r7, #8
 800c54c:	4610      	mov	r0, r2
 800c54e:	4798      	blx	r3
 800c550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c552:	e05d      	b.n	800c610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c554:	6839      	ldr	r1, [r7, #0]
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fa97 	bl	800ca8a <USBD_CtlError>
            err++;
 800c55c:	7afb      	ldrb	r3, [r7, #11]
 800c55e:	3301      	adds	r3, #1
 800c560:	72fb      	strb	r3, [r7, #11]
          break;
 800c562:	e055      	b.n	800c610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00b      	beq.n	800c588 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c576:	691b      	ldr	r3, [r3, #16]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	7c12      	ldrb	r2, [r2, #16]
 800c57c:	f107 0108 	add.w	r1, r7, #8
 800c580:	4610      	mov	r0, r2
 800c582:	4798      	blx	r3
 800c584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c586:	e043      	b.n	800c610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fa7d 	bl	800ca8a <USBD_CtlError>
            err++;
 800c590:	7afb      	ldrb	r3, [r7, #11]
 800c592:	3301      	adds	r3, #1
 800c594:	72fb      	strb	r3, [r7, #11]
          break;
 800c596:	e03b      	b.n	800c610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59e:	695b      	ldr	r3, [r3, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00b      	beq.n	800c5bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	7c12      	ldrb	r2, [r2, #16]
 800c5b0:	f107 0108 	add.w	r1, r7, #8
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	4798      	blx	r3
 800c5b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ba:	e029      	b.n	800c610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fa63 	bl	800ca8a <USBD_CtlError>
            err++;
 800c5c4:	7afb      	ldrb	r3, [r7, #11]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ca:	e021      	b.n	800c610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5d2:	699b      	ldr	r3, [r3, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00b      	beq.n	800c5f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5de:	699b      	ldr	r3, [r3, #24]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	7c12      	ldrb	r2, [r2, #16]
 800c5e4:	f107 0108 	add.w	r1, r7, #8
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	4798      	blx	r3
 800c5ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ee:	e00f      	b.n	800c610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fa49 	bl	800ca8a <USBD_CtlError>
            err++;
 800c5f8:	7afb      	ldrb	r3, [r7, #11]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c5fe:	e007      	b.n	800c610 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fa41 	bl	800ca8a <USBD_CtlError>
          err++;
 800c608:	7afb      	ldrb	r3, [r7, #11]
 800c60a:	3301      	adds	r3, #1
 800c60c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c60e:	bf00      	nop
      }
      break;
 800c610:	e037      	b.n	800c682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	7c1b      	ldrb	r3, [r3, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d109      	bne.n	800c62e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c622:	f107 0208 	add.w	r2, r7, #8
 800c626:	4610      	mov	r0, r2
 800c628:	4798      	blx	r3
 800c62a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c62c:	e029      	b.n	800c682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fa2a 	bl	800ca8a <USBD_CtlError>
        err++;
 800c636:	7afb      	ldrb	r3, [r7, #11]
 800c638:	3301      	adds	r3, #1
 800c63a:	72fb      	strb	r3, [r7, #11]
      break;
 800c63c:	e021      	b.n	800c682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	7c1b      	ldrb	r3, [r3, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10d      	bne.n	800c662 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64e:	f107 0208 	add.w	r2, r7, #8
 800c652:	4610      	mov	r0, r2
 800c654:	4798      	blx	r3
 800c656:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3301      	adds	r3, #1
 800c65c:	2207      	movs	r2, #7
 800c65e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c660:	e00f      	b.n	800c682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fa10 	bl	800ca8a <USBD_CtlError>
        err++;
 800c66a:	7afb      	ldrb	r3, [r7, #11]
 800c66c:	3301      	adds	r3, #1
 800c66e:	72fb      	strb	r3, [r7, #11]
      break;
 800c670:	e007      	b.n	800c682 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fa08 	bl	800ca8a <USBD_CtlError>
      err++;
 800c67a:	7afb      	ldrb	r3, [r7, #11]
 800c67c:	3301      	adds	r3, #1
 800c67e:	72fb      	strb	r3, [r7, #11]
      break;
 800c680:	bf00      	nop
  }

  if (err != 0U)
 800c682:	7afb      	ldrb	r3, [r7, #11]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d11e      	bne.n	800c6c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	88db      	ldrh	r3, [r3, #6]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d016      	beq.n	800c6be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c690:	893b      	ldrh	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00e      	beq.n	800c6b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	88da      	ldrh	r2, [r3, #6]
 800c69a:	893b      	ldrh	r3, [r7, #8]
 800c69c:	4293      	cmp	r3, r2
 800c69e:	bf28      	it	cs
 800c6a0:	4613      	movcs	r3, r2
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c6a6:	893b      	ldrh	r3, [r7, #8]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	68f9      	ldr	r1, [r7, #12]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fa5d 	bl	800cb6c <USBD_CtlSendData>
 800c6b2:	e009      	b.n	800c6c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f9e7 	bl	800ca8a <USBD_CtlError>
 800c6bc:	e004      	b.n	800c6c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 faae 	bl	800cc20 <USBD_CtlSendStatus>
 800c6c4:	e000      	b.n	800c6c8 <USBD_GetDescriptor+0x320>
    return;
 800c6c6:	bf00      	nop
  }
}
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop

0800c6d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	889b      	ldrh	r3, [r3, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d131      	bne.n	800c746 <USBD_SetAddress+0x76>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	88db      	ldrh	r3, [r3, #6]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d12d      	bne.n	800c746 <USBD_SetAddress+0x76>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	885b      	ldrh	r3, [r3, #2]
 800c6ee:	2b7f      	cmp	r3, #127	; 0x7f
 800c6f0:	d829      	bhi.n	800c746 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	885b      	ldrh	r3, [r3, #2]
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b03      	cmp	r3, #3
 800c708:	d104      	bne.n	800c714 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 f9bc 	bl	800ca8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c712:	e01d      	b.n	800c750 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	7bfa      	ldrb	r2, [r7, #15]
 800c718:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f003 ffb3 	bl	801068c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fa7a 	bl	800cc20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d004      	beq.n	800c73c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2202      	movs	r2, #2
 800c736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c73a:	e009      	b.n	800c750 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c744:	e004      	b.n	800c750 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f99e 	bl	800ca8a <USBD_CtlError>
  }
}
 800c74e:	bf00      	nop
 800c750:	bf00      	nop
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	885b      	ldrh	r3, [r3, #2]
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	4b4e      	ldr	r3, [pc, #312]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c76e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c770:	4b4d      	ldr	r3, [pc, #308]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d905      	bls.n	800c784 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f985 	bl	800ca8a <USBD_CtlError>
    return USBD_FAIL;
 800c780:	2303      	movs	r3, #3
 800c782:	e08c      	b.n	800c89e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d002      	beq.n	800c796 <USBD_SetConfig+0x3e>
 800c790:	2b03      	cmp	r3, #3
 800c792:	d029      	beq.n	800c7e8 <USBD_SetConfig+0x90>
 800c794:	e075      	b.n	800c882 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c796:	4b44      	ldr	r3, [pc, #272]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d020      	beq.n	800c7e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c79e:	4b42      	ldr	r3, [pc, #264]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7a8:	4b3f      	ldr	r3, [pc, #252]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7fe ffbd 	bl	800b72e <USBD_SetClassConfig>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d008      	beq.n	800c7d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c7be:	6839      	ldr	r1, [r7, #0]
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 f962 	bl	800ca8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c7ce:	e065      	b.n	800c89c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fa25 	bl	800cc20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2203      	movs	r2, #3
 800c7da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c7de:	e05d      	b.n	800c89c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fa1d 	bl	800cc20 <USBD_CtlSendStatus>
      break;
 800c7e6:	e059      	b.n	800c89c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c7e8:	4b2f      	ldr	r3, [pc, #188]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d112      	bne.n	800c816 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c7f8:	4b2b      	ldr	r3, [pc, #172]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c802:	4b29      	ldr	r3, [pc, #164]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7fe ffac 	bl	800b766 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fa06 	bl	800cc20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c814:	e042      	b.n	800c89c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c816:	4b24      	ldr	r3, [pc, #144]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	461a      	mov	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	429a      	cmp	r2, r3
 800c822:	d02a      	beq.n	800c87a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	4619      	mov	r1, r3
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7fe ff9a 	bl	800b766 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c832:	4b1d      	ldr	r3, [pc, #116]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	461a      	mov	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c83c:	4b1a      	ldr	r3, [pc, #104]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7fe ff73 	bl	800b72e <USBD_SetClassConfig>
 800c848:	4603      	mov	r3, r0
 800c84a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00f      	beq.n	800c872 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f918 	bl	800ca8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7fe ff7f 	bl	800b766 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2202      	movs	r2, #2
 800c86c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c870:	e014      	b.n	800c89c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f9d4 	bl	800cc20 <USBD_CtlSendStatus>
      break;
 800c878:	e010      	b.n	800c89c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f9d0 	bl	800cc20 <USBD_CtlSendStatus>
      break;
 800c880:	e00c      	b.n	800c89c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f900 	bl	800ca8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c88a:	4b07      	ldr	r3, [pc, #28]	; (800c8a8 <USBD_SetConfig+0x150>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	4619      	mov	r1, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7fe ff68 	bl	800b766 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c896:	2303      	movs	r3, #3
 800c898:	73fb      	strb	r3, [r7, #15]
      break;
 800c89a:	bf00      	nop
  }

  return ret;
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20002988 	.word	0x20002988

0800c8ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	88db      	ldrh	r3, [r3, #6]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d004      	beq.n	800c8c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c8be:	6839      	ldr	r1, [r7, #0]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f8e2 	bl	800ca8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c8c6:	e023      	b.n	800c910 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	dc02      	bgt.n	800c8da <USBD_GetConfig+0x2e>
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	dc03      	bgt.n	800c8e0 <USBD_GetConfig+0x34>
 800c8d8:	e015      	b.n	800c906 <USBD_GetConfig+0x5a>
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	d00b      	beq.n	800c8f6 <USBD_GetConfig+0x4a>
 800c8de:	e012      	b.n	800c906 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3308      	adds	r3, #8
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f93c 	bl	800cb6c <USBD_CtlSendData>
        break;
 800c8f4:	e00c      	b.n	800c910 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f934 	bl	800cb6c <USBD_CtlSendData>
        break;
 800c904:	e004      	b.n	800c910 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f8be 	bl	800ca8a <USBD_CtlError>
        break;
 800c90e:	bf00      	nop
}
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	3b01      	subs	r3, #1
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d81e      	bhi.n	800c96e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	88db      	ldrh	r3, [r3, #6]
 800c934:	2b02      	cmp	r3, #2
 800c936:	d004      	beq.n	800c942 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c938:	6839      	ldr	r1, [r7, #0]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f8a5 	bl	800ca8a <USBD_CtlError>
        break;
 800c940:	e01a      	b.n	800c978 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2201      	movs	r2, #1
 800c946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d005      	beq.n	800c95e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	f043 0202 	orr.w	r2, r3, #2
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	330c      	adds	r3, #12
 800c962:	2202      	movs	r2, #2
 800c964:	4619      	mov	r1, r3
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f900 	bl	800cb6c <USBD_CtlSendData>
      break;
 800c96c:	e004      	b.n	800c978 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c96e:	6839      	ldr	r1, [r7, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f88a 	bl	800ca8a <USBD_CtlError>
      break;
 800c976:	bf00      	nop
  }
}
 800c978:	bf00      	nop
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	885b      	ldrh	r3, [r3, #2]
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d107      	bne.n	800c9a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2201      	movs	r2, #1
 800c996:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f940 	bl	800cc20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c9a0:	e013      	b.n	800c9ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	885b      	ldrh	r3, [r3, #2]
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d10b      	bne.n	800c9c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	889b      	ldrh	r3, [r3, #4]
 800c9ae:	0a1b      	lsrs	r3, r3, #8
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f930 	bl	800cc20 <USBD_CtlSendStatus>
}
 800c9c0:	e003      	b.n	800c9ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 f860 	bl	800ca8a <USBD_CtlError>
}
 800c9ca:	bf00      	nop
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d80b      	bhi.n	800ca02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	885b      	ldrh	r3, [r3, #2]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d10c      	bne.n	800ca0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 f910 	bl	800cc20 <USBD_CtlSendStatus>
      }
      break;
 800ca00:	e004      	b.n	800ca0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 f840 	bl	800ca8a <USBD_CtlError>
      break;
 800ca0a:	e000      	b.n	800ca0e <USBD_ClrFeature+0x3c>
      break;
 800ca0c:	bf00      	nop
  }
}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	781a      	ldrb	r2, [r3, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	781a      	ldrb	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7ff fa17 	bl	800be74 <SWAPBYTE>
 800ca46:	4603      	mov	r3, r0
 800ca48:	461a      	mov	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3301      	adds	r3, #1
 800ca58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f7ff fa0a 	bl	800be74 <SWAPBYTE>
 800ca60:	4603      	mov	r3, r0
 800ca62:	461a      	mov	r2, r3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	3301      	adds	r3, #1
 800ca72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f7ff f9fd 	bl	800be74 <SWAPBYTE>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	80da      	strh	r2, [r3, #6]
}
 800ca82:	bf00      	nop
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
 800ca92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca94:	2180      	movs	r1, #128	; 0x80
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f003 fd8e 	bl	80105b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f003 fd8a 	bl	80105b8 <USBD_LL_StallEP>
}
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b086      	sub	sp, #24
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cab8:	2300      	movs	r3, #0
 800caba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d036      	beq.n	800cb30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cac6:	6938      	ldr	r0, [r7, #16]
 800cac8:	f000 f836 	bl	800cb38 <USBD_GetLen>
 800cacc:	4603      	mov	r3, r0
 800cace:	3301      	adds	r3, #1
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	005b      	lsls	r3, r3, #1
 800cad4:	b29a      	uxth	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	4413      	add	r3, r2
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	7812      	ldrb	r2, [r2, #0]
 800cae4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
 800cae8:	3301      	adds	r3, #1
 800caea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800caec:	7dfb      	ldrb	r3, [r7, #23]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	4413      	add	r3, r2
 800caf2:	2203      	movs	r2, #3
 800caf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
 800caf8:	3301      	adds	r3, #1
 800cafa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cafc:	e013      	b.n	800cb26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	4413      	add	r3, r2
 800cb04:	693a      	ldr	r2, [r7, #16]
 800cb06:	7812      	ldrb	r2, [r2, #0]
 800cb08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	613b      	str	r3, [r7, #16]
    idx++;
 800cb10:	7dfb      	ldrb	r3, [r7, #23]
 800cb12:	3301      	adds	r3, #1
 800cb14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb16:	7dfb      	ldrb	r3, [r7, #23]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb20:	7dfb      	ldrb	r3, [r7, #23]
 800cb22:	3301      	adds	r3, #1
 800cb24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1e7      	bne.n	800cafe <USBD_GetString+0x52>
 800cb2e:	e000      	b.n	800cb32 <USBD_GetString+0x86>
    return;
 800cb30:	bf00      	nop
  }
}
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb40:	2300      	movs	r3, #0
 800cb42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb48:	e005      	b.n	800cb56 <USBD_GetLen+0x1e>
  {
    len++;
 800cb4a:	7bfb      	ldrb	r3, [r7, #15]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	3301      	adds	r3, #1
 800cb54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1f5      	bne.n	800cb4a <USBD_GetLen+0x12>
  }

  return len;
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3714      	adds	r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2202      	movs	r2, #2
 800cb7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	68ba      	ldr	r2, [r7, #8]
 800cb90:	2100      	movs	r1, #0
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f003 fd99 	bl	80106ca <USBD_LL_Transmit>

  return USBD_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b084      	sub	sp, #16
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	60f8      	str	r0, [r7, #12]
 800cbaa:	60b9      	str	r1, [r7, #8]
 800cbac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f003 fd88 	bl	80106ca <USBD_LL_Transmit>

  return USBD_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2203      	movs	r2, #3
 800cbd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	2100      	movs	r1, #0
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f003 fd8c 	bl	801070c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b084      	sub	sp, #16
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	60f8      	str	r0, [r7, #12]
 800cc06:	60b9      	str	r1, [r7, #8]
 800cc08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	2100      	movs	r1, #0
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f003 fd7b 	bl	801070c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2204      	movs	r2, #4
 800cc2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc30:	2300      	movs	r3, #0
 800cc32:	2200      	movs	r2, #0
 800cc34:	2100      	movs	r1, #0
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f003 fd47 	bl	80106ca <USBD_LL_Transmit>

  return USBD_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b082      	sub	sp, #8
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2205      	movs	r2, #5
 800cc52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc56:	2300      	movs	r3, #0
 800cc58:	2200      	movs	r2, #0
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f003 fd55 	bl	801070c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cc76:	79fb      	ldrb	r3, [r7, #7]
 800cc78:	4a08      	ldr	r2, [pc, #32]	; (800cc9c <disk_status+0x30>)
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4413      	add	r3, r2
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	79fa      	ldrb	r2, [r7, #7]
 800cc84:	4905      	ldr	r1, [pc, #20]	; (800cc9c <disk_status+0x30>)
 800cc86:	440a      	add	r2, r1
 800cc88:	7a12      	ldrb	r2, [r2, #8]
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	4798      	blx	r3
 800cc8e:	4603      	mov	r3, r0
 800cc90:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	20002bb4 	.word	0x20002bb4

0800cca0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ccae:	79fb      	ldrb	r3, [r7, #7]
 800ccb0:	4a0d      	ldr	r2, [pc, #52]	; (800cce8 <disk_initialize+0x48>)
 800ccb2:	5cd3      	ldrb	r3, [r2, r3]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d111      	bne.n	800ccdc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ccb8:	79fb      	ldrb	r3, [r7, #7]
 800ccba:	4a0b      	ldr	r2, [pc, #44]	; (800cce8 <disk_initialize+0x48>)
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	4a09      	ldr	r2, [pc, #36]	; (800cce8 <disk_initialize+0x48>)
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	79fa      	ldrb	r2, [r7, #7]
 800ccce:	4906      	ldr	r1, [pc, #24]	; (800cce8 <disk_initialize+0x48>)
 800ccd0:	440a      	add	r2, r1
 800ccd2:	7a12      	ldrb	r2, [r2, #8]
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	4798      	blx	r3
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	20002bb4 	.word	0x20002bb4

0800ccec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ccec:	b590      	push	{r4, r7, lr}
 800ccee:	b087      	sub	sp, #28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60b9      	str	r1, [r7, #8]
 800ccf4:	607a      	str	r2, [r7, #4]
 800ccf6:	603b      	str	r3, [r7, #0]
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
 800ccfe:	4a0a      	ldr	r2, [pc, #40]	; (800cd28 <disk_read+0x3c>)
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4413      	add	r3, r2
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	689c      	ldr	r4, [r3, #8]
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	4a07      	ldr	r2, [pc, #28]	; (800cd28 <disk_read+0x3c>)
 800cd0c:	4413      	add	r3, r2
 800cd0e:	7a18      	ldrb	r0, [r3, #8]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	68b9      	ldr	r1, [r7, #8]
 800cd16:	47a0      	blx	r4
 800cd18:	4603      	mov	r3, r0
 800cd1a:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	371c      	adds	r7, #28
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd90      	pop	{r4, r7, pc}
 800cd26:	bf00      	nop
 800cd28:	20002bb4 	.word	0x20002bb4

0800cd2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cd2c:	b590      	push	{r4, r7, lr}
 800cd2e:	b087      	sub	sp, #28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60b9      	str	r1, [r7, #8]
 800cd34:	607a      	str	r2, [r7, #4]
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	4603      	mov	r3, r0
 800cd3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
 800cd3e:	4a0a      	ldr	r2, [pc, #40]	; (800cd68 <disk_write+0x3c>)
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	68dc      	ldr	r4, [r3, #12]
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	4a07      	ldr	r2, [pc, #28]	; (800cd68 <disk_write+0x3c>)
 800cd4c:	4413      	add	r3, r2
 800cd4e:	7a18      	ldrb	r0, [r3, #8]
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	68b9      	ldr	r1, [r7, #8]
 800cd56:	47a0      	blx	r4
 800cd58:	4603      	mov	r3, r0
 800cd5a:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	371c      	adds	r7, #28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd90      	pop	{r4, r7, pc}
 800cd66:	bf00      	nop
 800cd68:	20002bb4 	.word	0x20002bb4

0800cd6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	4603      	mov	r3, r0
 800cd74:	603a      	str	r2, [r7, #0]
 800cd76:	71fb      	strb	r3, [r7, #7]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cd7c:	79fb      	ldrb	r3, [r7, #7]
 800cd7e:	4a09      	ldr	r2, [pc, #36]	; (800cda4 <disk_ioctl+0x38>)
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	79fa      	ldrb	r2, [r7, #7]
 800cd8a:	4906      	ldr	r1, [pc, #24]	; (800cda4 <disk_ioctl+0x38>)
 800cd8c:	440a      	add	r2, r1
 800cd8e:	7a10      	ldrb	r0, [r2, #8]
 800cd90:	79b9      	ldrb	r1, [r7, #6]
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	4798      	blx	r3
 800cd96:	4603      	mov	r3, r0
 800cd98:	73fb      	strb	r3, [r7, #15]
  return res;
 800cd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	20002bb4 	.word	0x20002bb4

0800cda8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cdb8:	89fb      	ldrh	r3, [r7, #14]
 800cdba:	021b      	lsls	r3, r3, #8
 800cdbc:	b21a      	sxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	b21b      	sxth	r3, r3
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	b21b      	sxth	r3, r3
 800cdc8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cdca:	89fb      	ldrh	r3, [r7, #14]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3714      	adds	r7, #20
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3303      	adds	r3, #3
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	021b      	lsls	r3, r3, #8
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	3202      	adds	r2, #2
 800cdf0:	7812      	ldrb	r2, [r2, #0]
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	021b      	lsls	r3, r3, #8
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	3201      	adds	r2, #1
 800cdfe:	7812      	ldrb	r2, [r2, #0]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	021b      	lsls	r3, r3, #8
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	7812      	ldrb	r2, [r2, #0]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ce10:	68fb      	ldr	r3, [r7, #12]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3714      	adds	r7, #20
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b083      	sub	sp, #12
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	460b      	mov	r3, r1
 800ce28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	607a      	str	r2, [r7, #4]
 800ce30:	887a      	ldrh	r2, [r7, #2]
 800ce32:	b2d2      	uxtb	r2, r2
 800ce34:	701a      	strb	r2, [r3, #0]
 800ce36:	887b      	ldrh	r3, [r7, #2]
 800ce38:	0a1b      	lsrs	r3, r3, #8
 800ce3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	1c5a      	adds	r2, r3, #1
 800ce40:	607a      	str	r2, [r7, #4]
 800ce42:	887a      	ldrh	r2, [r7, #2]
 800ce44:	b2d2      	uxtb	r2, r2
 800ce46:	701a      	strb	r2, [r3, #0]
}
 800ce48:	bf00      	nop
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	0a1b      	lsrs	r3, r3, #8
 800ce6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	1c5a      	adds	r2, r3, #1
 800ce74:	607a      	str	r2, [r7, #4]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	b2d2      	uxtb	r2, r2
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	0a1b      	lsrs	r3, r3, #8
 800ce80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	1c5a      	adds	r2, r3, #1
 800ce86:	607a      	str	r2, [r7, #4]
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	b2d2      	uxtb	r2, r2
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	0a1b      	lsrs	r3, r3, #8
 800ce92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	1c5a      	adds	r2, r3, #1
 800ce98:	607a      	str	r2, [r7, #4]
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	b2d2      	uxtb	r2, r2
 800ce9e:	701a      	strb	r2, [r3, #0]
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ceac:	b480      	push	{r7}
 800ceae:	b087      	sub	sp, #28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00d      	beq.n	800cee2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cec6:	693a      	ldr	r2, [r7, #16]
 800cec8:	1c53      	adds	r3, r2, #1
 800ceca:	613b      	str	r3, [r7, #16]
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	1c59      	adds	r1, r3, #1
 800ced0:	6179      	str	r1, [r7, #20]
 800ced2:	7812      	ldrb	r2, [r2, #0]
 800ced4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	607b      	str	r3, [r7, #4]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1f1      	bne.n	800cec6 <mem_cpy+0x1a>
	}
}
 800cee2:	bf00      	nop
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ceee:	b480      	push	{r7}
 800cef0:	b087      	sub	sp, #28
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	1c5a      	adds	r2, r3, #1
 800cf02:	617a      	str	r2, [r7, #20]
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	b2d2      	uxtb	r2, r2
 800cf08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	607b      	str	r3, [r7, #4]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1f3      	bne.n	800cefe <mem_set+0x10>
}
 800cf16:	bf00      	nop
 800cf18:	bf00      	nop
 800cf1a:	371c      	adds	r7, #28
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cf24:	b480      	push	{r7}
 800cf26:	b089      	sub	sp, #36	; 0x24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	61fb      	str	r3, [r7, #28]
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	1c5a      	adds	r2, r3, #1
 800cf40:	61fa      	str	r2, [r7, #28]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	4619      	mov	r1, r3
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	1c5a      	adds	r2, r3, #1
 800cf4a:	61ba      	str	r2, [r7, #24]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	1acb      	subs	r3, r1, r3
 800cf50:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	3b01      	subs	r3, #1
 800cf56:	607b      	str	r3, [r7, #4]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d002      	beq.n	800cf64 <mem_cmp+0x40>
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d0eb      	beq.n	800cf3c <mem_cmp+0x18>

	return r;
 800cf64:	697b      	ldr	r3, [r7, #20]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3724      	adds	r7, #36	; 0x24
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cf72:	b480      	push	{r7}
 800cf74:	b083      	sub	sp, #12
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cf7c:	e002      	b.n	800cf84 <chk_chr+0x12>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	3301      	adds	r3, #1
 800cf82:	607b      	str	r3, [r7, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d005      	beq.n	800cf98 <chk_chr+0x26>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	461a      	mov	r2, r3
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d1f2      	bne.n	800cf7e <chk_chr+0xc>
	return *str;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	60bb      	str	r3, [r7, #8]
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	60fb      	str	r3, [r7, #12]
 800cfba:	e029      	b.n	800d010 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cfbc:	4a27      	ldr	r2, [pc, #156]	; (800d05c <chk_lock+0xb4>)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	011b      	lsls	r3, r3, #4
 800cfc2:	4413      	add	r3, r2
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d01d      	beq.n	800d006 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cfca:	4a24      	ldr	r2, [pc, #144]	; (800d05c <chk_lock+0xb4>)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	011b      	lsls	r3, r3, #4
 800cfd0:	4413      	add	r3, r2
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d116      	bne.n	800d00a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cfdc:	4a1f      	ldr	r2, [pc, #124]	; (800d05c <chk_lock+0xb4>)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	011b      	lsls	r3, r3, #4
 800cfe2:	4413      	add	r3, r2
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d10c      	bne.n	800d00a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cff0:	4a1a      	ldr	r2, [pc, #104]	; (800d05c <chk_lock+0xb4>)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	011b      	lsls	r3, r3, #4
 800cff6:	4413      	add	r3, r2
 800cff8:	3308      	adds	r3, #8
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d000:	429a      	cmp	r2, r3
 800d002:	d102      	bne.n	800d00a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d004:	e007      	b.n	800d016 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d006:	2301      	movs	r3, #1
 800d008:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3301      	adds	r3, #1
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d9d2      	bls.n	800cfbc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d109      	bne.n	800d030 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d102      	bne.n	800d028 <chk_lock+0x80>
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	2b02      	cmp	r3, #2
 800d026:	d101      	bne.n	800d02c <chk_lock+0x84>
 800d028:	2300      	movs	r3, #0
 800d02a:	e010      	b.n	800d04e <chk_lock+0xa6>
 800d02c:	2312      	movs	r3, #18
 800d02e:	e00e      	b.n	800d04e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d108      	bne.n	800d048 <chk_lock+0xa0>
 800d036:	4a09      	ldr	r2, [pc, #36]	; (800d05c <chk_lock+0xb4>)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	011b      	lsls	r3, r3, #4
 800d03c:	4413      	add	r3, r2
 800d03e:	330c      	adds	r3, #12
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d046:	d101      	bne.n	800d04c <chk_lock+0xa4>
 800d048:	2310      	movs	r3, #16
 800d04a:	e000      	b.n	800d04e <chk_lock+0xa6>
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3714      	adds	r7, #20
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	20002994 	.word	0x20002994

0800d060 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d066:	2300      	movs	r3, #0
 800d068:	607b      	str	r3, [r7, #4]
 800d06a:	e002      	b.n	800d072 <enq_lock+0x12>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3301      	adds	r3, #1
 800d070:	607b      	str	r3, [r7, #4]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d806      	bhi.n	800d086 <enq_lock+0x26>
 800d078:	4a09      	ldr	r2, [pc, #36]	; (800d0a0 <enq_lock+0x40>)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	011b      	lsls	r3, r3, #4
 800d07e:	4413      	add	r3, r2
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1f2      	bne.n	800d06c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b02      	cmp	r3, #2
 800d08a:	bf14      	ite	ne
 800d08c:	2301      	movne	r3, #1
 800d08e:	2300      	moveq	r3, #0
 800d090:	b2db      	uxtb	r3, r3
}
 800d092:	4618      	mov	r0, r3
 800d094:	370c      	adds	r7, #12
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	20002994 	.word	0x20002994

0800d0a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60fb      	str	r3, [r7, #12]
 800d0b2:	e01f      	b.n	800d0f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d0b4:	4a41      	ldr	r2, [pc, #260]	; (800d1bc <inc_lock+0x118>)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	011b      	lsls	r3, r3, #4
 800d0ba:	4413      	add	r3, r2
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d113      	bne.n	800d0ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d0c6:	4a3d      	ldr	r2, [pc, #244]	; (800d1bc <inc_lock+0x118>)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	4413      	add	r3, r2
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d109      	bne.n	800d0ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d0da:	4a38      	ldr	r2, [pc, #224]	; (800d1bc <inc_lock+0x118>)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	011b      	lsls	r3, r3, #4
 800d0e0:	4413      	add	r3, r2
 800d0e2:	3308      	adds	r3, #8
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d006      	beq.n	800d0fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	60fb      	str	r3, [r7, #12]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d9dc      	bls.n	800d0b4 <inc_lock+0x10>
 800d0fa:	e000      	b.n	800d0fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d0fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b02      	cmp	r3, #2
 800d102:	d132      	bne.n	800d16a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d104:	2300      	movs	r3, #0
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	e002      	b.n	800d110 <inc_lock+0x6c>
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3301      	adds	r3, #1
 800d10e:	60fb      	str	r3, [r7, #12]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d806      	bhi.n	800d124 <inc_lock+0x80>
 800d116:	4a29      	ldr	r2, [pc, #164]	; (800d1bc <inc_lock+0x118>)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	4413      	add	r3, r2
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1f2      	bne.n	800d10a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b02      	cmp	r3, #2
 800d128:	d101      	bne.n	800d12e <inc_lock+0x8a>
 800d12a:	2300      	movs	r3, #0
 800d12c:	e040      	b.n	800d1b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	4922      	ldr	r1, [pc, #136]	; (800d1bc <inc_lock+0x118>)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	011b      	lsls	r3, r3, #4
 800d138:	440b      	add	r3, r1
 800d13a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	689a      	ldr	r2, [r3, #8]
 800d140:	491e      	ldr	r1, [pc, #120]	; (800d1bc <inc_lock+0x118>)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	011b      	lsls	r3, r3, #4
 800d146:	440b      	add	r3, r1
 800d148:	3304      	adds	r3, #4
 800d14a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	695a      	ldr	r2, [r3, #20]
 800d150:	491a      	ldr	r1, [pc, #104]	; (800d1bc <inc_lock+0x118>)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	011b      	lsls	r3, r3, #4
 800d156:	440b      	add	r3, r1
 800d158:	3308      	adds	r3, #8
 800d15a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d15c:	4a17      	ldr	r2, [pc, #92]	; (800d1bc <inc_lock+0x118>)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	011b      	lsls	r3, r3, #4
 800d162:	4413      	add	r3, r2
 800d164:	330c      	adds	r3, #12
 800d166:	2200      	movs	r2, #0
 800d168:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d009      	beq.n	800d184 <inc_lock+0xe0>
 800d170:	4a12      	ldr	r2, [pc, #72]	; (800d1bc <inc_lock+0x118>)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	011b      	lsls	r3, r3, #4
 800d176:	4413      	add	r3, r2
 800d178:	330c      	adds	r3, #12
 800d17a:	881b      	ldrh	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <inc_lock+0xe0>
 800d180:	2300      	movs	r3, #0
 800d182:	e015      	b.n	800d1b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d108      	bne.n	800d19c <inc_lock+0xf8>
 800d18a:	4a0c      	ldr	r2, [pc, #48]	; (800d1bc <inc_lock+0x118>)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	4413      	add	r3, r2
 800d192:	330c      	adds	r3, #12
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	3301      	adds	r3, #1
 800d198:	b29a      	uxth	r2, r3
 800d19a:	e001      	b.n	800d1a0 <inc_lock+0xfc>
 800d19c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1a0:	4906      	ldr	r1, [pc, #24]	; (800d1bc <inc_lock+0x118>)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	011b      	lsls	r3, r3, #4
 800d1a6:	440b      	add	r3, r1
 800d1a8:	330c      	adds	r3, #12
 800d1aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3301      	adds	r3, #1
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr
 800d1bc:	20002994 	.word	0x20002994

0800d1c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	607b      	str	r3, [r7, #4]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d825      	bhi.n	800d220 <dec_lock+0x60>
		n = Files[i].ctr;
 800d1d4:	4a17      	ldr	r2, [pc, #92]	; (800d234 <dec_lock+0x74>)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	011b      	lsls	r3, r3, #4
 800d1da:	4413      	add	r3, r2
 800d1dc:	330c      	adds	r3, #12
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d1e2:	89fb      	ldrh	r3, [r7, #14]
 800d1e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1e8:	d101      	bne.n	800d1ee <dec_lock+0x2e>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d1ee:	89fb      	ldrh	r3, [r7, #14]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <dec_lock+0x3a>
 800d1f4:	89fb      	ldrh	r3, [r7, #14]
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d1fa:	4a0e      	ldr	r2, [pc, #56]	; (800d234 <dec_lock+0x74>)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	011b      	lsls	r3, r3, #4
 800d200:	4413      	add	r3, r2
 800d202:	330c      	adds	r3, #12
 800d204:	89fa      	ldrh	r2, [r7, #14]
 800d206:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d208:	89fb      	ldrh	r3, [r7, #14]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d105      	bne.n	800d21a <dec_lock+0x5a>
 800d20e:	4a09      	ldr	r2, [pc, #36]	; (800d234 <dec_lock+0x74>)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	011b      	lsls	r3, r3, #4
 800d214:	4413      	add	r3, r2
 800d216:	2200      	movs	r2, #0
 800d218:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d21a:	2300      	movs	r3, #0
 800d21c:	737b      	strb	r3, [r7, #13]
 800d21e:	e001      	b.n	800d224 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d220:	2302      	movs	r3, #2
 800d222:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d224:	7b7b      	ldrb	r3, [r7, #13]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3714      	adds	r7, #20
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	20002994 	.word	0x20002994

0800d238 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d240:	2300      	movs	r3, #0
 800d242:	60fb      	str	r3, [r7, #12]
 800d244:	e010      	b.n	800d268 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d246:	4a0d      	ldr	r2, [pc, #52]	; (800d27c <clear_lock+0x44>)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	011b      	lsls	r3, r3, #4
 800d24c:	4413      	add	r3, r2
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	429a      	cmp	r2, r3
 800d254:	d105      	bne.n	800d262 <clear_lock+0x2a>
 800d256:	4a09      	ldr	r2, [pc, #36]	; (800d27c <clear_lock+0x44>)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	011b      	lsls	r3, r3, #4
 800d25c:	4413      	add	r3, r2
 800d25e:	2200      	movs	r2, #0
 800d260:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	3301      	adds	r3, #1
 800d266:	60fb      	str	r3, [r7, #12]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d9eb      	bls.n	800d246 <clear_lock+0xe>
	}
}
 800d26e:	bf00      	nop
 800d270:	bf00      	nop
 800d272:	3714      	adds	r7, #20
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr
 800d27c:	20002994 	.word	0x20002994

0800d280 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d288:	2300      	movs	r3, #0
 800d28a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	78db      	ldrb	r3, [r3, #3]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d034      	beq.n	800d2fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d298:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	7858      	ldrb	r0, [r3, #1]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	697a      	ldr	r2, [r7, #20]
 800d2a8:	f7ff fd40 	bl	800cd2c <disk_write>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d002      	beq.n	800d2b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	73fb      	strb	r3, [r7, #15]
 800d2b6:	e022      	b.n	800d2fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	1ad2      	subs	r2, r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	69db      	ldr	r3, [r3, #28]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d217      	bcs.n	800d2fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	789b      	ldrb	r3, [r3, #2]
 800d2d2:	613b      	str	r3, [r7, #16]
 800d2d4:	e010      	b.n	800d2f8 <sync_window+0x78>
					wsect += fs->fsize;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	697a      	ldr	r2, [r7, #20]
 800d2dc:	4413      	add	r3, r2
 800d2de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	7858      	ldrb	r0, [r3, #1]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	697a      	ldr	r2, [r7, #20]
 800d2ee:	f7ff fd1d 	bl	800cd2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	613b      	str	r3, [r7, #16]
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d8eb      	bhi.n	800d2d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3718      	adds	r7, #24
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d01b      	beq.n	800d358 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff ffad 	bl	800d280 <sync_window>
 800d326:	4603      	mov	r3, r0
 800d328:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d113      	bne.n	800d358 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7858      	ldrb	r0, [r3, #1]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d33a:	2301      	movs	r3, #1
 800d33c:	683a      	ldr	r2, [r7, #0]
 800d33e:	f7ff fcd5 	bl	800ccec <disk_read>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d004      	beq.n	800d352 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d34c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d34e:	2301      	movs	r3, #1
 800d350:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	683a      	ldr	r2, [r7, #0]
 800d356:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d358:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
	...

0800d364 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7ff ff87 	bl	800d280 <sync_window>
 800d372:	4603      	mov	r3, r0
 800d374:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d376:	7bfb      	ldrb	r3, [r7, #15]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d158      	bne.n	800d42e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b03      	cmp	r3, #3
 800d382:	d148      	bne.n	800d416 <sync_fs+0xb2>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	791b      	ldrb	r3, [r3, #4]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d144      	bne.n	800d416 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	3334      	adds	r3, #52	; 0x34
 800d390:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d394:	2100      	movs	r1, #0
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff fda9 	bl	800ceee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3334      	adds	r3, #52	; 0x34
 800d3a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3a4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff fd38 	bl	800ce1e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	3334      	adds	r3, #52	; 0x34
 800d3b2:	4921      	ldr	r1, [pc, #132]	; (800d438 <sync_fs+0xd4>)
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7ff fd4d 	bl	800ce54 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	3334      	adds	r3, #52	; 0x34
 800d3be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d3c2:	491e      	ldr	r1, [pc, #120]	; (800d43c <sync_fs+0xd8>)
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7ff fd45 	bl	800ce54 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	3334      	adds	r3, #52	; 0x34
 800d3ce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	4610      	mov	r0, r2
 800d3da:	f7ff fd3b 	bl	800ce54 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	3334      	adds	r3, #52	; 0x34
 800d3e2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	691b      	ldr	r3, [r3, #16]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f7ff fd31 	bl	800ce54 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a1b      	ldr	r3, [r3, #32]
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	7858      	ldrb	r0, [r3, #1]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d40a:	2301      	movs	r3, #1
 800d40c:	f7ff fc8e 	bl	800cd2c <disk_write>
			fs->fsi_flag = 0;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	785b      	ldrb	r3, [r3, #1]
 800d41a:	2200      	movs	r2, #0
 800d41c:	2100      	movs	r1, #0
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff fca4 	bl	800cd6c <disk_ioctl>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d001      	beq.n	800d42e <sync_fs+0xca>
 800d42a:	2301      	movs	r3, #1
 800d42c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	41615252 	.word	0x41615252
 800d43c:	61417272 	.word	0x61417272

0800d440 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	3b02      	subs	r3, #2
 800d44e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	699b      	ldr	r3, [r3, #24]
 800d454:	3b02      	subs	r3, #2
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d301      	bcc.n	800d460 <clust2sect+0x20>
 800d45c:	2300      	movs	r3, #0
 800d45e:	e008      	b.n	800d472 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	895b      	ldrh	r3, [r3, #10]
 800d464:	461a      	mov	r2, r3
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	fb03 f202 	mul.w	r2, r3, r2
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d470:	4413      	add	r3, r2
}
 800d472:	4618      	mov	r0, r3
 800d474:	370c      	adds	r7, #12
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr

0800d47e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b086      	sub	sp, #24
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d904      	bls.n	800d49e <get_fat+0x20>
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	683a      	ldr	r2, [r7, #0]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d302      	bcc.n	800d4a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d49e:	2301      	movs	r3, #1
 800d4a0:	617b      	str	r3, [r7, #20]
 800d4a2:	e08f      	b.n	800d5c4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d4a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b03      	cmp	r3, #3
 800d4b0:	d062      	beq.n	800d578 <get_fat+0xfa>
 800d4b2:	2b03      	cmp	r3, #3
 800d4b4:	dc7c      	bgt.n	800d5b0 <get_fat+0x132>
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d002      	beq.n	800d4c0 <get_fat+0x42>
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d042      	beq.n	800d544 <get_fat+0xc6>
 800d4be:	e077      	b.n	800d5b0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	60fb      	str	r3, [r7, #12]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	085b      	lsrs	r3, r3, #1
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	0a5b      	lsrs	r3, r3, #9
 800d4d6:	4413      	add	r3, r2
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6938      	ldr	r0, [r7, #16]
 800d4dc:	f7ff ff14 	bl	800d308 <move_window>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d167      	bne.n	800d5b6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	60fa      	str	r2, [r7, #12]
 800d4ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f0:	693a      	ldr	r2, [r7, #16]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	0a5b      	lsrs	r3, r3, #9
 800d502:	4413      	add	r3, r2
 800d504:	4619      	mov	r1, r3
 800d506:	6938      	ldr	r0, [r7, #16]
 800d508:	f7ff fefe 	bl	800d308 <move_window>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d153      	bne.n	800d5ba <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d518:	693a      	ldr	r2, [r7, #16]
 800d51a:	4413      	add	r3, r2
 800d51c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d520:	021b      	lsls	r3, r3, #8
 800d522:	461a      	mov	r2, r3
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	4313      	orrs	r3, r2
 800d528:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	f003 0301 	and.w	r3, r3, #1
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <get_fat+0xbc>
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	091b      	lsrs	r3, r3, #4
 800d538:	e002      	b.n	800d540 <get_fat+0xc2>
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d540:	617b      	str	r3, [r7, #20]
			break;
 800d542:	e03f      	b.n	800d5c4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	0a1b      	lsrs	r3, r3, #8
 800d54c:	4413      	add	r3, r2
 800d54e:	4619      	mov	r1, r3
 800d550:	6938      	ldr	r0, [r7, #16]
 800d552:	f7ff fed9 	bl	800d308 <move_window>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d130      	bne.n	800d5be <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	005b      	lsls	r3, r3, #1
 800d566:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d56a:	4413      	add	r3, r2
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff fc1b 	bl	800cda8 <ld_word>
 800d572:	4603      	mov	r3, r0
 800d574:	617b      	str	r3, [r7, #20]
			break;
 800d576:	e025      	b.n	800d5c4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	09db      	lsrs	r3, r3, #7
 800d580:	4413      	add	r3, r2
 800d582:	4619      	mov	r1, r3
 800d584:	6938      	ldr	r0, [r7, #16]
 800d586:	f7ff febf 	bl	800d308 <move_window>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d118      	bne.n	800d5c2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d59e:	4413      	add	r3, r2
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7ff fc19 	bl	800cdd8 <ld_dword>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d5ac:	617b      	str	r3, [r7, #20]
			break;
 800d5ae:	e009      	b.n	800d5c4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	617b      	str	r3, [r7, #20]
 800d5b4:	e006      	b.n	800d5c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5b6:	bf00      	nop
 800d5b8:	e004      	b.n	800d5c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5ba:	bf00      	nop
 800d5bc:	e002      	b.n	800d5c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d5be:	bf00      	nop
 800d5c0:	e000      	b.n	800d5c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5c2:	bf00      	nop
		}
	}

	return val;
 800d5c4:	697b      	ldr	r3, [r7, #20]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3718      	adds	r7, #24
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d5ce:	b590      	push	{r4, r7, lr}
 800d5d0:	b089      	sub	sp, #36	; 0x24
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	60f8      	str	r0, [r7, #12]
 800d5d6:	60b9      	str	r1, [r7, #8]
 800d5d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d5da:	2302      	movs	r3, #2
 800d5dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	f240 80d9 	bls.w	800d798 <put_fat+0x1ca>
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	699b      	ldr	r3, [r3, #24]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	f080 80d3 	bcs.w	800d798 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	2b03      	cmp	r3, #3
 800d5f8:	f000 8096 	beq.w	800d728 <put_fat+0x15a>
 800d5fc:	2b03      	cmp	r3, #3
 800d5fe:	f300 80cb 	bgt.w	800d798 <put_fat+0x1ca>
 800d602:	2b01      	cmp	r3, #1
 800d604:	d002      	beq.n	800d60c <put_fat+0x3e>
 800d606:	2b02      	cmp	r3, #2
 800d608:	d06e      	beq.n	800d6e8 <put_fat+0x11a>
 800d60a:	e0c5      	b.n	800d798 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	61bb      	str	r3, [r7, #24]
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	085b      	lsrs	r3, r3, #1
 800d614:	69ba      	ldr	r2, [r7, #24]
 800d616:	4413      	add	r3, r2
 800d618:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	0a5b      	lsrs	r3, r3, #9
 800d622:	4413      	add	r3, r2
 800d624:	4619      	mov	r1, r3
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f7ff fe6e 	bl	800d308 <move_window>
 800d62c:	4603      	mov	r3, r0
 800d62e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d630:	7ffb      	ldrb	r3, [r7, #31]
 800d632:	2b00      	cmp	r3, #0
 800d634:	f040 80a9 	bne.w	800d78a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	1c59      	adds	r1, r3, #1
 800d642:	61b9      	str	r1, [r7, #24]
 800d644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d648:	4413      	add	r3, r2
 800d64a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00d      	beq.n	800d672 <put_fat+0xa4>
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	b25b      	sxtb	r3, r3
 800d65c:	f003 030f 	and.w	r3, r3, #15
 800d660:	b25a      	sxtb	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	b2db      	uxtb	r3, r3
 800d666:	011b      	lsls	r3, r3, #4
 800d668:	b25b      	sxtb	r3, r3
 800d66a:	4313      	orrs	r3, r2
 800d66c:	b25b      	sxtb	r3, r3
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	e001      	b.n	800d676 <put_fat+0xa8>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	b2db      	uxtb	r3, r3
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2201      	movs	r2, #1
 800d67e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	0a5b      	lsrs	r3, r3, #9
 800d688:	4413      	add	r3, r2
 800d68a:	4619      	mov	r1, r3
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f7ff fe3b 	bl	800d308 <move_window>
 800d692:	4603      	mov	r3, r0
 800d694:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d696:	7ffb      	ldrb	r3, [r7, #31]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d178      	bne.n	800d78e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a8:	4413      	add	r3, r2
 800d6aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f003 0301 	and.w	r3, r3, #1
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <put_fat+0xf0>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	091b      	lsrs	r3, r3, #4
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	e00e      	b.n	800d6dc <put_fat+0x10e>
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	b25b      	sxtb	r3, r3
 800d6c4:	f023 030f 	bic.w	r3, r3, #15
 800d6c8:	b25a      	sxtb	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	0a1b      	lsrs	r3, r3, #8
 800d6ce:	b25b      	sxtb	r3, r3
 800d6d0:	f003 030f 	and.w	r3, r3, #15
 800d6d4:	b25b      	sxtb	r3, r3
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	b25b      	sxtb	r3, r3
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	697a      	ldr	r2, [r7, #20]
 800d6de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	70da      	strb	r2, [r3, #3]
			break;
 800d6e6:	e057      	b.n	800d798 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	0a1b      	lsrs	r3, r3, #8
 800d6f0:	4413      	add	r3, r2
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7ff fe07 	bl	800d308 <move_window>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6fe:	7ffb      	ldrb	r3, [r7, #31]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d146      	bne.n	800d792 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	005b      	lsls	r3, r3, #1
 800d70e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d712:	4413      	add	r3, r2
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	b292      	uxth	r2, r2
 800d718:	4611      	mov	r1, r2
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7ff fb7f 	bl	800ce1e <st_word>
			fs->wflag = 1;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2201      	movs	r2, #1
 800d724:	70da      	strb	r2, [r3, #3]
			break;
 800d726:	e037      	b.n	800d798 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	09db      	lsrs	r3, r3, #7
 800d730:	4413      	add	r3, r2
 800d732:	4619      	mov	r1, r3
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f7ff fde7 	bl	800d308 <move_window>
 800d73a:	4603      	mov	r3, r0
 800d73c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d73e:	7ffb      	ldrb	r3, [r7, #31]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d128      	bne.n	800d796 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d758:	4413      	add	r3, r2
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff fb3c 	bl	800cdd8 <ld_dword>
 800d760:	4603      	mov	r3, r0
 800d762:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d766:	4323      	orrs	r3, r4
 800d768:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d778:	4413      	add	r3, r2
 800d77a:	6879      	ldr	r1, [r7, #4]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7ff fb69 	bl	800ce54 <st_dword>
			fs->wflag = 1;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2201      	movs	r2, #1
 800d786:	70da      	strb	r2, [r3, #3]
			break;
 800d788:	e006      	b.n	800d798 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d78a:	bf00      	nop
 800d78c:	e004      	b.n	800d798 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d78e:	bf00      	nop
 800d790:	e002      	b.n	800d798 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d792:	bf00      	nop
 800d794:	e000      	b.n	800d798 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d796:	bf00      	nop
		}
	}
	return res;
 800d798:	7ffb      	ldrb	r3, [r7, #31]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3724      	adds	r7, #36	; 0x24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd90      	pop	{r4, r7, pc}

0800d7a2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b088      	sub	sp, #32
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	60f8      	str	r0, [r7, #12]
 800d7aa:	60b9      	str	r1, [r7, #8]
 800d7ac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d904      	bls.n	800d7c8 <remove_chain+0x26>
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	68ba      	ldr	r2, [r7, #8]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d301      	bcc.n	800d7cc <remove_chain+0x2a>
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	e04b      	b.n	800d864 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00c      	beq.n	800d7ec <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d7d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7d6:	6879      	ldr	r1, [r7, #4]
 800d7d8:	69b8      	ldr	r0, [r7, #24]
 800d7da:	f7ff fef8 	bl	800d5ce <put_fat>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d7e2:	7ffb      	ldrb	r3, [r7, #31]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <remove_chain+0x4a>
 800d7e8:	7ffb      	ldrb	r3, [r7, #31]
 800d7ea:	e03b      	b.n	800d864 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d7ec:	68b9      	ldr	r1, [r7, #8]
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7ff fe45 	bl	800d47e <get_fat>
 800d7f4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d031      	beq.n	800d860 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d101      	bne.n	800d806 <remove_chain+0x64>
 800d802:	2302      	movs	r3, #2
 800d804:	e02e      	b.n	800d864 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d80c:	d101      	bne.n	800d812 <remove_chain+0x70>
 800d80e:	2301      	movs	r3, #1
 800d810:	e028      	b.n	800d864 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d812:	2200      	movs	r2, #0
 800d814:	68b9      	ldr	r1, [r7, #8]
 800d816:	69b8      	ldr	r0, [r7, #24]
 800d818:	f7ff fed9 	bl	800d5ce <put_fat>
 800d81c:	4603      	mov	r3, r0
 800d81e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d820:	7ffb      	ldrb	r3, [r7, #31]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d001      	beq.n	800d82a <remove_chain+0x88>
 800d826:	7ffb      	ldrb	r3, [r7, #31]
 800d828:	e01c      	b.n	800d864 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	695a      	ldr	r2, [r3, #20]
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	3b02      	subs	r3, #2
 800d834:	429a      	cmp	r2, r3
 800d836:	d20b      	bcs.n	800d850 <remove_chain+0xae>
			fs->free_clst++;
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	695b      	ldr	r3, [r3, #20]
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	791b      	ldrb	r3, [r3, #4]
 800d846:	f043 0301 	orr.w	r3, r3, #1
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	699b      	ldr	r3, [r3, #24]
 800d858:	68ba      	ldr	r2, [r7, #8]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d3c6      	bcc.n	800d7ec <remove_chain+0x4a>
 800d85e:	e000      	b.n	800d862 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d860:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3720      	adds	r7, #32
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b088      	sub	sp, #32
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10d      	bne.n	800d89e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	691b      	ldr	r3, [r3, #16]
 800d886:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d004      	beq.n	800d898 <create_chain+0x2c>
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	699b      	ldr	r3, [r3, #24]
 800d892:	69ba      	ldr	r2, [r7, #24]
 800d894:	429a      	cmp	r2, r3
 800d896:	d31b      	bcc.n	800d8d0 <create_chain+0x64>
 800d898:	2301      	movs	r3, #1
 800d89a:	61bb      	str	r3, [r7, #24]
 800d89c:	e018      	b.n	800d8d0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff fdec 	bl	800d47e <get_fat>
 800d8a6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d801      	bhi.n	800d8b2 <create_chain+0x46>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e070      	b.n	800d994 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8b8:	d101      	bne.n	800d8be <create_chain+0x52>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	e06a      	b.n	800d994 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	699b      	ldr	r3, [r3, #24]
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d201      	bcs.n	800d8cc <create_chain+0x60>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	e063      	b.n	800d994 <create_chain+0x128>
		scl = clst;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	69fa      	ldr	r2, [r7, #28]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d307      	bcc.n	800d8f4 <create_chain+0x88>
				ncl = 2;
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d8e8:	69fa      	ldr	r2, [r7, #28]
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d901      	bls.n	800d8f4 <create_chain+0x88>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	e04f      	b.n	800d994 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d8f4:	69f9      	ldr	r1, [r7, #28]
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7ff fdc1 	bl	800d47e <get_fat>
 800d8fc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00e      	beq.n	800d922 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d003      	beq.n	800d912 <create_chain+0xa6>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d910:	d101      	bne.n	800d916 <create_chain+0xaa>
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	e03e      	b.n	800d994 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d916:	69fa      	ldr	r2, [r7, #28]
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d1da      	bne.n	800d8d4 <create_chain+0x68>
 800d91e:	2300      	movs	r3, #0
 800d920:	e038      	b.n	800d994 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d922:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d928:	69f9      	ldr	r1, [r7, #28]
 800d92a:	6938      	ldr	r0, [r7, #16]
 800d92c:	f7ff fe4f 	bl	800d5ce <put_fat>
 800d930:	4603      	mov	r3, r0
 800d932:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d934:	7dfb      	ldrb	r3, [r7, #23]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d109      	bne.n	800d94e <create_chain+0xe2>
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d006      	beq.n	800d94e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d940:	69fa      	ldr	r2, [r7, #28]
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	6938      	ldr	r0, [r7, #16]
 800d946:	f7ff fe42 	bl	800d5ce <put_fat>
 800d94a:	4603      	mov	r3, r0
 800d94c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d116      	bne.n	800d982 <create_chain+0x116>
		fs->last_clst = ncl;
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	69fa      	ldr	r2, [r7, #28]
 800d958:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	695a      	ldr	r2, [r3, #20]
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	3b02      	subs	r3, #2
 800d964:	429a      	cmp	r2, r3
 800d966:	d804      	bhi.n	800d972 <create_chain+0x106>
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	695b      	ldr	r3, [r3, #20]
 800d96c:	1e5a      	subs	r2, r3, #1
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	791b      	ldrb	r3, [r3, #4]
 800d976:	f043 0301 	orr.w	r3, r3, #1
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	711a      	strb	r2, [r3, #4]
 800d980:	e007      	b.n	800d992 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	2b01      	cmp	r3, #1
 800d986:	d102      	bne.n	800d98e <create_chain+0x122>
 800d988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d98c:	e000      	b.n	800d990 <create_chain+0x124>
 800d98e:	2301      	movs	r3, #1
 800d990:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d992:	69fb      	ldr	r3, [r7, #28]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3720      	adds	r7, #32
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b087      	sub	sp, #28
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b0:	3304      	adds	r3, #4
 800d9b2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	0a5b      	lsrs	r3, r3, #9
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	8952      	ldrh	r2, [r2, #10]
 800d9bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	1d1a      	adds	r2, r3, #4
 800d9c6:	613a      	str	r2, [r7, #16]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <clmt_clust+0x3a>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e010      	b.n	800d9f8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d307      	bcc.n	800d9ee <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	617b      	str	r3, [r7, #20]
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d9ec:	e7e9      	b.n	800d9c2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d9ee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	4413      	add	r3, r2
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	371c      	adds	r7, #28
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da1a:	d204      	bcs.n	800da26 <dir_sdi+0x22>
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	f003 031f 	and.w	r3, r3, #31
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <dir_sdi+0x26>
		return FR_INT_ERR;
 800da26:	2302      	movs	r3, #2
 800da28:	e063      	b.n	800daf2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	683a      	ldr	r2, [r7, #0]
 800da2e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d106      	bne.n	800da4a <dir_sdi+0x46>
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	2b02      	cmp	r3, #2
 800da42:	d902      	bls.n	800da4a <dir_sdi+0x46>
		clst = fs->dirbase;
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da48:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10c      	bne.n	800da6a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	095b      	lsrs	r3, r3, #5
 800da54:	693a      	ldr	r2, [r7, #16]
 800da56:	8912      	ldrh	r2, [r2, #8]
 800da58:	4293      	cmp	r3, r2
 800da5a:	d301      	bcc.n	800da60 <dir_sdi+0x5c>
 800da5c:	2302      	movs	r3, #2
 800da5e:	e048      	b.n	800daf2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	61da      	str	r2, [r3, #28]
 800da68:	e029      	b.n	800dabe <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	895b      	ldrh	r3, [r3, #10]
 800da6e:	025b      	lsls	r3, r3, #9
 800da70:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800da72:	e019      	b.n	800daa8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6979      	ldr	r1, [r7, #20]
 800da78:	4618      	mov	r0, r3
 800da7a:	f7ff fd00 	bl	800d47e <get_fat>
 800da7e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da86:	d101      	bne.n	800da8c <dir_sdi+0x88>
 800da88:	2301      	movs	r3, #1
 800da8a:	e032      	b.n	800daf2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d904      	bls.n	800da9c <dir_sdi+0x98>
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	699b      	ldr	r3, [r3, #24]
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d301      	bcc.n	800daa0 <dir_sdi+0x9c>
 800da9c:	2302      	movs	r3, #2
 800da9e:	e028      	b.n	800daf2 <dir_sdi+0xee>
			ofs -= csz;
 800daa0:	683a      	ldr	r2, [r7, #0]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	429a      	cmp	r2, r3
 800daae:	d2e1      	bcs.n	800da74 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dab0:	6979      	ldr	r1, [r7, #20]
 800dab2:	6938      	ldr	r0, [r7, #16]
 800dab4:	f7ff fcc4 	bl	800d440 <clust2sect>
 800dab8:	4602      	mov	r2, r0
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	69db      	ldr	r3, [r3, #28]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d101      	bne.n	800dad0 <dir_sdi+0xcc>
 800dacc:	2302      	movs	r3, #2
 800dace:	e010      	b.n	800daf2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	69da      	ldr	r2, [r3, #28]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	0a5b      	lsrs	r3, r3, #9
 800dad8:	441a      	add	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daea:	441a      	add	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3718      	adds	r7, #24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b086      	sub	sp, #24
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	695b      	ldr	r3, [r3, #20]
 800db0e:	3320      	adds	r3, #32
 800db10:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d003      	beq.n	800db22 <dir_next+0x28>
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db20:	d301      	bcc.n	800db26 <dir_next+0x2c>
 800db22:	2304      	movs	r3, #4
 800db24:	e0aa      	b.n	800dc7c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f040 8098 	bne.w	800dc62 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	69db      	ldr	r3, [r3, #28]
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	699b      	ldr	r3, [r3, #24]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10b      	bne.n	800db5c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	095b      	lsrs	r3, r3, #5
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	8912      	ldrh	r2, [r2, #8]
 800db4c:	4293      	cmp	r3, r2
 800db4e:	f0c0 8088 	bcc.w	800dc62 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	61da      	str	r2, [r3, #28]
 800db58:	2304      	movs	r3, #4
 800db5a:	e08f      	b.n	800dc7c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	0a5b      	lsrs	r3, r3, #9
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	8952      	ldrh	r2, [r2, #10]
 800db64:	3a01      	subs	r2, #1
 800db66:	4013      	ands	r3, r2
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d17a      	bne.n	800dc62 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	699b      	ldr	r3, [r3, #24]
 800db72:	4619      	mov	r1, r3
 800db74:	4610      	mov	r0, r2
 800db76:	f7ff fc82 	bl	800d47e <get_fat>
 800db7a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d801      	bhi.n	800db86 <dir_next+0x8c>
 800db82:	2302      	movs	r3, #2
 800db84:	e07a      	b.n	800dc7c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db8c:	d101      	bne.n	800db92 <dir_next+0x98>
 800db8e:	2301      	movs	r3, #1
 800db90:	e074      	b.n	800dc7c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	699b      	ldr	r3, [r3, #24]
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d358      	bcc.n	800dc4e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d104      	bne.n	800dbac <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	61da      	str	r2, [r3, #28]
 800dba8:	2304      	movs	r3, #4
 800dbaa:	e067      	b.n	800dc7c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	699b      	ldr	r3, [r3, #24]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	f7ff fe59 	bl	800d86c <create_chain>
 800dbba:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d101      	bne.n	800dbc6 <dir_next+0xcc>
 800dbc2:	2307      	movs	r3, #7
 800dbc4:	e05a      	b.n	800dc7c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d101      	bne.n	800dbd0 <dir_next+0xd6>
 800dbcc:	2302      	movs	r3, #2
 800dbce:	e055      	b.n	800dc7c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbd6:	d101      	bne.n	800dbdc <dir_next+0xe2>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	e04f      	b.n	800dc7c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f7ff fb4f 	bl	800d280 <sync_window>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d001      	beq.n	800dbec <dir_next+0xf2>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e047      	b.n	800dc7c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	3334      	adds	r3, #52	; 0x34
 800dbf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7ff f979 	bl	800ceee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	613b      	str	r3, [r7, #16]
 800dc00:	6979      	ldr	r1, [r7, #20]
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f7ff fc1c 	bl	800d440 <clust2sect>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	631a      	str	r2, [r3, #48]	; 0x30
 800dc0e:	e012      	b.n	800dc36 <dir_next+0x13c>
						fs->wflag = 1;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2201      	movs	r2, #1
 800dc14:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f7ff fb32 	bl	800d280 <sync_window>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d001      	beq.n	800dc26 <dir_next+0x12c>
 800dc22:	2301      	movs	r3, #1
 800dc24:	e02a      	b.n	800dc7c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	613b      	str	r3, [r7, #16]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	631a      	str	r2, [r3, #48]	; 0x30
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	895b      	ldrh	r3, [r3, #10]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d3e6      	bcc.n	800dc10 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	1ad2      	subs	r2, r2, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	697a      	ldr	r2, [r7, #20]
 800dc52:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dc54:	6979      	ldr	r1, [r7, #20]
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff fbf2 	bl	800d440 <clust2sect>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc74:	441a      	add	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dc7a:	2300      	movs	r3, #0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3718      	adds	r7, #24
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dc94:	2100      	movs	r1, #0
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff feb4 	bl	800da04 <dir_sdi>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dca0:	7dfb      	ldrb	r3, [r7, #23]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d12b      	bne.n	800dcfe <dir_alloc+0x7a>
		n = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	69db      	ldr	r3, [r3, #28]
 800dcae:	4619      	mov	r1, r3
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f7ff fb29 	bl	800d308 <move_window>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dcba:	7dfb      	ldrb	r3, [r7, #23]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d11d      	bne.n	800dcfc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6a1b      	ldr	r3, [r3, #32]
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	2be5      	cmp	r3, #229	; 0xe5
 800dcc8:	d004      	beq.n	800dcd4 <dir_alloc+0x50>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a1b      	ldr	r3, [r3, #32]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d107      	bne.n	800dce4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	613b      	str	r3, [r7, #16]
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d102      	bne.n	800dce8 <dir_alloc+0x64>
 800dce2:	e00c      	b.n	800dcfe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dce4:	2300      	movs	r3, #0
 800dce6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dce8:	2101      	movs	r1, #1
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7ff ff05 	bl	800dafa <dir_next>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dcf4:	7dfb      	ldrb	r3, [r7, #23]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d0d7      	beq.n	800dcaa <dir_alloc+0x26>
 800dcfa:	e000      	b.n	800dcfe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dcfc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	d101      	bne.n	800dd08 <dir_alloc+0x84>
 800dd04:	2307      	movs	r3, #7
 800dd06:	75fb      	strb	r3, [r7, #23]
	return res;
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b084      	sub	sp, #16
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	331a      	adds	r3, #26
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7ff f841 	bl	800cda8 <ld_word>
 800dd26:	4603      	mov	r3, r0
 800dd28:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	d109      	bne.n	800dd46 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	3314      	adds	r3, #20
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7ff f836 	bl	800cda8 <ld_word>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	041b      	lsls	r3, r3, #16
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	4313      	orrs	r3, r2
 800dd44:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dd46:	68fb      	ldr	r3, [r7, #12]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3710      	adds	r7, #16
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	331a      	adds	r3, #26
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	b292      	uxth	r2, r2
 800dd64:	4611      	mov	r1, r2
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7ff f859 	bl	800ce1e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d109      	bne.n	800dd88 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	f103 0214 	add.w	r2, r3, #20
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	0c1b      	lsrs	r3, r3, #16
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	4619      	mov	r1, r3
 800dd82:	4610      	mov	r0, r2
 800dd84:	f7ff f84b 	bl	800ce1e <st_word>
	}
}
 800dd88:	bf00      	nop
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dd90:	b590      	push	{r4, r7, lr}
 800dd92:	b087      	sub	sp, #28
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	331a      	adds	r3, #26
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7ff f802 	bl	800cda8 <ld_word>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <cmp_lfn+0x1e>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	e059      	b.n	800de62 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddb6:	1e5a      	subs	r2, r3, #1
 800ddb8:	4613      	mov	r3, r2
 800ddba:	005b      	lsls	r3, r3, #1
 800ddbc:	4413      	add	r3, r2
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	4413      	add	r3, r2
 800ddc2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	81fb      	strh	r3, [r7, #14]
 800ddc8:	2300      	movs	r3, #0
 800ddca:	613b      	str	r3, [r7, #16]
 800ddcc:	e033      	b.n	800de36 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ddce:	4a27      	ldr	r2, [pc, #156]	; (800de6c <cmp_lfn+0xdc>)
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	4413      	add	r3, r2
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fe ffe3 	bl	800cda8 <ld_word>
 800dde2:	4603      	mov	r3, r0
 800dde4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dde6:	89fb      	ldrh	r3, [r7, #14]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d01a      	beq.n	800de22 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	2bfe      	cmp	r3, #254	; 0xfe
 800ddf0:	d812      	bhi.n	800de18 <cmp_lfn+0x88>
 800ddf2:	89bb      	ldrh	r3, [r7, #12]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f001 ff2d 	bl	800fc54 <ff_wtoupper>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	461c      	mov	r4, r3
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	1c5a      	adds	r2, r3, #1
 800de02:	617a      	str	r2, [r7, #20]
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	4413      	add	r3, r2
 800de0a:	881b      	ldrh	r3, [r3, #0]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f001 ff21 	bl	800fc54 <ff_wtoupper>
 800de12:	4603      	mov	r3, r0
 800de14:	429c      	cmp	r4, r3
 800de16:	d001      	beq.n	800de1c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800de18:	2300      	movs	r3, #0
 800de1a:	e022      	b.n	800de62 <cmp_lfn+0xd2>
			}
			wc = uc;
 800de1c:	89bb      	ldrh	r3, [r7, #12]
 800de1e:	81fb      	strh	r3, [r7, #14]
 800de20:	e006      	b.n	800de30 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800de22:	89bb      	ldrh	r3, [r7, #12]
 800de24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de28:	4293      	cmp	r3, r2
 800de2a:	d001      	beq.n	800de30 <cmp_lfn+0xa0>
 800de2c:	2300      	movs	r3, #0
 800de2e:	e018      	b.n	800de62 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	3301      	adds	r3, #1
 800de34:	613b      	str	r3, [r7, #16]
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	2b0c      	cmp	r3, #12
 800de3a:	d9c8      	bls.n	800ddce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00b      	beq.n	800de60 <cmp_lfn+0xd0>
 800de48:	89fb      	ldrh	r3, [r7, #14]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d008      	beq.n	800de60 <cmp_lfn+0xd0>
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	4413      	add	r3, r2
 800de56:	881b      	ldrh	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d001      	beq.n	800de60 <cmp_lfn+0xd0>
 800de5c:	2300      	movs	r3, #0
 800de5e:	e000      	b.n	800de62 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800de60:	2301      	movs	r3, #1
}
 800de62:	4618      	mov	r0, r3
 800de64:	371c      	adds	r7, #28
 800de66:	46bd      	mov	sp, r7
 800de68:	bd90      	pop	{r4, r7, pc}
 800de6a:	bf00      	nop
 800de6c:	08012050 	.word	0x08012050

0800de70 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b088      	sub	sp, #32
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	4611      	mov	r1, r2
 800de7c:	461a      	mov	r2, r3
 800de7e:	460b      	mov	r3, r1
 800de80:	71fb      	strb	r3, [r7, #7]
 800de82:	4613      	mov	r3, r2
 800de84:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	330d      	adds	r3, #13
 800de8a:	79ba      	ldrb	r2, [r7, #6]
 800de8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	330b      	adds	r3, #11
 800de92:	220f      	movs	r2, #15
 800de94:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	330c      	adds	r3, #12
 800de9a:	2200      	movs	r2, #0
 800de9c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	331a      	adds	r3, #26
 800dea2:	2100      	movs	r1, #0
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fe ffba 	bl	800ce1e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	1e5a      	subs	r2, r3, #1
 800deae:	4613      	mov	r3, r2
 800deb0:	005b      	lsls	r3, r3, #1
 800deb2:	4413      	add	r3, r2
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800deba:	2300      	movs	r3, #0
 800debc:	82fb      	strh	r3, [r7, #22]
 800debe:	2300      	movs	r3, #0
 800dec0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dec2:	8afb      	ldrh	r3, [r7, #22]
 800dec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dec8:	4293      	cmp	r3, r2
 800deca:	d007      	beq.n	800dedc <put_lfn+0x6c>
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	1c5a      	adds	r2, r3, #1
 800ded0:	61fa      	str	r2, [r7, #28]
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	4413      	add	r3, r2
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dedc:	4a17      	ldr	r2, [pc, #92]	; (800df3c <put_lfn+0xcc>)
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	4413      	add	r3, r2
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	461a      	mov	r2, r3
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	4413      	add	r3, r2
 800deea:	8afa      	ldrh	r2, [r7, #22]
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f7fe ff95 	bl	800ce1e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800def4:	8afb      	ldrh	r3, [r7, #22]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d102      	bne.n	800df00 <put_lfn+0x90>
 800defa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800defe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	3301      	adds	r3, #1
 800df04:	61bb      	str	r3, [r7, #24]
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	2b0c      	cmp	r3, #12
 800df0a:	d9da      	bls.n	800dec2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800df0c:	8afb      	ldrh	r3, [r7, #22]
 800df0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df12:	4293      	cmp	r3, r2
 800df14:	d006      	beq.n	800df24 <put_lfn+0xb4>
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	005b      	lsls	r3, r3, #1
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	4413      	add	r3, r2
 800df1e:	881b      	ldrh	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d103      	bne.n	800df2c <put_lfn+0xbc>
 800df24:	79fb      	ldrb	r3, [r7, #7]
 800df26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df2a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	79fa      	ldrb	r2, [r7, #7]
 800df30:	701a      	strb	r2, [r3, #0]
}
 800df32:	bf00      	nop
 800df34:	3720      	adds	r7, #32
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	08012050 	.word	0x08012050

0800df40 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08c      	sub	sp, #48	; 0x30
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
 800df4c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800df4e:	220b      	movs	r2, #11
 800df50:	68b9      	ldr	r1, [r7, #8]
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f7fe ffaa 	bl	800ceac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	2b05      	cmp	r3, #5
 800df5c:	d929      	bls.n	800dfb2 <gen_numname+0x72>
		sr = seq;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800df62:	e020      	b.n	800dfa6 <gen_numname+0x66>
			wc = *lfn++;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	1c9a      	adds	r2, r3, #2
 800df68:	607a      	str	r2, [r7, #4]
 800df6a:	881b      	ldrh	r3, [r3, #0]
 800df6c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800df6e:	2300      	movs	r3, #0
 800df70:	62bb      	str	r3, [r7, #40]	; 0x28
 800df72:	e015      	b.n	800dfa0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	005a      	lsls	r2, r3, #1
 800df78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df7a:	f003 0301 	and.w	r3, r3, #1
 800df7e:	4413      	add	r3, r2
 800df80:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800df82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df84:	085b      	lsrs	r3, r3, #1
 800df86:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d003      	beq.n	800df9a <gen_numname+0x5a>
 800df92:	69fa      	ldr	r2, [r7, #28]
 800df94:	4b30      	ldr	r3, [pc, #192]	; (800e058 <gen_numname+0x118>)
 800df96:	4053      	eors	r3, r2
 800df98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	3301      	adds	r3, #1
 800df9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa2:	2b0f      	cmp	r3, #15
 800dfa4:	d9e6      	bls.n	800df74 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	881b      	ldrh	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1da      	bne.n	800df64 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dfb2:	2307      	movs	r3, #7
 800dfb4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	f003 030f 	and.w	r3, r3, #15
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	3330      	adds	r3, #48	; 0x30
 800dfc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dfc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfca:	2b39      	cmp	r3, #57	; 0x39
 800dfcc:	d904      	bls.n	800dfd8 <gen_numname+0x98>
 800dfce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfd2:	3307      	adds	r3, #7
 800dfd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfda:	1e5a      	subs	r2, r3, #1
 800dfdc:	62ba      	str	r2, [r7, #40]	; 0x28
 800dfde:	3330      	adds	r3, #48	; 0x30
 800dfe0:	443b      	add	r3, r7
 800dfe2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dfe6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	091b      	lsrs	r3, r3, #4
 800dfee:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1df      	bne.n	800dfb6 <gen_numname+0x76>
	ns[i] = '~';
 800dff6:	f107 0214 	add.w	r2, r7, #20
 800dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffc:	4413      	add	r3, r2
 800dffe:	227e      	movs	r2, #126	; 0x7e
 800e000:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e002:	2300      	movs	r3, #0
 800e004:	627b      	str	r3, [r7, #36]	; 0x24
 800e006:	e002      	b.n	800e00e <gen_numname+0xce>
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	3301      	adds	r3, #1
 800e00c:	627b      	str	r3, [r7, #36]	; 0x24
 800e00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e012:	429a      	cmp	r2, r3
 800e014:	d205      	bcs.n	800e022 <gen_numname+0xe2>
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	4413      	add	r3, r2
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b20      	cmp	r3, #32
 800e020:	d1f2      	bne.n	800e008 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e024:	2b07      	cmp	r3, #7
 800e026:	d807      	bhi.n	800e038 <gen_numname+0xf8>
 800e028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02a:	1c5a      	adds	r2, r3, #1
 800e02c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e02e:	3330      	adds	r3, #48	; 0x30
 800e030:	443b      	add	r3, r7
 800e032:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e036:	e000      	b.n	800e03a <gen_numname+0xfa>
 800e038:	2120      	movs	r1, #32
 800e03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	627a      	str	r2, [r7, #36]	; 0x24
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	4413      	add	r3, r2
 800e044:	460a      	mov	r2, r1
 800e046:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	2b07      	cmp	r3, #7
 800e04c:	d9e9      	bls.n	800e022 <gen_numname+0xe2>
}
 800e04e:	bf00      	nop
 800e050:	bf00      	nop
 800e052:	3730      	adds	r7, #48	; 0x30
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	00011021 	.word	0x00011021

0800e05c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e064:	2300      	movs	r3, #0
 800e066:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e068:	230b      	movs	r3, #11
 800e06a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	0852      	lsrs	r2, r2, #1
 800e072:	01db      	lsls	r3, r3, #7
 800e074:	4313      	orrs	r3, r2
 800e076:	b2da      	uxtb	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	1c59      	adds	r1, r3, #1
 800e07c:	6079      	str	r1, [r7, #4]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	4413      	add	r3, r2
 800e082:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	3b01      	subs	r3, #1
 800e088:	60bb      	str	r3, [r7, #8]
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1ed      	bne.n	800e06c <sum_sfn+0x10>
	return sum;
 800e090:	7bfb      	ldrb	r3, [r7, #15]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr

0800e09e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e09e:	b580      	push	{r7, lr}
 800e0a0:	b086      	sub	sp, #24
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7ff fca8 	bl	800da04 <dir_sdi>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e0b8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d001      	beq.n	800e0c2 <dir_find+0x24>
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
 800e0c0:	e0a9      	b.n	800e216 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e0c2:	23ff      	movs	r3, #255	; 0xff
 800e0c4:	753b      	strb	r3, [r7, #20]
 800e0c6:	7d3b      	ldrb	r3, [r7, #20]
 800e0c8:	757b      	strb	r3, [r7, #21]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0d0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	69db      	ldr	r3, [r3, #28]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6938      	ldr	r0, [r7, #16]
 800e0da:	f7ff f915 	bl	800d308 <move_window>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0e2:	7dfb      	ldrb	r3, [r7, #23]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f040 8090 	bne.w	800e20a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a1b      	ldr	r3, [r3, #32]
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e0f2:	7dbb      	ldrb	r3, [r7, #22]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d102      	bne.n	800e0fe <dir_find+0x60>
 800e0f8:	2304      	movs	r3, #4
 800e0fa:	75fb      	strb	r3, [r7, #23]
 800e0fc:	e08a      	b.n	800e214 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a1b      	ldr	r3, [r3, #32]
 800e102:	330b      	adds	r3, #11
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e10a:	73fb      	strb	r3, [r7, #15]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	7bfa      	ldrb	r2, [r7, #15]
 800e110:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e112:	7dbb      	ldrb	r3, [r7, #22]
 800e114:	2be5      	cmp	r3, #229	; 0xe5
 800e116:	d007      	beq.n	800e128 <dir_find+0x8a>
 800e118:	7bfb      	ldrb	r3, [r7, #15]
 800e11a:	f003 0308 	and.w	r3, r3, #8
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d009      	beq.n	800e136 <dir_find+0x98>
 800e122:	7bfb      	ldrb	r3, [r7, #15]
 800e124:	2b0f      	cmp	r3, #15
 800e126:	d006      	beq.n	800e136 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e128:	23ff      	movs	r3, #255	; 0xff
 800e12a:	757b      	strb	r3, [r7, #21]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e132:	631a      	str	r2, [r3, #48]	; 0x30
 800e134:	e05e      	b.n	800e1f4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e136:	7bfb      	ldrb	r3, [r7, #15]
 800e138:	2b0f      	cmp	r3, #15
 800e13a:	d136      	bne.n	800e1aa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e146:	2b00      	cmp	r3, #0
 800e148:	d154      	bne.n	800e1f4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e14a:	7dbb      	ldrb	r3, [r7, #22]
 800e14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00d      	beq.n	800e170 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a1b      	ldr	r3, [r3, #32]
 800e158:	7b5b      	ldrb	r3, [r3, #13]
 800e15a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e15c:	7dbb      	ldrb	r3, [r7, #22]
 800e15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e162:	75bb      	strb	r3, [r7, #22]
 800e164:	7dbb      	ldrb	r3, [r7, #22]
 800e166:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	695a      	ldr	r2, [r3, #20]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e170:	7dba      	ldrb	r2, [r7, #22]
 800e172:	7d7b      	ldrb	r3, [r7, #21]
 800e174:	429a      	cmp	r2, r3
 800e176:	d115      	bne.n	800e1a4 <dir_find+0x106>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6a1b      	ldr	r3, [r3, #32]
 800e17c:	330d      	adds	r3, #13
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	7d3a      	ldrb	r2, [r7, #20]
 800e182:	429a      	cmp	r2, r3
 800e184:	d10e      	bne.n	800e1a4 <dir_find+0x106>
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	68da      	ldr	r2, [r3, #12]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a1b      	ldr	r3, [r3, #32]
 800e18e:	4619      	mov	r1, r3
 800e190:	4610      	mov	r0, r2
 800e192:	f7ff fdfd 	bl	800dd90 <cmp_lfn>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d003      	beq.n	800e1a4 <dir_find+0x106>
 800e19c:	7d7b      	ldrb	r3, [r7, #21]
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	e000      	b.n	800e1a6 <dir_find+0x108>
 800e1a4:	23ff      	movs	r3, #255	; 0xff
 800e1a6:	757b      	strb	r3, [r7, #21]
 800e1a8:	e024      	b.n	800e1f4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e1aa:	7d7b      	ldrb	r3, [r7, #21]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d109      	bne.n	800e1c4 <dir_find+0x126>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a1b      	ldr	r3, [r3, #32]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7ff ff51 	bl	800e05c <sum_sfn>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	461a      	mov	r2, r3
 800e1be:	7d3b      	ldrb	r3, [r7, #20]
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d024      	beq.n	800e20e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e1ca:	f003 0301 	and.w	r3, r3, #1
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d10a      	bne.n	800e1e8 <dir_find+0x14a>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6a18      	ldr	r0, [r3, #32]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	3324      	adds	r3, #36	; 0x24
 800e1da:	220b      	movs	r2, #11
 800e1dc:	4619      	mov	r1, r3
 800e1de:	f7fe fea1 	bl	800cf24 <mem_cmp>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d014      	beq.n	800e212 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e1e8:	23ff      	movs	r3, #255	; 0xff
 800e1ea:	757b      	strb	r3, [r7, #21]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1f2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7ff fc7f 	bl	800dafa <dir_next>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e200:	7dfb      	ldrb	r3, [r7, #23]
 800e202:	2b00      	cmp	r3, #0
 800e204:	f43f af65 	beq.w	800e0d2 <dir_find+0x34>
 800e208:	e004      	b.n	800e214 <dir_find+0x176>
		if (res != FR_OK) break;
 800e20a:	bf00      	nop
 800e20c:	e002      	b.n	800e214 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e20e:	bf00      	nop
 800e210:	e000      	b.n	800e214 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e212:	bf00      	nop

	return res;
 800e214:	7dfb      	ldrb	r3, [r7, #23]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
	...

0800e220 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b08c      	sub	sp, #48	; 0x30
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e234:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <dir_register+0x20>
 800e23c:	2306      	movs	r3, #6
 800e23e:	e0e0      	b.n	800e402 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e240:	2300      	movs	r3, #0
 800e242:	627b      	str	r3, [r7, #36]	; 0x24
 800e244:	e002      	b.n	800e24c <dir_register+0x2c>
 800e246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e248:	3301      	adds	r3, #1
 800e24a:	627b      	str	r3, [r7, #36]	; 0x24
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	68da      	ldr	r2, [r3, #12]
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	4413      	add	r3, r2
 800e256:	881b      	ldrh	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1f4      	bne.n	800e246 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e262:	f107 030c 	add.w	r3, r7, #12
 800e266:	220c      	movs	r2, #12
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fe fe1f 	bl	800ceac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e26e:	7dfb      	ldrb	r3, [r7, #23]
 800e270:	f003 0301 	and.w	r3, r3, #1
 800e274:	2b00      	cmp	r3, #0
 800e276:	d032      	beq.n	800e2de <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2240      	movs	r2, #64	; 0x40
 800e27c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e280:	2301      	movs	r3, #1
 800e282:	62bb      	str	r3, [r7, #40]	; 0x28
 800e284:	e016      	b.n	800e2b4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	68da      	ldr	r2, [r3, #12]
 800e290:	f107 010c 	add.w	r1, r7, #12
 800e294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e296:	f7ff fe53 	bl	800df40 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff feff 	bl	800e09e <dir_find>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e2a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d106      	bne.n	800e2bc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	2b63      	cmp	r3, #99	; 0x63
 800e2b8:	d9e5      	bls.n	800e286 <dir_register+0x66>
 800e2ba:	e000      	b.n	800e2be <dir_register+0x9e>
			if (res != FR_OK) break;
 800e2bc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c0:	2b64      	cmp	r3, #100	; 0x64
 800e2c2:	d101      	bne.n	800e2c8 <dir_register+0xa8>
 800e2c4:	2307      	movs	r3, #7
 800e2c6:	e09c      	b.n	800e402 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e2c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2cc:	2b04      	cmp	r3, #4
 800e2ce:	d002      	beq.n	800e2d6 <dir_register+0xb6>
 800e2d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2d4:	e095      	b.n	800e402 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e2d6:	7dfa      	ldrb	r2, [r7, #23]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
 800e2e0:	f003 0302 	and.w	r3, r3, #2
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d007      	beq.n	800e2f8 <dir_register+0xd8>
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ea:	330c      	adds	r3, #12
 800e2ec:	4a47      	ldr	r2, [pc, #284]	; (800e40c <dir_register+0x1ec>)
 800e2ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f2:	089b      	lsrs	r3, r3, #2
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	e000      	b.n	800e2fa <dir_register+0xda>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e2fc:	6a39      	ldr	r1, [r7, #32]
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7ff fcc0 	bl	800dc84 <dir_alloc>
 800e304:	4603      	mov	r3, r0
 800e306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e30a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d148      	bne.n	800e3a4 <dir_register+0x184>
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	3b01      	subs	r3, #1
 800e316:	623b      	str	r3, [r7, #32]
 800e318:	6a3b      	ldr	r3, [r7, #32]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d042      	beq.n	800e3a4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	695a      	ldr	r2, [r3, #20]
 800e322:	6a3b      	ldr	r3, [r7, #32]
 800e324:	015b      	lsls	r3, r3, #5
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7ff fb6a 	bl	800da04 <dir_sdi>
 800e330:	4603      	mov	r3, r0
 800e332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d132      	bne.n	800e3a4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	3324      	adds	r3, #36	; 0x24
 800e342:	4618      	mov	r0, r3
 800e344:	f7ff fe8a 	bl	800e05c <sum_sfn>
 800e348:	4603      	mov	r3, r0
 800e34a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	69db      	ldr	r3, [r3, #28]
 800e350:	4619      	mov	r1, r3
 800e352:	69f8      	ldr	r0, [r7, #28]
 800e354:	f7fe ffd8 	bl	800d308 <move_window>
 800e358:	4603      	mov	r3, r0
 800e35a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e35e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e362:	2b00      	cmp	r3, #0
 800e364:	d11d      	bne.n	800e3a2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	68d8      	ldr	r0, [r3, #12]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6a19      	ldr	r1, [r3, #32]
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	b2da      	uxtb	r2, r3
 800e372:	7efb      	ldrb	r3, [r7, #27]
 800e374:	f7ff fd7c 	bl	800de70 <put_lfn>
				fs->wflag = 1;
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	2201      	movs	r2, #1
 800e37c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e37e:	2100      	movs	r1, #0
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff fbba 	bl	800dafa <dir_next>
 800e386:	4603      	mov	r3, r0
 800e388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e38c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e390:	2b00      	cmp	r3, #0
 800e392:	d107      	bne.n	800e3a4 <dir_register+0x184>
 800e394:	6a3b      	ldr	r3, [r7, #32]
 800e396:	3b01      	subs	r3, #1
 800e398:	623b      	str	r3, [r7, #32]
 800e39a:	6a3b      	ldr	r3, [r7, #32]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1d5      	bne.n	800e34c <dir_register+0x12c>
 800e3a0:	e000      	b.n	800e3a4 <dir_register+0x184>
				if (res != FR_OK) break;
 800e3a2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e3a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d128      	bne.n	800e3fe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	69db      	ldr	r3, [r3, #28]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	69f8      	ldr	r0, [r7, #28]
 800e3b4:	f7fe ffa8 	bl	800d308 <move_window>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e3be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d11b      	bne.n	800e3fe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6a1b      	ldr	r3, [r3, #32]
 800e3ca:	2220      	movs	r2, #32
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe fd8d 	bl	800ceee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6a18      	ldr	r0, [r3, #32]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3324      	adds	r3, #36	; 0x24
 800e3dc:	220b      	movs	r2, #11
 800e3de:	4619      	mov	r1, r3
 800e3e0:	f7fe fd64 	bl	800ceac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	330c      	adds	r3, #12
 800e3f0:	f002 0218 	and.w	r2, r2, #24
 800e3f4:	b2d2      	uxtb	r2, r2
 800e3f6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e3fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e402:	4618      	mov	r0, r3
 800e404:	3730      	adds	r7, #48	; 0x30
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	4ec4ec4f 	.word	0x4ec4ec4f

0800e410 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b088      	sub	sp, #32
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2200      	movs	r2, #0
 800e424:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	69db      	ldr	r3, [r3, #28]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f000 80c9 	beq.w	800e5c2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e438:	d032      	beq.n	800e4a0 <get_fileinfo+0x90>
			i = j = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	61bb      	str	r3, [r7, #24]
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e442:	e01b      	b.n	800e47c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e444:	89fb      	ldrh	r3, [r7, #14]
 800e446:	2100      	movs	r1, #0
 800e448:	4618      	mov	r0, r3
 800e44a:	f001 fbc7 	bl	800fbdc <ff_convert>
 800e44e:	4603      	mov	r3, r0
 800e450:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e452:	89fb      	ldrh	r3, [r7, #14]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d102      	bne.n	800e45e <get_fileinfo+0x4e>
 800e458:	2300      	movs	r3, #0
 800e45a:	61fb      	str	r3, [r7, #28]
 800e45c:	e01a      	b.n	800e494 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	2bfe      	cmp	r3, #254	; 0xfe
 800e462:	d902      	bls.n	800e46a <get_fileinfo+0x5a>
 800e464:	2300      	movs	r3, #0
 800e466:	61fb      	str	r3, [r7, #28]
 800e468:	e014      	b.n	800e494 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	61fa      	str	r2, [r7, #28]
 800e470:	89fa      	ldrh	r2, [r7, #14]
 800e472:	b2d1      	uxtb	r1, r2
 800e474:	683a      	ldr	r2, [r7, #0]
 800e476:	4413      	add	r3, r2
 800e478:	460a      	mov	r2, r1
 800e47a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	68da      	ldr	r2, [r3, #12]
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	1c59      	adds	r1, r3, #1
 800e484:	61b9      	str	r1, [r7, #24]
 800e486:	005b      	lsls	r3, r3, #1
 800e488:	4413      	add	r3, r2
 800e48a:	881b      	ldrh	r3, [r3, #0]
 800e48c:	81fb      	strh	r3, [r7, #14]
 800e48e:	89fb      	ldrh	r3, [r7, #14]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1d7      	bne.n	800e444 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e494:	683a      	ldr	r2, [r7, #0]
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	4413      	add	r3, r2
 800e49a:	3316      	adds	r3, #22
 800e49c:	2200      	movs	r2, #0
 800e49e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	61bb      	str	r3, [r7, #24]
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e4a8:	683a      	ldr	r2, [r7, #0]
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	3316      	adds	r3, #22
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e4b4:	e04c      	b.n	800e550 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6a1a      	ldr	r2, [r3, #32]
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	1c59      	adds	r1, r3, #1
 800e4be:	61f9      	str	r1, [r7, #28]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
 800e4c8:	2b20      	cmp	r3, #32
 800e4ca:	d100      	bne.n	800e4ce <get_fileinfo+0xbe>
 800e4cc:	e040      	b.n	800e550 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	2b05      	cmp	r3, #5
 800e4d2:	d101      	bne.n	800e4d8 <get_fileinfo+0xc8>
 800e4d4:	23e5      	movs	r3, #229	; 0xe5
 800e4d6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	2b09      	cmp	r3, #9
 800e4dc:	d10f      	bne.n	800e4fe <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e4de:	89bb      	ldrh	r3, [r7, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d105      	bne.n	800e4f0 <get_fileinfo+0xe0>
 800e4e4:	683a      	ldr	r2, [r7, #0]
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	3316      	adds	r3, #22
 800e4ec:	222e      	movs	r2, #46	; 0x2e
 800e4ee:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	1c5a      	adds	r2, r3, #1
 800e4f4:	61ba      	str	r2, [r7, #24]
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	222e      	movs	r2, #46	; 0x2e
 800e4fc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	4413      	add	r3, r2
 800e504:	3309      	adds	r3, #9
 800e506:	7dfa      	ldrb	r2, [r7, #23]
 800e508:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e50a:	89bb      	ldrh	r3, [r7, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d11c      	bne.n	800e54a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e510:	7dfb      	ldrb	r3, [r7, #23]
 800e512:	2b40      	cmp	r3, #64	; 0x40
 800e514:	d913      	bls.n	800e53e <get_fileinfo+0x12e>
 800e516:	7dfb      	ldrb	r3, [r7, #23]
 800e518:	2b5a      	cmp	r3, #90	; 0x5a
 800e51a:	d810      	bhi.n	800e53e <get_fileinfo+0x12e>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a1b      	ldr	r3, [r3, #32]
 800e520:	330c      	adds	r3, #12
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	461a      	mov	r2, r3
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	2b08      	cmp	r3, #8
 800e52a:	d901      	bls.n	800e530 <get_fileinfo+0x120>
 800e52c:	2310      	movs	r3, #16
 800e52e:	e000      	b.n	800e532 <get_fileinfo+0x122>
 800e530:	2308      	movs	r3, #8
 800e532:	4013      	ands	r3, r2
 800e534:	2b00      	cmp	r3, #0
 800e536:	d002      	beq.n	800e53e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e538:	7dfb      	ldrb	r3, [r7, #23]
 800e53a:	3320      	adds	r3, #32
 800e53c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e53e:	683a      	ldr	r2, [r7, #0]
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	4413      	add	r3, r2
 800e544:	3316      	adds	r3, #22
 800e546:	7dfa      	ldrb	r2, [r7, #23]
 800e548:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	3301      	adds	r3, #1
 800e54e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	2b0a      	cmp	r3, #10
 800e554:	d9af      	bls.n	800e4b6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e556:	89bb      	ldrh	r3, [r7, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10d      	bne.n	800e578 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e55c:	683a      	ldr	r2, [r7, #0]
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	4413      	add	r3, r2
 800e562:	3316      	adds	r3, #22
 800e564:	2200      	movs	r2, #0
 800e566:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6a1b      	ldr	r3, [r3, #32]
 800e56c:	330c      	adds	r3, #12
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d101      	bne.n	800e578 <get_fileinfo+0x168>
 800e574:	2300      	movs	r3, #0
 800e576:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e578:	683a      	ldr	r2, [r7, #0]
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	4413      	add	r3, r2
 800e57e:	3309      	adds	r3, #9
 800e580:	2200      	movs	r2, #0
 800e582:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6a1b      	ldr	r3, [r3, #32]
 800e588:	7ada      	ldrb	r2, [r3, #11]
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a1b      	ldr	r3, [r3, #32]
 800e592:	331c      	adds	r3, #28
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe fc1f 	bl	800cdd8 <ld_dword>
 800e59a:	4602      	mov	r2, r0
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a1b      	ldr	r3, [r3, #32]
 800e5a4:	3316      	adds	r3, #22
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fe fc16 	bl	800cdd8 <ld_dword>
 800e5ac:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	80da      	strh	r2, [r3, #6]
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	0c1b      	lsrs	r3, r3, #16
 800e5ba:	b29a      	uxth	r2, r3
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	809a      	strh	r2, [r3, #4]
 800e5c0:	e000      	b.n	800e5c4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e5c2:	bf00      	nop
}
 800e5c4:	3720      	adds	r7, #32
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
	...

0800e5cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b08a      	sub	sp, #40	; 0x28
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	613b      	str	r3, [r7, #16]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	60fb      	str	r3, [r7, #12]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	617b      	str	r3, [r7, #20]
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	1c5a      	adds	r2, r3, #1
 800e5f0:	61ba      	str	r2, [r7, #24]
 800e5f2:	693a      	ldr	r2, [r7, #16]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e5fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5fc:	2b1f      	cmp	r3, #31
 800e5fe:	d940      	bls.n	800e682 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e602:	2b2f      	cmp	r3, #47	; 0x2f
 800e604:	d006      	beq.n	800e614 <create_name+0x48>
 800e606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e608:	2b5c      	cmp	r3, #92	; 0x5c
 800e60a:	d110      	bne.n	800e62e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e60c:	e002      	b.n	800e614 <create_name+0x48>
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	3301      	adds	r3, #1
 800e612:	61bb      	str	r3, [r7, #24]
 800e614:	693a      	ldr	r2, [r7, #16]
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	4413      	add	r3, r2
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	2b2f      	cmp	r3, #47	; 0x2f
 800e61e:	d0f6      	beq.n	800e60e <create_name+0x42>
 800e620:	693a      	ldr	r2, [r7, #16]
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	4413      	add	r3, r2
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b5c      	cmp	r3, #92	; 0x5c
 800e62a:	d0f0      	beq.n	800e60e <create_name+0x42>
			break;
 800e62c:	e02a      	b.n	800e684 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	2bfe      	cmp	r3, #254	; 0xfe
 800e632:	d901      	bls.n	800e638 <create_name+0x6c>
 800e634:	2306      	movs	r3, #6
 800e636:	e17d      	b.n	800e934 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e63e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e640:	2101      	movs	r1, #1
 800e642:	4618      	mov	r0, r3
 800e644:	f001 faca 	bl	800fbdc <ff_convert>
 800e648:	4603      	mov	r3, r0
 800e64a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e64c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d101      	bne.n	800e656 <create_name+0x8a>
 800e652:	2306      	movs	r3, #6
 800e654:	e16e      	b.n	800e934 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e658:	2b7f      	cmp	r3, #127	; 0x7f
 800e65a:	d809      	bhi.n	800e670 <create_name+0xa4>
 800e65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e65e:	4619      	mov	r1, r3
 800e660:	488d      	ldr	r0, [pc, #564]	; (800e898 <create_name+0x2cc>)
 800e662:	f7fe fc86 	bl	800cf72 <chk_chr>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <create_name+0xa4>
 800e66c:	2306      	movs	r3, #6
 800e66e:	e161      	b.n	800e934 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	1c5a      	adds	r2, r3, #1
 800e674:	617a      	str	r2, [r7, #20]
 800e676:	005b      	lsls	r3, r3, #1
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	4413      	add	r3, r2
 800e67c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e67e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e680:	e7b4      	b.n	800e5ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e682:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e684:	693a      	ldr	r2, [r7, #16]
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	441a      	add	r2, r3
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e68e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e690:	2b1f      	cmp	r3, #31
 800e692:	d801      	bhi.n	800e698 <create_name+0xcc>
 800e694:	2304      	movs	r3, #4
 800e696:	e000      	b.n	800e69a <create_name+0xce>
 800e698:	2300      	movs	r3, #0
 800e69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e69e:	e011      	b.n	800e6c4 <create_name+0xf8>
		w = lfn[di - 1];
 800e6a0:	697a      	ldr	r2, [r7, #20]
 800e6a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e6a6:	4413      	add	r3, r2
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	881b      	ldrh	r3, [r3, #0]
 800e6b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e6b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6b4:	2b20      	cmp	r3, #32
 800e6b6:	d002      	beq.n	800e6be <create_name+0xf2>
 800e6b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e6bc:	d106      	bne.n	800e6cc <create_name+0x100>
		di--;
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1ea      	bne.n	800e6a0 <create_name+0xd4>
 800e6ca:	e000      	b.n	800e6ce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e6cc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <create_name+0x118>
 800e6e0:	2306      	movs	r3, #6
 800e6e2:	e127      	b.n	800e934 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	3324      	adds	r3, #36	; 0x24
 800e6e8:	220b      	movs	r2, #11
 800e6ea:	2120      	movs	r1, #32
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fe fbfe 	bl	800ceee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	61bb      	str	r3, [r7, #24]
 800e6f6:	e002      	b.n	800e6fe <create_name+0x132>
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	61bb      	str	r3, [r7, #24]
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	005b      	lsls	r3, r3, #1
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	4413      	add	r3, r2
 800e706:	881b      	ldrh	r3, [r3, #0]
 800e708:	2b20      	cmp	r3, #32
 800e70a:	d0f5      	beq.n	800e6f8 <create_name+0x12c>
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	005b      	lsls	r3, r3, #1
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	4413      	add	r3, r2
 800e714:	881b      	ldrh	r3, [r3, #0]
 800e716:	2b2e      	cmp	r3, #46	; 0x2e
 800e718:	d0ee      	beq.n	800e6f8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d009      	beq.n	800e734 <create_name+0x168>
 800e720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e724:	f043 0303 	orr.w	r3, r3, #3
 800e728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e72c:	e002      	b.n	800e734 <create_name+0x168>
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	3b01      	subs	r3, #1
 800e732:	617b      	str	r3, [r7, #20]
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d009      	beq.n	800e74e <create_name+0x182>
 800e73a:	697a      	ldr	r2, [r7, #20]
 800e73c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e740:	4413      	add	r3, r2
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	68fa      	ldr	r2, [r7, #12]
 800e746:	4413      	add	r3, r2
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	2b2e      	cmp	r3, #46	; 0x2e
 800e74c:	d1ef      	bne.n	800e72e <create_name+0x162>

	i = b = 0; ni = 8;
 800e74e:	2300      	movs	r3, #0
 800e750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e754:	2300      	movs	r3, #0
 800e756:	623b      	str	r3, [r7, #32]
 800e758:	2308      	movs	r3, #8
 800e75a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	1c5a      	adds	r2, r3, #1
 800e760:	61ba      	str	r2, [r7, #24]
 800e762:	005b      	lsls	r3, r3, #1
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	4413      	add	r3, r2
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e76c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 8090 	beq.w	800e894 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e776:	2b20      	cmp	r3, #32
 800e778:	d006      	beq.n	800e788 <create_name+0x1bc>
 800e77a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e77c:	2b2e      	cmp	r3, #46	; 0x2e
 800e77e:	d10a      	bne.n	800e796 <create_name+0x1ca>
 800e780:	69ba      	ldr	r2, [r7, #24]
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	429a      	cmp	r2, r3
 800e786:	d006      	beq.n	800e796 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e78c:	f043 0303 	orr.w	r3, r3, #3
 800e790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e794:	e07d      	b.n	800e892 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e796:	6a3a      	ldr	r2, [r7, #32]
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d203      	bcs.n	800e7a6 <create_name+0x1da>
 800e79e:	69ba      	ldr	r2, [r7, #24]
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d123      	bne.n	800e7ee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	2b0b      	cmp	r3, #11
 800e7aa:	d106      	bne.n	800e7ba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7b0:	f043 0303 	orr.w	r3, r3, #3
 800e7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7b8:	e075      	b.n	800e8a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e7ba:	69ba      	ldr	r2, [r7, #24]
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d005      	beq.n	800e7ce <create_name+0x202>
 800e7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c6:	f043 0303 	orr.w	r3, r3, #3
 800e7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e7ce:	69ba      	ldr	r2, [r7, #24]
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d866      	bhi.n	800e8a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	61bb      	str	r3, [r7, #24]
 800e7da:	2308      	movs	r3, #8
 800e7dc:	623b      	str	r3, [r7, #32]
 800e7de:	230b      	movs	r3, #11
 800e7e0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e7e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7ec:	e051      	b.n	800e892 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e7ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7f0:	2b7f      	cmp	r3, #127	; 0x7f
 800e7f2:	d914      	bls.n	800e81e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e7f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f001 f9ef 	bl	800fbdc <ff_convert>
 800e7fe:	4603      	mov	r3, r0
 800e800:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e804:	2b00      	cmp	r3, #0
 800e806:	d004      	beq.n	800e812 <create_name+0x246>
 800e808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e80a:	3b80      	subs	r3, #128	; 0x80
 800e80c:	4a23      	ldr	r2, [pc, #140]	; (800e89c <create_name+0x2d0>)
 800e80e:	5cd3      	ldrb	r3, [r2, r3]
 800e810:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e816:	f043 0302 	orr.w	r3, r3, #2
 800e81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e81e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e820:	2b00      	cmp	r3, #0
 800e822:	d007      	beq.n	800e834 <create_name+0x268>
 800e824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e826:	4619      	mov	r1, r3
 800e828:	481d      	ldr	r0, [pc, #116]	; (800e8a0 <create_name+0x2d4>)
 800e82a:	f7fe fba2 	bl	800cf72 <chk_chr>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d008      	beq.n	800e846 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e834:	235f      	movs	r3, #95	; 0x5f
 800e836:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e83c:	f043 0303 	orr.w	r3, r3, #3
 800e840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e844:	e01b      	b.n	800e87e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e848:	2b40      	cmp	r3, #64	; 0x40
 800e84a:	d909      	bls.n	800e860 <create_name+0x294>
 800e84c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e84e:	2b5a      	cmp	r3, #90	; 0x5a
 800e850:	d806      	bhi.n	800e860 <create_name+0x294>
					b |= 2;
 800e852:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e856:	f043 0302 	orr.w	r3, r3, #2
 800e85a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e85e:	e00e      	b.n	800e87e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e862:	2b60      	cmp	r3, #96	; 0x60
 800e864:	d90b      	bls.n	800e87e <create_name+0x2b2>
 800e866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e868:	2b7a      	cmp	r3, #122	; 0x7a
 800e86a:	d808      	bhi.n	800e87e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e86c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e870:	f043 0301 	orr.w	r3, r3, #1
 800e874:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e87a:	3b20      	subs	r3, #32
 800e87c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e87e:	6a3b      	ldr	r3, [r7, #32]
 800e880:	1c5a      	adds	r2, r3, #1
 800e882:	623a      	str	r2, [r7, #32]
 800e884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e886:	b2d1      	uxtb	r1, r2
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	4413      	add	r3, r2
 800e88c:	460a      	mov	r2, r1
 800e88e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e892:	e763      	b.n	800e75c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e894:	bf00      	nop
 800e896:	e006      	b.n	800e8a6 <create_name+0x2da>
 800e898:	08011f0c 	.word	0x08011f0c
 800e89c:	08011fd0 	.word	0x08011fd0
 800e8a0:	08011f18 	.word	0x08011f18
			if (si > di) break;			/* No extension */
 800e8a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e8ac:	2be5      	cmp	r3, #229	; 0xe5
 800e8ae:	d103      	bne.n	800e8b8 <create_name+0x2ec>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2205      	movs	r2, #5
 800e8b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	2b08      	cmp	r3, #8
 800e8bc:	d104      	bne.n	800e8c8 <create_name+0x2fc>
 800e8be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8cc:	f003 030c 	and.w	r3, r3, #12
 800e8d0:	2b0c      	cmp	r3, #12
 800e8d2:	d005      	beq.n	800e8e0 <create_name+0x314>
 800e8d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8d8:	f003 0303 	and.w	r3, r3, #3
 800e8dc:	2b03      	cmp	r3, #3
 800e8de:	d105      	bne.n	800e8ec <create_name+0x320>
 800e8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8e4:	f043 0302 	orr.w	r3, r3, #2
 800e8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8f0:	f003 0302 	and.w	r3, r3, #2
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d117      	bne.n	800e928 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e8f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8fc:	f003 0303 	and.w	r3, r3, #3
 800e900:	2b01      	cmp	r3, #1
 800e902:	d105      	bne.n	800e910 <create_name+0x344>
 800e904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e908:	f043 0310 	orr.w	r3, r3, #16
 800e90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e910:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e914:	f003 030c 	and.w	r3, r3, #12
 800e918:	2b04      	cmp	r3, #4
 800e91a:	d105      	bne.n	800e928 <create_name+0x35c>
 800e91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e920:	f043 0308 	orr.w	r3, r3, #8
 800e924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e92e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e932:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e934:	4618      	mov	r0, r3
 800e936:	3728      	adds	r7, #40	; 0x28
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e950:	e002      	b.n	800e958 <follow_path+0x1c>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	3301      	adds	r3, #1
 800e956:	603b      	str	r3, [r7, #0]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	2b2f      	cmp	r3, #47	; 0x2f
 800e95e:	d0f8      	beq.n	800e952 <follow_path+0x16>
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	2b5c      	cmp	r3, #92	; 0x5c
 800e966:	d0f4      	beq.n	800e952 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	2200      	movs	r2, #0
 800e96c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	2b1f      	cmp	r3, #31
 800e974:	d80a      	bhi.n	800e98c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2280      	movs	r2, #128	; 0x80
 800e97a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e97e:	2100      	movs	r1, #0
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7ff f83f 	bl	800da04 <dir_sdi>
 800e986:	4603      	mov	r3, r0
 800e988:	75fb      	strb	r3, [r7, #23]
 800e98a:	e043      	b.n	800ea14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e98c:	463b      	mov	r3, r7
 800e98e:	4619      	mov	r1, r3
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7ff fe1b 	bl	800e5cc <create_name>
 800e996:	4603      	mov	r3, r0
 800e998:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e99a:	7dfb      	ldrb	r3, [r7, #23]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d134      	bne.n	800ea0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f7ff fb7c 	bl	800e09e <dir_find>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e9b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e9b2:	7dfb      	ldrb	r3, [r7, #23]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00a      	beq.n	800e9ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e9b8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ba:	2b04      	cmp	r3, #4
 800e9bc:	d127      	bne.n	800ea0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e9be:	7afb      	ldrb	r3, [r7, #11]
 800e9c0:	f003 0304 	and.w	r3, r3, #4
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d122      	bne.n	800ea0e <follow_path+0xd2>
 800e9c8:	2305      	movs	r3, #5
 800e9ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e9cc:	e01f      	b.n	800ea0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e9ce:	7afb      	ldrb	r3, [r7, #11]
 800e9d0:	f003 0304 	and.w	r3, r3, #4
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d11c      	bne.n	800ea12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	799b      	ldrb	r3, [r3, #6]
 800e9dc:	f003 0310 	and.w	r3, r3, #16
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d102      	bne.n	800e9ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e9e4:	2305      	movs	r3, #5
 800e9e6:	75fb      	strb	r3, [r7, #23]
 800e9e8:	e014      	b.n	800ea14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	695b      	ldr	r3, [r3, #20]
 800e9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9f8:	4413      	add	r3, r2
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f7ff f988 	bl	800dd12 <ld_clust>
 800ea02:	4602      	mov	r2, r0
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea08:	e7c0      	b.n	800e98c <follow_path+0x50>
			if (res != FR_OK) break;
 800ea0a:	bf00      	nop
 800ea0c:	e002      	b.n	800ea14 <follow_path+0xd8>
				break;
 800ea0e:	bf00      	nop
 800ea10:	e000      	b.n	800ea14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea12:	bf00      	nop
			}
		}
	}

	return res;
 800ea14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3718      	adds	r7, #24
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b087      	sub	sp, #28
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ea26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d031      	beq.n	800ea98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	617b      	str	r3, [r7, #20]
 800ea3a:	e002      	b.n	800ea42 <get_ldnumber+0x24>
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	2b1f      	cmp	r3, #31
 800ea48:	d903      	bls.n	800ea52 <get_ldnumber+0x34>
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b3a      	cmp	r3, #58	; 0x3a
 800ea50:	d1f4      	bne.n	800ea3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	2b3a      	cmp	r3, #58	; 0x3a
 800ea58:	d11c      	bne.n	800ea94 <get_ldnumber+0x76>
			tp = *path;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	1c5a      	adds	r2, r3, #1
 800ea64:	60fa      	str	r2, [r7, #12]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	3b30      	subs	r3, #48	; 0x30
 800ea6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b09      	cmp	r3, #9
 800ea70:	d80e      	bhi.n	800ea90 <get_ldnumber+0x72>
 800ea72:	68fa      	ldr	r2, [r7, #12]
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d10a      	bne.n	800ea90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d107      	bne.n	800ea90 <get_ldnumber+0x72>
					vol = (int)i;
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	3301      	adds	r3, #1
 800ea88:	617b      	str	r3, [r7, #20]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	697a      	ldr	r2, [r7, #20]
 800ea8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	e002      	b.n	800ea9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ea94:	2300      	movs	r3, #0
 800ea96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ea98:	693b      	ldr	r3, [r7, #16]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	371c      	adds	r7, #28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
	...

0800eaa8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2200      	movs	r2, #0
 800eab6:	70da      	strb	r2, [r3, #3]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eabe:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eac0:	6839      	ldr	r1, [r7, #0]
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7fe fc20 	bl	800d308 <move_window>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d001      	beq.n	800ead2 <check_fs+0x2a>
 800eace:	2304      	movs	r3, #4
 800ead0:	e038      	b.n	800eb44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	3334      	adds	r3, #52	; 0x34
 800ead6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fe f964 	bl	800cda8 <ld_word>
 800eae0:	4603      	mov	r3, r0
 800eae2:	461a      	mov	r2, r3
 800eae4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d001      	beq.n	800eaf0 <check_fs+0x48>
 800eaec:	2303      	movs	r3, #3
 800eaee:	e029      	b.n	800eb44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eaf6:	2be9      	cmp	r3, #233	; 0xe9
 800eaf8:	d009      	beq.n	800eb0e <check_fs+0x66>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb00:	2beb      	cmp	r3, #235	; 0xeb
 800eb02:	d11e      	bne.n	800eb42 <check_fs+0x9a>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800eb0a:	2b90      	cmp	r3, #144	; 0x90
 800eb0c:	d119      	bne.n	800eb42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	3334      	adds	r3, #52	; 0x34
 800eb12:	3336      	adds	r3, #54	; 0x36
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe f95f 	bl	800cdd8 <ld_dword>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eb20:	4a0a      	ldr	r2, [pc, #40]	; (800eb4c <check_fs+0xa4>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d101      	bne.n	800eb2a <check_fs+0x82>
 800eb26:	2300      	movs	r3, #0
 800eb28:	e00c      	b.n	800eb44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	3334      	adds	r3, #52	; 0x34
 800eb2e:	3352      	adds	r3, #82	; 0x52
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fe f951 	bl	800cdd8 <ld_dword>
 800eb36:	4603      	mov	r3, r0
 800eb38:	4a05      	ldr	r2, [pc, #20]	; (800eb50 <check_fs+0xa8>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d101      	bne.n	800eb42 <check_fs+0x9a>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e000      	b.n	800eb44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800eb42:	2302      	movs	r3, #2
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	00544146 	.word	0x00544146
 800eb50:	33544146 	.word	0x33544146

0800eb54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b096      	sub	sp, #88	; 0x58
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	4613      	mov	r3, r2
 800eb60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	2200      	movs	r2, #0
 800eb66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7ff ff58 	bl	800ea1e <get_ldnumber>
 800eb6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eb70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	da01      	bge.n	800eb7a <find_volume+0x26>
 800eb76:	230b      	movs	r3, #11
 800eb78:	e230      	b.n	800efdc <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eb7a:	4aa1      	ldr	r2, [pc, #644]	; (800ee00 <find_volume+0x2ac>)
 800eb7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <find_volume+0x3a>
 800eb8a:	230c      	movs	r3, #12
 800eb8c:	e226      	b.n	800efdc <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eb94:	79fb      	ldrb	r3, [r7, #7]
 800eb96:	f023 0301 	bic.w	r3, r3, #1
 800eb9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d01a      	beq.n	800ebda <find_volume+0x86>
		stat = disk_status(fs->drv);
 800eba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba6:	785b      	ldrb	r3, [r3, #1]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fe f85f 	bl	800cc6c <disk_status>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ebb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10c      	bne.n	800ebda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ebc0:	79fb      	ldrb	r3, [r7, #7]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d007      	beq.n	800ebd6 <find_volume+0x82>
 800ebc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebca:	f003 0304 	and.w	r3, r3, #4
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d001      	beq.n	800ebd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ebd2:	230a      	movs	r3, #10
 800ebd4:	e202      	b.n	800efdc <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	e200      	b.n	800efdc <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ebda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebdc:	2200      	movs	r2, #0
 800ebde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ebe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ebe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebea:	785b      	ldrb	r3, [r3, #1]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7fe f857 	bl	800cca0 <disk_initialize>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ebf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebfc:	f003 0301 	and.w	r3, r3, #1
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d001      	beq.n	800ec08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ec04:	2303      	movs	r3, #3
 800ec06:	e1e9      	b.n	800efdc <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ec08:	79fb      	ldrb	r3, [r7, #7]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <find_volume+0xca>
 800ec0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec12:	f003 0304 	and.w	r3, r3, #4
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d001      	beq.n	800ec1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ec1a:	230a      	movs	r3, #10
 800ec1c:	e1de      	b.n	800efdc <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ec22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec26:	f7ff ff3f 	bl	800eaa8 <check_fs>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ec30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec34:	2b02      	cmp	r3, #2
 800ec36:	d149      	bne.n	800eccc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec38:	2300      	movs	r3, #0
 800ec3a:	643b      	str	r3, [r7, #64]	; 0x40
 800ec3c:	e01e      	b.n	800ec7c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ec3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec46:	011b      	lsls	r3, r3, #4
 800ec48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ec4c:	4413      	add	r3, r2
 800ec4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ec50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec52:	3304      	adds	r3, #4
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d006      	beq.n	800ec68 <find_volume+0x114>
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5c:	3308      	adds	r3, #8
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe f8ba 	bl	800cdd8 <ld_dword>
 800ec64:	4602      	mov	r2, r0
 800ec66:	e000      	b.n	800ec6a <find_volume+0x116>
 800ec68:	2200      	movs	r2, #0
 800ec6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	3358      	adds	r3, #88	; 0x58
 800ec70:	443b      	add	r3, r7
 800ec72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec78:	3301      	adds	r3, #1
 800ec7a:	643b      	str	r3, [r7, #64]	; 0x40
 800ec7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec7e:	2b03      	cmp	r3, #3
 800ec80:	d9dd      	bls.n	800ec3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ec82:	2300      	movs	r3, #0
 800ec84:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ec86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d002      	beq.n	800ec92 <find_volume+0x13e>
 800ec8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ec92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	3358      	adds	r3, #88	; 0x58
 800ec98:	443b      	add	r3, r7
 800ec9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ec9e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d005      	beq.n	800ecb2 <find_volume+0x15e>
 800eca6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecaa:	f7ff fefd 	bl	800eaa8 <check_fs>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	e000      	b.n	800ecb4 <find_volume+0x160>
 800ecb2:	2303      	movs	r3, #3
 800ecb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ecb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d905      	bls.n	800eccc <find_volume+0x178>
 800ecc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	643b      	str	r3, [r7, #64]	; 0x40
 800ecc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecc8:	2b03      	cmp	r3, #3
 800ecca:	d9e2      	bls.n	800ec92 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecd0:	2b04      	cmp	r3, #4
 800ecd2:	d101      	bne.n	800ecd8 <find_volume+0x184>
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	e181      	b.n	800efdc <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ecd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d901      	bls.n	800ece4 <find_volume+0x190>
 800ece0:	230d      	movs	r3, #13
 800ece2:	e17b      	b.n	800efdc <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece6:	3334      	adds	r3, #52	; 0x34
 800ece8:	330b      	adds	r3, #11
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe f85c 	bl	800cda8 <ld_word>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecf6:	d001      	beq.n	800ecfc <find_volume+0x1a8>
 800ecf8:	230d      	movs	r3, #13
 800ecfa:	e16f      	b.n	800efdc <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ecfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfe:	3334      	adds	r3, #52	; 0x34
 800ed00:	3316      	adds	r3, #22
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fe f850 	bl	800cda8 <ld_word>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ed0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d106      	bne.n	800ed20 <find_volume+0x1cc>
 800ed12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed14:	3334      	adds	r3, #52	; 0x34
 800ed16:	3324      	adds	r3, #36	; 0x24
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fe f85d 	bl	800cdd8 <ld_dword>
 800ed1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ed20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed24:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ed26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed28:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ed30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed32:	789b      	ldrb	r3, [r3, #2]
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d005      	beq.n	800ed44 <find_volume+0x1f0>
 800ed38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3a:	789b      	ldrb	r3, [r3, #2]
 800ed3c:	2b02      	cmp	r3, #2
 800ed3e:	d001      	beq.n	800ed44 <find_volume+0x1f0>
 800ed40:	230d      	movs	r3, #13
 800ed42:	e14b      	b.n	800efdc <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ed44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed46:	789b      	ldrb	r3, [r3, #2]
 800ed48:	461a      	mov	r2, r3
 800ed4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed4c:	fb02 f303 	mul.w	r3, r2, r3
 800ed50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ed52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ed5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed60:	895b      	ldrh	r3, [r3, #10]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d008      	beq.n	800ed78 <find_volume+0x224>
 800ed66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed68:	895b      	ldrh	r3, [r3, #10]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	895b      	ldrh	r3, [r3, #10]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	4013      	ands	r3, r2
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d001      	beq.n	800ed7c <find_volume+0x228>
 800ed78:	230d      	movs	r3, #13
 800ed7a:	e12f      	b.n	800efdc <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7e:	3334      	adds	r3, #52	; 0x34
 800ed80:	3311      	adds	r3, #17
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fe f810 	bl	800cda8 <ld_word>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ed90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed92:	891b      	ldrh	r3, [r3, #8]
 800ed94:	f003 030f 	and.w	r3, r3, #15
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <find_volume+0x24e>
 800ed9e:	230d      	movs	r3, #13
 800eda0:	e11c      	b.n	800efdc <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda4:	3334      	adds	r3, #52	; 0x34
 800eda6:	3313      	adds	r3, #19
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fd fffd 	bl	800cda8 <ld_word>
 800edae:	4603      	mov	r3, r0
 800edb0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800edb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d106      	bne.n	800edc6 <find_volume+0x272>
 800edb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edba:	3334      	adds	r3, #52	; 0x34
 800edbc:	3320      	adds	r3, #32
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe f80a 	bl	800cdd8 <ld_dword>
 800edc4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800edc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc8:	3334      	adds	r3, #52	; 0x34
 800edca:	330e      	adds	r3, #14
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fd ffeb 	bl	800cda8 <ld_word>
 800edd2:	4603      	mov	r3, r0
 800edd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800edd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d101      	bne.n	800ede0 <find_volume+0x28c>
 800eddc:	230d      	movs	r3, #13
 800edde:	e0fd      	b.n	800efdc <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ede0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ede2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ede4:	4413      	add	r3, r2
 800ede6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ede8:	8912      	ldrh	r2, [r2, #8]
 800edea:	0912      	lsrs	r2, r2, #4
 800edec:	b292      	uxth	r2, r2
 800edee:	4413      	add	r3, r2
 800edf0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800edf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d204      	bcs.n	800ee04 <find_volume+0x2b0>
 800edfa:	230d      	movs	r3, #13
 800edfc:	e0ee      	b.n	800efdc <find_volume+0x488>
 800edfe:	bf00      	nop
 800ee00:	2000298c 	.word	0x2000298c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ee04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee08:	1ad3      	subs	r3, r2, r3
 800ee0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee0c:	8952      	ldrh	r2, [r2, #10]
 800ee0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee12:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ee14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d101      	bne.n	800ee1e <find_volume+0x2ca>
 800ee1a:	230d      	movs	r3, #13
 800ee1c:	e0de      	b.n	800efdc <find_volume+0x488>
		fmt = FS_FAT32;
 800ee1e:	2303      	movs	r3, #3
 800ee20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d802      	bhi.n	800ee34 <find_volume+0x2e0>
 800ee2e:	2302      	movs	r3, #2
 800ee30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d802      	bhi.n	800ee44 <find_volume+0x2f0>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee46:	1c9a      	adds	r2, r3, #2
 800ee48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee50:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ee52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee56:	441a      	add	r2, r3
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ee5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee60:	441a      	add	r2, r3
 800ee62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee64:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ee66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee6a:	2b03      	cmp	r3, #3
 800ee6c:	d11e      	bne.n	800eeac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ee6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee70:	3334      	adds	r3, #52	; 0x34
 800ee72:	332a      	adds	r3, #42	; 0x2a
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fd ff97 	bl	800cda8 <ld_word>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d001      	beq.n	800ee84 <find_volume+0x330>
 800ee80:	230d      	movs	r3, #13
 800ee82:	e0ab      	b.n	800efdc <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ee84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee86:	891b      	ldrh	r3, [r3, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d001      	beq.n	800ee90 <find_volume+0x33c>
 800ee8c:	230d      	movs	r3, #13
 800ee8e:	e0a5      	b.n	800efdc <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ee90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee92:	3334      	adds	r3, #52	; 0x34
 800ee94:	332c      	adds	r3, #44	; 0x2c
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fd ff9e 	bl	800cdd8 <ld_dword>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea4:	699b      	ldr	r3, [r3, #24]
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	647b      	str	r3, [r7, #68]	; 0x44
 800eeaa:	e01f      	b.n	800eeec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeae:	891b      	ldrh	r3, [r3, #8]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d101      	bne.n	800eeb8 <find_volume+0x364>
 800eeb4:	230d      	movs	r3, #13
 800eeb6:	e091      	b.n	800efdc <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eebe:	441a      	add	r2, r3
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	d103      	bne.n	800eed4 <find_volume+0x380>
 800eecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eece:	699b      	ldr	r3, [r3, #24]
 800eed0:	005b      	lsls	r3, r3, #1
 800eed2:	e00a      	b.n	800eeea <find_volume+0x396>
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	699a      	ldr	r2, [r3, #24]
 800eed8:	4613      	mov	r3, r2
 800eeda:	005b      	lsls	r3, r3, #1
 800eedc:	4413      	add	r3, r2
 800eede:	085a      	lsrs	r2, r3, #1
 800eee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee2:	699b      	ldr	r3, [r3, #24]
 800eee4:	f003 0301 	and.w	r3, r3, #1
 800eee8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eeea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeee:	69da      	ldr	r2, [r3, #28]
 800eef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eef2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eef6:	0a5b      	lsrs	r3, r3, #9
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d201      	bcs.n	800ef00 <find_volume+0x3ac>
 800eefc:	230d      	movs	r3, #13
 800eefe:	e06d      	b.n	800efdc <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ef00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef06:	615a      	str	r2, [r3, #20]
 800ef08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0a:	695a      	ldr	r2, [r3, #20]
 800ef0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef12:	2280      	movs	r2, #128	; 0x80
 800ef14:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ef16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef1a:	2b03      	cmp	r3, #3
 800ef1c:	d149      	bne.n	800efb2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ef1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef20:	3334      	adds	r3, #52	; 0x34
 800ef22:	3330      	adds	r3, #48	; 0x30
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fd ff3f 	bl	800cda8 <ld_word>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d140      	bne.n	800efb2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ef30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef32:	3301      	adds	r3, #1
 800ef34:	4619      	mov	r1, r3
 800ef36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef38:	f7fe f9e6 	bl	800d308 <move_window>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d137      	bne.n	800efb2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ef42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef44:	2200      	movs	r2, #0
 800ef46:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ef48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4a:	3334      	adds	r3, #52	; 0x34
 800ef4c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fd ff29 	bl	800cda8 <ld_word>
 800ef56:	4603      	mov	r3, r0
 800ef58:	461a      	mov	r2, r3
 800ef5a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d127      	bne.n	800efb2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ef62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef64:	3334      	adds	r3, #52	; 0x34
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fd ff36 	bl	800cdd8 <ld_dword>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	4a1d      	ldr	r2, [pc, #116]	; (800efe4 <find_volume+0x490>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d11e      	bne.n	800efb2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef76:	3334      	adds	r3, #52	; 0x34
 800ef78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fd ff2b 	bl	800cdd8 <ld_dword>
 800ef82:	4603      	mov	r3, r0
 800ef84:	4a18      	ldr	r2, [pc, #96]	; (800efe8 <find_volume+0x494>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d113      	bne.n	800efb2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ef8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8c:	3334      	adds	r3, #52	; 0x34
 800ef8e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fd ff20 	bl	800cdd8 <ld_dword>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ef9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa0:	3334      	adds	r3, #52	; 0x34
 800efa2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fd ff16 	bl	800cdd8 <ld_dword>
 800efac:	4602      	mov	r2, r0
 800efae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800efb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800efb8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800efba:	4b0c      	ldr	r3, [pc, #48]	; (800efec <find_volume+0x498>)
 800efbc:	881b      	ldrh	r3, [r3, #0]
 800efbe:	3301      	adds	r3, #1
 800efc0:	b29a      	uxth	r2, r3
 800efc2:	4b0a      	ldr	r3, [pc, #40]	; (800efec <find_volume+0x498>)
 800efc4:	801a      	strh	r2, [r3, #0]
 800efc6:	4b09      	ldr	r3, [pc, #36]	; (800efec <find_volume+0x498>)
 800efc8:	881a      	ldrh	r2, [r3, #0]
 800efca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efcc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800efce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd0:	4a07      	ldr	r2, [pc, #28]	; (800eff0 <find_volume+0x49c>)
 800efd2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800efd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efd6:	f7fe f92f 	bl	800d238 <clear_lock>
#endif
	return FR_OK;
 800efda:	2300      	movs	r3, #0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3758      	adds	r7, #88	; 0x58
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	41615252 	.word	0x41615252
 800efe8:	61417272 	.word	0x61417272
 800efec:	20002990 	.word	0x20002990
 800eff0:	200029b4 	.word	0x200029b4

0800eff4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800effe:	2309      	movs	r3, #9
 800f000:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d01c      	beq.n	800f042 <validate+0x4e>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d018      	beq.n	800f042 <validate+0x4e>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d013      	beq.n	800f042 <validate+0x4e>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	889a      	ldrh	r2, [r3, #4]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	88db      	ldrh	r3, [r3, #6]
 800f024:	429a      	cmp	r2, r3
 800f026:	d10c      	bne.n	800f042 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	785b      	ldrb	r3, [r3, #1]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fd fe1c 	bl	800cc6c <disk_status>
 800f034:	4603      	mov	r3, r0
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d101      	bne.n	800f042 <validate+0x4e>
			res = FR_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f042:	7bfb      	ldrb	r3, [r7, #15]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d102      	bne.n	800f04e <validate+0x5a>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	e000      	b.n	800f050 <validate+0x5c>
 800f04e:	2300      	movs	r3, #0
 800f050:	683a      	ldr	r2, [r7, #0]
 800f052:	6013      	str	r3, [r2, #0]
	return res;
 800f054:	7bfb      	ldrb	r3, [r7, #15]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
	...

0800f060 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b088      	sub	sp, #32
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	4613      	mov	r3, r2
 800f06c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f072:	f107 0310 	add.w	r3, r7, #16
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff fcd1 	bl	800ea1e <get_ldnumber>
 800f07c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	2b00      	cmp	r3, #0
 800f082:	da01      	bge.n	800f088 <f_mount+0x28>
 800f084:	230b      	movs	r3, #11
 800f086:	e02b      	b.n	800f0e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f088:	4a17      	ldr	r2, [pc, #92]	; (800f0e8 <f_mount+0x88>)
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f090:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d005      	beq.n	800f0a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f098:	69b8      	ldr	r0, [r7, #24]
 800f09a:	f7fe f8cd 	bl	800d238 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	490d      	ldr	r1, [pc, #52]	; (800f0e8 <f_mount+0x88>)
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <f_mount+0x66>
 800f0c0:	79fb      	ldrb	r3, [r7, #7]
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d001      	beq.n	800f0ca <f_mount+0x6a>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	e00a      	b.n	800f0e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f0ca:	f107 010c 	add.w	r1, r7, #12
 800f0ce:	f107 0308 	add.w	r3, r7, #8
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7ff fd3d 	bl	800eb54 <find_volume>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f0de:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3720      	adds	r7, #32
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	2000298c 	.word	0x2000298c

0800f0ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b09a      	sub	sp, #104	; 0x68
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d101      	bne.n	800f104 <f_open+0x18>
 800f100:	2309      	movs	r3, #9
 800f102:	e1ad      	b.n	800f460 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f104:	79fb      	ldrb	r3, [r7, #7]
 800f106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f10a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f10c:	79fa      	ldrb	r2, [r7, #7]
 800f10e:	f107 0114 	add.w	r1, r7, #20
 800f112:	f107 0308 	add.w	r3, r7, #8
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fd1c 	bl	800eb54 <find_volume>
 800f11c:	4603      	mov	r3, r0
 800f11e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f122:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f126:	2b00      	cmp	r3, #0
 800f128:	f040 8191 	bne.w	800f44e <f_open+0x362>
		dj.obj.fs = fs;
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f130:	68ba      	ldr	r2, [r7, #8]
 800f132:	f107 0318 	add.w	r3, r7, #24
 800f136:	4611      	mov	r1, r2
 800f138:	4618      	mov	r0, r3
 800f13a:	f7ff fbff 	bl	800e93c <follow_path>
 800f13e:	4603      	mov	r3, r0
 800f140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d11a      	bne.n	800f182 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f14c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f150:	b25b      	sxtb	r3, r3
 800f152:	2b00      	cmp	r3, #0
 800f154:	da03      	bge.n	800f15e <f_open+0x72>
				res = FR_INVALID_NAME;
 800f156:	2306      	movs	r3, #6
 800f158:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f15c:	e011      	b.n	800f182 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f15e:	79fb      	ldrb	r3, [r7, #7]
 800f160:	f023 0301 	bic.w	r3, r3, #1
 800f164:	2b00      	cmp	r3, #0
 800f166:	bf14      	ite	ne
 800f168:	2301      	movne	r3, #1
 800f16a:	2300      	moveq	r3, #0
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	461a      	mov	r2, r3
 800f170:	f107 0318 	add.w	r3, r7, #24
 800f174:	4611      	mov	r1, r2
 800f176:	4618      	mov	r0, r3
 800f178:	f7fd ff16 	bl	800cfa8 <chk_lock>
 800f17c:	4603      	mov	r3, r0
 800f17e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	f003 031c 	and.w	r3, r3, #28
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d07f      	beq.n	800f28c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f18c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f190:	2b00      	cmp	r3, #0
 800f192:	d017      	beq.n	800f1c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f194:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f198:	2b04      	cmp	r3, #4
 800f19a:	d10e      	bne.n	800f1ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f19c:	f7fd ff60 	bl	800d060 <enq_lock>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d006      	beq.n	800f1b4 <f_open+0xc8>
 800f1a6:	f107 0318 	add.w	r3, r7, #24
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7ff f838 	bl	800e220 <dir_register>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	e000      	b.n	800f1b6 <f_open+0xca>
 800f1b4:	2312      	movs	r3, #18
 800f1b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f1ba:	79fb      	ldrb	r3, [r7, #7]
 800f1bc:	f043 0308 	orr.w	r3, r3, #8
 800f1c0:	71fb      	strb	r3, [r7, #7]
 800f1c2:	e010      	b.n	800f1e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f1c4:	7fbb      	ldrb	r3, [r7, #30]
 800f1c6:	f003 0311 	and.w	r3, r3, #17
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <f_open+0xea>
					res = FR_DENIED;
 800f1ce:	2307      	movs	r3, #7
 800f1d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f1d4:	e007      	b.n	800f1e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f1d6:	79fb      	ldrb	r3, [r7, #7]
 800f1d8:	f003 0304 	and.w	r3, r3, #4
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <f_open+0xfa>
 800f1e0:	2308      	movs	r3, #8
 800f1e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f1e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d168      	bne.n	800f2c0 <f_open+0x1d4>
 800f1ee:	79fb      	ldrb	r3, [r7, #7]
 800f1f0:	f003 0308 	and.w	r3, r3, #8
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d063      	beq.n	800f2c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f1f8:	f7fb fb0a 	bl	800a810 <get_fattime>
 800f1fc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f200:	330e      	adds	r3, #14
 800f202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f204:	4618      	mov	r0, r3
 800f206:	f7fd fe25 	bl	800ce54 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20c:	3316      	adds	r3, #22
 800f20e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f210:	4618      	mov	r0, r3
 800f212:	f7fd fe1f 	bl	800ce54 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f218:	330b      	adds	r3, #11
 800f21a:	2220      	movs	r2, #32
 800f21c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f222:	4611      	mov	r1, r2
 800f224:	4618      	mov	r0, r3
 800f226:	f7fe fd74 	bl	800dd12 <ld_clust>
 800f22a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f230:	2200      	movs	r2, #0
 800f232:	4618      	mov	r0, r3
 800f234:	f7fe fd8c 	bl	800dd50 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	331c      	adds	r3, #28
 800f23c:	2100      	movs	r1, #0
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fd fe08 	bl	800ce54 <st_dword>
					fs->wflag = 1;
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	2201      	movs	r2, #1
 800f248:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d037      	beq.n	800f2c0 <f_open+0x1d4>
						dw = fs->winsect;
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f254:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f256:	f107 0318 	add.w	r3, r7, #24
 800f25a:	2200      	movs	r2, #0
 800f25c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fe fa9f 	bl	800d7a2 <remove_chain>
 800f264:	4603      	mov	r3, r0
 800f266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f26a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d126      	bne.n	800f2c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f276:	4618      	mov	r0, r3
 800f278:	f7fe f846 	bl	800d308 <move_window>
 800f27c:	4603      	mov	r3, r0
 800f27e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f286:	3a01      	subs	r2, #1
 800f288:	611a      	str	r2, [r3, #16]
 800f28a:	e019      	b.n	800f2c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f28c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f290:	2b00      	cmp	r3, #0
 800f292:	d115      	bne.n	800f2c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f294:	7fbb      	ldrb	r3, [r7, #30]
 800f296:	f003 0310 	and.w	r3, r3, #16
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d003      	beq.n	800f2a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f29e:	2304      	movs	r3, #4
 800f2a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f2a4:	e00c      	b.n	800f2c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f2a6:	79fb      	ldrb	r3, [r7, #7]
 800f2a8:	f003 0302 	and.w	r3, r3, #2
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d007      	beq.n	800f2c0 <f_open+0x1d4>
 800f2b0:	7fbb      	ldrb	r3, [r7, #30]
 800f2b2:	f003 0301 	and.w	r3, r3, #1
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d002      	beq.n	800f2c0 <f_open+0x1d4>
						res = FR_DENIED;
 800f2ba:	2307      	movs	r3, #7
 800f2bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f2c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d128      	bne.n	800f31a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f2c8:	79fb      	ldrb	r3, [r7, #7]
 800f2ca:	f003 0308 	and.w	r3, r3, #8
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d003      	beq.n	800f2da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f2d2:	79fb      	ldrb	r3, [r7, #7]
 800f2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f2e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2e8:	79fb      	ldrb	r3, [r7, #7]
 800f2ea:	f023 0301 	bic.w	r3, r3, #1
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	bf14      	ite	ne
 800f2f2:	2301      	movne	r3, #1
 800f2f4:	2300      	moveq	r3, #0
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	f107 0318 	add.w	r3, r7, #24
 800f2fe:	4611      	mov	r1, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f7fd fecf 	bl	800d0a4 <inc_lock>
 800f306:	4602      	mov	r2, r0
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	691b      	ldr	r3, [r3, #16]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d102      	bne.n	800f31a <f_open+0x22e>
 800f314:	2302      	movs	r3, #2
 800f316:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f31a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f040 8095 	bne.w	800f44e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f328:	4611      	mov	r1, r2
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fe fcf1 	bl	800dd12 <ld_clust>
 800f330:	4602      	mov	r2, r0
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f338:	331c      	adds	r3, #28
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fd fd4c 	bl	800cdd8 <ld_dword>
 800f340:	4602      	mov	r2, r0
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	88da      	ldrh	r2, [r3, #6]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	79fa      	ldrb	r2, [r7, #7]
 800f35e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2200      	movs	r2, #0
 800f364:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2200      	movs	r2, #0
 800f36a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2200      	movs	r2, #0
 800f370:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	3330      	adds	r3, #48	; 0x30
 800f376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f37a:	2100      	movs	r1, #0
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fd fdb6 	bl	800ceee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f382:	79fb      	ldrb	r3, [r7, #7]
 800f384:	f003 0320 	and.w	r3, r3, #32
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d060      	beq.n	800f44e <f_open+0x362>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d05c      	beq.n	800f44e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	68da      	ldr	r2, [r3, #12]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	895b      	ldrh	r3, [r3, #10]
 800f3a0:	025b      	lsls	r3, r3, #9
 800f3a2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3b0:	e016      	b.n	800f3e0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fe f861 	bl	800d47e <get_fat>
 800f3bc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f3be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d802      	bhi.n	800f3ca <f_open+0x2de>
 800f3c4:	2302      	movs	r3, #2
 800f3c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f3ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3d0:	d102      	bne.n	800f3d8 <f_open+0x2ec>
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d103      	bne.n	800f3f0 <f_open+0x304>
 800f3e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d8e0      	bhi.n	800f3b2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f3f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f3f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d127      	bne.n	800f44e <f_open+0x362>
 800f3fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f404:	2b00      	cmp	r3, #0
 800f406:	d022      	beq.n	800f44e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fe f817 	bl	800d440 <clust2sect>
 800f412:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f416:	2b00      	cmp	r3, #0
 800f418:	d103      	bne.n	800f422 <f_open+0x336>
						res = FR_INT_ERR;
 800f41a:	2302      	movs	r3, #2
 800f41c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f420:	e015      	b.n	800f44e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f424:	0a5a      	lsrs	r2, r3, #9
 800f426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f428:	441a      	add	r2, r3
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	7858      	ldrb	r0, [r3, #1]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6a1a      	ldr	r2, [r3, #32]
 800f43c:	2301      	movs	r3, #1
 800f43e:	f7fd fc55 	bl	800ccec <disk_read>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d002      	beq.n	800f44e <f_open+0x362>
 800f448:	2301      	movs	r3, #1
 800f44a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f44e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <f_open+0x370>
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2200      	movs	r2, #0
 800f45a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f45c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f460:	4618      	mov	r0, r3
 800f462:	3768      	adds	r7, #104	; 0x68
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08c      	sub	sp, #48	; 0x30
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
 800f474:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	2200      	movs	r2, #0
 800f47e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f107 0210 	add.w	r2, r7, #16
 800f486:	4611      	mov	r1, r2
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff fdb3 	bl	800eff4 <validate>
 800f48e:	4603      	mov	r3, r0
 800f490:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d107      	bne.n	800f4ac <f_write+0x44>
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	7d5b      	ldrb	r3, [r3, #21]
 800f4a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f4a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d002      	beq.n	800f4b2 <f_write+0x4a>
 800f4ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4b0:	e14b      	b.n	800f74a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	7d1b      	ldrb	r3, [r3, #20]
 800f4b6:	f003 0302 	and.w	r3, r3, #2
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d101      	bne.n	800f4c2 <f_write+0x5a>
 800f4be:	2307      	movs	r3, #7
 800f4c0:	e143      	b.n	800f74a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	699a      	ldr	r2, [r3, #24]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	441a      	add	r2, r3
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	699b      	ldr	r3, [r3, #24]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	f080 812d 	bcs.w	800f72e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	699b      	ldr	r3, [r3, #24]
 800f4d8:	43db      	mvns	r3, r3
 800f4da:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f4dc:	e127      	b.n	800f72e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	699b      	ldr	r3, [r3, #24]
 800f4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f040 80e3 	bne.w	800f6b2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	699b      	ldr	r3, [r3, #24]
 800f4f0:	0a5b      	lsrs	r3, r3, #9
 800f4f2:	693a      	ldr	r2, [r7, #16]
 800f4f4:	8952      	ldrh	r2, [r2, #10]
 800f4f6:	3a01      	subs	r2, #1
 800f4f8:	4013      	ands	r3, r2
 800f4fa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d143      	bne.n	800f58a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	699b      	ldr	r3, [r3, #24]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d10c      	bne.n	800f524 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f512:	2b00      	cmp	r3, #0
 800f514:	d11a      	bne.n	800f54c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2100      	movs	r1, #0
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fe f9a6 	bl	800d86c <create_chain>
 800f520:	62b8      	str	r0, [r7, #40]	; 0x28
 800f522:	e013      	b.n	800f54c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d007      	beq.n	800f53c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	699b      	ldr	r3, [r3, #24]
 800f530:	4619      	mov	r1, r3
 800f532:	68f8      	ldr	r0, [r7, #12]
 800f534:	f7fe fa32 	bl	800d99c <clmt_clust>
 800f538:	62b8      	str	r0, [r7, #40]	; 0x28
 800f53a:	e007      	b.n	800f54c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	69db      	ldr	r3, [r3, #28]
 800f542:	4619      	mov	r1, r3
 800f544:	4610      	mov	r0, r2
 800f546:	f7fe f991 	bl	800d86c <create_chain>
 800f54a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f000 80f2 	beq.w	800f738 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	2b01      	cmp	r3, #1
 800f558:	d104      	bne.n	800f564 <f_write+0xfc>
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2202      	movs	r2, #2
 800f55e:	755a      	strb	r2, [r3, #21]
 800f560:	2302      	movs	r3, #2
 800f562:	e0f2      	b.n	800f74a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f56a:	d104      	bne.n	800f576 <f_write+0x10e>
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2201      	movs	r2, #1
 800f570:	755a      	strb	r2, [r3, #21]
 800f572:	2301      	movs	r3, #1
 800f574:	e0e9      	b.n	800f74a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f57a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d102      	bne.n	800f58a <f_write+0x122>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f588:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	7d1b      	ldrb	r3, [r3, #20]
 800f58e:	b25b      	sxtb	r3, r3
 800f590:	2b00      	cmp	r3, #0
 800f592:	da18      	bge.n	800f5c6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	7858      	ldrb	r0, [r3, #1]
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6a1a      	ldr	r2, [r3, #32]
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	f7fd fbc2 	bl	800cd2c <disk_write>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d004      	beq.n	800f5b8 <f_write+0x150>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2201      	movs	r2, #1
 800f5b2:	755a      	strb	r2, [r3, #21]
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e0c8      	b.n	800f74a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	7d1b      	ldrb	r3, [r3, #20]
 800f5bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5c0:	b2da      	uxtb	r2, r3
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f5c6:	693a      	ldr	r2, [r7, #16]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	69db      	ldr	r3, [r3, #28]
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	4610      	mov	r0, r2
 800f5d0:	f7fd ff36 	bl	800d440 <clust2sect>
 800f5d4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d104      	bne.n	800f5e6 <f_write+0x17e>
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2202      	movs	r2, #2
 800f5e0:	755a      	strb	r2, [r3, #21]
 800f5e2:	2302      	movs	r3, #2
 800f5e4:	e0b1      	b.n	800f74a <f_write+0x2e2>
			sect += csect;
 800f5e6:	697a      	ldr	r2, [r7, #20]
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	4413      	add	r3, r2
 800f5ec:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	0a5b      	lsrs	r3, r3, #9
 800f5f2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f5f4:	6a3b      	ldr	r3, [r7, #32]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d03c      	beq.n	800f674 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f5fa:	69ba      	ldr	r2, [r7, #24]
 800f5fc:	6a3b      	ldr	r3, [r7, #32]
 800f5fe:	4413      	add	r3, r2
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	8952      	ldrh	r2, [r2, #10]
 800f604:	4293      	cmp	r3, r2
 800f606:	d905      	bls.n	800f614 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	895b      	ldrh	r3, [r3, #10]
 800f60c:	461a      	mov	r2, r3
 800f60e:	69bb      	ldr	r3, [r7, #24]
 800f610:	1ad3      	subs	r3, r2, r3
 800f612:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	7858      	ldrb	r0, [r3, #1]
 800f618:	6a3b      	ldr	r3, [r7, #32]
 800f61a:	697a      	ldr	r2, [r7, #20]
 800f61c:	69f9      	ldr	r1, [r7, #28]
 800f61e:	f7fd fb85 	bl	800cd2c <disk_write>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d004      	beq.n	800f632 <f_write+0x1ca>
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2201      	movs	r2, #1
 800f62c:	755a      	strb	r2, [r3, #21]
 800f62e:	2301      	movs	r3, #1
 800f630:	e08b      	b.n	800f74a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	6a1a      	ldr	r2, [r3, #32]
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	1ad3      	subs	r3, r2, r3
 800f63a:	6a3a      	ldr	r2, [r7, #32]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d915      	bls.n	800f66c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6a1a      	ldr	r2, [r3, #32]
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	025b      	lsls	r3, r3, #9
 800f650:	69fa      	ldr	r2, [r7, #28]
 800f652:	4413      	add	r3, r2
 800f654:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f658:	4619      	mov	r1, r3
 800f65a:	f7fd fc27 	bl	800ceac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	7d1b      	ldrb	r3, [r3, #20]
 800f662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f666:	b2da      	uxtb	r2, r3
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f66c:	6a3b      	ldr	r3, [r7, #32]
 800f66e:	025b      	lsls	r3, r3, #9
 800f670:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f672:	e03f      	b.n	800f6f4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6a1b      	ldr	r3, [r3, #32]
 800f678:	697a      	ldr	r2, [r7, #20]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d016      	beq.n	800f6ac <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	699a      	ldr	r2, [r3, #24]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f686:	429a      	cmp	r2, r3
 800f688:	d210      	bcs.n	800f6ac <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	7858      	ldrb	r0, [r3, #1]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f694:	2301      	movs	r3, #1
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	f7fd fb28 	bl	800ccec <disk_read>
 800f69c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d004      	beq.n	800f6ac <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	755a      	strb	r2, [r3, #21]
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e04e      	b.n	800f74a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	697a      	ldr	r2, [r7, #20]
 800f6b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	699b      	ldr	r3, [r3, #24]
 800f6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6ba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f6be:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d901      	bls.n	800f6cc <f_write+0x264>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	699b      	ldr	r3, [r3, #24]
 800f6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6da:	4413      	add	r3, r2
 800f6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6de:	69f9      	ldr	r1, [r7, #28]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fd fbe3 	bl	800ceac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	7d1b      	ldrb	r3, [r3, #20]
 800f6ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f6f4:	69fa      	ldr	r2, [r7, #28]
 800f6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f8:	4413      	add	r3, r2
 800f6fa:	61fb      	str	r3, [r7, #28]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	699a      	ldr	r2, [r3, #24]
 800f700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f702:	441a      	add	r2, r3
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	619a      	str	r2, [r3, #24]
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	68da      	ldr	r2, [r3, #12]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	699b      	ldr	r3, [r3, #24]
 800f710:	429a      	cmp	r2, r3
 800f712:	bf38      	it	cc
 800f714:	461a      	movcc	r2, r3
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	60da      	str	r2, [r3, #12]
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f720:	441a      	add	r2, r3
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	601a      	str	r2, [r3, #0]
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72a:	1ad3      	subs	r3, r2, r3
 800f72c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	f47f aed4 	bne.w	800f4de <f_write+0x76>
 800f736:	e000      	b.n	800f73a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f738:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	7d1b      	ldrb	r3, [r3, #20]
 800f73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f742:	b2da      	uxtb	r2, r3
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3730      	adds	r7, #48	; 0x30
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b086      	sub	sp, #24
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f107 0208 	add.w	r2, r7, #8
 800f760:	4611      	mov	r1, r2
 800f762:	4618      	mov	r0, r3
 800f764:	f7ff fc46 	bl	800eff4 <validate>
 800f768:	4603      	mov	r3, r0
 800f76a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f76c:	7dfb      	ldrb	r3, [r7, #23]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d168      	bne.n	800f844 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	7d1b      	ldrb	r3, [r3, #20]
 800f776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d062      	beq.n	800f844 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	7d1b      	ldrb	r3, [r3, #20]
 800f782:	b25b      	sxtb	r3, r3
 800f784:	2b00      	cmp	r3, #0
 800f786:	da15      	bge.n	800f7b4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	7858      	ldrb	r0, [r3, #1]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a1a      	ldr	r2, [r3, #32]
 800f796:	2301      	movs	r3, #1
 800f798:	f7fd fac8 	bl	800cd2c <disk_write>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d001      	beq.n	800f7a6 <f_sync+0x54>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	e04f      	b.n	800f846 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	7d1b      	ldrb	r3, [r3, #20]
 800f7aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7ae:	b2da      	uxtb	r2, r3
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f7b4:	f7fb f82c 	bl	800a810 <get_fattime>
 800f7b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f7ba:	68ba      	ldr	r2, [r7, #8]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	4610      	mov	r0, r2
 800f7c4:	f7fd fda0 	bl	800d308 <move_window>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f7cc:	7dfb      	ldrb	r3, [r7, #23]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d138      	bne.n	800f844 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	330b      	adds	r3, #11
 800f7dc:	781a      	ldrb	r2, [r3, #0]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	330b      	adds	r3, #11
 800f7e2:	f042 0220 	orr.w	r2, r2, #32
 800f7e6:	b2d2      	uxtb	r2, r2
 800f7e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6818      	ldr	r0, [r3, #0]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	68f9      	ldr	r1, [r7, #12]
 800f7f6:	f7fe faab 	bl	800dd50 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f103 021c 	add.w	r2, r3, #28
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	4619      	mov	r1, r3
 800f806:	4610      	mov	r0, r2
 800f808:	f7fd fb24 	bl	800ce54 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	3316      	adds	r3, #22
 800f810:	6939      	ldr	r1, [r7, #16]
 800f812:	4618      	mov	r0, r3
 800f814:	f7fd fb1e 	bl	800ce54 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	3312      	adds	r3, #18
 800f81c:	2100      	movs	r1, #0
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fd fafd 	bl	800ce1e <st_word>
					fs->wflag = 1;
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	2201      	movs	r2, #1
 800f828:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fd fd99 	bl	800d364 <sync_fs>
 800f832:	4603      	mov	r3, r0
 800f834:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	7d1b      	ldrb	r3, [r3, #20]
 800f83a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f83e:	b2da      	uxtb	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f844:	7dfb      	ldrb	r3, [r7, #23]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3718      	adds	r7, #24
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	b084      	sub	sp, #16
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7ff ff7b 	bl	800f752 <f_sync>
 800f85c:	4603      	mov	r3, r0
 800f85e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f860:	7bfb      	ldrb	r3, [r7, #15]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d118      	bne.n	800f898 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f107 0208 	add.w	r2, r7, #8
 800f86c:	4611      	mov	r1, r2
 800f86e:	4618      	mov	r0, r3
 800f870:	f7ff fbc0 	bl	800eff4 <validate>
 800f874:	4603      	mov	r3, r0
 800f876:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f878:	7bfb      	ldrb	r3, [r7, #15]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d10c      	bne.n	800f898 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	691b      	ldr	r3, [r3, #16]
 800f882:	4618      	mov	r0, r3
 800f884:	f7fd fc9c 	bl	800d1c0 <dec_lock>
 800f888:	4603      	mov	r3, r0
 800f88a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f88c:	7bfb      	ldrb	r3, [r7, #15]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d102      	bne.n	800f898 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f898:	7bfb      	ldrb	r3, [r7, #15]
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3710      	adds	r7, #16
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b090      	sub	sp, #64	; 0x40
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
 800f8aa:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f8ac:	f107 0108 	add.w	r1, r7, #8
 800f8b0:	1d3b      	adds	r3, r7, #4
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7ff f94d 	bl	800eb54 <find_volume>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800f8c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d11f      	bne.n	800f908 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	f107 0308 	add.w	r3, r7, #8
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7ff f833 	bl	800e93c <follow_path>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800f8dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d111      	bne.n	800f908 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f8e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f8e8:	b25b      	sxtb	r3, r3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	da03      	bge.n	800f8f6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f8ee:	2306      	movs	r3, #6
 800f8f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f8f4:	e008      	b.n	800f908 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d005      	beq.n	800f908 <f_stat+0x66>
 800f8fc:	f107 0308 	add.w	r3, r7, #8
 800f900:	6839      	ldr	r1, [r7, #0]
 800f902:	4618      	mov	r0, r3
 800f904:	f7fe fd84 	bl	800e410 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800f908:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3740      	adds	r7, #64	; 0x40
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b098      	sub	sp, #96	; 0x60
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f91c:	f107 010c 	add.w	r1, r7, #12
 800f920:	1d3b      	adds	r3, r7, #4
 800f922:	2202      	movs	r2, #2
 800f924:	4618      	mov	r0, r3
 800f926:	f7ff f915 	bl	800eb54 <find_volume>
 800f92a:	4603      	mov	r3, r0
 800f92c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800f934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f040 80ec 	bne.w	800fb16 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	f107 0310 	add.w	r3, r7, #16
 800f944:	4611      	mov	r1, r2
 800f946:	4618      	mov	r0, r3
 800f948:	f7fe fff8 	bl	800e93c <follow_path>
 800f94c:	4603      	mov	r3, r0
 800f94e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f956:	2b00      	cmp	r3, #0
 800f958:	d102      	bne.n	800f960 <f_mkdir+0x4c>
 800f95a:	2308      	movs	r3, #8
 800f95c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f964:	2b04      	cmp	r3, #4
 800f966:	f040 80d6 	bne.w	800fb16 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f96a:	f107 0310 	add.w	r3, r7, #16
 800f96e:	2100      	movs	r1, #0
 800f970:	4618      	mov	r0, r3
 800f972:	f7fd ff7b 	bl	800d86c <create_chain>
 800f976:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	895b      	ldrh	r3, [r3, #10]
 800f97c:	025b      	lsls	r3, r3, #9
 800f97e:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800f980:	2300      	movs	r3, #0
 800f982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d102      	bne.n	800f992 <f_mkdir+0x7e>
 800f98c:	2307      	movs	r3, #7
 800f98e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800f992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f994:	2b01      	cmp	r3, #1
 800f996:	d102      	bne.n	800f99e <f_mkdir+0x8a>
 800f998:	2302      	movs	r3, #2
 800f99a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9a4:	d102      	bne.n	800f9ac <f_mkdir+0x98>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f9ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <f_mkdir+0xae>
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fd fc62 	bl	800d280 <sync_window>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800f9c2:	f7fa ff25 	bl	800a810 <get_fattime>
 800f9c6:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f9c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d16a      	bne.n	800faa6 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7fd fd33 	bl	800d440 <clust2sect>
 800f9da:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	3334      	adds	r3, #52	; 0x34
 800f9e0:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800f9e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9ea:	f7fd fa80 	bl	800ceee <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f9ee:	220b      	movs	r2, #11
 800f9f0:	2120      	movs	r1, #32
 800f9f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9f4:	f7fd fa7b 	bl	800ceee <mem_set>
					dir[DIR_Name] = '.';
 800f9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9fa:	222e      	movs	r2, #46	; 0x2e
 800f9fc:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa00:	330b      	adds	r3, #11
 800fa02:	2210      	movs	r2, #16
 800fa04:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800fa06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa08:	3316      	adds	r3, #22
 800fa0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fd fa21 	bl	800ce54 <st_dword>
					st_clust(fs, dir, dcl);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7fe f999 	bl	800dd50 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800fa1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa20:	3320      	adds	r3, #32
 800fa22:	2220      	movs	r2, #32
 800fa24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fd fa40 	bl	800ceac <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800fa2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa2e:	3321      	adds	r3, #33	; 0x21
 800fa30:	222e      	movs	r2, #46	; 0x2e
 800fa32:	701a      	strb	r2, [r3, #0]
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	2b03      	cmp	r3, #3
 800fa3e:	d106      	bne.n	800fa4e <f_mkdir+0x13a>
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d101      	bne.n	800fa4e <f_mkdir+0x13a>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa52:	3320      	adds	r3, #32
 800fa54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa56:	4619      	mov	r1, r3
 800fa58:	f7fe f97a 	bl	800dd50 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	895b      	ldrh	r3, [r3, #10]
 800fa60:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa62:	e01b      	b.n	800fa9c <f_mkdir+0x188>
					fs->winsect = dsc++;
 800fa64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	657a      	str	r2, [r7, #84]	; 0x54
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2201      	movs	r2, #1
 800fa72:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fd fc02 	bl	800d280 <sync_window>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800fa82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d10c      	bne.n	800faa4 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800fa8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa8e:	2100      	movs	r1, #0
 800fa90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fa92:	f7fd fa2c 	bl	800ceee <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fa96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa98:	3b01      	subs	r3, #1
 800fa9a:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d1e0      	bne.n	800fa64 <f_mkdir+0x150>
 800faa2:	e000      	b.n	800faa6 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800faa4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800faa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d107      	bne.n	800fabe <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800faae:	f107 0310 	add.w	r3, r7, #16
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fe fbb4 	bl	800e220 <dir_register>
 800fab8:	4603      	mov	r3, r0
 800faba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800fabe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d120      	bne.n	800fb08 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800faca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800facc:	3316      	adds	r3, #22
 800face:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fd f9bf 	bl	800ce54 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fada:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fe f937 	bl	800dd50 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800fae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fae4:	330b      	adds	r3, #11
 800fae6:	2210      	movs	r2, #16
 800fae8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2201      	movs	r2, #1
 800faee:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800faf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d10e      	bne.n	800fb16 <f_mkdir+0x202>
					res = sync_fs(fs);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fd fc32 	bl	800d364 <sync_fs>
 800fb00:	4603      	mov	r3, r0
 800fb02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fb06:	e006      	b.n	800fb16 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800fb08:	f107 0310 	add.w	r3, r7, #16
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fd fe46 	bl	800d7a2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800fb16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3760      	adds	r7, #96	; 0x60
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
	...

0800fb24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b087      	sub	sp, #28
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	4613      	mov	r3, r2
 800fb30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fb32:	2301      	movs	r3, #1
 800fb34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fb36:	2300      	movs	r3, #0
 800fb38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fb3a:	4b1f      	ldr	r3, [pc, #124]	; (800fbb8 <FATFS_LinkDriverEx+0x94>)
 800fb3c:	7a5b      	ldrb	r3, [r3, #9]
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d131      	bne.n	800fba8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fb44:	4b1c      	ldr	r3, [pc, #112]	; (800fbb8 <FATFS_LinkDriverEx+0x94>)
 800fb46:	7a5b      	ldrb	r3, [r3, #9]
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	4b1a      	ldr	r3, [pc, #104]	; (800fbb8 <FATFS_LinkDriverEx+0x94>)
 800fb4e:	2100      	movs	r1, #0
 800fb50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fb52:	4b19      	ldr	r3, [pc, #100]	; (800fbb8 <FATFS_LinkDriverEx+0x94>)
 800fb54:	7a5b      	ldrb	r3, [r3, #9]
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	4a17      	ldr	r2, [pc, #92]	; (800fbb8 <FATFS_LinkDriverEx+0x94>)
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	4413      	add	r3, r2
 800fb5e:	68fa      	ldr	r2, [r7, #12]
 800fb60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fb62:	4b15      	ldr	r3, [pc, #84]	; (800fbb8 <FATFS_LinkDriverEx+0x94>)
 800fb64:	7a5b      	ldrb	r3, [r3, #9]
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	461a      	mov	r2, r3
 800fb6a:	4b13      	ldr	r3, [pc, #76]	; (800fbb8 <FATFS_LinkDriverEx+0x94>)
 800fb6c:	4413      	add	r3, r2
 800fb6e:	79fa      	ldrb	r2, [r7, #7]
 800fb70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fb72:	4b11      	ldr	r3, [pc, #68]	; (800fbb8 <FATFS_LinkDriverEx+0x94>)
 800fb74:	7a5b      	ldrb	r3, [r3, #9]
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	1c5a      	adds	r2, r3, #1
 800fb7a:	b2d1      	uxtb	r1, r2
 800fb7c:	4a0e      	ldr	r2, [pc, #56]	; (800fbb8 <FATFS_LinkDriverEx+0x94>)
 800fb7e:	7251      	strb	r1, [r2, #9]
 800fb80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fb82:	7dbb      	ldrb	r3, [r7, #22]
 800fb84:	3330      	adds	r3, #48	; 0x30
 800fb86:	b2da      	uxtb	r2, r3
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	223a      	movs	r2, #58	; 0x3a
 800fb92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	3302      	adds	r3, #2
 800fb98:	222f      	movs	r2, #47	; 0x2f
 800fb9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	3303      	adds	r3, #3
 800fba0:	2200      	movs	r2, #0
 800fba2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fba4:	2300      	movs	r3, #0
 800fba6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	371c      	adds	r7, #28
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	20002bb4 	.word	0x20002bb4

0800fbbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	6839      	ldr	r1, [r7, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f7ff ffaa 	bl	800fb24 <FATFS_LinkDriverEx>
 800fbd0:	4603      	mov	r3, r0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
	...

0800fbdc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b085      	sub	sp, #20
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	6039      	str	r1, [r7, #0]
 800fbe6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fbe8:	88fb      	ldrh	r3, [r7, #6]
 800fbea:	2b7f      	cmp	r3, #127	; 0x7f
 800fbec:	d802      	bhi.n	800fbf4 <ff_convert+0x18>
		c = chr;
 800fbee:	88fb      	ldrh	r3, [r7, #6]
 800fbf0:	81fb      	strh	r3, [r7, #14]
 800fbf2:	e025      	b.n	800fc40 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00b      	beq.n	800fc12 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fbfa:	88fb      	ldrh	r3, [r7, #6]
 800fbfc:	2bff      	cmp	r3, #255	; 0xff
 800fbfe:	d805      	bhi.n	800fc0c <ff_convert+0x30>
 800fc00:	88fb      	ldrh	r3, [r7, #6]
 800fc02:	3b80      	subs	r3, #128	; 0x80
 800fc04:	4a12      	ldr	r2, [pc, #72]	; (800fc50 <ff_convert+0x74>)
 800fc06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc0a:	e000      	b.n	800fc0e <ff_convert+0x32>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	81fb      	strh	r3, [r7, #14]
 800fc10:	e016      	b.n	800fc40 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fc12:	2300      	movs	r3, #0
 800fc14:	81fb      	strh	r3, [r7, #14]
 800fc16:	e009      	b.n	800fc2c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fc18:	89fb      	ldrh	r3, [r7, #14]
 800fc1a:	4a0d      	ldr	r2, [pc, #52]	; (800fc50 <ff_convert+0x74>)
 800fc1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc20:	88fa      	ldrh	r2, [r7, #6]
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d006      	beq.n	800fc34 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fc26:	89fb      	ldrh	r3, [r7, #14]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	81fb      	strh	r3, [r7, #14]
 800fc2c:	89fb      	ldrh	r3, [r7, #14]
 800fc2e:	2b7f      	cmp	r3, #127	; 0x7f
 800fc30:	d9f2      	bls.n	800fc18 <ff_convert+0x3c>
 800fc32:	e000      	b.n	800fc36 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fc34:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fc36:	89fb      	ldrh	r3, [r7, #14]
 800fc38:	3380      	adds	r3, #128	; 0x80
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fc40:	89fb      	ldrh	r3, [r7, #14]
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3714      	adds	r7, #20
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop
 800fc50:	08012060 	.word	0x08012060

0800fc54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b087      	sub	sp, #28
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fc5e:	88fb      	ldrh	r3, [r7, #6]
 800fc60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc64:	d201      	bcs.n	800fc6a <ff_wtoupper+0x16>
 800fc66:	4b3e      	ldr	r3, [pc, #248]	; (800fd60 <ff_wtoupper+0x10c>)
 800fc68:	e000      	b.n	800fc6c <ff_wtoupper+0x18>
 800fc6a:	4b3e      	ldr	r3, [pc, #248]	; (800fd64 <ff_wtoupper+0x110>)
 800fc6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	1c9a      	adds	r2, r3, #2
 800fc72:	617a      	str	r2, [r7, #20]
 800fc74:	881b      	ldrh	r3, [r3, #0]
 800fc76:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fc78:	8a7b      	ldrh	r3, [r7, #18]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d068      	beq.n	800fd50 <ff_wtoupper+0xfc>
 800fc7e:	88fa      	ldrh	r2, [r7, #6]
 800fc80:	8a7b      	ldrh	r3, [r7, #18]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d364      	bcc.n	800fd50 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	1c9a      	adds	r2, r3, #2
 800fc8a:	617a      	str	r2, [r7, #20]
 800fc8c:	881b      	ldrh	r3, [r3, #0]
 800fc8e:	823b      	strh	r3, [r7, #16]
 800fc90:	8a3b      	ldrh	r3, [r7, #16]
 800fc92:	0a1b      	lsrs	r3, r3, #8
 800fc94:	81fb      	strh	r3, [r7, #14]
 800fc96:	8a3b      	ldrh	r3, [r7, #16]
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fc9c:	88fa      	ldrh	r2, [r7, #6]
 800fc9e:	8a79      	ldrh	r1, [r7, #18]
 800fca0:	8a3b      	ldrh	r3, [r7, #16]
 800fca2:	440b      	add	r3, r1
 800fca4:	429a      	cmp	r2, r3
 800fca6:	da49      	bge.n	800fd3c <ff_wtoupper+0xe8>
			switch (cmd) {
 800fca8:	89fb      	ldrh	r3, [r7, #14]
 800fcaa:	2b08      	cmp	r3, #8
 800fcac:	d84f      	bhi.n	800fd4e <ff_wtoupper+0xfa>
 800fcae:	a201      	add	r2, pc, #4	; (adr r2, 800fcb4 <ff_wtoupper+0x60>)
 800fcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb4:	0800fcd9 	.word	0x0800fcd9
 800fcb8:	0800fceb 	.word	0x0800fceb
 800fcbc:	0800fd01 	.word	0x0800fd01
 800fcc0:	0800fd09 	.word	0x0800fd09
 800fcc4:	0800fd11 	.word	0x0800fd11
 800fcc8:	0800fd19 	.word	0x0800fd19
 800fccc:	0800fd21 	.word	0x0800fd21
 800fcd0:	0800fd29 	.word	0x0800fd29
 800fcd4:	0800fd31 	.word	0x0800fd31
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fcd8:	88fa      	ldrh	r2, [r7, #6]
 800fcda:	8a7b      	ldrh	r3, [r7, #18]
 800fcdc:	1ad3      	subs	r3, r2, r3
 800fcde:	005b      	lsls	r3, r3, #1
 800fce0:	697a      	ldr	r2, [r7, #20]
 800fce2:	4413      	add	r3, r2
 800fce4:	881b      	ldrh	r3, [r3, #0]
 800fce6:	80fb      	strh	r3, [r7, #6]
 800fce8:	e027      	b.n	800fd3a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fcea:	88fa      	ldrh	r2, [r7, #6]
 800fcec:	8a7b      	ldrh	r3, [r7, #18]
 800fcee:	1ad3      	subs	r3, r2, r3
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	88fa      	ldrh	r2, [r7, #6]
 800fcfa:	1ad3      	subs	r3, r2, r3
 800fcfc:	80fb      	strh	r3, [r7, #6]
 800fcfe:	e01c      	b.n	800fd3a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fd00:	88fb      	ldrh	r3, [r7, #6]
 800fd02:	3b10      	subs	r3, #16
 800fd04:	80fb      	strh	r3, [r7, #6]
 800fd06:	e018      	b.n	800fd3a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fd08:	88fb      	ldrh	r3, [r7, #6]
 800fd0a:	3b20      	subs	r3, #32
 800fd0c:	80fb      	strh	r3, [r7, #6]
 800fd0e:	e014      	b.n	800fd3a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fd10:	88fb      	ldrh	r3, [r7, #6]
 800fd12:	3b30      	subs	r3, #48	; 0x30
 800fd14:	80fb      	strh	r3, [r7, #6]
 800fd16:	e010      	b.n	800fd3a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fd18:	88fb      	ldrh	r3, [r7, #6]
 800fd1a:	3b1a      	subs	r3, #26
 800fd1c:	80fb      	strh	r3, [r7, #6]
 800fd1e:	e00c      	b.n	800fd3a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fd20:	88fb      	ldrh	r3, [r7, #6]
 800fd22:	3308      	adds	r3, #8
 800fd24:	80fb      	strh	r3, [r7, #6]
 800fd26:	e008      	b.n	800fd3a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fd28:	88fb      	ldrh	r3, [r7, #6]
 800fd2a:	3b50      	subs	r3, #80	; 0x50
 800fd2c:	80fb      	strh	r3, [r7, #6]
 800fd2e:	e004      	b.n	800fd3a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fd30:	88fb      	ldrh	r3, [r7, #6]
 800fd32:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fd36:	80fb      	strh	r3, [r7, #6]
 800fd38:	bf00      	nop
			}
			break;
 800fd3a:	e008      	b.n	800fd4e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fd3c:	89fb      	ldrh	r3, [r7, #14]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d195      	bne.n	800fc6e <ff_wtoupper+0x1a>
 800fd42:	8a3b      	ldrh	r3, [r7, #16]
 800fd44:	005b      	lsls	r3, r3, #1
 800fd46:	697a      	ldr	r2, [r7, #20]
 800fd48:	4413      	add	r3, r2
 800fd4a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fd4c:	e78f      	b.n	800fc6e <ff_wtoupper+0x1a>
			break;
 800fd4e:	bf00      	nop
	}

	return chr;
 800fd50:	88fb      	ldrh	r3, [r7, #6]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	371c      	adds	r7, #28
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	08012160 	.word	0x08012160
 800fd64:	08012354 	.word	0x08012354

0800fd68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	4912      	ldr	r1, [pc, #72]	; (800fdb8 <MX_USB_DEVICE_Init+0x50>)
 800fd70:	4812      	ldr	r0, [pc, #72]	; (800fdbc <MX_USB_DEVICE_Init+0x54>)
 800fd72:	f7fb fc5f 	bl	800b634 <USBD_Init>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fd7c:	f7f1 fa4c 	bl	8001218 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fd80:	490f      	ldr	r1, [pc, #60]	; (800fdc0 <MX_USB_DEVICE_Init+0x58>)
 800fd82:	480e      	ldr	r0, [pc, #56]	; (800fdbc <MX_USB_DEVICE_Init+0x54>)
 800fd84:	f7fb fc86 	bl	800b694 <USBD_RegisterClass>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d001      	beq.n	800fd92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fd8e:	f7f1 fa43 	bl	8001218 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fd92:	490c      	ldr	r1, [pc, #48]	; (800fdc4 <MX_USB_DEVICE_Init+0x5c>)
 800fd94:	4809      	ldr	r0, [pc, #36]	; (800fdbc <MX_USB_DEVICE_Init+0x54>)
 800fd96:	f7fb fb7d 	bl	800b494 <USBD_CDC_RegisterInterface>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d001      	beq.n	800fda4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fda0:	f7f1 fa3a 	bl	8001218 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fda4:	4805      	ldr	r0, [pc, #20]	; (800fdbc <MX_USB_DEVICE_Init+0x54>)
 800fda6:	f7fb fcab 	bl	800b700 <USBD_Start>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fdb0:	f7f1 fa32 	bl	8001218 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fdb4:	bf00      	nop
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	200000b0 	.word	0x200000b0
 800fdbc:	20002bc0 	.word	0x20002bc0
 800fdc0:	2000001c 	.word	0x2000001c
 800fdc4:	2000009c 	.word	0x2000009c

0800fdc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fdcc:	2200      	movs	r2, #0
 800fdce:	4905      	ldr	r1, [pc, #20]	; (800fde4 <CDC_Init_FS+0x1c>)
 800fdd0:	4805      	ldr	r0, [pc, #20]	; (800fde8 <CDC_Init_FS+0x20>)
 800fdd2:	f7fb fb79 	bl	800b4c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fdd6:	4905      	ldr	r1, [pc, #20]	; (800fdec <CDC_Init_FS+0x24>)
 800fdd8:	4803      	ldr	r0, [pc, #12]	; (800fde8 <CDC_Init_FS+0x20>)
 800fdda:	f7fb fb97 	bl	800b50c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fdde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	2000369c 	.word	0x2000369c
 800fde8:	20002bc0 	.word	0x20002bc0
 800fdec:	20002e9c 	.word	0x20002e9c

0800fdf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fdf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	4603      	mov	r3, r0
 800fe08:	6039      	str	r1, [r7, #0]
 800fe0a:	71fb      	strb	r3, [r7, #7]
 800fe0c:	4613      	mov	r3, r2
 800fe0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe10:	79fb      	ldrb	r3, [r7, #7]
 800fe12:	2b23      	cmp	r3, #35	; 0x23
 800fe14:	d84a      	bhi.n	800feac <CDC_Control_FS+0xac>
 800fe16:	a201      	add	r2, pc, #4	; (adr r2, 800fe1c <CDC_Control_FS+0x1c>)
 800fe18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1c:	0800fead 	.word	0x0800fead
 800fe20:	0800fead 	.word	0x0800fead
 800fe24:	0800fead 	.word	0x0800fead
 800fe28:	0800fead 	.word	0x0800fead
 800fe2c:	0800fead 	.word	0x0800fead
 800fe30:	0800fead 	.word	0x0800fead
 800fe34:	0800fead 	.word	0x0800fead
 800fe38:	0800fead 	.word	0x0800fead
 800fe3c:	0800fead 	.word	0x0800fead
 800fe40:	0800fead 	.word	0x0800fead
 800fe44:	0800fead 	.word	0x0800fead
 800fe48:	0800fead 	.word	0x0800fead
 800fe4c:	0800fead 	.word	0x0800fead
 800fe50:	0800fead 	.word	0x0800fead
 800fe54:	0800fead 	.word	0x0800fead
 800fe58:	0800fead 	.word	0x0800fead
 800fe5c:	0800fead 	.word	0x0800fead
 800fe60:	0800fead 	.word	0x0800fead
 800fe64:	0800fead 	.word	0x0800fead
 800fe68:	0800fead 	.word	0x0800fead
 800fe6c:	0800fead 	.word	0x0800fead
 800fe70:	0800fead 	.word	0x0800fead
 800fe74:	0800fead 	.word	0x0800fead
 800fe78:	0800fead 	.word	0x0800fead
 800fe7c:	0800fead 	.word	0x0800fead
 800fe80:	0800fead 	.word	0x0800fead
 800fe84:	0800fead 	.word	0x0800fead
 800fe88:	0800fead 	.word	0x0800fead
 800fe8c:	0800fead 	.word	0x0800fead
 800fe90:	0800fead 	.word	0x0800fead
 800fe94:	0800fead 	.word	0x0800fead
 800fe98:	0800fead 	.word	0x0800fead
 800fe9c:	0800fead 	.word	0x0800fead
 800fea0:	0800fead 	.word	0x0800fead
 800fea4:	0800fead 	.word	0x0800fead
 800fea8:	0800fead 	.word	0x0800fead
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800feac:	bf00      	nop
  }

  return (USBD_OK);
 800feae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fec6:	6879      	ldr	r1, [r7, #4]
 800fec8:	4805      	ldr	r0, [pc, #20]	; (800fee0 <CDC_Receive_FS+0x24>)
 800feca:	f7fb fb1f 	bl	800b50c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fece:	4804      	ldr	r0, [pc, #16]	; (800fee0 <CDC_Receive_FS+0x24>)
 800fed0:	f7fb fb7a 	bl	800b5c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fed4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3708      	adds	r7, #8
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	20002bc0 	.word	0x20002bc0

0800fee4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	460b      	mov	r3, r1
 800feee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fef0:	2300      	movs	r3, #0
 800fef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fef4:	4b0d      	ldr	r3, [pc, #52]	; (800ff2c <CDC_Transmit_FS+0x48>)
 800fef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fefa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d001      	beq.n	800ff0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ff06:	2301      	movs	r3, #1
 800ff08:	e00b      	b.n	800ff22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ff0a:	887b      	ldrh	r3, [r7, #2]
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	6879      	ldr	r1, [r7, #4]
 800ff10:	4806      	ldr	r0, [pc, #24]	; (800ff2c <CDC_Transmit_FS+0x48>)
 800ff12:	f7fb fad9 	bl	800b4c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ff16:	4805      	ldr	r0, [pc, #20]	; (800ff2c <CDC_Transmit_FS+0x48>)
 800ff18:	f7fb fb16 	bl	800b548 <USBD_CDC_TransmitPacket>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ff20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	20002bc0 	.word	0x20002bc0

0800ff30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b087      	sub	sp, #28
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	371c      	adds	r7, #28
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
	...

0800ff54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	6039      	str	r1, [r7, #0]
 800ff5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	2212      	movs	r2, #18
 800ff64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ff66:	4b03      	ldr	r3, [pc, #12]	; (800ff74 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr
 800ff74:	200000d0 	.word	0x200000d0

0800ff78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	6039      	str	r1, [r7, #0]
 800ff82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	2204      	movs	r2, #4
 800ff88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff8a:	4b03      	ldr	r3, [pc, #12]	; (800ff98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	370c      	adds	r7, #12
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr
 800ff98:	200000f0 	.word	0x200000f0

0800ff9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	6039      	str	r1, [r7, #0]
 800ffa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffa8:	79fb      	ldrb	r3, [r7, #7]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d105      	bne.n	800ffba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffae:	683a      	ldr	r2, [r7, #0]
 800ffb0:	4907      	ldr	r1, [pc, #28]	; (800ffd0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffb2:	4808      	ldr	r0, [pc, #32]	; (800ffd4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ffb4:	f7fc fd7a 	bl	800caac <USBD_GetString>
 800ffb8:	e004      	b.n	800ffc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffba:	683a      	ldr	r2, [r7, #0]
 800ffbc:	4904      	ldr	r1, [pc, #16]	; (800ffd0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffbe:	4805      	ldr	r0, [pc, #20]	; (800ffd4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ffc0:	f7fc fd74 	bl	800caac <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffc4:	4b02      	ldr	r3, [pc, #8]	; (800ffd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3708      	adds	r7, #8
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	20003e9c 	.word	0x20003e9c
 800ffd4:	08011f54 	.word	0x08011f54

0800ffd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	4603      	mov	r3, r0
 800ffe0:	6039      	str	r1, [r7, #0]
 800ffe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ffe4:	683a      	ldr	r2, [r7, #0]
 800ffe6:	4904      	ldr	r1, [pc, #16]	; (800fff8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ffe8:	4804      	ldr	r0, [pc, #16]	; (800fffc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ffea:	f7fc fd5f 	bl	800caac <USBD_GetString>
  return USBD_StrDesc;
 800ffee:	4b02      	ldr	r3, [pc, #8]	; (800fff8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	20003e9c 	.word	0x20003e9c
 800fffc:	08011f6c 	.word	0x08011f6c

08010000 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	4603      	mov	r3, r0
 8010008:	6039      	str	r1, [r7, #0]
 801000a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	221a      	movs	r2, #26
 8010010:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010012:	f000 f855 	bl	80100c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010016:	4b02      	ldr	r3, [pc, #8]	; (8010020 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010018:	4618      	mov	r0, r3
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	200000f4 	.word	0x200000f4

08010024 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	4603      	mov	r3, r0
 801002c:	6039      	str	r1, [r7, #0]
 801002e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010030:	79fb      	ldrb	r3, [r7, #7]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d105      	bne.n	8010042 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010036:	683a      	ldr	r2, [r7, #0]
 8010038:	4907      	ldr	r1, [pc, #28]	; (8010058 <USBD_FS_ConfigStrDescriptor+0x34>)
 801003a:	4808      	ldr	r0, [pc, #32]	; (801005c <USBD_FS_ConfigStrDescriptor+0x38>)
 801003c:	f7fc fd36 	bl	800caac <USBD_GetString>
 8010040:	e004      	b.n	801004c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010042:	683a      	ldr	r2, [r7, #0]
 8010044:	4904      	ldr	r1, [pc, #16]	; (8010058 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010046:	4805      	ldr	r0, [pc, #20]	; (801005c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010048:	f7fc fd30 	bl	800caac <USBD_GetString>
  }
  return USBD_StrDesc;
 801004c:	4b02      	ldr	r3, [pc, #8]	; (8010058 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801004e:	4618      	mov	r0, r3
 8010050:	3708      	adds	r7, #8
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	20003e9c 	.word	0x20003e9c
 801005c:	08011f80 	.word	0x08011f80

08010060 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	4603      	mov	r3, r0
 8010068:	6039      	str	r1, [r7, #0]
 801006a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801006c:	79fb      	ldrb	r3, [r7, #7]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d105      	bne.n	801007e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010072:	683a      	ldr	r2, [r7, #0]
 8010074:	4907      	ldr	r1, [pc, #28]	; (8010094 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010076:	4808      	ldr	r0, [pc, #32]	; (8010098 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010078:	f7fc fd18 	bl	800caac <USBD_GetString>
 801007c:	e004      	b.n	8010088 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801007e:	683a      	ldr	r2, [r7, #0]
 8010080:	4904      	ldr	r1, [pc, #16]	; (8010094 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010082:	4805      	ldr	r0, [pc, #20]	; (8010098 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010084:	f7fc fd12 	bl	800caac <USBD_GetString>
  }
  return USBD_StrDesc;
 8010088:	4b02      	ldr	r3, [pc, #8]	; (8010094 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801008a:	4618      	mov	r0, r3
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	20003e9c 	.word	0x20003e9c
 8010098:	08011f8c 	.word	0x08011f8c

0801009c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	4603      	mov	r3, r0
 80100a4:	6039      	str	r1, [r7, #0]
 80100a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	220c      	movs	r2, #12
 80100ac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80100ae:	4b03      	ldr	r3, [pc, #12]	; (80100bc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	200000e4 	.word	0x200000e4

080100c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80100c6:	4b0f      	ldr	r3, [pc, #60]	; (8010104 <Get_SerialNum+0x44>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80100cc:	4b0e      	ldr	r3, [pc, #56]	; (8010108 <Get_SerialNum+0x48>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80100d2:	4b0e      	ldr	r3, [pc, #56]	; (801010c <Get_SerialNum+0x4c>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80100d8:	68fa      	ldr	r2, [r7, #12]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4413      	add	r3, r2
 80100de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d009      	beq.n	80100fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80100e6:	2208      	movs	r2, #8
 80100e8:	4909      	ldr	r1, [pc, #36]	; (8010110 <Get_SerialNum+0x50>)
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f000 f814 	bl	8010118 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80100f0:	2204      	movs	r2, #4
 80100f2:	4908      	ldr	r1, [pc, #32]	; (8010114 <Get_SerialNum+0x54>)
 80100f4:	68b8      	ldr	r0, [r7, #8]
 80100f6:	f000 f80f 	bl	8010118 <IntToUnicode>
  }
}
 80100fa:	bf00      	nop
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	1ff0f420 	.word	0x1ff0f420
 8010108:	1ff0f424 	.word	0x1ff0f424
 801010c:	1ff0f428 	.word	0x1ff0f428
 8010110:	200000f6 	.word	0x200000f6
 8010114:	20000106 	.word	0x20000106

08010118 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010118:	b480      	push	{r7}
 801011a:	b087      	sub	sp, #28
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	4613      	mov	r3, r2
 8010124:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801012a:	2300      	movs	r3, #0
 801012c:	75fb      	strb	r3, [r7, #23]
 801012e:	e027      	b.n	8010180 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	0f1b      	lsrs	r3, r3, #28
 8010134:	2b09      	cmp	r3, #9
 8010136:	d80b      	bhi.n	8010150 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	0f1b      	lsrs	r3, r3, #28
 801013c:	b2da      	uxtb	r2, r3
 801013e:	7dfb      	ldrb	r3, [r7, #23]
 8010140:	005b      	lsls	r3, r3, #1
 8010142:	4619      	mov	r1, r3
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	440b      	add	r3, r1
 8010148:	3230      	adds	r2, #48	; 0x30
 801014a:	b2d2      	uxtb	r2, r2
 801014c:	701a      	strb	r2, [r3, #0]
 801014e:	e00a      	b.n	8010166 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	0f1b      	lsrs	r3, r3, #28
 8010154:	b2da      	uxtb	r2, r3
 8010156:	7dfb      	ldrb	r3, [r7, #23]
 8010158:	005b      	lsls	r3, r3, #1
 801015a:	4619      	mov	r1, r3
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	440b      	add	r3, r1
 8010160:	3237      	adds	r2, #55	; 0x37
 8010162:	b2d2      	uxtb	r2, r2
 8010164:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	011b      	lsls	r3, r3, #4
 801016a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801016c:	7dfb      	ldrb	r3, [r7, #23]
 801016e:	005b      	lsls	r3, r3, #1
 8010170:	3301      	adds	r3, #1
 8010172:	68ba      	ldr	r2, [r7, #8]
 8010174:	4413      	add	r3, r2
 8010176:	2200      	movs	r2, #0
 8010178:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801017a:	7dfb      	ldrb	r3, [r7, #23]
 801017c:	3301      	adds	r3, #1
 801017e:	75fb      	strb	r3, [r7, #23]
 8010180:	7dfa      	ldrb	r2, [r7, #23]
 8010182:	79fb      	ldrb	r3, [r7, #7]
 8010184:	429a      	cmp	r2, r3
 8010186:	d3d3      	bcc.n	8010130 <IntToUnicode+0x18>
  }
}
 8010188:	bf00      	nop
 801018a:	bf00      	nop
 801018c:	371c      	adds	r7, #28
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr
	...

08010198 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b0ae      	sub	sp, #184	; 0xb8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80101a4:	2200      	movs	r2, #0
 80101a6:	601a      	str	r2, [r3, #0]
 80101a8:	605a      	str	r2, [r3, #4]
 80101aa:	609a      	str	r2, [r3, #8]
 80101ac:	60da      	str	r2, [r3, #12]
 80101ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80101b0:	f107 0314 	add.w	r3, r7, #20
 80101b4:	2290      	movs	r2, #144	; 0x90
 80101b6:	2100      	movs	r1, #0
 80101b8:	4618      	mov	r0, r3
 80101ba:	f000 fd8a 	bl	8010cd2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80101c6:	d151      	bne.n	801026c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80101c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80101cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80101d4:	f107 0314 	add.w	r3, r7, #20
 80101d8:	4618      	mov	r0, r3
 80101da:	f7f5 ff4d 	bl	8006078 <HAL_RCCEx_PeriphCLKConfig>
 80101de:	4603      	mov	r3, r0
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d001      	beq.n	80101e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80101e4:	f7f1 f818 	bl	8001218 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80101e8:	4b22      	ldr	r3, [pc, #136]	; (8010274 <HAL_PCD_MspInit+0xdc>)
 80101ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ec:	4a21      	ldr	r2, [pc, #132]	; (8010274 <HAL_PCD_MspInit+0xdc>)
 80101ee:	f043 0301 	orr.w	r3, r3, #1
 80101f2:	6313      	str	r3, [r2, #48]	; 0x30
 80101f4:	4b1f      	ldr	r3, [pc, #124]	; (8010274 <HAL_PCD_MspInit+0xdc>)
 80101f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101f8:	f003 0301 	and.w	r3, r3, #1
 80101fc:	613b      	str	r3, [r7, #16]
 80101fe:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010200:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010208:	2302      	movs	r3, #2
 801020a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801020e:	2300      	movs	r3, #0
 8010210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010214:	2303      	movs	r3, #3
 8010216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801021a:	230a      	movs	r3, #10
 801021c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010220:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010224:	4619      	mov	r1, r3
 8010226:	4814      	ldr	r0, [pc, #80]	; (8010278 <HAL_PCD_MspInit+0xe0>)
 8010228:	f7f3 f81a 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801022c:	4b11      	ldr	r3, [pc, #68]	; (8010274 <HAL_PCD_MspInit+0xdc>)
 801022e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010230:	4a10      	ldr	r2, [pc, #64]	; (8010274 <HAL_PCD_MspInit+0xdc>)
 8010232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010236:	6353      	str	r3, [r2, #52]	; 0x34
 8010238:	4b0e      	ldr	r3, [pc, #56]	; (8010274 <HAL_PCD_MspInit+0xdc>)
 801023a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801023c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010240:	60fb      	str	r3, [r7, #12]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	4b0b      	ldr	r3, [pc, #44]	; (8010274 <HAL_PCD_MspInit+0xdc>)
 8010246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010248:	4a0a      	ldr	r2, [pc, #40]	; (8010274 <HAL_PCD_MspInit+0xdc>)
 801024a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801024e:	6453      	str	r3, [r2, #68]	; 0x44
 8010250:	4b08      	ldr	r3, [pc, #32]	; (8010274 <HAL_PCD_MspInit+0xdc>)
 8010252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010258:	60bb      	str	r3, [r7, #8]
 801025a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801025c:	2200      	movs	r2, #0
 801025e:	2100      	movs	r1, #0
 8010260:	2043      	movs	r0, #67	; 0x43
 8010262:	f7f2 fc20 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010266:	2043      	movs	r0, #67	; 0x43
 8010268:	f7f2 fc39 	bl	8002ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801026c:	bf00      	nop
 801026e:	37b8      	adds	r7, #184	; 0xb8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	40023800 	.word	0x40023800
 8010278:	40020000 	.word	0x40020000

0801027c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010290:	4619      	mov	r1, r3
 8010292:	4610      	mov	r0, r2
 8010294:	f7fb fa81 	bl	800b79a <USBD_LL_SetupStage>
}
 8010298:	bf00      	nop
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	460b      	mov	r3, r1
 80102aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80102b2:	78fa      	ldrb	r2, [r7, #3]
 80102b4:	6879      	ldr	r1, [r7, #4]
 80102b6:	4613      	mov	r3, r2
 80102b8:	00db      	lsls	r3, r3, #3
 80102ba:	4413      	add	r3, r2
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	440b      	add	r3, r1
 80102c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	78fb      	ldrb	r3, [r7, #3]
 80102c8:	4619      	mov	r1, r3
 80102ca:	f7fb fabb 	bl	800b844 <USBD_LL_DataOutStage>
}
 80102ce:	bf00      	nop
 80102d0:	3708      	adds	r7, #8
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b082      	sub	sp, #8
 80102da:	af00      	add	r7, sp, #0
 80102dc:	6078      	str	r0, [r7, #4]
 80102de:	460b      	mov	r3, r1
 80102e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80102e8:	78fa      	ldrb	r2, [r7, #3]
 80102ea:	6879      	ldr	r1, [r7, #4]
 80102ec:	4613      	mov	r3, r2
 80102ee:	00db      	lsls	r3, r3, #3
 80102f0:	4413      	add	r3, r2
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	440b      	add	r3, r1
 80102f6:	334c      	adds	r3, #76	; 0x4c
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	78fb      	ldrb	r3, [r7, #3]
 80102fc:	4619      	mov	r1, r3
 80102fe:	f7fb fb54 	bl	800b9aa <USBD_LL_DataInStage>
}
 8010302:	bf00      	nop
 8010304:	3708      	adds	r7, #8
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}

0801030a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801030a:	b580      	push	{r7, lr}
 801030c:	b082      	sub	sp, #8
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010318:	4618      	mov	r0, r3
 801031a:	f7fb fc88 	bl	800bc2e <USBD_LL_SOF>
}
 801031e:	bf00      	nop
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b084      	sub	sp, #16
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801032e:	2301      	movs	r3, #1
 8010330:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d102      	bne.n	8010340 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801033a:	2300      	movs	r3, #0
 801033c:	73fb      	strb	r3, [r7, #15]
 801033e:	e008      	b.n	8010352 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	2b02      	cmp	r3, #2
 8010346:	d102      	bne.n	801034e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010348:	2301      	movs	r3, #1
 801034a:	73fb      	strb	r3, [r7, #15]
 801034c:	e001      	b.n	8010352 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801034e:	f7f0 ff63 	bl	8001218 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010358:	7bfa      	ldrb	r2, [r7, #15]
 801035a:	4611      	mov	r1, r2
 801035c:	4618      	mov	r0, r3
 801035e:	f7fb fc28 	bl	800bbb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010368:	4618      	mov	r0, r3
 801036a:	f7fb fbd0 	bl	800bb0e <USBD_LL_Reset>
}
 801036e:	bf00      	nop
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
	...

08010378 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010386:	4618      	mov	r0, r3
 8010388:	f7fb fc23 	bl	800bbd2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	6812      	ldr	r2, [r2, #0]
 801039a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801039e:	f043 0301 	orr.w	r3, r3, #1
 80103a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6a1b      	ldr	r3, [r3, #32]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d005      	beq.n	80103b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80103ac:	4b04      	ldr	r3, [pc, #16]	; (80103c0 <HAL_PCD_SuspendCallback+0x48>)
 80103ae:	691b      	ldr	r3, [r3, #16]
 80103b0:	4a03      	ldr	r2, [pc, #12]	; (80103c0 <HAL_PCD_SuspendCallback+0x48>)
 80103b2:	f043 0306 	orr.w	r3, r3, #6
 80103b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80103b8:	bf00      	nop
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	e000ed00 	.word	0xe000ed00

080103c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fb fc13 	bl	800bbfe <USBD_LL_Resume>
}
 80103d8:	bf00      	nop
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	460b      	mov	r3, r1
 80103ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80103f2:	78fa      	ldrb	r2, [r7, #3]
 80103f4:	4611      	mov	r1, r2
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fb fc6b 	bl	800bcd2 <USBD_LL_IsoOUTIncomplete>
}
 80103fc:	bf00      	nop
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	460b      	mov	r3, r1
 801040e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010416:	78fa      	ldrb	r2, [r7, #3]
 8010418:	4611      	mov	r1, r2
 801041a:	4618      	mov	r0, r3
 801041c:	f7fb fc27 	bl	800bc6e <USBD_LL_IsoINIncomplete>
}
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010436:	4618      	mov	r0, r3
 8010438:	f7fb fc7d 	bl	800bd36 <USBD_LL_DevConnected>
}
 801043c:	bf00      	nop
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010452:	4618      	mov	r0, r3
 8010454:	f7fb fc7a 	bl	800bd4c <USBD_LL_DevDisconnected>
}
 8010458:	bf00      	nop
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d13c      	bne.n	80104ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010470:	4a20      	ldr	r2, [pc, #128]	; (80104f4 <USBD_LL_Init+0x94>)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4a1e      	ldr	r2, [pc, #120]	; (80104f4 <USBD_LL_Init+0x94>)
 801047c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010480:	4b1c      	ldr	r3, [pc, #112]	; (80104f4 <USBD_LL_Init+0x94>)
 8010482:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010486:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010488:	4b1a      	ldr	r3, [pc, #104]	; (80104f4 <USBD_LL_Init+0x94>)
 801048a:	2206      	movs	r2, #6
 801048c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801048e:	4b19      	ldr	r3, [pc, #100]	; (80104f4 <USBD_LL_Init+0x94>)
 8010490:	2202      	movs	r2, #2
 8010492:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010494:	4b17      	ldr	r3, [pc, #92]	; (80104f4 <USBD_LL_Init+0x94>)
 8010496:	2200      	movs	r2, #0
 8010498:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801049a:	4b16      	ldr	r3, [pc, #88]	; (80104f4 <USBD_LL_Init+0x94>)
 801049c:	2202      	movs	r2, #2
 801049e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80104a0:	4b14      	ldr	r3, [pc, #80]	; (80104f4 <USBD_LL_Init+0x94>)
 80104a2:	2200      	movs	r2, #0
 80104a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80104a6:	4b13      	ldr	r3, [pc, #76]	; (80104f4 <USBD_LL_Init+0x94>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80104ac:	4b11      	ldr	r3, [pc, #68]	; (80104f4 <USBD_LL_Init+0x94>)
 80104ae:	2200      	movs	r2, #0
 80104b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80104b2:	4b10      	ldr	r3, [pc, #64]	; (80104f4 <USBD_LL_Init+0x94>)
 80104b4:	2200      	movs	r2, #0
 80104b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80104b8:	4b0e      	ldr	r3, [pc, #56]	; (80104f4 <USBD_LL_Init+0x94>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80104be:	480d      	ldr	r0, [pc, #52]	; (80104f4 <USBD_LL_Init+0x94>)
 80104c0:	f7f3 fe4d 	bl	800415e <HAL_PCD_Init>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80104ca:	f7f0 fea5 	bl	8001218 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80104ce:	2180      	movs	r1, #128	; 0x80
 80104d0:	4808      	ldr	r0, [pc, #32]	; (80104f4 <USBD_LL_Init+0x94>)
 80104d2:	f7f5 f8c8 	bl	8005666 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80104d6:	2240      	movs	r2, #64	; 0x40
 80104d8:	2100      	movs	r1, #0
 80104da:	4806      	ldr	r0, [pc, #24]	; (80104f4 <USBD_LL_Init+0x94>)
 80104dc:	f7f5 f87c 	bl	80055d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80104e0:	2280      	movs	r2, #128	; 0x80
 80104e2:	2101      	movs	r1, #1
 80104e4:	4803      	ldr	r0, [pc, #12]	; (80104f4 <USBD_LL_Init+0x94>)
 80104e6:	f7f5 f877 	bl	80055d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80104ea:	2300      	movs	r3, #0
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	2000409c 	.word	0x2000409c

080104f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010500:	2300      	movs	r3, #0
 8010502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010504:	2300      	movs	r3, #0
 8010506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801050e:	4618      	mov	r0, r3
 8010510:	f7f3 ff49 	bl	80043a6 <HAL_PCD_Start>
 8010514:	4603      	mov	r3, r0
 8010516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	4618      	mov	r0, r3
 801051c:	f000 f97e 	bl	801081c <USBD_Get_USB_Status>
 8010520:	4603      	mov	r3, r0
 8010522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010524:	7bbb      	ldrb	r3, [r7, #14]
}
 8010526:	4618      	mov	r0, r3
 8010528:	3710      	adds	r7, #16
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b084      	sub	sp, #16
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
 8010536:	4608      	mov	r0, r1
 8010538:	4611      	mov	r1, r2
 801053a:	461a      	mov	r2, r3
 801053c:	4603      	mov	r3, r0
 801053e:	70fb      	strb	r3, [r7, #3]
 8010540:	460b      	mov	r3, r1
 8010542:	70bb      	strb	r3, [r7, #2]
 8010544:	4613      	mov	r3, r2
 8010546:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010548:	2300      	movs	r3, #0
 801054a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801054c:	2300      	movs	r3, #0
 801054e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010556:	78bb      	ldrb	r3, [r7, #2]
 8010558:	883a      	ldrh	r2, [r7, #0]
 801055a:	78f9      	ldrb	r1, [r7, #3]
 801055c:	f7f4 fc36 	bl	8004dcc <HAL_PCD_EP_Open>
 8010560:	4603      	mov	r3, r0
 8010562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010564:	7bfb      	ldrb	r3, [r7, #15]
 8010566:	4618      	mov	r0, r3
 8010568:	f000 f958 	bl	801081c <USBD_Get_USB_Status>
 801056c:	4603      	mov	r3, r0
 801056e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010570:	7bbb      	ldrb	r3, [r7, #14]
}
 8010572:	4618      	mov	r0, r3
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}

0801057a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801057a:	b580      	push	{r7, lr}
 801057c:	b084      	sub	sp, #16
 801057e:	af00      	add	r7, sp, #0
 8010580:	6078      	str	r0, [r7, #4]
 8010582:	460b      	mov	r3, r1
 8010584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010586:	2300      	movs	r3, #0
 8010588:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801058a:	2300      	movs	r3, #0
 801058c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010594:	78fa      	ldrb	r2, [r7, #3]
 8010596:	4611      	mov	r1, r2
 8010598:	4618      	mov	r0, r3
 801059a:	f7f4 fc7f 	bl	8004e9c <HAL_PCD_EP_Close>
 801059e:	4603      	mov	r3, r0
 80105a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105a2:	7bfb      	ldrb	r3, [r7, #15]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f000 f939 	bl	801081c <USBD_Get_USB_Status>
 80105aa:	4603      	mov	r3, r0
 80105ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3710      	adds	r7, #16
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	460b      	mov	r3, r1
 80105c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105c4:	2300      	movs	r3, #0
 80105c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80105d2:	78fa      	ldrb	r2, [r7, #3]
 80105d4:	4611      	mov	r1, r2
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7f4 fd57 	bl	800508a <HAL_PCD_EP_SetStall>
 80105dc:	4603      	mov	r3, r0
 80105de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
 80105e2:	4618      	mov	r0, r3
 80105e4:	f000 f91a 	bl	801081c <USBD_Get_USB_Status>
 80105e8:	4603      	mov	r3, r0
 80105ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}

080105f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b084      	sub	sp, #16
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
 80105fe:	460b      	mov	r3, r1
 8010600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010602:	2300      	movs	r3, #0
 8010604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010606:	2300      	movs	r3, #0
 8010608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010610:	78fa      	ldrb	r2, [r7, #3]
 8010612:	4611      	mov	r1, r2
 8010614:	4618      	mov	r0, r3
 8010616:	f7f4 fd9c 	bl	8005152 <HAL_PCD_EP_ClrStall>
 801061a:	4603      	mov	r3, r0
 801061c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801061e:	7bfb      	ldrb	r3, [r7, #15]
 8010620:	4618      	mov	r0, r3
 8010622:	f000 f8fb 	bl	801081c <USBD_Get_USB_Status>
 8010626:	4603      	mov	r3, r0
 8010628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801062a:	7bbb      	ldrb	r3, [r7, #14]
}
 801062c:	4618      	mov	r0, r3
 801062e:	3710      	adds	r7, #16
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010634:	b480      	push	{r7}
 8010636:	b085      	sub	sp, #20
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	460b      	mov	r3, r1
 801063e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010646:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801064c:	2b00      	cmp	r3, #0
 801064e:	da0b      	bge.n	8010668 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010650:	78fb      	ldrb	r3, [r7, #3]
 8010652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010656:	68f9      	ldr	r1, [r7, #12]
 8010658:	4613      	mov	r3, r2
 801065a:	00db      	lsls	r3, r3, #3
 801065c:	4413      	add	r3, r2
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	440b      	add	r3, r1
 8010662:	333e      	adds	r3, #62	; 0x3e
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	e00b      	b.n	8010680 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010668:	78fb      	ldrb	r3, [r7, #3]
 801066a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801066e:	68f9      	ldr	r1, [r7, #12]
 8010670:	4613      	mov	r3, r2
 8010672:	00db      	lsls	r3, r3, #3
 8010674:	4413      	add	r3, r2
 8010676:	009b      	lsls	r3, r3, #2
 8010678:	440b      	add	r3, r1
 801067a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801067e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010680:	4618      	mov	r0, r3
 8010682:	3714      	adds	r7, #20
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr

0801068c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	460b      	mov	r3, r1
 8010696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801069c:	2300      	movs	r3, #0
 801069e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106a6:	78fa      	ldrb	r2, [r7, #3]
 80106a8:	4611      	mov	r1, r2
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7f4 fb69 	bl	8004d82 <HAL_PCD_SetAddress>
 80106b0:	4603      	mov	r3, r0
 80106b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106b4:	7bfb      	ldrb	r3, [r7, #15]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f000 f8b0 	bl	801081c <USBD_Get_USB_Status>
 80106bc:	4603      	mov	r3, r0
 80106be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b086      	sub	sp, #24
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	60f8      	str	r0, [r7, #12]
 80106d2:	607a      	str	r2, [r7, #4]
 80106d4:	603b      	str	r3, [r7, #0]
 80106d6:	460b      	mov	r3, r1
 80106d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106da:	2300      	movs	r3, #0
 80106dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106de:	2300      	movs	r3, #0
 80106e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80106e8:	7af9      	ldrb	r1, [r7, #11]
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	f7f4 fc82 	bl	8004ff6 <HAL_PCD_EP_Transmit>
 80106f2:	4603      	mov	r3, r0
 80106f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106f6:	7dfb      	ldrb	r3, [r7, #23]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 f88f 	bl	801081c <USBD_Get_USB_Status>
 80106fe:	4603      	mov	r3, r0
 8010700:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010702:	7dbb      	ldrb	r3, [r7, #22]
}
 8010704:	4618      	mov	r0, r3
 8010706:	3718      	adds	r7, #24
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	607a      	str	r2, [r7, #4]
 8010716:	603b      	str	r3, [r7, #0]
 8010718:	460b      	mov	r3, r1
 801071a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801071c:	2300      	movs	r3, #0
 801071e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801072a:	7af9      	ldrb	r1, [r7, #11]
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	f7f4 fbfe 	bl	8004f30 <HAL_PCD_EP_Receive>
 8010734:	4603      	mov	r3, r0
 8010736:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010738:	7dfb      	ldrb	r3, [r7, #23]
 801073a:	4618      	mov	r0, r3
 801073c:	f000 f86e 	bl	801081c <USBD_Get_USB_Status>
 8010740:	4603      	mov	r3, r0
 8010742:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010744:	7dbb      	ldrb	r3, [r7, #22]
}
 8010746:	4618      	mov	r0, r3
 8010748:	3718      	adds	r7, #24
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}

0801074e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801074e:	b580      	push	{r7, lr}
 8010750:	b082      	sub	sp, #8
 8010752:	af00      	add	r7, sp, #0
 8010754:	6078      	str	r0, [r7, #4]
 8010756:	460b      	mov	r3, r1
 8010758:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010760:	78fa      	ldrb	r2, [r7, #3]
 8010762:	4611      	mov	r1, r2
 8010764:	4618      	mov	r0, r3
 8010766:	f7f4 fc2e 	bl	8004fc6 <HAL_PCD_EP_GetRxCount>
 801076a:	4603      	mov	r3, r0
}
 801076c:	4618      	mov	r0, r3
 801076e:	3708      	adds	r7, #8
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	460b      	mov	r3, r1
 801077e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010780:	78fb      	ldrb	r3, [r7, #3]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d002      	beq.n	801078c <HAL_PCDEx_LPM_Callback+0x18>
 8010786:	2b01      	cmp	r3, #1
 8010788:	d01f      	beq.n	80107ca <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801078a:	e03b      	b.n	8010804 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6a1b      	ldr	r3, [r3, #32]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d007      	beq.n	80107a4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010794:	f000 f83c 	bl	8010810 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010798:	4b1c      	ldr	r3, [pc, #112]	; (801080c <HAL_PCDEx_LPM_Callback+0x98>)
 801079a:	691b      	ldr	r3, [r3, #16]
 801079c:	4a1b      	ldr	r2, [pc, #108]	; (801080c <HAL_PCDEx_LPM_Callback+0x98>)
 801079e:	f023 0306 	bic.w	r3, r3, #6
 80107a2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	6812      	ldr	r2, [r2, #0]
 80107b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107b6:	f023 0301 	bic.w	r3, r3, #1
 80107ba:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fb fa1b 	bl	800bbfe <USBD_LL_Resume>
    break;
 80107c8:	e01c      	b.n	8010804 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	6812      	ldr	r2, [r2, #0]
 80107d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107dc:	f043 0301 	orr.w	r3, r3, #1
 80107e0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7fb f9f2 	bl	800bbd2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6a1b      	ldr	r3, [r3, #32]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d005      	beq.n	8010802 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80107f6:	4b05      	ldr	r3, [pc, #20]	; (801080c <HAL_PCDEx_LPM_Callback+0x98>)
 80107f8:	691b      	ldr	r3, [r3, #16]
 80107fa:	4a04      	ldr	r2, [pc, #16]	; (801080c <HAL_PCDEx_LPM_Callback+0x98>)
 80107fc:	f043 0306 	orr.w	r3, r3, #6
 8010800:	6113      	str	r3, [r2, #16]
    break;
 8010802:	bf00      	nop
}
 8010804:	bf00      	nop
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}
 801080c:	e000ed00 	.word	0xe000ed00

08010810 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010814:	f7f0 f9b2 	bl	8000b7c <SystemClock_Config>
}
 8010818:	bf00      	nop
 801081a:	bd80      	pop	{r7, pc}

0801081c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801081c:	b480      	push	{r7}
 801081e:	b085      	sub	sp, #20
 8010820:	af00      	add	r7, sp, #0
 8010822:	4603      	mov	r3, r0
 8010824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010826:	2300      	movs	r3, #0
 8010828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801082a:	79fb      	ldrb	r3, [r7, #7]
 801082c:	2b03      	cmp	r3, #3
 801082e:	d817      	bhi.n	8010860 <USBD_Get_USB_Status+0x44>
 8010830:	a201      	add	r2, pc, #4	; (adr r2, 8010838 <USBD_Get_USB_Status+0x1c>)
 8010832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010836:	bf00      	nop
 8010838:	08010849 	.word	0x08010849
 801083c:	0801084f 	.word	0x0801084f
 8010840:	08010855 	.word	0x08010855
 8010844:	0801085b 	.word	0x0801085b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010848:	2300      	movs	r3, #0
 801084a:	73fb      	strb	r3, [r7, #15]
    break;
 801084c:	e00b      	b.n	8010866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801084e:	2303      	movs	r3, #3
 8010850:	73fb      	strb	r3, [r7, #15]
    break;
 8010852:	e008      	b.n	8010866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010854:	2301      	movs	r3, #1
 8010856:	73fb      	strb	r3, [r7, #15]
    break;
 8010858:	e005      	b.n	8010866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801085a:	2303      	movs	r3, #3
 801085c:	73fb      	strb	r3, [r7, #15]
    break;
 801085e:	e002      	b.n	8010866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010860:	2303      	movs	r3, #3
 8010862:	73fb      	strb	r3, [r7, #15]
    break;
 8010864:	bf00      	nop
  }
  return usb_status;
 8010866:	7bfb      	ldrb	r3, [r7, #15]
}
 8010868:	4618      	mov	r0, r3
 801086a:	3714      	adds	r7, #20
 801086c:	46bd      	mov	sp, r7
 801086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010872:	4770      	bx	lr

08010874 <malloc>:
 8010874:	4b02      	ldr	r3, [pc, #8]	; (8010880 <malloc+0xc>)
 8010876:	4601      	mov	r1, r0
 8010878:	6818      	ldr	r0, [r3, #0]
 801087a:	f000 b82b 	b.w	80108d4 <_malloc_r>
 801087e:	bf00      	nop
 8010880:	20000168 	.word	0x20000168

08010884 <free>:
 8010884:	4b02      	ldr	r3, [pc, #8]	; (8010890 <free+0xc>)
 8010886:	4601      	mov	r1, r0
 8010888:	6818      	ldr	r0, [r3, #0]
 801088a:	f000 ba69 	b.w	8010d60 <_free_r>
 801088e:	bf00      	nop
 8010890:	20000168 	.word	0x20000168

08010894 <sbrk_aligned>:
 8010894:	b570      	push	{r4, r5, r6, lr}
 8010896:	4e0e      	ldr	r6, [pc, #56]	; (80108d0 <sbrk_aligned+0x3c>)
 8010898:	460c      	mov	r4, r1
 801089a:	6831      	ldr	r1, [r6, #0]
 801089c:	4605      	mov	r5, r0
 801089e:	b911      	cbnz	r1, 80108a6 <sbrk_aligned+0x12>
 80108a0:	f000 fa20 	bl	8010ce4 <_sbrk_r>
 80108a4:	6030      	str	r0, [r6, #0]
 80108a6:	4621      	mov	r1, r4
 80108a8:	4628      	mov	r0, r5
 80108aa:	f000 fa1b 	bl	8010ce4 <_sbrk_r>
 80108ae:	1c43      	adds	r3, r0, #1
 80108b0:	d00a      	beq.n	80108c8 <sbrk_aligned+0x34>
 80108b2:	1cc4      	adds	r4, r0, #3
 80108b4:	f024 0403 	bic.w	r4, r4, #3
 80108b8:	42a0      	cmp	r0, r4
 80108ba:	d007      	beq.n	80108cc <sbrk_aligned+0x38>
 80108bc:	1a21      	subs	r1, r4, r0
 80108be:	4628      	mov	r0, r5
 80108c0:	f000 fa10 	bl	8010ce4 <_sbrk_r>
 80108c4:	3001      	adds	r0, #1
 80108c6:	d101      	bne.n	80108cc <sbrk_aligned+0x38>
 80108c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80108cc:	4620      	mov	r0, r4
 80108ce:	bd70      	pop	{r4, r5, r6, pc}
 80108d0:	200045a8 	.word	0x200045a8

080108d4 <_malloc_r>:
 80108d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108d8:	1ccd      	adds	r5, r1, #3
 80108da:	f025 0503 	bic.w	r5, r5, #3
 80108de:	3508      	adds	r5, #8
 80108e0:	2d0c      	cmp	r5, #12
 80108e2:	bf38      	it	cc
 80108e4:	250c      	movcc	r5, #12
 80108e6:	2d00      	cmp	r5, #0
 80108e8:	4607      	mov	r7, r0
 80108ea:	db01      	blt.n	80108f0 <_malloc_r+0x1c>
 80108ec:	42a9      	cmp	r1, r5
 80108ee:	d905      	bls.n	80108fc <_malloc_r+0x28>
 80108f0:	230c      	movs	r3, #12
 80108f2:	603b      	str	r3, [r7, #0]
 80108f4:	2600      	movs	r6, #0
 80108f6:	4630      	mov	r0, r6
 80108f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80109d0 <_malloc_r+0xfc>
 8010900:	f000 f89c 	bl	8010a3c <__malloc_lock>
 8010904:	f8d8 3000 	ldr.w	r3, [r8]
 8010908:	461c      	mov	r4, r3
 801090a:	bb5c      	cbnz	r4, 8010964 <_malloc_r+0x90>
 801090c:	4629      	mov	r1, r5
 801090e:	4638      	mov	r0, r7
 8010910:	f7ff ffc0 	bl	8010894 <sbrk_aligned>
 8010914:	1c43      	adds	r3, r0, #1
 8010916:	4604      	mov	r4, r0
 8010918:	d155      	bne.n	80109c6 <_malloc_r+0xf2>
 801091a:	f8d8 4000 	ldr.w	r4, [r8]
 801091e:	4626      	mov	r6, r4
 8010920:	2e00      	cmp	r6, #0
 8010922:	d145      	bne.n	80109b0 <_malloc_r+0xdc>
 8010924:	2c00      	cmp	r4, #0
 8010926:	d048      	beq.n	80109ba <_malloc_r+0xe6>
 8010928:	6823      	ldr	r3, [r4, #0]
 801092a:	4631      	mov	r1, r6
 801092c:	4638      	mov	r0, r7
 801092e:	eb04 0903 	add.w	r9, r4, r3
 8010932:	f000 f9d7 	bl	8010ce4 <_sbrk_r>
 8010936:	4581      	cmp	r9, r0
 8010938:	d13f      	bne.n	80109ba <_malloc_r+0xe6>
 801093a:	6821      	ldr	r1, [r4, #0]
 801093c:	1a6d      	subs	r5, r5, r1
 801093e:	4629      	mov	r1, r5
 8010940:	4638      	mov	r0, r7
 8010942:	f7ff ffa7 	bl	8010894 <sbrk_aligned>
 8010946:	3001      	adds	r0, #1
 8010948:	d037      	beq.n	80109ba <_malloc_r+0xe6>
 801094a:	6823      	ldr	r3, [r4, #0]
 801094c:	442b      	add	r3, r5
 801094e:	6023      	str	r3, [r4, #0]
 8010950:	f8d8 3000 	ldr.w	r3, [r8]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d038      	beq.n	80109ca <_malloc_r+0xf6>
 8010958:	685a      	ldr	r2, [r3, #4]
 801095a:	42a2      	cmp	r2, r4
 801095c:	d12b      	bne.n	80109b6 <_malloc_r+0xe2>
 801095e:	2200      	movs	r2, #0
 8010960:	605a      	str	r2, [r3, #4]
 8010962:	e00f      	b.n	8010984 <_malloc_r+0xb0>
 8010964:	6822      	ldr	r2, [r4, #0]
 8010966:	1b52      	subs	r2, r2, r5
 8010968:	d41f      	bmi.n	80109aa <_malloc_r+0xd6>
 801096a:	2a0b      	cmp	r2, #11
 801096c:	d917      	bls.n	801099e <_malloc_r+0xca>
 801096e:	1961      	adds	r1, r4, r5
 8010970:	42a3      	cmp	r3, r4
 8010972:	6025      	str	r5, [r4, #0]
 8010974:	bf18      	it	ne
 8010976:	6059      	strne	r1, [r3, #4]
 8010978:	6863      	ldr	r3, [r4, #4]
 801097a:	bf08      	it	eq
 801097c:	f8c8 1000 	streq.w	r1, [r8]
 8010980:	5162      	str	r2, [r4, r5]
 8010982:	604b      	str	r3, [r1, #4]
 8010984:	4638      	mov	r0, r7
 8010986:	f104 060b 	add.w	r6, r4, #11
 801098a:	f000 f85d 	bl	8010a48 <__malloc_unlock>
 801098e:	f026 0607 	bic.w	r6, r6, #7
 8010992:	1d23      	adds	r3, r4, #4
 8010994:	1af2      	subs	r2, r6, r3
 8010996:	d0ae      	beq.n	80108f6 <_malloc_r+0x22>
 8010998:	1b9b      	subs	r3, r3, r6
 801099a:	50a3      	str	r3, [r4, r2]
 801099c:	e7ab      	b.n	80108f6 <_malloc_r+0x22>
 801099e:	42a3      	cmp	r3, r4
 80109a0:	6862      	ldr	r2, [r4, #4]
 80109a2:	d1dd      	bne.n	8010960 <_malloc_r+0x8c>
 80109a4:	f8c8 2000 	str.w	r2, [r8]
 80109a8:	e7ec      	b.n	8010984 <_malloc_r+0xb0>
 80109aa:	4623      	mov	r3, r4
 80109ac:	6864      	ldr	r4, [r4, #4]
 80109ae:	e7ac      	b.n	801090a <_malloc_r+0x36>
 80109b0:	4634      	mov	r4, r6
 80109b2:	6876      	ldr	r6, [r6, #4]
 80109b4:	e7b4      	b.n	8010920 <_malloc_r+0x4c>
 80109b6:	4613      	mov	r3, r2
 80109b8:	e7cc      	b.n	8010954 <_malloc_r+0x80>
 80109ba:	230c      	movs	r3, #12
 80109bc:	603b      	str	r3, [r7, #0]
 80109be:	4638      	mov	r0, r7
 80109c0:	f000 f842 	bl	8010a48 <__malloc_unlock>
 80109c4:	e797      	b.n	80108f6 <_malloc_r+0x22>
 80109c6:	6025      	str	r5, [r4, #0]
 80109c8:	e7dc      	b.n	8010984 <_malloc_r+0xb0>
 80109ca:	605b      	str	r3, [r3, #4]
 80109cc:	deff      	udf	#255	; 0xff
 80109ce:	bf00      	nop
 80109d0:	200045a4 	.word	0x200045a4

080109d4 <sniprintf>:
 80109d4:	b40c      	push	{r2, r3}
 80109d6:	b530      	push	{r4, r5, lr}
 80109d8:	4b17      	ldr	r3, [pc, #92]	; (8010a38 <sniprintf+0x64>)
 80109da:	1e0c      	subs	r4, r1, #0
 80109dc:	681d      	ldr	r5, [r3, #0]
 80109de:	b09d      	sub	sp, #116	; 0x74
 80109e0:	da08      	bge.n	80109f4 <sniprintf+0x20>
 80109e2:	238b      	movs	r3, #139	; 0x8b
 80109e4:	602b      	str	r3, [r5, #0]
 80109e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109ea:	b01d      	add	sp, #116	; 0x74
 80109ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109f0:	b002      	add	sp, #8
 80109f2:	4770      	bx	lr
 80109f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80109f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80109fc:	bf14      	ite	ne
 80109fe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010a02:	4623      	moveq	r3, r4
 8010a04:	9304      	str	r3, [sp, #16]
 8010a06:	9307      	str	r3, [sp, #28]
 8010a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a0c:	9002      	str	r0, [sp, #8]
 8010a0e:	9006      	str	r0, [sp, #24]
 8010a10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010a16:	ab21      	add	r3, sp, #132	; 0x84
 8010a18:	a902      	add	r1, sp, #8
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	9301      	str	r3, [sp, #4]
 8010a1e:	f000 fa45 	bl	8010eac <_svfiprintf_r>
 8010a22:	1c43      	adds	r3, r0, #1
 8010a24:	bfbc      	itt	lt
 8010a26:	238b      	movlt	r3, #139	; 0x8b
 8010a28:	602b      	strlt	r3, [r5, #0]
 8010a2a:	2c00      	cmp	r4, #0
 8010a2c:	d0dd      	beq.n	80109ea <sniprintf+0x16>
 8010a2e:	9b02      	ldr	r3, [sp, #8]
 8010a30:	2200      	movs	r2, #0
 8010a32:	701a      	strb	r2, [r3, #0]
 8010a34:	e7d9      	b.n	80109ea <sniprintf+0x16>
 8010a36:	bf00      	nop
 8010a38:	20000168 	.word	0x20000168

08010a3c <__malloc_lock>:
 8010a3c:	4801      	ldr	r0, [pc, #4]	; (8010a44 <__malloc_lock+0x8>)
 8010a3e:	f000 b98c 	b.w	8010d5a <__retarget_lock_acquire_recursive>
 8010a42:	bf00      	nop
 8010a44:	200046e8 	.word	0x200046e8

08010a48 <__malloc_unlock>:
 8010a48:	4801      	ldr	r0, [pc, #4]	; (8010a50 <__malloc_unlock+0x8>)
 8010a4a:	f000 b987 	b.w	8010d5c <__retarget_lock_release_recursive>
 8010a4e:	bf00      	nop
 8010a50:	200046e8 	.word	0x200046e8

08010a54 <std>:
 8010a54:	2300      	movs	r3, #0
 8010a56:	b510      	push	{r4, lr}
 8010a58:	4604      	mov	r4, r0
 8010a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8010a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a62:	6083      	str	r3, [r0, #8]
 8010a64:	8181      	strh	r1, [r0, #12]
 8010a66:	6643      	str	r3, [r0, #100]	; 0x64
 8010a68:	81c2      	strh	r2, [r0, #14]
 8010a6a:	6183      	str	r3, [r0, #24]
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	2208      	movs	r2, #8
 8010a70:	305c      	adds	r0, #92	; 0x5c
 8010a72:	f000 f92e 	bl	8010cd2 <memset>
 8010a76:	4b0d      	ldr	r3, [pc, #52]	; (8010aac <std+0x58>)
 8010a78:	6263      	str	r3, [r4, #36]	; 0x24
 8010a7a:	4b0d      	ldr	r3, [pc, #52]	; (8010ab0 <std+0x5c>)
 8010a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a7e:	4b0d      	ldr	r3, [pc, #52]	; (8010ab4 <std+0x60>)
 8010a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a82:	4b0d      	ldr	r3, [pc, #52]	; (8010ab8 <std+0x64>)
 8010a84:	6323      	str	r3, [r4, #48]	; 0x30
 8010a86:	4b0d      	ldr	r3, [pc, #52]	; (8010abc <std+0x68>)
 8010a88:	6224      	str	r4, [r4, #32]
 8010a8a:	429c      	cmp	r4, r3
 8010a8c:	d006      	beq.n	8010a9c <std+0x48>
 8010a8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010a92:	4294      	cmp	r4, r2
 8010a94:	d002      	beq.n	8010a9c <std+0x48>
 8010a96:	33d0      	adds	r3, #208	; 0xd0
 8010a98:	429c      	cmp	r4, r3
 8010a9a:	d105      	bne.n	8010aa8 <std+0x54>
 8010a9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aa4:	f000 b958 	b.w	8010d58 <__retarget_lock_init_recursive>
 8010aa8:	bd10      	pop	{r4, pc}
 8010aaa:	bf00      	nop
 8010aac:	080117ad 	.word	0x080117ad
 8010ab0:	080117cf 	.word	0x080117cf
 8010ab4:	08011807 	.word	0x08011807
 8010ab8:	0801182b 	.word	0x0801182b
 8010abc:	200045ac 	.word	0x200045ac

08010ac0 <stdio_exit_handler>:
 8010ac0:	4a02      	ldr	r2, [pc, #8]	; (8010acc <stdio_exit_handler+0xc>)
 8010ac2:	4903      	ldr	r1, [pc, #12]	; (8010ad0 <stdio_exit_handler+0x10>)
 8010ac4:	4803      	ldr	r0, [pc, #12]	; (8010ad4 <stdio_exit_handler+0x14>)
 8010ac6:	f000 b869 	b.w	8010b9c <_fwalk_sglue>
 8010aca:	bf00      	nop
 8010acc:	20000110 	.word	0x20000110
 8010ad0:	0801175d 	.word	0x0801175d
 8010ad4:	2000011c 	.word	0x2000011c

08010ad8 <cleanup_stdio>:
 8010ad8:	6841      	ldr	r1, [r0, #4]
 8010ada:	4b0c      	ldr	r3, [pc, #48]	; (8010b0c <cleanup_stdio+0x34>)
 8010adc:	4299      	cmp	r1, r3
 8010ade:	b510      	push	{r4, lr}
 8010ae0:	4604      	mov	r4, r0
 8010ae2:	d001      	beq.n	8010ae8 <cleanup_stdio+0x10>
 8010ae4:	f000 fe3a 	bl	801175c <_fflush_r>
 8010ae8:	68a1      	ldr	r1, [r4, #8]
 8010aea:	4b09      	ldr	r3, [pc, #36]	; (8010b10 <cleanup_stdio+0x38>)
 8010aec:	4299      	cmp	r1, r3
 8010aee:	d002      	beq.n	8010af6 <cleanup_stdio+0x1e>
 8010af0:	4620      	mov	r0, r4
 8010af2:	f000 fe33 	bl	801175c <_fflush_r>
 8010af6:	68e1      	ldr	r1, [r4, #12]
 8010af8:	4b06      	ldr	r3, [pc, #24]	; (8010b14 <cleanup_stdio+0x3c>)
 8010afa:	4299      	cmp	r1, r3
 8010afc:	d004      	beq.n	8010b08 <cleanup_stdio+0x30>
 8010afe:	4620      	mov	r0, r4
 8010b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b04:	f000 be2a 	b.w	801175c <_fflush_r>
 8010b08:	bd10      	pop	{r4, pc}
 8010b0a:	bf00      	nop
 8010b0c:	200045ac 	.word	0x200045ac
 8010b10:	20004614 	.word	0x20004614
 8010b14:	2000467c 	.word	0x2000467c

08010b18 <global_stdio_init.part.0>:
 8010b18:	b510      	push	{r4, lr}
 8010b1a:	4b0b      	ldr	r3, [pc, #44]	; (8010b48 <global_stdio_init.part.0+0x30>)
 8010b1c:	4c0b      	ldr	r4, [pc, #44]	; (8010b4c <global_stdio_init.part.0+0x34>)
 8010b1e:	4a0c      	ldr	r2, [pc, #48]	; (8010b50 <global_stdio_init.part.0+0x38>)
 8010b20:	601a      	str	r2, [r3, #0]
 8010b22:	4620      	mov	r0, r4
 8010b24:	2200      	movs	r2, #0
 8010b26:	2104      	movs	r1, #4
 8010b28:	f7ff ff94 	bl	8010a54 <std>
 8010b2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010b30:	2201      	movs	r2, #1
 8010b32:	2109      	movs	r1, #9
 8010b34:	f7ff ff8e 	bl	8010a54 <std>
 8010b38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010b3c:	2202      	movs	r2, #2
 8010b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b42:	2112      	movs	r1, #18
 8010b44:	f7ff bf86 	b.w	8010a54 <std>
 8010b48:	200046e4 	.word	0x200046e4
 8010b4c:	200045ac 	.word	0x200045ac
 8010b50:	08010ac1 	.word	0x08010ac1

08010b54 <__sfp_lock_acquire>:
 8010b54:	4801      	ldr	r0, [pc, #4]	; (8010b5c <__sfp_lock_acquire+0x8>)
 8010b56:	f000 b900 	b.w	8010d5a <__retarget_lock_acquire_recursive>
 8010b5a:	bf00      	nop
 8010b5c:	200046e9 	.word	0x200046e9

08010b60 <__sfp_lock_release>:
 8010b60:	4801      	ldr	r0, [pc, #4]	; (8010b68 <__sfp_lock_release+0x8>)
 8010b62:	f000 b8fb 	b.w	8010d5c <__retarget_lock_release_recursive>
 8010b66:	bf00      	nop
 8010b68:	200046e9 	.word	0x200046e9

08010b6c <__sinit>:
 8010b6c:	b510      	push	{r4, lr}
 8010b6e:	4604      	mov	r4, r0
 8010b70:	f7ff fff0 	bl	8010b54 <__sfp_lock_acquire>
 8010b74:	6a23      	ldr	r3, [r4, #32]
 8010b76:	b11b      	cbz	r3, 8010b80 <__sinit+0x14>
 8010b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b7c:	f7ff bff0 	b.w	8010b60 <__sfp_lock_release>
 8010b80:	4b04      	ldr	r3, [pc, #16]	; (8010b94 <__sinit+0x28>)
 8010b82:	6223      	str	r3, [r4, #32]
 8010b84:	4b04      	ldr	r3, [pc, #16]	; (8010b98 <__sinit+0x2c>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d1f5      	bne.n	8010b78 <__sinit+0xc>
 8010b8c:	f7ff ffc4 	bl	8010b18 <global_stdio_init.part.0>
 8010b90:	e7f2      	b.n	8010b78 <__sinit+0xc>
 8010b92:	bf00      	nop
 8010b94:	08010ad9 	.word	0x08010ad9
 8010b98:	200046e4 	.word	0x200046e4

08010b9c <_fwalk_sglue>:
 8010b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ba0:	4607      	mov	r7, r0
 8010ba2:	4688      	mov	r8, r1
 8010ba4:	4614      	mov	r4, r2
 8010ba6:	2600      	movs	r6, #0
 8010ba8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010bac:	f1b9 0901 	subs.w	r9, r9, #1
 8010bb0:	d505      	bpl.n	8010bbe <_fwalk_sglue+0x22>
 8010bb2:	6824      	ldr	r4, [r4, #0]
 8010bb4:	2c00      	cmp	r4, #0
 8010bb6:	d1f7      	bne.n	8010ba8 <_fwalk_sglue+0xc>
 8010bb8:	4630      	mov	r0, r6
 8010bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bbe:	89ab      	ldrh	r3, [r5, #12]
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d907      	bls.n	8010bd4 <_fwalk_sglue+0x38>
 8010bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	d003      	beq.n	8010bd4 <_fwalk_sglue+0x38>
 8010bcc:	4629      	mov	r1, r5
 8010bce:	4638      	mov	r0, r7
 8010bd0:	47c0      	blx	r8
 8010bd2:	4306      	orrs	r6, r0
 8010bd4:	3568      	adds	r5, #104	; 0x68
 8010bd6:	e7e9      	b.n	8010bac <_fwalk_sglue+0x10>

08010bd8 <iprintf>:
 8010bd8:	b40f      	push	{r0, r1, r2, r3}
 8010bda:	b507      	push	{r0, r1, r2, lr}
 8010bdc:	4906      	ldr	r1, [pc, #24]	; (8010bf8 <iprintf+0x20>)
 8010bde:	ab04      	add	r3, sp, #16
 8010be0:	6808      	ldr	r0, [r1, #0]
 8010be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010be6:	6881      	ldr	r1, [r0, #8]
 8010be8:	9301      	str	r3, [sp, #4]
 8010bea:	f000 fa87 	bl	80110fc <_vfiprintf_r>
 8010bee:	b003      	add	sp, #12
 8010bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bf4:	b004      	add	sp, #16
 8010bf6:	4770      	bx	lr
 8010bf8:	20000168 	.word	0x20000168

08010bfc <_puts_r>:
 8010bfc:	6a03      	ldr	r3, [r0, #32]
 8010bfe:	b570      	push	{r4, r5, r6, lr}
 8010c00:	6884      	ldr	r4, [r0, #8]
 8010c02:	4605      	mov	r5, r0
 8010c04:	460e      	mov	r6, r1
 8010c06:	b90b      	cbnz	r3, 8010c0c <_puts_r+0x10>
 8010c08:	f7ff ffb0 	bl	8010b6c <__sinit>
 8010c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c0e:	07db      	lsls	r3, r3, #31
 8010c10:	d405      	bmi.n	8010c1e <_puts_r+0x22>
 8010c12:	89a3      	ldrh	r3, [r4, #12]
 8010c14:	0598      	lsls	r0, r3, #22
 8010c16:	d402      	bmi.n	8010c1e <_puts_r+0x22>
 8010c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c1a:	f000 f89e 	bl	8010d5a <__retarget_lock_acquire_recursive>
 8010c1e:	89a3      	ldrh	r3, [r4, #12]
 8010c20:	0719      	lsls	r1, r3, #28
 8010c22:	d513      	bpl.n	8010c4c <_puts_r+0x50>
 8010c24:	6923      	ldr	r3, [r4, #16]
 8010c26:	b18b      	cbz	r3, 8010c4c <_puts_r+0x50>
 8010c28:	3e01      	subs	r6, #1
 8010c2a:	68a3      	ldr	r3, [r4, #8]
 8010c2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010c30:	3b01      	subs	r3, #1
 8010c32:	60a3      	str	r3, [r4, #8]
 8010c34:	b9e9      	cbnz	r1, 8010c72 <_puts_r+0x76>
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	da2e      	bge.n	8010c98 <_puts_r+0x9c>
 8010c3a:	4622      	mov	r2, r4
 8010c3c:	210a      	movs	r1, #10
 8010c3e:	4628      	mov	r0, r5
 8010c40:	f000 fe26 	bl	8011890 <__swbuf_r>
 8010c44:	3001      	adds	r0, #1
 8010c46:	d007      	beq.n	8010c58 <_puts_r+0x5c>
 8010c48:	250a      	movs	r5, #10
 8010c4a:	e007      	b.n	8010c5c <_puts_r+0x60>
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	4628      	mov	r0, r5
 8010c50:	f000 fe5c 	bl	801190c <__swsetup_r>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	d0e7      	beq.n	8010c28 <_puts_r+0x2c>
 8010c58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c5e:	07da      	lsls	r2, r3, #31
 8010c60:	d405      	bmi.n	8010c6e <_puts_r+0x72>
 8010c62:	89a3      	ldrh	r3, [r4, #12]
 8010c64:	059b      	lsls	r3, r3, #22
 8010c66:	d402      	bmi.n	8010c6e <_puts_r+0x72>
 8010c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c6a:	f000 f877 	bl	8010d5c <__retarget_lock_release_recursive>
 8010c6e:	4628      	mov	r0, r5
 8010c70:	bd70      	pop	{r4, r5, r6, pc}
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	da04      	bge.n	8010c80 <_puts_r+0x84>
 8010c76:	69a2      	ldr	r2, [r4, #24]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	dc06      	bgt.n	8010c8a <_puts_r+0x8e>
 8010c7c:	290a      	cmp	r1, #10
 8010c7e:	d004      	beq.n	8010c8a <_puts_r+0x8e>
 8010c80:	6823      	ldr	r3, [r4, #0]
 8010c82:	1c5a      	adds	r2, r3, #1
 8010c84:	6022      	str	r2, [r4, #0]
 8010c86:	7019      	strb	r1, [r3, #0]
 8010c88:	e7cf      	b.n	8010c2a <_puts_r+0x2e>
 8010c8a:	4622      	mov	r2, r4
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f000 fdff 	bl	8011890 <__swbuf_r>
 8010c92:	3001      	adds	r0, #1
 8010c94:	d1c9      	bne.n	8010c2a <_puts_r+0x2e>
 8010c96:	e7df      	b.n	8010c58 <_puts_r+0x5c>
 8010c98:	6823      	ldr	r3, [r4, #0]
 8010c9a:	250a      	movs	r5, #10
 8010c9c:	1c5a      	adds	r2, r3, #1
 8010c9e:	6022      	str	r2, [r4, #0]
 8010ca0:	701d      	strb	r5, [r3, #0]
 8010ca2:	e7db      	b.n	8010c5c <_puts_r+0x60>

08010ca4 <puts>:
 8010ca4:	4b02      	ldr	r3, [pc, #8]	; (8010cb0 <puts+0xc>)
 8010ca6:	4601      	mov	r1, r0
 8010ca8:	6818      	ldr	r0, [r3, #0]
 8010caa:	f7ff bfa7 	b.w	8010bfc <_puts_r>
 8010cae:	bf00      	nop
 8010cb0:	20000168 	.word	0x20000168

08010cb4 <strcat>:
 8010cb4:	b510      	push	{r4, lr}
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	7814      	ldrb	r4, [r2, #0]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	3201      	adds	r2, #1
 8010cbe:	2c00      	cmp	r4, #0
 8010cc0:	d1fa      	bne.n	8010cb8 <strcat+0x4>
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ccc:	2a00      	cmp	r2, #0
 8010cce:	d1f9      	bne.n	8010cc4 <strcat+0x10>
 8010cd0:	bd10      	pop	{r4, pc}

08010cd2 <memset>:
 8010cd2:	4402      	add	r2, r0
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d100      	bne.n	8010cdc <memset+0xa>
 8010cda:	4770      	bx	lr
 8010cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8010ce0:	e7f9      	b.n	8010cd6 <memset+0x4>
	...

08010ce4 <_sbrk_r>:
 8010ce4:	b538      	push	{r3, r4, r5, lr}
 8010ce6:	4d06      	ldr	r5, [pc, #24]	; (8010d00 <_sbrk_r+0x1c>)
 8010ce8:	2300      	movs	r3, #0
 8010cea:	4604      	mov	r4, r0
 8010cec:	4608      	mov	r0, r1
 8010cee:	602b      	str	r3, [r5, #0]
 8010cf0:	f7f0 fdf0 	bl	80018d4 <_sbrk>
 8010cf4:	1c43      	adds	r3, r0, #1
 8010cf6:	d102      	bne.n	8010cfe <_sbrk_r+0x1a>
 8010cf8:	682b      	ldr	r3, [r5, #0]
 8010cfa:	b103      	cbz	r3, 8010cfe <_sbrk_r+0x1a>
 8010cfc:	6023      	str	r3, [r4, #0]
 8010cfe:	bd38      	pop	{r3, r4, r5, pc}
 8010d00:	200046ec 	.word	0x200046ec

08010d04 <__errno>:
 8010d04:	4b01      	ldr	r3, [pc, #4]	; (8010d0c <__errno+0x8>)
 8010d06:	6818      	ldr	r0, [r3, #0]
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	20000168 	.word	0x20000168

08010d10 <__libc_init_array>:
 8010d10:	b570      	push	{r4, r5, r6, lr}
 8010d12:	4d0d      	ldr	r5, [pc, #52]	; (8010d48 <__libc_init_array+0x38>)
 8010d14:	4c0d      	ldr	r4, [pc, #52]	; (8010d4c <__libc_init_array+0x3c>)
 8010d16:	1b64      	subs	r4, r4, r5
 8010d18:	10a4      	asrs	r4, r4, #2
 8010d1a:	2600      	movs	r6, #0
 8010d1c:	42a6      	cmp	r6, r4
 8010d1e:	d109      	bne.n	8010d34 <__libc_init_array+0x24>
 8010d20:	4d0b      	ldr	r5, [pc, #44]	; (8010d50 <__libc_init_array+0x40>)
 8010d22:	4c0c      	ldr	r4, [pc, #48]	; (8010d54 <__libc_init_array+0x44>)
 8010d24:	f000 ff44 	bl	8011bb0 <_init>
 8010d28:	1b64      	subs	r4, r4, r5
 8010d2a:	10a4      	asrs	r4, r4, #2
 8010d2c:	2600      	movs	r6, #0
 8010d2e:	42a6      	cmp	r6, r4
 8010d30:	d105      	bne.n	8010d3e <__libc_init_array+0x2e>
 8010d32:	bd70      	pop	{r4, r5, r6, pc}
 8010d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d38:	4798      	blx	r3
 8010d3a:	3601      	adds	r6, #1
 8010d3c:	e7ee      	b.n	8010d1c <__libc_init_array+0xc>
 8010d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d42:	4798      	blx	r3
 8010d44:	3601      	adds	r6, #1
 8010d46:	e7f2      	b.n	8010d2e <__libc_init_array+0x1e>
 8010d48:	0801244c 	.word	0x0801244c
 8010d4c:	0801244c 	.word	0x0801244c
 8010d50:	0801244c 	.word	0x0801244c
 8010d54:	08012450 	.word	0x08012450

08010d58 <__retarget_lock_init_recursive>:
 8010d58:	4770      	bx	lr

08010d5a <__retarget_lock_acquire_recursive>:
 8010d5a:	4770      	bx	lr

08010d5c <__retarget_lock_release_recursive>:
 8010d5c:	4770      	bx	lr
	...

08010d60 <_free_r>:
 8010d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d62:	2900      	cmp	r1, #0
 8010d64:	d044      	beq.n	8010df0 <_free_r+0x90>
 8010d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d6a:	9001      	str	r0, [sp, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8010d72:	bfb8      	it	lt
 8010d74:	18e4      	addlt	r4, r4, r3
 8010d76:	f7ff fe61 	bl	8010a3c <__malloc_lock>
 8010d7a:	4a1e      	ldr	r2, [pc, #120]	; (8010df4 <_free_r+0x94>)
 8010d7c:	9801      	ldr	r0, [sp, #4]
 8010d7e:	6813      	ldr	r3, [r2, #0]
 8010d80:	b933      	cbnz	r3, 8010d90 <_free_r+0x30>
 8010d82:	6063      	str	r3, [r4, #4]
 8010d84:	6014      	str	r4, [r2, #0]
 8010d86:	b003      	add	sp, #12
 8010d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d8c:	f7ff be5c 	b.w	8010a48 <__malloc_unlock>
 8010d90:	42a3      	cmp	r3, r4
 8010d92:	d908      	bls.n	8010da6 <_free_r+0x46>
 8010d94:	6825      	ldr	r5, [r4, #0]
 8010d96:	1961      	adds	r1, r4, r5
 8010d98:	428b      	cmp	r3, r1
 8010d9a:	bf01      	itttt	eq
 8010d9c:	6819      	ldreq	r1, [r3, #0]
 8010d9e:	685b      	ldreq	r3, [r3, #4]
 8010da0:	1949      	addeq	r1, r1, r5
 8010da2:	6021      	streq	r1, [r4, #0]
 8010da4:	e7ed      	b.n	8010d82 <_free_r+0x22>
 8010da6:	461a      	mov	r2, r3
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	b10b      	cbz	r3, 8010db0 <_free_r+0x50>
 8010dac:	42a3      	cmp	r3, r4
 8010dae:	d9fa      	bls.n	8010da6 <_free_r+0x46>
 8010db0:	6811      	ldr	r1, [r2, #0]
 8010db2:	1855      	adds	r5, r2, r1
 8010db4:	42a5      	cmp	r5, r4
 8010db6:	d10b      	bne.n	8010dd0 <_free_r+0x70>
 8010db8:	6824      	ldr	r4, [r4, #0]
 8010dba:	4421      	add	r1, r4
 8010dbc:	1854      	adds	r4, r2, r1
 8010dbe:	42a3      	cmp	r3, r4
 8010dc0:	6011      	str	r1, [r2, #0]
 8010dc2:	d1e0      	bne.n	8010d86 <_free_r+0x26>
 8010dc4:	681c      	ldr	r4, [r3, #0]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	6053      	str	r3, [r2, #4]
 8010dca:	440c      	add	r4, r1
 8010dcc:	6014      	str	r4, [r2, #0]
 8010dce:	e7da      	b.n	8010d86 <_free_r+0x26>
 8010dd0:	d902      	bls.n	8010dd8 <_free_r+0x78>
 8010dd2:	230c      	movs	r3, #12
 8010dd4:	6003      	str	r3, [r0, #0]
 8010dd6:	e7d6      	b.n	8010d86 <_free_r+0x26>
 8010dd8:	6825      	ldr	r5, [r4, #0]
 8010dda:	1961      	adds	r1, r4, r5
 8010ddc:	428b      	cmp	r3, r1
 8010dde:	bf04      	itt	eq
 8010de0:	6819      	ldreq	r1, [r3, #0]
 8010de2:	685b      	ldreq	r3, [r3, #4]
 8010de4:	6063      	str	r3, [r4, #4]
 8010de6:	bf04      	itt	eq
 8010de8:	1949      	addeq	r1, r1, r5
 8010dea:	6021      	streq	r1, [r4, #0]
 8010dec:	6054      	str	r4, [r2, #4]
 8010dee:	e7ca      	b.n	8010d86 <_free_r+0x26>
 8010df0:	b003      	add	sp, #12
 8010df2:	bd30      	pop	{r4, r5, pc}
 8010df4:	200045a4 	.word	0x200045a4

08010df8 <__ssputs_r>:
 8010df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dfc:	688e      	ldr	r6, [r1, #8]
 8010dfe:	461f      	mov	r7, r3
 8010e00:	42be      	cmp	r6, r7
 8010e02:	680b      	ldr	r3, [r1, #0]
 8010e04:	4682      	mov	sl, r0
 8010e06:	460c      	mov	r4, r1
 8010e08:	4690      	mov	r8, r2
 8010e0a:	d82c      	bhi.n	8010e66 <__ssputs_r+0x6e>
 8010e0c:	898a      	ldrh	r2, [r1, #12]
 8010e0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e12:	d026      	beq.n	8010e62 <__ssputs_r+0x6a>
 8010e14:	6965      	ldr	r5, [r4, #20]
 8010e16:	6909      	ldr	r1, [r1, #16]
 8010e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e1c:	eba3 0901 	sub.w	r9, r3, r1
 8010e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e24:	1c7b      	adds	r3, r7, #1
 8010e26:	444b      	add	r3, r9
 8010e28:	106d      	asrs	r5, r5, #1
 8010e2a:	429d      	cmp	r5, r3
 8010e2c:	bf38      	it	cc
 8010e2e:	461d      	movcc	r5, r3
 8010e30:	0553      	lsls	r3, r2, #21
 8010e32:	d527      	bpl.n	8010e84 <__ssputs_r+0x8c>
 8010e34:	4629      	mov	r1, r5
 8010e36:	f7ff fd4d 	bl	80108d4 <_malloc_r>
 8010e3a:	4606      	mov	r6, r0
 8010e3c:	b360      	cbz	r0, 8010e98 <__ssputs_r+0xa0>
 8010e3e:	6921      	ldr	r1, [r4, #16]
 8010e40:	464a      	mov	r2, r9
 8010e42:	f000 fe9f 	bl	8011b84 <memcpy>
 8010e46:	89a3      	ldrh	r3, [r4, #12]
 8010e48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e50:	81a3      	strh	r3, [r4, #12]
 8010e52:	6126      	str	r6, [r4, #16]
 8010e54:	6165      	str	r5, [r4, #20]
 8010e56:	444e      	add	r6, r9
 8010e58:	eba5 0509 	sub.w	r5, r5, r9
 8010e5c:	6026      	str	r6, [r4, #0]
 8010e5e:	60a5      	str	r5, [r4, #8]
 8010e60:	463e      	mov	r6, r7
 8010e62:	42be      	cmp	r6, r7
 8010e64:	d900      	bls.n	8010e68 <__ssputs_r+0x70>
 8010e66:	463e      	mov	r6, r7
 8010e68:	6820      	ldr	r0, [r4, #0]
 8010e6a:	4632      	mov	r2, r6
 8010e6c:	4641      	mov	r1, r8
 8010e6e:	f000 fe07 	bl	8011a80 <memmove>
 8010e72:	68a3      	ldr	r3, [r4, #8]
 8010e74:	1b9b      	subs	r3, r3, r6
 8010e76:	60a3      	str	r3, [r4, #8]
 8010e78:	6823      	ldr	r3, [r4, #0]
 8010e7a:	4433      	add	r3, r6
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	2000      	movs	r0, #0
 8010e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e84:	462a      	mov	r2, r5
 8010e86:	f000 fcd4 	bl	8011832 <_realloc_r>
 8010e8a:	4606      	mov	r6, r0
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d1e0      	bne.n	8010e52 <__ssputs_r+0x5a>
 8010e90:	6921      	ldr	r1, [r4, #16]
 8010e92:	4650      	mov	r0, sl
 8010e94:	f7ff ff64 	bl	8010d60 <_free_r>
 8010e98:	230c      	movs	r3, #12
 8010e9a:	f8ca 3000 	str.w	r3, [sl]
 8010e9e:	89a3      	ldrh	r3, [r4, #12]
 8010ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ea4:	81a3      	strh	r3, [r4, #12]
 8010ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010eaa:	e7e9      	b.n	8010e80 <__ssputs_r+0x88>

08010eac <_svfiprintf_r>:
 8010eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb0:	4698      	mov	r8, r3
 8010eb2:	898b      	ldrh	r3, [r1, #12]
 8010eb4:	061b      	lsls	r3, r3, #24
 8010eb6:	b09d      	sub	sp, #116	; 0x74
 8010eb8:	4607      	mov	r7, r0
 8010eba:	460d      	mov	r5, r1
 8010ebc:	4614      	mov	r4, r2
 8010ebe:	d50e      	bpl.n	8010ede <_svfiprintf_r+0x32>
 8010ec0:	690b      	ldr	r3, [r1, #16]
 8010ec2:	b963      	cbnz	r3, 8010ede <_svfiprintf_r+0x32>
 8010ec4:	2140      	movs	r1, #64	; 0x40
 8010ec6:	f7ff fd05 	bl	80108d4 <_malloc_r>
 8010eca:	6028      	str	r0, [r5, #0]
 8010ecc:	6128      	str	r0, [r5, #16]
 8010ece:	b920      	cbnz	r0, 8010eda <_svfiprintf_r+0x2e>
 8010ed0:	230c      	movs	r3, #12
 8010ed2:	603b      	str	r3, [r7, #0]
 8010ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ed8:	e0d0      	b.n	801107c <_svfiprintf_r+0x1d0>
 8010eda:	2340      	movs	r3, #64	; 0x40
 8010edc:	616b      	str	r3, [r5, #20]
 8010ede:	2300      	movs	r3, #0
 8010ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ee2:	2320      	movs	r3, #32
 8010ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010eec:	2330      	movs	r3, #48	; 0x30
 8010eee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011094 <_svfiprintf_r+0x1e8>
 8010ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ef6:	f04f 0901 	mov.w	r9, #1
 8010efa:	4623      	mov	r3, r4
 8010efc:	469a      	mov	sl, r3
 8010efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f02:	b10a      	cbz	r2, 8010f08 <_svfiprintf_r+0x5c>
 8010f04:	2a25      	cmp	r2, #37	; 0x25
 8010f06:	d1f9      	bne.n	8010efc <_svfiprintf_r+0x50>
 8010f08:	ebba 0b04 	subs.w	fp, sl, r4
 8010f0c:	d00b      	beq.n	8010f26 <_svfiprintf_r+0x7a>
 8010f0e:	465b      	mov	r3, fp
 8010f10:	4622      	mov	r2, r4
 8010f12:	4629      	mov	r1, r5
 8010f14:	4638      	mov	r0, r7
 8010f16:	f7ff ff6f 	bl	8010df8 <__ssputs_r>
 8010f1a:	3001      	adds	r0, #1
 8010f1c:	f000 80a9 	beq.w	8011072 <_svfiprintf_r+0x1c6>
 8010f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f22:	445a      	add	r2, fp
 8010f24:	9209      	str	r2, [sp, #36]	; 0x24
 8010f26:	f89a 3000 	ldrb.w	r3, [sl]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	f000 80a1 	beq.w	8011072 <_svfiprintf_r+0x1c6>
 8010f30:	2300      	movs	r3, #0
 8010f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f3a:	f10a 0a01 	add.w	sl, sl, #1
 8010f3e:	9304      	str	r3, [sp, #16]
 8010f40:	9307      	str	r3, [sp, #28]
 8010f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f46:	931a      	str	r3, [sp, #104]	; 0x68
 8010f48:	4654      	mov	r4, sl
 8010f4a:	2205      	movs	r2, #5
 8010f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f50:	4850      	ldr	r0, [pc, #320]	; (8011094 <_svfiprintf_r+0x1e8>)
 8010f52:	f7ef f975 	bl	8000240 <memchr>
 8010f56:	9a04      	ldr	r2, [sp, #16]
 8010f58:	b9d8      	cbnz	r0, 8010f92 <_svfiprintf_r+0xe6>
 8010f5a:	06d0      	lsls	r0, r2, #27
 8010f5c:	bf44      	itt	mi
 8010f5e:	2320      	movmi	r3, #32
 8010f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f64:	0711      	lsls	r1, r2, #28
 8010f66:	bf44      	itt	mi
 8010f68:	232b      	movmi	r3, #43	; 0x2b
 8010f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8010f72:	2b2a      	cmp	r3, #42	; 0x2a
 8010f74:	d015      	beq.n	8010fa2 <_svfiprintf_r+0xf6>
 8010f76:	9a07      	ldr	r2, [sp, #28]
 8010f78:	4654      	mov	r4, sl
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	f04f 0c0a 	mov.w	ip, #10
 8010f80:	4621      	mov	r1, r4
 8010f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f86:	3b30      	subs	r3, #48	; 0x30
 8010f88:	2b09      	cmp	r3, #9
 8010f8a:	d94d      	bls.n	8011028 <_svfiprintf_r+0x17c>
 8010f8c:	b1b0      	cbz	r0, 8010fbc <_svfiprintf_r+0x110>
 8010f8e:	9207      	str	r2, [sp, #28]
 8010f90:	e014      	b.n	8010fbc <_svfiprintf_r+0x110>
 8010f92:	eba0 0308 	sub.w	r3, r0, r8
 8010f96:	fa09 f303 	lsl.w	r3, r9, r3
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	9304      	str	r3, [sp, #16]
 8010f9e:	46a2      	mov	sl, r4
 8010fa0:	e7d2      	b.n	8010f48 <_svfiprintf_r+0x9c>
 8010fa2:	9b03      	ldr	r3, [sp, #12]
 8010fa4:	1d19      	adds	r1, r3, #4
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	9103      	str	r1, [sp, #12]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	bfbb      	ittet	lt
 8010fae:	425b      	neglt	r3, r3
 8010fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8010fb4:	9307      	strge	r3, [sp, #28]
 8010fb6:	9307      	strlt	r3, [sp, #28]
 8010fb8:	bfb8      	it	lt
 8010fba:	9204      	strlt	r2, [sp, #16]
 8010fbc:	7823      	ldrb	r3, [r4, #0]
 8010fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8010fc0:	d10c      	bne.n	8010fdc <_svfiprintf_r+0x130>
 8010fc2:	7863      	ldrb	r3, [r4, #1]
 8010fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8010fc6:	d134      	bne.n	8011032 <_svfiprintf_r+0x186>
 8010fc8:	9b03      	ldr	r3, [sp, #12]
 8010fca:	1d1a      	adds	r2, r3, #4
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	9203      	str	r2, [sp, #12]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	bfb8      	it	lt
 8010fd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010fd8:	3402      	adds	r4, #2
 8010fda:	9305      	str	r3, [sp, #20]
 8010fdc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80110a4 <_svfiprintf_r+0x1f8>
 8010fe0:	7821      	ldrb	r1, [r4, #0]
 8010fe2:	2203      	movs	r2, #3
 8010fe4:	4650      	mov	r0, sl
 8010fe6:	f7ef f92b 	bl	8000240 <memchr>
 8010fea:	b138      	cbz	r0, 8010ffc <_svfiprintf_r+0x150>
 8010fec:	9b04      	ldr	r3, [sp, #16]
 8010fee:	eba0 000a 	sub.w	r0, r0, sl
 8010ff2:	2240      	movs	r2, #64	; 0x40
 8010ff4:	4082      	lsls	r2, r0
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	3401      	adds	r4, #1
 8010ffa:	9304      	str	r3, [sp, #16]
 8010ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011000:	4825      	ldr	r0, [pc, #148]	; (8011098 <_svfiprintf_r+0x1ec>)
 8011002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011006:	2206      	movs	r2, #6
 8011008:	f7ef f91a 	bl	8000240 <memchr>
 801100c:	2800      	cmp	r0, #0
 801100e:	d038      	beq.n	8011082 <_svfiprintf_r+0x1d6>
 8011010:	4b22      	ldr	r3, [pc, #136]	; (801109c <_svfiprintf_r+0x1f0>)
 8011012:	bb1b      	cbnz	r3, 801105c <_svfiprintf_r+0x1b0>
 8011014:	9b03      	ldr	r3, [sp, #12]
 8011016:	3307      	adds	r3, #7
 8011018:	f023 0307 	bic.w	r3, r3, #7
 801101c:	3308      	adds	r3, #8
 801101e:	9303      	str	r3, [sp, #12]
 8011020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011022:	4433      	add	r3, r6
 8011024:	9309      	str	r3, [sp, #36]	; 0x24
 8011026:	e768      	b.n	8010efa <_svfiprintf_r+0x4e>
 8011028:	fb0c 3202 	mla	r2, ip, r2, r3
 801102c:	460c      	mov	r4, r1
 801102e:	2001      	movs	r0, #1
 8011030:	e7a6      	b.n	8010f80 <_svfiprintf_r+0xd4>
 8011032:	2300      	movs	r3, #0
 8011034:	3401      	adds	r4, #1
 8011036:	9305      	str	r3, [sp, #20]
 8011038:	4619      	mov	r1, r3
 801103a:	f04f 0c0a 	mov.w	ip, #10
 801103e:	4620      	mov	r0, r4
 8011040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011044:	3a30      	subs	r2, #48	; 0x30
 8011046:	2a09      	cmp	r2, #9
 8011048:	d903      	bls.n	8011052 <_svfiprintf_r+0x1a6>
 801104a:	2b00      	cmp	r3, #0
 801104c:	d0c6      	beq.n	8010fdc <_svfiprintf_r+0x130>
 801104e:	9105      	str	r1, [sp, #20]
 8011050:	e7c4      	b.n	8010fdc <_svfiprintf_r+0x130>
 8011052:	fb0c 2101 	mla	r1, ip, r1, r2
 8011056:	4604      	mov	r4, r0
 8011058:	2301      	movs	r3, #1
 801105a:	e7f0      	b.n	801103e <_svfiprintf_r+0x192>
 801105c:	ab03      	add	r3, sp, #12
 801105e:	9300      	str	r3, [sp, #0]
 8011060:	462a      	mov	r2, r5
 8011062:	4b0f      	ldr	r3, [pc, #60]	; (80110a0 <_svfiprintf_r+0x1f4>)
 8011064:	a904      	add	r1, sp, #16
 8011066:	4638      	mov	r0, r7
 8011068:	f3af 8000 	nop.w
 801106c:	1c42      	adds	r2, r0, #1
 801106e:	4606      	mov	r6, r0
 8011070:	d1d6      	bne.n	8011020 <_svfiprintf_r+0x174>
 8011072:	89ab      	ldrh	r3, [r5, #12]
 8011074:	065b      	lsls	r3, r3, #25
 8011076:	f53f af2d 	bmi.w	8010ed4 <_svfiprintf_r+0x28>
 801107a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801107c:	b01d      	add	sp, #116	; 0x74
 801107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011082:	ab03      	add	r3, sp, #12
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	462a      	mov	r2, r5
 8011088:	4b05      	ldr	r3, [pc, #20]	; (80110a0 <_svfiprintf_r+0x1f4>)
 801108a:	a904      	add	r1, sp, #16
 801108c:	4638      	mov	r0, r7
 801108e:	f000 f9bd 	bl	801140c <_printf_i>
 8011092:	e7eb      	b.n	801106c <_svfiprintf_r+0x1c0>
 8011094:	08012410 	.word	0x08012410
 8011098:	0801241a 	.word	0x0801241a
 801109c:	00000000 	.word	0x00000000
 80110a0:	08010df9 	.word	0x08010df9
 80110a4:	08012416 	.word	0x08012416

080110a8 <__sfputc_r>:
 80110a8:	6893      	ldr	r3, [r2, #8]
 80110aa:	3b01      	subs	r3, #1
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	b410      	push	{r4}
 80110b0:	6093      	str	r3, [r2, #8]
 80110b2:	da08      	bge.n	80110c6 <__sfputc_r+0x1e>
 80110b4:	6994      	ldr	r4, [r2, #24]
 80110b6:	42a3      	cmp	r3, r4
 80110b8:	db01      	blt.n	80110be <__sfputc_r+0x16>
 80110ba:	290a      	cmp	r1, #10
 80110bc:	d103      	bne.n	80110c6 <__sfputc_r+0x1e>
 80110be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110c2:	f000 bbe5 	b.w	8011890 <__swbuf_r>
 80110c6:	6813      	ldr	r3, [r2, #0]
 80110c8:	1c58      	adds	r0, r3, #1
 80110ca:	6010      	str	r0, [r2, #0]
 80110cc:	7019      	strb	r1, [r3, #0]
 80110ce:	4608      	mov	r0, r1
 80110d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110d4:	4770      	bx	lr

080110d6 <__sfputs_r>:
 80110d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110d8:	4606      	mov	r6, r0
 80110da:	460f      	mov	r7, r1
 80110dc:	4614      	mov	r4, r2
 80110de:	18d5      	adds	r5, r2, r3
 80110e0:	42ac      	cmp	r4, r5
 80110e2:	d101      	bne.n	80110e8 <__sfputs_r+0x12>
 80110e4:	2000      	movs	r0, #0
 80110e6:	e007      	b.n	80110f8 <__sfputs_r+0x22>
 80110e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ec:	463a      	mov	r2, r7
 80110ee:	4630      	mov	r0, r6
 80110f0:	f7ff ffda 	bl	80110a8 <__sfputc_r>
 80110f4:	1c43      	adds	r3, r0, #1
 80110f6:	d1f3      	bne.n	80110e0 <__sfputs_r+0xa>
 80110f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110fc <_vfiprintf_r>:
 80110fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011100:	460d      	mov	r5, r1
 8011102:	b09d      	sub	sp, #116	; 0x74
 8011104:	4614      	mov	r4, r2
 8011106:	4698      	mov	r8, r3
 8011108:	4606      	mov	r6, r0
 801110a:	b118      	cbz	r0, 8011114 <_vfiprintf_r+0x18>
 801110c:	6a03      	ldr	r3, [r0, #32]
 801110e:	b90b      	cbnz	r3, 8011114 <_vfiprintf_r+0x18>
 8011110:	f7ff fd2c 	bl	8010b6c <__sinit>
 8011114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011116:	07d9      	lsls	r1, r3, #31
 8011118:	d405      	bmi.n	8011126 <_vfiprintf_r+0x2a>
 801111a:	89ab      	ldrh	r3, [r5, #12]
 801111c:	059a      	lsls	r2, r3, #22
 801111e:	d402      	bmi.n	8011126 <_vfiprintf_r+0x2a>
 8011120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011122:	f7ff fe1a 	bl	8010d5a <__retarget_lock_acquire_recursive>
 8011126:	89ab      	ldrh	r3, [r5, #12]
 8011128:	071b      	lsls	r3, r3, #28
 801112a:	d501      	bpl.n	8011130 <_vfiprintf_r+0x34>
 801112c:	692b      	ldr	r3, [r5, #16]
 801112e:	b99b      	cbnz	r3, 8011158 <_vfiprintf_r+0x5c>
 8011130:	4629      	mov	r1, r5
 8011132:	4630      	mov	r0, r6
 8011134:	f000 fbea 	bl	801190c <__swsetup_r>
 8011138:	b170      	cbz	r0, 8011158 <_vfiprintf_r+0x5c>
 801113a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801113c:	07dc      	lsls	r4, r3, #31
 801113e:	d504      	bpl.n	801114a <_vfiprintf_r+0x4e>
 8011140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011144:	b01d      	add	sp, #116	; 0x74
 8011146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801114a:	89ab      	ldrh	r3, [r5, #12]
 801114c:	0598      	lsls	r0, r3, #22
 801114e:	d4f7      	bmi.n	8011140 <_vfiprintf_r+0x44>
 8011150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011152:	f7ff fe03 	bl	8010d5c <__retarget_lock_release_recursive>
 8011156:	e7f3      	b.n	8011140 <_vfiprintf_r+0x44>
 8011158:	2300      	movs	r3, #0
 801115a:	9309      	str	r3, [sp, #36]	; 0x24
 801115c:	2320      	movs	r3, #32
 801115e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011162:	f8cd 800c 	str.w	r8, [sp, #12]
 8011166:	2330      	movs	r3, #48	; 0x30
 8011168:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801131c <_vfiprintf_r+0x220>
 801116c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011170:	f04f 0901 	mov.w	r9, #1
 8011174:	4623      	mov	r3, r4
 8011176:	469a      	mov	sl, r3
 8011178:	f813 2b01 	ldrb.w	r2, [r3], #1
 801117c:	b10a      	cbz	r2, 8011182 <_vfiprintf_r+0x86>
 801117e:	2a25      	cmp	r2, #37	; 0x25
 8011180:	d1f9      	bne.n	8011176 <_vfiprintf_r+0x7a>
 8011182:	ebba 0b04 	subs.w	fp, sl, r4
 8011186:	d00b      	beq.n	80111a0 <_vfiprintf_r+0xa4>
 8011188:	465b      	mov	r3, fp
 801118a:	4622      	mov	r2, r4
 801118c:	4629      	mov	r1, r5
 801118e:	4630      	mov	r0, r6
 8011190:	f7ff ffa1 	bl	80110d6 <__sfputs_r>
 8011194:	3001      	adds	r0, #1
 8011196:	f000 80a9 	beq.w	80112ec <_vfiprintf_r+0x1f0>
 801119a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801119c:	445a      	add	r2, fp
 801119e:	9209      	str	r2, [sp, #36]	; 0x24
 80111a0:	f89a 3000 	ldrb.w	r3, [sl]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 80a1 	beq.w	80112ec <_vfiprintf_r+0x1f0>
 80111aa:	2300      	movs	r3, #0
 80111ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80111b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111b4:	f10a 0a01 	add.w	sl, sl, #1
 80111b8:	9304      	str	r3, [sp, #16]
 80111ba:	9307      	str	r3, [sp, #28]
 80111bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111c0:	931a      	str	r3, [sp, #104]	; 0x68
 80111c2:	4654      	mov	r4, sl
 80111c4:	2205      	movs	r2, #5
 80111c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ca:	4854      	ldr	r0, [pc, #336]	; (801131c <_vfiprintf_r+0x220>)
 80111cc:	f7ef f838 	bl	8000240 <memchr>
 80111d0:	9a04      	ldr	r2, [sp, #16]
 80111d2:	b9d8      	cbnz	r0, 801120c <_vfiprintf_r+0x110>
 80111d4:	06d1      	lsls	r1, r2, #27
 80111d6:	bf44      	itt	mi
 80111d8:	2320      	movmi	r3, #32
 80111da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111de:	0713      	lsls	r3, r2, #28
 80111e0:	bf44      	itt	mi
 80111e2:	232b      	movmi	r3, #43	; 0x2b
 80111e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111e8:	f89a 3000 	ldrb.w	r3, [sl]
 80111ec:	2b2a      	cmp	r3, #42	; 0x2a
 80111ee:	d015      	beq.n	801121c <_vfiprintf_r+0x120>
 80111f0:	9a07      	ldr	r2, [sp, #28]
 80111f2:	4654      	mov	r4, sl
 80111f4:	2000      	movs	r0, #0
 80111f6:	f04f 0c0a 	mov.w	ip, #10
 80111fa:	4621      	mov	r1, r4
 80111fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011200:	3b30      	subs	r3, #48	; 0x30
 8011202:	2b09      	cmp	r3, #9
 8011204:	d94d      	bls.n	80112a2 <_vfiprintf_r+0x1a6>
 8011206:	b1b0      	cbz	r0, 8011236 <_vfiprintf_r+0x13a>
 8011208:	9207      	str	r2, [sp, #28]
 801120a:	e014      	b.n	8011236 <_vfiprintf_r+0x13a>
 801120c:	eba0 0308 	sub.w	r3, r0, r8
 8011210:	fa09 f303 	lsl.w	r3, r9, r3
 8011214:	4313      	orrs	r3, r2
 8011216:	9304      	str	r3, [sp, #16]
 8011218:	46a2      	mov	sl, r4
 801121a:	e7d2      	b.n	80111c2 <_vfiprintf_r+0xc6>
 801121c:	9b03      	ldr	r3, [sp, #12]
 801121e:	1d19      	adds	r1, r3, #4
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	9103      	str	r1, [sp, #12]
 8011224:	2b00      	cmp	r3, #0
 8011226:	bfbb      	ittet	lt
 8011228:	425b      	neglt	r3, r3
 801122a:	f042 0202 	orrlt.w	r2, r2, #2
 801122e:	9307      	strge	r3, [sp, #28]
 8011230:	9307      	strlt	r3, [sp, #28]
 8011232:	bfb8      	it	lt
 8011234:	9204      	strlt	r2, [sp, #16]
 8011236:	7823      	ldrb	r3, [r4, #0]
 8011238:	2b2e      	cmp	r3, #46	; 0x2e
 801123a:	d10c      	bne.n	8011256 <_vfiprintf_r+0x15a>
 801123c:	7863      	ldrb	r3, [r4, #1]
 801123e:	2b2a      	cmp	r3, #42	; 0x2a
 8011240:	d134      	bne.n	80112ac <_vfiprintf_r+0x1b0>
 8011242:	9b03      	ldr	r3, [sp, #12]
 8011244:	1d1a      	adds	r2, r3, #4
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	9203      	str	r2, [sp, #12]
 801124a:	2b00      	cmp	r3, #0
 801124c:	bfb8      	it	lt
 801124e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011252:	3402      	adds	r4, #2
 8011254:	9305      	str	r3, [sp, #20]
 8011256:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801132c <_vfiprintf_r+0x230>
 801125a:	7821      	ldrb	r1, [r4, #0]
 801125c:	2203      	movs	r2, #3
 801125e:	4650      	mov	r0, sl
 8011260:	f7ee ffee 	bl	8000240 <memchr>
 8011264:	b138      	cbz	r0, 8011276 <_vfiprintf_r+0x17a>
 8011266:	9b04      	ldr	r3, [sp, #16]
 8011268:	eba0 000a 	sub.w	r0, r0, sl
 801126c:	2240      	movs	r2, #64	; 0x40
 801126e:	4082      	lsls	r2, r0
 8011270:	4313      	orrs	r3, r2
 8011272:	3401      	adds	r4, #1
 8011274:	9304      	str	r3, [sp, #16]
 8011276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801127a:	4829      	ldr	r0, [pc, #164]	; (8011320 <_vfiprintf_r+0x224>)
 801127c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011280:	2206      	movs	r2, #6
 8011282:	f7ee ffdd 	bl	8000240 <memchr>
 8011286:	2800      	cmp	r0, #0
 8011288:	d03f      	beq.n	801130a <_vfiprintf_r+0x20e>
 801128a:	4b26      	ldr	r3, [pc, #152]	; (8011324 <_vfiprintf_r+0x228>)
 801128c:	bb1b      	cbnz	r3, 80112d6 <_vfiprintf_r+0x1da>
 801128e:	9b03      	ldr	r3, [sp, #12]
 8011290:	3307      	adds	r3, #7
 8011292:	f023 0307 	bic.w	r3, r3, #7
 8011296:	3308      	adds	r3, #8
 8011298:	9303      	str	r3, [sp, #12]
 801129a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801129c:	443b      	add	r3, r7
 801129e:	9309      	str	r3, [sp, #36]	; 0x24
 80112a0:	e768      	b.n	8011174 <_vfiprintf_r+0x78>
 80112a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80112a6:	460c      	mov	r4, r1
 80112a8:	2001      	movs	r0, #1
 80112aa:	e7a6      	b.n	80111fa <_vfiprintf_r+0xfe>
 80112ac:	2300      	movs	r3, #0
 80112ae:	3401      	adds	r4, #1
 80112b0:	9305      	str	r3, [sp, #20]
 80112b2:	4619      	mov	r1, r3
 80112b4:	f04f 0c0a 	mov.w	ip, #10
 80112b8:	4620      	mov	r0, r4
 80112ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112be:	3a30      	subs	r2, #48	; 0x30
 80112c0:	2a09      	cmp	r2, #9
 80112c2:	d903      	bls.n	80112cc <_vfiprintf_r+0x1d0>
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d0c6      	beq.n	8011256 <_vfiprintf_r+0x15a>
 80112c8:	9105      	str	r1, [sp, #20]
 80112ca:	e7c4      	b.n	8011256 <_vfiprintf_r+0x15a>
 80112cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80112d0:	4604      	mov	r4, r0
 80112d2:	2301      	movs	r3, #1
 80112d4:	e7f0      	b.n	80112b8 <_vfiprintf_r+0x1bc>
 80112d6:	ab03      	add	r3, sp, #12
 80112d8:	9300      	str	r3, [sp, #0]
 80112da:	462a      	mov	r2, r5
 80112dc:	4b12      	ldr	r3, [pc, #72]	; (8011328 <_vfiprintf_r+0x22c>)
 80112de:	a904      	add	r1, sp, #16
 80112e0:	4630      	mov	r0, r6
 80112e2:	f3af 8000 	nop.w
 80112e6:	4607      	mov	r7, r0
 80112e8:	1c78      	adds	r0, r7, #1
 80112ea:	d1d6      	bne.n	801129a <_vfiprintf_r+0x19e>
 80112ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112ee:	07d9      	lsls	r1, r3, #31
 80112f0:	d405      	bmi.n	80112fe <_vfiprintf_r+0x202>
 80112f2:	89ab      	ldrh	r3, [r5, #12]
 80112f4:	059a      	lsls	r2, r3, #22
 80112f6:	d402      	bmi.n	80112fe <_vfiprintf_r+0x202>
 80112f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112fa:	f7ff fd2f 	bl	8010d5c <__retarget_lock_release_recursive>
 80112fe:	89ab      	ldrh	r3, [r5, #12]
 8011300:	065b      	lsls	r3, r3, #25
 8011302:	f53f af1d 	bmi.w	8011140 <_vfiprintf_r+0x44>
 8011306:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011308:	e71c      	b.n	8011144 <_vfiprintf_r+0x48>
 801130a:	ab03      	add	r3, sp, #12
 801130c:	9300      	str	r3, [sp, #0]
 801130e:	462a      	mov	r2, r5
 8011310:	4b05      	ldr	r3, [pc, #20]	; (8011328 <_vfiprintf_r+0x22c>)
 8011312:	a904      	add	r1, sp, #16
 8011314:	4630      	mov	r0, r6
 8011316:	f000 f879 	bl	801140c <_printf_i>
 801131a:	e7e4      	b.n	80112e6 <_vfiprintf_r+0x1ea>
 801131c:	08012410 	.word	0x08012410
 8011320:	0801241a 	.word	0x0801241a
 8011324:	00000000 	.word	0x00000000
 8011328:	080110d7 	.word	0x080110d7
 801132c:	08012416 	.word	0x08012416

08011330 <_printf_common>:
 8011330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011334:	4616      	mov	r6, r2
 8011336:	4699      	mov	r9, r3
 8011338:	688a      	ldr	r2, [r1, #8]
 801133a:	690b      	ldr	r3, [r1, #16]
 801133c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011340:	4293      	cmp	r3, r2
 8011342:	bfb8      	it	lt
 8011344:	4613      	movlt	r3, r2
 8011346:	6033      	str	r3, [r6, #0]
 8011348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801134c:	4607      	mov	r7, r0
 801134e:	460c      	mov	r4, r1
 8011350:	b10a      	cbz	r2, 8011356 <_printf_common+0x26>
 8011352:	3301      	adds	r3, #1
 8011354:	6033      	str	r3, [r6, #0]
 8011356:	6823      	ldr	r3, [r4, #0]
 8011358:	0699      	lsls	r1, r3, #26
 801135a:	bf42      	ittt	mi
 801135c:	6833      	ldrmi	r3, [r6, #0]
 801135e:	3302      	addmi	r3, #2
 8011360:	6033      	strmi	r3, [r6, #0]
 8011362:	6825      	ldr	r5, [r4, #0]
 8011364:	f015 0506 	ands.w	r5, r5, #6
 8011368:	d106      	bne.n	8011378 <_printf_common+0x48>
 801136a:	f104 0a19 	add.w	sl, r4, #25
 801136e:	68e3      	ldr	r3, [r4, #12]
 8011370:	6832      	ldr	r2, [r6, #0]
 8011372:	1a9b      	subs	r3, r3, r2
 8011374:	42ab      	cmp	r3, r5
 8011376:	dc26      	bgt.n	80113c6 <_printf_common+0x96>
 8011378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801137c:	1e13      	subs	r3, r2, #0
 801137e:	6822      	ldr	r2, [r4, #0]
 8011380:	bf18      	it	ne
 8011382:	2301      	movne	r3, #1
 8011384:	0692      	lsls	r2, r2, #26
 8011386:	d42b      	bmi.n	80113e0 <_printf_common+0xb0>
 8011388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801138c:	4649      	mov	r1, r9
 801138e:	4638      	mov	r0, r7
 8011390:	47c0      	blx	r8
 8011392:	3001      	adds	r0, #1
 8011394:	d01e      	beq.n	80113d4 <_printf_common+0xa4>
 8011396:	6823      	ldr	r3, [r4, #0]
 8011398:	6922      	ldr	r2, [r4, #16]
 801139a:	f003 0306 	and.w	r3, r3, #6
 801139e:	2b04      	cmp	r3, #4
 80113a0:	bf02      	ittt	eq
 80113a2:	68e5      	ldreq	r5, [r4, #12]
 80113a4:	6833      	ldreq	r3, [r6, #0]
 80113a6:	1aed      	subeq	r5, r5, r3
 80113a8:	68a3      	ldr	r3, [r4, #8]
 80113aa:	bf0c      	ite	eq
 80113ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113b0:	2500      	movne	r5, #0
 80113b2:	4293      	cmp	r3, r2
 80113b4:	bfc4      	itt	gt
 80113b6:	1a9b      	subgt	r3, r3, r2
 80113b8:	18ed      	addgt	r5, r5, r3
 80113ba:	2600      	movs	r6, #0
 80113bc:	341a      	adds	r4, #26
 80113be:	42b5      	cmp	r5, r6
 80113c0:	d11a      	bne.n	80113f8 <_printf_common+0xc8>
 80113c2:	2000      	movs	r0, #0
 80113c4:	e008      	b.n	80113d8 <_printf_common+0xa8>
 80113c6:	2301      	movs	r3, #1
 80113c8:	4652      	mov	r2, sl
 80113ca:	4649      	mov	r1, r9
 80113cc:	4638      	mov	r0, r7
 80113ce:	47c0      	blx	r8
 80113d0:	3001      	adds	r0, #1
 80113d2:	d103      	bne.n	80113dc <_printf_common+0xac>
 80113d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113dc:	3501      	adds	r5, #1
 80113de:	e7c6      	b.n	801136e <_printf_common+0x3e>
 80113e0:	18e1      	adds	r1, r4, r3
 80113e2:	1c5a      	adds	r2, r3, #1
 80113e4:	2030      	movs	r0, #48	; 0x30
 80113e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113ea:	4422      	add	r2, r4
 80113ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113f4:	3302      	adds	r3, #2
 80113f6:	e7c7      	b.n	8011388 <_printf_common+0x58>
 80113f8:	2301      	movs	r3, #1
 80113fa:	4622      	mov	r2, r4
 80113fc:	4649      	mov	r1, r9
 80113fe:	4638      	mov	r0, r7
 8011400:	47c0      	blx	r8
 8011402:	3001      	adds	r0, #1
 8011404:	d0e6      	beq.n	80113d4 <_printf_common+0xa4>
 8011406:	3601      	adds	r6, #1
 8011408:	e7d9      	b.n	80113be <_printf_common+0x8e>
	...

0801140c <_printf_i>:
 801140c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011410:	7e0f      	ldrb	r7, [r1, #24]
 8011412:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011414:	2f78      	cmp	r7, #120	; 0x78
 8011416:	4691      	mov	r9, r2
 8011418:	4680      	mov	r8, r0
 801141a:	460c      	mov	r4, r1
 801141c:	469a      	mov	sl, r3
 801141e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011422:	d807      	bhi.n	8011434 <_printf_i+0x28>
 8011424:	2f62      	cmp	r7, #98	; 0x62
 8011426:	d80a      	bhi.n	801143e <_printf_i+0x32>
 8011428:	2f00      	cmp	r7, #0
 801142a:	f000 80d4 	beq.w	80115d6 <_printf_i+0x1ca>
 801142e:	2f58      	cmp	r7, #88	; 0x58
 8011430:	f000 80c0 	beq.w	80115b4 <_printf_i+0x1a8>
 8011434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801143c:	e03a      	b.n	80114b4 <_printf_i+0xa8>
 801143e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011442:	2b15      	cmp	r3, #21
 8011444:	d8f6      	bhi.n	8011434 <_printf_i+0x28>
 8011446:	a101      	add	r1, pc, #4	; (adr r1, 801144c <_printf_i+0x40>)
 8011448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801144c:	080114a5 	.word	0x080114a5
 8011450:	080114b9 	.word	0x080114b9
 8011454:	08011435 	.word	0x08011435
 8011458:	08011435 	.word	0x08011435
 801145c:	08011435 	.word	0x08011435
 8011460:	08011435 	.word	0x08011435
 8011464:	080114b9 	.word	0x080114b9
 8011468:	08011435 	.word	0x08011435
 801146c:	08011435 	.word	0x08011435
 8011470:	08011435 	.word	0x08011435
 8011474:	08011435 	.word	0x08011435
 8011478:	080115bd 	.word	0x080115bd
 801147c:	080114e5 	.word	0x080114e5
 8011480:	08011577 	.word	0x08011577
 8011484:	08011435 	.word	0x08011435
 8011488:	08011435 	.word	0x08011435
 801148c:	080115df 	.word	0x080115df
 8011490:	08011435 	.word	0x08011435
 8011494:	080114e5 	.word	0x080114e5
 8011498:	08011435 	.word	0x08011435
 801149c:	08011435 	.word	0x08011435
 80114a0:	0801157f 	.word	0x0801157f
 80114a4:	682b      	ldr	r3, [r5, #0]
 80114a6:	1d1a      	adds	r2, r3, #4
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	602a      	str	r2, [r5, #0]
 80114ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114b4:	2301      	movs	r3, #1
 80114b6:	e09f      	b.n	80115f8 <_printf_i+0x1ec>
 80114b8:	6820      	ldr	r0, [r4, #0]
 80114ba:	682b      	ldr	r3, [r5, #0]
 80114bc:	0607      	lsls	r7, r0, #24
 80114be:	f103 0104 	add.w	r1, r3, #4
 80114c2:	6029      	str	r1, [r5, #0]
 80114c4:	d501      	bpl.n	80114ca <_printf_i+0xbe>
 80114c6:	681e      	ldr	r6, [r3, #0]
 80114c8:	e003      	b.n	80114d2 <_printf_i+0xc6>
 80114ca:	0646      	lsls	r6, r0, #25
 80114cc:	d5fb      	bpl.n	80114c6 <_printf_i+0xba>
 80114ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80114d2:	2e00      	cmp	r6, #0
 80114d4:	da03      	bge.n	80114de <_printf_i+0xd2>
 80114d6:	232d      	movs	r3, #45	; 0x2d
 80114d8:	4276      	negs	r6, r6
 80114da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114de:	485a      	ldr	r0, [pc, #360]	; (8011648 <_printf_i+0x23c>)
 80114e0:	230a      	movs	r3, #10
 80114e2:	e012      	b.n	801150a <_printf_i+0xfe>
 80114e4:	682b      	ldr	r3, [r5, #0]
 80114e6:	6820      	ldr	r0, [r4, #0]
 80114e8:	1d19      	adds	r1, r3, #4
 80114ea:	6029      	str	r1, [r5, #0]
 80114ec:	0605      	lsls	r5, r0, #24
 80114ee:	d501      	bpl.n	80114f4 <_printf_i+0xe8>
 80114f0:	681e      	ldr	r6, [r3, #0]
 80114f2:	e002      	b.n	80114fa <_printf_i+0xee>
 80114f4:	0641      	lsls	r1, r0, #25
 80114f6:	d5fb      	bpl.n	80114f0 <_printf_i+0xe4>
 80114f8:	881e      	ldrh	r6, [r3, #0]
 80114fa:	4853      	ldr	r0, [pc, #332]	; (8011648 <_printf_i+0x23c>)
 80114fc:	2f6f      	cmp	r7, #111	; 0x6f
 80114fe:	bf0c      	ite	eq
 8011500:	2308      	moveq	r3, #8
 8011502:	230a      	movne	r3, #10
 8011504:	2100      	movs	r1, #0
 8011506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801150a:	6865      	ldr	r5, [r4, #4]
 801150c:	60a5      	str	r5, [r4, #8]
 801150e:	2d00      	cmp	r5, #0
 8011510:	bfa2      	ittt	ge
 8011512:	6821      	ldrge	r1, [r4, #0]
 8011514:	f021 0104 	bicge.w	r1, r1, #4
 8011518:	6021      	strge	r1, [r4, #0]
 801151a:	b90e      	cbnz	r6, 8011520 <_printf_i+0x114>
 801151c:	2d00      	cmp	r5, #0
 801151e:	d04b      	beq.n	80115b8 <_printf_i+0x1ac>
 8011520:	4615      	mov	r5, r2
 8011522:	fbb6 f1f3 	udiv	r1, r6, r3
 8011526:	fb03 6711 	mls	r7, r3, r1, r6
 801152a:	5dc7      	ldrb	r7, [r0, r7]
 801152c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011530:	4637      	mov	r7, r6
 8011532:	42bb      	cmp	r3, r7
 8011534:	460e      	mov	r6, r1
 8011536:	d9f4      	bls.n	8011522 <_printf_i+0x116>
 8011538:	2b08      	cmp	r3, #8
 801153a:	d10b      	bne.n	8011554 <_printf_i+0x148>
 801153c:	6823      	ldr	r3, [r4, #0]
 801153e:	07de      	lsls	r6, r3, #31
 8011540:	d508      	bpl.n	8011554 <_printf_i+0x148>
 8011542:	6923      	ldr	r3, [r4, #16]
 8011544:	6861      	ldr	r1, [r4, #4]
 8011546:	4299      	cmp	r1, r3
 8011548:	bfde      	ittt	le
 801154a:	2330      	movle	r3, #48	; 0x30
 801154c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011550:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011554:	1b52      	subs	r2, r2, r5
 8011556:	6122      	str	r2, [r4, #16]
 8011558:	f8cd a000 	str.w	sl, [sp]
 801155c:	464b      	mov	r3, r9
 801155e:	aa03      	add	r2, sp, #12
 8011560:	4621      	mov	r1, r4
 8011562:	4640      	mov	r0, r8
 8011564:	f7ff fee4 	bl	8011330 <_printf_common>
 8011568:	3001      	adds	r0, #1
 801156a:	d14a      	bne.n	8011602 <_printf_i+0x1f6>
 801156c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011570:	b004      	add	sp, #16
 8011572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011576:	6823      	ldr	r3, [r4, #0]
 8011578:	f043 0320 	orr.w	r3, r3, #32
 801157c:	6023      	str	r3, [r4, #0]
 801157e:	4833      	ldr	r0, [pc, #204]	; (801164c <_printf_i+0x240>)
 8011580:	2778      	movs	r7, #120	; 0x78
 8011582:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011586:	6823      	ldr	r3, [r4, #0]
 8011588:	6829      	ldr	r1, [r5, #0]
 801158a:	061f      	lsls	r7, r3, #24
 801158c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011590:	d402      	bmi.n	8011598 <_printf_i+0x18c>
 8011592:	065f      	lsls	r7, r3, #25
 8011594:	bf48      	it	mi
 8011596:	b2b6      	uxthmi	r6, r6
 8011598:	07df      	lsls	r7, r3, #31
 801159a:	bf48      	it	mi
 801159c:	f043 0320 	orrmi.w	r3, r3, #32
 80115a0:	6029      	str	r1, [r5, #0]
 80115a2:	bf48      	it	mi
 80115a4:	6023      	strmi	r3, [r4, #0]
 80115a6:	b91e      	cbnz	r6, 80115b0 <_printf_i+0x1a4>
 80115a8:	6823      	ldr	r3, [r4, #0]
 80115aa:	f023 0320 	bic.w	r3, r3, #32
 80115ae:	6023      	str	r3, [r4, #0]
 80115b0:	2310      	movs	r3, #16
 80115b2:	e7a7      	b.n	8011504 <_printf_i+0xf8>
 80115b4:	4824      	ldr	r0, [pc, #144]	; (8011648 <_printf_i+0x23c>)
 80115b6:	e7e4      	b.n	8011582 <_printf_i+0x176>
 80115b8:	4615      	mov	r5, r2
 80115ba:	e7bd      	b.n	8011538 <_printf_i+0x12c>
 80115bc:	682b      	ldr	r3, [r5, #0]
 80115be:	6826      	ldr	r6, [r4, #0]
 80115c0:	6961      	ldr	r1, [r4, #20]
 80115c2:	1d18      	adds	r0, r3, #4
 80115c4:	6028      	str	r0, [r5, #0]
 80115c6:	0635      	lsls	r5, r6, #24
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	d501      	bpl.n	80115d0 <_printf_i+0x1c4>
 80115cc:	6019      	str	r1, [r3, #0]
 80115ce:	e002      	b.n	80115d6 <_printf_i+0x1ca>
 80115d0:	0670      	lsls	r0, r6, #25
 80115d2:	d5fb      	bpl.n	80115cc <_printf_i+0x1c0>
 80115d4:	8019      	strh	r1, [r3, #0]
 80115d6:	2300      	movs	r3, #0
 80115d8:	6123      	str	r3, [r4, #16]
 80115da:	4615      	mov	r5, r2
 80115dc:	e7bc      	b.n	8011558 <_printf_i+0x14c>
 80115de:	682b      	ldr	r3, [r5, #0]
 80115e0:	1d1a      	adds	r2, r3, #4
 80115e2:	602a      	str	r2, [r5, #0]
 80115e4:	681d      	ldr	r5, [r3, #0]
 80115e6:	6862      	ldr	r2, [r4, #4]
 80115e8:	2100      	movs	r1, #0
 80115ea:	4628      	mov	r0, r5
 80115ec:	f7ee fe28 	bl	8000240 <memchr>
 80115f0:	b108      	cbz	r0, 80115f6 <_printf_i+0x1ea>
 80115f2:	1b40      	subs	r0, r0, r5
 80115f4:	6060      	str	r0, [r4, #4]
 80115f6:	6863      	ldr	r3, [r4, #4]
 80115f8:	6123      	str	r3, [r4, #16]
 80115fa:	2300      	movs	r3, #0
 80115fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011600:	e7aa      	b.n	8011558 <_printf_i+0x14c>
 8011602:	6923      	ldr	r3, [r4, #16]
 8011604:	462a      	mov	r2, r5
 8011606:	4649      	mov	r1, r9
 8011608:	4640      	mov	r0, r8
 801160a:	47d0      	blx	sl
 801160c:	3001      	adds	r0, #1
 801160e:	d0ad      	beq.n	801156c <_printf_i+0x160>
 8011610:	6823      	ldr	r3, [r4, #0]
 8011612:	079b      	lsls	r3, r3, #30
 8011614:	d413      	bmi.n	801163e <_printf_i+0x232>
 8011616:	68e0      	ldr	r0, [r4, #12]
 8011618:	9b03      	ldr	r3, [sp, #12]
 801161a:	4298      	cmp	r0, r3
 801161c:	bfb8      	it	lt
 801161e:	4618      	movlt	r0, r3
 8011620:	e7a6      	b.n	8011570 <_printf_i+0x164>
 8011622:	2301      	movs	r3, #1
 8011624:	4632      	mov	r2, r6
 8011626:	4649      	mov	r1, r9
 8011628:	4640      	mov	r0, r8
 801162a:	47d0      	blx	sl
 801162c:	3001      	adds	r0, #1
 801162e:	d09d      	beq.n	801156c <_printf_i+0x160>
 8011630:	3501      	adds	r5, #1
 8011632:	68e3      	ldr	r3, [r4, #12]
 8011634:	9903      	ldr	r1, [sp, #12]
 8011636:	1a5b      	subs	r3, r3, r1
 8011638:	42ab      	cmp	r3, r5
 801163a:	dcf2      	bgt.n	8011622 <_printf_i+0x216>
 801163c:	e7eb      	b.n	8011616 <_printf_i+0x20a>
 801163e:	2500      	movs	r5, #0
 8011640:	f104 0619 	add.w	r6, r4, #25
 8011644:	e7f5      	b.n	8011632 <_printf_i+0x226>
 8011646:	bf00      	nop
 8011648:	08012421 	.word	0x08012421
 801164c:	08012432 	.word	0x08012432

08011650 <__sflush_r>:
 8011650:	898a      	ldrh	r2, [r1, #12]
 8011652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011656:	4605      	mov	r5, r0
 8011658:	0710      	lsls	r0, r2, #28
 801165a:	460c      	mov	r4, r1
 801165c:	d458      	bmi.n	8011710 <__sflush_r+0xc0>
 801165e:	684b      	ldr	r3, [r1, #4]
 8011660:	2b00      	cmp	r3, #0
 8011662:	dc05      	bgt.n	8011670 <__sflush_r+0x20>
 8011664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011666:	2b00      	cmp	r3, #0
 8011668:	dc02      	bgt.n	8011670 <__sflush_r+0x20>
 801166a:	2000      	movs	r0, #0
 801166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011672:	2e00      	cmp	r6, #0
 8011674:	d0f9      	beq.n	801166a <__sflush_r+0x1a>
 8011676:	2300      	movs	r3, #0
 8011678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801167c:	682f      	ldr	r7, [r5, #0]
 801167e:	6a21      	ldr	r1, [r4, #32]
 8011680:	602b      	str	r3, [r5, #0]
 8011682:	d032      	beq.n	80116ea <__sflush_r+0x9a>
 8011684:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011686:	89a3      	ldrh	r3, [r4, #12]
 8011688:	075a      	lsls	r2, r3, #29
 801168a:	d505      	bpl.n	8011698 <__sflush_r+0x48>
 801168c:	6863      	ldr	r3, [r4, #4]
 801168e:	1ac0      	subs	r0, r0, r3
 8011690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011692:	b10b      	cbz	r3, 8011698 <__sflush_r+0x48>
 8011694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011696:	1ac0      	subs	r0, r0, r3
 8011698:	2300      	movs	r3, #0
 801169a:	4602      	mov	r2, r0
 801169c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801169e:	6a21      	ldr	r1, [r4, #32]
 80116a0:	4628      	mov	r0, r5
 80116a2:	47b0      	blx	r6
 80116a4:	1c43      	adds	r3, r0, #1
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	d106      	bne.n	80116b8 <__sflush_r+0x68>
 80116aa:	6829      	ldr	r1, [r5, #0]
 80116ac:	291d      	cmp	r1, #29
 80116ae:	d82b      	bhi.n	8011708 <__sflush_r+0xb8>
 80116b0:	4a29      	ldr	r2, [pc, #164]	; (8011758 <__sflush_r+0x108>)
 80116b2:	410a      	asrs	r2, r1
 80116b4:	07d6      	lsls	r6, r2, #31
 80116b6:	d427      	bmi.n	8011708 <__sflush_r+0xb8>
 80116b8:	2200      	movs	r2, #0
 80116ba:	6062      	str	r2, [r4, #4]
 80116bc:	04d9      	lsls	r1, r3, #19
 80116be:	6922      	ldr	r2, [r4, #16]
 80116c0:	6022      	str	r2, [r4, #0]
 80116c2:	d504      	bpl.n	80116ce <__sflush_r+0x7e>
 80116c4:	1c42      	adds	r2, r0, #1
 80116c6:	d101      	bne.n	80116cc <__sflush_r+0x7c>
 80116c8:	682b      	ldr	r3, [r5, #0]
 80116ca:	b903      	cbnz	r3, 80116ce <__sflush_r+0x7e>
 80116cc:	6560      	str	r0, [r4, #84]	; 0x54
 80116ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116d0:	602f      	str	r7, [r5, #0]
 80116d2:	2900      	cmp	r1, #0
 80116d4:	d0c9      	beq.n	801166a <__sflush_r+0x1a>
 80116d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116da:	4299      	cmp	r1, r3
 80116dc:	d002      	beq.n	80116e4 <__sflush_r+0x94>
 80116de:	4628      	mov	r0, r5
 80116e0:	f7ff fb3e 	bl	8010d60 <_free_r>
 80116e4:	2000      	movs	r0, #0
 80116e6:	6360      	str	r0, [r4, #52]	; 0x34
 80116e8:	e7c0      	b.n	801166c <__sflush_r+0x1c>
 80116ea:	2301      	movs	r3, #1
 80116ec:	4628      	mov	r0, r5
 80116ee:	47b0      	blx	r6
 80116f0:	1c41      	adds	r1, r0, #1
 80116f2:	d1c8      	bne.n	8011686 <__sflush_r+0x36>
 80116f4:	682b      	ldr	r3, [r5, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d0c5      	beq.n	8011686 <__sflush_r+0x36>
 80116fa:	2b1d      	cmp	r3, #29
 80116fc:	d001      	beq.n	8011702 <__sflush_r+0xb2>
 80116fe:	2b16      	cmp	r3, #22
 8011700:	d101      	bne.n	8011706 <__sflush_r+0xb6>
 8011702:	602f      	str	r7, [r5, #0]
 8011704:	e7b1      	b.n	801166a <__sflush_r+0x1a>
 8011706:	89a3      	ldrh	r3, [r4, #12]
 8011708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801170c:	81a3      	strh	r3, [r4, #12]
 801170e:	e7ad      	b.n	801166c <__sflush_r+0x1c>
 8011710:	690f      	ldr	r7, [r1, #16]
 8011712:	2f00      	cmp	r7, #0
 8011714:	d0a9      	beq.n	801166a <__sflush_r+0x1a>
 8011716:	0793      	lsls	r3, r2, #30
 8011718:	680e      	ldr	r6, [r1, #0]
 801171a:	bf08      	it	eq
 801171c:	694b      	ldreq	r3, [r1, #20]
 801171e:	600f      	str	r7, [r1, #0]
 8011720:	bf18      	it	ne
 8011722:	2300      	movne	r3, #0
 8011724:	eba6 0807 	sub.w	r8, r6, r7
 8011728:	608b      	str	r3, [r1, #8]
 801172a:	f1b8 0f00 	cmp.w	r8, #0
 801172e:	dd9c      	ble.n	801166a <__sflush_r+0x1a>
 8011730:	6a21      	ldr	r1, [r4, #32]
 8011732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011734:	4643      	mov	r3, r8
 8011736:	463a      	mov	r2, r7
 8011738:	4628      	mov	r0, r5
 801173a:	47b0      	blx	r6
 801173c:	2800      	cmp	r0, #0
 801173e:	dc06      	bgt.n	801174e <__sflush_r+0xfe>
 8011740:	89a3      	ldrh	r3, [r4, #12]
 8011742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011746:	81a3      	strh	r3, [r4, #12]
 8011748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801174c:	e78e      	b.n	801166c <__sflush_r+0x1c>
 801174e:	4407      	add	r7, r0
 8011750:	eba8 0800 	sub.w	r8, r8, r0
 8011754:	e7e9      	b.n	801172a <__sflush_r+0xda>
 8011756:	bf00      	nop
 8011758:	dfbffffe 	.word	0xdfbffffe

0801175c <_fflush_r>:
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	690b      	ldr	r3, [r1, #16]
 8011760:	4605      	mov	r5, r0
 8011762:	460c      	mov	r4, r1
 8011764:	b913      	cbnz	r3, 801176c <_fflush_r+0x10>
 8011766:	2500      	movs	r5, #0
 8011768:	4628      	mov	r0, r5
 801176a:	bd38      	pop	{r3, r4, r5, pc}
 801176c:	b118      	cbz	r0, 8011776 <_fflush_r+0x1a>
 801176e:	6a03      	ldr	r3, [r0, #32]
 8011770:	b90b      	cbnz	r3, 8011776 <_fflush_r+0x1a>
 8011772:	f7ff f9fb 	bl	8010b6c <__sinit>
 8011776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d0f3      	beq.n	8011766 <_fflush_r+0xa>
 801177e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011780:	07d0      	lsls	r0, r2, #31
 8011782:	d404      	bmi.n	801178e <_fflush_r+0x32>
 8011784:	0599      	lsls	r1, r3, #22
 8011786:	d402      	bmi.n	801178e <_fflush_r+0x32>
 8011788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801178a:	f7ff fae6 	bl	8010d5a <__retarget_lock_acquire_recursive>
 801178e:	4628      	mov	r0, r5
 8011790:	4621      	mov	r1, r4
 8011792:	f7ff ff5d 	bl	8011650 <__sflush_r>
 8011796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011798:	07da      	lsls	r2, r3, #31
 801179a:	4605      	mov	r5, r0
 801179c:	d4e4      	bmi.n	8011768 <_fflush_r+0xc>
 801179e:	89a3      	ldrh	r3, [r4, #12]
 80117a0:	059b      	lsls	r3, r3, #22
 80117a2:	d4e1      	bmi.n	8011768 <_fflush_r+0xc>
 80117a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117a6:	f7ff fad9 	bl	8010d5c <__retarget_lock_release_recursive>
 80117aa:	e7dd      	b.n	8011768 <_fflush_r+0xc>

080117ac <__sread>:
 80117ac:	b510      	push	{r4, lr}
 80117ae:	460c      	mov	r4, r1
 80117b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117b4:	f000 f9c2 	bl	8011b3c <_read_r>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	bfab      	itete	ge
 80117bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80117be:	89a3      	ldrhlt	r3, [r4, #12]
 80117c0:	181b      	addge	r3, r3, r0
 80117c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117c6:	bfac      	ite	ge
 80117c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80117ca:	81a3      	strhlt	r3, [r4, #12]
 80117cc:	bd10      	pop	{r4, pc}

080117ce <__swrite>:
 80117ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d2:	461f      	mov	r7, r3
 80117d4:	898b      	ldrh	r3, [r1, #12]
 80117d6:	05db      	lsls	r3, r3, #23
 80117d8:	4605      	mov	r5, r0
 80117da:	460c      	mov	r4, r1
 80117dc:	4616      	mov	r6, r2
 80117de:	d505      	bpl.n	80117ec <__swrite+0x1e>
 80117e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117e4:	2302      	movs	r3, #2
 80117e6:	2200      	movs	r2, #0
 80117e8:	f000 f996 	bl	8011b18 <_lseek_r>
 80117ec:	89a3      	ldrh	r3, [r4, #12]
 80117ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117f6:	81a3      	strh	r3, [r4, #12]
 80117f8:	4632      	mov	r2, r6
 80117fa:	463b      	mov	r3, r7
 80117fc:	4628      	mov	r0, r5
 80117fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011802:	f000 b9ad 	b.w	8011b60 <_write_r>

08011806 <__sseek>:
 8011806:	b510      	push	{r4, lr}
 8011808:	460c      	mov	r4, r1
 801180a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801180e:	f000 f983 	bl	8011b18 <_lseek_r>
 8011812:	1c43      	adds	r3, r0, #1
 8011814:	89a3      	ldrh	r3, [r4, #12]
 8011816:	bf15      	itete	ne
 8011818:	6560      	strne	r0, [r4, #84]	; 0x54
 801181a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801181e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011822:	81a3      	strheq	r3, [r4, #12]
 8011824:	bf18      	it	ne
 8011826:	81a3      	strhne	r3, [r4, #12]
 8011828:	bd10      	pop	{r4, pc}

0801182a <__sclose>:
 801182a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801182e:	f000 b941 	b.w	8011ab4 <_close_r>

08011832 <_realloc_r>:
 8011832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011836:	4680      	mov	r8, r0
 8011838:	4614      	mov	r4, r2
 801183a:	460e      	mov	r6, r1
 801183c:	b921      	cbnz	r1, 8011848 <_realloc_r+0x16>
 801183e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011842:	4611      	mov	r1, r2
 8011844:	f7ff b846 	b.w	80108d4 <_malloc_r>
 8011848:	b92a      	cbnz	r2, 8011856 <_realloc_r+0x24>
 801184a:	f7ff fa89 	bl	8010d60 <_free_r>
 801184e:	4625      	mov	r5, r4
 8011850:	4628      	mov	r0, r5
 8011852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011856:	f000 f9a3 	bl	8011ba0 <_malloc_usable_size_r>
 801185a:	4284      	cmp	r4, r0
 801185c:	4607      	mov	r7, r0
 801185e:	d802      	bhi.n	8011866 <_realloc_r+0x34>
 8011860:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011864:	d812      	bhi.n	801188c <_realloc_r+0x5a>
 8011866:	4621      	mov	r1, r4
 8011868:	4640      	mov	r0, r8
 801186a:	f7ff f833 	bl	80108d4 <_malloc_r>
 801186e:	4605      	mov	r5, r0
 8011870:	2800      	cmp	r0, #0
 8011872:	d0ed      	beq.n	8011850 <_realloc_r+0x1e>
 8011874:	42bc      	cmp	r4, r7
 8011876:	4622      	mov	r2, r4
 8011878:	4631      	mov	r1, r6
 801187a:	bf28      	it	cs
 801187c:	463a      	movcs	r2, r7
 801187e:	f000 f981 	bl	8011b84 <memcpy>
 8011882:	4631      	mov	r1, r6
 8011884:	4640      	mov	r0, r8
 8011886:	f7ff fa6b 	bl	8010d60 <_free_r>
 801188a:	e7e1      	b.n	8011850 <_realloc_r+0x1e>
 801188c:	4635      	mov	r5, r6
 801188e:	e7df      	b.n	8011850 <_realloc_r+0x1e>

08011890 <__swbuf_r>:
 8011890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011892:	460e      	mov	r6, r1
 8011894:	4614      	mov	r4, r2
 8011896:	4605      	mov	r5, r0
 8011898:	b118      	cbz	r0, 80118a2 <__swbuf_r+0x12>
 801189a:	6a03      	ldr	r3, [r0, #32]
 801189c:	b90b      	cbnz	r3, 80118a2 <__swbuf_r+0x12>
 801189e:	f7ff f965 	bl	8010b6c <__sinit>
 80118a2:	69a3      	ldr	r3, [r4, #24]
 80118a4:	60a3      	str	r3, [r4, #8]
 80118a6:	89a3      	ldrh	r3, [r4, #12]
 80118a8:	071a      	lsls	r2, r3, #28
 80118aa:	d525      	bpl.n	80118f8 <__swbuf_r+0x68>
 80118ac:	6923      	ldr	r3, [r4, #16]
 80118ae:	b31b      	cbz	r3, 80118f8 <__swbuf_r+0x68>
 80118b0:	6823      	ldr	r3, [r4, #0]
 80118b2:	6922      	ldr	r2, [r4, #16]
 80118b4:	1a98      	subs	r0, r3, r2
 80118b6:	6963      	ldr	r3, [r4, #20]
 80118b8:	b2f6      	uxtb	r6, r6
 80118ba:	4283      	cmp	r3, r0
 80118bc:	4637      	mov	r7, r6
 80118be:	dc04      	bgt.n	80118ca <__swbuf_r+0x3a>
 80118c0:	4621      	mov	r1, r4
 80118c2:	4628      	mov	r0, r5
 80118c4:	f7ff ff4a 	bl	801175c <_fflush_r>
 80118c8:	b9e0      	cbnz	r0, 8011904 <__swbuf_r+0x74>
 80118ca:	68a3      	ldr	r3, [r4, #8]
 80118cc:	3b01      	subs	r3, #1
 80118ce:	60a3      	str	r3, [r4, #8]
 80118d0:	6823      	ldr	r3, [r4, #0]
 80118d2:	1c5a      	adds	r2, r3, #1
 80118d4:	6022      	str	r2, [r4, #0]
 80118d6:	701e      	strb	r6, [r3, #0]
 80118d8:	6962      	ldr	r2, [r4, #20]
 80118da:	1c43      	adds	r3, r0, #1
 80118dc:	429a      	cmp	r2, r3
 80118de:	d004      	beq.n	80118ea <__swbuf_r+0x5a>
 80118e0:	89a3      	ldrh	r3, [r4, #12]
 80118e2:	07db      	lsls	r3, r3, #31
 80118e4:	d506      	bpl.n	80118f4 <__swbuf_r+0x64>
 80118e6:	2e0a      	cmp	r6, #10
 80118e8:	d104      	bne.n	80118f4 <__swbuf_r+0x64>
 80118ea:	4621      	mov	r1, r4
 80118ec:	4628      	mov	r0, r5
 80118ee:	f7ff ff35 	bl	801175c <_fflush_r>
 80118f2:	b938      	cbnz	r0, 8011904 <__swbuf_r+0x74>
 80118f4:	4638      	mov	r0, r7
 80118f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118f8:	4621      	mov	r1, r4
 80118fa:	4628      	mov	r0, r5
 80118fc:	f000 f806 	bl	801190c <__swsetup_r>
 8011900:	2800      	cmp	r0, #0
 8011902:	d0d5      	beq.n	80118b0 <__swbuf_r+0x20>
 8011904:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011908:	e7f4      	b.n	80118f4 <__swbuf_r+0x64>
	...

0801190c <__swsetup_r>:
 801190c:	b538      	push	{r3, r4, r5, lr}
 801190e:	4b2a      	ldr	r3, [pc, #168]	; (80119b8 <__swsetup_r+0xac>)
 8011910:	4605      	mov	r5, r0
 8011912:	6818      	ldr	r0, [r3, #0]
 8011914:	460c      	mov	r4, r1
 8011916:	b118      	cbz	r0, 8011920 <__swsetup_r+0x14>
 8011918:	6a03      	ldr	r3, [r0, #32]
 801191a:	b90b      	cbnz	r3, 8011920 <__swsetup_r+0x14>
 801191c:	f7ff f926 	bl	8010b6c <__sinit>
 8011920:	89a3      	ldrh	r3, [r4, #12]
 8011922:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011926:	0718      	lsls	r0, r3, #28
 8011928:	d422      	bmi.n	8011970 <__swsetup_r+0x64>
 801192a:	06d9      	lsls	r1, r3, #27
 801192c:	d407      	bmi.n	801193e <__swsetup_r+0x32>
 801192e:	2309      	movs	r3, #9
 8011930:	602b      	str	r3, [r5, #0]
 8011932:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011936:	81a3      	strh	r3, [r4, #12]
 8011938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801193c:	e034      	b.n	80119a8 <__swsetup_r+0x9c>
 801193e:	0758      	lsls	r0, r3, #29
 8011940:	d512      	bpl.n	8011968 <__swsetup_r+0x5c>
 8011942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011944:	b141      	cbz	r1, 8011958 <__swsetup_r+0x4c>
 8011946:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801194a:	4299      	cmp	r1, r3
 801194c:	d002      	beq.n	8011954 <__swsetup_r+0x48>
 801194e:	4628      	mov	r0, r5
 8011950:	f7ff fa06 	bl	8010d60 <_free_r>
 8011954:	2300      	movs	r3, #0
 8011956:	6363      	str	r3, [r4, #52]	; 0x34
 8011958:	89a3      	ldrh	r3, [r4, #12]
 801195a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801195e:	81a3      	strh	r3, [r4, #12]
 8011960:	2300      	movs	r3, #0
 8011962:	6063      	str	r3, [r4, #4]
 8011964:	6923      	ldr	r3, [r4, #16]
 8011966:	6023      	str	r3, [r4, #0]
 8011968:	89a3      	ldrh	r3, [r4, #12]
 801196a:	f043 0308 	orr.w	r3, r3, #8
 801196e:	81a3      	strh	r3, [r4, #12]
 8011970:	6923      	ldr	r3, [r4, #16]
 8011972:	b94b      	cbnz	r3, 8011988 <__swsetup_r+0x7c>
 8011974:	89a3      	ldrh	r3, [r4, #12]
 8011976:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801197a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801197e:	d003      	beq.n	8011988 <__swsetup_r+0x7c>
 8011980:	4621      	mov	r1, r4
 8011982:	4628      	mov	r0, r5
 8011984:	f000 f840 	bl	8011a08 <__smakebuf_r>
 8011988:	89a0      	ldrh	r0, [r4, #12]
 801198a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801198e:	f010 0301 	ands.w	r3, r0, #1
 8011992:	d00a      	beq.n	80119aa <__swsetup_r+0x9e>
 8011994:	2300      	movs	r3, #0
 8011996:	60a3      	str	r3, [r4, #8]
 8011998:	6963      	ldr	r3, [r4, #20]
 801199a:	425b      	negs	r3, r3
 801199c:	61a3      	str	r3, [r4, #24]
 801199e:	6923      	ldr	r3, [r4, #16]
 80119a0:	b943      	cbnz	r3, 80119b4 <__swsetup_r+0xa8>
 80119a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119a6:	d1c4      	bne.n	8011932 <__swsetup_r+0x26>
 80119a8:	bd38      	pop	{r3, r4, r5, pc}
 80119aa:	0781      	lsls	r1, r0, #30
 80119ac:	bf58      	it	pl
 80119ae:	6963      	ldrpl	r3, [r4, #20]
 80119b0:	60a3      	str	r3, [r4, #8]
 80119b2:	e7f4      	b.n	801199e <__swsetup_r+0x92>
 80119b4:	2000      	movs	r0, #0
 80119b6:	e7f7      	b.n	80119a8 <__swsetup_r+0x9c>
 80119b8:	20000168 	.word	0x20000168

080119bc <__swhatbuf_r>:
 80119bc:	b570      	push	{r4, r5, r6, lr}
 80119be:	460c      	mov	r4, r1
 80119c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119c4:	2900      	cmp	r1, #0
 80119c6:	b096      	sub	sp, #88	; 0x58
 80119c8:	4615      	mov	r5, r2
 80119ca:	461e      	mov	r6, r3
 80119cc:	da0d      	bge.n	80119ea <__swhatbuf_r+0x2e>
 80119ce:	89a3      	ldrh	r3, [r4, #12]
 80119d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80119d4:	f04f 0100 	mov.w	r1, #0
 80119d8:	bf0c      	ite	eq
 80119da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80119de:	2340      	movne	r3, #64	; 0x40
 80119e0:	2000      	movs	r0, #0
 80119e2:	6031      	str	r1, [r6, #0]
 80119e4:	602b      	str	r3, [r5, #0]
 80119e6:	b016      	add	sp, #88	; 0x58
 80119e8:	bd70      	pop	{r4, r5, r6, pc}
 80119ea:	466a      	mov	r2, sp
 80119ec:	f000 f872 	bl	8011ad4 <_fstat_r>
 80119f0:	2800      	cmp	r0, #0
 80119f2:	dbec      	blt.n	80119ce <__swhatbuf_r+0x12>
 80119f4:	9901      	ldr	r1, [sp, #4]
 80119f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80119fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80119fe:	4259      	negs	r1, r3
 8011a00:	4159      	adcs	r1, r3
 8011a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a06:	e7eb      	b.n	80119e0 <__swhatbuf_r+0x24>

08011a08 <__smakebuf_r>:
 8011a08:	898b      	ldrh	r3, [r1, #12]
 8011a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a0c:	079d      	lsls	r5, r3, #30
 8011a0e:	4606      	mov	r6, r0
 8011a10:	460c      	mov	r4, r1
 8011a12:	d507      	bpl.n	8011a24 <__smakebuf_r+0x1c>
 8011a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a18:	6023      	str	r3, [r4, #0]
 8011a1a:	6123      	str	r3, [r4, #16]
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	6163      	str	r3, [r4, #20]
 8011a20:	b002      	add	sp, #8
 8011a22:	bd70      	pop	{r4, r5, r6, pc}
 8011a24:	ab01      	add	r3, sp, #4
 8011a26:	466a      	mov	r2, sp
 8011a28:	f7ff ffc8 	bl	80119bc <__swhatbuf_r>
 8011a2c:	9900      	ldr	r1, [sp, #0]
 8011a2e:	4605      	mov	r5, r0
 8011a30:	4630      	mov	r0, r6
 8011a32:	f7fe ff4f 	bl	80108d4 <_malloc_r>
 8011a36:	b948      	cbnz	r0, 8011a4c <__smakebuf_r+0x44>
 8011a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a3c:	059a      	lsls	r2, r3, #22
 8011a3e:	d4ef      	bmi.n	8011a20 <__smakebuf_r+0x18>
 8011a40:	f023 0303 	bic.w	r3, r3, #3
 8011a44:	f043 0302 	orr.w	r3, r3, #2
 8011a48:	81a3      	strh	r3, [r4, #12]
 8011a4a:	e7e3      	b.n	8011a14 <__smakebuf_r+0xc>
 8011a4c:	89a3      	ldrh	r3, [r4, #12]
 8011a4e:	6020      	str	r0, [r4, #0]
 8011a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a54:	81a3      	strh	r3, [r4, #12]
 8011a56:	9b00      	ldr	r3, [sp, #0]
 8011a58:	6163      	str	r3, [r4, #20]
 8011a5a:	9b01      	ldr	r3, [sp, #4]
 8011a5c:	6120      	str	r0, [r4, #16]
 8011a5e:	b15b      	cbz	r3, 8011a78 <__smakebuf_r+0x70>
 8011a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a64:	4630      	mov	r0, r6
 8011a66:	f000 f847 	bl	8011af8 <_isatty_r>
 8011a6a:	b128      	cbz	r0, 8011a78 <__smakebuf_r+0x70>
 8011a6c:	89a3      	ldrh	r3, [r4, #12]
 8011a6e:	f023 0303 	bic.w	r3, r3, #3
 8011a72:	f043 0301 	orr.w	r3, r3, #1
 8011a76:	81a3      	strh	r3, [r4, #12]
 8011a78:	89a3      	ldrh	r3, [r4, #12]
 8011a7a:	431d      	orrs	r5, r3
 8011a7c:	81a5      	strh	r5, [r4, #12]
 8011a7e:	e7cf      	b.n	8011a20 <__smakebuf_r+0x18>

08011a80 <memmove>:
 8011a80:	4288      	cmp	r0, r1
 8011a82:	b510      	push	{r4, lr}
 8011a84:	eb01 0402 	add.w	r4, r1, r2
 8011a88:	d902      	bls.n	8011a90 <memmove+0x10>
 8011a8a:	4284      	cmp	r4, r0
 8011a8c:	4623      	mov	r3, r4
 8011a8e:	d807      	bhi.n	8011aa0 <memmove+0x20>
 8011a90:	1e43      	subs	r3, r0, #1
 8011a92:	42a1      	cmp	r1, r4
 8011a94:	d008      	beq.n	8011aa8 <memmove+0x28>
 8011a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a9e:	e7f8      	b.n	8011a92 <memmove+0x12>
 8011aa0:	4402      	add	r2, r0
 8011aa2:	4601      	mov	r1, r0
 8011aa4:	428a      	cmp	r2, r1
 8011aa6:	d100      	bne.n	8011aaa <memmove+0x2a>
 8011aa8:	bd10      	pop	{r4, pc}
 8011aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ab2:	e7f7      	b.n	8011aa4 <memmove+0x24>

08011ab4 <_close_r>:
 8011ab4:	b538      	push	{r3, r4, r5, lr}
 8011ab6:	4d06      	ldr	r5, [pc, #24]	; (8011ad0 <_close_r+0x1c>)
 8011ab8:	2300      	movs	r3, #0
 8011aba:	4604      	mov	r4, r0
 8011abc:	4608      	mov	r0, r1
 8011abe:	602b      	str	r3, [r5, #0]
 8011ac0:	f7ef fed3 	bl	800186a <_close>
 8011ac4:	1c43      	adds	r3, r0, #1
 8011ac6:	d102      	bne.n	8011ace <_close_r+0x1a>
 8011ac8:	682b      	ldr	r3, [r5, #0]
 8011aca:	b103      	cbz	r3, 8011ace <_close_r+0x1a>
 8011acc:	6023      	str	r3, [r4, #0]
 8011ace:	bd38      	pop	{r3, r4, r5, pc}
 8011ad0:	200046ec 	.word	0x200046ec

08011ad4 <_fstat_r>:
 8011ad4:	b538      	push	{r3, r4, r5, lr}
 8011ad6:	4d07      	ldr	r5, [pc, #28]	; (8011af4 <_fstat_r+0x20>)
 8011ad8:	2300      	movs	r3, #0
 8011ada:	4604      	mov	r4, r0
 8011adc:	4608      	mov	r0, r1
 8011ade:	4611      	mov	r1, r2
 8011ae0:	602b      	str	r3, [r5, #0]
 8011ae2:	f7ef fece 	bl	8001882 <_fstat>
 8011ae6:	1c43      	adds	r3, r0, #1
 8011ae8:	d102      	bne.n	8011af0 <_fstat_r+0x1c>
 8011aea:	682b      	ldr	r3, [r5, #0]
 8011aec:	b103      	cbz	r3, 8011af0 <_fstat_r+0x1c>
 8011aee:	6023      	str	r3, [r4, #0]
 8011af0:	bd38      	pop	{r3, r4, r5, pc}
 8011af2:	bf00      	nop
 8011af4:	200046ec 	.word	0x200046ec

08011af8 <_isatty_r>:
 8011af8:	b538      	push	{r3, r4, r5, lr}
 8011afa:	4d06      	ldr	r5, [pc, #24]	; (8011b14 <_isatty_r+0x1c>)
 8011afc:	2300      	movs	r3, #0
 8011afe:	4604      	mov	r4, r0
 8011b00:	4608      	mov	r0, r1
 8011b02:	602b      	str	r3, [r5, #0]
 8011b04:	f7ef fecd 	bl	80018a2 <_isatty>
 8011b08:	1c43      	adds	r3, r0, #1
 8011b0a:	d102      	bne.n	8011b12 <_isatty_r+0x1a>
 8011b0c:	682b      	ldr	r3, [r5, #0]
 8011b0e:	b103      	cbz	r3, 8011b12 <_isatty_r+0x1a>
 8011b10:	6023      	str	r3, [r4, #0]
 8011b12:	bd38      	pop	{r3, r4, r5, pc}
 8011b14:	200046ec 	.word	0x200046ec

08011b18 <_lseek_r>:
 8011b18:	b538      	push	{r3, r4, r5, lr}
 8011b1a:	4d07      	ldr	r5, [pc, #28]	; (8011b38 <_lseek_r+0x20>)
 8011b1c:	4604      	mov	r4, r0
 8011b1e:	4608      	mov	r0, r1
 8011b20:	4611      	mov	r1, r2
 8011b22:	2200      	movs	r2, #0
 8011b24:	602a      	str	r2, [r5, #0]
 8011b26:	461a      	mov	r2, r3
 8011b28:	f7ef fec6 	bl	80018b8 <_lseek>
 8011b2c:	1c43      	adds	r3, r0, #1
 8011b2e:	d102      	bne.n	8011b36 <_lseek_r+0x1e>
 8011b30:	682b      	ldr	r3, [r5, #0]
 8011b32:	b103      	cbz	r3, 8011b36 <_lseek_r+0x1e>
 8011b34:	6023      	str	r3, [r4, #0]
 8011b36:	bd38      	pop	{r3, r4, r5, pc}
 8011b38:	200046ec 	.word	0x200046ec

08011b3c <_read_r>:
 8011b3c:	b538      	push	{r3, r4, r5, lr}
 8011b3e:	4d07      	ldr	r5, [pc, #28]	; (8011b5c <_read_r+0x20>)
 8011b40:	4604      	mov	r4, r0
 8011b42:	4608      	mov	r0, r1
 8011b44:	4611      	mov	r1, r2
 8011b46:	2200      	movs	r2, #0
 8011b48:	602a      	str	r2, [r5, #0]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	f7ef fe54 	bl	80017f8 <_read>
 8011b50:	1c43      	adds	r3, r0, #1
 8011b52:	d102      	bne.n	8011b5a <_read_r+0x1e>
 8011b54:	682b      	ldr	r3, [r5, #0]
 8011b56:	b103      	cbz	r3, 8011b5a <_read_r+0x1e>
 8011b58:	6023      	str	r3, [r4, #0]
 8011b5a:	bd38      	pop	{r3, r4, r5, pc}
 8011b5c:	200046ec 	.word	0x200046ec

08011b60 <_write_r>:
 8011b60:	b538      	push	{r3, r4, r5, lr}
 8011b62:	4d07      	ldr	r5, [pc, #28]	; (8011b80 <_write_r+0x20>)
 8011b64:	4604      	mov	r4, r0
 8011b66:	4608      	mov	r0, r1
 8011b68:	4611      	mov	r1, r2
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	602a      	str	r2, [r5, #0]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	f7ef fe5f 	bl	8001832 <_write>
 8011b74:	1c43      	adds	r3, r0, #1
 8011b76:	d102      	bne.n	8011b7e <_write_r+0x1e>
 8011b78:	682b      	ldr	r3, [r5, #0]
 8011b7a:	b103      	cbz	r3, 8011b7e <_write_r+0x1e>
 8011b7c:	6023      	str	r3, [r4, #0]
 8011b7e:	bd38      	pop	{r3, r4, r5, pc}
 8011b80:	200046ec 	.word	0x200046ec

08011b84 <memcpy>:
 8011b84:	440a      	add	r2, r1
 8011b86:	4291      	cmp	r1, r2
 8011b88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011b8c:	d100      	bne.n	8011b90 <memcpy+0xc>
 8011b8e:	4770      	bx	lr
 8011b90:	b510      	push	{r4, lr}
 8011b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b9a:	4291      	cmp	r1, r2
 8011b9c:	d1f9      	bne.n	8011b92 <memcpy+0xe>
 8011b9e:	bd10      	pop	{r4, pc}

08011ba0 <_malloc_usable_size_r>:
 8011ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ba4:	1f18      	subs	r0, r3, #4
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	bfbc      	itt	lt
 8011baa:	580b      	ldrlt	r3, [r1, r0]
 8011bac:	18c0      	addlt	r0, r0, r3
 8011bae:	4770      	bx	lr

08011bb0 <_init>:
 8011bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bb2:	bf00      	nop
 8011bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bb6:	bc08      	pop	{r3}
 8011bb8:	469e      	mov	lr, r3
 8011bba:	4770      	bx	lr

08011bbc <_fini>:
 8011bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bbe:	bf00      	nop
 8011bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bc2:	bc08      	pop	{r3}
 8011bc4:	469e      	mov	lr, r3
 8011bc6:	4770      	bx	lr
