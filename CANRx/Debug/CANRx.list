
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08009bcc  08009bcc  00019bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e20  08009e20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009e20  08009e20  00019e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e28  08009e28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e28  08009e28  00019e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026e4  20000070  08009ea0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002754  08009ea0  00022754  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c66  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000311b  00000000  00000000  00035d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00038e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aaf4  00000000  00000000  0003aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001699d  00000000  00000000  000659dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc4b6  00000000  00000000  0007c379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017882f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e48  00000000  00000000  00178880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08009bb4 	.word	0x08009bb4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08009bb4 	.word	0x08009bb4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e8:	f000 fe85 	bl	80012f6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ec:	f000 f8b8 	bl	8000760 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005f0:	f000 f9d2 	bl	8000998 <MX_GPIO_Init>
	MX_DMA_Init();
 80005f4:	f000 f9aa 	bl	800094c <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 80005f8:	f000 f952 	bl	80008a0 <MX_SDMMC1_SD_Init>
	MX_USART3_UART_Init();
 80005fc:	f000 f976 	bl	80008ec <MX_USART3_UART_Init>
	MX_FATFS_Init();
 8000600:	f005 ff76 	bl	80064f0 <MX_FATFS_Init>
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 1) != FR_OK) {
 8000604:	2201      	movs	r2, #1
 8000606:	4944      	ldr	r1, [pc, #272]	; (8000718 <main+0x134>)
 8000608:	4844      	ldr	r0, [pc, #272]	; (800071c <main+0x138>)
 800060a:	f007 fe39 	bl	8008280 <f_mount>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <main+0x3a>
		printf("\r\nMounting Failed!\r\n");
 8000614:	4842      	ldr	r0, [pc, #264]	; (8000720 <main+0x13c>)
 8000616:	f008 faa9 	bl	8008b6c <puts>
		Error_Handler();
 800061a:	f000 fb55 	bl	8000cc8 <Error_Handler>
	}
	printf("Mounting succeeded...\r\n");
 800061e:	4841      	ldr	r0, [pc, #260]	; (8000724 <main+0x140>)
 8000620:	f008 faa4 	bl	8008b6c <puts>

	//Open file for writing (Create)
	if (f_open(&SDFile, "CAN.log", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8000624:	220a      	movs	r2, #10
 8000626:	4940      	ldr	r1, [pc, #256]	; (8000728 <main+0x144>)
 8000628:	4840      	ldr	r0, [pc, #256]	; (800072c <main+0x148>)
 800062a:	f007 fe6f 	bl	800830c <f_open>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d004      	beq.n	800063e <main+0x5a>
		printf("\r\nOpen Failed!\r\n");
 8000634:	483e      	ldr	r0, [pc, #248]	; (8000730 <main+0x14c>)
 8000636:	f008 fa99 	bl	8008b6c <puts>
		Error_Handler();
 800063a:	f000 fb45 	bl	8000cc8 <Error_Handler>
	}
	printf("Starting new log...\r\n");
 800063e:	483d      	ldr	r0, [pc, #244]	; (8000734 <main+0x150>)
 8000640:	f008 fa94 	bl	8008b6c <puts>

	MX_CAN1_Init();
 8000644:	f000 f8f6 	bl	8000834 <MX_CAN1_Init>


	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan1);
 8000648:	483b      	ldr	r0, [pc, #236]	; (8000738 <main+0x154>)
 800064a:	f001 f8bd 	bl	80017c8 <HAL_CAN_Start>
	CAN_Filter_Config();
 800064e:	f000 fab9 	bl	8000bc4 <CAN_Filter_Config>

	printf("\r\nStart up succeeded!\r\n");
 8000652:	483a      	ldr	r0, [pc, #232]	; (800073c <main+0x158>)
 8000654:	f008 fa8a 	bl	8008b6c <puts>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	double_buffer[0][0] = '\00';
 8000658:	4b39      	ldr	r3, [pc, #228]	; (8000740 <main+0x15c>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	double_buffer[1][0] = '\00';
 800065e:	4b38      	ldr	r3, [pc, #224]	; (8000740 <main+0x15c>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2fa1 	strb.w	r2, [r3, #4001]	; 0xfa1
	double_buffer_fill_level[0] = 0;
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <main+0x160>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	double_buffer_fill_level[1] = 0;
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <main+0x160>)
 800066e:	2200      	movs	r2, #0
 8000670:	705a      	strb	r2, [r3, #1]
	filling_buffer = 0;
 8000672:	4b35      	ldr	r3, [pc, #212]	; (8000748 <main+0x164>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]

	while (buffer_emptyings < MAX_BUFFER_EMPTYINGS) {
		while (!buffer_filled);
 8000678:	bf00      	nop
 800067a:	4b34      	ldr	r3, [pc, #208]	; (800074c <main+0x168>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0fb      	beq.n	800067a <main+0x96>

		res = f_write(&SDFile, double_buffer[!filling_buffer],
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <main+0x164>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf0c      	ite	eq
 800068a:	2301      	moveq	r3, #1
 800068c:	2300      	movne	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	f640 73a1 	movw	r3, #4001	; 0xfa1
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	4a29      	ldr	r2, [pc, #164]	; (8000740 <main+0x15c>)
 800069c:	1899      	adds	r1, r3, r2
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <main+0x16c>)
 80006a0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80006a4:	4821      	ldr	r0, [pc, #132]	; (800072c <main+0x148>)
 80006a6:	f007 ffef 	bl	8008688 <f_write>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <main+0x170>)
 80006b0:	701a      	strb	r2, [r3, #0]
				ENCODED_CAN_SIZE_BYTES*CAN_MESSAGES_TO_BUFFER,
				(void*) &byteswritten);

		if ((byteswritten == 0) || (res != FR_OK)) {
 80006b2:	4b27      	ldr	r3, [pc, #156]	; (8000750 <main+0x16c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d003      	beq.n	80006c2 <main+0xde>
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <main+0x170>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d004      	beq.n	80006cc <main+0xe8>
			printf("\r\nWriting Failed!\r\n");
 80006c2:	4825      	ldr	r0, [pc, #148]	; (8000758 <main+0x174>)
 80006c4:	f008 fa52 	bl	8008b6c <puts>
			Error_Handler();
 80006c8:	f000 fafe 	bl	8000cc8 <Error_Handler>
		}

		buffer_emptyings++;
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <main+0x178>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <main+0x178>)
 80006d6:	701a      	strb	r2, [r3, #0]
		double_buffer[!filling_buffer][0] = '\00';
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <main+0x164>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	bf0c      	ite	eq
 80006e0:	2301      	moveq	r3, #1
 80006e2:	2300      	movne	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4619      	mov	r1, r3
 80006e8:	4a15      	ldr	r2, [pc, #84]	; (8000740 <main+0x15c>)
 80006ea:	f640 73a1 	movw	r3, #4001	; 0xfa1
 80006ee:	fb01 f303 	mul.w	r3, r1, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
		double_buffer_fill_level[!filling_buffer] = 0;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <main+0x164>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf0c      	ite	eq
 8000700:	2301      	moveq	r3, #1
 8000702:	2300      	movne	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	461a      	mov	r2, r3
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <main+0x160>)
 800070a:	2100      	movs	r1, #0
 800070c:	5499      	strb	r1, [r3, r2]
		buffer_filled = 0;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <main+0x168>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
		while (!buffer_filled);
 8000714:	e7b0      	b.n	8000678 <main+0x94>
 8000716:	bf00      	nop
 8000718:	200022a4 	.word	0x200022a4
 800071c:	200022a8 	.word	0x200022a8
 8000720:	08009bcc 	.word	0x08009bcc
 8000724:	08009be0 	.word	0x08009be0
 8000728:	08009bf8 	.word	0x08009bf8
 800072c:	200024d8 	.word	0x200024d8
 8000730:	08009c00 	.word	0x08009c00
 8000734:	08009c10 	.word	0x08009c10
 8000738:	2000008c 	.word	0x2000008c
 800073c:	08009c28 	.word	0x08009c28
 8000740:	2000034c 	.word	0x2000034c
 8000744:	20002290 	.word	0x20002290
 8000748:	20002292 	.word	0x20002292
 800074c:	20002294 	.word	0x20002294
 8000750:	20000324 	.word	0x20000324
 8000754:	20000280 	.word	0x20000280
 8000758:	08009c40 	.word	0x08009c40
 800075c:	20002293 	.word	0x20002293

08000760 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2234      	movs	r2, #52	; 0x34
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f008 f986 	bl	8008a80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000784:	f002 fa62 	bl	8002c4c <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	; (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007d8:	2304      	movs	r3, #4
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fa3f 	bl	8002c6c <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x98>
		Error_Handler();
 80007f4:	f000 fa68 	bl	8000cc8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2101      	movs	r1, #1
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fcd7 	bl	80031c8 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xc4>
		Error_Handler();
 8000820:	f000 fa52 	bl	8000cc8 <Error_Handler>
	}
}
 8000824:	bf00      	nop
 8000826:	3750      	adds	r7, #80	; 0x50
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_CAN1_Init+0x64>)
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <MX_CAN1_Init+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 3;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_CAN1_Init+0x64>)
 8000840:	2203      	movs	r2, #3
 8000842:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_CAN1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_CAN1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_CAN1_Init+0x64>)
 8000852:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000856:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_CAN1_Init+0x64>)
 800085a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800085e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_CAN1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_CAN1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_CAN1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_CAN1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_CAN1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_CAN1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_CAN1_Init+0x64>)
 8000886:	f000 fdb7 	bl	80013f8 <HAL_CAN_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_CAN1_Init+0x60>
		Error_Handler();
 8000890:	f000 fa1a 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000008c 	.word	0x2000008c
 800089c:	40006400 	.word	0x40006400

080008a0 <MX_SDMMC1_SD_Init>:
/**
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_SDMMC1_SD_Init+0x44>)
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <MX_SDMMC1_SD_Init+0x48>)
 80008a8:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_SDMMC1_SD_Init+0x44>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_SDMMC1_SD_Init+0x44>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_SDMMC1_SD_Init+0x44>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_SDMMC1_SD_Init+0x44>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_SDMMC1_SD_Init+0x44>)
 80008c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c8:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_SDMMC1_SD_Init+0x44>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_SDMMC1_SD_Init+0x44>)
 80008d2:	f003 fac7 	bl	8003e64 <HAL_SD_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 80008dc:	f000 f9f4 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE END SDMMC1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000b4 	.word	0x200000b4
 80008e8:	40012c00 	.word	0x40012c00

080008ec <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART3_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_USART3_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART3_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART3_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000930:	f004 fbc0 	bl	80050b4 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x52>
		Error_Handler();
 800093a:	f000 f9c5 	bl	8000cc8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200001f8 	.word	0x200001f8
 8000948:	40004800 	.word	0x40004800

0800094c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_DMA_Init+0x48>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <MX_DMA_Init+0x48>)
 8000958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <MX_DMA_Init+0x48>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	203b      	movs	r0, #59	; 0x3b
 8000970:	f001 fbb1 	bl	80020d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000974:	203b      	movs	r0, #59	; 0x3b
 8000976:	f001 fbca 	bl	800210e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2045      	movs	r0, #69	; 0x45
 8000980:	f001 fba9 	bl	80020d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000984:	2045      	movs	r0, #69	; 0x45
 8000986:	f001 fbc2 	bl	800210e <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <MX_GPIO_Init+0x134>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a46      	ldr	r2, [pc, #280]	; (8000acc <MX_GPIO_Init+0x134>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <MX_GPIO_Init+0x134>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	4b41      	ldr	r3, [pc, #260]	; (8000acc <MX_GPIO_Init+0x134>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a40      	ldr	r2, [pc, #256]	; (8000acc <MX_GPIO_Init+0x134>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <MX_GPIO_Init+0x134>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <MX_GPIO_Init+0x134>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a3a      	ldr	r2, [pc, #232]	; (8000acc <MX_GPIO_Init+0x134>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <MX_GPIO_Init+0x134>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <MX_GPIO_Init+0x134>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a34      	ldr	r2, [pc, #208]	; (8000acc <MX_GPIO_Init+0x134>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a2e      	ldr	r2, [pc, #184]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a28      	ldr	r2, [pc, #160]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a44:	4822      	ldr	r0, [pc, #136]	; (8000ad0 <MX_GPIO_Init+0x138>)
 8000a46:	f002 f8e7 	bl	8002c18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4821      	ldr	r0, [pc, #132]	; (8000ad4 <MX_GPIO_Init+0x13c>)
 8000a50:	f002 f8e2 	bl	8002c18 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a5e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <MX_GPIO_Init+0x140>)
 8000a6c:	f001 ff10 	bl	8002890 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000a70:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <MX_GPIO_Init+0x138>)
 8000a8a:	f001 ff01 	bl	8002890 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = SD_CD_Pin | USB_OverCurrent_Pin;
 8000a8e:	2384      	movs	r3, #132	; 0x84
 8000a90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_GPIO_Init+0x13c>)
 8000aa2:	f001 fef5 	bl	8002890 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aa6:	2340      	movs	r3, #64	; 0x40
 8000aa8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_GPIO_Init+0x13c>)
 8000abe:	f001 fee7 	bl	8002890 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	40020800 	.word	0x40020800

08000adc <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000adc:	b5b0      	push	{r4, r5, r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af06      	add	r7, sp, #24
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) Error_Handler();
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000ae4:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <Get_and_Append_CAN_Message_to_Buffer+0xcc>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4830      	ldr	r0, [pc, #192]	; (8000bac <Get_and_Append_CAN_Message_to_Buffer+0xd0>)
 8000aea:	f000 feb1 	bl	8001850 <HAL_CAN_GetRxMessage>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <Get_and_Append_CAN_Message_to_Buffer+0x1c>
 8000af4:	f000 f8e8 	bl	8000cc8 <Error_Handler>

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000b04:	785b      	ldrb	r3, [r3, #1]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	80fb      	strh	r3, [r7, #6]
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000b0e:	789b      	ldrb	r3, [r3, #2]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000b18:	78db      	ldrb	r3, [r3, #3]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4413      	add	r3, r2
 8000b1e:	80bb      	strh	r3, [r7, #4]
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000b22:	791b      	ldrb	r3, [r3, #4]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000b2c:	795b      	ldrb	r3, [r3, #5]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4413      	add	r3, r2
 8000b32:	807b      	strh	r3, [r7, #2]
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000b36:	799b      	ldrb	r3, [r3, #6]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000b40:	79db      	ldrb	r3, [r3, #7]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	803b      	strh	r3, [r7, #0]

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES+1, "(%d.0) X %08X#%04X%04X%04X%04X\n",
 8000b48:	f000 fc26 	bl	8001398 <HAL_GetTick>
 8000b4c:	4605      	mov	r5, r0
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <Get_and_Append_CAN_Message_to_Buffer+0xcc>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	88fa      	ldrh	r2, [r7, #6]
 8000b54:	88b9      	ldrh	r1, [r7, #4]
 8000b56:	8878      	ldrh	r0, [r7, #2]
 8000b58:	883c      	ldrh	r4, [r7, #0]
 8000b5a:	9404      	str	r4, [sp, #16]
 8000b5c:	9003      	str	r0, [sp, #12]
 8000b5e:	9102      	str	r1, [sp, #8]
 8000b60:	9201      	str	r2, [sp, #4]
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	462b      	mov	r3, r5
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 8000b68:	2129      	movs	r1, #41	; 0x29
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <Get_and_Append_CAN_Message_to_Buffer+0xd8>)
 8000b6c:	f008 f806 	bl	8008b7c <sniprintf>
			HAL_GetTick(), RxHeader.ExtId, data1, data2, data3, data4);

	strcat(double_buffer[filling_buffer], encodedData);
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <Get_and_Append_CAN_Message_to_Buffer+0xdc>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	f640 73a1 	movw	r3, #4001	; 0xfa1
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8000b80:	4413      	add	r3, r2
 8000b82:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <Get_and_Append_CAN_Message_to_Buffer+0xd8>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f008 f82d 	bl	8008be4 <strcat>
	double_buffer_fill_level[filling_buffer]++;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <Get_and_Append_CAN_Message_to_Buffer+0xdc>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000b90:	5cd2      	ldrb	r2, [r2, r3]
 8000b92:	3201      	adds	r2, #1
 8000b94:	b2d1      	uxtb	r1, r2
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000b98:	54d1      	strb	r1, [r2, r3]
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000344 	.word	0x20000344
 8000ba8:	20000328 	.word	0x20000328
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	08009c54 	.word	0x08009c54
 8000bb4:	20000284 	.word	0x20000284
 8000bb8:	20002292 	.word	0x20002292
 8000bbc:	2000034c 	.word	0x2000034c
 8000bc0:	20002290 	.word	0x20002290

08000bc4 <CAN_Filter_Config>:


void CAN_Filter_Config(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	; 0x30
 8000bc8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8000bce:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8000bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	0a1a      	lsrs	r2, r3, #8
 8000be2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000be6:	4013      	ands	r3, r2
 8000be8:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bec:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8000bf0:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000bf2:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8000bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf6:	0a1a      	lsrs	r2, r3, #8
 8000bf8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK) {
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	480a      	ldr	r0, [pc, #40]	; (8000c44 <CAN_Filter_Config+0x80>)
 8000c1a:	f000 fce9 	bl	80015f0 <HAL_CAN_ConfigFilter>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <CAN_Filter_Config+0x64>
		Error_Handler();
 8000c24:	f000 f850 	bl	8000cc8 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <CAN_Filter_Config+0x80>)
 8000c2c:	f000 ff22 	bl	8001a74 <HAL_CAN_ActivateNotification>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <CAN_Filter_Config+0x76>
			!= HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8000c36:	f000 f847 	bl	8000cc8 <Error_Handler>
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	3730      	adds	r7, #48	; 0x30
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000008c 	.word	0x2000008c

08000c48 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER &&
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b64      	cmp	r3, #100	; 0x64
 8000c56:	d105      	bne.n	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER) Error_Handler();
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER &&
 8000c5c:	2b64      	cmp	r3, #100	; 0x64
 8000c5e:	d101      	bne.n	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER) Error_Handler();
 8000c60:	f000 f832 	bl	8000cc8 <Error_Handler>

	Get_and_Append_CAN_Message_to_Buffer();
 8000c64:	f7ff ff3a 	bl	8000adc <Get_and_Append_CAN_Message_to_Buffer>

	if (double_buffer_fill_level[filling_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000c70:	5c9b      	ldrb	r3, [r3, r2]
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d10c      	bne.n	8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		buffer_filled = 1;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
		filling_buffer = !filling_buffer;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	bf0c      	ite	eq
 8000c84:	2301      	moveq	r3, #1
 8000c86:	2300      	movne	r3, #0
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000c8e:	701a      	strb	r2, [r3, #0]
	}
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20002290 	.word	0x20002290
 8000c9c:	20002292 	.word	0x20002292
 8000ca0:	20002294 	.word	0x20002294

08000ca4 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000cac:	1d39      	adds	r1, r7, #4
 8000cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <__io_putchar+0x20>)
 8000cb6:	f004 fa4b 	bl	8005150 <HAL_UART_Transmit>

	return ch;
 8000cba:	687b      	ldr	r3, [r7, #4]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001f8 	.word	0x200001f8

08000cc8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 8000cd0:	4801      	ldr	r0, [pc, #4]	; (8000cd8 <Error_Handler+0x10>)
 8000cd2:	f007 ff4b 	bl	8008b6c <puts>
	while (1) {
 8000cd6:	e7fe      	b.n	8000cd6 <Error_Handler+0xe>
 8000cd8:	08009c74 	.word	0x08009c74

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x44>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x44>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_MspInit+0x44>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x44>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <HAL_CAN_MspInit+0x8c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12f      	bne.n	8000da6 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_CAN_MspInit+0x90>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <HAL_CAN_MspInit+0x90>)
 8000d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_CAN_MspInit+0x90>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_CAN_MspInit+0x90>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <HAL_CAN_MspInit+0x90>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_CAN_MspInit+0x90>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d76:	2303      	movs	r3, #3
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d86:	2309      	movs	r3, #9
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <HAL_CAN_MspInit+0x94>)
 8000d92:	f001 fd7d 	bl	8002890 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2014      	movs	r0, #20
 8000d9c:	f001 f99b 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000da0:	2014      	movs	r0, #20
 8000da2:	f001 f9b4 	bl	800210e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40006400 	.word	0x40006400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020c00 	.word	0x40020c00

08000dbc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ae      	sub	sp, #184	; 0xb8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2290      	movs	r2, #144	; 0x90
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f007 fe4f 	bl	8008a80 <memset>
  if(hsd->Instance==SDMMC1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a73      	ldr	r2, [pc, #460]	; (8000fb4 <HAL_SD_MspInit+0x1f8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	f040 80de 	bne.w	8000faa <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000dee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000df2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8000df4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fc07 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000e0c:	f7ff ff5c 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000e10:	4b69      	ldr	r3, [pc, #420]	; (8000fb8 <HAL_SD_MspInit+0x1fc>)
 8000e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e14:	4a68      	ldr	r2, [pc, #416]	; (8000fb8 <HAL_SD_MspInit+0x1fc>)
 8000e16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e1a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1c:	4b66      	ldr	r3, [pc, #408]	; (8000fb8 <HAL_SD_MspInit+0x1fc>)
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e28:	4b63      	ldr	r3, [pc, #396]	; (8000fb8 <HAL_SD_MspInit+0x1fc>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a62      	ldr	r2, [pc, #392]	; (8000fb8 <HAL_SD_MspInit+0x1fc>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b60      	ldr	r3, [pc, #384]	; (8000fb8 <HAL_SD_MspInit+0x1fc>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	4b5d      	ldr	r3, [pc, #372]	; (8000fb8 <HAL_SD_MspInit+0x1fc>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a5c      	ldr	r2, [pc, #368]	; (8000fb8 <HAL_SD_MspInit+0x1fc>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b5a      	ldr	r3, [pc, #360]	; (8000fb8 <HAL_SD_MspInit+0x1fc>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000e58:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e72:	230c      	movs	r3, #12
 8000e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	484f      	ldr	r0, [pc, #316]	; (8000fbc <HAL_SD_MspInit+0x200>)
 8000e80:	f001 fd06 	bl	8002890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e84:	2304      	movs	r3, #4
 8000e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4845      	ldr	r0, [pc, #276]	; (8000fc0 <HAL_SD_MspInit+0x204>)
 8000eaa:	f001 fcf1 	bl	8002890 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000eae:	4b45      	ldr	r3, [pc, #276]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000eb0:	4a45      	ldr	r2, [pc, #276]	; (8000fc8 <HAL_SD_MspInit+0x20c>)
 8000eb2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000eb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eba:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ebc:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec2:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec8:	4b3e      	ldr	r3, [pc, #248]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ece:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ed0:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000ed2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ed8:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000eda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ede:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ee6:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000eec:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000eee:	2204      	movs	r2, #4
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ef2:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000efa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f00:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000f02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f06:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000f08:	482e      	ldr	r0, [pc, #184]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000f0a:	f001 f91b 	bl	8002144 <HAL_DMA_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8000f14:	f7ff fed8 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f1e:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <HAL_SD_MspInit+0x208>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f26:	4a2a      	ldr	r2, [pc, #168]	; (8000fd0 <HAL_SD_MspInit+0x214>)
 8000f28:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f30:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f44:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f54:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f58:	2220      	movs	r2, #32
 8000f5a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000f7e:	4813      	ldr	r0, [pc, #76]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f80:	f001 f8e0 	bl	8002144 <HAL_DMA_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 8000f8a:	f7ff fe9d 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_SD_MspInit+0x210>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2031      	movs	r0, #49	; 0x31
 8000fa0:	f001 f899 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000fa4:	2031      	movs	r0, #49	; 0x31
 8000fa6:	f001 f8b2 	bl	800210e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	37b8      	adds	r7, #184	; 0xb8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40012c00 	.word	0x40012c00
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	20000138 	.word	0x20000138
 8000fc8:	40026458 	.word	0x40026458
 8000fcc:	20000198 	.word	0x20000198
 8000fd0:	400264a0 	.word	0x400264a0

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ae      	sub	sp, #184	; 0xb8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2290      	movs	r2, #144	; 0x90
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 fd43 	bl	8008a80 <memset>
  if(huart->Instance==USART3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a22      	ldr	r2, [pc, #136]	; (8001088 <HAL_UART_MspInit+0xb4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d13c      	bne.n	800107e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001008:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800100a:	2300      	movs	r3, #0
 800100c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fafe 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800101e:	f7ff fe53 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_UART_MspInit+0xb8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_UART_MspInit+0xb8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001052:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800106c:	2307      	movs	r3, #7
 800106e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001072:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_UART_MspInit+0xbc>)
 800107a:	f001 fc09 	bl	8002890 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	37b8      	adds	r7, #184	; 0xb8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40004800 	.word	0x40004800
 800108c:	40023800 	.word	0x40023800
 8001090:	40020c00 	.word	0x40020c00

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f946 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <CAN1_RX0_IRQHandler+0x10>)
 80010ee:	f000 fce7 	bl	8001ac0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000008c 	.word	0x2000008c

080010fc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <SDMMC1_IRQHandler+0x10>)
 8001102:	f003 f92f 	bl	8004364 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000b4 	.word	0x200000b4

08001110 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <DMA2_Stream3_IRQHandler+0x10>)
 8001116:	f001 f945 	bl	80023a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000138 	.word	0x20000138

08001124 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA2_Stream6_IRQHandler+0x10>)
 800112a:	f001 f93b 	bl	80023a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000198 	.word	0x20000198

08001138 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e00a      	b.n	8001160 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800114a:	f3af 8000 	nop.w
 800114e:	4601      	mov	r1, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf0      	blt.n	800114a <_read+0x12>
  }

  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e009      	b.n	8001198 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fd89 	bl	8000ca4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf1      	blt.n	8001184 <_write+0x12>
  }
  return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_close>:

int _close(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d2:	605a      	str	r2, [r3, #4]
  return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_isatty>:

int _isatty(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f007 fbf2 	bl	8008a2c <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20080000 	.word	0x20080000
 8001274:	00000400 	.word	0x00000400
 8001278:	20002298 	.word	0x20002298
 800127c:	20002758 	.word	0x20002758

08001280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ce:	f7ff ffd7 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f007 fbb1 	bl	8008a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff f985 	bl	80005e4 <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012e8:	08009e30 	.word	0x08009e30
  ldr r2, =_sbss
 80012ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012f0:	20002754 	.word	0x20002754

080012f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC_IRQHandler>

080012f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 fee0 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001300:	2000      	movs	r0, #0
 8001302:	f000 f805 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001306:	f7ff fce9 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fefb 	bl	800212a <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800134c:	f000 fec3 	bl	80020d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	2000229c 	.word	0x2000229c

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2000229c 	.word	0x2000229c

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008

080013f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e0ed      	b.n	80015e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fc84 	bl	8000d24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0201 	orr.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142c:	f7ff ffb4 	bl	8001398 <HAL_GetTick>
 8001430:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001432:	e012      	b.n	800145a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001434:	f7ff ffb0 	bl	8001398 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b0a      	cmp	r3, #10
 8001440:	d90b      	bls.n	800145a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2205      	movs	r2, #5
 8001452:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e0c5      	b.n	80015e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0e5      	beq.n	8001434 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0202 	bic.w	r2, r2, #2
 8001476:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001478:	f7ff ff8e 	bl	8001398 <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800147e:	e012      	b.n	80014a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001480:	f7ff ff8a 	bl	8001398 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b0a      	cmp	r3, #10
 800148c:	d90b      	bls.n	80014a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2205      	movs	r2, #5
 800149e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e09f      	b.n	80015e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e5      	bne.n	8001480 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d108      	bne.n	80014ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e007      	b.n	80014de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7e5b      	ldrb	r3, [r3, #25]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e007      	b.n	8001508 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001506:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7e9b      	ldrb	r3, [r3, #26]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0220 	orr.w	r2, r2, #32
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0220 	bic.w	r2, r2, #32
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7edb      	ldrb	r3, [r3, #27]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d108      	bne.n	800154c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0210 	bic.w	r2, r2, #16
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e007      	b.n	800155c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0210 	orr.w	r2, r2, #16
 800155a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7f1b      	ldrb	r3, [r3, #28]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0208 	orr.w	r2, r2, #8
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e007      	b.n	8001586 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0208 	bic.w	r2, r2, #8
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7f5b      	ldrb	r3, [r3, #29]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0204 	orr.w	r2, r2, #4
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e007      	b.n	80015b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	ea42 0103 	orr.w	r1, r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001606:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001608:	7cfb      	ldrb	r3, [r7, #19]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d003      	beq.n	8001616 <HAL_CAN_ConfigFilter+0x26>
 800160e:	7cfb      	ldrb	r3, [r7, #19]
 8001610:	2b02      	cmp	r3, #2
 8001612:	f040 80c7 	bne.w	80017a4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a69      	ldr	r2, [pc, #420]	; (80017c0 <HAL_CAN_ConfigFilter+0x1d0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d001      	beq.n	8001624 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001620:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001622:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	4a63      	ldr	r2, [pc, #396]	; (80017c4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d111      	bne.n	8001660 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001642:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	431a      	orrs	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f003 031f 	and.w	r3, r3, #31
 8001668:	2201      	movs	r2, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d123      	bne.n	80016d2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43db      	mvns	r3, r3
 8001694:	401a      	ands	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3248      	adds	r2, #72	; 0x48
 80016b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c8:	6979      	ldr	r1, [r7, #20]
 80016ca:	3348      	adds	r3, #72	; 0x48
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d122      	bne.n	8001720 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3248      	adds	r2, #72	; 0x48
 8001700:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001714:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001716:	6979      	ldr	r1, [r7, #20]
 8001718:	3348      	adds	r3, #72	; 0x48
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d109      	bne.n	800173c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800173a:	e007      	b.n	800174c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	431a      	orrs	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d109      	bne.n	8001768 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43db      	mvns	r3, r3
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001766:	e007      	b.n	8001778 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	431a      	orrs	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d107      	bne.n	8001790 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	431a      	orrs	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001796:	f023 0201 	bic.w	r2, r3, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e006      	b.n	80017b2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
  }
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40003400 	.word	0x40003400
 80017c4:	40006400 	.word	0x40006400

080017c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d12e      	bne.n	800183a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017f4:	f7ff fdd0 	bl	8001398 <HAL_GetTick>
 80017f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017fa:	e012      	b.n	8001822 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017fc:	f7ff fdcc 	bl	8001398 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b0a      	cmp	r3, #10
 8001808:	d90b      	bls.n	8001822 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2205      	movs	r2, #5
 800181a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e012      	b.n	8001848 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e5      	bne.n	80017fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e006      	b.n	8001848 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001864:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d003      	beq.n	8001874 <HAL_CAN_GetRxMessage+0x24>
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b02      	cmp	r3, #2
 8001870:	f040 80f3 	bne.w	8001a5a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10e      	bne.n	8001898 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d116      	bne.n	80018b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0e7      	b.n	8001a68 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d107      	bne.n	80018b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0d8      	b.n	8001a68 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	331b      	adds	r3, #27
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	4413      	add	r3, r2
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0204 	and.w	r2, r3, #4
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10c      	bne.n	80018ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	331b      	adds	r3, #27
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	0d5b      	lsrs	r3, r3, #21
 80018e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e00b      	b.n	8001906 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	331b      	adds	r3, #27
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	4413      	add	r3, r2
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	331b      	adds	r3, #27
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0202 	and.w	r2, r3, #2
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	331b      	adds	r3, #27
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	4413      	add	r3, r2
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 020f 	and.w	r2, r3, #15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	331b      	adds	r3, #27
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	4413      	add	r3, r2
 8001940:	3304      	adds	r3, #4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b2da      	uxtb	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	331b      	adds	r3, #27
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	3304      	adds	r3, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0c1b      	lsrs	r3, r3, #16
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4413      	add	r3, r2
 8001984:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0a1a      	lsrs	r2, r3, #8
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	4413      	add	r3, r2
 800199e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0c1a      	lsrs	r2, r3, #16
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	3302      	adds	r3, #2
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	0e1a      	lsrs	r2, r3, #24
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	3303      	adds	r3, #3
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	3304      	adds	r3, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0a1a      	lsrs	r2, r3, #8
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3305      	adds	r3, #5
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0c1a      	lsrs	r2, r3, #16
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	3306      	adds	r3, #6
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0e1a      	lsrs	r2, r3, #24
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3307      	adds	r3, #7
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d108      	bne.n	8001a46 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	e007      	b.n	8001a56 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0220 	orr.w	r2, r2, #32
 8001a54:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e006      	b.n	8001a68 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a84:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d002      	beq.n	8001a92 <HAL_CAN_ActivateNotification+0x1e>
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d109      	bne.n	8001aa6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6959      	ldr	r1, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e006      	b.n	8001ab4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
  }
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d07c      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d023      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2201      	movs	r2, #1
 8001b16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f983 	bl	8001e2e <HAL_CAN_TxMailbox0CompleteCallback>
 8001b28:	e016      	b.n	8001b58 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	e00c      	b.n	8001b58 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b50:	e002      	b.n	8001b58 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f989 	bl	8001e6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d024      	beq.n	8001bac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f963 	bl	8001e42 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b7c:	e016      	b.n	8001bac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b90:	e00c      	b.n	8001bac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba4:	e002      	b.n	8001bac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f969 	bl	8001e7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d024      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f943 	bl	8001e56 <HAL_CAN_TxMailbox2CompleteCallback>
 8001bd0:	e016      	b.n	8001c00 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	e00c      	b.n	8001c00 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf8:	e002      	b.n	8001c00 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f949 	bl	8001e92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2210      	movs	r2, #16
 8001c22:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f930 	bl	8001ea6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fff2 	bl	8000c48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2210      	movs	r2, #16
 8001c86:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f912 	bl	8001ece <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8f9 	bl	8001eba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f8fc 	bl	8001ee2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00b      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2208      	movs	r2, #8
 8001d04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8f5 	bl	8001ef6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d07b      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d072      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	f043 0302 	orr.w	r3, r3, #2
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d043      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d03e      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d8e:	2b60      	cmp	r3, #96	; 0x60
 8001d90:	d02b      	beq.n	8001dea <HAL_CAN_IRQHandler+0x32a>
 8001d92:	2b60      	cmp	r3, #96	; 0x60
 8001d94:	d82e      	bhi.n	8001df4 <HAL_CAN_IRQHandler+0x334>
 8001d96:	2b50      	cmp	r3, #80	; 0x50
 8001d98:	d022      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x320>
 8001d9a:	2b50      	cmp	r3, #80	; 0x50
 8001d9c:	d82a      	bhi.n	8001df4 <HAL_CAN_IRQHandler+0x334>
 8001d9e:	2b40      	cmp	r3, #64	; 0x40
 8001da0:	d019      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x316>
 8001da2:	2b40      	cmp	r3, #64	; 0x40
 8001da4:	d826      	bhi.n	8001df4 <HAL_CAN_IRQHandler+0x334>
 8001da6:	2b30      	cmp	r3, #48	; 0x30
 8001da8:	d010      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x30c>
 8001daa:	2b30      	cmp	r3, #48	; 0x30
 8001dac:	d822      	bhi.n	8001df4 <HAL_CAN_IRQHandler+0x334>
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d002      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x2f8>
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d005      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001db6:	e01d      	b.n	8001df4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	f043 0308 	orr.w	r3, r3, #8
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dc0:	e019      	b.n	8001df6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	f043 0310 	orr.w	r3, r3, #16
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dca:	e014      	b.n	8001df6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	f043 0320 	orr.w	r3, r3, #32
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dd4:	e00f      	b.n	8001df6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dde:	e00a      	b.n	8001df6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de8:	e005      	b.n	8001df6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001df2:	e000      	b.n	8001df6 <HAL_CAN_IRQHandler+0x336>
            break;
 8001df4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f872 	bl	8001f0a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <__NVIC_SetPriorityGrouping+0x40>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <__NVIC_SetPriorityGrouping+0x40>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00
 8001f64:	05fa0000 	.word	0x05fa0000

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	; (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a0:	f7ff ff8e 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff29 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e8:	f7ff ff3e 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7ff ff8e 	bl	8002014 <NVIC_EncodePriority>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff31 	bl	8001f84 <__NVIC_EnableIRQ>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffa2 	bl	800207c <SysTick_Config>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff f922 	bl	8001398 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e099      	b.n	8002294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002180:	e00f      	b.n	80021a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002182:	f7ff f909 	bl	8001398 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b05      	cmp	r3, #5
 800218e:	d908      	bls.n	80021a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2203      	movs	r2, #3
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e078      	b.n	8002294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e8      	bne.n	8002182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_DMA_Init+0x158>)
 80021bc:	4013      	ands	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d107      	bne.n	800220c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4313      	orrs	r3, r2
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f023 0307 	bic.w	r3, r3, #7
 8002222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2b04      	cmp	r3, #4
 8002234:	d117      	bne.n	8002266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 faa5 	bl	8002798 <DMA_CheckFifoParam>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2240      	movs	r2, #64	; 0x40
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002262:	2301      	movs	r3, #1
 8002264:	e016      	b.n	8002294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fa5c 	bl	800272c <DMA_CalcBaseAndBitshift>
 8002274:	4603      	mov	r3, r0
 8002276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	223f      	movs	r2, #63	; 0x3f
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	e010803f 	.word	0xe010803f

080022a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_DMA_Start_IT+0x26>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e048      	b.n	8002358 <HAL_DMA_Start_IT+0xb8>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d137      	bne.n	800234a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f9ee 	bl	80026d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	223f      	movs	r2, #63	; 0x3f
 80022fa:	409a      	lsls	r2, r3
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0216 	orr.w	r2, r2, #22
 800230e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800231e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0208 	orr.w	r2, r2, #8
 8002336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e005      	b.n	8002356 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d004      	beq.n	800237e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00c      	b.n	8002398 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2205      	movs	r2, #5
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023b0:	4b8e      	ldr	r3, [pc, #568]	; (80025ec <HAL_DMA_IRQHandler+0x248>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a8e      	ldr	r2, [pc, #568]	; (80025f0 <HAL_DMA_IRQHandler+0x24c>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0a9b      	lsrs	r3, r3, #10
 80023bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2208      	movs	r2, #8
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01a      	beq.n	8002410 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0204 	bic.w	r2, r2, #4
 80023f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2208      	movs	r2, #8
 80023fe:	409a      	lsls	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	2201      	movs	r2, #1
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d012      	beq.n	8002446 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2201      	movs	r2, #1
 8002434:	409a      	lsls	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f043 0202 	orr.w	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	2204      	movs	r2, #4
 800244c:	409a      	lsls	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00b      	beq.n	800247c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2204      	movs	r2, #4
 800246a:	409a      	lsls	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f043 0204 	orr.w	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2210      	movs	r2, #16
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d043      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d03c      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	2210      	movs	r2, #16
 80024a0:	409a      	lsls	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d018      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d108      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d024      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
 80024d2:	e01f      	b.n	8002514 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
 80024e4:	e016      	b.n	8002514 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0208 	bic.w	r2, r2, #8
 8002502:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2220      	movs	r2, #32
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 808f 	beq.w	8002644 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8087 	beq.w	8002644 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	2220      	movs	r2, #32
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b05      	cmp	r3, #5
 800254c:	d136      	bne.n	80025bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0216 	bic.w	r2, r2, #22
 800255c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_DMA_IRQHandler+0x1da>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0208 	bic.w	r2, r2, #8
 800258c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	223f      	movs	r2, #63	; 0x3f
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d07e      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
        }
        return;
 80025ba:	e079      	b.n	80026b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d031      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
 80025e8:	e02c      	b.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000
 80025f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d023      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
 8002604:	e01e      	b.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0210 	bic.w	r2, r2, #16
 8002622:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	2b00      	cmp	r3, #0
 800264a:	d032      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d022      	beq.n	800269e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2205      	movs	r2, #5
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3301      	adds	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	d307      	bcc.n	800268c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f2      	bne.n	8002670 <HAL_DMA_IRQHandler+0x2cc>
 800268a:	e000      	b.n	800268e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800268c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e000      	b.n	80026b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026b0:	bf00      	nop
    }
  }
}
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b40      	cmp	r3, #64	; 0x40
 80026fc:	d108      	bne.n	8002710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800270e:	e007      	b.n	8002720 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	60da      	str	r2, [r3, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	3b10      	subs	r3, #16
 800273c:	4a13      	ldr	r2, [pc, #76]	; (800278c <DMA_CalcBaseAndBitshift+0x60>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002746:	4a12      	ldr	r2, [pc, #72]	; (8002790 <DMA_CalcBaseAndBitshift+0x64>)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d908      	bls.n	800276c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <DMA_CalcBaseAndBitshift+0x68>)
 8002762:	4013      	ands	r3, r2
 8002764:	1d1a      	adds	r2, r3, #4
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	659a      	str	r2, [r3, #88]	; 0x58
 800276a:	e006      	b.n	800277a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <DMA_CalcBaseAndBitshift+0x68>)
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	aaaaaaab 	.word	0xaaaaaaab
 8002790:	08009cec 	.word	0x08009cec
 8002794:	fffffc00 	.word	0xfffffc00

08002798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11f      	bne.n	80027f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d856      	bhi.n	8002866 <DMA_CheckFifoParam+0xce>
 80027b8:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <DMA_CheckFifoParam+0x28>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027e3 	.word	0x080027e3
 80027c8:	080027d1 	.word	0x080027d1
 80027cc:	08002867 	.word	0x08002867
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d046      	beq.n	800286a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e0:	e043      	b.n	800286a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ea:	d140      	bne.n	800286e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e03d      	b.n	800286e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fa:	d121      	bne.n	8002840 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d837      	bhi.n	8002872 <DMA_CheckFifoParam+0xda>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <DMA_CheckFifoParam+0x70>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	08002819 	.word	0x08002819
 800280c:	0800281f 	.word	0x0800281f
 8002810:	08002819 	.word	0x08002819
 8002814:	08002831 	.word	0x08002831
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e030      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d025      	beq.n	8002876 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282e:	e022      	b.n	8002876 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002838:	d11f      	bne.n	800287a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800283e:	e01c      	b.n	800287a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d903      	bls.n	800284e <DMA_CheckFifoParam+0xb6>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d003      	beq.n	8002854 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800284c:	e018      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      break;
 8002852:	e015      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00e      	beq.n	800287e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      break;
 8002864:	e00b      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      break;
 8002866:	bf00      	nop
 8002868:	e00a      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 800286a:	bf00      	nop
 800286c:	e008      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
 8002870:	e006      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 8002872:	bf00      	nop
 8002874:	e004      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 8002876:	bf00      	nop
 8002878:	e002      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;   
 800287a:	bf00      	nop
 800287c:	e000      	b.n	8002880 <DMA_CheckFifoParam+0xe8>
      break;
 800287e:	bf00      	nop
    }
  } 
  
  return status; 
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop

08002890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e175      	b.n	8002b9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f040 8164 	bne.w	8002b96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d005      	beq.n	80028e6 <HAL_GPIO_Init+0x56>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d130      	bne.n	8002948 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 0201 	and.w	r2, r3, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b03      	cmp	r3, #3
 8002952:	d017      	beq.n	8002984 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d123      	bne.n	80029d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	08da      	lsrs	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3208      	adds	r2, #8
 8002998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	08da      	lsrs	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3208      	adds	r2, #8
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0203 	and.w	r2, r3, #3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80be 	beq.w	8002b96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1a:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_GPIO_Init+0x324>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	4a65      	ldr	r2, [pc, #404]	; (8002bb4 <HAL_GPIO_Init+0x324>)
 8002a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a24:	6453      	str	r3, [r2, #68]	; 0x44
 8002a26:	4b63      	ldr	r3, [pc, #396]	; (8002bb4 <HAL_GPIO_Init+0x324>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a32:	4a61      	ldr	r2, [pc, #388]	; (8002bb8 <HAL_GPIO_Init+0x328>)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	220f      	movs	r2, #15
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <HAL_GPIO_Init+0x32c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d037      	beq.n	8002ace <HAL_GPIO_Init+0x23e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <HAL_GPIO_Init+0x330>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d031      	beq.n	8002aca <HAL_GPIO_Init+0x23a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <HAL_GPIO_Init+0x334>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d02b      	beq.n	8002ac6 <HAL_GPIO_Init+0x236>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a55      	ldr	r2, [pc, #340]	; (8002bc8 <HAL_GPIO_Init+0x338>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d025      	beq.n	8002ac2 <HAL_GPIO_Init+0x232>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a54      	ldr	r2, [pc, #336]	; (8002bcc <HAL_GPIO_Init+0x33c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01f      	beq.n	8002abe <HAL_GPIO_Init+0x22e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a53      	ldr	r2, [pc, #332]	; (8002bd0 <HAL_GPIO_Init+0x340>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d019      	beq.n	8002aba <HAL_GPIO_Init+0x22a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_GPIO_Init+0x344>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_GPIO_Init+0x226>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a51      	ldr	r2, [pc, #324]	; (8002bd8 <HAL_GPIO_Init+0x348>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00d      	beq.n	8002ab2 <HAL_GPIO_Init+0x222>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a50      	ldr	r2, [pc, #320]	; (8002bdc <HAL_GPIO_Init+0x34c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <HAL_GPIO_Init+0x21e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4f      	ldr	r2, [pc, #316]	; (8002be0 <HAL_GPIO_Init+0x350>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_GPIO_Init+0x21a>
 8002aa6:	2309      	movs	r3, #9
 8002aa8:	e012      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002aaa:	230a      	movs	r3, #10
 8002aac:	e010      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002aae:	2308      	movs	r3, #8
 8002ab0:	e00e      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00c      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ab6:	2306      	movs	r3, #6
 8002ab8:	e00a      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002aba:	2305      	movs	r3, #5
 8002abc:	e008      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e004      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_GPIO_Init+0x240>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f002 0203 	and.w	r2, r2, #3
 8002ad6:	0092      	lsls	r2, r2, #2
 8002ad8:	4093      	lsls	r3, r2
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ae0:	4935      	ldr	r1, [pc, #212]	; (8002bb8 <HAL_GPIO_Init+0x328>)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aee:	4b3d      	ldr	r3, [pc, #244]	; (8002be4 <HAL_GPIO_Init+0x354>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b12:	4a34      	ldr	r2, [pc, #208]	; (8002be4 <HAL_GPIO_Init+0x354>)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_GPIO_Init+0x354>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b3c:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <HAL_GPIO_Init+0x354>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b42:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <HAL_GPIO_Init+0x354>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b66:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <HAL_GPIO_Init+0x354>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_GPIO_Init+0x354>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_GPIO_Init+0x354>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	2b0f      	cmp	r3, #15
 8002ba0:	f67f ae86 	bls.w	80028b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40013800 	.word	0x40013800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40021400 	.word	0x40021400
 8002bd4:	40021800 	.word	0x40021800
 8002bd8:	40021c00 	.word	0x40021c00
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40022400 	.word	0x40022400
 8002be4:	40013c00 	.word	0x40013c00

08002be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e001      	b.n	8002c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	619a      	str	r2, [r3, #24]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40007000 	.word	0x40007000

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e29b      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8087 	beq.w	8002d9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c90:	4b96      	ldr	r3, [pc, #600]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d00c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9c:	4b93      	ldr	r3, [pc, #588]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d112      	bne.n	8002cce <HAL_RCC_OscConfig+0x62>
 8002ca8:	4b90      	ldr	r3, [pc, #576]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb4:	d10b      	bne.n	8002cce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb6:	4b8d      	ldr	r3, [pc, #564]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d06c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x130>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d168      	bne.n	8002d9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e275      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x7a>
 8002cd8:	4b84      	ldr	r3, [pc, #528]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a83      	ldr	r2, [pc, #524]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	e02e      	b.n	8002d44 <HAL_RCC_OscConfig+0xd8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x9c>
 8002cee:	4b7f      	ldr	r3, [pc, #508]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b7c      	ldr	r3, [pc, #496]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7b      	ldr	r2, [pc, #492]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e01d      	b.n	8002d44 <HAL_RCC_OscConfig+0xd8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0xc0>
 8002d12:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a75      	ldr	r2, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a72      	ldr	r2, [pc, #456]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0xd8>
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6e      	ldr	r2, [pc, #440]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b6c      	ldr	r3, [pc, #432]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6b      	ldr	r2, [pc, #428]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fb24 	bl	8001398 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fb20 	bl	8001398 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e229      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b61      	ldr	r3, [pc, #388]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0xe8>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fb10 	bl	8001398 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fb0c 	bl	8001398 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e215      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	4b57      	ldr	r3, [pc, #348]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x110>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d069      	beq.n	8002e7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002daa:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db6:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d11c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x190>
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d116      	bne.n	8002dfc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_RCC_OscConfig+0x17a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e1e9      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	493d      	ldr	r1, [pc, #244]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	e040      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d023      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e04:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a38      	ldr	r2, [pc, #224]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe fac2 	bl	8001398 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe fabe 	bl	8001398 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1c7      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4929      	ldr	r1, [pc, #164]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
 8002e4a:	e018      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a26      	ldr	r2, [pc, #152]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fa9e 	bl	8001398 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe fa9a 	bl	8001398 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1a3      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d038      	beq.n	8002efc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d019      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fa7b 	bl	8001398 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fa77 	bl	8001398 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e180      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x23a>
 8002ec4:	e01a      	b.n	8002efc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eca:	4a08      	ldr	r2, [pc, #32]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fa61 	bl	8001398 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fe fa5d 	bl	8001398 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d903      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e166      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
 8002eec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b92      	ldr	r3, [pc, #584]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ee      	bne.n	8002eda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a4 	beq.w	8003052 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b8c      	ldr	r3, [pc, #560]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10d      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b89      	ldr	r3, [pc, #548]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a88      	ldr	r2, [pc, #544]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b86      	ldr	r3, [pc, #536]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f32:	4b83      	ldr	r3, [pc, #524]	; (8003140 <HAL_RCC_OscConfig+0x4d4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f3e:	4b80      	ldr	r3, [pc, #512]	; (8003140 <HAL_RCC_OscConfig+0x4d4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7f      	ldr	r2, [pc, #508]	; (8003140 <HAL_RCC_OscConfig+0x4d4>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fa25 	bl	8001398 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe fa21 	bl	8001398 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	; 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e12a      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f64:	4b76      	ldr	r3, [pc, #472]	; (8003140 <HAL_RCC_OscConfig+0x4d4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x31a>
 8002f78:	4b70      	ldr	r3, [pc, #448]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a6f      	ldr	r2, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
 8002f84:	e02d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x376>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x33c>
 8002f8e:	4b6b      	ldr	r3, [pc, #428]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a6a      	ldr	r2, [pc, #424]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9a:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a67      	ldr	r2, [pc, #412]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	f023 0304 	bic.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	e01c      	b.n	8002fe2 <HAL_RCC_OscConfig+0x376>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	d10c      	bne.n	8002fca <HAL_RCC_OscConfig+0x35e>
 8002fb0:	4b62      	ldr	r3, [pc, #392]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a61      	ldr	r2, [pc, #388]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002fb6:	f043 0304 	orr.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	4b5f      	ldr	r3, [pc, #380]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a5e      	ldr	r2, [pc, #376]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	e00b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x376>
 8002fca:	4b5c      	ldr	r3, [pc, #368]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a5b      	ldr	r2, [pc, #364]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd6:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d015      	beq.n	8003016 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe f9d5 	bl	8001398 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe f9d1 	bl	8001398 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0d8      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ee      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x386>
 8003014:	e014      	b.n	8003040 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fe f9bf 	bl	8001398 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe f9bb 	bl	8001398 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0c2      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003034:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ee      	bne.n	800301e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d105      	bne.n	8003052 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	4a3c      	ldr	r2, [pc, #240]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80ae 	beq.w	80031b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800305c:	4b37      	ldr	r3, [pc, #220]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d06d      	beq.n	8003144 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d14b      	bne.n	8003108 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003070:	4b32      	ldr	r3, [pc, #200]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a31      	ldr	r2, [pc, #196]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8003076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe f98c 	bl	8001398 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe f988 	bl	8001398 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e091      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	019b      	lsls	r3, r3, #6
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	3b01      	subs	r3, #1
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	071b      	lsls	r3, r3, #28
 80030ce:	491b      	ldr	r1, [pc, #108]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a18      	ldr	r2, [pc, #96]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe f95a 	bl	8001398 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe f956 	bl	8001398 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e05f      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x47c>
 8003106:	e057      	b.n	80031b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0b      	ldr	r2, [pc, #44]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 800310e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe f940 	bl	8001398 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe f93c 	bl	8001398 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e045      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_RCC_OscConfig+0x4d0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x4b0>
 800313a:	e03d      	b.n	80031b8 <HAL_RCC_OscConfig+0x54c>
 800313c:	40023800 	.word	0x40023800
 8003140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <HAL_RCC_OscConfig+0x558>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d030      	beq.n	80031b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d129      	bne.n	80031b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d122      	bne.n	80031b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800317a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800317c:	4293      	cmp	r3, r2
 800317e:	d119      	bne.n	80031b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d10f      	bne.n	80031b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0d0      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d910      	bls.n	8003210 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b67      	ldr	r3, [pc, #412]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 020f 	bic.w	r2, r3, #15
 80031f6:	4965      	ldr	r1, [pc, #404]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b63      	ldr	r3, [pc, #396]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b8      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800322e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003232:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003240:	4b53      	ldr	r3, [pc, #332]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800324a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b50      	ldr	r3, [pc, #320]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	494d      	ldr	r1, [pc, #308]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d040      	beq.n	80032ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d115      	bne.n	80032aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e073      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06b      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4936      	ldr	r1, [pc, #216]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fe f86c 	bl	8001398 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fe f868 	bl	8001398 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e053      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b27      	ldr	r3, [pc, #156]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d210      	bcs.n	800331c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 020f 	bic.w	r2, r3, #15
 8003302:	4922      	ldr	r1, [pc, #136]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e032      	b.n	8003382 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4916      	ldr	r1, [pc, #88]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	490e      	ldr	r1, [pc, #56]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335a:	f000 f821 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 800335e:	4602      	mov	r2, r0
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	490a      	ldr	r1, [pc, #40]	; (8003394 <HAL_RCC_ClockConfig+0x1cc>)
 800336c:	5ccb      	ldrb	r3, [r1, r3]
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1d0>)
 8003374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_ClockConfig+0x1d4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd ffc8 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023c00 	.word	0x40023c00
 8003390:	40023800 	.word	0x40023800
 8003394:	08009cd4 	.word	0x08009cd4
 8003398:	20000000 	.word	0x20000000
 800339c:	20000004 	.word	0x20000004

080033a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a4:	b094      	sub	sp, #80	; 0x50
 80033a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
 80033ac:	2300      	movs	r3, #0
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b0:	2300      	movs	r3, #0
 80033b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b8:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d00d      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x40>
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	f200 80e1 	bhi.w	800358c <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d003      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x3a>
 80033d2:	e0db      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033d8:	e0db      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033da:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033de:	e0d8      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e0:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033ea:	4b6d      	ldr	r3, [pc, #436]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d063      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f6:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	2200      	movs	r2, #0
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003400:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003408:	633b      	str	r3, [r7, #48]	; 0x30
 800340a:	2300      	movs	r3, #0
 800340c:	637b      	str	r3, [r7, #52]	; 0x34
 800340e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003412:	4622      	mov	r2, r4
 8003414:	462b      	mov	r3, r5
 8003416:	f04f 0000 	mov.w	r0, #0
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	0159      	lsls	r1, r3, #5
 8003420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003424:	0150      	lsls	r0, r2, #5
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4621      	mov	r1, r4
 800342c:	1a51      	subs	r1, r2, r1
 800342e:	6139      	str	r1, [r7, #16]
 8003430:	4629      	mov	r1, r5
 8003432:	eb63 0301 	sbc.w	r3, r3, r1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003444:	4659      	mov	r1, fp
 8003446:	018b      	lsls	r3, r1, #6
 8003448:	4651      	mov	r1, sl
 800344a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800344e:	4651      	mov	r1, sl
 8003450:	018a      	lsls	r2, r1, #6
 8003452:	4651      	mov	r1, sl
 8003454:	ebb2 0801 	subs.w	r8, r2, r1
 8003458:	4659      	mov	r1, fp
 800345a:	eb63 0901 	sbc.w	r9, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	4623      	mov	r3, r4
 8003478:	eb18 0303 	adds.w	r3, r8, r3
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	462b      	mov	r3, r5
 8003480:	eb49 0303 	adc.w	r3, r9, r3
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003492:	4629      	mov	r1, r5
 8003494:	024b      	lsls	r3, r1, #9
 8003496:	4621      	mov	r1, r4
 8003498:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800349c:	4621      	mov	r1, r4
 800349e:	024a      	lsls	r2, r1, #9
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a6:	2200      	movs	r2, #0
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034b0:	f7fc ff16 	bl	80002e0 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4613      	mov	r3, r2
 80034ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034bc:	e058      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b38      	ldr	r3, [pc, #224]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	4611      	mov	r1, r2
 80034ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
 80034d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	f04f 0000 	mov.w	r0, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	0159      	lsls	r1, r3, #5
 80034e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ea:	0150      	lsls	r0, r2, #5
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4641      	mov	r1, r8
 80034f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034f6:	4649      	mov	r1, r9
 80034f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800350c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003510:	ebb2 040a 	subs.w	r4, r2, sl
 8003514:	eb63 050b 	sbc.w	r5, r3, fp
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	00eb      	lsls	r3, r5, #3
 8003522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003526:	00e2      	lsls	r2, r4, #3
 8003528:	4614      	mov	r4, r2
 800352a:	461d      	mov	r5, r3
 800352c:	4643      	mov	r3, r8
 800352e:	18e3      	adds	r3, r4, r3
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	464b      	mov	r3, r9
 8003534:	eb45 0303 	adc.w	r3, r5, r3
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003546:	4629      	mov	r1, r5
 8003548:	028b      	lsls	r3, r1, #10
 800354a:	4621      	mov	r1, r4
 800354c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003550:	4621      	mov	r1, r4
 8003552:	028a      	lsls	r2, r1, #10
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355a:	2200      	movs	r2, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	61fa      	str	r2, [r7, #28]
 8003560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003564:	f7fc febc 	bl	80002e0 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4613      	mov	r3, r2
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	3301      	adds	r3, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003580:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800358a:	e002      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800358e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003594:	4618      	mov	r0, r3
 8003596:	3750      	adds	r7, #80	; 0x50
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	007a1200 	.word	0x007a1200

080035ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000000 	.word	0x20000000

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c8:	f7ff fff0 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0a9b      	lsrs	r3, r3, #10
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40023800 	.word	0x40023800
 80035e8:	08009ce4 	.word	0x08009ce4

080035ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f0:	f7ff ffdc 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	0b5b      	lsrs	r3, r3, #13
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4903      	ldr	r1, [pc, #12]	; (8003610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	08009ce4 	.word	0x08009ce4

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d012      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800363c:	4b69      	ldr	r3, [pc, #420]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a68      	ldr	r2, [pc, #416]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003642:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003646:	6093      	str	r3, [r2, #8]
 8003648:	4b66      	ldr	r3, [pc, #408]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	4964      	ldr	r1, [pc, #400]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800365e:	2301      	movs	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800366e:	4b5d      	ldr	r3, [pc, #372]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	4959      	ldr	r1, [pc, #356]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368c:	d101      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800368e:	2301      	movs	r3, #1
 8003690:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800369a:	2301      	movs	r3, #1
 800369c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d017      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036aa:	4b4e      	ldr	r3, [pc, #312]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	494a      	ldr	r1, [pc, #296]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 808b 	beq.w	800380e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	4a39      	ldr	r2, [pc, #228]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	; 0x40
 8003704:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003710:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a34      	ldr	r2, [pc, #208]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fd fe3c 	bl	8001398 <HAL_GetTick>
 8003720:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7fd fe38 	bl	8001398 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e38f      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003742:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d035      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	429a      	cmp	r2, r3
 800375e:	d02e      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003768:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800376a:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003776:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4a1a      	ldr	r2, [pc, #104]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003780:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d114      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fd fe00 	bl	8001398 <HAL_GetTick>
 8003798:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	e00a      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fd fdfc 	bl	8001398 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e351      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0ee      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ca:	d111      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037da:	400b      	ands	r3, r1
 80037dc:	4901      	ldr	r1, [pc, #4]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
 80037e2:	e00b      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
 80037ec:	0ffffcff 	.word	0x0ffffcff
 80037f0:	4bac      	ldr	r3, [pc, #688]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4aab      	ldr	r2, [pc, #684]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037fa:	6093      	str	r3, [r2, #8]
 80037fc:	4ba9      	ldr	r3, [pc, #676]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	49a6      	ldr	r1, [pc, #664]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380a:	4313      	orrs	r3, r2
 800380c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d010      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800381a:	4ba2      	ldr	r3, [pc, #648]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003820:	4aa0      	ldr	r2, [pc, #640]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003826:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800382a:	4b9e      	ldr	r3, [pc, #632]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	499b      	ldr	r1, [pc, #620]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003848:	4b96      	ldr	r3, [pc, #600]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003856:	4993      	ldr	r1, [pc, #588]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800386a:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003878:	498a      	ldr	r1, [pc, #552]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800388c:	4b85      	ldr	r3, [pc, #532]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389a:	4982      	ldr	r1, [pc, #520]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ae:	4b7d      	ldr	r3, [pc, #500]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4979      	ldr	r1, [pc, #484]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038d0:	4b74      	ldr	r3, [pc, #464]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	4971      	ldr	r1, [pc, #452]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038f2:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f023 020c 	bic.w	r2, r3, #12
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	4968      	ldr	r1, [pc, #416]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003914:	4b63      	ldr	r3, [pc, #396]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	4960      	ldr	r1, [pc, #384]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003936:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	4957      	ldr	r1, [pc, #348]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003958:	4b52      	ldr	r3, [pc, #328]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	494f      	ldr	r1, [pc, #316]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800397a:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	4946      	ldr	r1, [pc, #280]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800399c:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	493e      	ldr	r1, [pc, #248]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039be:	4b39      	ldr	r3, [pc, #228]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039cc:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039e0:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ee:	492d      	ldr	r1, [pc, #180]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d011      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a02:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a10:	4924      	ldr	r1, [pc, #144]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a20:	d101      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a32:	2301      	movs	r3, #1
 8003a34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a42:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a50:	4914      	ldr	r1, [pc, #80]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a74:	490b      	ldr	r1, [pc, #44]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00f      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a98:	4902      	ldr	r1, [pc, #8]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab4:	4b8a      	ldr	r3, [pc, #552]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	4986      	ldr	r1, [pc, #536]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ad8:	4b81      	ldr	r3, [pc, #516]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ade:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae8:	497d      	ldr	r1, [pc, #500]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d006      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80d6 	beq.w	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b04:	4b76      	ldr	r3, [pc, #472]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a75      	ldr	r2, [pc, #468]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b10:	f7fd fc42 	bl	8001398 <HAL_GetTick>
 8003b14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b18:	f7fd fc3e 	bl	8001398 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	; 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e195      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d021      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d11d      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b4a:	4b65      	ldr	r3, [pc, #404]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b58:	4b61      	ldr	r3, [pc, #388]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	0e1b      	lsrs	r3, r3, #24
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	019a      	lsls	r2, r3, #6
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	4958      	ldr	r1, [pc, #352]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d02e      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb0:	d129      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bb2:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bc0:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	0f1b      	lsrs	r3, r3, #28
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	019a      	lsls	r2, r3, #6
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	061b      	lsls	r3, r3, #24
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	071b      	lsls	r3, r3, #28
 8003be6:	493e      	ldr	r1, [pc, #248]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bee:	4b3c      	ldr	r3, [pc, #240]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf4:	f023 021f 	bic.w	r2, r3, #31
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	4938      	ldr	r1, [pc, #224]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01d      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c12:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c18:	0e1b      	lsrs	r3, r3, #24
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c20:	4b2f      	ldr	r3, [pc, #188]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c26:	0f1b      	lsrs	r3, r3, #28
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	019a      	lsls	r2, r3, #6
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	071b      	lsls	r3, r3, #28
 8003c46:	4926      	ldr	r1, [pc, #152]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d011      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	019a      	lsls	r2, r3, #6
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	061b      	lsls	r3, r3, #24
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	071b      	lsls	r3, r3, #28
 8003c76:	491a      	ldr	r1, [pc, #104]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c7e:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8a:	f7fd fb85 	bl	8001398 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c92:	f7fd fb81 	bl	8001398 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b64      	cmp	r3, #100	; 0x64
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e0d8      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	f040 80ce 	bne.w	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc4:	f7fd fb68 	bl	8001398 <HAL_GetTick>
 8003cc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ccc:	f7fd fb64 	bl	8001398 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d904      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0bb      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ce4:	4b5e      	ldr	r3, [pc, #376]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf0:	d0ec      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d02e      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d12a      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d1a:	4b51      	ldr	r3, [pc, #324]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	0c1b      	lsrs	r3, r3, #16
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d28:	4b4d      	ldr	r3, [pc, #308]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	0f1b      	lsrs	r3, r3, #28
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	019a      	lsls	r2, r3, #6
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	061b      	lsls	r3, r3, #24
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	071b      	lsls	r3, r3, #28
 8003d4e:	4944      	ldr	r1, [pc, #272]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d56:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	3b01      	subs	r3, #1
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	493d      	ldr	r1, [pc, #244]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d022      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d84:	d11d      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d86:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	0e1b      	lsrs	r3, r3, #24
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d94:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	0f1b      	lsrs	r3, r3, #28
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	019a      	lsls	r2, r3, #6
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	061b      	lsls	r3, r3, #24
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	071b      	lsls	r3, r3, #28
 8003dba:	4929      	ldr	r1, [pc, #164]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d028      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	0e1b      	lsrs	r3, r3, #24
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ddc:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	0c1b      	lsrs	r3, r3, #16
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	019a      	lsls	r2, r3, #6
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	431a      	orrs	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	4917      	ldr	r1, [pc, #92]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	4911      	ldr	r1, [pc, #68]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2c:	f7fd fab4 	bl	8001398 <HAL_GetTick>
 8003e30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e34:	f7fd fab0 	bl	8001398 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e007      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e52:	d1ef      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800

08003e64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e022      	b.n	8003ebc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fc ff97 	bl	8000dbc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2203      	movs	r2, #3
 8003e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f814 	bl	8003ec4 <HAL_SD_InitCard>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00a      	b.n	8003ebc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ec4:	b5b0      	push	{r4, r5, r7, lr}
 8003ec6:	b08e      	sub	sp, #56	; 0x38
 8003ec8:	af04      	add	r7, sp, #16
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003ee0:	2376      	movs	r3, #118	; 0x76
 8003ee2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681d      	ldr	r5, [r3, #0]
 8003ee8:	466c      	mov	r4, sp
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003efc:	4628      	mov	r0, r5
 8003efe:	f001 fdc5 	bl	8005a8c <SDMMC_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e059      	b.n	8003fc8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f22:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 fdf9 	bl	8005b20 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f3c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003f3e:	2002      	movs	r0, #2
 8003f40:	f7fd fa36 	bl	80013b0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 ff59 	bl	8004dfc <SD_PowerON>
 8003f4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e02e      	b.n	8003fc8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fe78 	bl	8004c60 <SD_InitCard>
 8003f70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e01b      	b.n	8003fc8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 fe53 	bl	8005c44 <SDMMC_CmdBlockLength>
 8003f9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00f      	beq.n	8003fc6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_SD_InitCard+0x10c>)
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3728      	adds	r7, #40	; 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd0:	004005ff 	.word	0x004005ff

08003fd4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d107      	bne.n	8003ffc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0c3      	b.n	8004184 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 80bc 	bne.w	8004182 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	429a      	cmp	r2, r3
 800401c:	d907      	bls.n	800402e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e0aa      	b.n	8004184 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2203      	movs	r2, #3
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	4a4e      	ldr	r2, [pc, #312]	; (800418c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a4d      	ldr	r2, [pc, #308]	; (8004190 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800405c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2200      	movs	r2, #0
 8004064:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3380      	adds	r3, #128	; 0x80
 8004094:	4619      	mov	r1, r3
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	025b      	lsls	r3, r3, #9
 800409c:	089b      	lsrs	r3, r3, #2
 800409e:	f7fe f8ff 	bl	80022a0 <HAL_DMA_Start_IT>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d017      	beq.n	80040d8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80040b6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a35      	ldr	r2, [pc, #212]	; (8004194 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e055      	b.n	8004184 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0208 	orr.w	r2, r2, #8
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d002      	beq.n	80040f6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	025b      	lsls	r3, r3, #9
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040fa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	025b      	lsls	r3, r3, #9
 8004100:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004102:	2390      	movs	r3, #144	; 0x90
 8004104:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004106:	2302      	movs	r3, #2
 8004108:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800410a:	2300      	movs	r3, #0
 800410c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800410e:	2301      	movs	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f107 0210 	add.w	r2, r7, #16
 800411a:	4611      	mov	r1, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f001 fd65 	bl	8005bec <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d90a      	bls.n	800413e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2282      	movs	r2, #130	; 0x82
 800412c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fdc9 	bl	8005ccc <SDMMC_CmdReadMultiBlock>
 800413a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800413c:	e009      	b.n	8004152 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2281      	movs	r2, #129	; 0x81
 8004142:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800414a:	4618      	mov	r0, r3
 800414c:	f001 fd9c 	bl	8005c88 <SDMMC_CmdReadSingleBlock>
 8004150:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	431a      	orrs	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e002      	b.n	8004184 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3730      	adds	r7, #48	; 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	08004a6f 	.word	0x08004a6f
 8004190:	08004ae1 	.word	0x08004ae1
 8004194:	004005ff 	.word	0x004005ff

08004198 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08c      	sub	sp, #48	; 0x30
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d107      	bne.n	80041c0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0c6      	b.n	800434e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	f040 80bf 	bne.w	800434c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80041d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	441a      	add	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041de:	429a      	cmp	r2, r3
 80041e0:	d907      	bls.n	80041f2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0ad      	b.n	800434e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2203      	movs	r2, #3
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2200      	movs	r2, #0
 8004200:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 021a 	orr.w	r2, r2, #26
 8004210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	4a50      	ldr	r2, [pc, #320]	; (8004358 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	4a4f      	ldr	r2, [pc, #316]	; (800435c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004220:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	2200      	movs	r2, #0
 8004228:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	2b01      	cmp	r3, #1
 8004230:	d002      	beq.n	8004238 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	025b      	lsls	r3, r3, #9
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d90a      	bls.n	8004254 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	22a0      	movs	r2, #160	; 0xa0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fd82 	bl	8005d54 <SDMMC_CmdWriteMultiBlock>
 8004250:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004252:	e009      	b.n	8004268 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2290      	movs	r2, #144	; 0x90
 8004258:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004260:	4618      	mov	r0, r3
 8004262:	f001 fd55 	bl	8005d10 <SDMMC_CmdWriteSingleBlock>
 8004266:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d012      	beq.n	8004294 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a3b      	ldr	r2, [pc, #236]	; (8004360 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e05c      	b.n	800434e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0208 	orr.w	r2, r2, #8
 80042a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	2240      	movs	r2, #64	; 0x40
 80042aa:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3380      	adds	r3, #128	; 0x80
 80042d4:	461a      	mov	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	025b      	lsls	r3, r3, #9
 80042da:	089b      	lsrs	r3, r3, #2
 80042dc:	f7fd ffe0 	bl	80022a0 <HAL_DMA_Start_IT>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01a      	beq.n	800431c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 021a 	bic.w	r2, r2, #26
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a19      	ldr	r2, [pc, #100]	; (8004360 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e018      	b.n	800434e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800431c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004320:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	025b      	lsls	r3, r3, #9
 8004326:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004328:	2390      	movs	r3, #144	; 0x90
 800432a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004330:	2300      	movs	r3, #0
 8004332:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004334:	2301      	movs	r3, #1
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f107 0210 	add.w	r2, r7, #16
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f001 fc52 	bl	8005bec <SDMMC_ConfigData>

      return HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	e000      	b.n	800434e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800434c:	2302      	movs	r3, #2
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3730      	adds	r7, #48	; 0x30
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	08004a45 	.word	0x08004a45
 800435c:	08004ae1 	.word	0x08004ae1
 8004360:	004005ff 	.word	0x004005ff

08004364 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_SD_IRQHandler+0x2e>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fdec 	bl	8004f68 <SD_Read_IT>
 8004390:	e15a      	b.n	8004648 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 808d 	beq.w	80044bc <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b9a      	ldr	r3, [pc, #616]	; (8004620 <HAL_SD_IRQHandler+0x2bc>)
 80043b8:	400b      	ands	r3, r1
 80043ba:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d039      	beq.n	800444a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <HAL_SD_IRQHandler+0x86>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d011      	beq.n	800440e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 fcd2 	bl	8005d98 <SDMMC_CmdStopTransfer>
 80043f4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f921 	bl	8004650 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f240 523a 	movw	r2, #1338	; 0x53a
 8004416:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <HAL_SD_IRQHandler+0xd6>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f002 f8f0 	bl	8006620 <HAL_SD_RxCpltCallback>
 8004440:	e102      	b.n	8004648 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f002 f8e2 	bl	800660c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004448:	e0fe      	b.n	8004648 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80f9 	beq.w	8004648 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d011      	beq.n	8004484 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f001 fc97 	bl	8005d98 <SDMMC_CmdStopTransfer>
 800446a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8e6 	bl	8004650 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 80dc 	bne.w	8004648 <HAL_SD_IRQHandler+0x2e4>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 80d6 	bne.w	8004648 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0208 	bic.w	r2, r2, #8
 80044aa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f002 f8a9 	bl	800660c <HAL_SD_TxCpltCallback>
}
 80044ba:	e0c5      	b.n	8004648 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_SD_IRQHandler+0x178>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fd98 	bl	800500a <SD_Write_IT>
 80044da:	e0b5      	b.n	8004648 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80ae 	beq.w	8004648 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	f043 0202 	orr.w	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	f043 0208 	orr.w	r2, r3, #8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	f043 0210 	orr.w	r2, r3, #16
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f240 523a 	movw	r2, #1338	; 0x53a
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800456c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fc10 	bl	8005d98 <SDMMC_CmdStopTransfer>
 8004578:	4602      	mov	r2, r0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f857 	bl	8004650 <HAL_SD_ErrorCallback>
}
 80045a2:	e051      	b.n	8004648 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d04c      	beq.n	8004648 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <HAL_SD_IRQHandler+0x25e>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d011      	beq.n	80045e6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	4a17      	ldr	r2, [pc, #92]	; (8004624 <HAL_SD_IRQHandler+0x2c0>)
 80045c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fd fec6 	bl	8002360 <HAL_DMA_Abort_IT>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d036      	beq.n	8004648 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fad0 	bl	8004b84 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80045e4:	e030      	b.n	8004648 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d104      	bne.n	80045fa <HAL_SD_IRQHandler+0x296>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d018      	beq.n	800462c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <HAL_SD_IRQHandler+0x2c4>)
 8004600:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	4618      	mov	r0, r3
 8004608:	f7fd feaa 	bl	8002360 <HAL_DMA_Abort_IT>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01a      	beq.n	8004648 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4618      	mov	r0, r3
 8004618:	f000 faeb 	bl	8004bf2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800461c:	e014      	b.n	8004648 <HAL_SD_IRQHandler+0x2e4>
 800461e:	bf00      	nop
 8004620:	ffff3ec5 	.word	0xffff3ec5
 8004624:	08004b85 	.word	0x08004b85
 8004628:	08004bf3 	.word	0x08004bf3
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 ffd9 	bl	80065f8 <HAL_SD_AbortCallback>
}
 8004646:	e7ff      	b.n	8004648 <HAL_SD_IRQHandler+0x2e4>
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004672:	0f9b      	lsrs	r3, r3, #30
 8004674:	b2da      	uxtb	r2, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467e:	0e9b      	lsrs	r3, r3, #26
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	b2da      	uxtb	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004690:	0e1b      	lsrs	r3, r3, #24
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	b2da      	uxtb	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c4:	0d1b      	lsrs	r3, r3, #20
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d0:	0c1b      	lsrs	r3, r3, #16
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e2:	0bdb      	lsrs	r3, r3, #15
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f4:	0b9b      	lsrs	r3, r3, #14
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004706:	0b5b      	lsrs	r3, r3, #13
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	b2da      	uxtb	r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004718:	0b1b      	lsrs	r3, r3, #12
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	b2da      	uxtb	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2200      	movs	r2, #0
 800472a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	2b00      	cmp	r3, #0
 8004732:	d163      	bne.n	80047fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004738:	009a      	lsls	r2, r3, #2
 800473a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800473e:	4013      	ands	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004744:	0f92      	lsrs	r2, r2, #30
 8004746:	431a      	orrs	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004750:	0edb      	lsrs	r3, r3, #27
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	b2da      	uxtb	r2, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004762:	0e1b      	lsrs	r3, r3, #24
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	b2da      	uxtb	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004774:	0d5b      	lsrs	r3, r3, #21
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	b2da      	uxtb	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004786:	0c9b      	lsrs	r3, r3, #18
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	b2da      	uxtb	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004798:	0bdb      	lsrs	r3, r3, #15
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	7e1b      	ldrb	r3, [r3, #24]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	3302      	adds	r3, #2
 80047bc:	2201      	movs	r2, #1
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80047c6:	fb03 f202 	mul.w	r2, r3, r2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	7a1b      	ldrb	r3, [r3, #8]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	2201      	movs	r2, #1
 80047da:	409a      	lsls	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80047e8:	0a52      	lsrs	r2, r2, #9
 80047ea:	fb03 f202 	mul.w	r2, r3, r2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60
 80047fa:	e031      	b.n	8004860 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	2b01      	cmp	r3, #1
 8004802:	d11d      	bne.n	8004840 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	431a      	orrs	r2, r3
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	3301      	adds	r3, #1
 8004820:	029a      	lsls	r2, r3, #10
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004834:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	661a      	str	r2, [r3, #96]	; 0x60
 800483e:	e00f      	b.n	8004860 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a58      	ldr	r2, [pc, #352]	; (80049a8 <HAL_SD_GetCardCSD+0x344>)
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e09d      	b.n	800499c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004864:	0b9b      	lsrs	r3, r3, #14
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004876:	09db      	lsrs	r3, r3, #7
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487e:	b2da      	uxtb	r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800488e:	b2da      	uxtb	r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	0fdb      	lsrs	r3, r3, #31
 800489a:	b2da      	uxtb	r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	0f5b      	lsrs	r3, r3, #29
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	0e9b      	lsrs	r3, r3, #26
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	0d9b      	lsrs	r3, r3, #22
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	0d5b      	lsrs	r3, r3, #21
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	0bdb      	lsrs	r3, r3, #15
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	b2da      	uxtb	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	0b9b      	lsrs	r3, r3, #14
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	b2da      	uxtb	r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	0b5b      	lsrs	r3, r3, #13
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	0b1b      	lsrs	r3, r3, #12
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	b2da      	uxtb	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	0a9b      	lsrs	r3, r3, #10
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	b2da      	uxtb	r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	b2da      	uxtb	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800498a:	b2da      	uxtb	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	004005ff 	.word	0x004005ff

080049ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004a10:	f107 030c 	add.w	r3, r7, #12
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa7e 	bl	8004f18 <SD_SendStatus>
 8004a1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	0a5b      	lsrs	r3, r3, #9
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004a3a:	693b      	ldr	r3, [r7, #16]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	2b82      	cmp	r3, #130	; 0x82
 8004a82:	d111      	bne.n	8004aa8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 f985 	bl	8005d98 <SDMMC_CmdStopTransfer>
 8004a8e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fdd4 	bl	8004650 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0208 	bic.w	r2, r2, #8
 8004ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f001 fda5 	bl	8006620 <HAL_SD_RxCpltCallback>
#endif
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fd fde2 	bl	80026b8 <HAL_DMA_GetError>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d03e      	beq.n	8004b78 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d002      	beq.n	8004b16 <SD_DMAError+0x36>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d12d      	bne.n	8004b72 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <SD_DMAError+0xa0>)
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004b3a:	6978      	ldr	r0, [r7, #20]
 8004b3c:	f7ff ff62 	bl	8004a04 <HAL_SD_GetCardState>
 8004b40:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b06      	cmp	r3, #6
 8004b46:	d002      	beq.n	8004b4e <SD_DMAError+0x6e>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d10a      	bne.n	8004b64 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 f920 	bl	8005d98 <SDMMC_CmdStopTransfer>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004b72:	6978      	ldr	r0, [r7, #20]
 8004b74:	f7ff fd6c 	bl	8004650 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004b78:	bf00      	nop
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	004005ff 	.word	0x004005ff

08004b84 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff ff31 	bl	8004a04 <HAL_SD_GetCardState>
 8004ba2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d002      	beq.n	8004bbe <SD_DMATxAbort+0x3a>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b05      	cmp	r3, #5
 8004bbc:	d10a      	bne.n	8004bd4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 f8e8 	bl	8005d98 <SDMMC_CmdStopTransfer>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d103      	bne.n	8004be4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f001 fd0b 	bl	80065f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004be2:	e002      	b.n	8004bea <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff fd33 	bl	8004650 <HAL_SD_ErrorCallback>
}
 8004bea:	bf00      	nop
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fefa 	bl	8004a04 <HAL_SD_GetCardState>
 8004c10:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b06      	cmp	r3, #6
 8004c24:	d002      	beq.n	8004c2c <SD_DMARxAbort+0x3a>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b05      	cmp	r3, #5
 8004c2a:	d10a      	bne.n	8004c42 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 f8b1 	bl	8005d98 <SDMMC_CmdStopTransfer>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f001 fcd4 	bl	80065f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004c50:	e002      	b.n	8004c58 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fcfc 	bl	8004650 <HAL_SD_ErrorCallback>
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004c60:	b5b0      	push	{r4, r5, r7, lr}
 8004c62:	b094      	sub	sp, #80	; 0x50
 8004c64:	af04      	add	r7, sp, #16
 8004c66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 ff63 	bl	8005b3c <SDMMC_GetPowerState>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c80:	e0b8      	b.n	8004df4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d02f      	beq.n	8004cea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 f94a 	bl	8005f28 <SDMMC_CmdSendCID>
 8004c94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <SD_InitCard+0x40>
    {
      return errorstate;
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9e:	e0a9      	b.n	8004df4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 ff8d 	bl	8005bc6 <SDMMC_GetResponse>
 8004cac:	4602      	mov	r2, r0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2104      	movs	r1, #4
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 ff84 	bl	8005bc6 <SDMMC_GetResponse>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2108      	movs	r1, #8
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 ff7b 	bl	8005bc6 <SDMMC_GetResponse>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	210c      	movs	r1, #12
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 ff72 	bl	8005bc6 <SDMMC_GetResponse>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d00d      	beq.n	8004d0e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f107 020e 	add.w	r2, r7, #14
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 f950 	bl	8005fa2 <SDMMC_CmdSetRelAdd>
 8004d02:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <SD_InitCard+0xae>
    {
      return errorstate;
 8004d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0c:	e072      	b.n	8004df4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d036      	beq.n	8004d84 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f001 f91a 	bl	8005f64 <SDMMC_CmdSendCSD>
 8004d30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3a:	e05b      	b.n	8004df4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 ff3f 	bl	8005bc6 <SDMMC_GetResponse>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2104      	movs	r1, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 ff36 	bl	8005bc6 <SDMMC_GetResponse>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2108      	movs	r1, #8
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 ff2d 	bl	8005bc6 <SDMMC_GetResponse>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	210c      	movs	r1, #12
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 ff24 	bl	8005bc6 <SDMMC_GetResponse>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2104      	movs	r1, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 ff1b 	bl	8005bc6 <SDMMC_GetResponse>
 8004d90:	4603      	mov	r3, r0
 8004d92:	0d1a      	lsrs	r2, r3, #20
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004d98:	f107 0310 	add.w	r3, r7, #16
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fc60 	bl	8004664 <HAL_SD_GetCardCSD>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004daa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004dae:	e021      	b.n	8004df4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	2200      	movs	r2, #0
 8004dbc:	461c      	mov	r4, r3
 8004dbe:	4615      	mov	r5, r2
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	f001 f809 	bl	8005ddc <SDMMC_CmdSelDesel>
 8004dca:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <SD_InitCard+0x176>
  {
    return errorstate;
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd4:	e00e      	b.n	8004df4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681d      	ldr	r5, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	466c      	mov	r4, sp
 8004dde:	f103 0210 	add.w	r2, r3, #16
 8004de2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004de4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004de8:	3304      	adds	r3, #4
 8004dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dec:	4628      	mov	r0, r5
 8004dee:	f000 fe4d 	bl	8005a8c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3740      	adds	r7, #64	; 0x40
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bdb0      	pop	{r4, r5, r7, pc}

08004dfc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 f804 	bl	8005e22 <SDMMC_CmdGoIdleState>
 8004e1a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	e072      	b.n	8004f0c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 f817 	bl	8005e5e <SDMMC_CmdOperCond>
 8004e30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 ffed 	bl	8005e22 <SDMMC_CmdGoIdleState>
 8004e48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	e05b      	b.n	8004f0c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d137      	bne.n	8004ed2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 f817 	bl	8005e9c <SDMMC_CmdAppCommand>
 8004e6e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d02d      	beq.n	8004ed2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e7a:	e047      	b.n	8004f0c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 f80a 	bl	8005e9c <SDMMC_CmdAppCommand>
 8004e88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <SD_PowerON+0x98>
    {
      return errorstate;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	e03b      	b.n	8004f0c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	491e      	ldr	r1, [pc, #120]	; (8004f14 <SD_PowerON+0x118>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 f820 	bl	8005ee0 <SDMMC_CmdAppOperCommand>
 8004ea0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004eac:	e02e      	b.n	8004f0c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fe86 	bl	8005bc6 <SDMMC_GetResponse>
 8004eba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	0fdb      	lsrs	r3, r3, #31
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <SD_PowerON+0xcc>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <SD_PowerON+0xce>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]

    count++;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d802      	bhi.n	8004ee2 <SD_PowerON+0xe6>
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0cc      	beq.n	8004e7c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d902      	bls.n	8004ef2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ef0:	e00c      	b.n	8004f0c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	645a      	str	r2, [r3, #68]	; 0x44
 8004f02:	e002      	b.n	8004f0a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	c1100000 	.word	0xc1100000

08004f18 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004f28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f2c:	e018      	b.n	8004f60 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f001 f852 	bl	8005fe4 <SDMMC_CmdSendStatus>
 8004f40:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	e009      	b.n	8004f60 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fe37 	bl	8005bc6 <SDMMC_GetResponse>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d03f      	beq.n	8005002 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e033      	b.n	8004ff0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fda9 	bl	8005ae4 <SDMMC_ReadFIFO>
 8004f92:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	0c1b      	lsrs	r3, r3, #16
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	0e1b      	lsrs	r3, r3, #24
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	3301      	adds	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b07      	cmp	r3, #7
 8004ff4:	d9c8      	bls.n	8004f88 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005002:	bf00      	nop
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b086      	sub	sp, #24
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d043      	beq.n	80050ac <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	e037      	b.n	800509a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3b01      	subs	r3, #1
 800503a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	021a      	lsls	r2, r3, #8
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4313      	orrs	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	3b01      	subs	r3, #1
 8005052:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	041a      	lsls	r2, r3, #16
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4313      	orrs	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3301      	adds	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3b01      	subs	r3, #1
 800506a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	061a      	lsls	r2, r3, #24
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3b01      	subs	r3, #1
 8005082:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f107 0208 	add.w	r2, r7, #8
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fd35 	bl	8005afe <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	3301      	adds	r3, #1
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b07      	cmp	r3, #7
 800509e:	d9c4      	bls.n	800502a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80050ac:	bf00      	nop
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e040      	b.n	8005148 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fb ff7c 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2224      	movs	r2, #36	; 0x24
 80050e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8b0 	bl	8005258 <UART_SetConfig>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e022      	b.n	8005148 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fb08 	bl	8005720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800511e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800512e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fb8f 	bl	8005864 <UART_CheckIdleState>
 8005146:	4603      	mov	r3, r0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005164:	2b20      	cmp	r3, #32
 8005166:	d171      	bne.n	800524c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_UART_Transmit+0x24>
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e06a      	b.n	800524e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2221      	movs	r2, #33	; 0x21
 8005184:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005186:	f7fc f907 	bl	8001398 <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a4:	d108      	bne.n	80051b8 <HAL_UART_Transmit+0x68>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e003      	b.n	80051c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051c0:	e02c      	b.n	800521c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	2180      	movs	r1, #128	; 0x80
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fb96 	bl	80058fe <UART_WaitOnFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e038      	b.n	800524e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	3302      	adds	r3, #2
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	e007      	b.n	800520a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	781a      	ldrb	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	3301      	adds	r3, #1
 8005208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1cc      	bne.n	80051c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2200      	movs	r2, #0
 8005230:	2140      	movs	r1, #64	; 0x40
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fb63 	bl	80058fe <UART_WaitOnFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e005      	b.n	800524e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4ba6      	ldr	r3, [pc, #664]	; (800551c <UART_SetConfig+0x2c4>)
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6979      	ldr	r1, [r7, #20]
 800528c:	430b      	orrs	r3, r1
 800528e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a94      	ldr	r2, [pc, #592]	; (8005520 <UART_SetConfig+0x2c8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d120      	bne.n	8005316 <UART_SetConfig+0xbe>
 80052d4:	4b93      	ldr	r3, [pc, #588]	; (8005524 <UART_SetConfig+0x2cc>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d816      	bhi.n	8005310 <UART_SetConfig+0xb8>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x90>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	080052f9 	.word	0x080052f9
 80052ec:	08005305 	.word	0x08005305
 80052f0:	080052ff 	.word	0x080052ff
 80052f4:	0800530b 	.word	0x0800530b
 80052f8:	2301      	movs	r3, #1
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e150      	b.n	80055a0 <UART_SetConfig+0x348>
 80052fe:	2302      	movs	r3, #2
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e14d      	b.n	80055a0 <UART_SetConfig+0x348>
 8005304:	2304      	movs	r3, #4
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e14a      	b.n	80055a0 <UART_SetConfig+0x348>
 800530a:	2308      	movs	r3, #8
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e147      	b.n	80055a0 <UART_SetConfig+0x348>
 8005310:	2310      	movs	r3, #16
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	e144      	b.n	80055a0 <UART_SetConfig+0x348>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a83      	ldr	r2, [pc, #524]	; (8005528 <UART_SetConfig+0x2d0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d132      	bne.n	8005386 <UART_SetConfig+0x12e>
 8005320:	4b80      	ldr	r3, [pc, #512]	; (8005524 <UART_SetConfig+0x2cc>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d828      	bhi.n	8005380 <UART_SetConfig+0x128>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <UART_SetConfig+0xdc>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005369 	.word	0x08005369
 8005338:	08005381 	.word	0x08005381
 800533c:	08005381 	.word	0x08005381
 8005340:	08005381 	.word	0x08005381
 8005344:	08005375 	.word	0x08005375
 8005348:	08005381 	.word	0x08005381
 800534c:	08005381 	.word	0x08005381
 8005350:	08005381 	.word	0x08005381
 8005354:	0800536f 	.word	0x0800536f
 8005358:	08005381 	.word	0x08005381
 800535c:	08005381 	.word	0x08005381
 8005360:	08005381 	.word	0x08005381
 8005364:	0800537b 	.word	0x0800537b
 8005368:	2300      	movs	r3, #0
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e118      	b.n	80055a0 <UART_SetConfig+0x348>
 800536e:	2302      	movs	r3, #2
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e115      	b.n	80055a0 <UART_SetConfig+0x348>
 8005374:	2304      	movs	r3, #4
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e112      	b.n	80055a0 <UART_SetConfig+0x348>
 800537a:	2308      	movs	r3, #8
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e10f      	b.n	80055a0 <UART_SetConfig+0x348>
 8005380:	2310      	movs	r3, #16
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e10c      	b.n	80055a0 <UART_SetConfig+0x348>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a68      	ldr	r2, [pc, #416]	; (800552c <UART_SetConfig+0x2d4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d120      	bne.n	80053d2 <UART_SetConfig+0x17a>
 8005390:	4b64      	ldr	r3, [pc, #400]	; (8005524 <UART_SetConfig+0x2cc>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800539a:	2b30      	cmp	r3, #48	; 0x30
 800539c:	d013      	beq.n	80053c6 <UART_SetConfig+0x16e>
 800539e:	2b30      	cmp	r3, #48	; 0x30
 80053a0:	d814      	bhi.n	80053cc <UART_SetConfig+0x174>
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d009      	beq.n	80053ba <UART_SetConfig+0x162>
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d810      	bhi.n	80053cc <UART_SetConfig+0x174>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <UART_SetConfig+0x15c>
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d006      	beq.n	80053c0 <UART_SetConfig+0x168>
 80053b2:	e00b      	b.n	80053cc <UART_SetConfig+0x174>
 80053b4:	2300      	movs	r3, #0
 80053b6:	77fb      	strb	r3, [r7, #31]
 80053b8:	e0f2      	b.n	80055a0 <UART_SetConfig+0x348>
 80053ba:	2302      	movs	r3, #2
 80053bc:	77fb      	strb	r3, [r7, #31]
 80053be:	e0ef      	b.n	80055a0 <UART_SetConfig+0x348>
 80053c0:	2304      	movs	r3, #4
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e0ec      	b.n	80055a0 <UART_SetConfig+0x348>
 80053c6:	2308      	movs	r3, #8
 80053c8:	77fb      	strb	r3, [r7, #31]
 80053ca:	e0e9      	b.n	80055a0 <UART_SetConfig+0x348>
 80053cc:	2310      	movs	r3, #16
 80053ce:	77fb      	strb	r3, [r7, #31]
 80053d0:	e0e6      	b.n	80055a0 <UART_SetConfig+0x348>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a56      	ldr	r2, [pc, #344]	; (8005530 <UART_SetConfig+0x2d8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d120      	bne.n	800541e <UART_SetConfig+0x1c6>
 80053dc:	4b51      	ldr	r3, [pc, #324]	; (8005524 <UART_SetConfig+0x2cc>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053e6:	2bc0      	cmp	r3, #192	; 0xc0
 80053e8:	d013      	beq.n	8005412 <UART_SetConfig+0x1ba>
 80053ea:	2bc0      	cmp	r3, #192	; 0xc0
 80053ec:	d814      	bhi.n	8005418 <UART_SetConfig+0x1c0>
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d009      	beq.n	8005406 <UART_SetConfig+0x1ae>
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d810      	bhi.n	8005418 <UART_SetConfig+0x1c0>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <UART_SetConfig+0x1a8>
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	d006      	beq.n	800540c <UART_SetConfig+0x1b4>
 80053fe:	e00b      	b.n	8005418 <UART_SetConfig+0x1c0>
 8005400:	2300      	movs	r3, #0
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e0cc      	b.n	80055a0 <UART_SetConfig+0x348>
 8005406:	2302      	movs	r3, #2
 8005408:	77fb      	strb	r3, [r7, #31]
 800540a:	e0c9      	b.n	80055a0 <UART_SetConfig+0x348>
 800540c:	2304      	movs	r3, #4
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e0c6      	b.n	80055a0 <UART_SetConfig+0x348>
 8005412:	2308      	movs	r3, #8
 8005414:	77fb      	strb	r3, [r7, #31]
 8005416:	e0c3      	b.n	80055a0 <UART_SetConfig+0x348>
 8005418:	2310      	movs	r3, #16
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e0c0      	b.n	80055a0 <UART_SetConfig+0x348>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a44      	ldr	r2, [pc, #272]	; (8005534 <UART_SetConfig+0x2dc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d125      	bne.n	8005474 <UART_SetConfig+0x21c>
 8005428:	4b3e      	ldr	r3, [pc, #248]	; (8005524 <UART_SetConfig+0x2cc>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005436:	d017      	beq.n	8005468 <UART_SetConfig+0x210>
 8005438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543c:	d817      	bhi.n	800546e <UART_SetConfig+0x216>
 800543e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005442:	d00b      	beq.n	800545c <UART_SetConfig+0x204>
 8005444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005448:	d811      	bhi.n	800546e <UART_SetConfig+0x216>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <UART_SetConfig+0x1fe>
 800544e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005452:	d006      	beq.n	8005462 <UART_SetConfig+0x20a>
 8005454:	e00b      	b.n	800546e <UART_SetConfig+0x216>
 8005456:	2300      	movs	r3, #0
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e0a1      	b.n	80055a0 <UART_SetConfig+0x348>
 800545c:	2302      	movs	r3, #2
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e09e      	b.n	80055a0 <UART_SetConfig+0x348>
 8005462:	2304      	movs	r3, #4
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e09b      	b.n	80055a0 <UART_SetConfig+0x348>
 8005468:	2308      	movs	r3, #8
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e098      	b.n	80055a0 <UART_SetConfig+0x348>
 800546e:	2310      	movs	r3, #16
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e095      	b.n	80055a0 <UART_SetConfig+0x348>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <UART_SetConfig+0x2e0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d125      	bne.n	80054ca <UART_SetConfig+0x272>
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <UART_SetConfig+0x2cc>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800548c:	d017      	beq.n	80054be <UART_SetConfig+0x266>
 800548e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005492:	d817      	bhi.n	80054c4 <UART_SetConfig+0x26c>
 8005494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005498:	d00b      	beq.n	80054b2 <UART_SetConfig+0x25a>
 800549a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549e:	d811      	bhi.n	80054c4 <UART_SetConfig+0x26c>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <UART_SetConfig+0x254>
 80054a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a8:	d006      	beq.n	80054b8 <UART_SetConfig+0x260>
 80054aa:	e00b      	b.n	80054c4 <UART_SetConfig+0x26c>
 80054ac:	2301      	movs	r3, #1
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e076      	b.n	80055a0 <UART_SetConfig+0x348>
 80054b2:	2302      	movs	r3, #2
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e073      	b.n	80055a0 <UART_SetConfig+0x348>
 80054b8:	2304      	movs	r3, #4
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e070      	b.n	80055a0 <UART_SetConfig+0x348>
 80054be:	2308      	movs	r3, #8
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e06d      	b.n	80055a0 <UART_SetConfig+0x348>
 80054c4:	2310      	movs	r3, #16
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e06a      	b.n	80055a0 <UART_SetConfig+0x348>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	; (800553c <UART_SetConfig+0x2e4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d138      	bne.n	8005546 <UART_SetConfig+0x2ee>
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <UART_SetConfig+0x2cc>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e2:	d017      	beq.n	8005514 <UART_SetConfig+0x2bc>
 80054e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e8:	d82a      	bhi.n	8005540 <UART_SetConfig+0x2e8>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	d00b      	beq.n	8005508 <UART_SetConfig+0x2b0>
 80054f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f4:	d824      	bhi.n	8005540 <UART_SetConfig+0x2e8>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <UART_SetConfig+0x2aa>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d006      	beq.n	800550e <UART_SetConfig+0x2b6>
 8005500:	e01e      	b.n	8005540 <UART_SetConfig+0x2e8>
 8005502:	2300      	movs	r3, #0
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e04b      	b.n	80055a0 <UART_SetConfig+0x348>
 8005508:	2302      	movs	r3, #2
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e048      	b.n	80055a0 <UART_SetConfig+0x348>
 800550e:	2304      	movs	r3, #4
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e045      	b.n	80055a0 <UART_SetConfig+0x348>
 8005514:	2308      	movs	r3, #8
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e042      	b.n	80055a0 <UART_SetConfig+0x348>
 800551a:	bf00      	nop
 800551c:	efff69f3 	.word	0xefff69f3
 8005520:	40011000 	.word	0x40011000
 8005524:	40023800 	.word	0x40023800
 8005528:	40004400 	.word	0x40004400
 800552c:	40004800 	.word	0x40004800
 8005530:	40004c00 	.word	0x40004c00
 8005534:	40005000 	.word	0x40005000
 8005538:	40011400 	.word	0x40011400
 800553c:	40007800 	.word	0x40007800
 8005540:	2310      	movs	r3, #16
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e02c      	b.n	80055a0 <UART_SetConfig+0x348>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a72      	ldr	r2, [pc, #456]	; (8005714 <UART_SetConfig+0x4bc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d125      	bne.n	800559c <UART_SetConfig+0x344>
 8005550:	4b71      	ldr	r3, [pc, #452]	; (8005718 <UART_SetConfig+0x4c0>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800555a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800555e:	d017      	beq.n	8005590 <UART_SetConfig+0x338>
 8005560:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005564:	d817      	bhi.n	8005596 <UART_SetConfig+0x33e>
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556a:	d00b      	beq.n	8005584 <UART_SetConfig+0x32c>
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005570:	d811      	bhi.n	8005596 <UART_SetConfig+0x33e>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <UART_SetConfig+0x326>
 8005576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800557a:	d006      	beq.n	800558a <UART_SetConfig+0x332>
 800557c:	e00b      	b.n	8005596 <UART_SetConfig+0x33e>
 800557e:	2300      	movs	r3, #0
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e00d      	b.n	80055a0 <UART_SetConfig+0x348>
 8005584:	2302      	movs	r3, #2
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e00a      	b.n	80055a0 <UART_SetConfig+0x348>
 800558a:	2304      	movs	r3, #4
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e007      	b.n	80055a0 <UART_SetConfig+0x348>
 8005590:	2308      	movs	r3, #8
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e004      	b.n	80055a0 <UART_SetConfig+0x348>
 8005596:	2310      	movs	r3, #16
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e001      	b.n	80055a0 <UART_SetConfig+0x348>
 800559c:	2310      	movs	r3, #16
 800559e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a8:	d15b      	bne.n	8005662 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d828      	bhi.n	8005602 <UART_SetConfig+0x3aa>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x360>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055e5 	.word	0x080055e5
 80055c0:	080055ed 	.word	0x080055ed
 80055c4:	08005603 	.word	0x08005603
 80055c8:	080055f3 	.word	0x080055f3
 80055cc:	08005603 	.word	0x08005603
 80055d0:	08005603 	.word	0x08005603
 80055d4:	08005603 	.word	0x08005603
 80055d8:	080055fb 	.word	0x080055fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055dc:	f7fd fff2 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 80055e0:	61b8      	str	r0, [r7, #24]
        break;
 80055e2:	e013      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e4:	f7fe f802 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 80055e8:	61b8      	str	r0, [r7, #24]
        break;
 80055ea:	e00f      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ec:	4b4b      	ldr	r3, [pc, #300]	; (800571c <UART_SetConfig+0x4c4>)
 80055ee:	61bb      	str	r3, [r7, #24]
        break;
 80055f0:	e00c      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f2:	f7fd fed5 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 80055f6:	61b8      	str	r0, [r7, #24]
        break;
 80055f8:	e008      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fe:	61bb      	str	r3, [r7, #24]
        break;
 8005600:	e004      	b.n	800560c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	77bb      	strb	r3, [r7, #30]
        break;
 800560a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d074      	beq.n	80056fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	005a      	lsls	r2, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	441a      	add	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b0f      	cmp	r3, #15
 800562c:	d916      	bls.n	800565c <UART_SetConfig+0x404>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d212      	bcs.n	800565c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f023 030f 	bic.w	r3, r3, #15
 800563e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	b29b      	uxth	r3, r3
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	b29a      	uxth	r2, r3
 800564c:	89fb      	ldrh	r3, [r7, #14]
 800564e:	4313      	orrs	r3, r2
 8005650:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	89fa      	ldrh	r2, [r7, #14]
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	e04f      	b.n	80056fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	77bb      	strb	r3, [r7, #30]
 8005660:	e04c      	b.n	80056fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005662:	7ffb      	ldrb	r3, [r7, #31]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d828      	bhi.n	80056ba <UART_SetConfig+0x462>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x418>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005695 	.word	0x08005695
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a5 	.word	0x080056a5
 800567c:	080056bb 	.word	0x080056bb
 8005680:	080056ab 	.word	0x080056ab
 8005684:	080056bb 	.word	0x080056bb
 8005688:	080056bb 	.word	0x080056bb
 800568c:	080056bb 	.word	0x080056bb
 8005690:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005694:	f7fd ff96 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8005698:	61b8      	str	r0, [r7, #24]
        break;
 800569a:	e013      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7fd ffa6 	bl	80035ec <HAL_RCC_GetPCLK2Freq>
 80056a0:	61b8      	str	r0, [r7, #24]
        break;
 80056a2:	e00f      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b1d      	ldr	r3, [pc, #116]	; (800571c <UART_SetConfig+0x4c4>)
 80056a6:	61bb      	str	r3, [r7, #24]
        break;
 80056a8:	e00c      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7fd fe79 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 80056ae:	61b8      	str	r0, [r7, #24]
        break;
 80056b0:	e008      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b6:	61bb      	str	r3, [r7, #24]
        break;
 80056b8:	e004      	b.n	80056c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	77bb      	strb	r3, [r7, #30]
        break;
 80056c2:	bf00      	nop
    }

    if (pclk != 0U)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	085a      	lsrs	r2, r3, #1
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	441a      	add	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b0f      	cmp	r3, #15
 80056e2:	d909      	bls.n	80056f8 <UART_SetConfig+0x4a0>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ea:	d205      	bcs.n	80056f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	e001      	b.n	80056fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005708:	7fbb      	ldrb	r3, [r7, #30]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3720      	adds	r7, #32
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40007c00 	.word	0x40007c00
 8005718:	40023800 	.word	0x40023800
 800571c:	00f42400 	.word	0x00f42400

08005720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01a      	beq.n	8005836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581e:	d10a      	bne.n	8005836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]
  }
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af02      	add	r7, sp, #8
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005874:	f7fb fd90 	bl	8001398 <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b08      	cmp	r3, #8
 8005886:	d10e      	bne.n	80058a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f831 	bl	80058fe <UART_WaitOnFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e027      	b.n	80058f6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d10e      	bne.n	80058d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f81b 	bl	80058fe <UART_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e011      	b.n	80058f6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b09c      	sub	sp, #112	; 0x70
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	4613      	mov	r3, r2
 800590c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590e:	e0a7      	b.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005916:	f000 80a3 	beq.w	8005a60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fb fd3d 	bl	8001398 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <UART_WaitOnFlagUntilTimeout+0x32>
 800592a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800592c:	2b00      	cmp	r3, #0
 800592e:	d13f      	bne.n	80059b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800593e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005940:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005944:	667b      	str	r3, [r7, #100]	; 0x64
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800594e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005950:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800595c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e6      	bne.n	8005930 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	663b      	str	r3, [r7, #96]	; 0x60
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3308      	adds	r3, #8
 8005980:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005982:	64ba      	str	r2, [r7, #72]	; 0x48
 8005984:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e5      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e068      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d050      	beq.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059cc:	d148      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
 80059f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e6      	bne.n	80059d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	613b      	str	r3, [r7, #16]
   return(result);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3308      	adds	r3, #8
 8005a28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a2a:	623a      	str	r2, [r7, #32]
 8005a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	69f9      	ldr	r1, [r7, #28]
 8005a30:	6a3a      	ldr	r2, [r7, #32]
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e010      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	f43f af48 	beq.w	8005910 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3770      	adds	r7, #112	; 0x70
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	f107 001c 	add.w	r0, r7, #28
 8005a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005aa2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005aa6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005aaa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005aae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005ab2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005ab6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <SDMMC_Init+0x54>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	b004      	add	sp, #16
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	ffff8100 	.word	0xffff8100

08005ae4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0303 	and.w	r3, r3, #3
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b76:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005b7c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005b82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <SDMMC_SendCommand+0x50>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	fffff000 	.word	0xfffff000

08005bac <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	b2db      	uxtb	r3, r3
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3314      	adds	r3, #20
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	4413      	add	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
}  
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c12:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005c18:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005c1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0

}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005c52:	2310      	movs	r3, #16
 8005c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c56:	2340      	movs	r3, #64	; 0x40
 8005c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c64:	f107 0308 	add.w	r3, r7, #8
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff ff74 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c74:	2110      	movs	r1, #16
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f9d6 	bl	8006028 <SDMMC_GetCmdResp1>
 8005c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005c96:	2311      	movs	r3, #17
 8005c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ca8:	f107 0308 	add.w	r3, r7, #8
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff ff52 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb8:	2111      	movs	r1, #17
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9b4 	bl	8006028 <SDMMC_GetCmdResp1>
 8005cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005cda:	2312      	movs	r3, #18
 8005cdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cde:	2340      	movs	r3, #64	; 0x40
 8005ce0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cec:	f107 0308 	add.w	r3, r7, #8
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff ff30 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfc:	2112      	movs	r1, #18
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f992 	bl	8006028 <SDMMC_GetCmdResp1>
 8005d04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d06:	69fb      	ldr	r3, [r7, #28]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005d1e:	2318      	movs	r3, #24
 8005d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d22:	2340      	movs	r3, #64	; 0x40
 8005d24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d30:	f107 0308 	add.w	r3, r7, #8
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ff0e 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d40:	2118      	movs	r1, #24
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f970 	bl	8006028 <SDMMC_GetCmdResp1>
 8005d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3720      	adds	r7, #32
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005d62:	2319      	movs	r3, #25
 8005d64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d66:	2340      	movs	r3, #64	; 0x40
 8005d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d74:	f107 0308 	add.w	r3, r7, #8
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff feec 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d84:	2119      	movs	r1, #25
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f94e 	bl	8006028 <SDMMC_GetCmdResp1>
 8005d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3720      	adds	r7, #32
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005da4:	230c      	movs	r3, #12
 8005da6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005da8:	2340      	movs	r3, #64	; 0x40
 8005daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005db4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff fecb 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005dc2:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <SDMMC_CmdStopTransfer+0x40>)
 8005dc4:	210c      	movs	r1, #12
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f92e 	bl	8006028 <SDMMC_GetCmdResp1>
 8005dcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dce:	69fb      	ldr	r3, [r7, #28]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3720      	adds	r7, #32
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	05f5e100 	.word	0x05f5e100

08005ddc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	; 0x28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005dec:	2307      	movs	r3, #7
 8005dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005df0:	2340      	movs	r3, #64	; 0x40
 8005df2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dfc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dfe:	f107 0310 	add.w	r3, r7, #16
 8005e02:	4619      	mov	r1, r3
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff fea7 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0e:	2107      	movs	r1, #7
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f909 	bl	8006028 <SDMMC_GetCmdResp1>
 8005e16:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3728      	adds	r7, #40	; 0x28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b088      	sub	sp, #32
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e40:	f107 0308 	add.w	r3, r7, #8
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff fe86 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fb23 	bl	8006498 <SDMMC_GetCmdError>
 8005e52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e54:	69fb      	ldr	r3, [r7, #28]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b088      	sub	sp, #32
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005e66:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005e6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e70:	2340      	movs	r3, #64	; 0x40
 8005e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e74:	2300      	movs	r3, #0
 8005e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e7e:	f107 0308 	add.w	r3, r7, #8
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fe67 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fab6 	bl	80063fc <SDMMC_GetCmdResp7>
 8005e90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e92:	69fb      	ldr	r3, [r7, #28]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3720      	adds	r7, #32
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005eaa:	2337      	movs	r3, #55	; 0x37
 8005eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005eae:	2340      	movs	r3, #64	; 0x40
 8005eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ebc:	f107 0308 	add.w	r3, r7, #8
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff fe48 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ecc:	2137      	movs	r1, #55	; 0x37
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f8aa 	bl	8006028 <SDMMC_GetCmdResp1>
 8005ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	4b0d      	ldr	r3, [pc, #52]	; (8005f24 <SDMMC_CmdAppOperCommand+0x44>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005ef2:	2329      	movs	r3, #41	; 0x29
 8005ef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ef6:	2340      	movs	r3, #64	; 0x40
 8005ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f04:	f107 0308 	add.w	r3, r7, #8
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff fe24 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f9bf 	bl	8006294 <SDMMC_GetCmdResp3>
 8005f16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f18:	69fb      	ldr	r3, [r7, #28]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	80100000 	.word	0x80100000

08005f28 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005f34:	2302      	movs	r3, #2
 8005f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005f38:	23c0      	movs	r3, #192	; 0xc0
 8005f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f46:	f107 0308 	add.w	r3, r7, #8
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff fe03 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f956 	bl	8006204 <SDMMC_GetCmdResp2>
 8005f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005f72:	2309      	movs	r3, #9
 8005f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005f76:	23c0      	movs	r3, #192	; 0xc0
 8005f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f84:	f107 0308 	add.w	r3, r7, #8
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fde4 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f937 	bl	8006204 <SDMMC_GetCmdResp2>
 8005f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f98:	69fb      	ldr	r3, [r7, #28]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b088      	sub	sp, #32
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fb4:	2340      	movs	r3, #64	; 0x40
 8005fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fc2:	f107 0308 	add.w	r3, r7, #8
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fdc5 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	2103      	movs	r1, #3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f99c 	bl	8006310 <SDMMC_GetCmdResp6>
 8005fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fda:	69fb      	ldr	r3, [r7, #28]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005ff2:	230d      	movs	r3, #13
 8005ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ff6:	2340      	movs	r3, #64	; 0x40
 8005ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006004:	f107 0308 	add.w	r3, r7, #8
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fda4 	bl	8005b58 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006010:	f241 3288 	movw	r2, #5000	; 0x1388
 8006014:	210d      	movs	r1, #13
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f806 	bl	8006028 <SDMMC_GetCmdResp1>
 800601c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800601e:	69fb      	ldr	r3, [r7, #28]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	460b      	mov	r3, r1
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006036:	4b70      	ldr	r3, [pc, #448]	; (80061f8 <SDMMC_GetCmdResp1+0x1d0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a70      	ldr	r2, [pc, #448]	; (80061fc <SDMMC_GetCmdResp1+0x1d4>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	0a5a      	lsrs	r2, r3, #9
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	fb02 f303 	mul.w	r3, r2, r3
 8006048:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	1e5a      	subs	r2, r3, #1
 800604e:	61fa      	str	r2, [r7, #28]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006054:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006058:	e0c9      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0ef      	beq.n	800604a <SDMMC_GetCmdResp1+0x22>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1ea      	bne.n	800604a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2204      	movs	r2, #4
 8006084:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006086:	2304      	movs	r3, #4
 8006088:	e0b1      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800609c:	2301      	movs	r3, #1
 800609e:	e0a6      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	22c5      	movs	r2, #197	; 0xc5
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff fd80 	bl	8005bac <SDMMC_GetCommandResponse>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	7afb      	ldrb	r3, [r7, #11]
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d001      	beq.n	80060ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e099      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80060ba:	2100      	movs	r1, #0
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff fd82 	bl	8005bc6 <SDMMC_GetResponse>
 80060c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4b4e      	ldr	r3, [pc, #312]	; (8006200 <SDMMC_GetCmdResp1+0x1d8>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	e08d      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da02      	bge.n	80060de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80060d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060dc:	e087      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80060e8:	2340      	movs	r3, #64	; 0x40
 80060ea:	e080      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	e079      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006108:	e071      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006118:	e069      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006128:	e061      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006138:	e059      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006148:	e051      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006158:	e049      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006168:	e041      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006178:	e039      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006188:	e031      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006194:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006198:	e029      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80061a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80061a8:	e021      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80061b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061b8:	e019      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80061c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061c8:	e011      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80061d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061d8:	e009      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80061e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80061e8:	e001      	b.n	80061ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80061ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3720      	adds	r7, #32
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000000 	.word	0x20000000
 80061fc:	10624dd3 	.word	0x10624dd3
 8006200:	fdffe008 	.word	0xfdffe008

08006204 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800620c:	4b1f      	ldr	r3, [pc, #124]	; (800628c <SDMMC_GetCmdResp2+0x88>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <SDMMC_GetCmdResp2+0x8c>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	0a5b      	lsrs	r3, r3, #9
 8006218:	f241 3288 	movw	r2, #5000	; 0x1388
 800621c:	fb02 f303 	mul.w	r3, r2, r3
 8006220:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1e5a      	subs	r2, r3, #1
 8006226:	60fa      	str	r2, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800622c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006230:	e026      	b.n	8006280 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0ef      	beq.n	8006222 <SDMMC_GetCmdResp2+0x1e>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1ea      	bne.n	8006222 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2204      	movs	r2, #4
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800625e:	2304      	movs	r3, #4
 8006260:	e00e      	b.n	8006280 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006274:	2301      	movs	r3, #1
 8006276:	e003      	b.n	8006280 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	22c5      	movs	r2, #197	; 0xc5
 800627c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	20000000 	.word	0x20000000
 8006290:	10624dd3 	.word	0x10624dd3

08006294 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800629c:	4b1a      	ldr	r3, [pc, #104]	; (8006308 <SDMMC_GetCmdResp3+0x74>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1a      	ldr	r2, [pc, #104]	; (800630c <SDMMC_GetCmdResp3+0x78>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	0a5b      	lsrs	r3, r3, #9
 80062a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ac:	fb02 f303 	mul.w	r3, r2, r3
 80062b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1e5a      	subs	r2, r3, #1
 80062b6:	60fa      	str	r2, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062c0:	e01b      	b.n	80062fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0ef      	beq.n	80062b2 <SDMMC_GetCmdResp3+0x1e>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1ea      	bne.n	80062b2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2204      	movs	r2, #4
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062ee:	2304      	movs	r3, #4
 80062f0:	e003      	b.n	80062fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	22c5      	movs	r2, #197	; 0xc5
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	20000000 	.word	0x20000000
 800630c:	10624dd3 	.word	0x10624dd3

08006310 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	460b      	mov	r3, r1
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800631e:	4b35      	ldr	r3, [pc, #212]	; (80063f4 <SDMMC_GetCmdResp6+0xe4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a35      	ldr	r2, [pc, #212]	; (80063f8 <SDMMC_GetCmdResp6+0xe8>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	0a5b      	lsrs	r3, r3, #9
 800632a:	f241 3288 	movw	r2, #5000	; 0x1388
 800632e:	fb02 f303 	mul.w	r3, r2, r3
 8006332:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	1e5a      	subs	r2, r3, #1
 8006338:	61fa      	str	r2, [r7, #28]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800633e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006342:	e052      	b.n	80063ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006348:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ef      	beq.n	8006334 <SDMMC_GetCmdResp6+0x24>
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1ea      	bne.n	8006334 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2204      	movs	r2, #4
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006370:	2304      	movs	r3, #4
 8006372:	e03a      	b.n	80063ea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006386:	2301      	movs	r3, #1
 8006388:	e02f      	b.n	80063ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7ff fc0e 	bl	8005bac <SDMMC_GetCommandResponse>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	4293      	cmp	r3, r2
 8006398:	d001      	beq.n	800639e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800639a:	2301      	movs	r3, #1
 800639c:	e025      	b.n	80063ea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	22c5      	movs	r2, #197	; 0xc5
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80063a4:	2100      	movs	r1, #0
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff fc0d 	bl	8005bc6 <SDMMC_GetResponse>
 80063ac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	0c1b      	lsrs	r3, r3, #16
 80063bc:	b29a      	uxth	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e011      	b.n	80063ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80063d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063d4:	e009      	b.n	80063ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80063e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063e4:	e001      	b.n	80063ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3720      	adds	r7, #32
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000000 	.word	0x20000000
 80063f8:	10624dd3 	.word	0x10624dd3

080063fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006404:	4b22      	ldr	r3, [pc, #136]	; (8006490 <SDMMC_GetCmdResp7+0x94>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a22      	ldr	r2, [pc, #136]	; (8006494 <SDMMC_GetCmdResp7+0x98>)
 800640a:	fba2 2303 	umull	r2, r3, r2, r3
 800640e:	0a5b      	lsrs	r3, r3, #9
 8006410:	f241 3288 	movw	r2, #5000	; 0x1388
 8006414:	fb02 f303 	mul.w	r3, r2, r3
 8006418:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1e5a      	subs	r2, r3, #1
 800641e:	60fa      	str	r2, [r7, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006424:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006428:	e02c      	b.n	8006484 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0ef      	beq.n	800641a <SDMMC_GetCmdResp7+0x1e>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1ea      	bne.n	800641a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2204      	movs	r2, #4
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006456:	2304      	movs	r3, #4
 8006458:	e014      	b.n	8006484 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800646c:	2301      	movs	r3, #1
 800646e:	e009      	b.n	8006484 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2240      	movs	r2, #64	; 0x40
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006482:	2300      	movs	r3, #0
  
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20000000 	.word	0x20000000
 8006494:	10624dd3 	.word	0x10624dd3

08006498 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <SDMMC_GetCmdError+0x50>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a11      	ldr	r2, [pc, #68]	; (80064ec <SDMMC_GetCmdError+0x54>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	0a5b      	lsrs	r3, r3, #9
 80064ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b0:	fb02 f303 	mul.w	r3, r2, r3
 80064b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1e5a      	subs	r2, r3, #1
 80064ba:	60fa      	str	r2, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d102      	bne.n	80064c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064c4:	e009      	b.n	80064da <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f1      	beq.n	80064b6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	22c5      	movs	r2, #197	; 0xc5
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	20000000 	.word	0x20000000
 80064ec:	10624dd3 	.word	0x10624dd3

080064f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80064f4:	4904      	ldr	r1, [pc, #16]	; (8006508 <MX_FATFS_Init+0x18>)
 80064f6:	4805      	ldr	r0, [pc, #20]	; (800650c <MX_FATFS_Init+0x1c>)
 80064f8:	f002 fa88 	bl	8008a0c <FATFS_LinkDriver>
 80064fc:	4603      	mov	r3, r0
 80064fe:	461a      	mov	r2, r3
 8006500:	4b03      	ldr	r3, [pc, #12]	; (8006510 <MX_FATFS_Init+0x20>)
 8006502:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006504:	bf00      	nop
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200022a4 	.word	0x200022a4
 800650c:	08009cf4 	.word	0x08009cf4
 8006510:	200022a0 	.word	0x200022a0

08006514 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006518:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800651a:	4618      	mov	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800652e:	f000 f888 	bl	8006642 <BSP_SD_IsDetected>
 8006532:	4603      	mov	r3, r0
 8006534:	2b01      	cmp	r3, #1
 8006536:	d001      	beq.n	800653c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006538:	2302      	movs	r3, #2
 800653a:	e005      	b.n	8006548 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800653c:	4804      	ldr	r0, [pc, #16]	; (8006550 <BSP_SD_Init+0x2c>)
 800653e:	f7fd fc91 	bl	8003e64 <HAL_SD_Init>
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006546:	79fb      	ldrb	r3, [r7, #7]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200000b4 	.word	0x200000b4

08006554 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	68f9      	ldr	r1, [r7, #12]
 800656a:	4806      	ldr	r0, [pc, #24]	; (8006584 <BSP_SD_ReadBlocks_DMA+0x30>)
 800656c:	f7fd fd32 	bl	8003fd4 <HAL_SD_ReadBlocks_DMA>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	200000b4 	.word	0x200000b4

08006588 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	4806      	ldr	r0, [pc, #24]	; (80065b8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80065a0:	f7fd fdfa 	bl	8004198 <HAL_SD_WriteBlocks_DMA>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	200000b4 	.word	0x200000b4

080065bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80065c0:	4805      	ldr	r0, [pc, #20]	; (80065d8 <BSP_SD_GetCardState+0x1c>)
 80065c2:	f7fe fa1f 	bl	8004a04 <HAL_SD_GetCardState>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	200000b4 	.word	0x200000b4

080065dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4803      	ldr	r0, [pc, #12]	; (80065f4 <BSP_SD_GetCardInfo+0x18>)
 80065e8:	f7fe f9e0 	bl	80049ac <HAL_SD_GetCardInfo>
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	200000b4 	.word	0x200000b4

080065f8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006600:	f000 f818 	bl	8006634 <BSP_SD_AbortCallback>
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006614:	f000 f9a8 	bl	8006968 <BSP_SD_WriteCpltCallback>
}
 8006618:	bf00      	nop
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006628:	f000 f9aa 	bl	8006980 <BSP_SD_ReadCpltCallback>
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0

}
 8006638:	bf00      	nop
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006648:	2301      	movs	r3, #1
 800664a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800664c:	f000 f80c 	bl	8006668 <BSP_PlatformIsDetected>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006656:	2300      	movs	r3, #0
 8006658:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	b2db      	uxtb	r3, r3
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800666e:	2301      	movs	r3, #1
 8006670:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8006672:	2104      	movs	r1, #4
 8006674:	4806      	ldr	r0, [pc, #24]	; (8006690 <BSP_PlatformIsDetected+0x28>)
 8006676:	f7fc fab7 	bl	8002be8 <HAL_GPIO_ReadPin>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d001      	beq.n	8006684 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006680:	2300      	movs	r3, #0
 8006682:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006684:	79fb      	ldrb	r3, [r7, #7]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40021800 	.word	0x40021800

08006694 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800669c:	f7fa fe7c 	bl	8001398 <HAL_GetTick>
 80066a0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80066a2:	e006      	b.n	80066b2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80066a4:	f7ff ff8a 	bl	80065bc <BSP_SD_GetCardState>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	e009      	b.n	80066c6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80066b2:	f7fa fe71 	bl	8001398 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d8f0      	bhi.n	80066a4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80066c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80066da:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <SD_CheckStatus+0x38>)
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80066e0:	f7ff ff6c 	bl	80065bc <BSP_SD_GetCardState>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d107      	bne.n	80066fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80066ea:	4b07      	ldr	r3, [pc, #28]	; (8006708 <SD_CheckStatus+0x38>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	4b04      	ldr	r3, [pc, #16]	; (8006708 <SD_CheckStatus+0x38>)
 80066f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <SD_CheckStatus+0x38>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b2db      	uxtb	r3, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20000009 	.word	0x20000009

0800670c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006716:	f7ff ff05 	bl	8006524 <BSP_SD_Init>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff ffd4 	bl	80066d0 <SD_CheckStatus>
 8006728:	4603      	mov	r3, r0
 800672a:	461a      	mov	r2, r3
 800672c:	4b04      	ldr	r3, [pc, #16]	; (8006740 <SD_initialize+0x34>)
 800672e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006730:	4b03      	ldr	r3, [pc, #12]	; (8006740 <SD_initialize+0x34>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	b2db      	uxtb	r3, r3
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000009 	.word	0x20000009

08006744 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff ffbd 	bl	80066d0 <SD_CheckStatus>
 8006756:	4603      	mov	r3, r0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006774:	f247 5030 	movw	r0, #30000	; 0x7530
 8006778:	f7ff ff8c 	bl	8006694 <SD_CheckStatusWithTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	da01      	bge.n	8006786 <SD_read+0x26>
  {
    return res;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	e03b      	b.n	80067fe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	68b8      	ldr	r0, [r7, #8]
 800678c:	f7ff fee2 	bl	8006554 <BSP_SD_ReadBlocks_DMA>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d132      	bne.n	80067fc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006796:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <SD_read+0xa8>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800679c:	f7fa fdfc 	bl	8001398 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80067a2:	bf00      	nop
 80067a4:	4b18      	ldr	r3, [pc, #96]	; (8006808 <SD_read+0xa8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d108      	bne.n	80067be <SD_read+0x5e>
 80067ac:	f7fa fdf4 	bl	8001398 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f247 522f 	movw	r2, #29999	; 0x752f
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d9f2      	bls.n	80067a4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80067be:	4b12      	ldr	r3, [pc, #72]	; (8006808 <SD_read+0xa8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d102      	bne.n	80067cc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	75fb      	strb	r3, [r7, #23]
 80067ca:	e017      	b.n	80067fc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <SD_read+0xa8>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80067d2:	f7fa fde1 	bl	8001398 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80067d8:	e007      	b.n	80067ea <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80067da:	f7ff feef 	bl	80065bc <BSP_SD_GetCardState>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <SD_read+0x8a>
          {
            res = RES_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80067e8:	e008      	b.n	80067fc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80067ea:	f7fa fdd5 	bl	8001398 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	f247 522f 	movw	r2, #29999	; 0x752f
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d9ee      	bls.n	80067da <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	2000270c 	.word	0x2000270c

0800680c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4603      	mov	r3, r0
 800681a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006820:	4b24      	ldr	r3, [pc, #144]	; (80068b4 <SD_write+0xa8>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006826:	f247 5030 	movw	r0, #30000	; 0x7530
 800682a:	f7ff ff33 	bl	8006694 <SD_CheckStatusWithTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	da01      	bge.n	8006838 <SD_write+0x2c>
  {
    return res;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	e038      	b.n	80068aa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	68b8      	ldr	r0, [r7, #8]
 800683e:	f7ff fea3 	bl	8006588 <BSP_SD_WriteBlocks_DMA>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d12f      	bne.n	80068a8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006848:	f7fa fda6 	bl	8001398 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800684e:	bf00      	nop
 8006850:	4b18      	ldr	r3, [pc, #96]	; (80068b4 <SD_write+0xa8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d108      	bne.n	800686a <SD_write+0x5e>
 8006858:	f7fa fd9e 	bl	8001398 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	f247 522f 	movw	r2, #29999	; 0x752f
 8006866:	4293      	cmp	r3, r2
 8006868:	d9f2      	bls.n	8006850 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <SD_write+0xa8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d102      	bne.n	8006878 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
 8006876:	e017      	b.n	80068a8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006878:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <SD_write+0xa8>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800687e:	f7fa fd8b 	bl	8001398 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006884:	e007      	b.n	8006896 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006886:	f7ff fe99 	bl	80065bc <BSP_SD_GetCardState>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <SD_write+0x8a>
          {
            res = RES_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	75fb      	strb	r3, [r7, #23]
            break;
 8006894:	e008      	b.n	80068a8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006896:	f7fa fd7f 	bl	8001398 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d9ee      	bls.n	8006886 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20002708 	.word	0x20002708

080068b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08c      	sub	sp, #48	; 0x30
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	603a      	str	r2, [r7, #0]
 80068c2:	71fb      	strb	r3, [r7, #7]
 80068c4:	460b      	mov	r3, r1
 80068c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80068ce:	4b25      	ldr	r3, [pc, #148]	; (8006964 <SD_ioctl+0xac>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <SD_ioctl+0x28>
 80068dc:	2303      	movs	r3, #3
 80068de:	e03c      	b.n	800695a <SD_ioctl+0xa2>

  switch (cmd)
 80068e0:	79bb      	ldrb	r3, [r7, #6]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d834      	bhi.n	8006950 <SD_ioctl+0x98>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <SD_ioctl+0x34>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	08006905 	.word	0x08006905
 80068f4:	0800691d 	.word	0x0800691d
 80068f8:	08006937 	.word	0x08006937
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006902:	e028      	b.n	8006956 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006904:	f107 030c 	add.w	r3, r7, #12
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fe67 	bl	80065dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800690e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800691a:	e01c      	b.n	8006956 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800691c:	f107 030c 	add.w	r3, r7, #12
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fe5b 	bl	80065dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	b29a      	uxth	r2, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006934:	e00f      	b.n	8006956 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006936:	f107 030c 	add.w	r3, r7, #12
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff fe4e 	bl	80065dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	0a5a      	lsrs	r2, r3, #9
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800694e:	e002      	b.n	8006956 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006950:	2304      	movs	r3, #4
 8006952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800695a:	4618      	mov	r0, r3
 800695c:	3730      	adds	r7, #48	; 0x30
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000009 	.word	0x20000009

08006968 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800696c:	4b03      	ldr	r3, [pc, #12]	; (800697c <BSP_SD_WriteCpltCallback+0x14>)
 800696e:	2201      	movs	r2, #1
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20002708 	.word	0x20002708

08006980 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <BSP_SD_ReadCpltCallback+0x14>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]
}
 800698a:	bf00      	nop
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	2000270c 	.word	0x2000270c

08006998 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <disk_status+0x30>)
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	79fa      	ldrb	r2, [r7, #7]
 80069b0:	4905      	ldr	r1, [pc, #20]	; (80069c8 <disk_status+0x30>)
 80069b2:	440a      	add	r2, r1
 80069b4:	7a12      	ldrb	r2, [r2, #8]
 80069b6:	4610      	mov	r0, r2
 80069b8:	4798      	blx	r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20002738 	.word	0x20002738

080069cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	4a0d      	ldr	r2, [pc, #52]	; (8006a14 <disk_initialize+0x48>)
 80069de:	5cd3      	ldrb	r3, [r2, r3]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d111      	bne.n	8006a08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	4a0b      	ldr	r2, [pc, #44]	; (8006a14 <disk_initialize+0x48>)
 80069e8:	2101      	movs	r1, #1
 80069ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <disk_initialize+0x48>)
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	79fa      	ldrb	r2, [r7, #7]
 80069fa:	4906      	ldr	r1, [pc, #24]	; (8006a14 <disk_initialize+0x48>)
 80069fc:	440a      	add	r2, r1
 80069fe:	7a12      	ldrb	r2, [r2, #8]
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20002738 	.word	0x20002738

08006a18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006a18:	b590      	push	{r4, r7, lr}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	4a0a      	ldr	r2, [pc, #40]	; (8006a54 <disk_read+0x3c>)
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	689c      	ldr	r4, [r3, #8]
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	4a07      	ldr	r2, [pc, #28]	; (8006a54 <disk_read+0x3c>)
 8006a38:	4413      	add	r3, r2
 8006a3a:	7a18      	ldrb	r0, [r3, #8]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	47a0      	blx	r4
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd90      	pop	{r4, r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20002738 	.word	0x20002738

08006a58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	4a0a      	ldr	r2, [pc, #40]	; (8006a94 <disk_write+0x3c>)
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	68dc      	ldr	r4, [r3, #12]
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	4a07      	ldr	r2, [pc, #28]	; (8006a94 <disk_write+0x3c>)
 8006a78:	4413      	add	r3, r2
 8006a7a:	7a18      	ldrb	r0, [r3, #8]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	47a0      	blx	r4
 8006a84:	4603      	mov	r3, r0
 8006a86:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd90      	pop	{r4, r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20002738 	.word	0x20002738

08006a98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006aa8:	89fb      	ldrh	r3, [r7, #14]
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	b21a      	sxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	b21b      	sxth	r3, r3
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	b21b      	sxth	r3, r3
 8006ab8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006aba:	89fb      	ldrh	r3, [r7, #14]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3303      	adds	r3, #3
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	3202      	adds	r2, #2
 8006ae0:	7812      	ldrb	r2, [r2, #0]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	3201      	adds	r2, #1
 8006aee:	7812      	ldrb	r2, [r2, #0]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	7812      	ldrb	r2, [r2, #0]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
	return rv;
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	887a      	ldrh	r2, [r7, #2]
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	887b      	ldrh	r3, [r7, #2]
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	607a      	str	r2, [r7, #4]
 8006b32:	887a      	ldrh	r2, [r7, #2]
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	0a1b      	lsrs	r3, r3, #8
 8006b5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	0a1b      	lsrs	r3, r3, #8
 8006b82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	607a      	str	r2, [r7, #4]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00d      	beq.n	8006bd2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	1c53      	adds	r3, r2, #1
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	6179      	str	r1, [r7, #20]
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f1      	bne.n	8006bb6 <mem_cpy+0x1a>
	}
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006bde:	b480      	push	{r7}
 8006be0:	b087      	sub	sp, #28
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	617a      	str	r2, [r7, #20]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f3      	bne.n	8006bee <mem_set+0x10>
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006c14:	b480      	push	{r7}
 8006c16:	b089      	sub	sp, #36	; 0x24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	61fa      	str	r2, [r7, #28]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	4619      	mov	r1, r3
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	61ba      	str	r2, [r7, #24]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	1acb      	subs	r3, r1, r3
 8006c40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <mem_cmp+0x40>
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0eb      	beq.n	8006c2c <mem_cmp+0x18>

	return r;
 8006c54:	697b      	ldr	r3, [r7, #20]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3724      	adds	r7, #36	; 0x24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006c6c:	e002      	b.n	8006c74 <chk_chr+0x12>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3301      	adds	r3, #1
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <chk_chr+0x26>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d1f2      	bne.n	8006c6e <chk_chr+0xc>
	return *str;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	e029      	b.n	8006d00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006cac:	4a27      	ldr	r2, [pc, #156]	; (8006d4c <chk_lock+0xb4>)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	4413      	add	r3, r2
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01d      	beq.n	8006cf6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006cba:	4a24      	ldr	r2, [pc, #144]	; (8006d4c <chk_lock+0xb4>)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	4413      	add	r3, r2
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d116      	bne.n	8006cfa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006ccc:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <chk_lock+0xb4>)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d10c      	bne.n	8006cfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ce0:	4a1a      	ldr	r2, [pc, #104]	; (8006d4c <chk_lock+0xb4>)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	4413      	add	r3, r2
 8006ce8:	3308      	adds	r3, #8
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d102      	bne.n	8006cfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006cf4:	e007      	b.n	8006d06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d9d2      	bls.n	8006cac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d109      	bne.n	8006d20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <chk_lock+0x80>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d101      	bne.n	8006d1c <chk_lock+0x84>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e010      	b.n	8006d3e <chk_lock+0xa6>
 8006d1c:	2312      	movs	r3, #18
 8006d1e:	e00e      	b.n	8006d3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d108      	bne.n	8006d38 <chk_lock+0xa0>
 8006d26:	4a09      	ldr	r2, [pc, #36]	; (8006d4c <chk_lock+0xb4>)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	4413      	add	r3, r2
 8006d2e:	330c      	adds	r3, #12
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d36:	d101      	bne.n	8006d3c <chk_lock+0xa4>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	e000      	b.n	8006d3e <chk_lock+0xa6>
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20002718 	.word	0x20002718

08006d50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	e002      	b.n	8006d62 <enq_lock+0x12>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d806      	bhi.n	8006d76 <enq_lock+0x26>
 8006d68:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <enq_lock+0x40>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	4413      	add	r3, r2
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f2      	bne.n	8006d5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	bf14      	ite	ne
 8006d7c:	2301      	movne	r3, #1
 8006d7e:	2300      	moveq	r3, #0
 8006d80:	b2db      	uxtb	r3, r3
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20002718 	.word	0x20002718

08006d94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e01f      	b.n	8006de4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006da4:	4a41      	ldr	r2, [pc, #260]	; (8006eac <inc_lock+0x118>)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	4413      	add	r3, r2
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d113      	bne.n	8006dde <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006db6:	4a3d      	ldr	r2, [pc, #244]	; (8006eac <inc_lock+0x118>)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	4413      	add	r3, r2
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d109      	bne.n	8006dde <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006dca:	4a38      	ldr	r2, [pc, #224]	; (8006eac <inc_lock+0x118>)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d006      	beq.n	8006dec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3301      	adds	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d9dc      	bls.n	8006da4 <inc_lock+0x10>
 8006dea:	e000      	b.n	8006dee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006dec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d132      	bne.n	8006e5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	e002      	b.n	8006e00 <inc_lock+0x6c>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d806      	bhi.n	8006e14 <inc_lock+0x80>
 8006e06:	4a29      	ldr	r2, [pc, #164]	; (8006eac <inc_lock+0x118>)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	4413      	add	r3, r2
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f2      	bne.n	8006dfa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d101      	bne.n	8006e1e <inc_lock+0x8a>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e040      	b.n	8006ea0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4922      	ldr	r1, [pc, #136]	; (8006eac <inc_lock+0x118>)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	440b      	add	r3, r1
 8006e2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	491e      	ldr	r1, [pc, #120]	; (8006eac <inc_lock+0x118>)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	440b      	add	r3, r1
 8006e38:	3304      	adds	r3, #4
 8006e3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695a      	ldr	r2, [r3, #20]
 8006e40:	491a      	ldr	r1, [pc, #104]	; (8006eac <inc_lock+0x118>)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	440b      	add	r3, r1
 8006e48:	3308      	adds	r3, #8
 8006e4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006e4c:	4a17      	ldr	r2, [pc, #92]	; (8006eac <inc_lock+0x118>)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	4413      	add	r3, r2
 8006e54:	330c      	adds	r3, #12
 8006e56:	2200      	movs	r2, #0
 8006e58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d009      	beq.n	8006e74 <inc_lock+0xe0>
 8006e60:	4a12      	ldr	r2, [pc, #72]	; (8006eac <inc_lock+0x118>)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	4413      	add	r3, r2
 8006e68:	330c      	adds	r3, #12
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <inc_lock+0xe0>
 8006e70:	2300      	movs	r3, #0
 8006e72:	e015      	b.n	8006ea0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d108      	bne.n	8006e8c <inc_lock+0xf8>
 8006e7a:	4a0c      	ldr	r2, [pc, #48]	; (8006eac <inc_lock+0x118>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	4413      	add	r3, r2
 8006e82:	330c      	adds	r3, #12
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	3301      	adds	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	e001      	b.n	8006e90 <inc_lock+0xfc>
 8006e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e90:	4906      	ldr	r1, [pc, #24]	; (8006eac <inc_lock+0x118>)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	440b      	add	r3, r1
 8006e98:	330c      	adds	r3, #12
 8006e9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	20002718 	.word	0x20002718

08006eb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	e010      	b.n	8006ee0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006ebe:	4a0d      	ldr	r2, [pc, #52]	; (8006ef4 <clear_lock+0x44>)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	4413      	add	r3, r2
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d105      	bne.n	8006eda <clear_lock+0x2a>
 8006ece:	4a09      	ldr	r2, [pc, #36]	; (8006ef4 <clear_lock+0x44>)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	4413      	add	r3, r2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d9eb      	bls.n	8006ebe <clear_lock+0xe>
	}
}
 8006ee6:	bf00      	nop
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	20002718 	.word	0x20002718

08006ef8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	78db      	ldrb	r3, [r3, #3]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d034      	beq.n	8006f76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	7858      	ldrb	r0, [r3, #1]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	f7ff fd9a 	bl	8006a58 <disk_write>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	73fb      	strb	r3, [r7, #15]
 8006f2e:	e022      	b.n	8006f76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	1ad2      	subs	r2, r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d217      	bcs.n	8006f76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	789b      	ldrb	r3, [r3, #2]
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	e010      	b.n	8006f70 <sync_window+0x78>
					wsect += fs->fsize;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4413      	add	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7858      	ldrb	r0, [r3, #1]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f62:	2301      	movs	r3, #1
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	f7ff fd77 	bl	8006a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	613b      	str	r3, [r7, #16]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d8eb      	bhi.n	8006f4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d01b      	beq.n	8006fd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff ffad 	bl	8006ef8 <sync_window>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d113      	bne.n	8006fd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	7858      	ldrb	r0, [r3, #1]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	f7ff fd2f 	bl	8006a18 <disk_read>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	3b02      	subs	r3, #2
 8006fe8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	3b02      	subs	r3, #2
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d301      	bcc.n	8006ffa <clust2sect+0x20>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e008      	b.n	800700c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	895b      	ldrh	r3, [r3, #10]
 8006ffe:	461a      	mov	r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	fb03 f202 	mul.w	r2, r3, r2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	4413      	add	r3, r2
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d904      	bls.n	8007038 <get_fat+0x20>
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d302      	bcc.n	800703e <get_fat+0x26>
		val = 1;	/* Internal error */
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	e08f      	b.n	800715e <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800703e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007042:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	2b03      	cmp	r3, #3
 800704a:	d062      	beq.n	8007112 <get_fat+0xfa>
 800704c:	2b03      	cmp	r3, #3
 800704e:	dc7c      	bgt.n	800714a <get_fat+0x132>
 8007050:	2b01      	cmp	r3, #1
 8007052:	d002      	beq.n	800705a <get_fat+0x42>
 8007054:	2b02      	cmp	r3, #2
 8007056:	d042      	beq.n	80070de <get_fat+0xc6>
 8007058:	e077      	b.n	800714a <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6a1a      	ldr	r2, [r3, #32]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	0a5b      	lsrs	r3, r3, #9
 8007070:	4413      	add	r3, r2
 8007072:	4619      	mov	r1, r3
 8007074:	6938      	ldr	r0, [r7, #16]
 8007076:	f7ff ff83 	bl	8006f80 <move_window>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d167      	bne.n	8007150 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	60fa      	str	r2, [r7, #12]
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4413      	add	r3, r2
 800708e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007092:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	0a5b      	lsrs	r3, r3, #9
 800709c:	4413      	add	r3, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	6938      	ldr	r0, [r7, #16]
 80070a2:	f7ff ff6d 	bl	8006f80 <move_window>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d153      	bne.n	8007154 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4413      	add	r3, r2
 80070b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	461a      	mov	r2, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <get_fat+0xbc>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	e002      	b.n	80070da <get_fat+0xc2>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070da:	617b      	str	r3, [r7, #20]
			break;
 80070dc:	e03f      	b.n	800715e <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	4413      	add	r3, r2
 80070e8:	4619      	mov	r1, r3
 80070ea:	6938      	ldr	r0, [r7, #16]
 80070ec:	f7ff ff48 	bl	8006f80 <move_window>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d130      	bne.n	8007158 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007104:	4413      	add	r3, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff fcc6 	bl	8006a98 <ld_word>
 800710c:	4603      	mov	r3, r0
 800710e:	617b      	str	r3, [r7, #20]
			break;
 8007110:	e025      	b.n	800715e <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	09db      	lsrs	r3, r3, #7
 800711a:	4413      	add	r3, r2
 800711c:	4619      	mov	r1, r3
 800711e:	6938      	ldr	r0, [r7, #16]
 8007120:	f7ff ff2e 	bl	8006f80 <move_window>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d118      	bne.n	800715c <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007138:	4413      	add	r3, r2
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff fcc4 	bl	8006ac8 <ld_dword>
 8007140:	4603      	mov	r3, r0
 8007142:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007146:	617b      	str	r3, [r7, #20]
			break;
 8007148:	e009      	b.n	800715e <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800714a:	2301      	movs	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	e006      	b.n	800715e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007150:	bf00      	nop
 8007152:	e004      	b.n	800715e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007154:	bf00      	nop
 8007156:	e002      	b.n	800715e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007158:	bf00      	nop
 800715a:	e000      	b.n	800715e <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800715c:	bf00      	nop
		}
	}

	return val;
 800715e:	697b      	ldr	r3, [r7, #20]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007168:	b590      	push	{r4, r7, lr}
 800716a:	b089      	sub	sp, #36	; 0x24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007174:	2302      	movs	r3, #2
 8007176:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b01      	cmp	r3, #1
 800717c:	f240 80d2 	bls.w	8007324 <put_fat+0x1bc>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	f080 80cc 	bcs.w	8007324 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b03      	cmp	r3, #3
 8007192:	f000 8096 	beq.w	80072c2 <put_fat+0x15a>
 8007196:	2b03      	cmp	r3, #3
 8007198:	f300 80cd 	bgt.w	8007336 <put_fat+0x1ce>
 800719c:	2b01      	cmp	r3, #1
 800719e:	d002      	beq.n	80071a6 <put_fat+0x3e>
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d06e      	beq.n	8007282 <put_fat+0x11a>
 80071a4:	e0c7      	b.n	8007336 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	61bb      	str	r3, [r7, #24]
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	4413      	add	r3, r2
 80071b2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a1a      	ldr	r2, [r3, #32]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	0a5b      	lsrs	r3, r3, #9
 80071bc:	4413      	add	r3, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f7ff fedd 	bl	8006f80 <move_window>
 80071c6:	4603      	mov	r3, r0
 80071c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071ca:	7ffb      	ldrb	r3, [r7, #31]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 80ab 	bne.w	8007328 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	1c59      	adds	r1, r3, #1
 80071dc:	61b9      	str	r1, [r7, #24]
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	4413      	add	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00d      	beq.n	800720c <put_fat+0xa4>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	b25b      	sxtb	r3, r3
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	b25a      	sxtb	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	b25b      	sxtb	r3, r3
 8007204:	4313      	orrs	r3, r2
 8007206:	b25b      	sxtb	r3, r3
 8007208:	b2db      	uxtb	r3, r3
 800720a:	e001      	b.n	8007210 <put_fat+0xa8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a1a      	ldr	r2, [r3, #32]
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	0a5b      	lsrs	r3, r3, #9
 8007222:	4413      	add	r3, r2
 8007224:	4619      	mov	r1, r3
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff feaa 	bl	8006f80 <move_window>
 800722c:	4603      	mov	r3, r0
 800722e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007230:	7ffb      	ldrb	r3, [r7, #31]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d17a      	bne.n	800732c <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007242:	4413      	add	r3, r2
 8007244:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <put_fat+0xf0>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	091b      	lsrs	r3, r3, #4
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e00e      	b.n	8007276 <put_fat+0x10e>
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	b25b      	sxtb	r3, r3
 800725e:	f023 030f 	bic.w	r3, r3, #15
 8007262:	b25a      	sxtb	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	b25b      	sxtb	r3, r3
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	b25b      	sxtb	r3, r3
 8007270:	4313      	orrs	r3, r2
 8007272:	b25b      	sxtb	r3, r3
 8007274:	b2db      	uxtb	r3, r3
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	70da      	strb	r2, [r3, #3]
			break;
 8007280:	e059      	b.n	8007336 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1a      	ldr	r2, [r3, #32]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	0a1b      	lsrs	r3, r3, #8
 800728a:	4413      	add	r3, r2
 800728c:	4619      	mov	r1, r3
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff fe76 	bl	8006f80 <move_window>
 8007294:	4603      	mov	r3, r0
 8007296:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007298:	7ffb      	ldrb	r3, [r7, #31]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d148      	bne.n	8007330 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80072ac:	4413      	add	r3, r2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	b292      	uxth	r2, r2
 80072b2:	4611      	mov	r1, r2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fc2a 	bl	8006b0e <st_word>
			fs->wflag = 1;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	70da      	strb	r2, [r3, #3]
			break;
 80072c0:	e039      	b.n	8007336 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1a      	ldr	r2, [r3, #32]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	09db      	lsrs	r3, r3, #7
 80072ca:	4413      	add	r3, r2
 80072cc:	4619      	mov	r1, r3
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7ff fe56 	bl	8006f80 <move_window>
 80072d4:	4603      	mov	r3, r0
 80072d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072d8:	7ffb      	ldrb	r3, [r7, #31]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d12a      	bne.n	8007334 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80072f2:	4413      	add	r3, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fbe7 	bl	8006ac8 <ld_dword>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007300:	4323      	orrs	r3, r4
 8007302:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007312:	4413      	add	r3, r2
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff fc14 	bl	8006b44 <st_dword>
			fs->wflag = 1;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2201      	movs	r2, #1
 8007320:	70da      	strb	r2, [r3, #3]
			break;
 8007322:	e008      	b.n	8007336 <put_fat+0x1ce>
		}
	}
 8007324:	bf00      	nop
 8007326:	e006      	b.n	8007336 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007328:	bf00      	nop
 800732a:	e004      	b.n	8007336 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800732c:	bf00      	nop
 800732e:	e002      	b.n	8007336 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007330:	bf00      	nop
 8007332:	e000      	b.n	8007336 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007334:	bf00      	nop
	return res;
 8007336:	7ffb      	ldrb	r3, [r7, #31]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3724      	adds	r7, #36	; 0x24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd90      	pop	{r4, r7, pc}

08007340 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d904      	bls.n	8007366 <remove_chain+0x26>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	429a      	cmp	r2, r3
 8007364:	d301      	bcc.n	800736a <remove_chain+0x2a>
 8007366:	2302      	movs	r3, #2
 8007368:	e04b      	b.n	8007402 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00c      	beq.n	800738a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	69b8      	ldr	r0, [r7, #24]
 8007378:	f7ff fef6 	bl	8007168 <put_fat>
 800737c:	4603      	mov	r3, r0
 800737e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007380:	7ffb      	ldrb	r3, [r7, #31]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <remove_chain+0x4a>
 8007386:	7ffb      	ldrb	r3, [r7, #31]
 8007388:	e03b      	b.n	8007402 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7ff fe43 	bl	8007018 <get_fat>
 8007392:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d031      	beq.n	80073fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <remove_chain+0x64>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e02e      	b.n	8007402 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073aa:	d101      	bne.n	80073b0 <remove_chain+0x70>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e028      	b.n	8007402 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80073b0:	2200      	movs	r2, #0
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	69b8      	ldr	r0, [r7, #24]
 80073b6:	f7ff fed7 	bl	8007168 <put_fat>
 80073ba:	4603      	mov	r3, r0
 80073bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80073be:	7ffb      	ldrb	r3, [r7, #31]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <remove_chain+0x88>
 80073c4:	7ffb      	ldrb	r3, [r7, #31]
 80073c6:	e01c      	b.n	8007402 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	3b02      	subs	r3, #2
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d20b      	bcs.n	80073ee <remove_chain+0xae>
			fs->free_clst++;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	791b      	ldrb	r3, [r3, #4]
 80073e4:	f043 0301 	orr.w	r3, r3, #1
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d3c6      	bcc.n	800738a <remove_chain+0x4a>
 80073fc:	e000      	b.n	8007400 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80073fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b088      	sub	sp, #32
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <create_chain+0x2c>
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	429a      	cmp	r2, r3
 8007434:	d31b      	bcc.n	800746e <create_chain+0x64>
 8007436:	2301      	movs	r3, #1
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e018      	b.n	800746e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff fdea 	bl	8007018 <get_fat>
 8007444:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d801      	bhi.n	8007450 <create_chain+0x46>
 800744c:	2301      	movs	r3, #1
 800744e:	e070      	b.n	8007532 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007456:	d101      	bne.n	800745c <create_chain+0x52>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	e06a      	b.n	8007532 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	429a      	cmp	r2, r3
 8007464:	d201      	bcs.n	800746a <create_chain+0x60>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	e063      	b.n	8007532 <create_chain+0x128>
		scl = clst;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	3301      	adds	r3, #1
 8007476:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	429a      	cmp	r2, r3
 8007480:	d307      	bcc.n	8007492 <create_chain+0x88>
				ncl = 2;
 8007482:	2302      	movs	r3, #2
 8007484:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	429a      	cmp	r2, r3
 800748c:	d901      	bls.n	8007492 <create_chain+0x88>
 800748e:	2300      	movs	r3, #0
 8007490:	e04f      	b.n	8007532 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007492:	69f9      	ldr	r1, [r7, #28]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff fdbf 	bl	8007018 <get_fat>
 800749a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00e      	beq.n	80074c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d003      	beq.n	80074b0 <create_chain+0xa6>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ae:	d101      	bne.n	80074b4 <create_chain+0xaa>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	e03e      	b.n	8007532 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d1da      	bne.n	8007472 <create_chain+0x68>
 80074bc:	2300      	movs	r3, #0
 80074be:	e038      	b.n	8007532 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80074c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80074c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074c6:	69f9      	ldr	r1, [r7, #28]
 80074c8:	6938      	ldr	r0, [r7, #16]
 80074ca:	f7ff fe4d 	bl	8007168 <put_fat>
 80074ce:	4603      	mov	r3, r0
 80074d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <create_chain+0xe2>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d006      	beq.n	80074ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6938      	ldr	r0, [r7, #16]
 80074e4:	f7ff fe40 	bl	8007168 <put_fat>
 80074e8:	4603      	mov	r3, r0
 80074ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d116      	bne.n	8007520 <create_chain+0x116>
		fs->last_clst = ncl;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	691a      	ldr	r2, [r3, #16]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	3b02      	subs	r3, #2
 8007502:	429a      	cmp	r2, r3
 8007504:	d804      	bhi.n	8007510 <create_chain+0x106>
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	1e5a      	subs	r2, r3, #1
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	791b      	ldrb	r3, [r3, #4]
 8007514:	f043 0301 	orr.w	r3, r3, #1
 8007518:	b2da      	uxtb	r2, r3
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	711a      	strb	r2, [r3, #4]
 800751e:	e007      	b.n	8007530 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d102      	bne.n	800752c <create_chain+0x122>
 8007526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800752a:	e000      	b.n	800752e <create_chain+0x124>
 800752c:	2301      	movs	r3, #1
 800752e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007530:	69fb      	ldr	r3, [r7, #28]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800753a:	b480      	push	{r7}
 800753c:	b087      	sub	sp, #28
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754e:	3304      	adds	r3, #4
 8007550:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	0a5b      	lsrs	r3, r3, #9
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	8952      	ldrh	r2, [r2, #10]
 800755a:	fbb3 f3f2 	udiv	r3, r3, r2
 800755e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	1d1a      	adds	r2, r3, #4
 8007564:	613a      	str	r2, [r7, #16]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <clmt_clust+0x3a>
 8007570:	2300      	movs	r3, #0
 8007572:	e010      	b.n	8007596 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	429a      	cmp	r2, r3
 800757a:	d307      	bcc.n	800758c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	3304      	adds	r3, #4
 8007588:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800758a:	e7e9      	b.n	8007560 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800758c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	4413      	add	r3, r2
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b086      	sub	sp, #24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075b8:	d204      	bcs.n	80075c4 <dir_sdi+0x22>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	f003 031f 	and.w	r3, r3, #31
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80075c4:	2302      	movs	r3, #2
 80075c6:	e063      	b.n	8007690 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <dir_sdi+0x46>
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d902      	bls.n	80075e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10c      	bne.n	8007608 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	8912      	ldrh	r2, [r2, #8]
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d301      	bcc.n	80075fe <dir_sdi+0x5c>
 80075fa:	2302      	movs	r3, #2
 80075fc:	e048      	b.n	8007690 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	61da      	str	r2, [r3, #28]
 8007606:	e029      	b.n	800765c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	895b      	ldrh	r3, [r3, #10]
 800760c:	025b      	lsls	r3, r3, #9
 800760e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007610:	e019      	b.n	8007646 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6979      	ldr	r1, [r7, #20]
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff fcfe 	bl	8007018 <get_fat>
 800761c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007624:	d101      	bne.n	800762a <dir_sdi+0x88>
 8007626:	2301      	movs	r3, #1
 8007628:	e032      	b.n	8007690 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d904      	bls.n	800763a <dir_sdi+0x98>
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	429a      	cmp	r2, r3
 8007638:	d301      	bcc.n	800763e <dir_sdi+0x9c>
 800763a:	2302      	movs	r3, #2
 800763c:	e028      	b.n	8007690 <dir_sdi+0xee>
			ofs -= csz;
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	429a      	cmp	r2, r3
 800764c:	d2e1      	bcs.n	8007612 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800764e:	6979      	ldr	r1, [r7, #20]
 8007650:	6938      	ldr	r0, [r7, #16]
 8007652:	f7ff fcc2 	bl	8006fda <clust2sect>
 8007656:	4602      	mov	r2, r0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <dir_sdi+0xcc>
 800766a:	2302      	movs	r3, #2
 800766c:	e010      	b.n	8007690 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	0a5b      	lsrs	r3, r3, #9
 8007676:	441a      	add	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	3320      	adds	r3, #32
 80076ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <dir_next+0x28>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076be:	d301      	bcc.n	80076c4 <dir_next+0x2c>
 80076c0:	2304      	movs	r3, #4
 80076c2:	e0aa      	b.n	800781a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 8098 	bne.w	8007800 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10b      	bne.n	80076fa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	8912      	ldrh	r2, [r2, #8]
 80076ea:	4293      	cmp	r3, r2
 80076ec:	f0c0 8088 	bcc.w	8007800 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	61da      	str	r2, [r3, #28]
 80076f6:	2304      	movs	r3, #4
 80076f8:	e08f      	b.n	800781a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	0a5b      	lsrs	r3, r3, #9
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	8952      	ldrh	r2, [r2, #10]
 8007702:	3a01      	subs	r2, #1
 8007704:	4013      	ands	r3, r2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d17a      	bne.n	8007800 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f7ff fc80 	bl	8007018 <get_fat>
 8007718:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d801      	bhi.n	8007724 <dir_next+0x8c>
 8007720:	2302      	movs	r3, #2
 8007722:	e07a      	b.n	800781a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800772a:	d101      	bne.n	8007730 <dir_next+0x98>
 800772c:	2301      	movs	r3, #1
 800772e:	e074      	b.n	800781a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	429a      	cmp	r2, r3
 8007738:	d358      	bcc.n	80077ec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d104      	bne.n	800774a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	61da      	str	r2, [r3, #28]
 8007746:	2304      	movs	r3, #4
 8007748:	e067      	b.n	800781a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	4619      	mov	r1, r3
 8007752:	4610      	mov	r0, r2
 8007754:	f7ff fe59 	bl	800740a <create_chain>
 8007758:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <dir_next+0xcc>
 8007760:	2307      	movs	r3, #7
 8007762:	e05a      	b.n	800781a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <dir_next+0xd6>
 800776a:	2302      	movs	r3, #2
 800776c:	e055      	b.n	800781a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007774:	d101      	bne.n	800777a <dir_next+0xe2>
 8007776:	2301      	movs	r3, #1
 8007778:	e04f      	b.n	800781a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff fbbc 	bl	8006ef8 <sync_window>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <dir_next+0xf2>
 8007786:	2301      	movs	r3, #1
 8007788:	e047      	b.n	800781a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3330      	adds	r3, #48	; 0x30
 800778e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff fa22 	bl	8006bde <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	6979      	ldr	r1, [r7, #20]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff fc1a 	bl	8006fda <clust2sect>
 80077a6:	4602      	mov	r2, r0
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80077ac:	e012      	b.n	80077d4 <dir_next+0x13c>
						fs->wflag = 1;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff fb9f 	bl	8006ef8 <sync_window>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <dir_next+0x12c>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e02a      	b.n	800781a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	3301      	adds	r3, #1
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	895b      	ldrh	r3, [r3, #10]
 80077d8:	461a      	mov	r2, r3
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	4293      	cmp	r3, r2
 80077de:	d3e6      	bcc.n	80077ae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80077f2:	6979      	ldr	r1, [r7, #20]
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff fbf0 	bl	8006fda <clust2sect>
 80077fa:	4602      	mov	r2, r0
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	441a      	add	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007832:	2100      	movs	r1, #0
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff feb4 	bl	80075a2 <dir_sdi>
 800783a:	4603      	mov	r3, r0
 800783c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d12b      	bne.n	800789c <dir_alloc+0x7a>
		n = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	4619      	mov	r1, r3
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7ff fb96 	bl	8006f80 <move_window>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d11d      	bne.n	800789a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2be5      	cmp	r3, #229	; 0xe5
 8007866:	d004      	beq.n	8007872 <dir_alloc+0x50>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d107      	bne.n	8007882 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	3301      	adds	r3, #1
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d102      	bne.n	8007886 <dir_alloc+0x64>
 8007880:	e00c      	b.n	800789c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007882:	2300      	movs	r3, #0
 8007884:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007886:	2101      	movs	r1, #1
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff ff05 	bl	8007698 <dir_next>
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0d7      	beq.n	8007848 <dir_alloc+0x26>
 8007898:	e000      	b.n	800789c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800789a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d101      	bne.n	80078a6 <dir_alloc+0x84>
 80078a2:	2307      	movs	r3, #7
 80078a4:	75fb      	strb	r3, [r7, #23]
	return res;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	331a      	adds	r3, #26
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff f8ea 	bl	8006a98 <ld_word>
 80078c4:	4603      	mov	r3, r0
 80078c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d109      	bne.n	80078e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	3314      	adds	r3, #20
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff f8df 	bl	8006a98 <ld_word>
 80078da:	4603      	mov	r3, r0
 80078dc:	041b      	lsls	r3, r3, #16
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80078e4:	68fb      	ldr	r3, [r7, #12]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	331a      	adds	r3, #26
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	b292      	uxth	r2, r2
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff f902 	bl	8006b0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b03      	cmp	r3, #3
 8007910:	d109      	bne.n	8007926 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f103 0214 	add.w	r2, r3, #20
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	0c1b      	lsrs	r3, r3, #16
 800791c:	b29b      	uxth	r3, r3
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7ff f8f4 	bl	8006b0e <st_word>
	}
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800793c:	2100      	movs	r1, #0
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff fe2f 	bl	80075a2 <dir_sdi>
 8007944:	4603      	mov	r3, r0
 8007946:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <dir_find+0x24>
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	e03e      	b.n	80079d0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	4619      	mov	r1, r3
 8007958:	6938      	ldr	r0, [r7, #16]
 800795a:	f7ff fb11 	bl	8006f80 <move_window>
 800795e:	4603      	mov	r3, r0
 8007960:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d12f      	bne.n	80079c8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d102      	bne.n	800797c <dir_find+0x4e>
 8007976:	2304      	movs	r3, #4
 8007978:	75fb      	strb	r3, [r7, #23]
 800797a:	e028      	b.n	80079ce <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	330b      	adds	r3, #11
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007988:	b2da      	uxtb	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	330b      	adds	r3, #11
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	f003 0308 	and.w	r3, r3, #8
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <dir_find+0x86>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a18      	ldr	r0, [r3, #32]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3324      	adds	r3, #36	; 0x24
 80079a6:	220b      	movs	r2, #11
 80079a8:	4619      	mov	r1, r3
 80079aa:	f7ff f933 	bl	8006c14 <mem_cmp>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80079b4:	2100      	movs	r1, #0
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff fe6e 	bl	8007698 <dir_next>
 80079bc:	4603      	mov	r3, r0
 80079be:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0c5      	beq.n	8007952 <dir_find+0x24>
 80079c6:	e002      	b.n	80079ce <dir_find+0xa0>
		if (res != FR_OK) break;
 80079c8:	bf00      	nop
 80079ca:	e000      	b.n	80079ce <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80079cc:	bf00      	nop

	return res;
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80079e6:	2101      	movs	r1, #1
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff ff1a 	bl	8007822 <dir_alloc>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11c      	bne.n	8007a32 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	4619      	mov	r1, r3
 80079fe:	68b8      	ldr	r0, [r7, #8]
 8007a00:	f7ff fabe 	bl	8006f80 <move_window>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d111      	bne.n	8007a32 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	2220      	movs	r2, #32
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff f8e1 	bl	8006bde <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a18      	ldr	r0, [r3, #32]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3324      	adds	r3, #36	; 0x24
 8007a24:	220b      	movs	r2, #11
 8007a26:	4619      	mov	r1, r3
 8007a28:	f7ff f8b8 	bl	8006b9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3324      	adds	r3, #36	; 0x24
 8007a50:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007a52:	220b      	movs	r2, #11
 8007a54:	2120      	movs	r1, #32
 8007a56:	68b8      	ldr	r0, [r7, #8]
 8007a58:	f7ff f8c1 	bl	8006bde <mem_set>
	si = i = 0; ni = 8;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	2308      	movs	r3, #8
 8007a66:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	61fa      	str	r2, [r7, #28]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4413      	add	r3, r2
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a76:	7efb      	ldrb	r3, [r7, #27]
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d94e      	bls.n	8007b1a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007a7c:	7efb      	ldrb	r3, [r7, #27]
 8007a7e:	2b2f      	cmp	r3, #47	; 0x2f
 8007a80:	d006      	beq.n	8007a90 <create_name+0x54>
 8007a82:	7efb      	ldrb	r3, [r7, #27]
 8007a84:	2b5c      	cmp	r3, #92	; 0x5c
 8007a86:	d110      	bne.n	8007aaa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a88:	e002      	b.n	8007a90 <create_name+0x54>
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	61fb      	str	r3, [r7, #28]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4413      	add	r3, r2
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b2f      	cmp	r3, #47	; 0x2f
 8007a9a:	d0f6      	beq.n	8007a8a <create_name+0x4e>
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	2b5c      	cmp	r3, #92	; 0x5c
 8007aa6:	d0f0      	beq.n	8007a8a <create_name+0x4e>
			break;
 8007aa8:	e038      	b.n	8007b1c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007aaa:	7efb      	ldrb	r3, [r7, #27]
 8007aac:	2b2e      	cmp	r3, #46	; 0x2e
 8007aae:	d003      	beq.n	8007ab8 <create_name+0x7c>
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d30c      	bcc.n	8007ad2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2b0b      	cmp	r3, #11
 8007abc:	d002      	beq.n	8007ac4 <create_name+0x88>
 8007abe:	7efb      	ldrb	r3, [r7, #27]
 8007ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ac2:	d001      	beq.n	8007ac8 <create_name+0x8c>
 8007ac4:	2306      	movs	r3, #6
 8007ac6:	e044      	b.n	8007b52 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007ac8:	2308      	movs	r3, #8
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	230b      	movs	r3, #11
 8007ace:	617b      	str	r3, [r7, #20]
			continue;
 8007ad0:	e022      	b.n	8007b18 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007ad2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da04      	bge.n	8007ae4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ada:	7efb      	ldrb	r3, [r7, #27]
 8007adc:	3b80      	subs	r3, #128	; 0x80
 8007ade:	4a1f      	ldr	r2, [pc, #124]	; (8007b5c <create_name+0x120>)
 8007ae0:	5cd3      	ldrb	r3, [r2, r3]
 8007ae2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007ae4:	7efb      	ldrb	r3, [r7, #27]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	481d      	ldr	r0, [pc, #116]	; (8007b60 <create_name+0x124>)
 8007aea:	f7ff f8ba 	bl	8006c62 <chk_chr>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <create_name+0xbc>
 8007af4:	2306      	movs	r3, #6
 8007af6:	e02c      	b.n	8007b52 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007af8:	7efb      	ldrb	r3, [r7, #27]
 8007afa:	2b60      	cmp	r3, #96	; 0x60
 8007afc:	d905      	bls.n	8007b0a <create_name+0xce>
 8007afe:	7efb      	ldrb	r3, [r7, #27]
 8007b00:	2b7a      	cmp	r3, #122	; 0x7a
 8007b02:	d802      	bhi.n	8007b0a <create_name+0xce>
 8007b04:	7efb      	ldrb	r3, [r7, #27]
 8007b06:	3b20      	subs	r3, #32
 8007b08:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	613a      	str	r2, [r7, #16]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	4413      	add	r3, r2
 8007b14:	7efa      	ldrb	r2, [r7, #27]
 8007b16:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007b18:	e7a6      	b.n	8007a68 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007b1a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	441a      	add	r2, r3
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <create_name+0xf4>
 8007b2c:	2306      	movs	r3, #6
 8007b2e:	e010      	b.n	8007b52 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2be5      	cmp	r3, #229	; 0xe5
 8007b36:	d102      	bne.n	8007b3e <create_name+0x102>
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2205      	movs	r2, #5
 8007b3c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b3e:	7efb      	ldrb	r3, [r7, #27]
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d801      	bhi.n	8007b48 <create_name+0x10c>
 8007b44:	2204      	movs	r2, #4
 8007b46:	e000      	b.n	8007b4a <create_name+0x10e>
 8007b48:	2200      	movs	r2, #0
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	330b      	adds	r3, #11
 8007b4e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007b50:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	08009d08 	.word	0x08009d08
 8007b60:	08009c90 	.word	0x08009c90

08007b64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007b78:	e002      	b.n	8007b80 <follow_path+0x1c>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b2f      	cmp	r3, #47	; 0x2f
 8007b86:	d0f8      	beq.n	8007b7a <follow_path+0x16>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b5c      	cmp	r3, #92	; 0x5c
 8007b8e:	d0f4      	beq.n	8007b7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2200      	movs	r2, #0
 8007b94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b1f      	cmp	r3, #31
 8007b9c:	d80a      	bhi.n	8007bb4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2280      	movs	r2, #128	; 0x80
 8007ba2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff fcfa 	bl	80075a2 <dir_sdi>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]
 8007bb2:	e043      	b.n	8007c3c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ff3f 	bl	8007a3c <create_name>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d134      	bne.n	8007c32 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff feb0 	bl	800792e <dir_find>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007bd8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d127      	bne.n	8007c36 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d122      	bne.n	8007c36 <follow_path+0xd2>
 8007bf0:	2305      	movs	r3, #5
 8007bf2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007bf4:	e01f      	b.n	8007c36 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d11c      	bne.n	8007c3a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	799b      	ldrb	r3, [r3, #6]
 8007c04:	f003 0310 	and.w	r3, r3, #16
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007c0c:	2305      	movs	r3, #5
 8007c0e:	75fb      	strb	r3, [r7, #23]
 8007c10:	e014      	b.n	8007c3c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c20:	4413      	add	r3, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff fe43 	bl	80078b0 <ld_clust>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c30:	e7c0      	b.n	8007bb4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007c32:	bf00      	nop
 8007c34:	e002      	b.n	8007c3c <follow_path+0xd8>
				break;
 8007c36:	bf00      	nop
 8007c38:	e000      	b.n	8007c3c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c3a:	bf00      	nop
			}
		}
	}

	return res;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b087      	sub	sp, #28
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c52:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d031      	beq.n	8007cc0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e002      	b.n	8007c6a <get_ldnumber+0x24>
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	3301      	adds	r3, #1
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	d903      	bls.n	8007c7a <get_ldnumber+0x34>
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2b3a      	cmp	r3, #58	; 0x3a
 8007c78:	d1f4      	bne.n	8007c64 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b3a      	cmp	r3, #58	; 0x3a
 8007c80:	d11c      	bne.n	8007cbc <get_ldnumber+0x76>
			tp = *path;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	60fa      	str	r2, [r7, #12]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	3b30      	subs	r3, #48	; 0x30
 8007c92:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b09      	cmp	r3, #9
 8007c98:	d80e      	bhi.n	8007cb8 <get_ldnumber+0x72>
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d10a      	bne.n	8007cb8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d107      	bne.n	8007cb8 <get_ldnumber+0x72>
					vol = (int)i;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	e002      	b.n	8007cc2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007cc0:	693b      	ldr	r3, [r7, #16]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	70da      	strb	r2, [r3, #3]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ce6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff f948 	bl	8006f80 <move_window>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <check_fs+0x2a>
 8007cf6:	2304      	movs	r3, #4
 8007cf8:	e038      	b.n	8007d6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3330      	adds	r3, #48	; 0x30
 8007cfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fec8 	bl	8006a98 <ld_word>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d001      	beq.n	8007d18 <check_fs+0x48>
 8007d14:	2303      	movs	r3, #3
 8007d16:	e029      	b.n	8007d6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d1e:	2be9      	cmp	r3, #233	; 0xe9
 8007d20:	d009      	beq.n	8007d36 <check_fs+0x66>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d28:	2beb      	cmp	r3, #235	; 0xeb
 8007d2a:	d11e      	bne.n	8007d6a <check_fs+0x9a>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007d32:	2b90      	cmp	r3, #144	; 0x90
 8007d34:	d119      	bne.n	8007d6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3330      	adds	r3, #48	; 0x30
 8007d3a:	3336      	adds	r3, #54	; 0x36
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe fec3 	bl	8006ac8 <ld_dword>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d48:	4a0a      	ldr	r2, [pc, #40]	; (8007d74 <check_fs+0xa4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d101      	bne.n	8007d52 <check_fs+0x82>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e00c      	b.n	8007d6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3330      	adds	r3, #48	; 0x30
 8007d56:	3352      	adds	r3, #82	; 0x52
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe feb5 	bl	8006ac8 <ld_dword>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <check_fs+0xa8>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d101      	bne.n	8007d6a <check_fs+0x9a>
 8007d66:	2300      	movs	r3, #0
 8007d68:	e000      	b.n	8007d6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007d6a:	2302      	movs	r3, #2
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	00544146 	.word	0x00544146
 8007d78:	33544146 	.word	0x33544146

08007d7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b096      	sub	sp, #88	; 0x58
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7ff ff58 	bl	8007c46 <get_ldnumber>
 8007d96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da01      	bge.n	8007da2 <find_volume+0x26>
 8007d9e:	230b      	movs	r3, #11
 8007da0:	e22d      	b.n	80081fe <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007da2:	4aa1      	ldr	r2, [pc, #644]	; (8008028 <find_volume+0x2ac>)
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <find_volume+0x3a>
 8007db2:	230c      	movs	r3, #12
 8007db4:	e223      	b.n	80081fe <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	f023 0301 	bic.w	r3, r3, #1
 8007dc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01a      	beq.n	8007e02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	785b      	ldrb	r3, [r3, #1]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe fde1 	bl	8006998 <disk_status>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10c      	bne.n	8007e02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d007      	beq.n	8007dfe <find_volume+0x82>
 8007dee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007dfa:	230a      	movs	r3, #10
 8007dfc:	e1ff      	b.n	80081fe <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e1fd      	b.n	80081fe <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe fdd9 	bl	80069cc <disk_initialize>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007e20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e1e6      	b.n	80081fe <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d007      	beq.n	8007e46 <find_volume+0xca>
 8007e36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007e42:	230a      	movs	r3, #10
 8007e44:	e1db      	b.n	80081fe <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007e4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e4e:	f7ff ff3f 	bl	8007cd0 <check_fs>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007e58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d149      	bne.n	8007ef4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e60:	2300      	movs	r3, #0
 8007e62:	643b      	str	r3, [r7, #64]	; 0x40
 8007e64:	e01e      	b.n	8007ea4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e74:	4413      	add	r3, r2
 8007e76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d006      	beq.n	8007e90 <find_volume+0x114>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	3308      	adds	r3, #8
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fe1e 	bl	8006ac8 <ld_dword>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	e000      	b.n	8007e92 <find_volume+0x116>
 8007e90:	2200      	movs	r2, #0
 8007e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	3358      	adds	r3, #88	; 0x58
 8007e98:	443b      	add	r3, r7
 8007e9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d9dd      	bls.n	8007e66 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007eaa:	2300      	movs	r3, #0
 8007eac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <find_volume+0x13e>
 8007eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	3358      	adds	r3, #88	; 0x58
 8007ec0:	443b      	add	r3, r7
 8007ec2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007ec6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <find_volume+0x15e>
 8007ece:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ed0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ed2:	f7ff fefd 	bl	8007cd0 <check_fs>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	e000      	b.n	8007edc <find_volume+0x160>
 8007eda:	2303      	movs	r3, #3
 8007edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d905      	bls.n	8007ef4 <find_volume+0x178>
 8007ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eea:	3301      	adds	r3, #1
 8007eec:	643b      	str	r3, [r7, #64]	; 0x40
 8007eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d9e2      	bls.n	8007eba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d101      	bne.n	8007f00 <find_volume+0x184>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e17e      	b.n	80081fe <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007f00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d901      	bls.n	8007f0c <find_volume+0x190>
 8007f08:	230d      	movs	r3, #13
 8007f0a:	e178      	b.n	80081fe <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	3330      	adds	r3, #48	; 0x30
 8007f10:	330b      	adds	r3, #11
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe fdc0 	bl	8006a98 <ld_word>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f1e:	d001      	beq.n	8007f24 <find_volume+0x1a8>
 8007f20:	230d      	movs	r3, #13
 8007f22:	e16c      	b.n	80081fe <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	3330      	adds	r3, #48	; 0x30
 8007f28:	3316      	adds	r3, #22
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe fdb4 	bl	8006a98 <ld_word>
 8007f30:	4603      	mov	r3, r0
 8007f32:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <find_volume+0x1cc>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	3330      	adds	r3, #48	; 0x30
 8007f3e:	3324      	adds	r3, #36	; 0x24
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fe fdc1 	bl	8006ac8 <ld_dword>
 8007f46:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f4c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	789b      	ldrb	r3, [r3, #2]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d005      	beq.n	8007f6c <find_volume+0x1f0>
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	789b      	ldrb	r3, [r3, #2]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d001      	beq.n	8007f6c <find_volume+0x1f0>
 8007f68:	230d      	movs	r3, #13
 8007f6a:	e148      	b.n	80081fe <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	789b      	ldrb	r3, [r3, #2]
 8007f70:	461a      	mov	r2, r3
 8007f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f74:	fb02 f303 	mul.w	r3, r2, r3
 8007f78:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f88:	895b      	ldrh	r3, [r3, #10]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d008      	beq.n	8007fa0 <find_volume+0x224>
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	895b      	ldrh	r3, [r3, #10]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	895b      	ldrh	r3, [r3, #10]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <find_volume+0x228>
 8007fa0:	230d      	movs	r3, #13
 8007fa2:	e12c      	b.n	80081fe <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	3330      	adds	r3, #48	; 0x30
 8007fa8:	3311      	adds	r3, #17
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe fd74 	bl	8006a98 <ld_word>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	891b      	ldrh	r3, [r3, #8]
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <find_volume+0x24e>
 8007fc6:	230d      	movs	r3, #13
 8007fc8:	e119      	b.n	80081fe <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	3330      	adds	r3, #48	; 0x30
 8007fce:	3313      	adds	r3, #19
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe fd61 	bl	8006a98 <ld_word>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <find_volume+0x272>
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	3330      	adds	r3, #48	; 0x30
 8007fe4:	3320      	adds	r3, #32
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fd6e 	bl	8006ac8 <ld_dword>
 8007fec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	3330      	adds	r3, #48	; 0x30
 8007ff2:	330e      	adds	r3, #14
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fd4f 	bl	8006a98 <ld_word>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <find_volume+0x28c>
 8008004:	230d      	movs	r3, #13
 8008006:	e0fa      	b.n	80081fe <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008008:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800800a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800c:	4413      	add	r3, r2
 800800e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008010:	8912      	ldrh	r2, [r2, #8]
 8008012:	0912      	lsrs	r2, r2, #4
 8008014:	b292      	uxth	r2, r2
 8008016:	4413      	add	r3, r2
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800801a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	429a      	cmp	r2, r3
 8008020:	d204      	bcs.n	800802c <find_volume+0x2b0>
 8008022:	230d      	movs	r3, #13
 8008024:	e0eb      	b.n	80081fe <find_volume+0x482>
 8008026:	bf00      	nop
 8008028:	20002710 	.word	0x20002710
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800802c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008034:	8952      	ldrh	r2, [r2, #10]
 8008036:	fbb3 f3f2 	udiv	r3, r3, r2
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <find_volume+0x2ca>
 8008042:	230d      	movs	r3, #13
 8008044:	e0db      	b.n	80081fe <find_volume+0x482>
		fmt = FS_FAT32;
 8008046:	2303      	movs	r3, #3
 8008048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008052:	4293      	cmp	r3, r2
 8008054:	d802      	bhi.n	800805c <find_volume+0x2e0>
 8008056:	2302      	movs	r3, #2
 8008058:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008062:	4293      	cmp	r3, r2
 8008064:	d802      	bhi.n	800806c <find_volume+0x2f0>
 8008066:	2301      	movs	r3, #1
 8008068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	1c9a      	adds	r2, r3, #2
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008078:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800807a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800807c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800807e:	441a      	add	r2, r3
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008084:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	441a      	add	r2, r3
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800808e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008092:	2b03      	cmp	r3, #3
 8008094:	d11e      	bne.n	80080d4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	3330      	adds	r3, #48	; 0x30
 800809a:	332a      	adds	r3, #42	; 0x2a
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe fcfb 	bl	8006a98 <ld_word>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <find_volume+0x330>
 80080a8:	230d      	movs	r3, #13
 80080aa:	e0a8      	b.n	80081fe <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	891b      	ldrh	r3, [r3, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <find_volume+0x33c>
 80080b4:	230d      	movs	r3, #13
 80080b6:	e0a2      	b.n	80081fe <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	3330      	adds	r3, #48	; 0x30
 80080bc:	332c      	adds	r3, #44	; 0x2c
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fd02 	bl	8006ac8 <ld_dword>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	647b      	str	r3, [r7, #68]	; 0x44
 80080d2:	e01f      	b.n	8008114 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80080d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d6:	891b      	ldrh	r3, [r3, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <find_volume+0x364>
 80080dc:	230d      	movs	r3, #13
 80080de:	e08e      	b.n	80081fe <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	6a1a      	ldr	r2, [r3, #32]
 80080e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e6:	441a      	add	r2, r3
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80080ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d103      	bne.n	80080fc <find_volume+0x380>
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	e00a      	b.n	8008112 <find_volume+0x396>
 80080fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fe:	695a      	ldr	r2, [r3, #20]
 8008100:	4613      	mov	r3, r2
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	4413      	add	r3, r2
 8008106:	085a      	lsrs	r2, r3, #1
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008112:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	699a      	ldr	r2, [r3, #24]
 8008118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800811a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800811e:	0a5b      	lsrs	r3, r3, #9
 8008120:	429a      	cmp	r2, r3
 8008122:	d201      	bcs.n	8008128 <find_volume+0x3ac>
 8008124:	230d      	movs	r3, #13
 8008126:	e06a      	b.n	80081fe <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800812e:	611a      	str	r2, [r3, #16]
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	2280      	movs	r2, #128	; 0x80
 800813c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800813e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008142:	2b03      	cmp	r3, #3
 8008144:	d149      	bne.n	80081da <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	3330      	adds	r3, #48	; 0x30
 800814a:	3330      	adds	r3, #48	; 0x30
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe fca3 	bl	8006a98 <ld_word>
 8008152:	4603      	mov	r3, r0
 8008154:	2b01      	cmp	r3, #1
 8008156:	d140      	bne.n	80081da <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800815a:	3301      	adds	r3, #1
 800815c:	4619      	mov	r1, r3
 800815e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008160:	f7fe ff0e 	bl	8006f80 <move_window>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d137      	bne.n	80081da <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	2200      	movs	r2, #0
 800816e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	3330      	adds	r3, #48	; 0x30
 8008174:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe fc8d 	bl	8006a98 <ld_word>
 800817e:	4603      	mov	r3, r0
 8008180:	461a      	mov	r2, r3
 8008182:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008186:	429a      	cmp	r2, r3
 8008188:	d127      	bne.n	80081da <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	3330      	adds	r3, #48	; 0x30
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe fc9a 	bl	8006ac8 <ld_dword>
 8008194:	4603      	mov	r3, r0
 8008196:	4a1c      	ldr	r2, [pc, #112]	; (8008208 <find_volume+0x48c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d11e      	bne.n	80081da <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	3330      	adds	r3, #48	; 0x30
 80081a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe fc8f 	bl	8006ac8 <ld_dword>
 80081aa:	4603      	mov	r3, r0
 80081ac:	4a17      	ldr	r2, [pc, #92]	; (800820c <find_volume+0x490>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d113      	bne.n	80081da <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	3330      	adds	r3, #48	; 0x30
 80081b6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fc84 	bl	8006ac8 <ld_dword>
 80081c0:	4602      	mov	r2, r0
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	3330      	adds	r3, #48	; 0x30
 80081ca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe fc7a 	bl	8006ac8 <ld_dword>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80081e0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80081e2:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <find_volume+0x494>)
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	4b09      	ldr	r3, [pc, #36]	; (8008210 <find_volume+0x494>)
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	4b08      	ldr	r3, [pc, #32]	; (8008210 <find_volume+0x494>)
 80081f0:	881a      	ldrh	r2, [r3, #0]
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80081f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081f8:	f7fe fe5a 	bl	8006eb0 <clear_lock>
#endif
	return FR_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3758      	adds	r7, #88	; 0x58
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	41615252 	.word	0x41615252
 800820c:	61417272 	.word	0x61417272
 8008210:	20002714 	.word	0x20002714

08008214 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800821e:	2309      	movs	r3, #9
 8008220:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01c      	beq.n	8008262 <validate+0x4e>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d018      	beq.n	8008262 <validate+0x4e>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d013      	beq.n	8008262 <validate+0x4e>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	889a      	ldrh	r2, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	88db      	ldrh	r3, [r3, #6]
 8008244:	429a      	cmp	r2, r3
 8008246:	d10c      	bne.n	8008262 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fba2 	bl	8006998 <disk_status>
 8008254:	4603      	mov	r3, r0
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <validate+0x4e>
			res = FR_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <validate+0x5a>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	e000      	b.n	8008270 <validate+0x5c>
 800826e:	2300      	movs	r3, #0
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	6013      	str	r3, [r2, #0]
	return res;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008292:	f107 0310 	add.w	r3, r7, #16
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff fcd5 	bl	8007c46 <get_ldnumber>
 800829c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	da01      	bge.n	80082a8 <f_mount+0x28>
 80082a4:	230b      	movs	r3, #11
 80082a6:	e02b      	b.n	8008300 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80082a8:	4a17      	ldr	r2, [pc, #92]	; (8008308 <f_mount+0x88>)
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80082b8:	69b8      	ldr	r0, [r7, #24]
 80082ba:	f7fe fdf9 	bl	8006eb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	490d      	ldr	r1, [pc, #52]	; (8008308 <f_mount+0x88>)
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <f_mount+0x66>
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d001      	beq.n	80082ea <f_mount+0x6a>
 80082e6:	2300      	movs	r3, #0
 80082e8:	e00a      	b.n	8008300 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80082ea:	f107 010c 	add.w	r1, r7, #12
 80082ee:	f107 0308 	add.w	r3, r7, #8
 80082f2:	2200      	movs	r2, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff fd41 	bl	8007d7c <find_volume>
 80082fa:	4603      	mov	r3, r0
 80082fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3720      	adds	r7, #32
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20002710 	.word	0x20002710

0800830c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b098      	sub	sp, #96	; 0x60
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <f_open+0x18>
 8008320:	2309      	movs	r3, #9
 8008322:	e1ad      	b.n	8008680 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800832a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800832c:	79fa      	ldrb	r2, [r7, #7]
 800832e:	f107 0110 	add.w	r1, r7, #16
 8008332:	f107 0308 	add.w	r3, r7, #8
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fd20 	bl	8007d7c <find_volume>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008346:	2b00      	cmp	r3, #0
 8008348:	f040 8191 	bne.w	800866e <f_open+0x362>
		dj.obj.fs = fs;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	4611      	mov	r1, r2
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fc03 	bl	8007b64 <follow_path>
 800835e:	4603      	mov	r3, r0
 8008360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008368:	2b00      	cmp	r3, #0
 800836a:	d11a      	bne.n	80083a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800836c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008370:	b25b      	sxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	da03      	bge.n	800837e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008376:	2306      	movs	r3, #6
 8008378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800837c:	e011      	b.n	80083a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	f023 0301 	bic.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	bf14      	ite	ne
 8008388:	2301      	movne	r3, #1
 800838a:	2300      	moveq	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe fc7e 	bl	8006c98 <chk_lock>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	f003 031c 	and.w	r3, r3, #28
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d07f      	beq.n	80084ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80083ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d017      	beq.n	80083e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80083b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d10e      	bne.n	80083da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80083bc:	f7fe fcc8 	bl	8006d50 <enq_lock>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d006      	beq.n	80083d4 <f_open+0xc8>
 80083c6:	f107 0314 	add.w	r3, r7, #20
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff fb04 	bl	80079d8 <dir_register>
 80083d0:	4603      	mov	r3, r0
 80083d2:	e000      	b.n	80083d6 <f_open+0xca>
 80083d4:	2312      	movs	r3, #18
 80083d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	f043 0308 	orr.w	r3, r3, #8
 80083e0:	71fb      	strb	r3, [r7, #7]
 80083e2:	e010      	b.n	8008406 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80083e4:	7ebb      	ldrb	r3, [r7, #26]
 80083e6:	f003 0311 	and.w	r3, r3, #17
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <f_open+0xea>
					res = FR_DENIED;
 80083ee:	2307      	movs	r3, #7
 80083f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80083f4:	e007      	b.n	8008406 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <f_open+0xfa>
 8008400:	2308      	movs	r3, #8
 8008402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800840a:	2b00      	cmp	r3, #0
 800840c:	d168      	bne.n	80084e0 <f_open+0x1d4>
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b00      	cmp	r3, #0
 8008416:	d063      	beq.n	80084e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008418:	f7fe f87c 	bl	8006514 <get_fattime>
 800841c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800841e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008420:	330e      	adds	r3, #14
 8008422:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe fb8d 	bl	8006b44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	3316      	adds	r3, #22
 800842e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fb87 	bl	8006b44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008438:	330b      	adds	r3, #11
 800843a:	2220      	movs	r2, #32
 800843c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff fa33 	bl	80078b0 <ld_clust>
 800844a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008450:	2200      	movs	r2, #0
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fa4b 	bl	80078ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845a:	331c      	adds	r3, #28
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe fb70 	bl	8006b44 <st_dword>
					fs->wflag = 1;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2201      	movs	r2, #1
 8008468:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800846a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d037      	beq.n	80084e0 <f_open+0x1d4>
						dw = fs->winsect;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008476:	f107 0314 	add.w	r3, r7, #20
 800847a:	2200      	movs	r2, #0
 800847c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe ff5e 	bl	8007340 <remove_chain>
 8008484:	4603      	mov	r3, r0
 8008486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800848a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800848e:	2b00      	cmp	r3, #0
 8008490:	d126      	bne.n	80084e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fd72 	bl	8006f80 <move_window>
 800849c:	4603      	mov	r3, r0
 800849e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084a6:	3a01      	subs	r2, #1
 80084a8:	60da      	str	r2, [r3, #12]
 80084aa:	e019      	b.n	80084e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80084ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d115      	bne.n	80084e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80084b4:	7ebb      	ldrb	r3, [r7, #26]
 80084b6:	f003 0310 	and.w	r3, r3, #16
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80084be:	2304      	movs	r3, #4
 80084c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80084c4:	e00c      	b.n	80084e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <f_open+0x1d4>
 80084d0:	7ebb      	ldrb	r3, [r7, #26]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <f_open+0x1d4>
						res = FR_DENIED;
 80084da:	2307      	movs	r3, #7
 80084dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80084e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d128      	bne.n	800853a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	f023 0301 	bic.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	bf14      	ite	ne
 8008512:	2301      	movne	r3, #1
 8008514:	2300      	moveq	r3, #0
 8008516:	b2db      	uxtb	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	f107 0314 	add.w	r3, r7, #20
 800851e:	4611      	mov	r1, r2
 8008520:	4618      	mov	r0, r3
 8008522:	f7fe fc37 	bl	8006d94 <inc_lock>
 8008526:	4602      	mov	r2, r0
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <f_open+0x22e>
 8008534:	2302      	movs	r3, #2
 8008536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800853a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800853e:	2b00      	cmp	r3, #0
 8008540:	f040 8095 	bne.w	800866e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008548:	4611      	mov	r1, r2
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff f9b0 	bl	80078b0 <ld_clust>
 8008550:	4602      	mov	r2, r0
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	331c      	adds	r3, #28
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fab4 	bl	8006ac8 <ld_dword>
 8008560:	4602      	mov	r2, r0
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	88da      	ldrh	r2, [r3, #6]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	79fa      	ldrb	r2, [r7, #7]
 800857e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3330      	adds	r3, #48	; 0x30
 8008596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800859a:	2100      	movs	r1, #0
 800859c:	4618      	mov	r0, r3
 800859e:	f7fe fb1e 	bl	8006bde <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d060      	beq.n	800866e <f_open+0x362>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d05c      	beq.n	800866e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	895b      	ldrh	r3, [r3, #10]
 80085c0:	025b      	lsls	r3, r3, #9
 80085c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	657b      	str	r3, [r7, #84]	; 0x54
 80085d0:	e016      	b.n	8008600 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fd1e 	bl	8007018 <get_fat>
 80085dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80085de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d802      	bhi.n	80085ea <f_open+0x2de>
 80085e4:	2302      	movs	r3, #2
 80085e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f0:	d102      	bne.n	80085f8 <f_open+0x2ec>
 80085f2:	2301      	movs	r3, #1
 80085f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <f_open+0x304>
 8008608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800860a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860c:	429a      	cmp	r2, r3
 800860e:	d8e0      	bhi.n	80085d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008614:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800861a:	2b00      	cmp	r3, #0
 800861c:	d127      	bne.n	800866e <f_open+0x362>
 800861e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008624:	2b00      	cmp	r3, #0
 8008626:	d022      	beq.n	800866e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe fcd4 	bl	8006fda <clust2sect>
 8008632:	6478      	str	r0, [r7, #68]	; 0x44
 8008634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008636:	2b00      	cmp	r3, #0
 8008638:	d103      	bne.n	8008642 <f_open+0x336>
						res = FR_INT_ERR;
 800863a:	2302      	movs	r3, #2
 800863c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008640:	e015      	b.n	800866e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008644:	0a5a      	lsrs	r2, r3, #9
 8008646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008648:	441a      	add	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	7858      	ldrb	r0, [r3, #1]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1a      	ldr	r2, [r3, #32]
 800865c:	2301      	movs	r3, #1
 800865e:	f7fe f9db 	bl	8006a18 <disk_read>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <f_open+0x362>
 8008668:	2301      	movs	r3, #1
 800866a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800866e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <f_open+0x370>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800867c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008680:	4618      	mov	r0, r3
 8008682:	3760      	adds	r7, #96	; 0x60
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08c      	sub	sp, #48	; 0x30
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f107 0210 	add.w	r2, r7, #16
 80086a6:	4611      	mov	r1, r2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff fdb3 	bl	8008214 <validate>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80086b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d107      	bne.n	80086cc <f_write+0x44>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	7d5b      	ldrb	r3, [r3, #21]
 80086c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80086c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <f_write+0x4a>
 80086cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086d0:	e14b      	b.n	800896a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	7d1b      	ldrb	r3, [r3, #20]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <f_write+0x5a>
 80086de:	2307      	movs	r3, #7
 80086e0:	e143      	b.n	800896a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	441a      	add	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	f080 812d 	bcs.w	800894e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	43db      	mvns	r3, r3
 80086fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80086fc:	e127      	b.n	800894e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 80e3 	bne.w	80088d2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	0a5b      	lsrs	r3, r3, #9
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	8952      	ldrh	r2, [r2, #10]
 8008716:	3a01      	subs	r2, #1
 8008718:	4013      	ands	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d143      	bne.n	80087aa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10c      	bne.n	8008744 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	d11a      	bne.n	800876c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2100      	movs	r1, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fe65 	bl	800740a <create_chain>
 8008740:	62b8      	str	r0, [r7, #40]	; 0x28
 8008742:	e013      	b.n	800876c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	4619      	mov	r1, r3
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7fe fef1 	bl	800753a <clmt_clust>
 8008758:	62b8      	str	r0, [r7, #40]	; 0x28
 800875a:	e007      	b.n	800876c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	4619      	mov	r1, r3
 8008764:	4610      	mov	r0, r2
 8008766:	f7fe fe50 	bl	800740a <create_chain>
 800876a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 80f2 	beq.w	8008958 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	2b01      	cmp	r3, #1
 8008778:	d104      	bne.n	8008784 <f_write+0xfc>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2202      	movs	r2, #2
 800877e:	755a      	strb	r2, [r3, #21]
 8008780:	2302      	movs	r3, #2
 8008782:	e0f2      	b.n	800896a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800878a:	d104      	bne.n	8008796 <f_write+0x10e>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	755a      	strb	r2, [r3, #21]
 8008792:	2301      	movs	r3, #1
 8008794:	e0e9      	b.n	800896a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800879a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <f_write+0x122>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	7d1b      	ldrb	r3, [r3, #20]
 80087ae:	b25b      	sxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da18      	bge.n	80087e6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	7858      	ldrb	r0, [r3, #1]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a1a      	ldr	r2, [r3, #32]
 80087c2:	2301      	movs	r3, #1
 80087c4:	f7fe f948 	bl	8006a58 <disk_write>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d004      	beq.n	80087d8 <f_write+0x150>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	755a      	strb	r2, [r3, #21]
 80087d4:	2301      	movs	r3, #1
 80087d6:	e0c8      	b.n	800896a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	7d1b      	ldrb	r3, [r3, #20]
 80087dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fe fbf3 	bl	8006fda <clust2sect>
 80087f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d104      	bne.n	8008806 <f_write+0x17e>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2202      	movs	r2, #2
 8008800:	755a      	strb	r2, [r3, #21]
 8008802:	2302      	movs	r3, #2
 8008804:	e0b1      	b.n	800896a <f_write+0x2e2>
			sect += csect;
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	4413      	add	r3, r2
 800880c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	0a5b      	lsrs	r3, r3, #9
 8008812:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d03c      	beq.n	8008894 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	4413      	add	r3, r2
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	8952      	ldrh	r2, [r2, #10]
 8008824:	4293      	cmp	r3, r2
 8008826:	d905      	bls.n	8008834 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	895b      	ldrh	r3, [r3, #10]
 800882c:	461a      	mov	r2, r3
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	7858      	ldrb	r0, [r3, #1]
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	69f9      	ldr	r1, [r7, #28]
 800883e:	f7fe f90b 	bl	8006a58 <disk_write>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <f_write+0x1ca>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	755a      	strb	r2, [r3, #21]
 800884e:	2301      	movs	r3, #1
 8008850:	e08b      	b.n	800896a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a1a      	ldr	r2, [r3, #32]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	6a3a      	ldr	r2, [r7, #32]
 800885c:	429a      	cmp	r2, r3
 800885e:	d915      	bls.n	800888c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a1a      	ldr	r2, [r3, #32]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	025b      	lsls	r3, r3, #9
 8008870:	69fa      	ldr	r2, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008878:	4619      	mov	r1, r3
 800887a:	f7fe f98f 	bl	8006b9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	7d1b      	ldrb	r3, [r3, #20]
 8008882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008886:	b2da      	uxtb	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	025b      	lsls	r3, r3, #9
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008892:	e03f      	b.n	8008914 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	429a      	cmp	r2, r3
 800889c:	d016      	beq.n	80088cc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d210      	bcs.n	80088cc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	7858      	ldrb	r0, [r3, #1]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088b4:	2301      	movs	r3, #1
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	f7fe f8ae 	bl	8006a18 <disk_read>
 80088bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d004      	beq.n	80088cc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	755a      	strb	r2, [r3, #21]
 80088c8:	2301      	movs	r3, #1
 80088ca:	e04e      	b.n	800896a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80088e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d901      	bls.n	80088ec <f_write+0x264>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fa:	4413      	add	r3, r2
 80088fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088fe:	69f9      	ldr	r1, [r7, #28]
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe f94b 	bl	8006b9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	7d1b      	ldrb	r3, [r3, #20]
 800890a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800890e:	b2da      	uxtb	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	4413      	add	r3, r2
 800891a:	61fb      	str	r3, [r7, #28]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	441a      	add	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	619a      	str	r2, [r3, #24]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	429a      	cmp	r2, r3
 8008932:	bf38      	it	cc
 8008934:	461a      	movcc	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	60da      	str	r2, [r3, #12]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	441a      	add	r2, r3
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f47f aed4 	bne.w	80086fe <f_write+0x76>
 8008956:	e000      	b.n	800895a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008958:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	7d1b      	ldrb	r3, [r3, #20]
 800895e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008962:	b2da      	uxtb	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3730      	adds	r7, #48	; 0x30
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008982:	2301      	movs	r3, #1
 8008984:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800898a:	4b1f      	ldr	r3, [pc, #124]	; (8008a08 <FATFS_LinkDriverEx+0x94>)
 800898c:	7a5b      	ldrb	r3, [r3, #9]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d131      	bne.n	80089f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008994:	4b1c      	ldr	r3, [pc, #112]	; (8008a08 <FATFS_LinkDriverEx+0x94>)
 8008996:	7a5b      	ldrb	r3, [r3, #9]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <FATFS_LinkDriverEx+0x94>)
 800899e:	2100      	movs	r1, #0
 80089a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80089a2:	4b19      	ldr	r3, [pc, #100]	; (8008a08 <FATFS_LinkDriverEx+0x94>)
 80089a4:	7a5b      	ldrb	r3, [r3, #9]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	4a17      	ldr	r2, [pc, #92]	; (8008a08 <FATFS_LinkDriverEx+0x94>)
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80089b2:	4b15      	ldr	r3, [pc, #84]	; (8008a08 <FATFS_LinkDriverEx+0x94>)
 80089b4:	7a5b      	ldrb	r3, [r3, #9]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	461a      	mov	r2, r3
 80089ba:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <FATFS_LinkDriverEx+0x94>)
 80089bc:	4413      	add	r3, r2
 80089be:	79fa      	ldrb	r2, [r7, #7]
 80089c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80089c2:	4b11      	ldr	r3, [pc, #68]	; (8008a08 <FATFS_LinkDriverEx+0x94>)
 80089c4:	7a5b      	ldrb	r3, [r3, #9]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	b2d1      	uxtb	r1, r2
 80089cc:	4a0e      	ldr	r2, [pc, #56]	; (8008a08 <FATFS_LinkDriverEx+0x94>)
 80089ce:	7251      	strb	r1, [r2, #9]
 80089d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80089d2:	7dbb      	ldrb	r3, [r7, #22]
 80089d4:	3330      	adds	r3, #48	; 0x30
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3301      	adds	r3, #1
 80089e0:	223a      	movs	r2, #58	; 0x3a
 80089e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	3302      	adds	r3, #2
 80089e8:	222f      	movs	r2, #47	; 0x2f
 80089ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	3303      	adds	r3, #3
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20002738 	.word	0x20002738

08008a0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a16:	2200      	movs	r2, #0
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff ffaa 	bl	8008974 <FATFS_LinkDriverEx>
 8008a20:	4603      	mov	r3, r0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <__errno>:
 8008a2c:	4b01      	ldr	r3, [pc, #4]	; (8008a34 <__errno+0x8>)
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	2000000c 	.word	0x2000000c

08008a38 <__libc_init_array>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	4d0d      	ldr	r5, [pc, #52]	; (8008a70 <__libc_init_array+0x38>)
 8008a3c:	4c0d      	ldr	r4, [pc, #52]	; (8008a74 <__libc_init_array+0x3c>)
 8008a3e:	1b64      	subs	r4, r4, r5
 8008a40:	10a4      	asrs	r4, r4, #2
 8008a42:	2600      	movs	r6, #0
 8008a44:	42a6      	cmp	r6, r4
 8008a46:	d109      	bne.n	8008a5c <__libc_init_array+0x24>
 8008a48:	4d0b      	ldr	r5, [pc, #44]	; (8008a78 <__libc_init_array+0x40>)
 8008a4a:	4c0c      	ldr	r4, [pc, #48]	; (8008a7c <__libc_init_array+0x44>)
 8008a4c:	f001 f8b2 	bl	8009bb4 <_init>
 8008a50:	1b64      	subs	r4, r4, r5
 8008a52:	10a4      	asrs	r4, r4, #2
 8008a54:	2600      	movs	r6, #0
 8008a56:	42a6      	cmp	r6, r4
 8008a58:	d105      	bne.n	8008a66 <__libc_init_array+0x2e>
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a60:	4798      	blx	r3
 8008a62:	3601      	adds	r6, #1
 8008a64:	e7ee      	b.n	8008a44 <__libc_init_array+0xc>
 8008a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6a:	4798      	blx	r3
 8008a6c:	3601      	adds	r6, #1
 8008a6e:	e7f2      	b.n	8008a56 <__libc_init_array+0x1e>
 8008a70:	08009e28 	.word	0x08009e28
 8008a74:	08009e28 	.word	0x08009e28
 8008a78:	08009e28 	.word	0x08009e28
 8008a7c:	08009e2c 	.word	0x08009e2c

08008a80 <memset>:
 8008a80:	4402      	add	r2, r0
 8008a82:	4603      	mov	r3, r0
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d100      	bne.n	8008a8a <memset+0xa>
 8008a88:	4770      	bx	lr
 8008a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a8e:	e7f9      	b.n	8008a84 <memset+0x4>

08008a90 <_puts_r>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	460e      	mov	r6, r1
 8008a94:	4605      	mov	r5, r0
 8008a96:	b118      	cbz	r0, 8008aa0 <_puts_r+0x10>
 8008a98:	6983      	ldr	r3, [r0, #24]
 8008a9a:	b90b      	cbnz	r3, 8008aa0 <_puts_r+0x10>
 8008a9c:	f000 fa8c 	bl	8008fb8 <__sinit>
 8008aa0:	69ab      	ldr	r3, [r5, #24]
 8008aa2:	68ac      	ldr	r4, [r5, #8]
 8008aa4:	b913      	cbnz	r3, 8008aac <_puts_r+0x1c>
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 fa86 	bl	8008fb8 <__sinit>
 8008aac:	4b2c      	ldr	r3, [pc, #176]	; (8008b60 <_puts_r+0xd0>)
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	d120      	bne.n	8008af4 <_puts_r+0x64>
 8008ab2:	686c      	ldr	r4, [r5, #4]
 8008ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ab6:	07db      	lsls	r3, r3, #31
 8008ab8:	d405      	bmi.n	8008ac6 <_puts_r+0x36>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	0598      	lsls	r0, r3, #22
 8008abe:	d402      	bmi.n	8008ac6 <_puts_r+0x36>
 8008ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ac2:	f000 fb17 	bl	80090f4 <__retarget_lock_acquire_recursive>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	0719      	lsls	r1, r3, #28
 8008aca:	d51d      	bpl.n	8008b08 <_puts_r+0x78>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	b1db      	cbz	r3, 8008b08 <_puts_r+0x78>
 8008ad0:	3e01      	subs	r6, #1
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	60a3      	str	r3, [r4, #8]
 8008adc:	bb39      	cbnz	r1, 8008b2e <_puts_r+0x9e>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da38      	bge.n	8008b54 <_puts_r+0xc4>
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	210a      	movs	r1, #10
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 f88c 	bl	8008c04 <__swbuf_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	d011      	beq.n	8008b14 <_puts_r+0x84>
 8008af0:	250a      	movs	r5, #10
 8008af2:	e011      	b.n	8008b18 <_puts_r+0x88>
 8008af4:	4b1b      	ldr	r3, [pc, #108]	; (8008b64 <_puts_r+0xd4>)
 8008af6:	429c      	cmp	r4, r3
 8008af8:	d101      	bne.n	8008afe <_puts_r+0x6e>
 8008afa:	68ac      	ldr	r4, [r5, #8]
 8008afc:	e7da      	b.n	8008ab4 <_puts_r+0x24>
 8008afe:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <_puts_r+0xd8>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	bf08      	it	eq
 8008b04:	68ec      	ldreq	r4, [r5, #12]
 8008b06:	e7d5      	b.n	8008ab4 <_puts_r+0x24>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f000 f8cc 	bl	8008ca8 <__swsetup_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d0dd      	beq.n	8008ad0 <_puts_r+0x40>
 8008b14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b1a:	07da      	lsls	r2, r3, #31
 8008b1c:	d405      	bmi.n	8008b2a <_puts_r+0x9a>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	059b      	lsls	r3, r3, #22
 8008b22:	d402      	bmi.n	8008b2a <_puts_r+0x9a>
 8008b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b26:	f000 fae6 	bl	80090f6 <__retarget_lock_release_recursive>
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	bd70      	pop	{r4, r5, r6, pc}
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	da04      	bge.n	8008b3c <_puts_r+0xac>
 8008b32:	69a2      	ldr	r2, [r4, #24]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	dc06      	bgt.n	8008b46 <_puts_r+0xb6>
 8008b38:	290a      	cmp	r1, #10
 8008b3a:	d004      	beq.n	8008b46 <_puts_r+0xb6>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	6022      	str	r2, [r4, #0]
 8008b42:	7019      	strb	r1, [r3, #0]
 8008b44:	e7c5      	b.n	8008ad2 <_puts_r+0x42>
 8008b46:	4622      	mov	r2, r4
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f000 f85b 	bl	8008c04 <__swbuf_r>
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d1bf      	bne.n	8008ad2 <_puts_r+0x42>
 8008b52:	e7df      	b.n	8008b14 <_puts_r+0x84>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	250a      	movs	r5, #10
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	6022      	str	r2, [r4, #0]
 8008b5c:	701d      	strb	r5, [r3, #0]
 8008b5e:	e7db      	b.n	8008b18 <_puts_r+0x88>
 8008b60:	08009dac 	.word	0x08009dac
 8008b64:	08009dcc 	.word	0x08009dcc
 8008b68:	08009d8c 	.word	0x08009d8c

08008b6c <puts>:
 8008b6c:	4b02      	ldr	r3, [pc, #8]	; (8008b78 <puts+0xc>)
 8008b6e:	4601      	mov	r1, r0
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	f7ff bf8d 	b.w	8008a90 <_puts_r>
 8008b76:	bf00      	nop
 8008b78:	2000000c 	.word	0x2000000c

08008b7c <sniprintf>:
 8008b7c:	b40c      	push	{r2, r3}
 8008b7e:	b530      	push	{r4, r5, lr}
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <sniprintf+0x64>)
 8008b82:	1e0c      	subs	r4, r1, #0
 8008b84:	681d      	ldr	r5, [r3, #0]
 8008b86:	b09d      	sub	sp, #116	; 0x74
 8008b88:	da08      	bge.n	8008b9c <sniprintf+0x20>
 8008b8a:	238b      	movs	r3, #139	; 0x8b
 8008b8c:	602b      	str	r3, [r5, #0]
 8008b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b92:	b01d      	add	sp, #116	; 0x74
 8008b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b98:	b002      	add	sp, #8
 8008b9a:	4770      	bx	lr
 8008b9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ba0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ba4:	bf14      	ite	ne
 8008ba6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008baa:	4623      	moveq	r3, r4
 8008bac:	9304      	str	r3, [sp, #16]
 8008bae:	9307      	str	r3, [sp, #28]
 8008bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008bb4:	9002      	str	r0, [sp, #8]
 8008bb6:	9006      	str	r0, [sp, #24]
 8008bb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008bbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008bbe:	ab21      	add	r3, sp, #132	; 0x84
 8008bc0:	a902      	add	r1, sp, #8
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	f000 fc39 	bl	800943c <_svfiprintf_r>
 8008bca:	1c43      	adds	r3, r0, #1
 8008bcc:	bfbc      	itt	lt
 8008bce:	238b      	movlt	r3, #139	; 0x8b
 8008bd0:	602b      	strlt	r3, [r5, #0]
 8008bd2:	2c00      	cmp	r4, #0
 8008bd4:	d0dd      	beq.n	8008b92 <sniprintf+0x16>
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
 8008bdc:	e7d9      	b.n	8008b92 <sniprintf+0x16>
 8008bde:	bf00      	nop
 8008be0:	2000000c 	.word	0x2000000c

08008be4 <strcat>:
 8008be4:	b510      	push	{r4, lr}
 8008be6:	4602      	mov	r2, r0
 8008be8:	7814      	ldrb	r4, [r2, #0]
 8008bea:	4613      	mov	r3, r2
 8008bec:	3201      	adds	r2, #1
 8008bee:	2c00      	cmp	r4, #0
 8008bf0:	d1fa      	bne.n	8008be8 <strcat+0x4>
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bf8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bfc:	2a00      	cmp	r2, #0
 8008bfe:	d1f9      	bne.n	8008bf4 <strcat+0x10>
 8008c00:	bd10      	pop	{r4, pc}
	...

08008c04 <__swbuf_r>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	460e      	mov	r6, r1
 8008c08:	4614      	mov	r4, r2
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	b118      	cbz	r0, 8008c16 <__swbuf_r+0x12>
 8008c0e:	6983      	ldr	r3, [r0, #24]
 8008c10:	b90b      	cbnz	r3, 8008c16 <__swbuf_r+0x12>
 8008c12:	f000 f9d1 	bl	8008fb8 <__sinit>
 8008c16:	4b21      	ldr	r3, [pc, #132]	; (8008c9c <__swbuf_r+0x98>)
 8008c18:	429c      	cmp	r4, r3
 8008c1a:	d12b      	bne.n	8008c74 <__swbuf_r+0x70>
 8008c1c:	686c      	ldr	r4, [r5, #4]
 8008c1e:	69a3      	ldr	r3, [r4, #24]
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	071a      	lsls	r2, r3, #28
 8008c26:	d52f      	bpl.n	8008c88 <__swbuf_r+0x84>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	b36b      	cbz	r3, 8008c88 <__swbuf_r+0x84>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	6820      	ldr	r0, [r4, #0]
 8008c30:	1ac0      	subs	r0, r0, r3
 8008c32:	6963      	ldr	r3, [r4, #20]
 8008c34:	b2f6      	uxtb	r6, r6
 8008c36:	4283      	cmp	r3, r0
 8008c38:	4637      	mov	r7, r6
 8008c3a:	dc04      	bgt.n	8008c46 <__swbuf_r+0x42>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f926 	bl	8008e90 <_fflush_r>
 8008c44:	bb30      	cbnz	r0, 8008c94 <__swbuf_r+0x90>
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	60a3      	str	r3, [r4, #8]
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	6022      	str	r2, [r4, #0]
 8008c52:	701e      	strb	r6, [r3, #0]
 8008c54:	6963      	ldr	r3, [r4, #20]
 8008c56:	3001      	adds	r0, #1
 8008c58:	4283      	cmp	r3, r0
 8008c5a:	d004      	beq.n	8008c66 <__swbuf_r+0x62>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	07db      	lsls	r3, r3, #31
 8008c60:	d506      	bpl.n	8008c70 <__swbuf_r+0x6c>
 8008c62:	2e0a      	cmp	r6, #10
 8008c64:	d104      	bne.n	8008c70 <__swbuf_r+0x6c>
 8008c66:	4621      	mov	r1, r4
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f000 f911 	bl	8008e90 <_fflush_r>
 8008c6e:	b988      	cbnz	r0, 8008c94 <__swbuf_r+0x90>
 8008c70:	4638      	mov	r0, r7
 8008c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c74:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <__swbuf_r+0x9c>)
 8008c76:	429c      	cmp	r4, r3
 8008c78:	d101      	bne.n	8008c7e <__swbuf_r+0x7a>
 8008c7a:	68ac      	ldr	r4, [r5, #8]
 8008c7c:	e7cf      	b.n	8008c1e <__swbuf_r+0x1a>
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <__swbuf_r+0xa0>)
 8008c80:	429c      	cmp	r4, r3
 8008c82:	bf08      	it	eq
 8008c84:	68ec      	ldreq	r4, [r5, #12]
 8008c86:	e7ca      	b.n	8008c1e <__swbuf_r+0x1a>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 f80c 	bl	8008ca8 <__swsetup_r>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d0cb      	beq.n	8008c2c <__swbuf_r+0x28>
 8008c94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c98:	e7ea      	b.n	8008c70 <__swbuf_r+0x6c>
 8008c9a:	bf00      	nop
 8008c9c:	08009dac 	.word	0x08009dac
 8008ca0:	08009dcc 	.word	0x08009dcc
 8008ca4:	08009d8c 	.word	0x08009d8c

08008ca8 <__swsetup_r>:
 8008ca8:	4b32      	ldr	r3, [pc, #200]	; (8008d74 <__swsetup_r+0xcc>)
 8008caa:	b570      	push	{r4, r5, r6, lr}
 8008cac:	681d      	ldr	r5, [r3, #0]
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	b125      	cbz	r5, 8008cbe <__swsetup_r+0x16>
 8008cb4:	69ab      	ldr	r3, [r5, #24]
 8008cb6:	b913      	cbnz	r3, 8008cbe <__swsetup_r+0x16>
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f000 f97d 	bl	8008fb8 <__sinit>
 8008cbe:	4b2e      	ldr	r3, [pc, #184]	; (8008d78 <__swsetup_r+0xd0>)
 8008cc0:	429c      	cmp	r4, r3
 8008cc2:	d10f      	bne.n	8008ce4 <__swsetup_r+0x3c>
 8008cc4:	686c      	ldr	r4, [r5, #4]
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ccc:	0719      	lsls	r1, r3, #28
 8008cce:	d42c      	bmi.n	8008d2a <__swsetup_r+0x82>
 8008cd0:	06dd      	lsls	r5, r3, #27
 8008cd2:	d411      	bmi.n	8008cf8 <__swsetup_r+0x50>
 8008cd4:	2309      	movs	r3, #9
 8008cd6:	6033      	str	r3, [r6, #0]
 8008cd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ce2:	e03e      	b.n	8008d62 <__swsetup_r+0xba>
 8008ce4:	4b25      	ldr	r3, [pc, #148]	; (8008d7c <__swsetup_r+0xd4>)
 8008ce6:	429c      	cmp	r4, r3
 8008ce8:	d101      	bne.n	8008cee <__swsetup_r+0x46>
 8008cea:	68ac      	ldr	r4, [r5, #8]
 8008cec:	e7eb      	b.n	8008cc6 <__swsetup_r+0x1e>
 8008cee:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <__swsetup_r+0xd8>)
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	bf08      	it	eq
 8008cf4:	68ec      	ldreq	r4, [r5, #12]
 8008cf6:	e7e6      	b.n	8008cc6 <__swsetup_r+0x1e>
 8008cf8:	0758      	lsls	r0, r3, #29
 8008cfa:	d512      	bpl.n	8008d22 <__swsetup_r+0x7a>
 8008cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cfe:	b141      	cbz	r1, 8008d12 <__swsetup_r+0x6a>
 8008d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d04:	4299      	cmp	r1, r3
 8008d06:	d002      	beq.n	8008d0e <__swsetup_r+0x66>
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f000 fa5b 	bl	80091c4 <_free_r>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6363      	str	r3, [r4, #52]	; 0x34
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d18:	81a3      	strh	r3, [r4, #12]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	6063      	str	r3, [r4, #4]
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f043 0308 	orr.w	r3, r3, #8
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	b94b      	cbnz	r3, 8008d42 <__swsetup_r+0x9a>
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d38:	d003      	beq.n	8008d42 <__swsetup_r+0x9a>
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f000 fa01 	bl	8009144 <__smakebuf_r>
 8008d42:	89a0      	ldrh	r0, [r4, #12]
 8008d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d48:	f010 0301 	ands.w	r3, r0, #1
 8008d4c:	d00a      	beq.n	8008d64 <__swsetup_r+0xbc>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60a3      	str	r3, [r4, #8]
 8008d52:	6963      	ldr	r3, [r4, #20]
 8008d54:	425b      	negs	r3, r3
 8008d56:	61a3      	str	r3, [r4, #24]
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	b943      	cbnz	r3, 8008d6e <__swsetup_r+0xc6>
 8008d5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d60:	d1ba      	bne.n	8008cd8 <__swsetup_r+0x30>
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	0781      	lsls	r1, r0, #30
 8008d66:	bf58      	it	pl
 8008d68:	6963      	ldrpl	r3, [r4, #20]
 8008d6a:	60a3      	str	r3, [r4, #8]
 8008d6c:	e7f4      	b.n	8008d58 <__swsetup_r+0xb0>
 8008d6e:	2000      	movs	r0, #0
 8008d70:	e7f7      	b.n	8008d62 <__swsetup_r+0xba>
 8008d72:	bf00      	nop
 8008d74:	2000000c 	.word	0x2000000c
 8008d78:	08009dac 	.word	0x08009dac
 8008d7c:	08009dcc 	.word	0x08009dcc
 8008d80:	08009d8c 	.word	0x08009d8c

08008d84 <__sflush_r>:
 8008d84:	898a      	ldrh	r2, [r1, #12]
 8008d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	0710      	lsls	r0, r2, #28
 8008d8e:	460c      	mov	r4, r1
 8008d90:	d458      	bmi.n	8008e44 <__sflush_r+0xc0>
 8008d92:	684b      	ldr	r3, [r1, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	dc05      	bgt.n	8008da4 <__sflush_r+0x20>
 8008d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dc02      	bgt.n	8008da4 <__sflush_r+0x20>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	d0f9      	beq.n	8008d9e <__sflush_r+0x1a>
 8008daa:	2300      	movs	r3, #0
 8008dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008db0:	682f      	ldr	r7, [r5, #0]
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	d032      	beq.n	8008e1c <__sflush_r+0x98>
 8008db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	075a      	lsls	r2, r3, #29
 8008dbc:	d505      	bpl.n	8008dca <__sflush_r+0x46>
 8008dbe:	6863      	ldr	r3, [r4, #4]
 8008dc0:	1ac0      	subs	r0, r0, r3
 8008dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dc4:	b10b      	cbz	r3, 8008dca <__sflush_r+0x46>
 8008dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dc8:	1ac0      	subs	r0, r0, r3
 8008dca:	2300      	movs	r3, #0
 8008dcc:	4602      	mov	r2, r0
 8008dce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dd0:	6a21      	ldr	r1, [r4, #32]
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	47b0      	blx	r6
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	d106      	bne.n	8008dea <__sflush_r+0x66>
 8008ddc:	6829      	ldr	r1, [r5, #0]
 8008dde:	291d      	cmp	r1, #29
 8008de0:	d82c      	bhi.n	8008e3c <__sflush_r+0xb8>
 8008de2:	4a2a      	ldr	r2, [pc, #168]	; (8008e8c <__sflush_r+0x108>)
 8008de4:	40ca      	lsrs	r2, r1
 8008de6:	07d6      	lsls	r6, r2, #31
 8008de8:	d528      	bpl.n	8008e3c <__sflush_r+0xb8>
 8008dea:	2200      	movs	r2, #0
 8008dec:	6062      	str	r2, [r4, #4]
 8008dee:	04d9      	lsls	r1, r3, #19
 8008df0:	6922      	ldr	r2, [r4, #16]
 8008df2:	6022      	str	r2, [r4, #0]
 8008df4:	d504      	bpl.n	8008e00 <__sflush_r+0x7c>
 8008df6:	1c42      	adds	r2, r0, #1
 8008df8:	d101      	bne.n	8008dfe <__sflush_r+0x7a>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b903      	cbnz	r3, 8008e00 <__sflush_r+0x7c>
 8008dfe:	6560      	str	r0, [r4, #84]	; 0x54
 8008e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e02:	602f      	str	r7, [r5, #0]
 8008e04:	2900      	cmp	r1, #0
 8008e06:	d0ca      	beq.n	8008d9e <__sflush_r+0x1a>
 8008e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e0c:	4299      	cmp	r1, r3
 8008e0e:	d002      	beq.n	8008e16 <__sflush_r+0x92>
 8008e10:	4628      	mov	r0, r5
 8008e12:	f000 f9d7 	bl	80091c4 <_free_r>
 8008e16:	2000      	movs	r0, #0
 8008e18:	6360      	str	r0, [r4, #52]	; 0x34
 8008e1a:	e7c1      	b.n	8008da0 <__sflush_r+0x1c>
 8008e1c:	6a21      	ldr	r1, [r4, #32]
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4628      	mov	r0, r5
 8008e22:	47b0      	blx	r6
 8008e24:	1c41      	adds	r1, r0, #1
 8008e26:	d1c7      	bne.n	8008db8 <__sflush_r+0x34>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0c4      	beq.n	8008db8 <__sflush_r+0x34>
 8008e2e:	2b1d      	cmp	r3, #29
 8008e30:	d001      	beq.n	8008e36 <__sflush_r+0xb2>
 8008e32:	2b16      	cmp	r3, #22
 8008e34:	d101      	bne.n	8008e3a <__sflush_r+0xb6>
 8008e36:	602f      	str	r7, [r5, #0]
 8008e38:	e7b1      	b.n	8008d9e <__sflush_r+0x1a>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e40:	81a3      	strh	r3, [r4, #12]
 8008e42:	e7ad      	b.n	8008da0 <__sflush_r+0x1c>
 8008e44:	690f      	ldr	r7, [r1, #16]
 8008e46:	2f00      	cmp	r7, #0
 8008e48:	d0a9      	beq.n	8008d9e <__sflush_r+0x1a>
 8008e4a:	0793      	lsls	r3, r2, #30
 8008e4c:	680e      	ldr	r6, [r1, #0]
 8008e4e:	bf08      	it	eq
 8008e50:	694b      	ldreq	r3, [r1, #20]
 8008e52:	600f      	str	r7, [r1, #0]
 8008e54:	bf18      	it	ne
 8008e56:	2300      	movne	r3, #0
 8008e58:	eba6 0807 	sub.w	r8, r6, r7
 8008e5c:	608b      	str	r3, [r1, #8]
 8008e5e:	f1b8 0f00 	cmp.w	r8, #0
 8008e62:	dd9c      	ble.n	8008d9e <__sflush_r+0x1a>
 8008e64:	6a21      	ldr	r1, [r4, #32]
 8008e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e68:	4643      	mov	r3, r8
 8008e6a:	463a      	mov	r2, r7
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	47b0      	blx	r6
 8008e70:	2800      	cmp	r0, #0
 8008e72:	dc06      	bgt.n	8008e82 <__sflush_r+0xfe>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e80:	e78e      	b.n	8008da0 <__sflush_r+0x1c>
 8008e82:	4407      	add	r7, r0
 8008e84:	eba8 0800 	sub.w	r8, r8, r0
 8008e88:	e7e9      	b.n	8008e5e <__sflush_r+0xda>
 8008e8a:	bf00      	nop
 8008e8c:	20400001 	.word	0x20400001

08008e90 <_fflush_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	690b      	ldr	r3, [r1, #16]
 8008e94:	4605      	mov	r5, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	b913      	cbnz	r3, 8008ea0 <_fflush_r+0x10>
 8008e9a:	2500      	movs	r5, #0
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	b118      	cbz	r0, 8008eaa <_fflush_r+0x1a>
 8008ea2:	6983      	ldr	r3, [r0, #24]
 8008ea4:	b90b      	cbnz	r3, 8008eaa <_fflush_r+0x1a>
 8008ea6:	f000 f887 	bl	8008fb8 <__sinit>
 8008eaa:	4b14      	ldr	r3, [pc, #80]	; (8008efc <_fflush_r+0x6c>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	d11b      	bne.n	8008ee8 <_fflush_r+0x58>
 8008eb0:	686c      	ldr	r4, [r5, #4]
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0ef      	beq.n	8008e9a <_fflush_r+0xa>
 8008eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ebc:	07d0      	lsls	r0, r2, #31
 8008ebe:	d404      	bmi.n	8008eca <_fflush_r+0x3a>
 8008ec0:	0599      	lsls	r1, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_fflush_r+0x3a>
 8008ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ec6:	f000 f915 	bl	80090f4 <__retarget_lock_acquire_recursive>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f7ff ff59 	bl	8008d84 <__sflush_r>
 8008ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed4:	07da      	lsls	r2, r3, #31
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	d4e0      	bmi.n	8008e9c <_fflush_r+0xc>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	059b      	lsls	r3, r3, #22
 8008ede:	d4dd      	bmi.n	8008e9c <_fflush_r+0xc>
 8008ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee2:	f000 f908 	bl	80090f6 <__retarget_lock_release_recursive>
 8008ee6:	e7d9      	b.n	8008e9c <_fflush_r+0xc>
 8008ee8:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <_fflush_r+0x70>)
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d101      	bne.n	8008ef2 <_fflush_r+0x62>
 8008eee:	68ac      	ldr	r4, [r5, #8]
 8008ef0:	e7df      	b.n	8008eb2 <_fflush_r+0x22>
 8008ef2:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <_fflush_r+0x74>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	bf08      	it	eq
 8008ef8:	68ec      	ldreq	r4, [r5, #12]
 8008efa:	e7da      	b.n	8008eb2 <_fflush_r+0x22>
 8008efc:	08009dac 	.word	0x08009dac
 8008f00:	08009dcc 	.word	0x08009dcc
 8008f04:	08009d8c 	.word	0x08009d8c

08008f08 <std>:
 8008f08:	2300      	movs	r3, #0
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f16:	6083      	str	r3, [r0, #8]
 8008f18:	8181      	strh	r1, [r0, #12]
 8008f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008f1c:	81c2      	strh	r2, [r0, #14]
 8008f1e:	6183      	str	r3, [r0, #24]
 8008f20:	4619      	mov	r1, r3
 8008f22:	2208      	movs	r2, #8
 8008f24:	305c      	adds	r0, #92	; 0x5c
 8008f26:	f7ff fdab 	bl	8008a80 <memset>
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <std+0x38>)
 8008f2c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <std+0x3c>)
 8008f30:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f32:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <std+0x40>)
 8008f34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <std+0x44>)
 8008f38:	6224      	str	r4, [r4, #32]
 8008f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	bf00      	nop
 8008f40:	08009985 	.word	0x08009985
 8008f44:	080099a7 	.word	0x080099a7
 8008f48:	080099df 	.word	0x080099df
 8008f4c:	08009a03 	.word	0x08009a03

08008f50 <_cleanup_r>:
 8008f50:	4901      	ldr	r1, [pc, #4]	; (8008f58 <_cleanup_r+0x8>)
 8008f52:	f000 b8af 	b.w	80090b4 <_fwalk_reent>
 8008f56:	bf00      	nop
 8008f58:	08008e91 	.word	0x08008e91

08008f5c <__sfmoreglue>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	2268      	movs	r2, #104	; 0x68
 8008f60:	1e4d      	subs	r5, r1, #1
 8008f62:	4355      	muls	r5, r2
 8008f64:	460e      	mov	r6, r1
 8008f66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f6a:	f000 f997 	bl	800929c <_malloc_r>
 8008f6e:	4604      	mov	r4, r0
 8008f70:	b140      	cbz	r0, 8008f84 <__sfmoreglue+0x28>
 8008f72:	2100      	movs	r1, #0
 8008f74:	e9c0 1600 	strd	r1, r6, [r0]
 8008f78:	300c      	adds	r0, #12
 8008f7a:	60a0      	str	r0, [r4, #8]
 8008f7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f80:	f7ff fd7e 	bl	8008a80 <memset>
 8008f84:	4620      	mov	r0, r4
 8008f86:	bd70      	pop	{r4, r5, r6, pc}

08008f88 <__sfp_lock_acquire>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__sfp_lock_acquire+0x8>)
 8008f8a:	f000 b8b3 	b.w	80090f4 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20002745 	.word	0x20002745

08008f94 <__sfp_lock_release>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__sfp_lock_release+0x8>)
 8008f96:	f000 b8ae 	b.w	80090f6 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20002745 	.word	0x20002745

08008fa0 <__sinit_lock_acquire>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__sinit_lock_acquire+0x8>)
 8008fa2:	f000 b8a7 	b.w	80090f4 <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20002746 	.word	0x20002746

08008fac <__sinit_lock_release>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__sinit_lock_release+0x8>)
 8008fae:	f000 b8a2 	b.w	80090f6 <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20002746 	.word	0x20002746

08008fb8 <__sinit>:
 8008fb8:	b510      	push	{r4, lr}
 8008fba:	4604      	mov	r4, r0
 8008fbc:	f7ff fff0 	bl	8008fa0 <__sinit_lock_acquire>
 8008fc0:	69a3      	ldr	r3, [r4, #24]
 8008fc2:	b11b      	cbz	r3, 8008fcc <__sinit+0x14>
 8008fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc8:	f7ff bff0 	b.w	8008fac <__sinit_lock_release>
 8008fcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fd0:	6523      	str	r3, [r4, #80]	; 0x50
 8008fd2:	4b13      	ldr	r3, [pc, #76]	; (8009020 <__sinit+0x68>)
 8008fd4:	4a13      	ldr	r2, [pc, #76]	; (8009024 <__sinit+0x6c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	bf04      	itt	eq
 8008fde:	2301      	moveq	r3, #1
 8008fe0:	61a3      	streq	r3, [r4, #24]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 f820 	bl	8009028 <__sfp>
 8008fe8:	6060      	str	r0, [r4, #4]
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 f81c 	bl	8009028 <__sfp>
 8008ff0:	60a0      	str	r0, [r4, #8]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 f818 	bl	8009028 <__sfp>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	60e0      	str	r0, [r4, #12]
 8008ffc:	2104      	movs	r1, #4
 8008ffe:	6860      	ldr	r0, [r4, #4]
 8009000:	f7ff ff82 	bl	8008f08 <std>
 8009004:	68a0      	ldr	r0, [r4, #8]
 8009006:	2201      	movs	r2, #1
 8009008:	2109      	movs	r1, #9
 800900a:	f7ff ff7d 	bl	8008f08 <std>
 800900e:	68e0      	ldr	r0, [r4, #12]
 8009010:	2202      	movs	r2, #2
 8009012:	2112      	movs	r1, #18
 8009014:	f7ff ff78 	bl	8008f08 <std>
 8009018:	2301      	movs	r3, #1
 800901a:	61a3      	str	r3, [r4, #24]
 800901c:	e7d2      	b.n	8008fc4 <__sinit+0xc>
 800901e:	bf00      	nop
 8009020:	08009d88 	.word	0x08009d88
 8009024:	08008f51 	.word	0x08008f51

08009028 <__sfp>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	4607      	mov	r7, r0
 800902c:	f7ff ffac 	bl	8008f88 <__sfp_lock_acquire>
 8009030:	4b1e      	ldr	r3, [pc, #120]	; (80090ac <__sfp+0x84>)
 8009032:	681e      	ldr	r6, [r3, #0]
 8009034:	69b3      	ldr	r3, [r6, #24]
 8009036:	b913      	cbnz	r3, 800903e <__sfp+0x16>
 8009038:	4630      	mov	r0, r6
 800903a:	f7ff ffbd 	bl	8008fb8 <__sinit>
 800903e:	3648      	adds	r6, #72	; 0x48
 8009040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009044:	3b01      	subs	r3, #1
 8009046:	d503      	bpl.n	8009050 <__sfp+0x28>
 8009048:	6833      	ldr	r3, [r6, #0]
 800904a:	b30b      	cbz	r3, 8009090 <__sfp+0x68>
 800904c:	6836      	ldr	r6, [r6, #0]
 800904e:	e7f7      	b.n	8009040 <__sfp+0x18>
 8009050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009054:	b9d5      	cbnz	r5, 800908c <__sfp+0x64>
 8009056:	4b16      	ldr	r3, [pc, #88]	; (80090b0 <__sfp+0x88>)
 8009058:	60e3      	str	r3, [r4, #12]
 800905a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800905e:	6665      	str	r5, [r4, #100]	; 0x64
 8009060:	f000 f847 	bl	80090f2 <__retarget_lock_init_recursive>
 8009064:	f7ff ff96 	bl	8008f94 <__sfp_lock_release>
 8009068:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800906c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009070:	6025      	str	r5, [r4, #0]
 8009072:	61a5      	str	r5, [r4, #24]
 8009074:	2208      	movs	r2, #8
 8009076:	4629      	mov	r1, r5
 8009078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800907c:	f7ff fd00 	bl	8008a80 <memset>
 8009080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009088:	4620      	mov	r0, r4
 800908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800908c:	3468      	adds	r4, #104	; 0x68
 800908e:	e7d9      	b.n	8009044 <__sfp+0x1c>
 8009090:	2104      	movs	r1, #4
 8009092:	4638      	mov	r0, r7
 8009094:	f7ff ff62 	bl	8008f5c <__sfmoreglue>
 8009098:	4604      	mov	r4, r0
 800909a:	6030      	str	r0, [r6, #0]
 800909c:	2800      	cmp	r0, #0
 800909e:	d1d5      	bne.n	800904c <__sfp+0x24>
 80090a0:	f7ff ff78 	bl	8008f94 <__sfp_lock_release>
 80090a4:	230c      	movs	r3, #12
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	e7ee      	b.n	8009088 <__sfp+0x60>
 80090aa:	bf00      	nop
 80090ac:	08009d88 	.word	0x08009d88
 80090b0:	ffff0001 	.word	0xffff0001

080090b4 <_fwalk_reent>:
 80090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	4606      	mov	r6, r0
 80090ba:	4688      	mov	r8, r1
 80090bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090c0:	2700      	movs	r7, #0
 80090c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090c6:	f1b9 0901 	subs.w	r9, r9, #1
 80090ca:	d505      	bpl.n	80090d8 <_fwalk_reent+0x24>
 80090cc:	6824      	ldr	r4, [r4, #0]
 80090ce:	2c00      	cmp	r4, #0
 80090d0:	d1f7      	bne.n	80090c2 <_fwalk_reent+0xe>
 80090d2:	4638      	mov	r0, r7
 80090d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d8:	89ab      	ldrh	r3, [r5, #12]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d907      	bls.n	80090ee <_fwalk_reent+0x3a>
 80090de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090e2:	3301      	adds	r3, #1
 80090e4:	d003      	beq.n	80090ee <_fwalk_reent+0x3a>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4630      	mov	r0, r6
 80090ea:	47c0      	blx	r8
 80090ec:	4307      	orrs	r7, r0
 80090ee:	3568      	adds	r5, #104	; 0x68
 80090f0:	e7e9      	b.n	80090c6 <_fwalk_reent+0x12>

080090f2 <__retarget_lock_init_recursive>:
 80090f2:	4770      	bx	lr

080090f4 <__retarget_lock_acquire_recursive>:
 80090f4:	4770      	bx	lr

080090f6 <__retarget_lock_release_recursive>:
 80090f6:	4770      	bx	lr

080090f8 <__swhatbuf_r>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	460e      	mov	r6, r1
 80090fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009100:	2900      	cmp	r1, #0
 8009102:	b096      	sub	sp, #88	; 0x58
 8009104:	4614      	mov	r4, r2
 8009106:	461d      	mov	r5, r3
 8009108:	da08      	bge.n	800911c <__swhatbuf_r+0x24>
 800910a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	602a      	str	r2, [r5, #0]
 8009112:	061a      	lsls	r2, r3, #24
 8009114:	d410      	bmi.n	8009138 <__swhatbuf_r+0x40>
 8009116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800911a:	e00e      	b.n	800913a <__swhatbuf_r+0x42>
 800911c:	466a      	mov	r2, sp
 800911e:	f000 fc97 	bl	8009a50 <_fstat_r>
 8009122:	2800      	cmp	r0, #0
 8009124:	dbf1      	blt.n	800910a <__swhatbuf_r+0x12>
 8009126:	9a01      	ldr	r2, [sp, #4]
 8009128:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800912c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009130:	425a      	negs	r2, r3
 8009132:	415a      	adcs	r2, r3
 8009134:	602a      	str	r2, [r5, #0]
 8009136:	e7ee      	b.n	8009116 <__swhatbuf_r+0x1e>
 8009138:	2340      	movs	r3, #64	; 0x40
 800913a:	2000      	movs	r0, #0
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	b016      	add	sp, #88	; 0x58
 8009140:	bd70      	pop	{r4, r5, r6, pc}
	...

08009144 <__smakebuf_r>:
 8009144:	898b      	ldrh	r3, [r1, #12]
 8009146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009148:	079d      	lsls	r5, r3, #30
 800914a:	4606      	mov	r6, r0
 800914c:	460c      	mov	r4, r1
 800914e:	d507      	bpl.n	8009160 <__smakebuf_r+0x1c>
 8009150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	6123      	str	r3, [r4, #16]
 8009158:	2301      	movs	r3, #1
 800915a:	6163      	str	r3, [r4, #20]
 800915c:	b002      	add	sp, #8
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	ab01      	add	r3, sp, #4
 8009162:	466a      	mov	r2, sp
 8009164:	f7ff ffc8 	bl	80090f8 <__swhatbuf_r>
 8009168:	9900      	ldr	r1, [sp, #0]
 800916a:	4605      	mov	r5, r0
 800916c:	4630      	mov	r0, r6
 800916e:	f000 f895 	bl	800929c <_malloc_r>
 8009172:	b948      	cbnz	r0, 8009188 <__smakebuf_r+0x44>
 8009174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009178:	059a      	lsls	r2, r3, #22
 800917a:	d4ef      	bmi.n	800915c <__smakebuf_r+0x18>
 800917c:	f023 0303 	bic.w	r3, r3, #3
 8009180:	f043 0302 	orr.w	r3, r3, #2
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	e7e3      	b.n	8009150 <__smakebuf_r+0xc>
 8009188:	4b0d      	ldr	r3, [pc, #52]	; (80091c0 <__smakebuf_r+0x7c>)
 800918a:	62b3      	str	r3, [r6, #40]	; 0x28
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	6020      	str	r0, [r4, #0]
 8009190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009194:	81a3      	strh	r3, [r4, #12]
 8009196:	9b00      	ldr	r3, [sp, #0]
 8009198:	6163      	str	r3, [r4, #20]
 800919a:	9b01      	ldr	r3, [sp, #4]
 800919c:	6120      	str	r0, [r4, #16]
 800919e:	b15b      	cbz	r3, 80091b8 <__smakebuf_r+0x74>
 80091a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091a4:	4630      	mov	r0, r6
 80091a6:	f000 fc65 	bl	8009a74 <_isatty_r>
 80091aa:	b128      	cbz	r0, 80091b8 <__smakebuf_r+0x74>
 80091ac:	89a3      	ldrh	r3, [r4, #12]
 80091ae:	f023 0303 	bic.w	r3, r3, #3
 80091b2:	f043 0301 	orr.w	r3, r3, #1
 80091b6:	81a3      	strh	r3, [r4, #12]
 80091b8:	89a0      	ldrh	r0, [r4, #12]
 80091ba:	4305      	orrs	r5, r0
 80091bc:	81a5      	strh	r5, [r4, #12]
 80091be:	e7cd      	b.n	800915c <__smakebuf_r+0x18>
 80091c0:	08008f51 	.word	0x08008f51

080091c4 <_free_r>:
 80091c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091c6:	2900      	cmp	r1, #0
 80091c8:	d044      	beq.n	8009254 <_free_r+0x90>
 80091ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ce:	9001      	str	r0, [sp, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f1a1 0404 	sub.w	r4, r1, #4
 80091d6:	bfb8      	it	lt
 80091d8:	18e4      	addlt	r4, r4, r3
 80091da:	f000 fc95 	bl	8009b08 <__malloc_lock>
 80091de:	4a1e      	ldr	r2, [pc, #120]	; (8009258 <_free_r+0x94>)
 80091e0:	9801      	ldr	r0, [sp, #4]
 80091e2:	6813      	ldr	r3, [r2, #0]
 80091e4:	b933      	cbnz	r3, 80091f4 <_free_r+0x30>
 80091e6:	6063      	str	r3, [r4, #4]
 80091e8:	6014      	str	r4, [r2, #0]
 80091ea:	b003      	add	sp, #12
 80091ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091f0:	f000 bc90 	b.w	8009b14 <__malloc_unlock>
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d908      	bls.n	800920a <_free_r+0x46>
 80091f8:	6825      	ldr	r5, [r4, #0]
 80091fa:	1961      	adds	r1, r4, r5
 80091fc:	428b      	cmp	r3, r1
 80091fe:	bf01      	itttt	eq
 8009200:	6819      	ldreq	r1, [r3, #0]
 8009202:	685b      	ldreq	r3, [r3, #4]
 8009204:	1949      	addeq	r1, r1, r5
 8009206:	6021      	streq	r1, [r4, #0]
 8009208:	e7ed      	b.n	80091e6 <_free_r+0x22>
 800920a:	461a      	mov	r2, r3
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	b10b      	cbz	r3, 8009214 <_free_r+0x50>
 8009210:	42a3      	cmp	r3, r4
 8009212:	d9fa      	bls.n	800920a <_free_r+0x46>
 8009214:	6811      	ldr	r1, [r2, #0]
 8009216:	1855      	adds	r5, r2, r1
 8009218:	42a5      	cmp	r5, r4
 800921a:	d10b      	bne.n	8009234 <_free_r+0x70>
 800921c:	6824      	ldr	r4, [r4, #0]
 800921e:	4421      	add	r1, r4
 8009220:	1854      	adds	r4, r2, r1
 8009222:	42a3      	cmp	r3, r4
 8009224:	6011      	str	r1, [r2, #0]
 8009226:	d1e0      	bne.n	80091ea <_free_r+0x26>
 8009228:	681c      	ldr	r4, [r3, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	6053      	str	r3, [r2, #4]
 800922e:	4421      	add	r1, r4
 8009230:	6011      	str	r1, [r2, #0]
 8009232:	e7da      	b.n	80091ea <_free_r+0x26>
 8009234:	d902      	bls.n	800923c <_free_r+0x78>
 8009236:	230c      	movs	r3, #12
 8009238:	6003      	str	r3, [r0, #0]
 800923a:	e7d6      	b.n	80091ea <_free_r+0x26>
 800923c:	6825      	ldr	r5, [r4, #0]
 800923e:	1961      	adds	r1, r4, r5
 8009240:	428b      	cmp	r3, r1
 8009242:	bf04      	itt	eq
 8009244:	6819      	ldreq	r1, [r3, #0]
 8009246:	685b      	ldreq	r3, [r3, #4]
 8009248:	6063      	str	r3, [r4, #4]
 800924a:	bf04      	itt	eq
 800924c:	1949      	addeq	r1, r1, r5
 800924e:	6021      	streq	r1, [r4, #0]
 8009250:	6054      	str	r4, [r2, #4]
 8009252:	e7ca      	b.n	80091ea <_free_r+0x26>
 8009254:	b003      	add	sp, #12
 8009256:	bd30      	pop	{r4, r5, pc}
 8009258:	20002748 	.word	0x20002748

0800925c <sbrk_aligned>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	4e0e      	ldr	r6, [pc, #56]	; (8009298 <sbrk_aligned+0x3c>)
 8009260:	460c      	mov	r4, r1
 8009262:	6831      	ldr	r1, [r6, #0]
 8009264:	4605      	mov	r5, r0
 8009266:	b911      	cbnz	r1, 800926e <sbrk_aligned+0x12>
 8009268:	f000 fb7c 	bl	8009964 <_sbrk_r>
 800926c:	6030      	str	r0, [r6, #0]
 800926e:	4621      	mov	r1, r4
 8009270:	4628      	mov	r0, r5
 8009272:	f000 fb77 	bl	8009964 <_sbrk_r>
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	d00a      	beq.n	8009290 <sbrk_aligned+0x34>
 800927a:	1cc4      	adds	r4, r0, #3
 800927c:	f024 0403 	bic.w	r4, r4, #3
 8009280:	42a0      	cmp	r0, r4
 8009282:	d007      	beq.n	8009294 <sbrk_aligned+0x38>
 8009284:	1a21      	subs	r1, r4, r0
 8009286:	4628      	mov	r0, r5
 8009288:	f000 fb6c 	bl	8009964 <_sbrk_r>
 800928c:	3001      	adds	r0, #1
 800928e:	d101      	bne.n	8009294 <sbrk_aligned+0x38>
 8009290:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009294:	4620      	mov	r0, r4
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	2000274c 	.word	0x2000274c

0800929c <_malloc_r>:
 800929c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a0:	1ccd      	adds	r5, r1, #3
 80092a2:	f025 0503 	bic.w	r5, r5, #3
 80092a6:	3508      	adds	r5, #8
 80092a8:	2d0c      	cmp	r5, #12
 80092aa:	bf38      	it	cc
 80092ac:	250c      	movcc	r5, #12
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	4607      	mov	r7, r0
 80092b2:	db01      	blt.n	80092b8 <_malloc_r+0x1c>
 80092b4:	42a9      	cmp	r1, r5
 80092b6:	d905      	bls.n	80092c4 <_malloc_r+0x28>
 80092b8:	230c      	movs	r3, #12
 80092ba:	603b      	str	r3, [r7, #0]
 80092bc:	2600      	movs	r6, #0
 80092be:	4630      	mov	r0, r6
 80092c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c4:	4e2e      	ldr	r6, [pc, #184]	; (8009380 <_malloc_r+0xe4>)
 80092c6:	f000 fc1f 	bl	8009b08 <__malloc_lock>
 80092ca:	6833      	ldr	r3, [r6, #0]
 80092cc:	461c      	mov	r4, r3
 80092ce:	bb34      	cbnz	r4, 800931e <_malloc_r+0x82>
 80092d0:	4629      	mov	r1, r5
 80092d2:	4638      	mov	r0, r7
 80092d4:	f7ff ffc2 	bl	800925c <sbrk_aligned>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	4604      	mov	r4, r0
 80092dc:	d14d      	bne.n	800937a <_malloc_r+0xde>
 80092de:	6834      	ldr	r4, [r6, #0]
 80092e0:	4626      	mov	r6, r4
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	d140      	bne.n	8009368 <_malloc_r+0xcc>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	4631      	mov	r1, r6
 80092ea:	4638      	mov	r0, r7
 80092ec:	eb04 0803 	add.w	r8, r4, r3
 80092f0:	f000 fb38 	bl	8009964 <_sbrk_r>
 80092f4:	4580      	cmp	r8, r0
 80092f6:	d13a      	bne.n	800936e <_malloc_r+0xd2>
 80092f8:	6821      	ldr	r1, [r4, #0]
 80092fa:	3503      	adds	r5, #3
 80092fc:	1a6d      	subs	r5, r5, r1
 80092fe:	f025 0503 	bic.w	r5, r5, #3
 8009302:	3508      	adds	r5, #8
 8009304:	2d0c      	cmp	r5, #12
 8009306:	bf38      	it	cc
 8009308:	250c      	movcc	r5, #12
 800930a:	4629      	mov	r1, r5
 800930c:	4638      	mov	r0, r7
 800930e:	f7ff ffa5 	bl	800925c <sbrk_aligned>
 8009312:	3001      	adds	r0, #1
 8009314:	d02b      	beq.n	800936e <_malloc_r+0xd2>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	442b      	add	r3, r5
 800931a:	6023      	str	r3, [r4, #0]
 800931c:	e00e      	b.n	800933c <_malloc_r+0xa0>
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	1b52      	subs	r2, r2, r5
 8009322:	d41e      	bmi.n	8009362 <_malloc_r+0xc6>
 8009324:	2a0b      	cmp	r2, #11
 8009326:	d916      	bls.n	8009356 <_malloc_r+0xba>
 8009328:	1961      	adds	r1, r4, r5
 800932a:	42a3      	cmp	r3, r4
 800932c:	6025      	str	r5, [r4, #0]
 800932e:	bf18      	it	ne
 8009330:	6059      	strne	r1, [r3, #4]
 8009332:	6863      	ldr	r3, [r4, #4]
 8009334:	bf08      	it	eq
 8009336:	6031      	streq	r1, [r6, #0]
 8009338:	5162      	str	r2, [r4, r5]
 800933a:	604b      	str	r3, [r1, #4]
 800933c:	4638      	mov	r0, r7
 800933e:	f104 060b 	add.w	r6, r4, #11
 8009342:	f000 fbe7 	bl	8009b14 <__malloc_unlock>
 8009346:	f026 0607 	bic.w	r6, r6, #7
 800934a:	1d23      	adds	r3, r4, #4
 800934c:	1af2      	subs	r2, r6, r3
 800934e:	d0b6      	beq.n	80092be <_malloc_r+0x22>
 8009350:	1b9b      	subs	r3, r3, r6
 8009352:	50a3      	str	r3, [r4, r2]
 8009354:	e7b3      	b.n	80092be <_malloc_r+0x22>
 8009356:	6862      	ldr	r2, [r4, #4]
 8009358:	42a3      	cmp	r3, r4
 800935a:	bf0c      	ite	eq
 800935c:	6032      	streq	r2, [r6, #0]
 800935e:	605a      	strne	r2, [r3, #4]
 8009360:	e7ec      	b.n	800933c <_malloc_r+0xa0>
 8009362:	4623      	mov	r3, r4
 8009364:	6864      	ldr	r4, [r4, #4]
 8009366:	e7b2      	b.n	80092ce <_malloc_r+0x32>
 8009368:	4634      	mov	r4, r6
 800936a:	6876      	ldr	r6, [r6, #4]
 800936c:	e7b9      	b.n	80092e2 <_malloc_r+0x46>
 800936e:	230c      	movs	r3, #12
 8009370:	603b      	str	r3, [r7, #0]
 8009372:	4638      	mov	r0, r7
 8009374:	f000 fbce 	bl	8009b14 <__malloc_unlock>
 8009378:	e7a1      	b.n	80092be <_malloc_r+0x22>
 800937a:	6025      	str	r5, [r4, #0]
 800937c:	e7de      	b.n	800933c <_malloc_r+0xa0>
 800937e:	bf00      	nop
 8009380:	20002748 	.word	0x20002748

08009384 <__ssputs_r>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	688e      	ldr	r6, [r1, #8]
 800938a:	429e      	cmp	r6, r3
 800938c:	4682      	mov	sl, r0
 800938e:	460c      	mov	r4, r1
 8009390:	4690      	mov	r8, r2
 8009392:	461f      	mov	r7, r3
 8009394:	d838      	bhi.n	8009408 <__ssputs_r+0x84>
 8009396:	898a      	ldrh	r2, [r1, #12]
 8009398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800939c:	d032      	beq.n	8009404 <__ssputs_r+0x80>
 800939e:	6825      	ldr	r5, [r4, #0]
 80093a0:	6909      	ldr	r1, [r1, #16]
 80093a2:	eba5 0901 	sub.w	r9, r5, r1
 80093a6:	6965      	ldr	r5, [r4, #20]
 80093a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093b0:	3301      	adds	r3, #1
 80093b2:	444b      	add	r3, r9
 80093b4:	106d      	asrs	r5, r5, #1
 80093b6:	429d      	cmp	r5, r3
 80093b8:	bf38      	it	cc
 80093ba:	461d      	movcc	r5, r3
 80093bc:	0553      	lsls	r3, r2, #21
 80093be:	d531      	bpl.n	8009424 <__ssputs_r+0xa0>
 80093c0:	4629      	mov	r1, r5
 80093c2:	f7ff ff6b 	bl	800929c <_malloc_r>
 80093c6:	4606      	mov	r6, r0
 80093c8:	b950      	cbnz	r0, 80093e0 <__ssputs_r+0x5c>
 80093ca:	230c      	movs	r3, #12
 80093cc:	f8ca 3000 	str.w	r3, [sl]
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d6:	81a3      	strh	r3, [r4, #12]
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e0:	6921      	ldr	r1, [r4, #16]
 80093e2:	464a      	mov	r2, r9
 80093e4:	f000 fb68 	bl	8009ab8 <memcpy>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	6126      	str	r6, [r4, #16]
 80093f6:	6165      	str	r5, [r4, #20]
 80093f8:	444e      	add	r6, r9
 80093fa:	eba5 0509 	sub.w	r5, r5, r9
 80093fe:	6026      	str	r6, [r4, #0]
 8009400:	60a5      	str	r5, [r4, #8]
 8009402:	463e      	mov	r6, r7
 8009404:	42be      	cmp	r6, r7
 8009406:	d900      	bls.n	800940a <__ssputs_r+0x86>
 8009408:	463e      	mov	r6, r7
 800940a:	6820      	ldr	r0, [r4, #0]
 800940c:	4632      	mov	r2, r6
 800940e:	4641      	mov	r1, r8
 8009410:	f000 fb60 	bl	8009ad4 <memmove>
 8009414:	68a3      	ldr	r3, [r4, #8]
 8009416:	1b9b      	subs	r3, r3, r6
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	4433      	add	r3, r6
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	2000      	movs	r0, #0
 8009422:	e7db      	b.n	80093dc <__ssputs_r+0x58>
 8009424:	462a      	mov	r2, r5
 8009426:	f000 fb7b 	bl	8009b20 <_realloc_r>
 800942a:	4606      	mov	r6, r0
 800942c:	2800      	cmp	r0, #0
 800942e:	d1e1      	bne.n	80093f4 <__ssputs_r+0x70>
 8009430:	6921      	ldr	r1, [r4, #16]
 8009432:	4650      	mov	r0, sl
 8009434:	f7ff fec6 	bl	80091c4 <_free_r>
 8009438:	e7c7      	b.n	80093ca <__ssputs_r+0x46>
	...

0800943c <_svfiprintf_r>:
 800943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009440:	4698      	mov	r8, r3
 8009442:	898b      	ldrh	r3, [r1, #12]
 8009444:	061b      	lsls	r3, r3, #24
 8009446:	b09d      	sub	sp, #116	; 0x74
 8009448:	4607      	mov	r7, r0
 800944a:	460d      	mov	r5, r1
 800944c:	4614      	mov	r4, r2
 800944e:	d50e      	bpl.n	800946e <_svfiprintf_r+0x32>
 8009450:	690b      	ldr	r3, [r1, #16]
 8009452:	b963      	cbnz	r3, 800946e <_svfiprintf_r+0x32>
 8009454:	2140      	movs	r1, #64	; 0x40
 8009456:	f7ff ff21 	bl	800929c <_malloc_r>
 800945a:	6028      	str	r0, [r5, #0]
 800945c:	6128      	str	r0, [r5, #16]
 800945e:	b920      	cbnz	r0, 800946a <_svfiprintf_r+0x2e>
 8009460:	230c      	movs	r3, #12
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009468:	e0d1      	b.n	800960e <_svfiprintf_r+0x1d2>
 800946a:	2340      	movs	r3, #64	; 0x40
 800946c:	616b      	str	r3, [r5, #20]
 800946e:	2300      	movs	r3, #0
 8009470:	9309      	str	r3, [sp, #36]	; 0x24
 8009472:	2320      	movs	r3, #32
 8009474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009478:	f8cd 800c 	str.w	r8, [sp, #12]
 800947c:	2330      	movs	r3, #48	; 0x30
 800947e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009628 <_svfiprintf_r+0x1ec>
 8009482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009486:	f04f 0901 	mov.w	r9, #1
 800948a:	4623      	mov	r3, r4
 800948c:	469a      	mov	sl, r3
 800948e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009492:	b10a      	cbz	r2, 8009498 <_svfiprintf_r+0x5c>
 8009494:	2a25      	cmp	r2, #37	; 0x25
 8009496:	d1f9      	bne.n	800948c <_svfiprintf_r+0x50>
 8009498:	ebba 0b04 	subs.w	fp, sl, r4
 800949c:	d00b      	beq.n	80094b6 <_svfiprintf_r+0x7a>
 800949e:	465b      	mov	r3, fp
 80094a0:	4622      	mov	r2, r4
 80094a2:	4629      	mov	r1, r5
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff ff6d 	bl	8009384 <__ssputs_r>
 80094aa:	3001      	adds	r0, #1
 80094ac:	f000 80aa 	beq.w	8009604 <_svfiprintf_r+0x1c8>
 80094b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b2:	445a      	add	r2, fp
 80094b4:	9209      	str	r2, [sp, #36]	; 0x24
 80094b6:	f89a 3000 	ldrb.w	r3, [sl]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 80a2 	beq.w	8009604 <_svfiprintf_r+0x1c8>
 80094c0:	2300      	movs	r3, #0
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ca:	f10a 0a01 	add.w	sl, sl, #1
 80094ce:	9304      	str	r3, [sp, #16]
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094d6:	931a      	str	r3, [sp, #104]	; 0x68
 80094d8:	4654      	mov	r4, sl
 80094da:	2205      	movs	r2, #5
 80094dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e0:	4851      	ldr	r0, [pc, #324]	; (8009628 <_svfiprintf_r+0x1ec>)
 80094e2:	f7f6 fead 	bl	8000240 <memchr>
 80094e6:	9a04      	ldr	r2, [sp, #16]
 80094e8:	b9d8      	cbnz	r0, 8009522 <_svfiprintf_r+0xe6>
 80094ea:	06d0      	lsls	r0, r2, #27
 80094ec:	bf44      	itt	mi
 80094ee:	2320      	movmi	r3, #32
 80094f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f4:	0711      	lsls	r1, r2, #28
 80094f6:	bf44      	itt	mi
 80094f8:	232b      	movmi	r3, #43	; 0x2b
 80094fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009502:	2b2a      	cmp	r3, #42	; 0x2a
 8009504:	d015      	beq.n	8009532 <_svfiprintf_r+0xf6>
 8009506:	9a07      	ldr	r2, [sp, #28]
 8009508:	4654      	mov	r4, sl
 800950a:	2000      	movs	r0, #0
 800950c:	f04f 0c0a 	mov.w	ip, #10
 8009510:	4621      	mov	r1, r4
 8009512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009516:	3b30      	subs	r3, #48	; 0x30
 8009518:	2b09      	cmp	r3, #9
 800951a:	d94e      	bls.n	80095ba <_svfiprintf_r+0x17e>
 800951c:	b1b0      	cbz	r0, 800954c <_svfiprintf_r+0x110>
 800951e:	9207      	str	r2, [sp, #28]
 8009520:	e014      	b.n	800954c <_svfiprintf_r+0x110>
 8009522:	eba0 0308 	sub.w	r3, r0, r8
 8009526:	fa09 f303 	lsl.w	r3, r9, r3
 800952a:	4313      	orrs	r3, r2
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	46a2      	mov	sl, r4
 8009530:	e7d2      	b.n	80094d8 <_svfiprintf_r+0x9c>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	1d19      	adds	r1, r3, #4
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	9103      	str	r1, [sp, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	bfbb      	ittet	lt
 800953e:	425b      	neglt	r3, r3
 8009540:	f042 0202 	orrlt.w	r2, r2, #2
 8009544:	9307      	strge	r3, [sp, #28]
 8009546:	9307      	strlt	r3, [sp, #28]
 8009548:	bfb8      	it	lt
 800954a:	9204      	strlt	r2, [sp, #16]
 800954c:	7823      	ldrb	r3, [r4, #0]
 800954e:	2b2e      	cmp	r3, #46	; 0x2e
 8009550:	d10c      	bne.n	800956c <_svfiprintf_r+0x130>
 8009552:	7863      	ldrb	r3, [r4, #1]
 8009554:	2b2a      	cmp	r3, #42	; 0x2a
 8009556:	d135      	bne.n	80095c4 <_svfiprintf_r+0x188>
 8009558:	9b03      	ldr	r3, [sp, #12]
 800955a:	1d1a      	adds	r2, r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	9203      	str	r2, [sp, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	bfb8      	it	lt
 8009564:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009568:	3402      	adds	r4, #2
 800956a:	9305      	str	r3, [sp, #20]
 800956c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009638 <_svfiprintf_r+0x1fc>
 8009570:	7821      	ldrb	r1, [r4, #0]
 8009572:	2203      	movs	r2, #3
 8009574:	4650      	mov	r0, sl
 8009576:	f7f6 fe63 	bl	8000240 <memchr>
 800957a:	b140      	cbz	r0, 800958e <_svfiprintf_r+0x152>
 800957c:	2340      	movs	r3, #64	; 0x40
 800957e:	eba0 000a 	sub.w	r0, r0, sl
 8009582:	fa03 f000 	lsl.w	r0, r3, r0
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	4303      	orrs	r3, r0
 800958a:	3401      	adds	r4, #1
 800958c:	9304      	str	r3, [sp, #16]
 800958e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009592:	4826      	ldr	r0, [pc, #152]	; (800962c <_svfiprintf_r+0x1f0>)
 8009594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009598:	2206      	movs	r2, #6
 800959a:	f7f6 fe51 	bl	8000240 <memchr>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d038      	beq.n	8009614 <_svfiprintf_r+0x1d8>
 80095a2:	4b23      	ldr	r3, [pc, #140]	; (8009630 <_svfiprintf_r+0x1f4>)
 80095a4:	bb1b      	cbnz	r3, 80095ee <_svfiprintf_r+0x1b2>
 80095a6:	9b03      	ldr	r3, [sp, #12]
 80095a8:	3307      	adds	r3, #7
 80095aa:	f023 0307 	bic.w	r3, r3, #7
 80095ae:	3308      	adds	r3, #8
 80095b0:	9303      	str	r3, [sp, #12]
 80095b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b4:	4433      	add	r3, r6
 80095b6:	9309      	str	r3, [sp, #36]	; 0x24
 80095b8:	e767      	b.n	800948a <_svfiprintf_r+0x4e>
 80095ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80095be:	460c      	mov	r4, r1
 80095c0:	2001      	movs	r0, #1
 80095c2:	e7a5      	b.n	8009510 <_svfiprintf_r+0xd4>
 80095c4:	2300      	movs	r3, #0
 80095c6:	3401      	adds	r4, #1
 80095c8:	9305      	str	r3, [sp, #20]
 80095ca:	4619      	mov	r1, r3
 80095cc:	f04f 0c0a 	mov.w	ip, #10
 80095d0:	4620      	mov	r0, r4
 80095d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d6:	3a30      	subs	r2, #48	; 0x30
 80095d8:	2a09      	cmp	r2, #9
 80095da:	d903      	bls.n	80095e4 <_svfiprintf_r+0x1a8>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0c5      	beq.n	800956c <_svfiprintf_r+0x130>
 80095e0:	9105      	str	r1, [sp, #20]
 80095e2:	e7c3      	b.n	800956c <_svfiprintf_r+0x130>
 80095e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80095e8:	4604      	mov	r4, r0
 80095ea:	2301      	movs	r3, #1
 80095ec:	e7f0      	b.n	80095d0 <_svfiprintf_r+0x194>
 80095ee:	ab03      	add	r3, sp, #12
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	462a      	mov	r2, r5
 80095f4:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <_svfiprintf_r+0x1f8>)
 80095f6:	a904      	add	r1, sp, #16
 80095f8:	4638      	mov	r0, r7
 80095fa:	f3af 8000 	nop.w
 80095fe:	1c42      	adds	r2, r0, #1
 8009600:	4606      	mov	r6, r0
 8009602:	d1d6      	bne.n	80095b2 <_svfiprintf_r+0x176>
 8009604:	89ab      	ldrh	r3, [r5, #12]
 8009606:	065b      	lsls	r3, r3, #25
 8009608:	f53f af2c 	bmi.w	8009464 <_svfiprintf_r+0x28>
 800960c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800960e:	b01d      	add	sp, #116	; 0x74
 8009610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009614:	ab03      	add	r3, sp, #12
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	462a      	mov	r2, r5
 800961a:	4b06      	ldr	r3, [pc, #24]	; (8009634 <_svfiprintf_r+0x1f8>)
 800961c:	a904      	add	r1, sp, #16
 800961e:	4638      	mov	r0, r7
 8009620:	f000 f87a 	bl	8009718 <_printf_i>
 8009624:	e7eb      	b.n	80095fe <_svfiprintf_r+0x1c2>
 8009626:	bf00      	nop
 8009628:	08009dec 	.word	0x08009dec
 800962c:	08009df6 	.word	0x08009df6
 8009630:	00000000 	.word	0x00000000
 8009634:	08009385 	.word	0x08009385
 8009638:	08009df2 	.word	0x08009df2

0800963c <_printf_common>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	4616      	mov	r6, r2
 8009642:	4699      	mov	r9, r3
 8009644:	688a      	ldr	r2, [r1, #8]
 8009646:	690b      	ldr	r3, [r1, #16]
 8009648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800964c:	4293      	cmp	r3, r2
 800964e:	bfb8      	it	lt
 8009650:	4613      	movlt	r3, r2
 8009652:	6033      	str	r3, [r6, #0]
 8009654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009658:	4607      	mov	r7, r0
 800965a:	460c      	mov	r4, r1
 800965c:	b10a      	cbz	r2, 8009662 <_printf_common+0x26>
 800965e:	3301      	adds	r3, #1
 8009660:	6033      	str	r3, [r6, #0]
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	0699      	lsls	r1, r3, #26
 8009666:	bf42      	ittt	mi
 8009668:	6833      	ldrmi	r3, [r6, #0]
 800966a:	3302      	addmi	r3, #2
 800966c:	6033      	strmi	r3, [r6, #0]
 800966e:	6825      	ldr	r5, [r4, #0]
 8009670:	f015 0506 	ands.w	r5, r5, #6
 8009674:	d106      	bne.n	8009684 <_printf_common+0x48>
 8009676:	f104 0a19 	add.w	sl, r4, #25
 800967a:	68e3      	ldr	r3, [r4, #12]
 800967c:	6832      	ldr	r2, [r6, #0]
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	42ab      	cmp	r3, r5
 8009682:	dc26      	bgt.n	80096d2 <_printf_common+0x96>
 8009684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009688:	1e13      	subs	r3, r2, #0
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	bf18      	it	ne
 800968e:	2301      	movne	r3, #1
 8009690:	0692      	lsls	r2, r2, #26
 8009692:	d42b      	bmi.n	80096ec <_printf_common+0xb0>
 8009694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009698:	4649      	mov	r1, r9
 800969a:	4638      	mov	r0, r7
 800969c:	47c0      	blx	r8
 800969e:	3001      	adds	r0, #1
 80096a0:	d01e      	beq.n	80096e0 <_printf_common+0xa4>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	68e5      	ldr	r5, [r4, #12]
 80096a6:	6832      	ldr	r2, [r6, #0]
 80096a8:	f003 0306 	and.w	r3, r3, #6
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	bf08      	it	eq
 80096b0:	1aad      	subeq	r5, r5, r2
 80096b2:	68a3      	ldr	r3, [r4, #8]
 80096b4:	6922      	ldr	r2, [r4, #16]
 80096b6:	bf0c      	ite	eq
 80096b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096bc:	2500      	movne	r5, #0
 80096be:	4293      	cmp	r3, r2
 80096c0:	bfc4      	itt	gt
 80096c2:	1a9b      	subgt	r3, r3, r2
 80096c4:	18ed      	addgt	r5, r5, r3
 80096c6:	2600      	movs	r6, #0
 80096c8:	341a      	adds	r4, #26
 80096ca:	42b5      	cmp	r5, r6
 80096cc:	d11a      	bne.n	8009704 <_printf_common+0xc8>
 80096ce:	2000      	movs	r0, #0
 80096d0:	e008      	b.n	80096e4 <_printf_common+0xa8>
 80096d2:	2301      	movs	r3, #1
 80096d4:	4652      	mov	r2, sl
 80096d6:	4649      	mov	r1, r9
 80096d8:	4638      	mov	r0, r7
 80096da:	47c0      	blx	r8
 80096dc:	3001      	adds	r0, #1
 80096de:	d103      	bne.n	80096e8 <_printf_common+0xac>
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e8:	3501      	adds	r5, #1
 80096ea:	e7c6      	b.n	800967a <_printf_common+0x3e>
 80096ec:	18e1      	adds	r1, r4, r3
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	2030      	movs	r0, #48	; 0x30
 80096f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096f6:	4422      	add	r2, r4
 80096f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009700:	3302      	adds	r3, #2
 8009702:	e7c7      	b.n	8009694 <_printf_common+0x58>
 8009704:	2301      	movs	r3, #1
 8009706:	4622      	mov	r2, r4
 8009708:	4649      	mov	r1, r9
 800970a:	4638      	mov	r0, r7
 800970c:	47c0      	blx	r8
 800970e:	3001      	adds	r0, #1
 8009710:	d0e6      	beq.n	80096e0 <_printf_common+0xa4>
 8009712:	3601      	adds	r6, #1
 8009714:	e7d9      	b.n	80096ca <_printf_common+0x8e>
	...

08009718 <_printf_i>:
 8009718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	7e0f      	ldrb	r7, [r1, #24]
 800971e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009720:	2f78      	cmp	r7, #120	; 0x78
 8009722:	4691      	mov	r9, r2
 8009724:	4680      	mov	r8, r0
 8009726:	460c      	mov	r4, r1
 8009728:	469a      	mov	sl, r3
 800972a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800972e:	d807      	bhi.n	8009740 <_printf_i+0x28>
 8009730:	2f62      	cmp	r7, #98	; 0x62
 8009732:	d80a      	bhi.n	800974a <_printf_i+0x32>
 8009734:	2f00      	cmp	r7, #0
 8009736:	f000 80d8 	beq.w	80098ea <_printf_i+0x1d2>
 800973a:	2f58      	cmp	r7, #88	; 0x58
 800973c:	f000 80a3 	beq.w	8009886 <_printf_i+0x16e>
 8009740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009748:	e03a      	b.n	80097c0 <_printf_i+0xa8>
 800974a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800974e:	2b15      	cmp	r3, #21
 8009750:	d8f6      	bhi.n	8009740 <_printf_i+0x28>
 8009752:	a101      	add	r1, pc, #4	; (adr r1, 8009758 <_printf_i+0x40>)
 8009754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009758:	080097b1 	.word	0x080097b1
 800975c:	080097c5 	.word	0x080097c5
 8009760:	08009741 	.word	0x08009741
 8009764:	08009741 	.word	0x08009741
 8009768:	08009741 	.word	0x08009741
 800976c:	08009741 	.word	0x08009741
 8009770:	080097c5 	.word	0x080097c5
 8009774:	08009741 	.word	0x08009741
 8009778:	08009741 	.word	0x08009741
 800977c:	08009741 	.word	0x08009741
 8009780:	08009741 	.word	0x08009741
 8009784:	080098d1 	.word	0x080098d1
 8009788:	080097f5 	.word	0x080097f5
 800978c:	080098b3 	.word	0x080098b3
 8009790:	08009741 	.word	0x08009741
 8009794:	08009741 	.word	0x08009741
 8009798:	080098f3 	.word	0x080098f3
 800979c:	08009741 	.word	0x08009741
 80097a0:	080097f5 	.word	0x080097f5
 80097a4:	08009741 	.word	0x08009741
 80097a8:	08009741 	.word	0x08009741
 80097ac:	080098bb 	.word	0x080098bb
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	1d1a      	adds	r2, r3, #4
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	602a      	str	r2, [r5, #0]
 80097b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097c0:	2301      	movs	r3, #1
 80097c2:	e0a3      	b.n	800990c <_printf_i+0x1f4>
 80097c4:	6820      	ldr	r0, [r4, #0]
 80097c6:	6829      	ldr	r1, [r5, #0]
 80097c8:	0606      	lsls	r6, r0, #24
 80097ca:	f101 0304 	add.w	r3, r1, #4
 80097ce:	d50a      	bpl.n	80097e6 <_printf_i+0xce>
 80097d0:	680e      	ldr	r6, [r1, #0]
 80097d2:	602b      	str	r3, [r5, #0]
 80097d4:	2e00      	cmp	r6, #0
 80097d6:	da03      	bge.n	80097e0 <_printf_i+0xc8>
 80097d8:	232d      	movs	r3, #45	; 0x2d
 80097da:	4276      	negs	r6, r6
 80097dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e0:	485e      	ldr	r0, [pc, #376]	; (800995c <_printf_i+0x244>)
 80097e2:	230a      	movs	r3, #10
 80097e4:	e019      	b.n	800981a <_printf_i+0x102>
 80097e6:	680e      	ldr	r6, [r1, #0]
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097ee:	bf18      	it	ne
 80097f0:	b236      	sxthne	r6, r6
 80097f2:	e7ef      	b.n	80097d4 <_printf_i+0xbc>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	6820      	ldr	r0, [r4, #0]
 80097f8:	1d19      	adds	r1, r3, #4
 80097fa:	6029      	str	r1, [r5, #0]
 80097fc:	0601      	lsls	r1, r0, #24
 80097fe:	d501      	bpl.n	8009804 <_printf_i+0xec>
 8009800:	681e      	ldr	r6, [r3, #0]
 8009802:	e002      	b.n	800980a <_printf_i+0xf2>
 8009804:	0646      	lsls	r6, r0, #25
 8009806:	d5fb      	bpl.n	8009800 <_printf_i+0xe8>
 8009808:	881e      	ldrh	r6, [r3, #0]
 800980a:	4854      	ldr	r0, [pc, #336]	; (800995c <_printf_i+0x244>)
 800980c:	2f6f      	cmp	r7, #111	; 0x6f
 800980e:	bf0c      	ite	eq
 8009810:	2308      	moveq	r3, #8
 8009812:	230a      	movne	r3, #10
 8009814:	2100      	movs	r1, #0
 8009816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800981a:	6865      	ldr	r5, [r4, #4]
 800981c:	60a5      	str	r5, [r4, #8]
 800981e:	2d00      	cmp	r5, #0
 8009820:	bfa2      	ittt	ge
 8009822:	6821      	ldrge	r1, [r4, #0]
 8009824:	f021 0104 	bicge.w	r1, r1, #4
 8009828:	6021      	strge	r1, [r4, #0]
 800982a:	b90e      	cbnz	r6, 8009830 <_printf_i+0x118>
 800982c:	2d00      	cmp	r5, #0
 800982e:	d04d      	beq.n	80098cc <_printf_i+0x1b4>
 8009830:	4615      	mov	r5, r2
 8009832:	fbb6 f1f3 	udiv	r1, r6, r3
 8009836:	fb03 6711 	mls	r7, r3, r1, r6
 800983a:	5dc7      	ldrb	r7, [r0, r7]
 800983c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009840:	4637      	mov	r7, r6
 8009842:	42bb      	cmp	r3, r7
 8009844:	460e      	mov	r6, r1
 8009846:	d9f4      	bls.n	8009832 <_printf_i+0x11a>
 8009848:	2b08      	cmp	r3, #8
 800984a:	d10b      	bne.n	8009864 <_printf_i+0x14c>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	07de      	lsls	r6, r3, #31
 8009850:	d508      	bpl.n	8009864 <_printf_i+0x14c>
 8009852:	6923      	ldr	r3, [r4, #16]
 8009854:	6861      	ldr	r1, [r4, #4]
 8009856:	4299      	cmp	r1, r3
 8009858:	bfde      	ittt	le
 800985a:	2330      	movle	r3, #48	; 0x30
 800985c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009860:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009864:	1b52      	subs	r2, r2, r5
 8009866:	6122      	str	r2, [r4, #16]
 8009868:	f8cd a000 	str.w	sl, [sp]
 800986c:	464b      	mov	r3, r9
 800986e:	aa03      	add	r2, sp, #12
 8009870:	4621      	mov	r1, r4
 8009872:	4640      	mov	r0, r8
 8009874:	f7ff fee2 	bl	800963c <_printf_common>
 8009878:	3001      	adds	r0, #1
 800987a:	d14c      	bne.n	8009916 <_printf_i+0x1fe>
 800987c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009880:	b004      	add	sp, #16
 8009882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009886:	4835      	ldr	r0, [pc, #212]	; (800995c <_printf_i+0x244>)
 8009888:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800988c:	6829      	ldr	r1, [r5, #0]
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	f851 6b04 	ldr.w	r6, [r1], #4
 8009894:	6029      	str	r1, [r5, #0]
 8009896:	061d      	lsls	r5, r3, #24
 8009898:	d514      	bpl.n	80098c4 <_printf_i+0x1ac>
 800989a:	07df      	lsls	r7, r3, #31
 800989c:	bf44      	itt	mi
 800989e:	f043 0320 	orrmi.w	r3, r3, #32
 80098a2:	6023      	strmi	r3, [r4, #0]
 80098a4:	b91e      	cbnz	r6, 80098ae <_printf_i+0x196>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f023 0320 	bic.w	r3, r3, #32
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	2310      	movs	r3, #16
 80098b0:	e7b0      	b.n	8009814 <_printf_i+0xfc>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	f043 0320 	orr.w	r3, r3, #32
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	2378      	movs	r3, #120	; 0x78
 80098bc:	4828      	ldr	r0, [pc, #160]	; (8009960 <_printf_i+0x248>)
 80098be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098c2:	e7e3      	b.n	800988c <_printf_i+0x174>
 80098c4:	0659      	lsls	r1, r3, #25
 80098c6:	bf48      	it	mi
 80098c8:	b2b6      	uxthmi	r6, r6
 80098ca:	e7e6      	b.n	800989a <_printf_i+0x182>
 80098cc:	4615      	mov	r5, r2
 80098ce:	e7bb      	b.n	8009848 <_printf_i+0x130>
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	6826      	ldr	r6, [r4, #0]
 80098d4:	6961      	ldr	r1, [r4, #20]
 80098d6:	1d18      	adds	r0, r3, #4
 80098d8:	6028      	str	r0, [r5, #0]
 80098da:	0635      	lsls	r5, r6, #24
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	d501      	bpl.n	80098e4 <_printf_i+0x1cc>
 80098e0:	6019      	str	r1, [r3, #0]
 80098e2:	e002      	b.n	80098ea <_printf_i+0x1d2>
 80098e4:	0670      	lsls	r0, r6, #25
 80098e6:	d5fb      	bpl.n	80098e0 <_printf_i+0x1c8>
 80098e8:	8019      	strh	r1, [r3, #0]
 80098ea:	2300      	movs	r3, #0
 80098ec:	6123      	str	r3, [r4, #16]
 80098ee:	4615      	mov	r5, r2
 80098f0:	e7ba      	b.n	8009868 <_printf_i+0x150>
 80098f2:	682b      	ldr	r3, [r5, #0]
 80098f4:	1d1a      	adds	r2, r3, #4
 80098f6:	602a      	str	r2, [r5, #0]
 80098f8:	681d      	ldr	r5, [r3, #0]
 80098fa:	6862      	ldr	r2, [r4, #4]
 80098fc:	2100      	movs	r1, #0
 80098fe:	4628      	mov	r0, r5
 8009900:	f7f6 fc9e 	bl	8000240 <memchr>
 8009904:	b108      	cbz	r0, 800990a <_printf_i+0x1f2>
 8009906:	1b40      	subs	r0, r0, r5
 8009908:	6060      	str	r0, [r4, #4]
 800990a:	6863      	ldr	r3, [r4, #4]
 800990c:	6123      	str	r3, [r4, #16]
 800990e:	2300      	movs	r3, #0
 8009910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009914:	e7a8      	b.n	8009868 <_printf_i+0x150>
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	462a      	mov	r2, r5
 800991a:	4649      	mov	r1, r9
 800991c:	4640      	mov	r0, r8
 800991e:	47d0      	blx	sl
 8009920:	3001      	adds	r0, #1
 8009922:	d0ab      	beq.n	800987c <_printf_i+0x164>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	079b      	lsls	r3, r3, #30
 8009928:	d413      	bmi.n	8009952 <_printf_i+0x23a>
 800992a:	68e0      	ldr	r0, [r4, #12]
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	4298      	cmp	r0, r3
 8009930:	bfb8      	it	lt
 8009932:	4618      	movlt	r0, r3
 8009934:	e7a4      	b.n	8009880 <_printf_i+0x168>
 8009936:	2301      	movs	r3, #1
 8009938:	4632      	mov	r2, r6
 800993a:	4649      	mov	r1, r9
 800993c:	4640      	mov	r0, r8
 800993e:	47d0      	blx	sl
 8009940:	3001      	adds	r0, #1
 8009942:	d09b      	beq.n	800987c <_printf_i+0x164>
 8009944:	3501      	adds	r5, #1
 8009946:	68e3      	ldr	r3, [r4, #12]
 8009948:	9903      	ldr	r1, [sp, #12]
 800994a:	1a5b      	subs	r3, r3, r1
 800994c:	42ab      	cmp	r3, r5
 800994e:	dcf2      	bgt.n	8009936 <_printf_i+0x21e>
 8009950:	e7eb      	b.n	800992a <_printf_i+0x212>
 8009952:	2500      	movs	r5, #0
 8009954:	f104 0619 	add.w	r6, r4, #25
 8009958:	e7f5      	b.n	8009946 <_printf_i+0x22e>
 800995a:	bf00      	nop
 800995c:	08009dfd 	.word	0x08009dfd
 8009960:	08009e0e 	.word	0x08009e0e

08009964 <_sbrk_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d06      	ldr	r5, [pc, #24]	; (8009980 <_sbrk_r+0x1c>)
 8009968:	2300      	movs	r3, #0
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	f7f7 fc50 	bl	8001214 <_sbrk>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_sbrk_r+0x1a>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_sbrk_r+0x1a>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	20002750 	.word	0x20002750

08009984 <__sread>:
 8009984:	b510      	push	{r4, lr}
 8009986:	460c      	mov	r4, r1
 8009988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998c:	f000 f8f8 	bl	8009b80 <_read_r>
 8009990:	2800      	cmp	r0, #0
 8009992:	bfab      	itete	ge
 8009994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009996:	89a3      	ldrhlt	r3, [r4, #12]
 8009998:	181b      	addge	r3, r3, r0
 800999a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800999e:	bfac      	ite	ge
 80099a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80099a2:	81a3      	strhlt	r3, [r4, #12]
 80099a4:	bd10      	pop	{r4, pc}

080099a6 <__swrite>:
 80099a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099aa:	461f      	mov	r7, r3
 80099ac:	898b      	ldrh	r3, [r1, #12]
 80099ae:	05db      	lsls	r3, r3, #23
 80099b0:	4605      	mov	r5, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	4616      	mov	r6, r2
 80099b6:	d505      	bpl.n	80099c4 <__swrite+0x1e>
 80099b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099bc:	2302      	movs	r3, #2
 80099be:	2200      	movs	r2, #0
 80099c0:	f000 f868 	bl	8009a94 <_lseek_r>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	4632      	mov	r2, r6
 80099d2:	463b      	mov	r3, r7
 80099d4:	4628      	mov	r0, r5
 80099d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099da:	f000 b817 	b.w	8009a0c <_write_r>

080099de <__sseek>:
 80099de:	b510      	push	{r4, lr}
 80099e0:	460c      	mov	r4, r1
 80099e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e6:	f000 f855 	bl	8009a94 <_lseek_r>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	bf15      	itete	ne
 80099f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80099f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099fa:	81a3      	strheq	r3, [r4, #12]
 80099fc:	bf18      	it	ne
 80099fe:	81a3      	strhne	r3, [r4, #12]
 8009a00:	bd10      	pop	{r4, pc}

08009a02 <__sclose>:
 8009a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a06:	f000 b813 	b.w	8009a30 <_close_r>
	...

08009a0c <_write_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4d07      	ldr	r5, [pc, #28]	; (8009a2c <_write_r+0x20>)
 8009a10:	4604      	mov	r4, r0
 8009a12:	4608      	mov	r0, r1
 8009a14:	4611      	mov	r1, r2
 8009a16:	2200      	movs	r2, #0
 8009a18:	602a      	str	r2, [r5, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f7f7 fba9 	bl	8001172 <_write>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_write_r+0x1e>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_write_r+0x1e>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	20002750 	.word	0x20002750

08009a30 <_close_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d06      	ldr	r5, [pc, #24]	; (8009a4c <_close_r+0x1c>)
 8009a34:	2300      	movs	r3, #0
 8009a36:	4604      	mov	r4, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	602b      	str	r3, [r5, #0]
 8009a3c:	f7f7 fbb5 	bl	80011aa <_close>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_close_r+0x1a>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_close_r+0x1a>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20002750 	.word	0x20002750

08009a50 <_fstat_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4d07      	ldr	r5, [pc, #28]	; (8009a70 <_fstat_r+0x20>)
 8009a54:	2300      	movs	r3, #0
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	f7f7 fbb0 	bl	80011c2 <_fstat>
 8009a62:	1c43      	adds	r3, r0, #1
 8009a64:	d102      	bne.n	8009a6c <_fstat_r+0x1c>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	b103      	cbz	r3, 8009a6c <_fstat_r+0x1c>
 8009a6a:	6023      	str	r3, [r4, #0]
 8009a6c:	bd38      	pop	{r3, r4, r5, pc}
 8009a6e:	bf00      	nop
 8009a70:	20002750 	.word	0x20002750

08009a74 <_isatty_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4d06      	ldr	r5, [pc, #24]	; (8009a90 <_isatty_r+0x1c>)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	602b      	str	r3, [r5, #0]
 8009a80:	f7f7 fbaf 	bl	80011e2 <_isatty>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_isatty_r+0x1a>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_isatty_r+0x1a>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	20002750 	.word	0x20002750

08009a94 <_lseek_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d07      	ldr	r5, [pc, #28]	; (8009ab4 <_lseek_r+0x20>)
 8009a98:	4604      	mov	r4, r0
 8009a9a:	4608      	mov	r0, r1
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	602a      	str	r2, [r5, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f7f7 fba8 	bl	80011f8 <_lseek>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	d102      	bne.n	8009ab2 <_lseek_r+0x1e>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	b103      	cbz	r3, 8009ab2 <_lseek_r+0x1e>
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	20002750 	.word	0x20002750

08009ab8 <memcpy>:
 8009ab8:	440a      	add	r2, r1
 8009aba:	4291      	cmp	r1, r2
 8009abc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009ac0:	d100      	bne.n	8009ac4 <memcpy+0xc>
 8009ac2:	4770      	bx	lr
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ace:	4291      	cmp	r1, r2
 8009ad0:	d1f9      	bne.n	8009ac6 <memcpy+0xe>
 8009ad2:	bd10      	pop	{r4, pc}

08009ad4 <memmove>:
 8009ad4:	4288      	cmp	r0, r1
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	eb01 0402 	add.w	r4, r1, r2
 8009adc:	d902      	bls.n	8009ae4 <memmove+0x10>
 8009ade:	4284      	cmp	r4, r0
 8009ae0:	4623      	mov	r3, r4
 8009ae2:	d807      	bhi.n	8009af4 <memmove+0x20>
 8009ae4:	1e43      	subs	r3, r0, #1
 8009ae6:	42a1      	cmp	r1, r4
 8009ae8:	d008      	beq.n	8009afc <memmove+0x28>
 8009aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009af2:	e7f8      	b.n	8009ae6 <memmove+0x12>
 8009af4:	4402      	add	r2, r0
 8009af6:	4601      	mov	r1, r0
 8009af8:	428a      	cmp	r2, r1
 8009afa:	d100      	bne.n	8009afe <memmove+0x2a>
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b06:	e7f7      	b.n	8009af8 <memmove+0x24>

08009b08 <__malloc_lock>:
 8009b08:	4801      	ldr	r0, [pc, #4]	; (8009b10 <__malloc_lock+0x8>)
 8009b0a:	f7ff baf3 	b.w	80090f4 <__retarget_lock_acquire_recursive>
 8009b0e:	bf00      	nop
 8009b10:	20002744 	.word	0x20002744

08009b14 <__malloc_unlock>:
 8009b14:	4801      	ldr	r0, [pc, #4]	; (8009b1c <__malloc_unlock+0x8>)
 8009b16:	f7ff baee 	b.w	80090f6 <__retarget_lock_release_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	20002744 	.word	0x20002744

08009b20 <_realloc_r>:
 8009b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b24:	4680      	mov	r8, r0
 8009b26:	4614      	mov	r4, r2
 8009b28:	460e      	mov	r6, r1
 8009b2a:	b921      	cbnz	r1, 8009b36 <_realloc_r+0x16>
 8009b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b30:	4611      	mov	r1, r2
 8009b32:	f7ff bbb3 	b.w	800929c <_malloc_r>
 8009b36:	b92a      	cbnz	r2, 8009b44 <_realloc_r+0x24>
 8009b38:	f7ff fb44 	bl	80091c4 <_free_r>
 8009b3c:	4625      	mov	r5, r4
 8009b3e:	4628      	mov	r0, r5
 8009b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b44:	f000 f82e 	bl	8009ba4 <_malloc_usable_size_r>
 8009b48:	4284      	cmp	r4, r0
 8009b4a:	4607      	mov	r7, r0
 8009b4c:	d802      	bhi.n	8009b54 <_realloc_r+0x34>
 8009b4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b52:	d812      	bhi.n	8009b7a <_realloc_r+0x5a>
 8009b54:	4621      	mov	r1, r4
 8009b56:	4640      	mov	r0, r8
 8009b58:	f7ff fba0 	bl	800929c <_malloc_r>
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d0ed      	beq.n	8009b3e <_realloc_r+0x1e>
 8009b62:	42bc      	cmp	r4, r7
 8009b64:	4622      	mov	r2, r4
 8009b66:	4631      	mov	r1, r6
 8009b68:	bf28      	it	cs
 8009b6a:	463a      	movcs	r2, r7
 8009b6c:	f7ff ffa4 	bl	8009ab8 <memcpy>
 8009b70:	4631      	mov	r1, r6
 8009b72:	4640      	mov	r0, r8
 8009b74:	f7ff fb26 	bl	80091c4 <_free_r>
 8009b78:	e7e1      	b.n	8009b3e <_realloc_r+0x1e>
 8009b7a:	4635      	mov	r5, r6
 8009b7c:	e7df      	b.n	8009b3e <_realloc_r+0x1e>
	...

08009b80 <_read_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d07      	ldr	r5, [pc, #28]	; (8009ba0 <_read_r+0x20>)
 8009b84:	4604      	mov	r4, r0
 8009b86:	4608      	mov	r0, r1
 8009b88:	4611      	mov	r1, r2
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	602a      	str	r2, [r5, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f7f7 fad2 	bl	8001138 <_read>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_read_r+0x1e>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_read_r+0x1e>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	20002750 	.word	0x20002750

08009ba4 <_malloc_usable_size_r>:
 8009ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba8:	1f18      	subs	r0, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	bfbc      	itt	lt
 8009bae:	580b      	ldrlt	r3, [r1, r0]
 8009bb0:	18c0      	addlt	r0, r0, r3
 8009bb2:	4770      	bx	lr

08009bb4 <_init>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	bf00      	nop
 8009bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bba:	bc08      	pop	{r3}
 8009bbc:	469e      	mov	lr, r3
 8009bbe:	4770      	bx	lr

08009bc0 <_fini>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	bf00      	nop
 8009bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc6:	bc08      	pop	{r3}
 8009bc8:	469e      	mov	lr, r3
 8009bca:	4770      	bx	lr
